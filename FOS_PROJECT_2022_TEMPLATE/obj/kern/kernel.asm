
obj/kern/kernel:     file format elf32-i386


Disassembly of section .text:

f0100000 <start_of_kernel-0xc>:
.long MULTIBOOT_HEADER_FLAGS
.long CHECKSUM

.globl		start_of_kernel
start_of_kernel:
	movw	$0x1234,0x472			# warm boot
f0100000:	02 b0 ad 1b 03 00    	add    0x31bad(%eax),%dh
f0100006:	00 00                	add    %al,(%eax)
f0100008:	fb                   	sti    
f0100009:	4f                   	dec    %edi
f010000a:	52                   	push   %edx
f010000b:	e4                   	.byte 0xe4

f010000c <start_of_kernel>:
f010000c:	66 c7 05 72 04 00 00 	movw   $0x1234,0x472
f0100013:	34 12 

	# Establish our own GDT in place of the boot loader's temporary GDT.
	lgdt	RELOC(mygdtdesc)		# load descriptor table
f0100015:	0f 01 15 18 00 19 00 	lgdtl  0x190018

	# Immediately reload all segment registers (including CS!)
	# with segment selectors from the new GDT.
	movl	$DATA_SEL, %eax			# Data segment selector
f010001c:	b8 10 00 00 00       	mov    $0x10,%eax
	movw	%ax,%ds				# -> DS: Data Segment
f0100021:	8e d8                	mov    %eax,%ds
	movw	%ax,%es				# -> ES: Extra Segment
f0100023:	8e c0                	mov    %eax,%es
	movw	%ax,%ss				# -> SS: Stack Segment
f0100025:	8e d0                	mov    %eax,%ss
	ljmp	$CODE_SEL,$relocated		# reload CS by jumping
f0100027:	ea 2e 00 10 f0 08 00 	ljmp   $0x8,$0xf010002e

f010002e <relocated>:
relocated:

	# Clear the frame pointer register (EBP)
	# so that once we get into debugging C code,
	# stack backtraces will be terminated properly.
	movl	$0x0,%ebp			# nuke frame pointer
f010002e:	bd 00 00 00 00       	mov    $0x0,%ebp

        # Leave a few words on the stack for the user trap frame
	movl	$(ptr_stack_top-SIZEOF_STRUCT_TRAPFRAME),%esp
f0100033:	bc bc ff 18 f0       	mov    $0xf018ffbc,%esp

	# now to C code
	call	FOS_initialize
f0100038:	e8 22 00 00 00       	call   f010005f <FOS_initialize>

f010003d <spin>:

	# Should never get here, but in case we do, just spin.
spin:	jmp	spin
f010003d:	eb fe                	jmp    f010003d <spin>

f010003f <setKHeapPlacementStrategyFIRSTFIT>:
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f010003f:	55                   	push   %ebp
f0100040:	89 e5                	mov    %esp,%ebp
f0100042:	c7 05 b8 84 6e f0 01 	movl   $0x1,0xf06e84b8
f0100049:	00 00 00 
f010004c:	90                   	nop
f010004d:	5d                   	pop    %ebp
f010004e:	c3                   	ret    

f010004f <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f010004f:	55                   	push   %ebp
f0100050:	89 e5                	mov    %esp,%ebp
f0100052:	c7 05 8c 84 6e f0 01 	movl   $0x1,0xf06e848c
f0100059:	00 00 00 
f010005c:	90                   	nop
f010005d:	5d                   	pop    %ebp
f010005e:	c3                   	ret    

f010005f <FOS_initialize>:
void print_welcome_message();
//=======================================

//First ever function called in FOS kernel
void FOS_initialize()
{
f010005f:	55                   	push   %ebp
f0100060:	89 e5                	mov    %esp,%ebp
f0100062:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_uninitialized_data_section[], end_of_kernel[];

	// Before doing anything else,
	// clear the uninitialized global data (BSS) section of our program, from start_of_uninitialized_data_section to end_of_kernel
	// This ensures that all static/global variables start with zero value.
	memset(start_of_uninitialized_data_section, 0, end_of_kernel - start_of_uninitialized_data_section);
f0100065:	ba 1c 86 6e f0       	mov    $0xf06e861c,%edx
f010006a:	b8 cc 84 65 f0       	mov    $0xf06584cc,%eax
f010006f:	29 c2                	sub    %eax,%edx
f0100071:	89 d0                	mov    %edx,%eax
f0100073:	83 ec 04             	sub    $0x4,%esp
f0100076:	50                   	push   %eax
f0100077:	6a 00                	push   $0x0
f0100079:	68 cc 84 65 f0       	push   $0xf06584cc
f010007e:	e8 a8 05 03 00       	call   f013062b <memset>
f0100083:	83 c4 10             	add    $0x10,%esp

	// Initialize the console.
	// Can't call cprintf until after we do this!
	console_initialize();
f0100086:	e8 ee 0a 00 00       	call   f0100b79 <console_initialize>

	//print welcome message
	print_welcome_message();
f010008b:	e8 9d 00 00 00       	call   f010012d <print_welcome_message>

	// Lab 2 memory management initialization functions
	detect_memory();
f0100090:	e8 fd 5f 00 00       	call   f0106092 <detect_memory>
	initialize_kernel_VM();
f0100095:	e8 96 5b 00 00       	call   f0105c30 <initialize_kernel_VM>
	initialize_paging();
f010009a:	e8 44 63 00 00       	call   f01063e3 <initialize_paging>
	//	page_check();

	//Project initializations

	setPageReplacmentAlgorithmCLOCK();
f010009f:	e8 83 d1 00 00       	call   f010d227 <setPageReplacmentAlgorithmCLOCK>
	setUHeapPlacementStrategyFIRSTFIT();
f01000a4:	e8 a6 ff ff ff       	call   f010004f <setUHeapPlacementStrategyFIRSTFIT>
	setKHeapPlacementStrategyFIRSTFIT();
f01000a9:	e8 91 ff ff ff       	call   f010003f <setKHeapPlacementStrategyFIRSTFIT>
		test_initialize_dyn_block_system(freeFrames_before, freeDiskFrames_before, freeFrames_after, freeDiskFrames_after);
	}
	MAX_SHARES = (KERNEL_SHARES_ARR_INIT_SIZE) / sizeof(struct Share);
	MAX_SEMAPHORES = (KERNEL_SEMAPHORES_ARR_INIT_SIZE) / sizeof(struct Semaphore);
#endif
	create_shares_array(MAX_SHARES);
f01000ae:	83 ec 0c             	sub    $0xc,%esp
f01000b1:	6a 64                	push   $0x64
f01000b3:	e8 6a 6e 00 00       	call   f0106f22 <create_shares_array>
f01000b8:	83 c4 10             	add    $0x10,%esp
	create_semaphores_array(MAX_SEMAPHORES);
f01000bb:	83 ec 0c             	sub    $0xc,%esp
f01000be:	6a 64                	push   $0x64
f01000c0:	e8 f5 d2 00 00       	call   f010d3ba <create_semaphores_array>
f01000c5:	83 c4 10             	add    $0x10,%esp

	// Lab 3 user environment initialization functions
	env_init();
f01000c8:	e8 0e 91 00 00       	call   f01091db <env_init>
	idt_init();
f01000cd:	e8 bf a6 00 00       	call   f010a791 <idt_init>

	enableBuffering(0);
f01000d2:	83 ec 0c             	sub    $0xc,%esp
f01000d5:	6a 00                	push   $0x0
f01000d7:	e8 58 d2 00 00       	call   f010d334 <enableBuffering>
f01000dc:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0) ;
f01000df:	83 ec 0c             	sub    $0xc,%esp
f01000e2:	6a 00                	push   $0x0
f01000e4:	e8 33 d2 00 00       	call   f010d31c <enableModifiedBuffer>
f01000e9:	83 c4 10             	add    $0x10,%esp
	setModifiedBufferLength(1000);
f01000ec:	83 ec 0c             	sub    $0xc,%esp
f01000ef:	68 e8 03 00 00       	push   $0x3e8
f01000f4:	e8 53 d2 00 00       	call   f010d34c <setModifiedBufferLength>
f01000f9:	83 c4 10             	add    $0x10,%esp

	// Lab 4 multitasking initialization functions
	pic_init();
f01000fc:	e8 a9 59 00 00       	call   f0105aaa <pic_init>
	sched_init() ;
f0100101:	e8 4d 46 00 00       	call   f0104753 <sched_init>
	//Project initializations

	// start the kernel command prompt.
	while (1==1)
	{
		cprintf("\nWelcome to the FOS kernel command prompt!\n");
f0100106:	83 ec 0c             	sub    $0xc,%esp
f0100109:	68 00 26 13 f0       	push   $0xf0132600
f010010e:	e8 1a 0b 00 00       	call   f0100c2d <cprintf>
f0100113:	83 c4 10             	add    $0x10,%esp
		cprintf("Type 'help' for a list of commands.\n");
f0100116:	83 ec 0c             	sub    $0xc,%esp
f0100119:	68 2c 26 13 f0       	push   $0xf013262c
f010011e:	e8 0a 0b 00 00       	call   f0100c2d <cprintf>
f0100123:	83 c4 10             	add    $0x10,%esp
		run_command_prompt();
f0100126:	e8 28 0b 00 00       	call   f0100c53 <run_command_prompt>
	}
f010012b:	eb d9                	jmp    f0100106 <FOS_initialize+0xa7>

f010012d <print_welcome_message>:
}


void print_welcome_message()
{
f010012d:	55                   	push   %ebp
f010012e:	89 e5                	mov    %esp,%ebp
f0100130:	83 ec 08             	sub    $0x8,%esp
	cprintf("\n\n\n");
f0100133:	83 ec 0c             	sub    $0xc,%esp
f0100136:	68 51 26 13 f0       	push   $0xf0132651
f010013b:	e8 ed 0a 00 00       	call   f0100c2d <cprintf>
f0100140:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100143:	83 ec 0c             	sub    $0xc,%esp
f0100146:	68 58 26 13 f0       	push   $0xf0132658
f010014b:	e8 dd 0a 00 00       	call   f0100c2d <cprintf>
f0100150:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100153:	83 ec 0c             	sub    $0xc,%esp
f0100156:	68 a0 26 13 f0       	push   $0xf01326a0
f010015b:	e8 cd 0a 00 00       	call   f0100c2d <cprintf>
f0100160:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                   !! FCIS says HELLO !!                     !!\n");
f0100163:	83 ec 0c             	sub    $0xc,%esp
f0100166:	68 e8 26 13 f0       	push   $0xf01326e8
f010016b:	e8 bd 0a 00 00       	call   f0100c2d <cprintf>
f0100170:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!                                                             !!\n");
f0100173:	83 ec 0c             	sub    $0xc,%esp
f0100176:	68 a0 26 13 f0       	push   $0xf01326a0
f010017b:	e8 ad 0a 00 00       	call   f0100c2d <cprintf>
f0100180:	83 c4 10             	add    $0x10,%esp
	cprintf("\t\t!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n");
f0100183:	83 ec 0c             	sub    $0xc,%esp
f0100186:	68 58 26 13 f0       	push   $0xf0132658
f010018b:	e8 9d 0a 00 00       	call   f0100c2d <cprintf>
f0100190:	83 c4 10             	add    $0x10,%esp
	cprintf("\n\n\n\n");
f0100193:	83 ec 0c             	sub    $0xc,%esp
f0100196:	68 2d 27 13 f0       	push   $0xf013272d
f010019b:	e8 8d 0a 00 00       	call   f0100c2d <cprintf>
f01001a0:	83 c4 10             	add    $0x10,%esp
}
f01001a3:	90                   	nop
f01001a4:	c9                   	leave  
f01001a5:	c3                   	ret    

f01001a6 <_panic>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv and schedule the next environment.
 */
void _panic(const char *file, int line, const char *fmt,...)
{
f01001a6:	55                   	push   %ebp
f01001a7:	89 e5                	mov    %esp,%ebp
f01001a9:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f01001ac:	8b 45 10             	mov    0x10(%ebp),%eax
f01001af:	a3 e0 84 65 f0       	mov    %eax,0xf06584e0

	va_start(ap, fmt);
f01001b4:	8d 45 10             	lea    0x10(%ebp),%eax
f01001b7:	83 c0 04             	add    $0x4,%eax
f01001ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01001bd:	83 ec 04             	sub    $0x4,%esp
f01001c0:	ff 75 0c             	pushl  0xc(%ebp)
f01001c3:	ff 75 08             	pushl  0x8(%ebp)
f01001c6:	68 32 27 13 f0       	push   $0xf0132732
f01001cb:	e8 5d 0a 00 00       	call   f0100c2d <cprintf>
f01001d0:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01001d3:	8b 45 10             	mov    0x10(%ebp),%eax
f01001d6:	83 ec 08             	sub    $0x8,%esp
f01001d9:	ff 75 f4             	pushl  -0xc(%ebp)
f01001dc:	50                   	push   %eax
f01001dd:	e8 22 0a 00 00       	call   f0100c04 <vcprintf>
f01001e2:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01001e5:	83 ec 0c             	sub    $0xc,%esp
f01001e8:	68 4b 27 13 f0       	push   $0xf013274b
f01001ed:	e8 3b 0a 00 00       	call   f0100c2d <cprintf>
f01001f2:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01001f5:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01001fa:	85 c0                	test   %eax,%eax
f01001fc:	74 12                	je     f0100210 <_panic+0x6a>
f01001fe:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f0100203:	8b 40 54             	mov    0x54(%eax),%eax
f0100206:	83 f8 02             	cmp    $0x2,%eax
f0100209:	75 05                	jne    f0100210 <_panic+0x6a>
	{
		//2015
		env_exit();
f010020b:	e8 b0 8e 00 00       	call   f01090c0 <env_exit>
		//env_run_cmd_prmpt() ;
	}

	//2015
	fos_scheduler();
f0100210:	e8 de 43 00 00       	call   f01045f3 <fos_scheduler>

f0100215 <_panic_all>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit all env's and then enters the kernel command prompt.
 */
void _panic_all(const char *file, int line, const char *fmt,...)
{
f0100215:	55                   	push   %ebp
f0100216:	89 e5                	mov    %esp,%ebp
f0100218:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f010021b:	8b 45 10             	mov    0x10(%ebp),%eax
f010021e:	a3 e0 84 65 f0       	mov    %eax,0xf06584e0

	va_start(ap, fmt);
f0100223:	8d 45 10             	lea    0x10(%ebp),%eax
f0100226:	83 c0 04             	add    $0x4,%eax
f0100229:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f010022c:	83 ec 04             	sub    $0x4,%esp
f010022f:	ff 75 0c             	pushl  0xc(%ebp)
f0100232:	ff 75 08             	pushl  0x8(%ebp)
f0100235:	68 32 27 13 f0       	push   $0xf0132732
f010023a:	e8 ee 09 00 00       	call   f0100c2d <cprintf>
f010023f:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100242:	8b 45 10             	mov    0x10(%ebp),%eax
f0100245:	83 ec 08             	sub    $0x8,%esp
f0100248:	ff 75 f4             	pushl  -0xc(%ebp)
f010024b:	50                   	push   %eax
f010024c:	e8 b3 09 00 00       	call   f0100c04 <vcprintf>
f0100251:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100254:	83 ec 0c             	sub    $0xc,%esp
f0100257:	68 4b 27 13 f0       	push   $0xf013274b
f010025c:	e8 cc 09 00 00       	call   f0100c2d <cprintf>
f0100261:	83 c4 10             	add    $0x10,%esp

	dead:
	/* break into the fos scheduler */

	//exit all ready env's
	sched_exit_all_ready_envs();
f0100264:	e8 f4 50 00 00       	call   f010535d <sched_exit_all_ready_envs>
	if (curenv != NULL)
f0100269:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010026e:	85 c0                	test   %eax,%eax
f0100270:	74 14                	je     f0100286 <_panic_all+0x71>
	{
		//cprintf("exit curenv...........\n");
		sched_exit_env(curenv->env_id);
f0100272:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f0100277:	8b 40 4c             	mov    0x4c(%eax),%eax
f010027a:	83 ec 0c             	sub    $0xc,%esp
f010027d:	50                   	push   %eax
f010027e:	e8 9a 4e 00 00       	call   f010511d <sched_exit_env>
f0100283:	83 c4 10             	add    $0x10,%esp
		//env_run_cmd_prmpt() ;
	}

	fos_scheduler();
f0100286:	e8 68 43 00 00       	call   f01045f3 <fos_scheduler>

f010028b <_panic_into_prompt>:
/*
 * Panic is called on unresolvable fatal errors.
 * It prints "panic: mesg", exit the curenv (if any) and break into the command prompt.
 */
void _panic_into_prompt(const char *file, int line, const char *fmt,...)
{
f010028b:	55                   	push   %ebp
f010028c:	89 e5                	mov    %esp,%ebp
f010028e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	//if (panicstr)
	//	goto dead;
	panicstr = fmt;
f0100291:	8b 45 10             	mov    0x10(%ebp),%eax
f0100294:	a3 e0 84 65 f0       	mov    %eax,0xf06584e0

	va_start(ap, fmt);
f0100299:	8d 45 10             	lea    0x10(%ebp),%eax
f010029c:	83 c0 04             	add    $0x4,%eax
f010029f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel panic at %s:%d: ", file, line);
f01002a2:	83 ec 04             	sub    $0x4,%esp
f01002a5:	ff 75 0c             	pushl  0xc(%ebp)
f01002a8:	ff 75 08             	pushl  0x8(%ebp)
f01002ab:	68 32 27 13 f0       	push   $0xf0132732
f01002b0:	e8 78 09 00 00       	call   f0100c2d <cprintf>
f01002b5:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f01002b8:	8b 45 10             	mov    0x10(%ebp),%eax
f01002bb:	83 ec 08             	sub    $0x8,%esp
f01002be:	ff 75 f4             	pushl  -0xc(%ebp)
f01002c1:	50                   	push   %eax
f01002c2:	e8 3d 09 00 00       	call   f0100c04 <vcprintf>
f01002c7:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f01002ca:	83 ec 0c             	sub    $0xc,%esp
f01002cd:	68 4b 27 13 f0       	push   $0xf013274b
f01002d2:	e8 56 09 00 00       	call   f0100c2d <cprintf>
f01002d7:	83 c4 10             	add    $0x10,%esp
	va_end(ap);

	dead:
	/* break into the fos scheduler */
	//2013: Check if the panic occur when running an environment
	if (curenv != NULL && curenv->env_status == ENV_RUNNABLE)
f01002da:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01002df:	85 c0                	test   %eax,%eax
f01002e1:	74 28                	je     f010030b <_panic_into_prompt+0x80>
f01002e3:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01002e8:	8b 40 54             	mov    0x54(%eax),%eax
f01002eb:	83 f8 02             	cmp    $0x2,%eax
f01002ee:	75 1b                	jne    f010030b <_panic_into_prompt+0x80>
	{
		sched_insert_exit(curenv);
f01002f0:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01002f5:	83 ec 0c             	sub    $0xc,%esp
f01002f8:	50                   	push   %eax
f01002f9:	e8 cf 46 00 00       	call   f01049cd <sched_insert_exit>
f01002fe:	83 c4 10             	add    $0x10,%esp
		curenv = NULL;
f0100301:	c7 05 34 87 65 f0 00 	movl   $0x0,0xf0658734
f0100308:	00 00 00 
	}

	lcr3(phys_page_directory);
f010030b:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f0100310:	89 45 f0             	mov    %eax,-0x10(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0100313:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100316:	0f 22 d8             	mov    %eax,%cr3

	scheduler_status = SCH_STOPPED;
f0100319:	c7 05 b4 84 6e f0 00 	movl   $0x0,0xf06e84b4
f0100320:	00 00 00 
	while (1)
		run_command_prompt(NULL);
f0100323:	83 ec 0c             	sub    $0xc,%esp
f0100326:	6a 00                	push   $0x0
f0100328:	e8 26 09 00 00       	call   f0100c53 <run_command_prompt>
f010032d:	83 c4 10             	add    $0x10,%esp
f0100330:	eb f1                	jmp    f0100323 <_panic_into_prompt+0x98>

f0100332 <_warn>:
}

/* like panic, but don't enters the kernel command prompt*/
void _warn(const char *file, int line, const char *fmt,...)
{
f0100332:	55                   	push   %ebp
f0100333:	89 e5                	mov    %esp,%ebp
f0100335:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f0100338:	8d 45 10             	lea    0x10(%ebp),%eax
f010033b:	83 c0 04             	add    $0x4,%eax
f010033e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cprintf("\nkernel warning at %s:%d: ", file, line);
f0100341:	83 ec 04             	sub    $0x4,%esp
f0100344:	ff 75 0c             	pushl  0xc(%ebp)
f0100347:	ff 75 08             	pushl  0x8(%ebp)
f010034a:	68 4d 27 13 f0       	push   $0xf013274d
f010034f:	e8 d9 08 00 00       	call   f0100c2d <cprintf>
f0100354:	83 c4 10             	add    $0x10,%esp
	vcprintf(fmt, ap);
f0100357:	8b 45 10             	mov    0x10(%ebp),%eax
f010035a:	83 ec 08             	sub    $0x8,%esp
f010035d:	ff 75 f4             	pushl  -0xc(%ebp)
f0100360:	50                   	push   %eax
f0100361:	e8 9e 08 00 00       	call   f0100c04 <vcprintf>
f0100366:	83 c4 10             	add    $0x10,%esp
	cprintf("\n");
f0100369:	83 ec 0c             	sub    $0xc,%esp
f010036c:	68 4b 27 13 f0       	push   $0xf013274b
f0100371:	e8 b7 08 00 00       	call   f0100c2d <cprintf>
f0100376:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f0100379:	90                   	nop
f010037a:	c9                   	leave  
f010037b:	c3                   	ret    

f010037c <serial_proc_data>:

static bool serial_exists;

int
serial_proc_data(void)
{
f010037c:	55                   	push   %ebp
f010037d:	89 e5                	mov    %esp,%ebp
f010037f:	83 ec 10             	sub    $0x10,%esp
f0100382:	c7 45 f8 fd 03 00 00 	movl   $0x3fd,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100389:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010038c:	89 c2                	mov    %eax,%edx
f010038e:	ec                   	in     (%dx),%al
f010038f:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0100392:	8a 45 f7             	mov    -0x9(%ebp),%al
	if (!(inb(COM1+COM_LSR) & COM_LSR_DATA))
f0100395:	0f b6 c0             	movzbl %al,%eax
f0100398:	83 e0 01             	and    $0x1,%eax
f010039b:	85 c0                	test   %eax,%eax
f010039d:	75 07                	jne    f01003a6 <serial_proc_data+0x2a>
		return -1;
f010039f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f01003a4:	eb 16                	jmp    f01003bc <serial_proc_data+0x40>
f01003a6:	c7 45 fc f8 03 00 00 	movl   $0x3f8,-0x4(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01003ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01003b0:	89 c2                	mov    %eax,%edx
f01003b2:	ec                   	in     (%dx),%al
f01003b3:	88 45 f6             	mov    %al,-0xa(%ebp)
	return data;
f01003b6:	8a 45 f6             	mov    -0xa(%ebp),%al
	return inb(COM1+COM_RX);
f01003b9:	0f b6 c0             	movzbl %al,%eax
}
f01003bc:	c9                   	leave  
f01003bd:	c3                   	ret    

f01003be <serial_intr>:

void
serial_intr(void)
{
f01003be:	55                   	push   %ebp
f01003bf:	89 e5                	mov    %esp,%ebp
f01003c1:	83 ec 08             	sub    $0x8,%esp
	if (serial_exists)
f01003c4:	a1 00 85 65 f0       	mov    0xf0658500,%eax
f01003c9:	85 c0                	test   %eax,%eax
f01003cb:	74 10                	je     f01003dd <serial_intr+0x1f>
		cons_intr(serial_proc_data);
f01003cd:	83 ec 0c             	sub    $0xc,%esp
f01003d0:	68 7c 03 10 f0       	push   $0xf010037c
f01003d5:	e8 e4 05 00 00       	call   f01009be <cons_intr>
f01003da:	83 c4 10             	add    $0x10,%esp
}
f01003dd:	90                   	nop
f01003de:	c9                   	leave  
f01003df:	c3                   	ret    

f01003e0 <serial_init>:

void
serial_init(void)
{
f01003e0:	55                   	push   %ebp
f01003e1:	89 e5                	mov    %esp,%ebp
f01003e3:	83 ec 40             	sub    $0x40,%esp
f01003e6:	c7 45 fc fa 03 00 00 	movl   $0x3fa,-0x4(%ebp)
f01003ed:	c6 45 ce 00          	movb   $0x0,-0x32(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01003f1:	8a 45 ce             	mov    -0x32(%ebp),%al
f01003f4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01003f7:	ee                   	out    %al,(%dx)
f01003f8:	c7 45 f8 fb 03 00 00 	movl   $0x3fb,-0x8(%ebp)
f01003ff:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
f0100403:	8a 45 cf             	mov    -0x31(%ebp),%al
f0100406:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100409:	ee                   	out    %al,(%dx)
f010040a:	c7 45 f4 f8 03 00 00 	movl   $0x3f8,-0xc(%ebp)
f0100411:	c6 45 d0 0c          	movb   $0xc,-0x30(%ebp)
f0100415:	8a 45 d0             	mov    -0x30(%ebp),%al
f0100418:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010041b:	ee                   	out    %al,(%dx)
f010041c:	c7 45 f0 f9 03 00 00 	movl   $0x3f9,-0x10(%ebp)
f0100423:	c6 45 d1 00          	movb   $0x0,-0x2f(%ebp)
f0100427:	8a 45 d1             	mov    -0x2f(%ebp),%al
f010042a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010042d:	ee                   	out    %al,(%dx)
f010042e:	c7 45 ec fb 03 00 00 	movl   $0x3fb,-0x14(%ebp)
f0100435:	c6 45 d2 03          	movb   $0x3,-0x2e(%ebp)
f0100439:	8a 45 d2             	mov    -0x2e(%ebp),%al
f010043c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010043f:	ee                   	out    %al,(%dx)
f0100440:	c7 45 e8 fc 03 00 00 	movl   $0x3fc,-0x18(%ebp)
f0100447:	c6 45 d3 00          	movb   $0x0,-0x2d(%ebp)
f010044b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f010044e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100451:	ee                   	out    %al,(%dx)
f0100452:	c7 45 e4 f9 03 00 00 	movl   $0x3f9,-0x1c(%ebp)
f0100459:	c6 45 d4 01          	movb   $0x1,-0x2c(%ebp)
f010045d:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0100460:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100463:	ee                   	out    %al,(%dx)
f0100464:	c7 45 e0 fd 03 00 00 	movl   $0x3fd,-0x20(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010046b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010046e:	89 c2                	mov    %eax,%edx
f0100470:	ec                   	in     (%dx),%al
f0100471:	88 45 d5             	mov    %al,-0x2b(%ebp)
	return data;
f0100474:	8a 45 d5             	mov    -0x2b(%ebp),%al
	// Enable rcv interrupts
	outb(COM1+COM_IER, COM_IER_RDI);

	// Clear any preexisting overrun indications and interrupts
	// Serial port doesn't exist if COM_LSR returns 0xFF
	serial_exists = (inb(COM1+COM_LSR) != 0xFF);
f0100477:	3c ff                	cmp    $0xff,%al
f0100479:	0f 95 c0             	setne  %al
f010047c:	0f b6 c0             	movzbl %al,%eax
f010047f:	a3 00 85 65 f0       	mov    %eax,0xf0658500
f0100484:	c7 45 dc fa 03 00 00 	movl   $0x3fa,-0x24(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010048b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010048e:	89 c2                	mov    %eax,%edx
f0100490:	ec                   	in     (%dx),%al
f0100491:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0100494:	c7 45 d8 f8 03 00 00 	movl   $0x3f8,-0x28(%ebp)
f010049b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010049e:	89 c2                	mov    %eax,%edx
f01004a0:	ec                   	in     (%dx),%al
f01004a1:	88 45 d7             	mov    %al,-0x29(%ebp)
	(void) inb(COM1+COM_IIR);
	(void) inb(COM1+COM_RX);

}
f01004a4:	90                   	nop
f01004a5:	c9                   	leave  
f01004a6:	c3                   	ret    

f01004a7 <delay>:
// page.

// Stupid I/O delay routine necessitated by historical PC design flaws
static void
delay(void)
{
f01004a7:	55                   	push   %ebp
f01004a8:	89 e5                	mov    %esp,%ebp
f01004aa:	83 ec 20             	sub    $0x20,%esp
f01004ad:	c7 45 fc 84 00 00 00 	movl   $0x84,-0x4(%ebp)
f01004b4:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01004b7:	89 c2                	mov    %eax,%edx
f01004b9:	ec                   	in     (%dx),%al
f01004ba:	88 45 ec             	mov    %al,-0x14(%ebp)
f01004bd:	c7 45 f8 84 00 00 00 	movl   $0x84,-0x8(%ebp)
f01004c4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01004c7:	89 c2                	mov    %eax,%edx
f01004c9:	ec                   	in     (%dx),%al
f01004ca:	88 45 ed             	mov    %al,-0x13(%ebp)
f01004cd:	c7 45 f4 84 00 00 00 	movl   $0x84,-0xc(%ebp)
f01004d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01004d7:	89 c2                	mov    %eax,%edx
f01004d9:	ec                   	in     (%dx),%al
f01004da:	88 45 ee             	mov    %al,-0x12(%ebp)
f01004dd:	c7 45 f0 84 00 00 00 	movl   $0x84,-0x10(%ebp)
f01004e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01004e7:	89 c2                	mov    %eax,%edx
f01004e9:	ec                   	in     (%dx),%al
f01004ea:	88 45 ef             	mov    %al,-0x11(%ebp)
	inb(0x84);
	inb(0x84);
	inb(0x84);
	inb(0x84);
}
f01004ed:	90                   	nop
f01004ee:	c9                   	leave  
f01004ef:	c3                   	ret    

f01004f0 <lpt_putc>:

static void
lpt_putc(int c)
{
f01004f0:	55                   	push   %ebp
f01004f1:	89 e5                	mov    %esp,%ebp
f01004f3:	83 ec 20             	sub    $0x20,%esp
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f01004f6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01004fd:	eb 08                	jmp    f0100507 <lpt_putc+0x17>
		delay();
f01004ff:	e8 a3 ff ff ff       	call   f01004a7 <delay>
static void
lpt_putc(int c)
{
	int i;

	for (i = 0; !(inb(0x378+1) & 0x80) && i < 2800; i++) //12800
f0100504:	ff 45 fc             	incl   -0x4(%ebp)
f0100507:	c7 45 ec 79 03 00 00 	movl   $0x379,-0x14(%ebp)
f010050e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100511:	89 c2                	mov    %eax,%edx
f0100513:	ec                   	in     (%dx),%al
f0100514:	88 45 eb             	mov    %al,-0x15(%ebp)
	return data;
f0100517:	8a 45 eb             	mov    -0x15(%ebp),%al
f010051a:	84 c0                	test   %al,%al
f010051c:	78 09                	js     f0100527 <lpt_putc+0x37>
f010051e:	81 7d fc ef 0a 00 00 	cmpl   $0xaef,-0x4(%ebp)
f0100525:	7e d8                	jle    f01004ff <lpt_putc+0xf>
		delay();
	outb(0x378+0, c);
f0100527:	8b 45 08             	mov    0x8(%ebp),%eax
f010052a:	0f b6 c0             	movzbl %al,%eax
f010052d:	c7 45 f4 78 03 00 00 	movl   $0x378,-0xc(%ebp)
f0100534:	88 45 e8             	mov    %al,-0x18(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100537:	8a 45 e8             	mov    -0x18(%ebp),%al
f010053a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010053d:	ee                   	out    %al,(%dx)
f010053e:	c7 45 f0 7a 03 00 00 	movl   $0x37a,-0x10(%ebp)
f0100545:	c6 45 e9 0d          	movb   $0xd,-0x17(%ebp)
f0100549:	8a 45 e9             	mov    -0x17(%ebp),%al
f010054c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010054f:	ee                   	out    %al,(%dx)
f0100550:	c7 45 f8 7a 03 00 00 	movl   $0x37a,-0x8(%ebp)
f0100557:	c6 45 ea 08          	movb   $0x8,-0x16(%ebp)
f010055b:	8a 45 ea             	mov    -0x16(%ebp),%al
f010055e:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0100561:	ee                   	out    %al,(%dx)
	outb(0x378+2, 0x08|0x04|0x01);
	outb(0x378+2, 0x08);
}
f0100562:	90                   	nop
f0100563:	c9                   	leave  
f0100564:	c3                   	ret    

f0100565 <cga_init>:
static uint16 *crt_buf;
static uint16 crt_pos;

void
cga_init(void)
{
f0100565:	55                   	push   %ebp
f0100566:	89 e5                	mov    %esp,%ebp
f0100568:	83 ec 20             	sub    $0x20,%esp
	volatile uint16 *cp;
	uint16 was;
	unsigned pos;

	cp = (uint16*) (KERNEL_BASE + CGA_BUF);
f010056b:	c7 45 fc 00 80 0b f0 	movl   $0xf00b8000,-0x4(%ebp)
	was = *cp;
f0100572:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100575:	66 8b 00             	mov    (%eax),%ax
f0100578:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	*cp = (uint16) 0xA55A;
f010057c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010057f:	66 c7 00 5a a5       	movw   $0xa55a,(%eax)
	if (*cp != 0xA55A) {
f0100584:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100587:	66 8b 00             	mov    (%eax),%ax
f010058a:	66 3d 5a a5          	cmp    $0xa55a,%ax
f010058e:	74 13                	je     f01005a3 <cga_init+0x3e>
		cp = (uint16*) (KERNEL_BASE + MONO_BUF);
f0100590:	c7 45 fc 00 00 0b f0 	movl   $0xf00b0000,-0x4(%ebp)
		addr_6845 = MONO_BASE;
f0100597:	c7 05 04 85 65 f0 b4 	movl   $0x3b4,0xf0658504
f010059e:	03 00 00 
f01005a1:	eb 14                	jmp    f01005b7 <cga_init+0x52>
	} else {
		*cp = was;
f01005a3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01005a6:	66 8b 45 fa          	mov    -0x6(%ebp),%ax
f01005aa:	66 89 02             	mov    %ax,(%edx)
		addr_6845 = CGA_BASE;
f01005ad:	c7 05 04 85 65 f0 d4 	movl   $0x3d4,0xf0658504
f01005b4:	03 00 00 
	}

	/* Extract cursor location */
	outb(addr_6845, 14);
f01005b7:	a1 04 85 65 f0       	mov    0xf0658504,%eax
f01005bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01005bf:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
f01005c3:	8a 45 e0             	mov    -0x20(%ebp),%al
f01005c6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01005c9:	ee                   	out    %al,(%dx)
	pos = inb(addr_6845 + 1) << 8;
f01005ca:	a1 04 85 65 f0       	mov    0xf0658504,%eax
f01005cf:	40                   	inc    %eax
f01005d0:	89 45 ec             	mov    %eax,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01005d3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01005d6:	89 c2                	mov    %eax,%edx
f01005d8:	ec                   	in     (%dx),%al
f01005d9:	88 45 e1             	mov    %al,-0x1f(%ebp)
	return data;
f01005dc:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01005df:	0f b6 c0             	movzbl %al,%eax
f01005e2:	c1 e0 08             	shl    $0x8,%eax
f01005e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(addr_6845, 15);
f01005e8:	a1 04 85 65 f0       	mov    0xf0658504,%eax
f01005ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01005f0:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01005f4:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01005f7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01005fa:	ee                   	out    %al,(%dx)
	pos |= inb(addr_6845 + 1);
f01005fb:	a1 04 85 65 f0       	mov    0xf0658504,%eax
f0100600:	40                   	inc    %eax
f0100601:	89 45 e4             	mov    %eax,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100604:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0100607:	89 c2                	mov    %eax,%edx
f0100609:	ec                   	in     (%dx),%al
f010060a:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f010060d:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100610:	0f b6 c0             	movzbl %al,%eax
f0100613:	09 45 f0             	or     %eax,-0x10(%ebp)

	crt_buf = (uint16*) cp;
f0100616:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0100619:	a3 08 85 65 f0       	mov    %eax,0xf0658508
	crt_pos = pos;
f010061e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0100621:	66 a3 0c 85 65 f0    	mov    %ax,0xf065850c
}
f0100627:	90                   	nop
f0100628:	c9                   	leave  
f0100629:	c3                   	ret    

f010062a <cga_putc>:



void
cga_putc(int c)
{
f010062a:	55                   	push   %ebp
f010062b:	89 e5                	mov    %esp,%ebp
f010062d:	53                   	push   %ebx
f010062e:	83 ec 24             	sub    $0x24,%esp
	// if no attribute given, then use black on white
	if (!(c & ~0xFF))
f0100631:	8b 45 08             	mov    0x8(%ebp),%eax
f0100634:	b0 00                	mov    $0x0,%al
f0100636:	85 c0                	test   %eax,%eax
f0100638:	75 07                	jne    f0100641 <cga_putc+0x17>
		c |= 0x0700;
f010063a:	81 4d 08 00 07 00 00 	orl    $0x700,0x8(%ebp)

	switch (c & 0xff) {
f0100641:	8b 45 08             	mov    0x8(%ebp),%eax
f0100644:	0f b6 c0             	movzbl %al,%eax
f0100647:	83 f8 09             	cmp    $0x9,%eax
f010064a:	0f 84 94 00 00 00    	je     f01006e4 <cga_putc+0xba>
f0100650:	83 f8 09             	cmp    $0x9,%eax
f0100653:	7f 0a                	jg     f010065f <cga_putc+0x35>
f0100655:	83 f8 08             	cmp    $0x8,%eax
f0100658:	74 14                	je     f010066e <cga_putc+0x44>
f010065a:	e9 c8 00 00 00       	jmp    f0100727 <cga_putc+0xfd>
f010065f:	83 f8 0a             	cmp    $0xa,%eax
f0100662:	74 49                	je     f01006ad <cga_putc+0x83>
f0100664:	83 f8 0d             	cmp    $0xd,%eax
f0100667:	74 53                	je     f01006bc <cga_putc+0x92>
f0100669:	e9 b9 00 00 00       	jmp    f0100727 <cga_putc+0xfd>
	case '\b':
		if (crt_pos > 0) {
f010066e:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f0100674:	66 85 c0             	test   %ax,%ax
f0100677:	0f 84 d0 00 00 00    	je     f010074d <cga_putc+0x123>
			crt_pos--;
f010067d:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f0100683:	48                   	dec    %eax
f0100684:	66 a3 0c 85 65 f0    	mov    %ax,0xf065850c
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
f010068a:	8b 15 08 85 65 f0    	mov    0xf0658508,%edx
f0100690:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f0100696:	0f b7 c0             	movzwl %ax,%eax
f0100699:	01 c0                	add    %eax,%eax
f010069b:	01 c2                	add    %eax,%edx
f010069d:	8b 45 08             	mov    0x8(%ebp),%eax
f01006a0:	b0 00                	mov    $0x0,%al
f01006a2:	83 c8 20             	or     $0x20,%eax
f01006a5:	66 89 02             	mov    %ax,(%edx)
		}
		break;
f01006a8:	e9 a0 00 00 00       	jmp    f010074d <cga_putc+0x123>
	case '\n':
		crt_pos += CRT_COLS;
f01006ad:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f01006b3:	83 c0 50             	add    $0x50,%eax
f01006b6:	66 a3 0c 85 65 f0    	mov    %ax,0xf065850c
		/* fallthru */
	case '\r':
		crt_pos -= (crt_pos % CRT_COLS);
f01006bc:	66 8b 0d 0c 85 65 f0 	mov    0xf065850c,%cx
f01006c3:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f01006c9:	bb 50 00 00 00       	mov    $0x50,%ebx
f01006ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01006d3:	66 f7 f3             	div    %bx
f01006d6:	89 d0                	mov    %edx,%eax
f01006d8:	29 c1                	sub    %eax,%ecx
f01006da:	89 c8                	mov    %ecx,%eax
f01006dc:	66 a3 0c 85 65 f0    	mov    %ax,0xf065850c
		break;
f01006e2:	eb 6a                	jmp    f010074e <cga_putc+0x124>
	case '\t':
		cons_putc(' ');
f01006e4:	83 ec 0c             	sub    $0xc,%esp
f01006e7:	6a 20                	push   $0x20
f01006e9:	e8 69 04 00 00       	call   f0100b57 <cons_putc>
f01006ee:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006f1:	83 ec 0c             	sub    $0xc,%esp
f01006f4:	6a 20                	push   $0x20
f01006f6:	e8 5c 04 00 00       	call   f0100b57 <cons_putc>
f01006fb:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f01006fe:	83 ec 0c             	sub    $0xc,%esp
f0100701:	6a 20                	push   $0x20
f0100703:	e8 4f 04 00 00       	call   f0100b57 <cons_putc>
f0100708:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f010070b:	83 ec 0c             	sub    $0xc,%esp
f010070e:	6a 20                	push   $0x20
f0100710:	e8 42 04 00 00       	call   f0100b57 <cons_putc>
f0100715:	83 c4 10             	add    $0x10,%esp
		cons_putc(' ');
f0100718:	83 ec 0c             	sub    $0xc,%esp
f010071b:	6a 20                	push   $0x20
f010071d:	e8 35 04 00 00       	call   f0100b57 <cons_putc>
f0100722:	83 c4 10             	add    $0x10,%esp
		break;
f0100725:	eb 27                	jmp    f010074e <cga_putc+0x124>
	default:
		crt_buf[crt_pos++] = c;		/* write the character */
f0100727:	8b 0d 08 85 65 f0    	mov    0xf0658508,%ecx
f010072d:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f0100733:	8d 50 01             	lea    0x1(%eax),%edx
f0100736:	66 89 15 0c 85 65 f0 	mov    %dx,0xf065850c
f010073d:	0f b7 c0             	movzwl %ax,%eax
f0100740:	01 c0                	add    %eax,%eax
f0100742:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0100745:	8b 45 08             	mov    0x8(%ebp),%eax
f0100748:	66 89 02             	mov    %ax,(%edx)
		break;
f010074b:	eb 01                	jmp    f010074e <cga_putc+0x124>
	case '\b':
		if (crt_pos > 0) {
			crt_pos--;
			crt_buf[crt_pos] = (c & ~0xff) | ' ';
		}
		break;
f010074d:	90                   	nop
		crt_buf[crt_pos++] = c;		/* write the character */
		break;
	}

	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
f010074e:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f0100754:	66 3d cf 07          	cmp    $0x7cf,%ax
f0100758:	76 58                	jbe    f01007b2 <cga_putc+0x188>
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
f010075a:	a1 08 85 65 f0       	mov    0xf0658508,%eax
f010075f:	8d 90 a0 00 00 00    	lea    0xa0(%eax),%edx
f0100765:	a1 08 85 65 f0       	mov    0xf0658508,%eax
f010076a:	83 ec 04             	sub    $0x4,%esp
f010076d:	68 00 0f 00 00       	push   $0xf00
f0100772:	52                   	push   %edx
f0100773:	50                   	push   %eax
f0100774:	e8 e2 fe 02 00       	call   f013065b <memcpy>
f0100779:	83 c4 10             	add    $0x10,%esp
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f010077c:	c7 45 f4 80 07 00 00 	movl   $0x780,-0xc(%ebp)
f0100783:	eb 15                	jmp    f010079a <cga_putc+0x170>
			crt_buf[i] = 0x0700 | ' ';
f0100785:	8b 15 08 85 65 f0    	mov    0xf0658508,%edx
f010078b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010078e:	01 c0                	add    %eax,%eax
f0100790:	01 d0                	add    %edx,%eax
f0100792:	66 c7 00 20 07       	movw   $0x720,(%eax)
	// What is the purpose of this?
	if (crt_pos >= CRT_SIZE) {
		int i;

		memcpy(crt_buf, crt_buf + CRT_COLS, (CRT_SIZE - CRT_COLS) * sizeof(uint16));
		for (i = CRT_SIZE - CRT_COLS; i < CRT_SIZE; i++)
f0100797:	ff 45 f4             	incl   -0xc(%ebp)
f010079a:	81 7d f4 cf 07 00 00 	cmpl   $0x7cf,-0xc(%ebp)
f01007a1:	7e e2                	jle    f0100785 <cga_putc+0x15b>
			crt_buf[i] = 0x0700 | ' ';
		crt_pos -= CRT_COLS;
f01007a3:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f01007a9:	83 e8 50             	sub    $0x50,%eax
f01007ac:	66 a3 0c 85 65 f0    	mov    %ax,0xf065850c
	}

	/* move that little blinky thing */
	outb(addr_6845, 14);
f01007b2:	a1 04 85 65 f0       	mov    0xf0658504,%eax
f01007b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01007ba:	c6 45 e0 0e          	movb   $0xe,-0x20(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01007be:	8a 45 e0             	mov    -0x20(%ebp),%al
f01007c1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01007c4:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos >> 8);
f01007c5:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f01007cb:	66 c1 e8 08          	shr    $0x8,%ax
f01007cf:	0f b6 c0             	movzbl %al,%eax
f01007d2:	8b 15 04 85 65 f0    	mov    0xf0658504,%edx
f01007d8:	42                   	inc    %edx
f01007d9:	89 55 ec             	mov    %edx,-0x14(%ebp)
f01007dc:	88 45 e1             	mov    %al,-0x1f(%ebp)
f01007df:	8a 45 e1             	mov    -0x1f(%ebp),%al
f01007e2:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01007e5:	ee                   	out    %al,(%dx)
	outb(addr_6845, 15);
f01007e6:	a1 04 85 65 f0       	mov    0xf0658504,%eax
f01007eb:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01007ee:	c6 45 e2 0f          	movb   $0xf,-0x1e(%ebp)
f01007f2:	8a 45 e2             	mov    -0x1e(%ebp),%al
f01007f5:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01007f8:	ee                   	out    %al,(%dx)
	outb(addr_6845 + 1, crt_pos);
f01007f9:	66 a1 0c 85 65 f0    	mov    0xf065850c,%ax
f01007ff:	0f b6 c0             	movzbl %al,%eax
f0100802:	8b 15 04 85 65 f0    	mov    0xf0658504,%edx
f0100808:	42                   	inc    %edx
f0100809:	89 55 e4             	mov    %edx,-0x1c(%ebp)
f010080c:	88 45 e3             	mov    %al,-0x1d(%ebp)
f010080f:	8a 45 e3             	mov    -0x1d(%ebp),%al
f0100812:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100815:	ee                   	out    %al,(%dx)
}
f0100816:	90                   	nop
f0100817:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010081a:	c9                   	leave  
f010081b:	c3                   	ret    

f010081c <kbd_proc_data>:
 * Get data from the keyboard.  If we finish a character, return it.  Else 0.
 * Return -1 if no data.
 */
static int
kbd_proc_data(void)
{
f010081c:	55                   	push   %ebp
f010081d:	89 e5                	mov    %esp,%ebp
f010081f:	83 ec 28             	sub    $0x28,%esp
f0100822:	c7 45 e4 64 00 00 00 	movl   $0x64,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100829:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010082c:	89 c2                	mov    %eax,%edx
f010082e:	ec                   	in     (%dx),%al
f010082f:	88 45 e3             	mov    %al,-0x1d(%ebp)
	return data;
f0100832:	8a 45 e3             	mov    -0x1d(%ebp),%al
	int c;
	uint8 data;
	static uint32 shift;

	if ((inb(KBSTATP) & KBS_DIB) == 0)
f0100835:	0f b6 c0             	movzbl %al,%eax
f0100838:	83 e0 01             	and    $0x1,%eax
f010083b:	85 c0                	test   %eax,%eax
f010083d:	75 0a                	jne    f0100849 <kbd_proc_data+0x2d>
		return -1;
f010083f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0100844:	e9 54 01 00 00       	jmp    f010099d <kbd_proc_data+0x181>
f0100849:	c7 45 ec 60 00 00 00 	movl   $0x60,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0100850:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100853:	89 c2                	mov    %eax,%edx
f0100855:	ec                   	in     (%dx),%al
f0100856:	88 45 e2             	mov    %al,-0x1e(%ebp)
	return data;
f0100859:	8a 45 e2             	mov    -0x1e(%ebp),%al

	data = inb(KBDATAP);
f010085c:	88 45 f3             	mov    %al,-0xd(%ebp)

	if (data == 0xE0) {
f010085f:	80 7d f3 e0          	cmpb   $0xe0,-0xd(%ebp)
f0100863:	75 17                	jne    f010087c <kbd_proc_data+0x60>
		// E0 escape character
		shift |= E0ESC;
f0100865:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f010086a:	83 c8 40             	or     $0x40,%eax
f010086d:	a3 28 87 65 f0       	mov    %eax,0xf0658728
		return 0;
f0100872:	b8 00 00 00 00       	mov    $0x0,%eax
f0100877:	e9 21 01 00 00       	jmp    f010099d <kbd_proc_data+0x181>
	} else if (data & 0x80) {
f010087c:	8a 45 f3             	mov    -0xd(%ebp),%al
f010087f:	84 c0                	test   %al,%al
f0100881:	79 44                	jns    f01008c7 <kbd_proc_data+0xab>
		// Key released
		data = (shift & E0ESC ? data : data & 0x7F);
f0100883:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f0100888:	83 e0 40             	and    $0x40,%eax
f010088b:	85 c0                	test   %eax,%eax
f010088d:	75 08                	jne    f0100897 <kbd_proc_data+0x7b>
f010088f:	8a 45 f3             	mov    -0xd(%ebp),%al
f0100892:	83 e0 7f             	and    $0x7f,%eax
f0100895:	eb 03                	jmp    f010089a <kbd_proc_data+0x7e>
f0100897:	8a 45 f3             	mov    -0xd(%ebp),%al
f010089a:	88 45 f3             	mov    %al,-0xd(%ebp)
		shift &= ~(shiftcode[data] | E0ESC);
f010089d:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008a1:	8a 80 20 00 19 f0    	mov    -0xfe6ffe0(%eax),%al
f01008a7:	83 c8 40             	or     $0x40,%eax
f01008aa:	0f b6 c0             	movzbl %al,%eax
f01008ad:	f7 d0                	not    %eax
f01008af:	89 c2                	mov    %eax,%edx
f01008b1:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f01008b6:	21 d0                	and    %edx,%eax
f01008b8:	a3 28 87 65 f0       	mov    %eax,0xf0658728
		return 0;
f01008bd:	b8 00 00 00 00       	mov    $0x0,%eax
f01008c2:	e9 d6 00 00 00       	jmp    f010099d <kbd_proc_data+0x181>
	} else if (shift & E0ESC) {
f01008c7:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f01008cc:	83 e0 40             	and    $0x40,%eax
f01008cf:	85 c0                	test   %eax,%eax
f01008d1:	74 11                	je     f01008e4 <kbd_proc_data+0xc8>
		// Last character was an E0 escape; or with 0x80
		data |= 0x80;
f01008d3:	80 4d f3 80          	orb    $0x80,-0xd(%ebp)
		shift &= ~E0ESC;
f01008d7:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f01008dc:	83 e0 bf             	and    $0xffffffbf,%eax
f01008df:	a3 28 87 65 f0       	mov    %eax,0xf0658728
	}

	shift |= shiftcode[data];
f01008e4:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f01008e8:	8a 80 20 00 19 f0    	mov    -0xfe6ffe0(%eax),%al
f01008ee:	0f b6 d0             	movzbl %al,%edx
f01008f1:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f01008f6:	09 d0                	or     %edx,%eax
f01008f8:	a3 28 87 65 f0       	mov    %eax,0xf0658728
	shift ^= togglecode[data];
f01008fd:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100901:	8a 80 20 01 19 f0    	mov    -0xfe6fee0(%eax),%al
f0100907:	0f b6 d0             	movzbl %al,%edx
f010090a:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f010090f:	31 d0                	xor    %edx,%eax
f0100911:	a3 28 87 65 f0       	mov    %eax,0xf0658728

	c = charcode[shift & (CTL | SHIFT)][data];
f0100916:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f010091b:	83 e0 03             	and    $0x3,%eax
f010091e:	8b 14 85 20 05 19 f0 	mov    -0xfe6fae0(,%eax,4),%edx
f0100925:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0100929:	01 d0                	add    %edx,%eax
f010092b:	8a 00                	mov    (%eax),%al
f010092d:	0f b6 c0             	movzbl %al,%eax
f0100930:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (shift & CAPSLOCK) {
f0100933:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f0100938:	83 e0 08             	and    $0x8,%eax
f010093b:	85 c0                	test   %eax,%eax
f010093d:	74 22                	je     f0100961 <kbd_proc_data+0x145>
		if ('a' <= c && c <= 'z')
f010093f:	83 7d f4 60          	cmpl   $0x60,-0xc(%ebp)
f0100943:	7e 0c                	jle    f0100951 <kbd_proc_data+0x135>
f0100945:	83 7d f4 7a          	cmpl   $0x7a,-0xc(%ebp)
f0100949:	7f 06                	jg     f0100951 <kbd_proc_data+0x135>
			c += 'A' - 'a';
f010094b:	83 6d f4 20          	subl   $0x20,-0xc(%ebp)
f010094f:	eb 10                	jmp    f0100961 <kbd_proc_data+0x145>
		else if ('A' <= c && c <= 'Z')
f0100951:	83 7d f4 40          	cmpl   $0x40,-0xc(%ebp)
f0100955:	7e 0a                	jle    f0100961 <kbd_proc_data+0x145>
f0100957:	83 7d f4 5a          	cmpl   $0x5a,-0xc(%ebp)
f010095b:	7f 04                	jg     f0100961 <kbd_proc_data+0x145>
			c += 'a' - 'A';
f010095d:	83 45 f4 20          	addl   $0x20,-0xc(%ebp)
	}

	// Process special keys
	// Ctrl-Alt-Del: reboot
	if (!(~shift & (CTL | ALT)) && c == KEY_DEL) {
f0100961:	a1 28 87 65 f0       	mov    0xf0658728,%eax
f0100966:	f7 d0                	not    %eax
f0100968:	83 e0 06             	and    $0x6,%eax
f010096b:	85 c0                	test   %eax,%eax
f010096d:	75 2b                	jne    f010099a <kbd_proc_data+0x17e>
f010096f:	81 7d f4 e9 00 00 00 	cmpl   $0xe9,-0xc(%ebp)
f0100976:	75 22                	jne    f010099a <kbd_proc_data+0x17e>
		cprintf("Rebooting!\n");
f0100978:	83 ec 0c             	sub    $0xc,%esp
f010097b:	68 68 27 13 f0       	push   $0xf0132768
f0100980:	e8 a8 02 00 00       	call   f0100c2d <cprintf>
f0100985:	83 c4 10             	add    $0x10,%esp
f0100988:	c7 45 e8 92 00 00 00 	movl   $0x92,-0x18(%ebp)
f010098f:	c6 45 e1 03          	movb   $0x3,-0x1f(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0100993:	8a 45 e1             	mov    -0x1f(%ebp),%al
f0100996:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0100999:	ee                   	out    %al,(%dx)
		outb(0x92, 0x3); // courtesy of Chris Frost
	}

	return c;
f010099a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010099d:	c9                   	leave  
f010099e:	c3                   	ret    

f010099f <kbd_intr>:

void
kbd_intr(void)
{
f010099f:	55                   	push   %ebp
f01009a0:	89 e5                	mov    %esp,%ebp
f01009a2:	83 ec 08             	sub    $0x8,%esp
	cons_intr(kbd_proc_data);
f01009a5:	83 ec 0c             	sub    $0xc,%esp
f01009a8:	68 1c 08 10 f0       	push   $0xf010081c
f01009ad:	e8 0c 00 00 00       	call   f01009be <cons_intr>
f01009b2:	83 c4 10             	add    $0x10,%esp
}
f01009b5:	90                   	nop
f01009b6:	c9                   	leave  
f01009b7:	c3                   	ret    

f01009b8 <kbd_init>:

void
kbd_init(void)
{
f01009b8:	55                   	push   %ebp
f01009b9:	89 e5                	mov    %esp,%ebp
}
f01009bb:	90                   	nop
f01009bc:	5d                   	pop    %ebp
f01009bd:	c3                   	ret    

f01009be <cons_intr>:

// called by device interrupt routines to feed input characters
// into the circular console input buffer.
void
cons_intr(int (*proc)(void))
{
f01009be:	55                   	push   %ebp
f01009bf:	89 e5                	mov    %esp,%ebp
f01009c1:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = (*proc)()) != -1) {
f01009c4:	eb 35                	jmp    f01009fb <cons_intr+0x3d>
		if (c == 0)
f01009c6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01009ca:	75 02                	jne    f01009ce <cons_intr+0x10>
			continue;
f01009cc:	eb 2d                	jmp    f01009fb <cons_intr+0x3d>
		cons.buf[cons.wpos++] = c;
f01009ce:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f01009d3:	8d 50 01             	lea    0x1(%eax),%edx
f01009d6:	89 15 24 87 65 f0    	mov    %edx,0xf0658724
f01009dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01009df:	88 90 20 85 65 f0    	mov    %dl,-0xf9a7ae0(%eax)
		if (cons.wpos == CONSBUFSIZE)
f01009e5:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f01009ea:	3d 00 02 00 00       	cmp    $0x200,%eax
f01009ef:	75 0a                	jne    f01009fb <cons_intr+0x3d>
			cons.wpos = 0;
f01009f1:	c7 05 24 87 65 f0 00 	movl   $0x0,0xf0658724
f01009f8:	00 00 00 
void
cons_intr(int (*proc)(void))
{
	int c;

	while ((c = (*proc)()) != -1) {
f01009fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01009fe:	ff d0                	call   *%eax
f0100a00:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a03:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a07:	75 bd                	jne    f01009c6 <cons_intr+0x8>
			continue;
		cons.buf[cons.wpos++] = c;
		if (cons.wpos == CONSBUFSIZE)
			cons.wpos = 0;
	}
}
f0100a09:	90                   	nop
f0100a0a:	c9                   	leave  
f0100a0b:	c3                   	ret    

f0100a0c <cons_getc>:

// return the next input character from the console, or 0 if none waiting
int
cons_getc(void)
{
f0100a0c:	55                   	push   %ebp
f0100a0d:	89 e5                	mov    %esp,%ebp
f0100a0f:	83 ec 18             	sub    $0x18,%esp
	int c;

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).
	serial_intr();
f0100a12:	e8 a7 f9 ff ff       	call   f01003be <serial_intr>
	kbd_intr();
f0100a17:	e8 83 ff ff ff       	call   f010099f <kbd_intr>

	// grab the next character from the input buffer.
	if (cons.rpos != cons.wpos) {
f0100a1c:	8b 15 20 87 65 f0    	mov    0xf0658720,%edx
f0100a22:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f0100a27:	39 c2                	cmp    %eax,%edx
f0100a29:	74 35                	je     f0100a60 <cons_getc+0x54>
		c = cons.buf[cons.rpos++];
f0100a2b:	a1 20 87 65 f0       	mov    0xf0658720,%eax
f0100a30:	8d 50 01             	lea    0x1(%eax),%edx
f0100a33:	89 15 20 87 65 f0    	mov    %edx,0xf0658720
f0100a39:	8a 80 20 85 65 f0    	mov    -0xf9a7ae0(%eax),%al
f0100a3f:	0f b6 c0             	movzbl %al,%eax
f0100a42:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cons.rpos == CONSBUFSIZE)
f0100a45:	a1 20 87 65 f0       	mov    0xf0658720,%eax
f0100a4a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100a4f:	75 0a                	jne    f0100a5b <cons_getc+0x4f>
			cons.rpos = 0;
f0100a51:	c7 05 20 87 65 f0 00 	movl   $0x0,0xf0658720
f0100a58:	00 00 00 
		return c;
f0100a5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0100a5e:	eb 05                	jmp    f0100a65 <cons_getc+0x59>
	}
	return 0;
f0100a60:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100a65:	c9                   	leave  
f0100a66:	c3                   	ret    

f0100a67 <cons_getc2>:
// return the next input character from the console, or 0 if none waiting
int
cons_getc2(void)
{
f0100a67:	55                   	push   %ebp
f0100a68:	89 e5                	mov    %esp,%ebp
f0100a6a:	83 ec 18             	sub    $0x18,%esp

	// poll for any pending input characters,
	// so that this function works even when interrupts are disabled
	// (e.g., when called from the kernel monitor).

	int c1 = 0;
f0100a6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//serial_intr();
	{
		if (serial_exists)
f0100a74:	a1 00 85 65 f0       	mov    0xf0658500,%eax
f0100a79:	85 c0                	test   %eax,%eax
f0100a7b:	74 41                	je     f0100abe <cons_getc2+0x57>
		{
			if ((c1 = serial_proc_data()) != -1) {
f0100a7d:	e8 fa f8 ff ff       	call   f010037c <serial_proc_data>
f0100a82:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100a85:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0100a89:	74 33                	je     f0100abe <cons_getc2+0x57>
				if (c1 == 0)
f0100a8b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100a8f:	74 2d                	je     f0100abe <cons_getc2+0x57>
				{
					//continue;
				}
				else
				{
					cons.buf[cons.wpos++] = c1;
f0100a91:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f0100a96:	8d 50 01             	lea    0x1(%eax),%edx
f0100a99:	89 15 24 87 65 f0    	mov    %edx,0xf0658724
f0100a9f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100aa2:	88 90 20 85 65 f0    	mov    %dl,-0xf9a7ae0(%eax)
					if (cons.wpos == CONSBUFSIZE)
f0100aa8:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f0100aad:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100ab2:	75 0a                	jne    f0100abe <cons_getc2+0x57>
						cons.wpos = 0;
f0100ab4:	c7 05 24 87 65 f0 00 	movl   $0x0,0xf0658724
f0100abb:	00 00 00 
				}
			}
		}
	}

	int c2 = 0;
f0100abe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kbd_intr();
	{
		if ((c2 = kbd_proc_data()) != -1) {
f0100ac5:	e8 52 fd ff ff       	call   f010081c <kbd_proc_data>
f0100aca:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0100acd:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0100ad1:	74 33                	je     f0100b06 <cons_getc2+0x9f>
			if (c2 == 0)
f0100ad3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100ad7:	74 2d                	je     f0100b06 <cons_getc2+0x9f>
			{
				//continue;
			}
			else
			{
				cons.buf[cons.wpos++] = c2;
f0100ad9:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f0100ade:	8d 50 01             	lea    0x1(%eax),%edx
f0100ae1:	89 15 24 87 65 f0    	mov    %edx,0xf0658724
f0100ae7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100aea:	88 90 20 85 65 f0    	mov    %dl,-0xf9a7ae0(%eax)
				if (cons.wpos == CONSBUFSIZE)
f0100af0:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f0100af5:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100afa:	75 0a                	jne    f0100b06 <cons_getc2+0x9f>
					cons.wpos = 0;
f0100afc:	c7 05 24 87 65 f0 00 	movl   $0x0,0xf0658724
f0100b03:	00 00 00 
	}

	// grab the next character from the input buffer.
	//cprintf("%d, %d \n", c1, c2);
	//if(c1 > 0 && c2 > 0)
	if(c2 > 0)
f0100b06:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0100b0a:	7e 44                	jle    f0100b50 <cons_getc2+0xe9>
	{
		if (cons.rpos != cons.wpos) {
f0100b0c:	8b 15 20 87 65 f0    	mov    0xf0658720,%edx
f0100b12:	a1 24 87 65 f0       	mov    0xf0658724,%eax
f0100b17:	39 c2                	cmp    %eax,%edx
f0100b19:	74 35                	je     f0100b50 <cons_getc2+0xe9>
			c = cons.buf[cons.rpos++];
f0100b1b:	a1 20 87 65 f0       	mov    0xf0658720,%eax
f0100b20:	8d 50 01             	lea    0x1(%eax),%edx
f0100b23:	89 15 20 87 65 f0    	mov    %edx,0xf0658720
f0100b29:	8a 80 20 85 65 f0    	mov    -0xf9a7ae0(%eax),%al
f0100b2f:	0f b6 c0             	movzbl %al,%eax
f0100b32:	89 45 ec             	mov    %eax,-0x14(%ebp)
			if (cons.rpos == CONSBUFSIZE)
f0100b35:	a1 20 87 65 f0       	mov    0xf0658720,%eax
f0100b3a:	3d 00 02 00 00       	cmp    $0x200,%eax
f0100b3f:	75 0a                	jne    f0100b4b <cons_getc2+0xe4>
				cons.rpos = 0;
f0100b41:	c7 05 20 87 65 f0 00 	movl   $0x0,0xf0658720
f0100b48:	00 00 00 
			return c;
f0100b4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0100b4e:	eb 05                	jmp    f0100b55 <cons_getc2+0xee>
		}
	}
	return 0;
f0100b50:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0100b55:	c9                   	leave  
f0100b56:	c3                   	ret    

f0100b57 <cons_putc>:

// output a character to the console
void
cons_putc(int c)
{
f0100b57:	55                   	push   %ebp
f0100b58:	89 e5                	mov    %esp,%ebp
f0100b5a:	83 ec 08             	sub    $0x8,%esp
	lpt_putc(c);
f0100b5d:	ff 75 08             	pushl  0x8(%ebp)
f0100b60:	e8 8b f9 ff ff       	call   f01004f0 <lpt_putc>
f0100b65:	83 c4 04             	add    $0x4,%esp
	cga_putc(c);
f0100b68:	83 ec 0c             	sub    $0xc,%esp
f0100b6b:	ff 75 08             	pushl  0x8(%ebp)
f0100b6e:	e8 b7 fa ff ff       	call   f010062a <cga_putc>
f0100b73:	83 c4 10             	add    $0x10,%esp
}
f0100b76:	90                   	nop
f0100b77:	c9                   	leave  
f0100b78:	c3                   	ret    

f0100b79 <console_initialize>:

// initialize the console devices
void
console_initialize(void)
{
f0100b79:	55                   	push   %ebp
f0100b7a:	89 e5                	mov    %esp,%ebp
f0100b7c:	83 ec 08             	sub    $0x8,%esp
	cga_init();
f0100b7f:	e8 e1 f9 ff ff       	call   f0100565 <cga_init>
	kbd_init();
f0100b84:	e8 2f fe ff ff       	call   f01009b8 <kbd_init>
	serial_init();
f0100b89:	e8 52 f8 ff ff       	call   f01003e0 <serial_init>

	if (!serial_exists)
f0100b8e:	a1 00 85 65 f0       	mov    0xf0658500,%eax
f0100b93:	85 c0                	test   %eax,%eax
f0100b95:	75 10                	jne    f0100ba7 <console_initialize+0x2e>
		cprintf("Serial port does not exist!\n");
f0100b97:	83 ec 0c             	sub    $0xc,%esp
f0100b9a:	68 74 27 13 f0       	push   $0xf0132774
f0100b9f:	e8 89 00 00 00       	call   f0100c2d <cprintf>
f0100ba4:	83 c4 10             	add    $0x10,%esp
}
f0100ba7:	90                   	nop
f0100ba8:	c9                   	leave  
f0100ba9:	c3                   	ret    

f0100baa <cputchar>:

// `High'-level console I/O.  Used by readline and cprintf.

void
cputchar(int c)
{
f0100baa:	55                   	push   %ebp
f0100bab:	89 e5                	mov    %esp,%ebp
f0100bad:	83 ec 08             	sub    $0x8,%esp
	cons_putc(c);
f0100bb0:	83 ec 0c             	sub    $0xc,%esp
f0100bb3:	ff 75 08             	pushl  0x8(%ebp)
f0100bb6:	e8 9c ff ff ff       	call   f0100b57 <cons_putc>
f0100bbb:	83 c4 10             	add    $0x10,%esp
}
f0100bbe:	90                   	nop
f0100bbf:	c9                   	leave  
f0100bc0:	c3                   	ret    

f0100bc1 <getchar>:

int
getchar(void)
{
f0100bc1:	55                   	push   %ebp
f0100bc2:	89 e5                	mov    %esp,%ebp
f0100bc4:	83 ec 18             	sub    $0x18,%esp
	int c;

	while ((c = cons_getc()) == 0)
f0100bc7:	e8 40 fe ff ff       	call   f0100a0c <cons_getc>
f0100bcc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0100bcf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100bd3:	74 f2                	je     f0100bc7 <getchar+0x6>
		/* do nothing */;
	return c;
f0100bd5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100bd8:	c9                   	leave  
f0100bd9:	c3                   	ret    

f0100bda <iscons>:

int
iscons(int fdnum)
{
f0100bda:	55                   	push   %ebp
f0100bdb:	89 e5                	mov    %esp,%ebp
	// used by readline
	return 1;
f0100bdd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0100be2:	5d                   	pop    %ebp
f0100be3:	c3                   	ret    

f0100be4 <putch>:
#include <inc/stdarg.h>


static void
putch(int ch, int *cnt)
{
f0100be4:	55                   	push   %ebp
f0100be5:	89 e5                	mov    %esp,%ebp
f0100be7:	83 ec 08             	sub    $0x8,%esp
	cputchar(ch);
f0100bea:	83 ec 0c             	sub    $0xc,%esp
f0100bed:	ff 75 08             	pushl  0x8(%ebp)
f0100bf0:	e8 b5 ff ff ff       	call   f0100baa <cputchar>
f0100bf5:	83 c4 10             	add    $0x10,%esp
	*cnt++;
f0100bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0100bfb:	83 c0 04             	add    $0x4,%eax
f0100bfe:	89 45 0c             	mov    %eax,0xc(%ebp)
}
f0100c01:	90                   	nop
f0100c02:	c9                   	leave  
f0100c03:	c3                   	ret    

f0100c04 <vcprintf>:

int
vcprintf(const char *fmt, va_list ap)
{
f0100c04:	55                   	push   %ebp
f0100c05:	89 e5                	mov    %esp,%ebp
f0100c07:	83 ec 18             	sub    $0x18,%esp
	int cnt = 0;
f0100c0a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	vprintfmt((void*)putch, &cnt, fmt, ap);
f0100c11:	ff 75 0c             	pushl  0xc(%ebp)
f0100c14:	ff 75 08             	pushl  0x8(%ebp)
f0100c17:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0100c1a:	50                   	push   %eax
f0100c1b:	68 e4 0b 10 f0       	push   $0xf0100be4
f0100c20:	e8 6a f1 02 00       	call   f012fd8f <vprintfmt>
f0100c25:	83 c4 10             	add    $0x10,%esp
	return cnt;
f0100c28:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0100c2b:	c9                   	leave  
f0100c2c:	c3                   	ret    

f0100c2d <cprintf>:

int
cprintf(const char *fmt, ...)
{
f0100c2d:	55                   	push   %ebp
f0100c2e:	89 e5                	mov    %esp,%ebp
f0100c30:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int cnt;

	va_start(ap, fmt);
f0100c33:	8d 45 0c             	lea    0xc(%ebp),%eax
f0100c36:	89 45 f4             	mov    %eax,-0xc(%ebp)
	cnt = vcprintf(fmt, ap);
f0100c39:	8b 45 08             	mov    0x8(%ebp),%eax
f0100c3c:	83 ec 08             	sub    $0x8,%esp
f0100c3f:	ff 75 f4             	pushl  -0xc(%ebp)
f0100c42:	50                   	push   %eax
f0100c43:	e8 bc ff ff ff       	call   f0100c04 <vcprintf>
f0100c48:	83 c4 10             	add    $0x10,%esp
f0100c4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return cnt;
f0100c4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0100c51:	c9                   	leave  
f0100c52:	c3                   	ret    

f0100c53 <run_command_prompt>:

//TODO: [PROJECT MS1] [COMMAND PROMPT] auto-complete

//invoke the command prompt
void run_command_prompt()
{
f0100c53:	55                   	push   %ebp
f0100c54:	89 e5                	mov    %esp,%ebp
f0100c56:	81 ec 08 04 00 00    	sub    $0x408,%esp
	char command_line[1024];

	while (1==1)
	{
		//get command line
		readline("FOS> ", command_line);
f0100c5c:	83 ec 08             	sub    $0x8,%esp
f0100c5f:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100c65:	50                   	push   %eax
f0100c66:	68 91 27 13 f0       	push   $0xf0132791
f0100c6b:	e8 c7 f5 02 00       	call   f0130237 <readline>
f0100c70:	83 c4 10             	add    $0x10,%esp

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
f0100c73:	83 ec 0c             	sub    $0xc,%esp
f0100c76:	8d 85 f8 fb ff ff    	lea    -0x408(%ebp),%eax
f0100c7c:	50                   	push   %eax
f0100c7d:	e8 0d 00 00 00       	call   f0100c8f <execute_command>
f0100c82:	83 c4 10             	add    $0x10,%esp
f0100c85:	85 c0                	test   %eax,%eax
f0100c87:	78 02                	js     f0100c8b <run_command_prompt+0x38>
				break;
	}
f0100c89:	eb d1                	jmp    f0100c5c <run_command_prompt+0x9>
		readline("FOS> ", command_line);

		//parse and execute the command
		if (command_line != NULL)
			if (execute_command(command_line) < 0)
				break;
f0100c8b:	90                   	nop
	}
}
f0100c8c:	90                   	nop
f0100c8d:	c9                   	leave  
f0100c8e:	c3                   	ret    

f0100c8f <execute_command>:
#define WHITESPACE "\t\r\n "

//Function to parse any command and execute it
//(simply by calling its corresponding function)
int execute_command(char *command_string)
{
f0100c8f:	55                   	push   %ebp
f0100c90:	89 e5                	mov    %esp,%ebp
f0100c92:	83 ec 68             	sub    $0x68,%esp
	int number_of_arguments;
	//allocate array of char * of size MAX_ARGUMENTS = 16 found in string.h
	char *arguments[MAX_ARGUMENTS];


	strsplit(command_string, WHITESPACE, arguments, &number_of_arguments);
f0100c95:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0100c98:	50                   	push   %eax
f0100c99:	8d 45 9c             	lea    -0x64(%ebp),%eax
f0100c9c:	50                   	push   %eax
f0100c9d:	68 97 27 13 f0       	push   $0xf0132797
f0100ca2:	ff 75 08             	pushl  0x8(%ebp)
f0100ca5:	e8 c7 fd 02 00       	call   f0130a71 <strsplit>
f0100caa:	83 c4 10             	add    $0x10,%esp
	if (number_of_arguments == 0)
f0100cad:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0100cb0:	85 c0                	test   %eax,%eax
f0100cb2:	75 0a                	jne    f0100cbe <execute_command+0x2f>
		return 0;
f0100cb4:	b8 00 00 00 00       	mov    $0x0,%eax
f0100cb9:	e9 42 01 00 00       	jmp    f0100e00 <execute_command+0x171>

	// Lookup in the commands array and execute the command
	int command_found = 0;
f0100cbe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100cc5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0100ccc:	eb 33                	jmp    f0100d01 <execute_command+0x72>
	{
		if (strcmp(arguments[0], commands[i].name) == 0)
f0100cce:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100cd1:	89 d0                	mov    %edx,%eax
f0100cd3:	01 c0                	add    %eax,%eax
f0100cd5:	01 d0                	add    %edx,%eax
f0100cd7:	c1 e0 02             	shl    $0x2,%eax
f0100cda:	05 40 05 19 f0       	add    $0xf0190540,%eax
f0100cdf:	8b 10                	mov    (%eax),%edx
f0100ce1:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0100ce4:	83 ec 08             	sub    $0x8,%esp
f0100ce7:	52                   	push   %edx
f0100ce8:	50                   	push   %eax
f0100ce9:	e8 5b f8 02 00       	call   f0130549 <strcmp>
f0100cee:	83 c4 10             	add    $0x10,%esp
f0100cf1:	85 c0                	test   %eax,%eax
f0100cf3:	75 09                	jne    f0100cfe <execute_command+0x6f>
		{
			command_found = 1;
f0100cf5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
			break;
f0100cfc:	eb 0f                	jmp    f0100d0d <execute_command+0x7e>
		return 0;

	// Lookup in the commands array and execute the command
	int command_found = 0;
	int i ;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100cfe:	ff 45 f0             	incl   -0x10(%ebp)
f0100d01:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d04:	a1 ac 08 19 f0       	mov    0xf01908ac,%eax
f0100d09:	39 c2                	cmp    %eax,%edx
f0100d0b:	72 c1                	jb     f0100cce <execute_command+0x3f>
		}
	}



	if(command_found)
f0100d0d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0100d11:	74 2e                	je     f0100d41 <execute_command+0xb2>
	{
		int return_value;
		return_value = commands[i].function_to_execute(number_of_arguments, arguments);
f0100d13:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0100d16:	89 d0                	mov    %edx,%eax
f0100d18:	01 c0                	add    %eax,%eax
f0100d1a:	01 d0                	add    %edx,%eax
f0100d1c:	c1 e0 02             	shl    $0x2,%eax
f0100d1f:	05 48 05 19 f0       	add    $0xf0190548,%eax
f0100d24:	8b 00                	mov    (%eax),%eax
f0100d26:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0100d29:	83 ec 08             	sub    $0x8,%esp
f0100d2c:	8d 4d 9c             	lea    -0x64(%ebp),%ecx
f0100d2f:	51                   	push   %ecx
f0100d30:	52                   	push   %edx
f0100d31:	ff d0                	call   *%eax
f0100d33:	83 c4 10             	add    $0x10,%esp
f0100d36:	89 45 e0             	mov    %eax,-0x20(%ebp)
		return return_value;
f0100d39:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0100d3c:	e9 bf 00 00 00       	jmp    f0100e00 <execute_command+0x171>
	else
	{
		//if not found, then it's unknown command

		// auto complete
		int auto_complete_found = 0;
f0100d41:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	    int known_command_counter = 0;
f0100d48:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

		for (int j = 0; j < NUM_OF_COMMANDS; j++)
f0100d4f:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f0100d56:	eb 79                	jmp    f0100dd1 <execute_command+0x142>
		{
			if (strncmp(arguments[0], commands[j].name, strlen(arguments[0])) == 0)
f0100d58:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0100d5b:	83 ec 0c             	sub    $0xc,%esp
f0100d5e:	50                   	push   %eax
f0100d5f:	e8 d9 f6 02 00       	call   f013043d <strlen>
f0100d64:	83 c4 10             	add    $0x10,%esp
f0100d67:	89 c1                	mov    %eax,%ecx
f0100d69:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100d6c:	89 d0                	mov    %edx,%eax
f0100d6e:	01 c0                	add    %eax,%eax
f0100d70:	01 d0                	add    %edx,%eax
f0100d72:	c1 e0 02             	shl    $0x2,%eax
f0100d75:	05 40 05 19 f0       	add    $0xf0190540,%eax
f0100d7a:	8b 10                	mov    (%eax),%edx
f0100d7c:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0100d7f:	83 ec 04             	sub    $0x4,%esp
f0100d82:	51                   	push   %ecx
f0100d83:	52                   	push   %edx
f0100d84:	50                   	push   %eax
f0100d85:	e8 f7 f7 02 00       	call   f0130581 <strncmp>
f0100d8a:	83 c4 10             	add    $0x10,%esp
f0100d8d:	85 c0                	test   %eax,%eax
f0100d8f:	75 09                	jne    f0100d9a <execute_command+0x10b>
			{

				auto_complete_found = 1;
f0100d91:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f0100d98:	eb 07                	jmp    f0100da1 <execute_command+0x112>

			}
			else
			{
				auto_complete_found = 0;
f0100d9a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

			}


			if(auto_complete_found)
f0100da1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0100da5:	74 27                	je     f0100dce <execute_command+0x13f>
			{
				known_command_counter += 1;
f0100da7:	ff 45 e8             	incl   -0x18(%ebp)
				cprintf("%s\n", commands[j].name);
f0100daa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100dad:	89 d0                	mov    %edx,%eax
f0100daf:	01 c0                	add    %eax,%eax
f0100db1:	01 d0                	add    %edx,%eax
f0100db3:	c1 e0 02             	shl    $0x2,%eax
f0100db6:	05 40 05 19 f0       	add    $0xf0190540,%eax
f0100dbb:	8b 00                	mov    (%eax),%eax
f0100dbd:	83 ec 08             	sub    $0x8,%esp
f0100dc0:	50                   	push   %eax
f0100dc1:	68 9c 27 13 f0       	push   $0xf013279c
f0100dc6:	e8 62 fe ff ff       	call   f0100c2d <cprintf>
f0100dcb:	83 c4 10             	add    $0x10,%esp

		// auto complete
		int auto_complete_found = 0;
	    int known_command_counter = 0;

		for (int j = 0; j < NUM_OF_COMMANDS; j++)
f0100dce:	ff 45 e4             	incl   -0x1c(%ebp)
f0100dd1:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0100dd4:	a1 ac 08 19 f0       	mov    0xf01908ac,%eax
f0100dd9:	39 c2                	cmp    %eax,%edx
f0100ddb:	0f 82 77 ff ff ff    	jb     f0100d58 <execute_command+0xc9>
				cprintf("%s\n", commands[j].name);
			}
		}


		if(known_command_counter == 0)
f0100de1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f0100de5:	75 14                	jne    f0100dfb <execute_command+0x16c>
		{
			cprintf("Unknown command '%s'\n", arguments[0]);
f0100de7:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0100dea:	83 ec 08             	sub    $0x8,%esp
f0100ded:	50                   	push   %eax
f0100dee:	68 a0 27 13 f0       	push   $0xf01327a0
f0100df3:	e8 35 fe ff ff       	call   f0100c2d <cprintf>
f0100df8:	83 c4 10             	add    $0x10,%esp
		}

		return 0;
f0100dfb:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f0100e00:	c9                   	leave  
f0100e01:	c3                   	ret    

f0100e02 <setKHeapPlacementStrategyCONTALLOC>:
#define KHP_PLACE_FIRSTFIT 	0x1
#define KHP_PLACE_BESTFIT 	0x2
#define KHP_PLACE_NEXTFIT 	0x3
#define KHP_PLACE_WORSTFIT 	0x4

static inline void setKHeapPlacementStrategyCONTALLOC(){_KHeapPlacementStrategy = KHP_PLACE_CONTALLOC;}
f0100e02:	55                   	push   %ebp
f0100e03:	89 e5                	mov    %esp,%ebp
f0100e05:	c7 05 b8 84 6e f0 00 	movl   $0x0,0xf06e84b8
f0100e0c:	00 00 00 
f0100e0f:	90                   	nop
f0100e10:	5d                   	pop    %ebp
f0100e11:	c3                   	ret    

f0100e12 <setKHeapPlacementStrategyFIRSTFIT>:
static inline void setKHeapPlacementStrategyFIRSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_FIRSTFIT;}
f0100e12:	55                   	push   %ebp
f0100e13:	89 e5                	mov    %esp,%ebp
f0100e15:	c7 05 b8 84 6e f0 01 	movl   $0x1,0xf06e84b8
f0100e1c:	00 00 00 
f0100e1f:	90                   	nop
f0100e20:	5d                   	pop    %ebp
f0100e21:	c3                   	ret    

f0100e22 <setKHeapPlacementStrategyBESTFIT>:
static inline void setKHeapPlacementStrategyBESTFIT(){_KHeapPlacementStrategy = KHP_PLACE_BESTFIT;}
f0100e22:	55                   	push   %ebp
f0100e23:	89 e5                	mov    %esp,%ebp
f0100e25:	c7 05 b8 84 6e f0 02 	movl   $0x2,0xf06e84b8
f0100e2c:	00 00 00 
f0100e2f:	90                   	nop
f0100e30:	5d                   	pop    %ebp
f0100e31:	c3                   	ret    

f0100e32 <setKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyNEXTFIT(){_KHeapPlacementStrategy = KHP_PLACE_NEXTFIT;}
f0100e32:	55                   	push   %ebp
f0100e33:	89 e5                	mov    %esp,%ebp
f0100e35:	c7 05 b8 84 6e f0 03 	movl   $0x3,0xf06e84b8
f0100e3c:	00 00 00 
f0100e3f:	90                   	nop
f0100e40:	5d                   	pop    %ebp
f0100e41:	c3                   	ret    

f0100e42 <setKHeapPlacementStrategyWORSTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}
f0100e42:	55                   	push   %ebp
f0100e43:	89 e5                	mov    %esp,%ebp
f0100e45:	c7 05 b8 84 6e f0 04 	movl   $0x4,0xf06e84b8
f0100e4c:	00 00 00 
f0100e4f:	90                   	nop
f0100e50:	5d                   	pop    %ebp
f0100e51:	c3                   	ret    

f0100e52 <isKHeapPlacementStrategyCONTALLOC>:

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
f0100e52:	55                   	push   %ebp
f0100e53:	89 e5                	mov    %esp,%ebp
f0100e55:	a1 b8 84 6e f0       	mov    0xf06e84b8,%eax
f0100e5a:	85 c0                	test   %eax,%eax
f0100e5c:	75 04                	jne    f0100e62 <isKHeapPlacementStrategyCONTALLOC+0x10>
f0100e5e:	b0 01                	mov    $0x1,%al
f0100e60:	eb 02                	jmp    f0100e64 <isKHeapPlacementStrategyCONTALLOC+0x12>
f0100e62:	b0 00                	mov    $0x0,%al
f0100e64:	5d                   	pop    %ebp
f0100e65:	c3                   	ret    

f0100e66 <isKHeapPlacementStrategyFIRSTFIT>:
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100e66:	55                   	push   %ebp
f0100e67:	89 e5                	mov    %esp,%ebp
f0100e69:	a1 b8 84 6e f0       	mov    0xf06e84b8,%eax
f0100e6e:	83 f8 01             	cmp    $0x1,%eax
f0100e71:	75 04                	jne    f0100e77 <isKHeapPlacementStrategyFIRSTFIT+0x11>
f0100e73:	b0 01                	mov    $0x1,%al
f0100e75:	eb 02                	jmp    f0100e79 <isKHeapPlacementStrategyFIRSTFIT+0x13>
f0100e77:	b0 00                	mov    $0x0,%al
f0100e79:	5d                   	pop    %ebp
f0100e7a:	c3                   	ret    

f0100e7b <isKHeapPlacementStrategyBESTFIT>:
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
f0100e7b:	55                   	push   %ebp
f0100e7c:	89 e5                	mov    %esp,%ebp
f0100e7e:	a1 b8 84 6e f0       	mov    0xf06e84b8,%eax
f0100e83:	83 f8 02             	cmp    $0x2,%eax
f0100e86:	75 04                	jne    f0100e8c <isKHeapPlacementStrategyBESTFIT+0x11>
f0100e88:	b0 01                	mov    $0x1,%al
f0100e8a:	eb 02                	jmp    f0100e8e <isKHeapPlacementStrategyBESTFIT+0x13>
f0100e8c:	b0 00                	mov    $0x0,%al
f0100e8e:	5d                   	pop    %ebp
f0100e8f:	c3                   	ret    

f0100e90 <isKHeapPlacementStrategyNEXTFIT>:
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0100e90:	55                   	push   %ebp
f0100e91:	89 e5                	mov    %esp,%ebp
f0100e93:	a1 b8 84 6e f0       	mov    0xf06e84b8,%eax
f0100e98:	83 f8 03             	cmp    $0x3,%eax
f0100e9b:	75 04                	jne    f0100ea1 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0100e9d:	b0 01                	mov    $0x1,%al
f0100e9f:	eb 02                	jmp    f0100ea3 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0100ea1:	b0 00                	mov    $0x0,%al
f0100ea3:	5d                   	pop    %ebp
f0100ea4:	c3                   	ret    

f0100ea5 <isKHeapPlacementStrategyWORSTFIT>:
static inline uint8 isKHeapPlacementStrategyWORSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_WORSTFIT) return 1; return 0;}
f0100ea5:	55                   	push   %ebp
f0100ea6:	89 e5                	mov    %esp,%ebp
f0100ea8:	a1 b8 84 6e f0       	mov    0xf06e84b8,%eax
f0100ead:	83 f8 04             	cmp    $0x4,%eax
f0100eb0:	75 04                	jne    f0100eb6 <isKHeapPlacementStrategyWORSTFIT+0x11>
f0100eb2:	b0 01                	mov    $0x1,%al
f0100eb4:	eb 02                	jmp    f0100eb8 <isKHeapPlacementStrategyWORSTFIT+0x13>
f0100eb6:	b0 00                	mov    $0x0,%al
f0100eb8:	5d                   	pop    %ebp
f0100eb9:	c3                   	ret    

f0100eba <setUHeapPlacementStrategyFIRSTFIT>:

//***********************************
/*2015*/ //USER HEAP STRATEGIES
uint32 _UHeapPlacementStrategy;

static inline void setUHeapPlacementStrategyFIRSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_FIRSTFIT;}
f0100eba:	55                   	push   %ebp
f0100ebb:	89 e5                	mov    %esp,%ebp
f0100ebd:	c7 05 8c 84 6e f0 01 	movl   $0x1,0xf06e848c
f0100ec4:	00 00 00 
f0100ec7:	90                   	nop
f0100ec8:	5d                   	pop    %ebp
f0100ec9:	c3                   	ret    

f0100eca <setUHeapPlacementStrategyBESTFIT>:
static inline void setUHeapPlacementStrategyBESTFIT(){_UHeapPlacementStrategy = UHP_PLACE_BESTFIT;}
f0100eca:	55                   	push   %ebp
f0100ecb:	89 e5                	mov    %esp,%ebp
f0100ecd:	c7 05 8c 84 6e f0 02 	movl   $0x2,0xf06e848c
f0100ed4:	00 00 00 
f0100ed7:	90                   	nop
f0100ed8:	5d                   	pop    %ebp
f0100ed9:	c3                   	ret    

f0100eda <setUHeapPlacementStrategyNEXTFIT>:
static inline void setUHeapPlacementStrategyNEXTFIT(){_UHeapPlacementStrategy = UHP_PLACE_NEXTFIT;}
f0100eda:	55                   	push   %ebp
f0100edb:	89 e5                	mov    %esp,%ebp
f0100edd:	c7 05 8c 84 6e f0 03 	movl   $0x3,0xf06e848c
f0100ee4:	00 00 00 
f0100ee7:	90                   	nop
f0100ee8:	5d                   	pop    %ebp
f0100ee9:	c3                   	ret    

f0100eea <setUHeapPlacementStrategyWORSTFIT>:
static inline void setUHeapPlacementStrategyWORSTFIT(){_UHeapPlacementStrategy = UHP_PLACE_WORSTFIT;}
f0100eea:	55                   	push   %ebp
f0100eeb:	89 e5                	mov    %esp,%ebp
f0100eed:	c7 05 8c 84 6e f0 04 	movl   $0x4,0xf06e848c
f0100ef4:	00 00 00 
f0100ef7:	90                   	nop
f0100ef8:	5d                   	pop    %ebp
f0100ef9:	c3                   	ret    

f0100efa <isUHeapPlacementStrategyFIRSTFIT>:

static inline uint8 isUHeapPlacementStrategyFIRSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_FIRSTFIT) return 1; return 0;}
f0100efa:	55                   	push   %ebp
f0100efb:	89 e5                	mov    %esp,%ebp
f0100efd:	a1 8c 84 6e f0       	mov    0xf06e848c,%eax
f0100f02:	83 f8 01             	cmp    $0x1,%eax
f0100f05:	75 04                	jne    f0100f0b <isUHeapPlacementStrategyFIRSTFIT+0x11>
f0100f07:	b0 01                	mov    $0x1,%al
f0100f09:	eb 02                	jmp    f0100f0d <isUHeapPlacementStrategyFIRSTFIT+0x13>
f0100f0b:	b0 00                	mov    $0x0,%al
f0100f0d:	5d                   	pop    %ebp
f0100f0e:	c3                   	ret    

f0100f0f <isUHeapPlacementStrategyBESTFIT>:
static inline uint8 isUHeapPlacementStrategyBESTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_BESTFIT) return 1; return 0;}
f0100f0f:	55                   	push   %ebp
f0100f10:	89 e5                	mov    %esp,%ebp
f0100f12:	a1 8c 84 6e f0       	mov    0xf06e848c,%eax
f0100f17:	83 f8 02             	cmp    $0x2,%eax
f0100f1a:	75 04                	jne    f0100f20 <isUHeapPlacementStrategyBESTFIT+0x11>
f0100f1c:	b0 01                	mov    $0x1,%al
f0100f1e:	eb 02                	jmp    f0100f22 <isUHeapPlacementStrategyBESTFIT+0x13>
f0100f20:	b0 00                	mov    $0x0,%al
f0100f22:	5d                   	pop    %ebp
f0100f23:	c3                   	ret    

f0100f24 <isUHeapPlacementStrategyNEXTFIT>:
static inline uint8 isUHeapPlacementStrategyNEXTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_NEXTFIT) return 1; return 0;}
f0100f24:	55                   	push   %ebp
f0100f25:	89 e5                	mov    %esp,%ebp
f0100f27:	a1 8c 84 6e f0       	mov    0xf06e848c,%eax
f0100f2c:	83 f8 03             	cmp    $0x3,%eax
f0100f2f:	75 04                	jne    f0100f35 <isUHeapPlacementStrategyNEXTFIT+0x11>
f0100f31:	b0 01                	mov    $0x1,%al
f0100f33:	eb 02                	jmp    f0100f37 <isUHeapPlacementStrategyNEXTFIT+0x13>
f0100f35:	b0 00                	mov    $0x0,%al
f0100f37:	5d                   	pop    %ebp
f0100f38:	c3                   	ret    

f0100f39 <isUHeapPlacementStrategyWORSTFIT>:
static inline uint8 isUHeapPlacementStrategyWORSTFIT(){if(_UHeapPlacementStrategy == UHP_PLACE_WORSTFIT) return 1; return 0;}
f0100f39:	55                   	push   %ebp
f0100f3a:	89 e5                	mov    %esp,%ebp
f0100f3c:	a1 8c 84 6e f0       	mov    0xf06e848c,%eax
f0100f41:	83 f8 04             	cmp    $0x4,%eax
f0100f44:	75 04                	jne    f0100f4a <isUHeapPlacementStrategyWORSTFIT+0x11>
f0100f46:	b0 01                	mov    $0x1,%al
f0100f48:	eb 02                	jmp    f0100f4c <isUHeapPlacementStrategyWORSTFIT+0x13>
f0100f4a:	b0 00                	mov    $0x0,%al
f0100f4c:	5d                   	pop    %ebp
f0100f4d:	c3                   	ret    

f0100f4e <to_frame_info>:
{
	return to_frame_number(ptr_frame_info) << PGSHIFT;
}

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0100f4e:	55                   	push   %ebp
f0100f4f:	89 e5                	mov    %esp,%ebp
f0100f51:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0100f54:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f57:	c1 e8 0c             	shr    $0xc,%eax
f0100f5a:	89 c2                	mov    %eax,%edx
f0100f5c:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0100f61:	39 c2                	cmp    %eax,%edx
f0100f63:	72 14                	jb     f0100f79 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0100f65:	83 ec 04             	sub    $0x4,%esp
f0100f68:	68 b8 27 13 f0       	push   $0xf01327b8
f0100f6d:	6a 55                	push   $0x55
f0100f6f:	68 e0 27 13 f0       	push   $0xf01327e0
f0100f74:	e8 2d f2 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0100f79:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0100f7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0100f82:	c1 e8 0c             	shr    $0xc,%eax
f0100f85:	89 c1                	mov    %eax,%ecx
f0100f87:	89 c8                	mov    %ecx,%eax
f0100f89:	01 c0                	add    %eax,%eax
f0100f8b:	01 c8                	add    %ecx,%eax
f0100f8d:	c1 e0 03             	shl    $0x3,%eax
f0100f90:	01 d0                	add    %edx,%eax
}
f0100f92:	c9                   	leave  
f0100f93:	c3                   	ret    

f0100f94 <command_help>:

/***** Implementations of basic kernel command prompt commands *****/

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
f0100f94:	55                   	push   %ebp
f0100f95:	89 e5                	mov    %esp,%ebp
f0100f97:	53                   	push   %ebx
f0100f98:	83 ec 14             	sub    $0x14,%esp
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100f9b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0100fa2:	eb 3b                	jmp    f0100fdf <command_help+0x4b>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);
f0100fa4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100fa7:	89 d0                	mov    %edx,%eax
f0100fa9:	01 c0                	add    %eax,%eax
f0100fab:	01 d0                	add    %edx,%eax
f0100fad:	c1 e0 02             	shl    $0x2,%eax
f0100fb0:	05 44 05 19 f0       	add    $0xf0190544,%eax
f0100fb5:	8b 10                	mov    (%eax),%edx
f0100fb7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0100fba:	89 c8                	mov    %ecx,%eax
f0100fbc:	01 c0                	add    %eax,%eax
f0100fbe:	01 c8                	add    %ecx,%eax
f0100fc0:	c1 e0 02             	shl    $0x2,%eax
f0100fc3:	05 40 05 19 f0       	add    $0xf0190540,%eax
f0100fc8:	8b 00                	mov    (%eax),%eax
f0100fca:	83 ec 04             	sub    $0x4,%esp
f0100fcd:	52                   	push   %edx
f0100fce:	50                   	push   %eax
f0100fcf:	68 5a 36 13 f0       	push   $0xf013365a
f0100fd4:	e8 54 fc ff ff       	call   f0100c2d <cprintf>
f0100fd9:	83 c4 10             	add    $0x10,%esp

//print name and description of each command
int command_help(int number_of_arguments, char **arguments)
{
	int i;
	for (i = 0; i < NUM_OF_COMMANDS; i++)
f0100fdc:	ff 45 f4             	incl   -0xc(%ebp)
f0100fdf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0100fe2:	a1 ac 08 19 f0       	mov    0xf01908ac,%eax
f0100fe7:	39 c2                	cmp    %eax,%edx
f0100fe9:	72 b9                	jb     f0100fa4 <command_help+0x10>
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");
f0100feb:	83 ec 0c             	sub    $0xc,%esp
f0100fee:	68 63 36 13 f0       	push   $0xf0133663
f0100ff3:	e8 35 fc ff ff       	call   f0100c2d <cprintf>
f0100ff8:	83 c4 10             	add    $0x10,%esp

	for (i = 0; i < NUM_USER_PROGS; i++)
f0100ffb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101002:	eb 42                	jmp    f0101046 <command_help+0xb2>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
f0101004:	8b 0d c0 0c 19 f0    	mov    0xf0190cc0,%ecx
f010100a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010100d:	89 d0                	mov    %edx,%eax
f010100f:	01 c0                	add    %eax,%eax
f0101011:	01 d0                	add    %edx,%eax
f0101013:	c1 e0 02             	shl    $0x2,%eax
f0101016:	01 c8                	add    %ecx,%eax
f0101018:	8b 50 04             	mov    0x4(%eax),%edx
f010101b:	8b 1d c0 0c 19 f0    	mov    0xf0190cc0,%ebx
f0101021:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101024:	89 c8                	mov    %ecx,%eax
f0101026:	01 c0                	add    %eax,%eax
f0101028:	01 c8                	add    %ecx,%eax
f010102a:	c1 e0 02             	shl    $0x2,%eax
f010102d:	01 d8                	add    %ebx,%eax
f010102f:	8b 00                	mov    (%eax),%eax
f0101031:	83 ec 04             	sub    $0x4,%esp
f0101034:	52                   	push   %edx
f0101035:	50                   	push   %eax
f0101036:	68 78 36 13 f0       	push   $0xf0133678
f010103b:	e8 ed fb ff ff       	call   f0100c2d <cprintf>
f0101040:	83 c4 10             	add    $0x10,%esp
	for (i = 0; i < NUM_OF_COMMANDS; i++)
		cprintf("%s - %s\n", commands[i].name, commands[i].description);

	cprintf("-------------------\n");

	for (i = 0; i < NUM_USER_PROGS; i++)
f0101043:	ff 45 f4             	incl   -0xc(%ebp)
f0101046:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f010104b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010104e:	7c b4                	jl     f0101004 <command_help+0x70>
		cprintf("run %s - %s [User Program]\n", ptr_UserPrograms[i].name, ptr_UserPrograms[i].desc);
	return 0;
f0101050:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101055:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101058:	c9                   	leave  
f0101059:	c3                   	ret    

f010105a <command_kernel_info>:

//print information about kernel addresses and kernel size
int command_kernel_info(int number_of_arguments, char **arguments )
{
f010105a:	55                   	push   %ebp
f010105b:	89 e5                	mov    %esp,%ebp
f010105d:	83 ec 08             	sub    $0x8,%esp
	extern char start_of_kernel[], end_of_kernel_code_section[], start_of_uninitialized_data_section[], end_of_kernel[];

	cprintf("Special kernel symbols:\n");
f0101060:	83 ec 0c             	sub    $0xc,%esp
f0101063:	68 94 36 13 f0       	push   $0xf0133694
f0101068:	e8 c0 fb ff ff       	call   f0100c2d <cprintf>
f010106d:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
f0101070:	b8 0c 00 10 00       	mov    $0x10000c,%eax
f0101075:	83 ec 04             	sub    $0x4,%esp
f0101078:	50                   	push   %eax
f0101079:	68 0c 00 10 f0       	push   $0xf010000c
f010107e:	68 b0 36 13 f0       	push   $0xf01336b0
f0101083:	e8 a5 fb ff ff       	call   f0100c2d <cprintf>
f0101088:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
f010108b:	b8 e9 25 13 00       	mov    $0x1325e9,%eax
f0101090:	83 ec 04             	sub    $0x4,%esp
f0101093:	50                   	push   %eax
f0101094:	68 e9 25 13 f0       	push   $0xf01325e9
f0101099:	68 ec 36 13 f0       	push   $0xf01336ec
f010109e:	e8 8a fb ff ff       	call   f0100c2d <cprintf>
f01010a3:	83 c4 10             	add    $0x10,%esp
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
f01010a6:	b8 cc 84 65 00       	mov    $0x6584cc,%eax
f01010ab:	83 ec 04             	sub    $0x4,%esp
f01010ae:	50                   	push   %eax
f01010af:	68 cc 84 65 f0       	push   $0xf06584cc
f01010b4:	68 28 37 13 f0       	push   $0xf0133728
f01010b9:	e8 6f fb ff ff       	call   f0100c2d <cprintf>
f01010be:	83 c4 10             	add    $0x10,%esp
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
f01010c1:	b8 1c 86 6e 00       	mov    $0x6e861c,%eax
f01010c6:	83 ec 04             	sub    $0x4,%esp
f01010c9:	50                   	push   %eax
f01010ca:	68 1c 86 6e f0       	push   $0xf06e861c
f01010cf:	68 70 37 13 f0       	push   $0xf0133770
f01010d4:	e8 54 fb ff ff       	call   f0100c2d <cprintf>
f01010d9:	83 c4 10             	add    $0x10,%esp
	cprintf("Kernel executable memory footprint: %d KB\n",
			(end_of_kernel-start_of_kernel+1023)/1024);
f01010dc:	b8 1c 86 6e f0       	mov    $0xf06e861c,%eax
f01010e1:	8d 90 ff 03 00 00    	lea    0x3ff(%eax),%edx
f01010e7:	b8 0c 00 10 f0       	mov    $0xf010000c,%eax
f01010ec:	29 c2                	sub    %eax,%edx
f01010ee:	89 d0                	mov    %edx,%eax
	cprintf("Special kernel symbols:\n");
	cprintf("  Start Address of the kernel 			%08x (virt)  %08x (phys)\n", start_of_kernel, start_of_kernel - KERNEL_BASE);
	cprintf("  End address of kernel code  			%08x (virt)  %08x (phys)\n", end_of_kernel_code_section, end_of_kernel_code_section - KERNEL_BASE);
	cprintf("  Start addr. of uninitialized data section 	%08x (virt)  %08x (phys)\n", start_of_uninitialized_data_section, start_of_uninitialized_data_section - KERNEL_BASE);
	cprintf("  End address of the kernel   			%08x (virt)  %08x (phys)\n", end_of_kernel, end_of_kernel - KERNEL_BASE);
	cprintf("Kernel executable memory footprint: %d KB\n",
f01010f0:	85 c0                	test   %eax,%eax
f01010f2:	79 05                	jns    f01010f9 <command_kernel_info+0x9f>
f01010f4:	05 ff 03 00 00       	add    $0x3ff,%eax
f01010f9:	c1 f8 0a             	sar    $0xa,%eax
f01010fc:	83 ec 08             	sub    $0x8,%esp
f01010ff:	50                   	push   %eax
f0101100:	68 ac 37 13 f0       	push   $0xf01337ac
f0101105:	e8 23 fb ff ff       	call   f0100c2d <cprintf>
f010110a:	83 c4 10             	add    $0x10,%esp
			(end_of_kernel-start_of_kernel+1023)/1024);
	return 0;
f010110d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101112:	c9                   	leave  
f0101113:	c3                   	ret    

f0101114 <command_kernel_base_info>:

//===========================================================================
//Lab3.Examples
//=============
int command_kernel_base_info(int number_of_arguments, char **arguments)
{
f0101114:	55                   	push   %ebp
f0101115:	89 e5                	mov    %esp,%ebp
f0101117:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "ikb"
	//Comment the following line
	panic("Function is not implemented yet!");
f010111a:	83 ec 04             	sub    $0x4,%esp
f010111d:	68 d8 37 13 f0       	push   $0xf01337d8
f0101122:	68 b0 00 00 00       	push   $0xb0
f0101127:	68 f9 37 13 f0       	push   $0xf01337f9
f010112c:	e8 75 f0 ff ff       	call   f01001a6 <_panic>

f0101131 <command_del_kernel_base>:
	return 0;
}


int command_del_kernel_base(int number_of_arguments, char **arguments)
{
f0101131:	55                   	push   %ebp
f0101132:	89 e5                	mov    %esp,%ebp
f0101134:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "dkb"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101137:	83 ec 04             	sub    $0x4,%esp
f010113a:	68 d8 37 13 f0       	push   $0xf01337d8
f010113f:	68 ba 00 00 00       	push   $0xba
f0101144:	68 f9 37 13 f0       	push   $0xf01337f9
f0101149:	e8 58 f0 ff ff       	call   f01001a6 <_panic>

f010114e <command_share_page>:

	return 0;
}

int command_share_page(int number_of_arguments, char **arguments)
{
f010114e:	55                   	push   %ebp
f010114f:	89 e5                	mov    %esp,%ebp
f0101151:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB3 Example: fill this function. corresponding command name is "shr"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101154:	83 ec 04             	sub    $0x4,%esp
f0101157:	68 d8 37 13 f0       	push   $0xf01337d8
f010115c:	68 c3 00 00 00       	push   $0xc3
f0101161:	68 f9 37 13 f0       	push   $0xf01337f9
f0101166:	e8 3b f0 ff ff       	call   f01001a6 <_panic>

f010116b <command_show_mapping>:

//===========================================================================
//Lab4.Hands.On
//=============
int command_show_mapping(int number_of_arguments, char **arguments)
{
f010116b:	55                   	push   %ebp
f010116c:	89 e5                	mov    %esp,%ebp
f010116e:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sm"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101171:	83 ec 04             	sub    $0x4,%esp
f0101174:	68 d8 37 13 f0       	push   $0xf01337d8
f0101179:	68 cf 00 00 00       	push   $0xcf
f010117e:	68 f9 37 13 f0       	push   $0xf01337f9
f0101183:	e8 1e f0 ff ff       	call   f01001a6 <_panic>

f0101188 <command_set_permission>:

	return 0 ;
}

int command_set_permission(int number_of_arguments, char **arguments)
{
f0101188:	55                   	push   %ebp
f0101189:	89 e5                	mov    %esp,%ebp
f010118b:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010118e:	83 ec 04             	sub    $0x4,%esp
f0101191:	68 d8 37 13 f0       	push   $0xf01337d8
f0101196:	68 d8 00 00 00       	push   $0xd8
f010119b:	68 f9 37 13 f0       	push   $0xf01337f9
f01011a0:	e8 01 f0 ff ff       	call   f01001a6 <_panic>

f01011a5 <command_share_range>:

	return 0 ;
}

int command_share_range(int number_of_arguments, char **arguments)
{
f01011a5:	55                   	push   %ebp
f01011a6:	89 e5                	mov    %esp,%ebp
f01011a8:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB4 Hands-on: fill this function. corresponding command name is "sr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011ab:	83 ec 04             	sub    $0x4,%esp
f01011ae:	68 d8 37 13 f0       	push   $0xf01337d8
f01011b3:	68 e1 00 00 00       	push   $0xe1
f01011b8:	68 f9 37 13 f0       	push   $0xf01337f9
f01011bd:	e8 e4 ef ff ff       	call   f01001a6 <_panic>

f01011c2 <command_nr>:
//===========================================================================
//Lab5.Examples
//==============
//[1] Number of references on the given physical address
int command_nr(int number_of_arguments, char **arguments)
{
f01011c2:	55                   	push   %ebp
f01011c3:	89 e5                	mov    %esp,%ebp
f01011c5:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "nr"
	//Comment the following line
	panic("Function is not implemented yet!");
f01011c8:	83 ec 04             	sub    $0x4,%esp
f01011cb:	68 d8 37 13 f0       	push   $0xf01337d8
f01011d0:	68 ee 00 00 00       	push   $0xee
f01011d5:	68 f9 37 13 f0       	push   $0xf01337f9
f01011da:	e8 c7 ef ff ff       	call   f01001a6 <_panic>

f01011df <command_ap>:
	return 0;
}

//[2] Allocate Page: If the given user virtual address is mapped, do nothing. Else, allocate a single frame and map it to a given virtual address in the user space
int command_ap(int number_of_arguments, char **arguments)
{
f01011df:	55                   	push   %ebp
f01011e0:	89 e5                	mov    %esp,%ebp
f01011e2:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "ap"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f01011e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01011e8:	83 c0 04             	add    $0x4,%eax
f01011eb:	8b 00                	mov    (%eax),%eax
f01011ed:	83 ec 04             	sub    $0x4,%esp
f01011f0:	6a 10                	push   $0x10
f01011f2:	6a 00                	push   $0x0
f01011f4:	50                   	push   %eax
f01011f5:	e8 a3 f5 02 00       	call   f013079d <strtol>
f01011fa:	83 c4 10             	add    $0x10,%esp
f01011fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct FrameInfo* ptr_frame_info;
	int ret = allocate_frame(&ptr_frame_info) ;
f0101200:	83 ec 0c             	sub    $0xc,%esp
f0101203:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0101206:	50                   	push   %eax
f0101207:	e8 a6 55 00 00       	call   f01067b2 <allocate_frame>
f010120c:	83 c4 10             	add    $0x10,%esp
f010120f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	map_frame(ptr_page_directory, ptr_frame_info, va, PERM_USER | PERM_WRITEABLE);
f0101212:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0101215:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f010121a:	6a 06                	push   $0x6
f010121c:	ff 75 f4             	pushl  -0xc(%ebp)
f010121f:	52                   	push   %edx
f0101220:	50                   	push   %eax
f0101221:	e8 24 59 00 00       	call   f0106b4a <map_frame>
f0101226:	83 c4 10             	add    $0x10,%esp

	return 0 ;
f0101229:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010122e:	c9                   	leave  
f010122f:	c3                   	ret    

f0101230 <command_fp>:

//[3] Free Page: Un-map a single page at the given virtual address in the user space
int command_fp(int number_of_arguments, char **arguments)
{
f0101230:	55                   	push   %ebp
f0101231:	89 e5                	mov    %esp,%ebp
f0101233:	83 ec 18             	sub    $0x18,%esp
	//TODO: LAB5 Example: fill this function. corresponding command name is "fp"
	//Comment the following line
	//panic("Function is not implemented yet!");

	uint32 va = strtol(arguments[1], NULL, 16);
f0101236:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101239:	83 c0 04             	add    $0x4,%eax
f010123c:	8b 00                	mov    (%eax),%eax
f010123e:	83 ec 04             	sub    $0x4,%esp
f0101241:	6a 10                	push   $0x10
f0101243:	6a 00                	push   $0x0
f0101245:	50                   	push   %eax
f0101246:	e8 52 f5 02 00       	call   f013079d <strtol>
f010124b:	83 c4 10             	add    $0x10,%esp
f010124e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// Un-map the page at this address
	unmap_frame(ptr_page_directory, va);
f0101251:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0101256:	83 ec 08             	sub    $0x8,%esp
f0101259:	ff 75 f4             	pushl  -0xc(%ebp)
f010125c:	50                   	push   %eax
f010125d:	e8 17 5a 00 00       	call   f0106c79 <unmap_frame>
f0101262:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101265:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010126a:	c9                   	leave  
f010126b:	c3                   	ret    

f010126c <command_asp>:
//===========================================================================
//Lab5.Hands-on
//==============
//[1] Allocate Shared Pages
int command_asp(int number_of_arguments, char **arguments)
{
f010126c:	55                   	push   %ebp
f010126d:	89 e5                	mov    %esp,%ebp
f010126f:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "asp"
	//Comment the following line
	panic("Function is not implemented yet!");
f0101272:	83 ec 04             	sub    $0x4,%esp
f0101275:	68 d8 37 13 f0       	push   $0xf01337d8
f010127a:	68 18 01 00 00       	push   $0x118
f010127f:	68 f9 37 13 f0       	push   $0xf01337f9
f0101284:	e8 1d ef ff ff       	call   f01001a6 <_panic>

f0101289 <command_cfp>:
}


//[2] Count Free Pages in Range
int command_cfp(int number_of_arguments, char **arguments)
{
f0101289:	55                   	push   %ebp
f010128a:	89 e5                	mov    %esp,%ebp
f010128c:	83 ec 08             	sub    $0x8,%esp
	//TODO: LAB5 Hands-on: fill this function. corresponding command name is "cfp"
	//Comment the following line
	panic("Function is not implemented yet!");
f010128f:	83 ec 04             	sub    $0x4,%esp
f0101292:	68 d8 37 13 f0       	push   $0xf01337d8
f0101297:	68 23 01 00 00       	push   $0x123
f010129c:	68 f9 37 13 f0       	push   $0xf01337f9
f01012a1:	e8 00 ef ff ff       	call   f01001a6 <_panic>

f01012a6 <command_ft>:

//===========================================================================
//Lab6.Examples
//=============
int command_ft(int number_of_arguments, char **arguments)
{
f01012a6:	55                   	push   %ebp
f01012a7:	89 e5                	mov    %esp,%ebp
	//TODO: LAB6 Example: fill this function. corresponding command name is "ft"
	//Comment the following line

	return 0;
f01012a9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01012ae:	5d                   	pop    %ebp
f01012af:	c3                   	ret    

f01012b0 <command_writeusermem>:

//*****************************************************************************************//
//***************************** PROJECT HELPERS COMMAND ***********************************//
//*****************************************************************************************//
int command_writeusermem(int number_of_arguments, char **arguments)
{
f01012b0:	55                   	push   %ebp
f01012b1:	89 e5                	mov    %esp,%ebp
f01012b3:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 3)
f01012b6:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01012ba:	75 37                	jne    f01012f3 <command_writeusermem+0x43>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f01012bc:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012bf:	83 c0 04             	add    $0x4,%eax
f01012c2:	8b 00                	mov    (%eax),%eax
f01012c4:	83 ec 04             	sub    $0x4,%esp
f01012c7:	6a 10                	push   $0x10
f01012c9:	6a 00                	push   $0x0
f01012cb:	50                   	push   %eax
f01012cc:	e8 cc f4 02 00       	call   f013079d <strtol>
f01012d1:	83 c4 10             	add    $0x10,%esp
f01012d4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address) ;
f01012d7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01012da:	89 45 d8             	mov    %eax,-0x28(%ebp)

		*ptr = arguments[2][0];
f01012dd:	8b 45 0c             	mov    0xc(%ebp),%eax
f01012e0:	83 c0 08             	add    $0x8,%eax
f01012e3:	8b 00                	mov    (%eax),%eax
f01012e5:	8a 00                	mov    (%eax),%al
f01012e7:	88 c2                	mov    %al,%dl
f01012e9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01012ec:	88 10                	mov    %dl,(%eax)
f01012ee:	e9 b9 00 00 00       	jmp    f01013ac <command_writeusermem+0xfc>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 4)
f01012f3:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01012f7:	0f 85 9f 00 00 00    	jne    f010139c <command_writeusermem+0xec>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01012fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101300:	83 c0 04             	add    $0x4,%eax
f0101303:	8b 00                	mov    (%eax),%eax
f0101305:	83 ec 04             	sub    $0x4,%esp
f0101308:	6a 0a                	push   $0xa
f010130a:	6a 00                	push   $0x0
f010130c:	50                   	push   %eax
f010130d:	e8 8b f4 02 00       	call   f013079d <strtol>
f0101312:	83 c4 10             	add    $0x10,%esp
f0101315:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f0101318:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f010131f:	83 ec 04             	sub    $0x4,%esp
f0101322:	6a 00                	push   $0x0
f0101324:	8d 45 d0             	lea    -0x30(%ebp),%eax
f0101327:	50                   	push   %eax
f0101328:	ff 75 f4             	pushl  -0xc(%ebp)
f010132b:	e8 af 7d 00 00       	call   f01090df <envid2env>
f0101330:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f0101333:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101336:	83 c0 08             	add    $0x8,%eax
f0101339:	8b 00                	mov    (%eax),%eax
f010133b:	83 ec 04             	sub    $0x4,%esp
f010133e:	6a 10                	push   $0x10
f0101340:	6a 00                	push   $0x0
f0101342:	50                   	push   %eax
f0101343:	e8 55 f4 02 00       	call   f013079d <strtol>
f0101348:	83 c4 10             	add    $0x10,%esp
f010134b:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f010134e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101351:	85 c0                	test   %eax,%eax
f0101353:	75 07                	jne    f010135c <command_writeusermem+0xac>
f0101355:	b8 00 00 00 00       	mov    $0x0,%eax
f010135a:	eb 55                	jmp    f01013b1 <command_writeusermem+0x101>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f010135c:	0f 20 d8             	mov    %cr3,%eax
f010135f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101362:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f0101365:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32) (env->env_cr3));
f0101368:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010136b:	8b 40 60             	mov    0x60(%eax),%eax
f010136e:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101371:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101374:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f0101377:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010137a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		*ptr = arguments[3][0];
f010137d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101380:	83 c0 0c             	add    $0xc,%eax
f0101383:	8b 00                	mov    (%eax),%eax
f0101385:	8a 00                	mov    (%eax),%al
f0101387:	88 c2                	mov    %al,%dl
f0101389:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010138c:	88 10                	mov    %dl,(%eax)
f010138e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101391:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0101394:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101397:	0f 22 d8             	mov    %eax,%cr3
f010139a:	eb 10                	jmp    f01013ac <command_writeusermem+0xfc>
		lcr3(oldDir);
	}
	else
	{
		cprintf("wum command: invalid number of arguments\n") ;
f010139c:	83 ec 0c             	sub    $0xc,%esp
f010139f:	68 10 38 13 f0       	push   $0xf0133810
f01013a4:	e8 84 f8 ff ff       	call   f0100c2d <cprintf>
f01013a9:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01013ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01013b1:	c9                   	leave  
f01013b2:	c3                   	ret    

f01013b3 <command_writemem_k>:

int command_writemem_k(int number_of_arguments, char **arguments)
{
f01013b3:	55                   	push   %ebp
f01013b4:	89 e5                	mov    %esp,%ebp
f01013b6:	83 ec 28             	sub    $0x28,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f01013b9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013bc:	83 c0 04             	add    $0x4,%eax
f01013bf:	8b 00                	mov    (%eax),%eax
f01013c1:	83 ec 04             	sub    $0x4,%esp
f01013c4:	6a 10                	push   $0x10
f01013c6:	6a 00                	push   $0x0
f01013c8:	50                   	push   %eax
f01013c9:	e8 cf f3 02 00       	call   f013079d <strtol>
f01013ce:	83 c4 10             	add    $0x10,%esp
f01013d1:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01013d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f01013d9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013dc:	83 c0 08             	add    $0x8,%eax
f01013df:	8b 00                	mov    (%eax),%eax
f01013e1:	83 ec 04             	sub    $0x4,%esp
f01013e4:	6a 0a                	push   $0xa
f01013e6:	6a 00                	push   $0x0
f01013e8:	50                   	push   %eax
f01013e9:	e8 af f3 02 00       	call   f013079d <strtol>
f01013ee:	83 c4 10             	add    $0x10,%esp
f01013f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int c, i=0;
f01013f4:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	int stringLen = strlen(arguments[3]);
f01013fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01013fe:	83 c0 0c             	add    $0xc,%eax
f0101401:	8b 00                	mov    (%eax),%eax
f0101403:	83 ec 0c             	sub    $0xc,%esp
f0101406:	50                   	push   %eax
f0101407:	e8 31 f0 02 00       	call   f013043d <strlen>
f010140c:	83 c4 10             	add    $0x10,%esp
f010140f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	for(c=0; c<size; c++)
f0101412:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101419:	eb 30                	jmp    f010144b <command_writemem_k+0x98>
	{
		for(i=0;i < stringLen; i++)
f010141b:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0101422:	eb 1c                	jmp    f0101440 <command_writemem_k+0x8d>
		{
			*address = arguments[3][i];
f0101424:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101427:	83 c0 0c             	add    $0xc,%eax
f010142a:	8b 10                	mov    (%eax),%edx
f010142c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010142f:	01 d0                	add    %edx,%eax
f0101431:	8a 00                	mov    (%eax),%al
f0101433:	88 c2                	mov    %al,%dl
f0101435:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101438:	88 10                	mov    %dl,(%eax)
			address++;
f010143a:	ff 45 f4             	incl   -0xc(%ebp)
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
	{
		for(i=0;i < stringLen; i++)
f010143d:	ff 45 ec             	incl   -0x14(%ebp)
f0101440:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101443:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f0101446:	7c dc                	jl     f0101424 <command_writemem_k+0x71>
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int c, i=0;
	int stringLen = strlen(arguments[3]);

	for(c=0; c<size; c++)
f0101448:	ff 45 f0             	incl   -0x10(%ebp)
f010144b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010144e:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f0101451:	7c c8                	jl     f010141b <command_writemem_k+0x68>
		{
			*address = arguments[3][i];
			address++;
		}
	}
	return 0;
f0101453:	b8 00 00 00 00       	mov    $0x0,%eax


}
f0101458:	c9                   	leave  
f0101459:	c3                   	ret    

f010145a <command_readusermem>:

int command_readusermem(int number_of_arguments, char **arguments)
{
f010145a:	55                   	push   %ebp
f010145b:	89 e5                	mov    %esp,%ebp
f010145d:	83 ec 38             	sub    $0x38,%esp
	//deal with the kernel page directory
	if (number_of_arguments == 2)
f0101460:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0101464:	75 42                	jne    f01014a8 <command_readusermem+0x4e>
	{
		unsigned int address = strtol(arguments[1], NULL, 16);
f0101466:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101469:	83 c0 04             	add    $0x4,%eax
f010146c:	8b 00                	mov    (%eax),%eax
f010146e:	83 ec 04             	sub    $0x4,%esp
f0101471:	6a 10                	push   $0x10
f0101473:	6a 00                	push   $0x0
f0101475:	50                   	push   %eax
f0101476:	e8 22 f3 02 00       	call   f013079d <strtol>
f010147b:	83 c4 10             	add    $0x10,%esp
f010147e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		unsigned char *ptr = (unsigned char *)(address ) ;
f0101481:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0101484:	89 45 d8             	mov    %eax,-0x28(%ebp)

		cprintf("value at address %x = %c\n", ptr, *ptr);
f0101487:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010148a:	8a 00                	mov    (%eax),%al
f010148c:	0f b6 c0             	movzbl %al,%eax
f010148f:	83 ec 04             	sub    $0x4,%esp
f0101492:	50                   	push   %eax
f0101493:	ff 75 d8             	pushl  -0x28(%ebp)
f0101496:	68 3a 38 13 f0       	push   $0xf013383a
f010149b:	e8 8d f7 ff ff       	call   f0100c2d <cprintf>
f01014a0:	83 c4 10             	add    $0x10,%esp
f01014a3:	e9 c4 00 00 00       	jmp    f010156c <command_readusermem+0x112>
	}
	//deal with a page directory of specific environment
	else if (number_of_arguments == 3)
f01014a8:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f01014ac:	0f 85 aa 00 00 00    	jne    f010155c <command_readusermem+0x102>
	{
		int32 envId = strtol(arguments[1],NULL, 10);
f01014b2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014b5:	83 c0 04             	add    $0x4,%eax
f01014b8:	8b 00                	mov    (%eax),%eax
f01014ba:	83 ec 04             	sub    $0x4,%esp
f01014bd:	6a 0a                	push   $0xa
f01014bf:	6a 00                	push   $0x0
f01014c1:	50                   	push   %eax
f01014c2:	e8 d6 f2 02 00       	call   f013079d <strtol>
f01014c7:	83 c4 10             	add    $0x10,%esp
f01014ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
		struct Env* env = NULL;
f01014cd:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
		envid2env(envId, &env, 0 );
f01014d4:	83 ec 04             	sub    $0x4,%esp
f01014d7:	6a 00                	push   $0x0
f01014d9:	8d 45 d0             	lea    -0x30(%ebp),%eax
f01014dc:	50                   	push   %eax
f01014dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01014e0:	e8 fa 7b 00 00       	call   f01090df <envid2env>
f01014e5:	83 c4 10             	add    $0x10,%esp

		int address = strtol(arguments[2], NULL, 16);
f01014e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01014eb:	83 c0 08             	add    $0x8,%eax
f01014ee:	8b 00                	mov    (%eax),%eax
f01014f0:	83 ec 04             	sub    $0x4,%esp
f01014f3:	6a 10                	push   $0x10
f01014f5:	6a 00                	push   $0x0
f01014f7:	50                   	push   %eax
f01014f8:	e8 a0 f2 02 00       	call   f013079d <strtol>
f01014fd:	83 c4 10             	add    $0x10,%esp
f0101500:	89 45 f0             	mov    %eax,-0x10(%ebp)

		if(env == NULL) return 0;
f0101503:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101506:	85 c0                	test   %eax,%eax
f0101508:	75 07                	jne    f0101511 <command_readusermem+0xb7>
f010150a:	b8 00 00 00 00       	mov    $0x0,%eax
f010150f:	eb 60                	jmp    f0101571 <command_readusermem+0x117>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101511:	0f 20 d8             	mov    %cr3,%eax
f0101514:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return val;
f0101517:	8b 45 e8             	mov    -0x18(%ebp),%eax

		uint32 oldDir = rcr3();
f010151a:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
		lcr3((uint32)( env->env_cr3));
f010151d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101520:	8b 40 60             	mov    0x60(%eax),%eax
f0101523:	89 45 e0             	mov    %eax,-0x20(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101526:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0101529:	0f 22 d8             	mov    %eax,%cr3

		unsigned char *ptr = (unsigned char *)(address) ;
f010152c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010152f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

		//Write the given Character
		cprintf("value at address %x = %c\n", address, *ptr);
f0101532:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101535:	8a 00                	mov    (%eax),%al
f0101537:	0f b6 c0             	movzbl %al,%eax
f010153a:	83 ec 04             	sub    $0x4,%esp
f010153d:	50                   	push   %eax
f010153e:	ff 75 f0             	pushl  -0x10(%ebp)
f0101541:	68 3a 38 13 f0       	push   $0xf013383a
f0101546:	e8 e2 f6 ff ff       	call   f0100c2d <cprintf>
f010154b:	83 c4 10             	add    $0x10,%esp
f010154e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0101551:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0101554:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0101557:	0f 22 d8             	mov    %eax,%cr3
f010155a:	eb 10                	jmp    f010156c <command_readusermem+0x112>

		lcr3(oldDir);
	}
	else
	{
		cprintf("rum command: invalid number of arguments\n") ;
f010155c:	83 ec 0c             	sub    $0xc,%esp
f010155f:	68 54 38 13 f0       	push   $0xf0133854
f0101564:	e8 c4 f6 ff ff       	call   f0100c2d <cprintf>
f0101569:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010156c:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0101571:	c9                   	leave  
f0101572:	c3                   	ret    

f0101573 <command_readmem_k>:

int command_readmem_k(int number_of_arguments, char **arguments)
{
f0101573:	55                   	push   %ebp
f0101574:	89 e5                	mov    %esp,%ebp
f0101576:	83 ec 18             	sub    $0x18,%esp
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
f0101579:	8b 45 0c             	mov    0xc(%ebp),%eax
f010157c:	83 c0 04             	add    $0x4,%eax
f010157f:	8b 00                	mov    (%eax),%eax
f0101581:	83 ec 04             	sub    $0x4,%esp
f0101584:	6a 10                	push   $0x10
f0101586:	6a 00                	push   $0x0
f0101588:	50                   	push   %eax
f0101589:	e8 0f f2 02 00       	call   f013079d <strtol>
f010158e:	83 c4 10             	add    $0x10,%esp
f0101591:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0101596:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int size = strtol(arguments[2], NULL, 10);
f0101599:	8b 45 0c             	mov    0xc(%ebp),%eax
f010159c:	83 c0 08             	add    $0x8,%eax
f010159f:	8b 00                	mov    (%eax),%eax
f01015a1:	83 ec 04             	sub    $0x4,%esp
f01015a4:	6a 0a                	push   $0xa
f01015a6:	6a 00                	push   $0x0
f01015a8:	50                   	push   %eax
f01015a9:	e8 ef f1 02 00       	call   f013079d <strtol>
f01015ae:	83 c4 10             	add    $0x10,%esp
f01015b1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int i=0;
f01015b4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	for(;i < size; i++)
f01015bb:	eb 22                	jmp    f01015df <command_readmem_k+0x6c>
	{
		cprintf("%c",*address++);
f01015bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01015c0:	8d 50 01             	lea    0x1(%eax),%edx
f01015c3:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01015c6:	8a 00                	mov    (%eax),%al
f01015c8:	0f b6 c0             	movzbl %al,%eax
f01015cb:	83 ec 08             	sub    $0x8,%esp
f01015ce:	50                   	push   %eax
f01015cf:	68 7e 38 13 f0       	push   $0xf013387e
f01015d4:	e8 54 f6 ff ff       	call   f0100c2d <cprintf>
f01015d9:	83 c4 10             	add    $0x10,%esp
int command_readmem_k(int number_of_arguments, char **arguments)
{
	unsigned char* address = (unsigned char*)strtol(arguments[1], NULL, 16)+KERNEL_BASE;
	int size = strtol(arguments[2], NULL, 10);
	int i=0;
	for(;i < size; i++)
f01015dc:	ff 45 f0             	incl   -0x10(%ebp)
f01015df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01015e2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01015e5:	7c d6                	jl     f01015bd <command_readmem_k+0x4a>
	{
		cprintf("%c",*address++);
	}
	cprintf("\n");
f01015e7:	83 ec 0c             	sub    $0xc,%esp
f01015ea:	68 81 38 13 f0       	push   $0xf0133881
f01015ef:	e8 39 f6 ff ff       	call   f0100c2d <cprintf>
f01015f4:	83 c4 10             	add    $0x10,%esp
	return 0;
f01015f7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01015fc:	c9                   	leave  
f01015fd:	c3                   	ret    

f01015fe <command_readuserblock>:


int command_readuserblock(int number_of_arguments, char **arguments)
{
f01015fe:	55                   	push   %ebp
f01015ff:	89 e5                	mov    %esp,%ebp
f0101601:	83 ec 38             	sub    $0x38,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101604:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101607:	83 c0 04             	add    $0x4,%eax
f010160a:	8b 00                	mov    (%eax),%eax
f010160c:	83 ec 04             	sub    $0x4,%esp
f010160f:	6a 0a                	push   $0xa
f0101611:	6a 00                	push   $0x0
f0101613:	50                   	push   %eax
f0101614:	e8 84 f1 02 00       	call   f013079d <strtol>
f0101619:	83 c4 10             	add    $0x10,%esp
f010161c:	89 45 ec             	mov    %eax,-0x14(%ebp)
	struct Env* env = NULL;
f010161f:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	envid2env(envId, &env, 0 );
f0101626:	83 ec 04             	sub    $0x4,%esp
f0101629:	6a 00                	push   $0x0
f010162b:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010162e:	50                   	push   %eax
f010162f:	ff 75 ec             	pushl  -0x14(%ebp)
f0101632:	e8 a8 7a 00 00       	call   f01090df <envid2env>
f0101637:	83 c4 10             	add    $0x10,%esp

	int address = strtol(arguments[2], NULL, 16);
f010163a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010163d:	83 c0 08             	add    $0x8,%eax
f0101640:	8b 00                	mov    (%eax),%eax
f0101642:	83 ec 04             	sub    $0x4,%esp
f0101645:	6a 10                	push   $0x10
f0101647:	6a 00                	push   $0x0
f0101649:	50                   	push   %eax
f010164a:	e8 4e f1 02 00       	call   f013079d <strtol>
f010164f:	83 c4 10             	add    $0x10,%esp
f0101652:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int nBytes = strtol(arguments[3], NULL, 10);
f0101655:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101658:	83 c0 0c             	add    $0xc,%eax
f010165b:	8b 00                	mov    (%eax),%eax
f010165d:	83 ec 04             	sub    $0x4,%esp
f0101660:	6a 0a                	push   $0xa
f0101662:	6a 00                	push   $0x0
f0101664:	50                   	push   %eax
f0101665:	e8 33 f1 02 00       	call   f013079d <strtol>
f010166a:	83 c4 10             	add    $0x10,%esp
f010166d:	89 45 e4             	mov    %eax,-0x1c(%ebp)

	unsigned char *ptr = (unsigned char *)(address) ;
f0101670:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0101673:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//Write the given Character

	if(env == NULL) return 0;
f0101676:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101679:	85 c0                	test   %eax,%eax
f010167b:	75 07                	jne    f0101684 <command_readuserblock+0x86>
f010167d:	b8 00 00 00 00       	mov    $0x0,%eax
f0101682:	eb 65                	jmp    f01016e9 <command_readuserblock+0xeb>

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0101684:	0f 20 d8             	mov    %cr3,%eax
f0101687:	89 45 d8             	mov    %eax,-0x28(%ebp)
	return val;
f010168a:	8b 45 d8             	mov    -0x28(%ebp),%eax

	uint32 oldDir = rcr3();
f010168d:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));
f0101690:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0101693:	8b 40 60             	mov    0x60(%eax),%eax
f0101696:	89 45 d4             	mov    %eax,-0x2c(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0101699:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010169c:	0f 22 d8             	mov    %eax,%cr3

	int i;
	for(i = 0;i<nBytes; i++)
f010169f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01016a6:	eb 28                	jmp    f01016d0 <command_readuserblock+0xd2>
	{
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
f01016a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016ab:	8a 00                	mov    (%eax),%al
f01016ad:	0f b6 d0             	movzbl %al,%edx
f01016b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01016b3:	8a 00                	mov    (%eax),%al
f01016b5:	0f b6 c0             	movzbl %al,%eax
f01016b8:	52                   	push   %edx
f01016b9:	50                   	push   %eax
f01016ba:	ff 75 f4             	pushl  -0xc(%ebp)
f01016bd:	68 83 38 13 f0       	push   $0xf0133883
f01016c2:	e8 66 f5 ff ff       	call   f0100c2d <cprintf>
f01016c7:	83 c4 10             	add    $0x10,%esp
		ptr++;
f01016ca:	ff 45 f4             	incl   -0xc(%ebp)
	uint32 oldDir = rcr3();
	//lcr3((uint32) K_PHYSICAL_ADDRESS( env->env_pgdir));
	lcr3((uint32)( env->env_cr3));

	int i;
	for(i = 0;i<nBytes; i++)
f01016cd:	ff 45 f0             	incl   -0x10(%ebp)
f01016d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01016d3:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01016d6:	7c d0                	jl     f01016a8 <command_readuserblock+0xaa>
f01016d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01016db:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01016de:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01016e1:	0f 22 d8             	mov    %eax,%cr3
		cprintf("%08x : %02x  %c\n", ptr, *ptr, *ptr);
		ptr++;
	}
	lcr3(oldDir);

	return 0;
f01016e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01016e9:	c9                   	leave  
f01016ea:	c3                   	ret    

f01016eb <command_remove_table>:

int command_remove_table(int number_of_arguments, char **arguments)
{
f01016eb:	55                   	push   %ebp
f01016ec:	89 e5                	mov    %esp,%ebp
f01016ee:	83 ec 28             	sub    $0x28,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f01016f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01016f4:	83 c0 04             	add    $0x4,%eax
f01016f7:	8b 00                	mov    (%eax),%eax
f01016f9:	83 ec 04             	sub    $0x4,%esp
f01016fc:	6a 0a                	push   $0xa
f01016fe:	6a 00                	push   $0x0
f0101700:	50                   	push   %eax
f0101701:	e8 97 f0 02 00       	call   f013079d <strtol>
f0101706:	83 c4 10             	add    $0x10,%esp
f0101709:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct Env* env = NULL;
f010170c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	envid2env(envId, &env, 0 );
f0101713:	83 ec 04             	sub    $0x4,%esp
f0101716:	6a 00                	push   $0x0
f0101718:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010171b:	50                   	push   %eax
f010171c:	ff 75 f4             	pushl  -0xc(%ebp)
f010171f:	e8 bb 79 00 00       	call   f01090df <envid2env>
f0101724:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f0101727:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010172a:	85 c0                	test   %eax,%eax
f010172c:	75 0a                	jne    f0101738 <command_remove_table+0x4d>
f010172e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101733:	e9 a1 00 00 00       	jmp    f01017d9 <command_remove_table+0xee>

	uint32 address = strtol(arguments[2], NULL, 16);
f0101738:	8b 45 0c             	mov    0xc(%ebp),%eax
f010173b:	83 c0 08             	add    $0x8,%eax
f010173e:	8b 00                	mov    (%eax),%eax
f0101740:	83 ec 04             	sub    $0x4,%esp
f0101743:	6a 10                	push   $0x10
f0101745:	6a 00                	push   $0x0
f0101747:	50                   	push   %eax
f0101748:	e8 50 f0 02 00       	call   f013079d <strtol>
f010174d:	83 c4 10             	add    $0x10,%esp
f0101750:	89 45 f0             	mov    %eax,-0x10(%ebp)
	unsigned char *va = (unsigned char *)(address) ;
f0101753:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101756:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 table_pa = env->env_page_directory[PDX(address)] & 0xFFFFF000;
f0101759:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010175c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010175f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0101762:	c1 ea 16             	shr    $0x16,%edx
f0101765:	c1 e2 02             	shl    $0x2,%edx
f0101768:	01 d0                	add    %edx,%eax
f010176a:	8b 00                	mov    (%eax),%eax
f010176c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0101771:	89 45 e8             	mov    %eax,-0x18(%ebp)
		kfree((void*)kheap_virtual_address(table_pa));
	}
	else
	{
		// get the physical address and FrameInfo of the page table
		struct FrameInfo *table_FrameInfo = to_frame_info(table_pa);
f0101774:	83 ec 0c             	sub    $0xc,%esp
f0101777:	ff 75 e8             	pushl  -0x18(%ebp)
f010177a:	e8 cf f7 ff ff       	call   f0100f4e <to_frame_info>
f010177f:	83 c4 10             	add    $0x10,%esp
f0101782:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		// set references of the table frame to 0 then free it by adding
		// to the free frame list
		table_FrameInfo->references = 0;
f0101785:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101788:	66 c7 40 08 00 00    	movw   $0x0,0x8(%eax)
		free_frame(table_FrameInfo);
f010178e:	83 ec 0c             	sub    $0xc,%esp
f0101791:	ff 75 e4             	pushl  -0x1c(%ebp)
f0101794:	e8 2e 51 00 00       	call   f01068c7 <free_frame>
f0101799:	83 c4 10             	add    $0x10,%esp
	}

	// set the corresponding entry in the directory to 0
	uint32 dir_index = PDX(va);
f010179c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010179f:	c1 e8 16             	shr    $0x16,%eax
f01017a2:	89 45 e0             	mov    %eax,-0x20(%ebp)
	env->env_page_directory[dir_index] &= (~PERM_PRESENT);
f01017a5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017a8:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017ab:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01017ae:	c1 e2 02             	shl    $0x2,%edx
f01017b1:	01 c2                	add    %eax,%edx
f01017b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01017b6:	8b 40 5c             	mov    0x5c(%eax),%eax
f01017b9:	8b 4d e0             	mov    -0x20(%ebp),%ecx
f01017bc:	c1 e1 02             	shl    $0x2,%ecx
f01017bf:	01 c8                	add    %ecx,%eax
f01017c1:	8b 00                	mov    (%eax),%eax
f01017c3:	83 e0 fe             	and    $0xfffffffe,%eax
f01017c6:	89 02                	mov    %eax,(%edx)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f01017c8:	0f 20 d8             	mov    %cr3,%eax
f01017cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f01017ce:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01017d1:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
	return 0;
f01017d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01017d9:	c9                   	leave  
f01017da:	c3                   	ret    

f01017db <command_allocuserpage>:

int command_allocuserpage(int number_of_arguments, char **arguments)
{
f01017db:	55                   	push   %ebp
f01017dc:	89 e5                	mov    %esp,%ebp
f01017de:	83 ec 28             	sub    $0x28,%esp
	if (number_of_arguments < 3 || number_of_arguments > 4)
f01017e1:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f01017e5:	7e 06                	jle    f01017ed <command_allocuserpage+0x12>
f01017e7:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01017eb:	7e 1a                	jle    f0101807 <command_allocuserpage+0x2c>
	{
		cprintf("aup command: invalid number of arguments\n") ;
f01017ed:	83 ec 0c             	sub    $0xc,%esp
f01017f0:	68 94 38 13 f0       	push   $0xf0133894
f01017f5:	e8 33 f4 ff ff       	call   f0100c2d <cprintf>
f01017fa:	83 c4 10             	add    $0x10,%esp
		return 0;
f01017fd:	b8 00 00 00 00       	mov    $0x0,%eax
f0101802:	e9 46 01 00 00       	jmp    f010194d <command_allocuserpage+0x172>
	}
	int32 envId = strtol(arguments[1],NULL, 10);
f0101807:	8b 45 0c             	mov    0xc(%ebp),%eax
f010180a:	83 c0 04             	add    $0x4,%eax
f010180d:	8b 00                	mov    (%eax),%eax
f010180f:	83 ec 04             	sub    $0x4,%esp
f0101812:	6a 0a                	push   $0xa
f0101814:	6a 00                	push   $0x0
f0101816:	50                   	push   %eax
f0101817:	e8 81 ef 02 00       	call   f013079d <strtol>
f010181c:	83 c4 10             	add    $0x10,%esp
f010181f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	struct Env* env = NULL;
f0101822:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	envid2env(envId, &env, 0 );
f0101829:	83 ec 04             	sub    $0x4,%esp
f010182c:	6a 00                	push   $0x0
f010182e:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0101831:	50                   	push   %eax
f0101832:	ff 75 f0             	pushl  -0x10(%ebp)
f0101835:	e8 a5 78 00 00       	call   f01090df <envid2env>
f010183a:	83 c4 10             	add    $0x10,%esp
	if(env == 0) return 0;
f010183d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101840:	85 c0                	test   %eax,%eax
f0101842:	75 0a                	jne    f010184e <command_allocuserpage+0x73>
f0101844:	b8 00 00 00 00       	mov    $0x0,%eax
f0101849:	e9 ff 00 00 00       	jmp    f010194d <command_allocuserpage+0x172>

	uint32 va = strtol(arguments[2], NULL, 16);
f010184e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101851:	83 c0 08             	add    $0x8,%eax
f0101854:	8b 00                	mov    (%eax),%eax
f0101856:	83 ec 04             	sub    $0x4,%esp
f0101859:	6a 10                	push   $0x10
f010185b:	6a 00                	push   $0x0
f010185d:	50                   	push   %eax
f010185e:	e8 3a ef 02 00       	call   f013079d <strtol>
f0101863:	83 c4 10             	add    $0x10,%esp
f0101866:	89 45 ec             	mov    %eax,-0x14(%ebp)

	// Allocate a single frame from the free frame list
	struct FrameInfo * ptr_FrameInfo ;
	int ret = allocate_frame(&ptr_FrameInfo);
f0101869:	83 ec 0c             	sub    $0xc,%esp
f010186c:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010186f:	50                   	push   %eax
f0101870:	e8 3d 4f 00 00       	call   f01067b2 <allocate_frame>
f0101875:	83 c4 10             	add    $0x10,%esp
f0101878:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret == E_NO_MEM)
f010187b:	83 7d e8 fc          	cmpl   $0xfffffffc,-0x18(%ebp)
f010187f:	75 1a                	jne    f010189b <command_allocuserpage+0xc0>
	{
		cprintf("ERROR: no enough memory\n");
f0101881:	83 ec 0c             	sub    $0xc,%esp
f0101884:	68 be 38 13 f0       	push   $0xf01338be
f0101889:	e8 9f f3 ff ff       	call   f0100c2d <cprintf>
f010188e:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101891:	b8 00 00 00 00       	mov    $0x0,%eax
f0101896:	e9 b2 00 00 00       	jmp    f010194d <command_allocuserpage+0x172>
	}

	if (number_of_arguments == 3)
f010189b:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f010189f:	75 1d                	jne    f01018be <command_allocuserpage+0xe3>
	{
		// Map this frame to the given user virtual address with PERM_WRITEABLE
		map_frame(env->env_page_directory, ptr_FrameInfo, va, PERM_WRITEABLE | PERM_USER);
f01018a1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01018a4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01018a7:	8b 40 5c             	mov    0x5c(%eax),%eax
f01018aa:	6a 06                	push   $0x6
f01018ac:	ff 75 ec             	pushl  -0x14(%ebp)
f01018af:	52                   	push   %edx
f01018b0:	50                   	push   %eax
f01018b1:	e8 94 52 00 00       	call   f0106b4a <map_frame>
f01018b6:	83 c4 10             	add    $0x10,%esp
f01018b9:	e9 8a 00 00 00       	jmp    f0101948 <command_allocuserpage+0x16d>
	}
	else if (number_of_arguments == 4)
f01018be:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f01018c2:	0f 85 80 00 00 00    	jne    f0101948 <command_allocuserpage+0x16d>
	{
		// Map this frame to the given user virtual address with the given permission
		uint32 rw ;
		if (arguments[3][0] == 'r' || arguments[3][0] == 'R')
f01018c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018cb:	83 c0 0c             	add    $0xc,%eax
f01018ce:	8b 00                	mov    (%eax),%eax
f01018d0:	8a 00                	mov    (%eax),%al
f01018d2:	3c 72                	cmp    $0x72,%al
f01018d4:	74 0e                	je     f01018e4 <command_allocuserpage+0x109>
f01018d6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018d9:	83 c0 0c             	add    $0xc,%eax
f01018dc:	8b 00                	mov    (%eax),%eax
f01018de:	8a 00                	mov    (%eax),%al
f01018e0:	3c 52                	cmp    $0x52,%al
f01018e2:	75 09                	jne    f01018ed <command_allocuserpage+0x112>
			rw = 0 ;
f01018e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01018eb:	eb 3c                	jmp    f0101929 <command_allocuserpage+0x14e>
		else if (arguments[3][0] == 'w' || arguments[3][0] == 'W')
f01018ed:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018f0:	83 c0 0c             	add    $0xc,%eax
f01018f3:	8b 00                	mov    (%eax),%eax
f01018f5:	8a 00                	mov    (%eax),%al
f01018f7:	3c 77                	cmp    $0x77,%al
f01018f9:	74 0e                	je     f0101909 <command_allocuserpage+0x12e>
f01018fb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01018fe:	83 c0 0c             	add    $0xc,%eax
f0101901:	8b 00                	mov    (%eax),%eax
f0101903:	8a 00                	mov    (%eax),%al
f0101905:	3c 57                	cmp    $0x57,%al
f0101907:	75 09                	jne    f0101912 <command_allocuserpage+0x137>
			rw = PERM_WRITEABLE ;
f0101909:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101910:	eb 17                	jmp    f0101929 <command_allocuserpage+0x14e>
		else
		{
			cprintf("aup command: wrong permission (r/w)... will continue as writable\n") ;
f0101912:	83 ec 0c             	sub    $0xc,%esp
f0101915:	68 d8 38 13 f0       	push   $0xf01338d8
f010191a:	e8 0e f3 ff ff       	call   f0100c2d <cprintf>
f010191f:	83 c4 10             	add    $0x10,%esp
			rw = PERM_WRITEABLE ;
f0101922:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
		}

		map_frame(env->env_page_directory, ptr_FrameInfo, va, rw | PERM_USER);
f0101929:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010192c:	83 c8 04             	or     $0x4,%eax
f010192f:	89 c1                	mov    %eax,%ecx
f0101931:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0101934:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0101937:	8b 40 5c             	mov    0x5c(%eax),%eax
f010193a:	51                   	push   %ecx
f010193b:	ff 75 ec             	pushl  -0x14(%ebp)
f010193e:	52                   	push   %edx
f010193f:	50                   	push   %eax
f0101940:	e8 05 52 00 00       	call   f0106b4a <map_frame>
f0101945:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f0101948:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010194d:	c9                   	leave  
f010194e:	c3                   	ret    

f010194f <command_meminfo>:

int command_meminfo(int number_of_arguments, char **arguments)
{
f010194f:	55                   	push   %ebp
f0101950:	89 e5                	mov    %esp,%ebp
f0101952:	56                   	push   %esi
f0101953:	53                   	push   %ebx
f0101954:	83 ec 10             	sub    $0x10,%esp
	struct freeFramesCounters counters =calculate_available_frames();
f0101957:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010195a:	83 ec 0c             	sub    $0xc,%esp
f010195d:	50                   	push   %eax
f010195e:	e8 57 54 00 00       	call   f0106dba <calculate_available_frames>
f0101963:	83 c4 0c             	add    $0xc,%esp
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f0101966:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0101969:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010196c:	8b 45 ec             	mov    -0x14(%ebp),%eax
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);
f010196f:	8b 75 ec             	mov    -0x14(%ebp),%esi
f0101972:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0101975:	01 de                	add    %ebx,%esi
f0101977:	8b 5d f4             	mov    -0xc(%ebp),%ebx
}

int command_meminfo(int number_of_arguments, char **arguments)
{
	struct freeFramesCounters counters =calculate_available_frames();
	cprintf("Total available frames = %d\nFree Buffered = %d\nFree Not Buffered = %d\nModified = %d\n",
f010197a:	01 f3                	add    %esi,%ebx
f010197c:	83 ec 0c             	sub    $0xc,%esp
f010197f:	51                   	push   %ecx
f0101980:	52                   	push   %edx
f0101981:	50                   	push   %eax
f0101982:	53                   	push   %ebx
f0101983:	68 1c 39 13 f0       	push   $0xf013391c
f0101988:	e8 a0 f2 ff ff       	call   f0100c2d <cprintf>
f010198d:	83 c4 20             	add    $0x20,%esp
			counters.freeBuffered+ counters.freeNotBuffered+ counters.modified, counters.freeBuffered, counters.freeNotBuffered, counters.modified);

	cprintf("Num of calls for kheap_virtual_address [in last run] = %d\n", numOfKheapVACalls);
f0101990:	a1 d0 84 6e f0       	mov    0xf06e84d0,%eax
f0101995:	83 ec 08             	sub    $0x8,%esp
f0101998:	50                   	push   %eax
f0101999:	68 74 39 13 f0       	push   $0xf0133974
f010199e:	e8 8a f2 ff ff       	call   f0100c2d <cprintf>
f01019a3:	83 c4 10             	add    $0x10,%esp

	return 0;
f01019a6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01019ab:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01019ae:	5b                   	pop    %ebx
f01019af:	5e                   	pop    %esi
f01019b0:	5d                   	pop    %ebp
f01019b1:	c3                   	ret    

f01019b2 <CreateEnv>:

//2020
struct Env * CreateEnv(int number_of_arguments, char **arguments)
{
f01019b2:	55                   	push   %ebp
f01019b3:	89 e5                	mov    %esp,%ebp
f01019b5:	83 ec 18             	sub    $0x18,%esp
	struct Env* env;
	uint32 pageWSSize = __PWS_MAX_SIZE;		//arg#3 default
f01019b8:	c7 45 ec 88 13 00 00 	movl   $0x1388,-0x14(%ebp)
	uint32 LRUSecondListSize = 0;			//arg#4 default
f01019bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 percent_WS_pages_to_remove = 0;	//arg#5 default
f01019c6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);

	}
#else
	{
		switch (number_of_arguments)
f01019cd:	8b 45 08             	mov    0x8(%ebp),%eax
f01019d0:	83 f8 02             	cmp    $0x2,%eax
f01019d3:	74 39                	je     f0101a0e <CreateEnv+0x5c>
f01019d5:	83 f8 03             	cmp    $0x3,%eax
f01019d8:	75 1d                	jne    f01019f7 <CreateEnv+0x45>
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
f01019da:	8b 45 0c             	mov    0xc(%ebp),%eax
f01019dd:	83 c0 08             	add    $0x8,%eax
f01019e0:	8b 00                	mov    (%eax),%eax
f01019e2:	83 ec 04             	sub    $0x4,%esp
f01019e5:	6a 0a                	push   $0xa
f01019e7:	6a 00                	push   $0x0
f01019e9:	50                   	push   %eax
f01019ea:	e8 ae ed 02 00       	call   f013079d <strtol>
f01019ef:	83 c4 10             	add    $0x10,%esp
f01019f2:	89 45 f0             	mov    %eax,-0x10(%ebp)
		case 2:
			break;
f01019f5:	eb 17                	jmp    f0101a0e <CreateEnv+0x5c>
		default:
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
f01019f7:	83 ec 0c             	sub    $0xc,%esp
f01019fa:	68 b0 39 13 f0       	push   $0xf01339b0
f01019ff:	e8 29 f2 ff ff       	call   f0100c2d <cprintf>
f0101a04:	83 c4 10             	add    $0x10,%esp
			return NULL;
f0101a07:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a0c:	eb 58                	jmp    f0101a66 <CreateEnv+0xb4>
		switch (number_of_arguments)
		{
		case 3:
			percent_WS_pages_to_remove = strtol(arguments[2], NULL, 10);
		case 2:
			break;
f0101a0e:	90                   	nop
			cprintf("ERROR: invalid number of args\nUsage: <command> <prog_name> [<DYN_LOC_SCOPE_percent_WS_to_remove>]\naborting...\n");
			return NULL;

			break;
		}
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101a0f:	83 ec 0c             	sub    $0xc,%esp
f0101a12:	6a 02                	push   $0x2
f0101a14:	e8 66 b8 00 00       	call   f010d27f <isPageReplacmentAlgorithmLRU>
f0101a19:	83 c4 10             	add    $0x10,%esp
f0101a1c:	85 c0                	test   %eax,%eax
f0101a1e:	74 07                	je     f0101a27 <CreateEnv+0x75>
		{
			LRUSecondListSize = __LRU_SNDLST_SIZE;
f0101a20:	c7 45 f4 f4 01 00 00 	movl   $0x1f4,-0xc(%ebp)
		}
	}
#endif
	assert(percent_WS_pages_to_remove >= 0 && percent_WS_pages_to_remove <= 100);
f0101a27:	83 7d f0 64          	cmpl   $0x64,-0x10(%ebp)
f0101a2b:	76 19                	jbe    f0101a46 <CreateEnv+0x94>
f0101a2d:	68 20 3a 13 f0       	push   $0xf0133a20
f0101a32:	68 65 3a 13 f0       	push   $0xf0133a65
f0101a37:	68 71 02 00 00       	push   $0x271
f0101a3c:	68 f9 37 13 f0       	push   $0xf01337f9
f0101a41:	e8 60 e7 ff ff       	call   f01001a6 <_panic>
	env = env_create(arguments[1], pageWSSize, LRUSecondListSize, percent_WS_pages_to_remove);
f0101a46:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101a49:	83 c0 04             	add    $0x4,%eax
f0101a4c:	8b 00                	mov    (%eax),%eax
f0101a4e:	ff 75 f0             	pushl  -0x10(%ebp)
f0101a51:	ff 75 f4             	pushl  -0xc(%ebp)
f0101a54:	ff 75 ec             	pushl  -0x14(%ebp)
f0101a57:	50                   	push   %eax
f0101a58:	e8 27 69 00 00       	call   f0108384 <env_create>
f0101a5d:	83 c4 10             	add    $0x10,%esp
f0101a60:	89 45 e8             	mov    %eax,-0x18(%ebp)

	return env;
f0101a63:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0101a66:	c9                   	leave  
f0101a67:	c3                   	ret    

f0101a68 <command_run_program>:

int command_run_program(int number_of_arguments, char **arguments)
{
f0101a68:	55                   	push   %ebp
f0101a69:	89 e5                	mov    %esp,%ebp
f0101a6b:	83 ec 18             	sub    $0x18,%esp
	//[1] Create and initialize a new environment for the program to be run
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101a6e:	83 ec 08             	sub    $0x8,%esp
f0101a71:	ff 75 0c             	pushl  0xc(%ebp)
f0101a74:	ff 75 08             	pushl  0x8(%ebp)
f0101a77:	e8 36 ff ff ff       	call   f01019b2 <CreateEnv>
f0101a7c:	83 c4 10             	add    $0x10,%esp
f0101a7f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(env == NULL) return 0;
f0101a82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101a86:	75 07                	jne    f0101a8f <command_run_program+0x27>
f0101a88:	b8 00 00 00 00       	mov    $0x0,%eax
f0101a8d:	eb 46                	jmp    f0101ad5 <command_run_program+0x6d>
	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101a8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101a92:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101a95:	83 ec 08             	sub    $0x8,%esp
f0101a98:	50                   	push   %eax
f0101a99:	68 7a 3a 13 f0       	push   $0xf0133a7a
f0101a9e:	e8 8a f1 ff ff       	call   f0100c2d <cprintf>
f0101aa3:	83 c4 10             	add    $0x10,%esp

	numOfKheapVACalls = 0;
f0101aa6:	c7 05 d0 84 6e f0 00 	movl   $0x0,0xf06e84d0
f0101aad:	00 00 00 

	//[2] Run the created environment by adding it to the "ready" queue then invoke the scheduler to execute it
	sched_new_env(env);
f0101ab0:	83 ec 0c             	sub    $0xc,%esp
f0101ab3:	ff 75 f4             	pushl  -0xc(%ebp)
f0101ab6:	e8 c4 35 00 00       	call   f010507f <sched_new_env>
f0101abb:	83 c4 10             	add    $0x10,%esp
	sched_run_env(env->env_id);
f0101abe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ac1:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101ac4:	83 ec 0c             	sub    $0xc,%esp
f0101ac7:	50                   	push   %eax
f0101ac8:	e8 cf 35 00 00       	call   f010509c <sched_run_env>
f0101acd:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101ad0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ad5:	c9                   	leave  
f0101ad6:	c3                   	ret    

f0101ad7 <command_kill_program>:

int command_kill_program(int number_of_arguments, char **arguments)
{
f0101ad7:	55                   	push   %ebp
f0101ad8:	89 e5                	mov    %esp,%ebp
f0101ada:	83 ec 18             	sub    $0x18,%esp
	int32 envId = strtol(arguments[1],NULL, 10);
f0101add:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ae0:	83 c0 04             	add    $0x4,%eax
f0101ae3:	8b 00                	mov    (%eax),%eax
f0101ae5:	83 ec 04             	sub    $0x4,%esp
f0101ae8:	6a 0a                	push   $0xa
f0101aea:	6a 00                	push   $0x0
f0101aec:	50                   	push   %eax
f0101aed:	e8 ab ec 02 00       	call   f013079d <strtol>
f0101af2:	83 c4 10             	add    $0x10,%esp
f0101af5:	89 45 f4             	mov    %eax,-0xc(%ebp)

	sched_kill_env(envId);
f0101af8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101afb:	83 ec 0c             	sub    $0xc,%esp
f0101afe:	50                   	push   %eax
f0101aff:	e8 c4 39 00 00       	call   f01054c8 <sched_kill_env>
f0101b04:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101b07:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b0c:	c9                   	leave  
f0101b0d:	c3                   	ret    

f0101b0e <commnad_load_env>:

int commnad_load_env(int number_of_arguments, char **arguments)
{
f0101b0e:	55                   	push   %ebp
f0101b0f:	89 e5                	mov    %esp,%ebp
f0101b11:	83 ec 18             	sub    $0x18,%esp
	struct Env *env = CreateEnv(number_of_arguments, arguments);
f0101b14:	83 ec 08             	sub    $0x8,%esp
f0101b17:	ff 75 0c             	pushl  0xc(%ebp)
f0101b1a:	ff 75 08             	pushl  0x8(%ebp)
f0101b1d:	e8 90 fe ff ff       	call   f01019b2 <CreateEnv>
f0101b22:	83 c4 10             	add    $0x10,%esp
f0101b25:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (env == NULL)
f0101b28:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101b2c:	75 07                	jne    f0101b35 <commnad_load_env+0x27>
		return 0 ;
f0101b2e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101b33:	eb 2a                	jmp    f0101b5f <commnad_load_env+0x51>

	sched_new_env(env) ;
f0101b35:	83 ec 0c             	sub    $0xc,%esp
f0101b38:	ff 75 f4             	pushl  -0xc(%ebp)
f0101b3b:	e8 3f 35 00 00       	call   f010507f <sched_new_env>
f0101b40:	83 c4 10             	add    $0x10,%esp

	cprintf("\nEnvironment Id= %d\n",env->env_id);
f0101b43:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101b46:	8b 40 4c             	mov    0x4c(%eax),%eax
f0101b49:	83 ec 08             	sub    $0x8,%esp
f0101b4c:	50                   	push   %eax
f0101b4d:	68 7a 3a 13 f0       	push   $0xf0133a7a
f0101b52:	e8 d6 f0 ff ff       	call   f0100c2d <cprintf>
f0101b57:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101b5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b5f:	c9                   	leave  
f0101b60:	c3                   	ret    

f0101b61 <command_run_all>:

int command_run_all(int number_of_arguments, char **arguments)
{
f0101b61:	55                   	push   %ebp
f0101b62:	89 e5                	mov    %esp,%ebp
f0101b64:	83 ec 08             	sub    $0x8,%esp
	numOfKheapVACalls = 0;
f0101b67:	c7 05 d0 84 6e f0 00 	movl   $0x0,0xf06e84d0
f0101b6e:	00 00 00 
	sched_run_all();
f0101b71:	e8 4a 31 00 00       	call   f0104cc0 <sched_run_all>

	return 0 ;
f0101b76:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b7b:	c9                   	leave  
f0101b7c:	c3                   	ret    

f0101b7d <command_print_all>:

int command_print_all(int number_of_arguments, char **arguments)
{
f0101b7d:	55                   	push   %ebp
f0101b7e:	89 e5                	mov    %esp,%ebp
f0101b80:	83 ec 08             	sub    $0x8,%esp
	sched_print_all();
f0101b83:	e8 2d 2f 00 00       	call   f0104ab5 <sched_print_all>

	return 0 ;
f0101b88:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b8d:	c9                   	leave  
f0101b8e:	c3                   	ret    

f0101b8f <command_kill_all>:

int command_kill_all(int number_of_arguments, char **arguments)
{
f0101b8f:	55                   	push   %ebp
f0101b90:	89 e5                	mov    %esp,%ebp
f0101b92:	83 ec 08             	sub    $0x8,%esp
	sched_kill_all();
f0101b95:	e8 99 31 00 00       	call   f0104d33 <sched_kill_all>

	return 0 ;
f0101b9a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101b9f:	c9                   	leave  
f0101ba0:	c3                   	ret    

f0101ba1 <command_set_page_rep_LRU>:

int command_set_page_rep_LRU(int number_of_arguments, char **arguments)
{
f0101ba1:	55                   	push   %ebp
f0101ba2:	89 e5                	mov    %esp,%ebp
f0101ba4:	83 ec 18             	sub    $0x18,%esp
	if (number_of_arguments < 2)
f0101ba7:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f0101bab:	7f 1a                	jg     f0101bc7 <command_set_page_rep_LRU+0x26>
	{
		cprintf("ERROR: please specify the LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101bad:	83 ec 0c             	sub    $0xc,%esp
f0101bb0:	68 90 3a 13 f0       	push   $0xf0133a90
f0101bb5:	e8 73 f0 ff ff       	call   f0100c2d <cprintf>
f0101bba:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101bbd:	b8 00 00 00 00       	mov    $0x0,%eax
f0101bc2:	e9 83 00 00 00       	jmp    f0101c4a <command_set_page_rep_LRU+0xa9>
	}
	int LRU_TYPE = strtol(arguments[1], NULL, 10) ;
f0101bc7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101bca:	83 c0 04             	add    $0x4,%eax
f0101bcd:	8b 00                	mov    (%eax),%eax
f0101bcf:	83 ec 04             	sub    $0x4,%esp
f0101bd2:	6a 0a                	push   $0xa
f0101bd4:	6a 00                	push   $0x0
f0101bd6:	50                   	push   %eax
f0101bd7:	e8 c1 eb 02 00       	call   f013079d <strtol>
f0101bdc:	83 c4 10             	add    $0x10,%esp
f0101bdf:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (LRU_TYPE == PG_REP_LRU_TIME_APPROX)
f0101be2:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101be6:	75 20                	jne    f0101c08 <command_set_page_rep_LRU+0x67>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101be8:	83 ec 0c             	sub    $0xc,%esp
f0101beb:	ff 75 f4             	pushl  -0xc(%ebp)
f0101bee:	e8 01 b6 00 00       	call   f010d1f4 <setPageReplacmentAlgorithmLRU>
f0101bf3:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with TimeStamp approximation\n");
f0101bf6:	83 ec 0c             	sub    $0xc,%esp
f0101bf9:	68 f0 3a 13 f0       	push   $0xf0133af0
f0101bfe:	e8 2a f0 ff ff       	call   f0100c2d <cprintf>
f0101c03:	83 c4 10             	add    $0x10,%esp
f0101c06:	eb 3d                	jmp    f0101c45 <command_set_page_rep_LRU+0xa4>
	}
	else if (LRU_TYPE == PG_REP_LRU_LISTS_APPROX)
f0101c08:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0101c0c:	75 20                	jne    f0101c2e <command_set_page_rep_LRU+0x8d>
	{
		setPageReplacmentAlgorithmLRU(LRU_TYPE);
f0101c0e:	83 ec 0c             	sub    $0xc,%esp
f0101c11:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c14:	e8 db b5 00 00       	call   f010d1f4 <setPageReplacmentAlgorithmLRU>
f0101c19:	83 c4 10             	add    $0x10,%esp
		cprintf("Page replacement algorithm is now LRU with LISTS approximation\n");
f0101c1c:	83 ec 0c             	sub    $0xc,%esp
f0101c1f:	68 34 3b 13 f0       	push   $0xf0133b34
f0101c24:	e8 04 f0 ff ff       	call   f0100c2d <cprintf>
f0101c29:	83 c4 10             	add    $0x10,%esp
f0101c2c:	eb 17                	jmp    f0101c45 <command_set_page_rep_LRU+0xa4>
	}
	else
	{
		cprintf("ERROR: Invalid LRU Approx Type (1: TimeStamp Approx, 2: Lists Approx), aborting...\n");
f0101c2e:	83 ec 0c             	sub    $0xc,%esp
f0101c31:	68 74 3b 13 f0       	push   $0xf0133b74
f0101c36:	e8 f2 ef ff ff       	call   f0100c2d <cprintf>
f0101c3b:	83 c4 10             	add    $0x10,%esp
		return 0;
f0101c3e:	b8 00 00 00 00       	mov    $0x0,%eax
f0101c43:	eb 05                	jmp    f0101c4a <command_set_page_rep_LRU+0xa9>
	}
	return 0;
f0101c45:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c4a:	c9                   	leave  
f0101c4b:	c3                   	ret    

f0101c4c <command_set_page_rep_nthCLOCK>:
//2021
int command_set_page_rep_nthCLOCK(int number_of_arguments, char **arguments)
{
f0101c4c:	55                   	push   %ebp
f0101c4d:	89 e5                	mov    %esp,%ebp
f0101c4f:	83 ec 18             	sub    $0x18,%esp
	uint32 PageWSMaxSweeps = strtol(arguments[1], NULL, 10);
f0101c52:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101c55:	83 c0 04             	add    $0x4,%eax
f0101c58:	8b 00                	mov    (%eax),%eax
f0101c5a:	83 ec 04             	sub    $0x4,%esp
f0101c5d:	6a 0a                	push   $0xa
f0101c5f:	6a 00                	push   $0x0
f0101c61:	50                   	push   %eax
f0101c62:	e8 36 eb 02 00       	call   f013079d <strtol>
f0101c67:	83 c4 10             	add    $0x10,%esp
f0101c6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	setPageReplacmentAlgorithmNchanceCLOCK(PageWSMaxSweeps);
f0101c6d:	83 ec 0c             	sub    $0xc,%esp
f0101c70:	ff 75 f4             	pushl  -0xc(%ebp)
f0101c73:	e8 ef b5 00 00       	call   f010d267 <setPageReplacmentAlgorithmNchanceCLOCK>
f0101c78:	83 c4 10             	add    $0x10,%esp
	cprintf("Page replacement algorithm is now N chance CLOCK\n");
f0101c7b:	83 ec 0c             	sub    $0xc,%esp
f0101c7e:	68 c8 3b 13 f0       	push   $0xf0133bc8
f0101c83:	e8 a5 ef ff ff       	call   f0100c2d <cprintf>
f0101c88:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101c8b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101c90:	c9                   	leave  
f0101c91:	c3                   	ret    

f0101c92 <command_set_page_rep_CLOCK>:
int command_set_page_rep_CLOCK(int number_of_arguments, char **arguments)
{
f0101c92:	55                   	push   %ebp
f0101c93:	89 e5                	mov    %esp,%ebp
f0101c95:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmCLOCK();
f0101c98:	e8 8a b5 00 00       	call   f010d227 <setPageReplacmentAlgorithmCLOCK>
	cprintf("Page replacement algorithm is now CLOCK\n");
f0101c9d:	83 ec 0c             	sub    $0xc,%esp
f0101ca0:	68 fc 3b 13 f0       	push   $0xf0133bfc
f0101ca5:	e8 83 ef ff ff       	call   f0100c2d <cprintf>
f0101caa:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101cad:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cb2:	c9                   	leave  
f0101cb3:	c3                   	ret    

f0101cb4 <command_set_page_rep_FIFO>:

int command_set_page_rep_FIFO(int number_of_arguments, char **arguments)
{
f0101cb4:	55                   	push   %ebp
f0101cb5:	89 e5                	mov    %esp,%ebp
f0101cb7:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmFIFO();
f0101cba:	e8 78 b5 00 00       	call   f010d237 <setPageReplacmentAlgorithmFIFO>
	cprintf("Page replacement algorithm is now FIFO\n");
f0101cbf:	83 ec 0c             	sub    $0xc,%esp
f0101cc2:	68 28 3c 13 f0       	push   $0xf0133c28
f0101cc7:	e8 61 ef ff ff       	call   f0100c2d <cprintf>
f0101ccc:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ccf:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cd4:	c9                   	leave  
f0101cd5:	c3                   	ret    

f0101cd6 <command_set_page_rep_ModifiedCLOCK>:

int command_set_page_rep_ModifiedCLOCK(int number_of_arguments, char **arguments)
{
f0101cd6:	55                   	push   %ebp
f0101cd7:	89 e5                	mov    %esp,%ebp
f0101cd9:	83 ec 08             	sub    $0x8,%esp
	setPageReplacmentAlgorithmModifiedCLOCK();
f0101cdc:	e8 66 b5 00 00       	call   f010d247 <setPageReplacmentAlgorithmModifiedCLOCK>
	cprintf("Page replacement algorithm is now Modified CLOCK\n");
f0101ce1:	83 ec 0c             	sub    $0xc,%esp
f0101ce4:	68 50 3c 13 f0       	push   $0xf0133c50
f0101ce9:	e8 3f ef ff ff       	call   f0100c2d <cprintf>
f0101cee:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101cf1:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101cf6:	c9                   	leave  
f0101cf7:	c3                   	ret    

f0101cf8 <command_sch_RR>:

/*2018*///BEGIN======================================================
int command_sch_RR(int number_of_arguments, char **arguments)
{
f0101cf8:	55                   	push   %ebp
f0101cf9:	89 e5                	mov    %esp,%ebp
f0101cfb:	83 ec 18             	sub    $0x18,%esp
	uint8 quantum = strtol(arguments[1], NULL, 10);
f0101cfe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d01:	83 c0 04             	add    $0x4,%eax
f0101d04:	8b 00                	mov    (%eax),%eax
f0101d06:	83 ec 04             	sub    $0x4,%esp
f0101d09:	6a 0a                	push   $0xa
f0101d0b:	6a 00                	push   $0x0
f0101d0d:	50                   	push   %eax
f0101d0e:	e8 8a ea 02 00       	call   f013079d <strtol>
f0101d13:	83 c4 10             	add    $0x10,%esp
f0101d16:	88 45 f7             	mov    %al,-0x9(%ebp)

	sched_init_RR(quantum);
f0101d19:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f0101d1d:	83 ec 0c             	sub    $0xc,%esp
f0101d20:	50                   	push   %eax
f0101d21:	e8 b4 29 00 00       	call   f01046da <sched_init_RR>
f0101d26:	83 c4 10             	add    $0x10,%esp
	cprintf("Scheduler is now set to Round Robin with quantum %d ms\n", quantums[0]);
f0101d29:	a0 88 84 6e f0       	mov    0xf06e8488,%al
f0101d2e:	0f b6 c0             	movzbl %al,%eax
f0101d31:	83 ec 08             	sub    $0x8,%esp
f0101d34:	50                   	push   %eax
f0101d35:	68 84 3c 13 f0       	push   $0xf0133c84
f0101d3a:	e8 ee ee ff ff       	call   f0100c2d <cprintf>
f0101d3f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101d42:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101d47:	c9                   	leave  
f0101d48:	c3                   	ret    

f0101d49 <command_sch_MLFQ>:
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
f0101d49:	55                   	push   %ebp
f0101d4a:	89 e5                	mov    %esp,%ebp
f0101d4c:	53                   	push   %ebx
f0101d4d:	83 ec 24             	sub    $0x24,%esp
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
f0101d50:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d53:	83 c0 04             	add    $0x4,%eax
f0101d56:	8b 00                	mov    (%eax),%eax
f0101d58:	83 ec 04             	sub    $0x4,%esp
f0101d5b:	6a 0a                	push   $0xa
f0101d5d:	6a 00                	push   $0x0
f0101d5f:	50                   	push   %eax
f0101d60:	e8 38 ea 02 00       	call   f013079d <strtol>
f0101d65:	83 c4 10             	add    $0x10,%esp
f0101d68:	88 45 ef             	mov    %al,-0x11(%ebp)
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101d6b:	c7 45 f4 02 00 00 00 	movl   $0x2,-0xc(%ebp)
f0101d72:	eb 2e                	jmp    f0101da2 <command_sch_MLFQ+0x59>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
f0101d74:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d77:	8d 58 fe             	lea    -0x2(%eax),%ebx
f0101d7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101d7d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0101d84:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101d87:	01 d0                	add    %edx,%eax
f0101d89:	8b 00                	mov    (%eax),%eax
f0101d8b:	83 ec 04             	sub    $0x4,%esp
f0101d8e:	6a 0a                	push   $0xa
f0101d90:	6a 00                	push   $0x0
f0101d92:	50                   	push   %eax
f0101d93:	e8 05 ea 02 00       	call   f013079d <strtol>
f0101d98:	83 c4 10             	add    $0x10,%esp
f0101d9b:	88 44 1d e1          	mov    %al,-0x1f(%ebp,%ebx,1)
}
int command_sch_MLFQ(int number_of_arguments, char **arguments)
{
	uint8 numOfLevels = strtol(arguments[1], NULL, 10);
	uint8 quantumOfEachLevel[MAX_ARGUMENTS - 2] ;
	for (int i = 2 ; i < number_of_arguments ; i++)
f0101d9f:	ff 45 f4             	incl   -0xc(%ebp)
f0101da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101da5:	3b 45 08             	cmp    0x8(%ebp),%eax
f0101da8:	7c ca                	jl     f0101d74 <command_sch_MLFQ+0x2b>
	{
		quantumOfEachLevel[i-2] = strtol(arguments[i], NULL, 10);
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);
f0101daa:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax
f0101dae:	83 ec 08             	sub    $0x8,%esp
f0101db1:	8d 55 e1             	lea    -0x1f(%ebp),%edx
f0101db4:	52                   	push   %edx
f0101db5:	50                   	push   %eax
f0101db6:	e8 75 29 00 00       	call   f0104730 <sched_init_MLFQ>
f0101dbb:	83 c4 10             	add    $0x10,%esp

	cprintf("Scheduler is now set to MLFQ with quantums: ");
f0101dbe:	83 ec 0c             	sub    $0xc,%esp
f0101dc1:	68 bc 3c 13 f0       	push   $0xf0133cbc
f0101dc6:	e8 62 ee ff ff       	call   f0100c2d <cprintf>
f0101dcb:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101dce:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0101dd5:	eb 21                	jmp    f0101df8 <command_sch_MLFQ+0xaf>
	{
		cprintf("%d   ", quantums[i]) ;
f0101dd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0101dda:	05 88 84 6e f0       	add    $0xf06e8488,%eax
f0101ddf:	8a 00                	mov    (%eax),%al
f0101de1:	0f b6 c0             	movzbl %al,%eax
f0101de4:	83 ec 08             	sub    $0x8,%esp
f0101de7:	50                   	push   %eax
f0101de8:	68 e9 3c 13 f0       	push   $0xf0133ce9
f0101ded:	e8 3b ee ff ff       	call   f0100c2d <cprintf>
f0101df2:	83 c4 10             	add    $0x10,%esp
	}

	sched_init_MLFQ(numOfLevels, quantumOfEachLevel);

	cprintf("Scheduler is now set to MLFQ with quantums: ");
	for (int i = 0 ; i < num_of_ready_queues; i++)
f0101df5:	ff 45 f0             	incl   -0x10(%ebp)
f0101df8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0101dfd:	0f b6 c0             	movzbl %al,%eax
f0101e00:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0101e03:	7f d2                	jg     f0101dd7 <command_sch_MLFQ+0x8e>
	{
		cprintf("%d   ", quantums[i]) ;
	}
	cprintf("\n");
f0101e05:	83 ec 0c             	sub    $0xc,%esp
f0101e08:	68 81 38 13 f0       	push   $0xf0133881
f0101e0d:	e8 1b ee ff ff       	call   f0100c2d <cprintf>
f0101e12:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101e15:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101e1a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0101e1d:	c9                   	leave  
f0101e1e:	c3                   	ret    

f0101e1f <command_print_sch_method>:
int command_print_sch_method(int number_of_arguments, char **arguments)
{
f0101e1f:	55                   	push   %ebp
f0101e20:	89 e5                	mov    %esp,%ebp
f0101e22:	83 ec 18             	sub    $0x18,%esp
	if (isSchedMethodMLFQ())
f0101e25:	e8 39 25 00 00       	call   f0104363 <isSchedMethodMLFQ>
f0101e2a:	85 c0                	test   %eax,%eax
f0101e2c:	74 59                	je     f0101e87 <command_print_sch_method+0x68>
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
f0101e2e:	83 ec 0c             	sub    $0xc,%esp
f0101e31:	68 f0 3c 13 f0       	push   $0xf0133cf0
f0101e36:	e8 f2 ed ff ff       	call   f0100c2d <cprintf>
f0101e3b:	83 c4 10             	add    $0x10,%esp
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0101e3e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0101e45:	eb 21                	jmp    f0101e68 <command_print_sch_method+0x49>
		{
			cprintf("%d   ", quantums[i]) ;
f0101e47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101e4a:	05 88 84 6e f0       	add    $0xf06e8488,%eax
f0101e4f:	8a 00                	mov    (%eax),%al
f0101e51:	0f b6 c0             	movzbl %al,%eax
f0101e54:	83 ec 08             	sub    $0x8,%esp
f0101e57:	50                   	push   %eax
f0101e58:	68 e9 3c 13 f0       	push   $0xf0133ce9
f0101e5d:	e8 cb ed ff ff       	call   f0100c2d <cprintf>
f0101e62:	83 c4 10             	add    $0x10,%esp
int command_print_sch_method(int number_of_arguments, char **arguments)
{
	if (isSchedMethodMLFQ())
	{
		cprintf("Current scheduler method is MLFQ with quantums: ");
		for (int i = 0 ; i < num_of_ready_queues; i++)
f0101e65:	ff 45 f4             	incl   -0xc(%ebp)
f0101e68:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0101e6d:	0f b6 c0             	movzbl %al,%eax
f0101e70:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0101e73:	7f d2                	jg     f0101e47 <command_print_sch_method+0x28>
		{
			cprintf("%d   ", quantums[i]) ;
		}
		cprintf("\n");
f0101e75:	83 ec 0c             	sub    $0xc,%esp
f0101e78:	68 81 38 13 f0       	push   $0xf0133881
f0101e7d:	e8 ab ed ff ff       	call   f0100c2d <cprintf>
f0101e82:	83 c4 10             	add    $0x10,%esp
f0101e85:	eb 34                	jmp    f0101ebb <command_print_sch_method+0x9c>
	}
	else if (isSchedMethodRR())
f0101e87:	e8 bd 24 00 00       	call   f0104349 <isSchedMethodRR>
f0101e8c:	85 c0                	test   %eax,%eax
f0101e8e:	74 1b                	je     f0101eab <command_print_sch_method+0x8c>
	{
		cprintf("Current scheduler method is Round Robin with quantum %d ms\n", quantums[0]);
f0101e90:	a0 88 84 6e f0       	mov    0xf06e8488,%al
f0101e95:	0f b6 c0             	movzbl %al,%eax
f0101e98:	83 ec 08             	sub    $0x8,%esp
f0101e9b:	50                   	push   %eax
f0101e9c:	68 24 3d 13 f0       	push   $0xf0133d24
f0101ea1:	e8 87 ed ff ff       	call   f0100c2d <cprintf>
f0101ea6:	83 c4 10             	add    $0x10,%esp
f0101ea9:	eb 10                	jmp    f0101ebb <command_print_sch_method+0x9c>
	}

	else
		cprintf("Current scheduler method is UNDEFINED\n");
f0101eab:	83 ec 0c             	sub    $0xc,%esp
f0101eae:	68 60 3d 13 f0       	push   $0xf0133d60
f0101eb3:	e8 75 ed ff ff       	call   f0100c2d <cprintf>
f0101eb8:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101ebb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101ec0:	c9                   	leave  
f0101ec1:	c3                   	ret    

f0101ec2 <command_sch_test>:
int command_sch_test(int number_of_arguments, char **arguments)
{
f0101ec2:	55                   	push   %ebp
f0101ec3:	89 e5                	mov    %esp,%ebp
f0101ec5:	83 ec 18             	sub    $0x18,%esp
	int status  = strtol(arguments[1], NULL, 10);
f0101ec8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0101ecb:	83 c0 04             	add    $0x4,%eax
f0101ece:	8b 00                	mov    (%eax),%eax
f0101ed0:	83 ec 04             	sub    $0x4,%esp
f0101ed3:	6a 0a                	push   $0xa
f0101ed5:	6a 00                	push   $0x0
f0101ed7:	50                   	push   %eax
f0101ed8:	e8 c0 e8 02 00       	call   f013079d <strtol>
f0101edd:	83 c4 10             	add    $0x10,%esp
f0101ee0:	89 45 f4             	mov    %eax,-0xc(%ebp)
	chksch(status);
f0101ee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0101ee6:	0f b6 c0             	movzbl %al,%eax
f0101ee9:	83 ec 0c             	sub    $0xc,%esp
f0101eec:	50                   	push   %eax
f0101eed:	e8 e8 d7 02 00       	call   f012f6da <chksch>
f0101ef2:	83 c4 10             	add    $0x10,%esp
	if (status == 0)
f0101ef5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0101ef9:	75 12                	jne    f0101f0d <command_sch_test+0x4b>
		cprintf("Testing the scheduler is TURNED OFF\n");
f0101efb:	83 ec 0c             	sub    $0xc,%esp
f0101efe:	68 88 3d 13 f0       	push   $0xf0133d88
f0101f03:	e8 25 ed ff ff       	call   f0100c2d <cprintf>
f0101f08:	83 c4 10             	add    $0x10,%esp
f0101f0b:	eb 16                	jmp    f0101f23 <command_sch_test+0x61>
	else if (status == 1)
f0101f0d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0101f11:	75 10                	jne    f0101f23 <command_sch_test+0x61>
		cprintf("Testing the scheduler is TURNED ON\n");
f0101f13:	83 ec 0c             	sub    $0xc,%esp
f0101f16:	68 b0 3d 13 f0       	push   $0xf0133db0
f0101f1b:	e8 0d ed ff ff       	call   f0100c2d <cprintf>
f0101f20:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101f23:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101f28:	c9                   	leave  
f0101f29:	c3                   	ret    

f0101f2a <command_print_page_rep>:
/*2018*///END======================================================


/*2015*///BEGIN======================================================
int command_print_page_rep(int number_of_arguments, char **arguments)
{
f0101f2a:	55                   	push   %ebp
f0101f2b:	89 e5                	mov    %esp,%ebp
f0101f2d:	83 ec 08             	sub    $0x8,%esp
	if (isPageReplacmentAlgorithmCLOCK())
f0101f30:	e8 60 b3 00 00       	call   f010d295 <isPageReplacmentAlgorithmCLOCK>
f0101f35:	85 c0                	test   %eax,%eax
f0101f37:	74 15                	je     f0101f4e <command_print_page_rep+0x24>
		cprintf("Page replacement algorithm is CLOCK\n");
f0101f39:	83 ec 0c             	sub    $0xc,%esp
f0101f3c:	68 d4 3d 13 f0       	push   $0xf0133dd4
f0101f41:	e8 e7 ec ff ff       	call   f0100c2d <cprintf>
f0101f46:	83 c4 10             	add    $0x10,%esp
f0101f49:	e9 8c 00 00 00       	jmp    f0101fda <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f0101f4e:	83 ec 0c             	sub    $0xc,%esp
f0101f51:	6a 01                	push   $0x1
f0101f53:	e8 27 b3 00 00       	call   f010d27f <isPageReplacmentAlgorithmLRU>
f0101f58:	83 c4 10             	add    $0x10,%esp
f0101f5b:	85 c0                	test   %eax,%eax
f0101f5d:	74 12                	je     f0101f71 <command_print_page_rep+0x47>
		cprintf("Page replacement algorithm is LRU with TimeStamp approximation\n");
f0101f5f:	83 ec 0c             	sub    $0xc,%esp
f0101f62:	68 fc 3d 13 f0       	push   $0xf0133dfc
f0101f67:	e8 c1 ec ff ff       	call   f0100c2d <cprintf>
f0101f6c:	83 c4 10             	add    $0x10,%esp
f0101f6f:	eb 69                	jmp    f0101fda <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0101f71:	83 ec 0c             	sub    $0xc,%esp
f0101f74:	6a 02                	push   $0x2
f0101f76:	e8 04 b3 00 00       	call   f010d27f <isPageReplacmentAlgorithmLRU>
f0101f7b:	83 c4 10             	add    $0x10,%esp
f0101f7e:	85 c0                	test   %eax,%eax
f0101f80:	74 12                	je     f0101f94 <command_print_page_rep+0x6a>
		cprintf("Page replacement algorithm is LRU with LISTS approximation\n");
f0101f82:	83 ec 0c             	sub    $0xc,%esp
f0101f85:	68 3c 3e 13 f0       	push   $0xf0133e3c
f0101f8a:	e8 9e ec ff ff       	call   f0100c2d <cprintf>
f0101f8f:	83 c4 10             	add    $0x10,%esp
f0101f92:	eb 46                	jmp    f0101fda <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmFIFO())
f0101f94:	e8 17 b3 00 00       	call   f010d2b0 <isPageReplacmentAlgorithmFIFO>
f0101f99:	85 c0                	test   %eax,%eax
f0101f9b:	74 12                	je     f0101faf <command_print_page_rep+0x85>
		cprintf("Page replacement algorithm is FIFO\n");
f0101f9d:	83 ec 0c             	sub    $0xc,%esp
f0101fa0:	68 78 3e 13 f0       	push   $0xf0133e78
f0101fa5:	e8 83 ec ff ff       	call   f0100c2d <cprintf>
f0101faa:	83 c4 10             	add    $0x10,%esp
f0101fad:	eb 2b                	jmp    f0101fda <command_print_page_rep+0xb0>
	else if (isPageReplacmentAlgorithmModifiedCLOCK())
f0101faf:	e8 17 b3 00 00       	call   f010d2cb <isPageReplacmentAlgorithmModifiedCLOCK>
f0101fb4:	85 c0                	test   %eax,%eax
f0101fb6:	74 12                	je     f0101fca <command_print_page_rep+0xa0>
		cprintf("Page replacement algorithm is Modified CLOCK\n");
f0101fb8:	83 ec 0c             	sub    $0xc,%esp
f0101fbb:	68 9c 3e 13 f0       	push   $0xf0133e9c
f0101fc0:	e8 68 ec ff ff       	call   f0100c2d <cprintf>
f0101fc5:	83 c4 10             	add    $0x10,%esp
f0101fc8:	eb 10                	jmp    f0101fda <command_print_page_rep+0xb0>
	else
		cprintf("Page replacement algorithm is UNDEFINED\n");
f0101fca:	83 ec 0c             	sub    $0xc,%esp
f0101fcd:	68 cc 3e 13 f0       	push   $0xf0133ecc
f0101fd2:	e8 56 ec ff ff       	call   f0100c2d <cprintf>
f0101fd7:	83 c4 10             	add    $0x10,%esp

	return 0;
f0101fda:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0101fdf:	c9                   	leave  
f0101fe0:	c3                   	ret    

f0101fe1 <command_set_uheap_plac_FIRSTFIT>:


int command_set_uheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0101fe1:	55                   	push   %ebp
f0101fe2:	89 e5                	mov    %esp,%ebp
f0101fe4:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyFIRSTFIT();
f0101fe7:	e8 ce ee ff ff       	call   f0100eba <setUHeapPlacementStrategyFIRSTFIT>
	cprintf("User Heap placement strategy is now FIRST FIT\n");
f0101fec:	83 ec 0c             	sub    $0xc,%esp
f0101fef:	68 f8 3e 13 f0       	push   $0xf0133ef8
f0101ff4:	e8 34 ec ff ff       	call   f0100c2d <cprintf>
f0101ff9:	83 c4 10             	add    $0x10,%esp
	return 0;
f0101ffc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102001:	c9                   	leave  
f0102002:	c3                   	ret    

f0102003 <command_set_uheap_plac_BESTFIT>:

int command_set_uheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102003:	55                   	push   %ebp
f0102004:	89 e5                	mov    %esp,%ebp
f0102006:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyBESTFIT();
f0102009:	e8 bc ee ff ff       	call   f0100eca <setUHeapPlacementStrategyBESTFIT>
	cprintf("User Heap placement strategy is now BEST FIT\n");
f010200e:	83 ec 0c             	sub    $0xc,%esp
f0102011:	68 28 3f 13 f0       	push   $0xf0133f28
f0102016:	e8 12 ec ff ff       	call   f0100c2d <cprintf>
f010201b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010201e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102023:	c9                   	leave  
f0102024:	c3                   	ret    

f0102025 <command_set_uheap_plac_NEXTFIT>:

int command_set_uheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102025:	55                   	push   %ebp
f0102026:	89 e5                	mov    %esp,%ebp
f0102028:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyNEXTFIT();
f010202b:	e8 aa ee ff ff       	call   f0100eda <setUHeapPlacementStrategyNEXTFIT>
	cprintf("User Heap placement strategy is now NEXT FIT\n");
f0102030:	83 ec 0c             	sub    $0xc,%esp
f0102033:	68 58 3f 13 f0       	push   $0xf0133f58
f0102038:	e8 f0 eb ff ff       	call   f0100c2d <cprintf>
f010203d:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102040:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102045:	c9                   	leave  
f0102046:	c3                   	ret    

f0102047 <command_set_uheap_plac_WORSTFIT>:
int command_set_uheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f0102047:	55                   	push   %ebp
f0102048:	89 e5                	mov    %esp,%ebp
f010204a:	83 ec 08             	sub    $0x8,%esp
	setUHeapPlacementStrategyWORSTFIT();
f010204d:	e8 98 ee ff ff       	call   f0100eea <setUHeapPlacementStrategyWORSTFIT>
	cprintf("User Heap placement strategy is now WORST FIT\n");
f0102052:	83 ec 0c             	sub    $0xc,%esp
f0102055:	68 88 3f 13 f0       	push   $0xf0133f88
f010205a:	e8 ce eb ff ff       	call   f0100c2d <cprintf>
f010205f:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102062:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102067:	c9                   	leave  
f0102068:	c3                   	ret    

f0102069 <command_print_uheap_plac>:

int command_print_uheap_plac(int number_of_arguments, char **arguments)
{
f0102069:	55                   	push   %ebp
f010206a:	89 e5                	mov    %esp,%ebp
f010206c:	83 ec 08             	sub    $0x8,%esp
	if (isUHeapPlacementStrategyFIRSTFIT())
f010206f:	e8 86 ee ff ff       	call   f0100efa <isUHeapPlacementStrategyFIRSTFIT>
f0102074:	84 c0                	test   %al,%al
f0102076:	74 12                	je     f010208a <command_print_uheap_plac+0x21>
		cprintf("User Heap placement strategy is FIRST FIT\n");
f0102078:	83 ec 0c             	sub    $0xc,%esp
f010207b:	68 b8 3f 13 f0       	push   $0xf0133fb8
f0102080:	e8 a8 eb ff ff       	call   f0100c2d <cprintf>
f0102085:	83 c4 10             	add    $0x10,%esp
f0102088:	eb 61                	jmp    f01020eb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyBESTFIT())
f010208a:	e8 80 ee ff ff       	call   f0100f0f <isUHeapPlacementStrategyBESTFIT>
f010208f:	84 c0                	test   %al,%al
f0102091:	74 12                	je     f01020a5 <command_print_uheap_plac+0x3c>
		cprintf("User Heap placement strategy is BEST FIT\n");
f0102093:	83 ec 0c             	sub    $0xc,%esp
f0102096:	68 e4 3f 13 f0       	push   $0xf0133fe4
f010209b:	e8 8d eb ff ff       	call   f0100c2d <cprintf>
f01020a0:	83 c4 10             	add    $0x10,%esp
f01020a3:	eb 46                	jmp    f01020eb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyNEXTFIT())
f01020a5:	e8 7a ee ff ff       	call   f0100f24 <isUHeapPlacementStrategyNEXTFIT>
f01020aa:	84 c0                	test   %al,%al
f01020ac:	74 12                	je     f01020c0 <command_print_uheap_plac+0x57>
		cprintf("User Heap placement strategy is NEXT FIT\n");
f01020ae:	83 ec 0c             	sub    $0xc,%esp
f01020b1:	68 10 40 13 f0       	push   $0xf0134010
f01020b6:	e8 72 eb ff ff       	call   f0100c2d <cprintf>
f01020bb:	83 c4 10             	add    $0x10,%esp
f01020be:	eb 2b                	jmp    f01020eb <command_print_uheap_plac+0x82>
	else if (isUHeapPlacementStrategyWORSTFIT())
f01020c0:	e8 74 ee ff ff       	call   f0100f39 <isUHeapPlacementStrategyWORSTFIT>
f01020c5:	84 c0                	test   %al,%al
f01020c7:	74 12                	je     f01020db <command_print_uheap_plac+0x72>
		cprintf("User Heap placement strategy is WORST FIT\n");
f01020c9:	83 ec 0c             	sub    $0xc,%esp
f01020cc:	68 3c 40 13 f0       	push   $0xf013403c
f01020d1:	e8 57 eb ff ff       	call   f0100c2d <cprintf>
f01020d6:	83 c4 10             	add    $0x10,%esp
f01020d9:	eb 10                	jmp    f01020eb <command_print_uheap_plac+0x82>
	else
		cprintf("User Heap placement strategy is UNDEFINED\n");
f01020db:	83 ec 0c             	sub    $0xc,%esp
f01020de:	68 68 40 13 f0       	push   $0xf0134068
f01020e3:	e8 45 eb ff ff       	call   f0100c2d <cprintf>
f01020e8:	83 c4 10             	add    $0x10,%esp

	return 0;
f01020eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01020f0:	c9                   	leave  
f01020f1:	c3                   	ret    

f01020f2 <command_set_kheap_plac_CONTALLOC>:
/*2015*///END======================================================

/*2017*///BEGIN======================================================

int command_set_kheap_plac_CONTALLOC(int number_of_arguments, char **arguments)
{
f01020f2:	55                   	push   %ebp
f01020f3:	89 e5                	mov    %esp,%ebp
f01020f5:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyCONTALLOC();
f01020f8:	e8 05 ed ff ff       	call   f0100e02 <setKHeapPlacementStrategyCONTALLOC>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f01020fd:	83 ec 0c             	sub    $0xc,%esp
f0102100:	68 94 40 13 f0       	push   $0xf0134094
f0102105:	e8 23 eb ff ff       	call   f0100c2d <cprintf>
f010210a:	83 c4 10             	add    $0x10,%esp
	return 0;
f010210d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102112:	c9                   	leave  
f0102113:	c3                   	ret    

f0102114 <command_set_kheap_plac_FIRSTFIT>:

int command_set_kheap_plac_FIRSTFIT(int number_of_arguments, char **arguments)
{
f0102114:	55                   	push   %ebp
f0102115:	89 e5                	mov    %esp,%ebp
f0102117:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyFIRSTFIT();
f010211a:	e8 f3 ec ff ff       	call   f0100e12 <setKHeapPlacementStrategyFIRSTFIT>
	cprintf("Kernel Heap placement strategy is now FIRST FIT\n");
f010211f:	83 ec 0c             	sub    $0xc,%esp
f0102122:	68 94 40 13 f0       	push   $0xf0134094
f0102127:	e8 01 eb ff ff       	call   f0100c2d <cprintf>
f010212c:	83 c4 10             	add    $0x10,%esp
	return 0;
f010212f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102134:	c9                   	leave  
f0102135:	c3                   	ret    

f0102136 <command_set_kheap_plac_BESTFIT>:

int command_set_kheap_plac_BESTFIT(int number_of_arguments, char **arguments)
{
f0102136:	55                   	push   %ebp
f0102137:	89 e5                	mov    %esp,%ebp
f0102139:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyBESTFIT();
f010213c:	e8 e1 ec ff ff       	call   f0100e22 <setKHeapPlacementStrategyBESTFIT>
	cprintf("Kernel Heap placement strategy is now BEST FIT\n");
f0102141:	83 ec 0c             	sub    $0xc,%esp
f0102144:	68 c8 40 13 f0       	push   $0xf01340c8
f0102149:	e8 df ea ff ff       	call   f0100c2d <cprintf>
f010214e:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102151:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102156:	c9                   	leave  
f0102157:	c3                   	ret    

f0102158 <command_set_kheap_plac_NEXTFIT>:

int command_set_kheap_plac_NEXTFIT(int number_of_arguments, char **arguments)
{
f0102158:	55                   	push   %ebp
f0102159:	89 e5                	mov    %esp,%ebp
f010215b:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyNEXTFIT();
f010215e:	e8 cf ec ff ff       	call   f0100e32 <setKHeapPlacementStrategyNEXTFIT>
	cprintf("Kernel Heap placement strategy is now NEXT FIT\n");
f0102163:	83 ec 0c             	sub    $0xc,%esp
f0102166:	68 f8 40 13 f0       	push   $0xf01340f8
f010216b:	e8 bd ea ff ff       	call   f0100c2d <cprintf>
f0102170:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102173:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102178:	c9                   	leave  
f0102179:	c3                   	ret    

f010217a <command_set_kheap_plac_WORSTFIT>:
int command_set_kheap_plac_WORSTFIT(int number_of_arguments, char **arguments)
{
f010217a:	55                   	push   %ebp
f010217b:	89 e5                	mov    %esp,%ebp
f010217d:	83 ec 08             	sub    $0x8,%esp
	setKHeapPlacementStrategyWORSTFIT();
f0102180:	e8 bd ec ff ff       	call   f0100e42 <setKHeapPlacementStrategyWORSTFIT>
	cprintf("Kernel Heap placement strategy is now WORST FIT\n");
f0102185:	83 ec 0c             	sub    $0xc,%esp
f0102188:	68 28 41 13 f0       	push   $0xf0134128
f010218d:	e8 9b ea ff ff       	call   f0100c2d <cprintf>
f0102192:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102195:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010219a:	c9                   	leave  
f010219b:	c3                   	ret    

f010219c <command_print_kheap_plac>:

int command_print_kheap_plac(int number_of_arguments, char **arguments)
{
f010219c:	55                   	push   %ebp
f010219d:	89 e5                	mov    %esp,%ebp
f010219f:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyCONTALLOC())
f01021a2:	e8 ab ec ff ff       	call   f0100e52 <isKHeapPlacementStrategyCONTALLOC>
f01021a7:	84 c0                	test   %al,%al
f01021a9:	74 12                	je     f01021bd <command_print_kheap_plac+0x21>
		cprintf("Kernel Heap placement strategy is CONTINUOUS ALLOCATION\n");
f01021ab:	83 ec 0c             	sub    $0xc,%esp
f01021ae:	68 5c 41 13 f0       	push   $0xf013415c
f01021b3:	e8 75 ea ff ff       	call   f0100c2d <cprintf>
f01021b8:	83 c4 10             	add    $0x10,%esp
f01021bb:	eb 7c                	jmp    f0102239 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01021bd:	e8 a4 ec ff ff       	call   f0100e66 <isKHeapPlacementStrategyFIRSTFIT>
f01021c2:	84 c0                	test   %al,%al
f01021c4:	74 12                	je     f01021d8 <command_print_kheap_plac+0x3c>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f01021c6:	83 ec 0c             	sub    $0xc,%esp
f01021c9:	68 98 41 13 f0       	push   $0xf0134198
f01021ce:	e8 5a ea ff ff       	call   f0100c2d <cprintf>
f01021d3:	83 c4 10             	add    $0x10,%esp
f01021d6:	eb 61                	jmp    f0102239 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyBESTFIT())
f01021d8:	e8 9e ec ff ff       	call   f0100e7b <isKHeapPlacementStrategyBESTFIT>
f01021dd:	84 c0                	test   %al,%al
f01021df:	74 12                	je     f01021f3 <command_print_kheap_plac+0x57>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f01021e1:	83 ec 0c             	sub    $0xc,%esp
f01021e4:	68 c8 41 13 f0       	push   $0xf01341c8
f01021e9:	e8 3f ea ff ff       	call   f0100c2d <cprintf>
f01021ee:	83 c4 10             	add    $0x10,%esp
f01021f1:	eb 46                	jmp    f0102239 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyNEXTFIT())
f01021f3:	e8 98 ec ff ff       	call   f0100e90 <isKHeapPlacementStrategyNEXTFIT>
f01021f8:	84 c0                	test   %al,%al
f01021fa:	74 12                	je     f010220e <command_print_kheap_plac+0x72>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f01021fc:	83 ec 0c             	sub    $0xc,%esp
f01021ff:	68 f4 41 13 f0       	push   $0xf01341f4
f0102204:	e8 24 ea ff ff       	call   f0100c2d <cprintf>
f0102209:	83 c4 10             	add    $0x10,%esp
f010220c:	eb 2b                	jmp    f0102239 <command_print_kheap_plac+0x9d>
	else if (isKHeapPlacementStrategyWORSTFIT())
f010220e:	e8 92 ec ff ff       	call   f0100ea5 <isKHeapPlacementStrategyWORSTFIT>
f0102213:	84 c0                	test   %al,%al
f0102215:	74 12                	je     f0102229 <command_print_kheap_plac+0x8d>
		cprintf("Kernel Heap placement strategy is WORST FIT\n");
f0102217:	83 ec 0c             	sub    $0xc,%esp
f010221a:	68 20 42 13 f0       	push   $0xf0134220
f010221f:	e8 09 ea ff ff       	call   f0100c2d <cprintf>
f0102224:	83 c4 10             	add    $0x10,%esp
f0102227:	eb 10                	jmp    f0102239 <command_print_kheap_plac+0x9d>
	else
		cprintf("Kernel Heap placement strategy is UNDEFINED\n");
f0102229:	83 ec 0c             	sub    $0xc,%esp
f010222c:	68 50 42 13 f0       	push   $0xf0134250
f0102231:	e8 f7 e9 ff ff       	call   f0100c2d <cprintf>
f0102236:	83 c4 10             	add    $0x10,%esp

	return 0;
f0102239:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010223e:	c9                   	leave  
f010223f:	c3                   	ret    

f0102240 <command_disable_modified_buffer>:

/*2017*///END======================================================

int command_disable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102240:	55                   	push   %ebp
f0102241:	89 e5                	mov    %esp,%ebp
f0102243:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f0102246:	e8 f7 b0 00 00       	call   f010d342 <isBufferingEnabled>
f010224b:	84 c0                	test   %al,%al
f010224d:	75 12                	jne    f0102261 <command_disable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f010224f:	83 ec 0c             	sub    $0xc,%esp
f0102252:	68 80 42 13 f0       	push   $0xf0134280
f0102257:	e8 d1 e9 ff ff       	call   f0100c2d <cprintf>
f010225c:	83 c4 10             	add    $0x10,%esp
f010225f:	eb 1d                	jmp    f010227e <command_disable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(0);
f0102261:	83 ec 0c             	sub    $0xc,%esp
f0102264:	6a 00                	push   $0x0
f0102266:	e8 b1 b0 00 00       	call   f010d31c <enableModifiedBuffer>
f010226b:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now DISABLED\n");
f010226e:	83 ec 0c             	sub    $0xc,%esp
f0102271:	68 bc 42 13 f0       	push   $0xf01342bc
f0102276:	e8 b2 e9 ff ff       	call   f0100c2d <cprintf>
f010227b:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f010227e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102283:	c9                   	leave  
f0102284:	c3                   	ret    

f0102285 <command_enable_modified_buffer>:


int command_enable_modified_buffer(int number_of_arguments, char **arguments)
{
f0102285:	55                   	push   %ebp
f0102286:	89 e5                	mov    %esp,%ebp
f0102288:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010228b:	e8 b2 b0 00 00       	call   f010d342 <isBufferingEnabled>
f0102290:	84 c0                	test   %al,%al
f0102292:	75 12                	jne    f01022a6 <command_enable_modified_buffer+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering first.\n");
f0102294:	83 ec 0c             	sub    $0xc,%esp
f0102297:	68 80 42 13 f0       	push   $0xf0134280
f010229c:	e8 8c e9 ff ff       	call   f0100c2d <cprintf>
f01022a1:	83 c4 10             	add    $0x10,%esp
f01022a4:	eb 1d                	jmp    f01022c3 <command_enable_modified_buffer+0x3e>
	}
	else
	{
		enableModifiedBuffer(1);
f01022a6:	83 ec 0c             	sub    $0xc,%esp
f01022a9:	6a 01                	push   $0x1
f01022ab:	e8 6c b0 00 00       	call   f010d31c <enableModifiedBuffer>
f01022b0:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified Buffer is now ENABLED\n");
f01022b3:	83 ec 0c             	sub    $0xc,%esp
f01022b6:	68 e0 42 13 f0       	push   $0xf01342e0
f01022bb:	e8 6d e9 ff ff       	call   f0100c2d <cprintf>
f01022c0:	83 c4 10             	add    $0x10,%esp
	}
	return 0;
f01022c3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022c8:	c9                   	leave  
f01022c9:	c3                   	ret    

f01022ca <command_disable_buffering>:

/*2016 ============================================================================*/

int command_disable_buffering(int number_of_arguments, char **arguments)
{
f01022ca:	55                   	push   %ebp
f01022cb:	89 e5                	mov    %esp,%ebp
f01022cd:	83 ec 08             	sub    $0x8,%esp
	enableBuffering(0);
f01022d0:	83 ec 0c             	sub    $0xc,%esp
f01022d3:	6a 00                	push   $0x0
f01022d5:	e8 5a b0 00 00       	call   f010d334 <enableBuffering>
f01022da:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(0);
f01022dd:	83 ec 0c             	sub    $0xc,%esp
f01022e0:	6a 00                	push   $0x0
f01022e2:	e8 35 b0 00 00       	call   f010d31c <enableModifiedBuffer>
f01022e7:	83 c4 10             	add    $0x10,%esp
	cprintf("Buffering is now DISABLED\n");
f01022ea:	83 ec 0c             	sub    $0xc,%esp
f01022ed:	68 00 43 13 f0       	push   $0xf0134300
f01022f2:	e8 36 e9 ff ff       	call   f0100c2d <cprintf>
f01022f7:	83 c4 10             	add    $0x10,%esp
	return 0;
f01022fa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01022ff:	c9                   	leave  
f0102300:	c3                   	ret    

f0102301 <command_enable_buffering>:


int command_enable_buffering(int number_of_arguments, char **arguments)
{
f0102301:	55                   	push   %ebp
f0102302:	89 e5                	mov    %esp,%ebp
f0102304:	83 ec 78             	sub    $0x78,%esp
	enableBuffering(1);
f0102307:	83 ec 0c             	sub    $0xc,%esp
f010230a:	6a 01                	push   $0x1
f010230c:	e8 23 b0 00 00       	call   f010d334 <enableBuffering>
f0102311:	83 c4 10             	add    $0x10,%esp
	enableModifiedBuffer(1);
f0102314:	83 ec 0c             	sub    $0xc,%esp
f0102317:	6a 01                	push   $0x1
f0102319:	e8 fe af 00 00       	call   f010d31c <enableModifiedBuffer>
f010231e:	83 c4 10             	add    $0x10,%esp
	if(getModifiedBufferLength() == 0)
f0102321:	e8 34 b0 00 00       	call   f010d35a <getModifiedBufferLength>
f0102326:	85 c0                	test   %eax,%eax
f0102328:	75 59                	jne    f0102383 <command_enable_buffering+0x82>
	{
		cprintf("Modified buffer enabled but with length = 0\n");
f010232a:	83 ec 0c             	sub    $0xc,%esp
f010232d:	68 1c 43 13 f0       	push   $0xf013431c
f0102332:	e8 f6 e8 ff ff       	call   f0100c2d <cprintf>
f0102337:	83 c4 10             	add    $0x10,%esp
		char str[100];
		readline("Please enter the modified buff length = ", str);
f010233a:	83 ec 08             	sub    $0x8,%esp
f010233d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102340:	50                   	push   %eax
f0102341:	68 4c 43 13 f0       	push   $0xf013434c
f0102346:	e8 ec de 02 00       	call   f0130237 <readline>
f010234b:	83 c4 10             	add    $0x10,%esp
		setModifiedBufferLength(strtol(str, NULL, 10));
f010234e:	83 ec 04             	sub    $0x4,%esp
f0102351:	6a 0a                	push   $0xa
f0102353:	6a 00                	push   $0x0
f0102355:	8d 45 94             	lea    -0x6c(%ebp),%eax
f0102358:	50                   	push   %eax
f0102359:	e8 3f e4 02 00       	call   f013079d <strtol>
f010235e:	83 c4 10             	add    $0x10,%esp
f0102361:	83 ec 0c             	sub    $0xc,%esp
f0102364:	50                   	push   %eax
f0102365:	e8 e2 af 00 00       	call   f010d34c <setModifiedBufferLength>
f010236a:	83 c4 10             	add    $0x10,%esp
		cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f010236d:	e8 e8 af 00 00       	call   f010d35a <getModifiedBufferLength>
f0102372:	83 ec 08             	sub    $0x8,%esp
f0102375:	50                   	push   %eax
f0102376:	68 78 43 13 f0       	push   $0xf0134378
f010237b:	e8 ad e8 ff ff       	call   f0100c2d <cprintf>
f0102380:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Buffering is now ENABLED\n");
f0102383:	83 ec 0c             	sub    $0xc,%esp
f0102386:	68 9d 43 13 f0       	push   $0xf013439d
f010238b:	e8 9d e8 ff ff       	call   f0100c2d <cprintf>
f0102390:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102393:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102398:	c9                   	leave  
f0102399:	c3                   	ret    

f010239a <command_set_modified_buffer_length>:

int command_set_modified_buffer_length(int number_of_arguments, char **arguments)
{
f010239a:	55                   	push   %ebp
f010239b:	89 e5                	mov    %esp,%ebp
f010239d:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f01023a0:	e8 9d af 00 00       	call   f010d342 <isBufferingEnabled>
f01023a5:	84 c0                	test   %al,%al
f01023a7:	75 12                	jne    f01023bb <command_set_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f01023a9:	83 ec 0c             	sub    $0xc,%esp
f01023ac:	68 b8 43 13 f0       	push   $0xf01343b8
f01023b1:	e8 77 e8 ff ff       	call   f0100c2d <cprintf>
f01023b6:	83 c4 10             	add    $0x10,%esp
f01023b9:	eb 19                	jmp    f01023d4 <command_set_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f01023bb:	e8 6a af 00 00       	call   f010d32a <isModifiedBufferEnabled>
f01023c0:	84 c0                	test   %al,%al
f01023c2:	75 10                	jne    f01023d4 <command_set_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f01023c4:	83 ec 0c             	sub    $0xc,%esp
f01023c7:	68 08 44 13 f0       	push   $0xf0134408
f01023cc:	e8 5c e8 ff ff       	call   f0100c2d <cprintf>
f01023d1:	83 c4 10             	add    $0x10,%esp
	}
	setModifiedBufferLength(strtol(arguments[1], NULL, 10));
f01023d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01023d7:	83 c0 04             	add    $0x4,%eax
f01023da:	8b 00                	mov    (%eax),%eax
f01023dc:	83 ec 04             	sub    $0x4,%esp
f01023df:	6a 0a                	push   $0xa
f01023e1:	6a 00                	push   $0x0
f01023e3:	50                   	push   %eax
f01023e4:	e8 b4 e3 02 00       	call   f013079d <strtol>
f01023e9:	83 c4 10             	add    $0x10,%esp
f01023ec:	83 ec 0c             	sub    $0xc,%esp
f01023ef:	50                   	push   %eax
f01023f0:	e8 57 af 00 00       	call   f010d34c <setModifiedBufferLength>
f01023f5:	83 c4 10             	add    $0x10,%esp
	cprintf("Modified buffer length updated = %d\n", getModifiedBufferLength());
f01023f8:	e8 5d af 00 00       	call   f010d35a <getModifiedBufferLength>
f01023fd:	83 ec 08             	sub    $0x8,%esp
f0102400:	50                   	push   %eax
f0102401:	68 78 43 13 f0       	push   $0xf0134378
f0102406:	e8 22 e8 ff ff       	call   f0100c2d <cprintf>
f010240b:	83 c4 10             	add    $0x10,%esp
	return 0;
f010240e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102413:	c9                   	leave  
f0102414:	c3                   	ret    

f0102415 <command_get_modified_buffer_length>:

int command_get_modified_buffer_length(int number_of_arguments, char **arguments)
{
f0102415:	55                   	push   %ebp
f0102416:	89 e5                	mov    %esp,%ebp
f0102418:	83 ec 08             	sub    $0x8,%esp
	if(!isBufferingEnabled())
f010241b:	e8 22 af 00 00       	call   f010d342 <isBufferingEnabled>
f0102420:	84 c0                	test   %al,%al
f0102422:	75 12                	jne    f0102436 <command_get_modified_buffer_length+0x21>
	{
		cprintf("Buffering is not enabled. Please enable buffering to use the modified buffer.\n");
f0102424:	83 ec 0c             	sub    $0xc,%esp
f0102427:	68 b8 43 13 f0       	push   $0xf01343b8
f010242c:	e8 fc e7 ff ff       	call   f0100c2d <cprintf>
f0102431:	83 c4 10             	add    $0x10,%esp
f0102434:	eb 19                	jmp    f010244f <command_get_modified_buffer_length+0x3a>
	}
	else if (!isModifiedBufferEnabled())
f0102436:	e8 ef ae 00 00       	call   f010d32a <isModifiedBufferEnabled>
f010243b:	84 c0                	test   %al,%al
f010243d:	75 10                	jne    f010244f <command_get_modified_buffer_length+0x3a>
	{
		cprintf("Modified Buffering is not enabled. Please enable modified buffering.\n");
f010243f:	83 ec 0c             	sub    $0xc,%esp
f0102442:	68 08 44 13 f0       	push   $0xf0134408
f0102447:	e8 e1 e7 ff ff       	call   f0100c2d <cprintf>
f010244c:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("Modified buffer length = %d\n", getModifiedBufferLength());
f010244f:	e8 06 af 00 00       	call   f010d35a <getModifiedBufferLength>
f0102454:	83 ec 08             	sub    $0x8,%esp
f0102457:	50                   	push   %eax
f0102458:	68 4e 44 13 f0       	push   $0xf013444e
f010245d:	e8 cb e7 ff ff       	call   f0100c2d <cprintf>
f0102462:	83 c4 10             	add    $0x10,%esp
	return 0;
f0102465:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010246a:	c9                   	leave  
f010246b:	c3                   	ret    

f010246c <command_test_kmalloc>:

/*TESTING Commands*/
int command_test_kmalloc(int number_of_arguments, char **arguments)
{
f010246c:	55                   	push   %ebp
f010246d:	89 e5                	mov    %esp,%ebp
f010246f:	83 ec 18             	sub    $0x18,%esp
	int testNum = 0 ;
f0102472:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (number_of_arguments==2)
f0102479:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010247d:	75 1b                	jne    f010249a <command_test_kmalloc+0x2e>
		testNum = strtol(arguments[1], NULL, 10);
f010247f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102482:	83 c0 04             	add    $0x4,%eax
f0102485:	8b 00                	mov    (%eax),%eax
f0102487:	83 ec 04             	sub    $0x4,%esp
f010248a:	6a 0a                	push   $0xa
f010248c:	6a 00                	push   $0x0
f010248e:	50                   	push   %eax
f010248f:	e8 09 e3 02 00       	call   f013079d <strtol>
f0102494:	83 c4 10             	add    $0x10,%esp
f0102497:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (isKHeapPlacementStrategyCONTALLOC())
f010249a:	e8 b3 e9 ff ff       	call   f0100e52 <isKHeapPlacementStrategyCONTALLOC>
f010249f:	84 c0                	test   %al,%al
f01024a1:	74 0a                	je     f01024ad <command_test_kmalloc+0x41>
		test_kmalloc();
f01024a3:	e8 a1 46 01 00       	call   f0116b49 <test_kmalloc>
f01024a8:	e9 e8 00 00 00       	jmp    f0102595 <command_test_kmalloc+0x129>
	else if (isKHeapPlacementStrategyFIRSTFIT())
f01024ad:	e8 b4 e9 ff ff       	call   f0100e66 <isKHeapPlacementStrategyFIRSTFIT>
f01024b2:	84 c0                	test   %al,%al
f01024b4:	74 44                	je     f01024fa <command_test_kmalloc+0x8e>
	{
		if (testNum == 0)
f01024b6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01024ba:	75 1a                	jne    f01024d6 <command_test_kmalloc+0x6a>
		{
			cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f01024bc:	83 ec 0c             	sub    $0xc,%esp
f01024bf:	68 6c 44 13 f0       	push   $0xf013446c
f01024c4:	e8 64 e7 ff ff       	call   f0100c2d <cprintf>
f01024c9:	83 c4 10             	add    $0x10,%esp
			return 0;
f01024cc:	b8 00 00 00 00       	mov    $0x0,%eax
f01024d1:	e9 c4 00 00 00       	jmp    f010259a <command_test_kmalloc+0x12e>
		}
		//Test FIRST FIT allocation
		if (testNum == 1)
f01024d6:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f01024da:	75 0a                	jne    f01024e6 <command_test_kmalloc+0x7a>
			test_kmalloc_firstfit1();
f01024dc:	e8 f1 94 01 00       	call   f011b9d2 <test_kmalloc_firstfit1>
f01024e1:	e9 af 00 00 00       	jmp    f0102595 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f01024e6:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f01024ea:	0f 85 a5 00 00 00    	jne    f0102595 <command_test_kmalloc+0x129>
			test_kmalloc_firstfit2();
f01024f0:	e8 7f a8 01 00       	call   f011cd74 <test_kmalloc_firstfit2>
f01024f5:	e9 9b 00 00 00       	jmp    f0102595 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyBESTFIT())
f01024fa:	e8 7c e9 ff ff       	call   f0100e7b <isKHeapPlacementStrategyBESTFIT>
f01024ff:	84 c0                	test   %al,%al
f0102501:	74 44                	je     f0102547 <command_test_kmalloc+0xdb>
	{
		if (testNum == 0)
f0102503:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102507:	75 17                	jne    f0102520 <command_test_kmalloc+0xb4>
		{
			cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102509:	83 ec 0c             	sub    $0xc,%esp
f010250c:	68 bc 44 13 f0       	push   $0xf01344bc
f0102511:	e8 17 e7 ff ff       	call   f0100c2d <cprintf>
f0102516:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102519:	b8 00 00 00 00       	mov    $0x0,%eax
f010251e:	eb 7a                	jmp    f010259a <command_test_kmalloc+0x12e>
		}
		if (testNum == 1)
f0102520:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102524:	75 07                	jne    f010252d <command_test_kmalloc+0xc1>
			test_kmalloc();
f0102526:	e8 1e 46 01 00       	call   f0116b49 <test_kmalloc>
f010252b:	eb 68                	jmp    f0102595 <command_test_kmalloc+0x129>
		else if (testNum == 2)
f010252d:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102531:	75 07                	jne    f010253a <command_test_kmalloc+0xce>
			test_kmalloc_bestfit1();
f0102533:	e8 64 6f 01 00       	call   f011949c <test_kmalloc_bestfit1>
f0102538:	eb 5b                	jmp    f0102595 <command_test_kmalloc+0x129>
		else if (testNum == 3)
f010253a:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f010253e:	75 55                	jne    f0102595 <command_test_kmalloc+0x129>
			test_kmalloc_bestfit2();
f0102540:	e8 ad 81 01 00       	call   f011a6f2 <test_kmalloc_bestfit2>
f0102545:	eb 4e                	jmp    f0102595 <command_test_kmalloc+0x129>
	}
	else if (isKHeapPlacementStrategyNEXTFIT())
f0102547:	e8 44 e9 ff ff       	call   f0100e90 <isKHeapPlacementStrategyNEXTFIT>
f010254c:	84 c0                	test   %al,%al
f010254e:	74 37                	je     f0102587 <command_test_kmalloc+0x11b>
	{
		if (testNum == 0)
f0102550:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102554:	75 17                	jne    f010256d <command_test_kmalloc+0x101>
		{
			cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102556:	83 ec 0c             	sub    $0xc,%esp
f0102559:	68 0c 45 13 f0       	push   $0xf013450c
f010255e:	e8 ca e6 ff ff       	call   f0100c2d <cprintf>
f0102563:	83 c4 10             	add    $0x10,%esp
			return 0;
f0102566:	b8 00 00 00 00       	mov    $0x0,%eax
f010256b:	eb 2d                	jmp    f010259a <command_test_kmalloc+0x12e>
		}
		//Test cont. allocation
		if (testNum == 1)
f010256d:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102571:	75 07                	jne    f010257a <command_test_kmalloc+0x10e>
			test_kmalloc();
f0102573:	e8 d1 45 01 00       	call   f0116b49 <test_kmalloc>
f0102578:	eb 1b                	jmp    f0102595 <command_test_kmalloc+0x129>
		//Test nextfit strategy
		else if (testNum == 2)
f010257a:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f010257e:	75 15                	jne    f0102595 <command_test_kmalloc+0x129>
			test_kmalloc_nextfit();
f0102580:	e8 22 58 01 00       	call   f0117da7 <test_kmalloc_nextfit>
f0102585:	eb 0e                	jmp    f0102595 <command_test_kmalloc+0x129>

	}
	else if (isKHeapPlacementStrategyWORSTFIT())
f0102587:	e8 19 e9 ff ff       	call   f0100ea5 <isKHeapPlacementStrategyWORSTFIT>
f010258c:	84 c0                	test   %al,%al
f010258e:	74 05                	je     f0102595 <command_test_kmalloc+0x129>
		test_kmalloc_worstfit();
f0102590:	e8 74 b6 01 00       	call   f011dc09 <test_kmalloc_worstfit>
	return 0;
f0102595:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010259a:	c9                   	leave  
f010259b:	c3                   	ret    

f010259c <command_test_kfree>:
int command_test_kfree(int number_of_arguments, char **arguments)
{
f010259c:	55                   	push   %ebp
f010259d:	89 e5                	mov    %esp,%ebp
f010259f:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f01025a2:	e8 d4 e8 ff ff       	call   f0100e7b <isKHeapPlacementStrategyBESTFIT>
f01025a7:	84 c0                	test   %al,%al
f01025a9:	75 09                	jne    f01025b4 <command_test_kfree+0x18>
f01025ab:	e8 b6 e8 ff ff       	call   f0100e66 <isKHeapPlacementStrategyFIRSTFIT>
f01025b0:	84 c0                	test   %al,%al
f01025b2:	74 07                	je     f01025bb <command_test_kfree+0x1f>
	{
		test_kfree_bestfirstfit();
f01025b4:	e8 f2 ed 01 00       	call   f01213ab <test_kfree_bestfirstfit>
f01025b9:	eb 05                	jmp    f01025c0 <command_test_kfree+0x24>
	}
	else //NEXT & CONT
	{
		test_kfree();
f01025bb:	e8 99 cc 01 00       	call   f011f259 <test_kfree>
	}
	return 0;
f01025c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025c5:	c9                   	leave  
f01025c6:	c3                   	ret    

f01025c7 <command_test_kheap_phys_addr>:
int command_test_kheap_phys_addr(int number_of_arguments, char **arguments)
{
f01025c7:	55                   	push   %ebp
f01025c8:	89 e5                	mov    %esp,%ebp
f01025ca:	83 ec 08             	sub    $0x8,%esp
	test_kheap_phys_addr();
f01025cd:	e8 d5 07 02 00       	call   f0122da7 <test_kheap_phys_addr>
	return 0;
f01025d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025d7:	c9                   	leave  
f01025d8:	c3                   	ret    

f01025d9 <command_test_kheap_virt_addr>:
int command_test_kheap_virt_addr(int number_of_arguments, char **arguments)
{
f01025d9:	55                   	push   %ebp
f01025da:	89 e5                	mov    %esp,%ebp
f01025dc:	83 ec 08             	sub    $0x8,%esp
	test_kheap_virt_addr();
f01025df:	e8 93 1c 02 00       	call   f0124277 <test_kheap_virt_addr>
	return 0;
f01025e4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025e9:	c9                   	leave  
f01025ea:	c3                   	ret    

f01025eb <command_test_three_creation_functions>:
int command_test_three_creation_functions(int number_of_arguments, char **arguments)
{
f01025eb:	55                   	push   %ebp
f01025ec:	89 e5                	mov    %esp,%ebp
f01025ee:	83 ec 08             	sub    $0x8,%esp
	test_three_creation_functions();
f01025f1:	e8 5e 31 02 00       	call   f0125754 <test_three_creation_functions>
	return 0;
f01025f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01025fb:	c9                   	leave  
f01025fc:	c3                   	ret    

f01025fd <command_test_krealloc>:

int command_test_krealloc(int number_of_arguments, char **arguments) {
f01025fd:	55                   	push   %ebp
f01025fe:	89 e5                	mov    %esp,%ebp
f0102600:	83 ec 08             	sub    $0x8,%esp
	if (isKHeapPlacementStrategyNEXTFIT())
f0102603:	e8 88 e8 ff ff       	call   f0100e90 <isKHeapPlacementStrategyNEXTFIT>
f0102608:	84 c0                	test   %al,%al
f010260a:	74 07                	je     f0102613 <command_test_krealloc+0x16>
		test_krealloc();
f010260c:	e8 5a 8b 02 00       	call   f012b16b <test_krealloc>
f0102611:	eb 0e                	jmp    f0102621 <command_test_krealloc+0x24>
	else if (isKHeapPlacementStrategyBESTFIT())
f0102613:	e8 63 e8 ff ff       	call   f0100e7b <isKHeapPlacementStrategyBESTFIT>
f0102618:	84 c0                	test   %al,%al
f010261a:	74 05                	je     f0102621 <command_test_krealloc+0x24>
		test_krealloc_BF();
f010261c:	e8 fa aa 02 00       	call   f012d11b <test_krealloc_BF>
	return 0;
f0102621:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102626:	c9                   	leave  
f0102627:	c3                   	ret    

f0102628 <command_test_priority1>:

int command_test_priority1(int number_of_arguments, char **arguments)
{
f0102628:	55                   	push   %ebp
f0102629:	89 e5                	mov    %esp,%ebp
f010262b:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_higher();
f010262e:	e8 49 31 01 00       	call   f011577c <test_priority_normal_and_higher>
	return 0;
f0102633:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102638:	c9                   	leave  
f0102639:	c3                   	ret    

f010263a <command_test_priority2>:

int command_test_priority2(int number_of_arguments, char **arguments)
{
f010263a:	55                   	push   %ebp
f010263b:	89 e5                	mov    %esp,%ebp
f010263d:	83 ec 08             	sub    $0x8,%esp
	test_priority_normal_and_lower();
f0102640:	e8 11 3b 01 00       	call   f0116156 <test_priority_normal_and_lower>
	return 0;
f0102645:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010264a:	c9                   	leave  
f010264b:	c3                   	ret    

f010264c <command_test_kfreeall>:

int command_test_kfreeall(int number_of_arguments, char **arguments)
{
f010264c:	55                   	push   %ebp
f010264d:	89 e5                	mov    %esp,%ebp
f010264f:	83 ec 08             	sub    $0x8,%esp
	test_kfreeall();
f0102652:	e8 37 33 02 00       	call   f012598e <test_kfreeall>
	return 0;
f0102657:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010265c:	c9                   	leave  
f010265d:	c3                   	ret    

f010265e <command_test_kexpand>:

int command_test_kexpand(int number_of_arguments, char **arguments)
{
f010265e:	55                   	push   %ebp
f010265f:	89 e5                	mov    %esp,%ebp
f0102661:	83 ec 08             	sub    $0x8,%esp
	test_kexpand();
f0102664:	e8 11 4a 02 00       	call   f012707a <test_kexpand>
	return 0;
f0102669:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010266e:	c9                   	leave  
f010266f:	c3                   	ret    

f0102670 <command_test_kshrink>:

int command_test_kshrink(int number_of_arguments, char **arguments)
{
f0102670:	55                   	push   %ebp
f0102671:	89 e5                	mov    %esp,%ebp
f0102673:	83 ec 08             	sub    $0x8,%esp
	test_kshrink();
f0102676:	e8 80 57 02 00       	call   f0127dfb <test_kshrink>
	return 0;
f010267b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102680:	c9                   	leave  
f0102681:	c3                   	ret    

f0102682 <command_test_kfreelast>:

int command_test_kfreelast(int number_of_arguments, char **arguments)
{
f0102682:	55                   	push   %ebp
f0102683:	89 e5                	mov    %esp,%ebp
f0102685:	83 ec 08             	sub    $0x8,%esp
	test_kfreelast();
f0102688:	e8 5b 66 02 00       	call   f0128ce8 <test_kfreelast>
	return 0;
f010268d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102692:	c9                   	leave  
f0102693:	c3                   	ret    

f0102694 <command_test_sc_MLFQ>:

int command_test_sc_MLFQ(int number_of_arguments, char **arguments)
{
f0102694:	55                   	push   %ebp
f0102695:	89 e5                	mov    %esp,%ebp
f0102697:	83 ec 18             	sub    $0x18,%esp
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
f010269a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010269d:	83 c0 04             	add    $0x4,%eax
f01026a0:	8b 00                	mov    (%eax),%eax
f01026a2:	83 ec 04             	sub    $0x4,%esp
f01026a5:	6a 0a                	push   $0xa
f01026a7:	6a 00                	push   $0x0
f01026a9:	50                   	push   %eax
f01026aa:	e8 ee e0 02 00       	call   f013079d <strtol>
f01026af:	83 c4 10             	add    $0x10,%esp
f01026b2:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int cnt = 0 ;
f01026b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int firstTime = 1;
f01026bc:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f01026c3:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f01026c8:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01026cb:	eb 3d                	jmp    f010270a <command_test_sc_MLFQ+0x76>
	{
		if (strcmp(e->prog_name, "tmlfq_2") == 0)
f01026cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01026d0:	05 18 da 01 00       	add    $0x1da18,%eax
f01026d5:	83 ec 08             	sub    $0x8,%esp
f01026d8:	68 5a 45 13 f0       	push   $0xf013455a
f01026dd:	50                   	push   %eax
f01026de:	e8 66 de 02 00       	call   f0130549 <strcmp>
f01026e3:	83 c4 10             	add    $0x10,%esp
f01026e6:	85 c0                	test   %eax,%eax
f01026e8:	75 12                	jne    f01026fc <command_test_sc_MLFQ+0x68>
		{
			if (firstTime)
f01026ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01026ee:	74 07                	je     f01026f7 <command_test_sc_MLFQ+0x63>
				firstTime = 0;
f01026f0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
			cnt++ ;
f01026f7:	ff 45 f4             	incl   -0xc(%ebp)
f01026fa:	eb 06                	jmp    f0102702 <command_test_sc_MLFQ+0x6e>
		}
		else if (!firstTime)
f01026fc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102700:	74 31                	je     f0102733 <command_test_sc_MLFQ+0x9f>
{
	int numOfSlave2 = strtol(arguments[1], NULL, 10);
	int cnt = 0 ;
	int firstTime = 1;
	struct Env *e ;
	LIST_FOREACH(e, &env_exit_queue)
f0102702:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f0102707:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010270a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010270e:	74 08                	je     f0102718 <command_test_sc_MLFQ+0x84>
f0102710:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0102713:	8b 40 44             	mov    0x44(%eax),%eax
f0102716:	eb 05                	jmp    f010271d <command_test_sc_MLFQ+0x89>
f0102718:	b8 00 00 00 00       	mov    $0x0,%eax
f010271d:	a3 6c 60 6e f0       	mov    %eax,0xf06e606c
f0102722:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f0102727:	85 c0                	test   %eax,%eax
f0102729:	75 a2                	jne    f01026cd <command_test_sc_MLFQ+0x39>
f010272b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f010272f:	75 9c                	jne    f01026cd <command_test_sc_MLFQ+0x39>
f0102731:	eb 01                	jmp    f0102734 <command_test_sc_MLFQ+0xa0>
			if (firstTime)
				firstTime = 0;
			cnt++ ;
		}
		else if (!firstTime)
			break;
f0102733:	90                   	nop
	}
	if(cnt == numOfSlave2)
f0102734:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0102737:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f010273a:	75 12                	jne    f010274e <command_test_sc_MLFQ+0xba>
	{
		cprintf("Congratulations... MLFQScenario# completed successfully\n");
f010273c:	83 ec 0c             	sub    $0xc,%esp
f010273f:	68 64 45 13 f0       	push   $0xf0134564
f0102744:	e8 e4 e4 ff ff       	call   f0100c2d <cprintf>
f0102749:	83 c4 10             	add    $0x10,%esp
f010274c:	eb 17                	jmp    f0102765 <command_test_sc_MLFQ+0xd1>
	}
	else
	{
		panic("MLFQScenario# failed\n");
f010274e:	83 ec 04             	sub    $0x4,%esp
f0102751:	68 9d 45 13 f0       	push   $0xf013459d
f0102756:	68 8b 04 00 00       	push   $0x48b
f010275b:	68 f9 37 13 f0       	push   $0xf01337f9
f0102760:	e8 41 da ff ff       	call   f01001a6 <_panic>
	}
	return 0;
f0102765:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010276a:	c9                   	leave  
f010276b:	c3                   	ret    

f010276c <command_test_autocomplete>:


/*2022*/
int command_test_autocomplete(int number_of_arguments, char **arguments)
{
f010276c:	55                   	push   %ebp
f010276d:	89 e5                	mov    %esp,%ebp
f010276f:	83 ec 18             	sub    $0x18,%esp
	int x = TestAutoCompleteCommand();
f0102772:	e8 b6 d9 00 00       	call   f011012d <TestAutoCompleteCommand>
f0102777:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return 0;
f010277a:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010277f:	c9                   	leave  
f0102780:	c3                   	ret    

f0102781 <command_test_lists>:
int command_test_lists(int number_of_arguments, char **arguments)
{
f0102781:	55                   	push   %ebp
f0102782:	89 e5                	mov    %esp,%ebp
f0102784:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102787:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010278b:	74 1a                	je     f01027a7 <command_test_lists+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstlsts <testname>\n") ;
f010278d:	83 ec 0c             	sub    $0xc,%esp
f0102790:	68 b4 45 13 f0       	push   $0xf01345b4
f0102795:	e8 93 e4 ff ff       	call   f0100c2d <cprintf>
f010279a:	83 c4 10             	add    $0x10,%esp
		return 0;
f010279d:	b8 00 00 00 00       	mov    $0x0,%eax
f01027a2:	e9 82 01 00 00       	jmp    f0102929 <command_test_lists+0x1a8>
	}
	// Test 1 Example for initialize_MemBlocksList: tstlsts init 5
	if(strcmp(arguments[1], "init") == 0)
f01027a7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027aa:	83 c0 04             	add    $0x4,%eax
f01027ad:	8b 00                	mov    (%eax),%eax
f01027af:	83 ec 08             	sub    $0x8,%esp
f01027b2:	68 ec 45 13 f0       	push   $0xf01345ec
f01027b7:	50                   	push   %eax
f01027b8:	e8 8c dd 02 00       	call   f0130549 <strcmp>
f01027bd:	83 c4 10             	add    $0x10,%esp
f01027c0:	85 c0                	test   %eax,%eax
f01027c2:	75 0a                	jne    f01027ce <command_test_lists+0x4d>
	{
		test_initialize_MemBlocksList();
f01027c4:	e8 0e af 00 00       	call   f010d6d7 <test_initialize_MemBlocksList>
f01027c9:	e9 56 01 00 00       	jmp    f0102924 <command_test_lists+0x1a3>
	}
	// Test 2 Example for insert_sorted: tstlsts insrt
	else if(strcmp(arguments[1], "insrt") == 0)
f01027ce:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027d1:	83 c0 04             	add    $0x4,%eax
f01027d4:	8b 00                	mov    (%eax),%eax
f01027d6:	83 ec 08             	sub    $0x8,%esp
f01027d9:	68 f1 45 13 f0       	push   $0xf01345f1
f01027de:	50                   	push   %eax
f01027df:	e8 65 dd 02 00       	call   f0130549 <strcmp>
f01027e4:	83 c4 10             	add    $0x10,%esp
f01027e7:	85 c0                	test   %eax,%eax
f01027e9:	75 0a                	jne    f01027f5 <command_test_lists+0x74>
	{
		test_insert_sorted_allocList();
f01027eb:	e8 fb af 00 00       	call   f010d7eb <test_insert_sorted_allocList>
f01027f0:	e9 2f 01 00 00       	jmp    f0102924 <command_test_lists+0x1a3>
	}
	// Test 3 Example for find_block: tstlsts find
	else if(strcmp(arguments[1], "find") == 0)
f01027f5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01027f8:	83 c0 04             	add    $0x4,%eax
f01027fb:	8b 00                	mov    (%eax),%eax
f01027fd:	83 ec 08             	sub    $0x8,%esp
f0102800:	68 f7 45 13 f0       	push   $0xf01345f7
f0102805:	50                   	push   %eax
f0102806:	e8 3e dd 02 00       	call   f0130549 <strcmp>
f010280b:	83 c4 10             	add    $0x10,%esp
f010280e:	85 c0                	test   %eax,%eax
f0102810:	75 0a                	jne    f010281c <command_test_lists+0x9b>
	{
		test_find_block();
f0102812:	e8 92 b4 00 00       	call   f010dca9 <test_find_block>
f0102817:	e9 08 01 00 00       	jmp    f0102924 <command_test_lists+0x1a3>
	}
	// Test 4 Example for alloc_block_FF: tstlsts FF
	else if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f010281c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010281f:	83 c0 04             	add    $0x4,%eax
f0102822:	8b 00                	mov    (%eax),%eax
f0102824:	83 ec 08             	sub    $0x8,%esp
f0102827:	68 fc 45 13 f0       	push   $0xf01345fc
f010282c:	50                   	push   %eax
f010282d:	e8 17 dd 02 00       	call   f0130549 <strcmp>
f0102832:	83 c4 10             	add    $0x10,%esp
f0102835:	85 c0                	test   %eax,%eax
f0102837:	74 1d                	je     f0102856 <command_test_lists+0xd5>
f0102839:	8b 45 0c             	mov    0xc(%ebp),%eax
f010283c:	83 c0 04             	add    $0x4,%eax
f010283f:	8b 00                	mov    (%eax),%eax
f0102841:	83 ec 08             	sub    $0x8,%esp
f0102844:	68 ff 45 13 f0       	push   $0xf01345ff
f0102849:	50                   	push   %eax
f010284a:	e8 fa dc 02 00       	call   f0130549 <strcmp>
f010284f:	83 c4 10             	add    $0x10,%esp
f0102852:	85 c0                	test   %eax,%eax
f0102854:	75 0a                	jne    f0102860 <command_test_lists+0xdf>
	{
		test_alloc_block_FF();
f0102856:	e8 a9 b7 00 00       	call   f010e004 <test_alloc_block_FF>
f010285b:	e9 c4 00 00 00       	jmp    f0102924 <command_test_lists+0x1a3>
	}
	// Test 5 Example for alloc_block_BF: tstlsts BF
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102860:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102863:	83 c0 04             	add    $0x4,%eax
f0102866:	8b 00                	mov    (%eax),%eax
f0102868:	83 ec 08             	sub    $0x8,%esp
f010286b:	68 02 46 13 f0       	push   $0xf0134602
f0102870:	50                   	push   %eax
f0102871:	e8 d3 dc 02 00       	call   f0130549 <strcmp>
f0102876:	83 c4 10             	add    $0x10,%esp
f0102879:	85 c0                	test   %eax,%eax
f010287b:	74 1d                	je     f010289a <command_test_lists+0x119>
f010287d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102880:	83 c0 04             	add    $0x4,%eax
f0102883:	8b 00                	mov    (%eax),%eax
f0102885:	83 ec 08             	sub    $0x8,%esp
f0102888:	68 05 46 13 f0       	push   $0xf0134605
f010288d:	50                   	push   %eax
f010288e:	e8 b6 dc 02 00       	call   f0130549 <strcmp>
f0102893:	83 c4 10             	add    $0x10,%esp
f0102896:	85 c0                	test   %eax,%eax
f0102898:	75 0a                	jne    f01028a4 <command_test_lists+0x123>
	{
		test_alloc_block_BF();
f010289a:	e8 e3 bb 00 00       	call   f010e482 <test_alloc_block_BF>
f010289f:	e9 80 00 00 00       	jmp    f0102924 <command_test_lists+0x1a3>
	}
	// Test 6 Example for alloc_block_NF: tstlsts NF
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f01028a4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028a7:	83 c0 04             	add    $0x4,%eax
f01028aa:	8b 00                	mov    (%eax),%eax
f01028ac:	83 ec 08             	sub    $0x8,%esp
f01028af:	68 08 46 13 f0       	push   $0xf0134608
f01028b4:	50                   	push   %eax
f01028b5:	e8 8f dc 02 00       	call   f0130549 <strcmp>
f01028ba:	83 c4 10             	add    $0x10,%esp
f01028bd:	85 c0                	test   %eax,%eax
f01028bf:	74 1d                	je     f01028de <command_test_lists+0x15d>
f01028c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028c4:	83 c0 04             	add    $0x4,%eax
f01028c7:	8b 00                	mov    (%eax),%eax
f01028c9:	83 ec 08             	sub    $0x8,%esp
f01028cc:	68 0b 46 13 f0       	push   $0xf013460b
f01028d1:	50                   	push   %eax
f01028d2:	e8 72 dc 02 00       	call   f0130549 <strcmp>
f01028d7:	83 c4 10             	add    $0x10,%esp
f01028da:	85 c0                	test   %eax,%eax
f01028dc:	75 07                	jne    f01028e5 <command_test_lists+0x164>
	{
		test_alloc_block_NF();
f01028de:	e8 26 c2 00 00       	call   f010eb09 <test_alloc_block_NF>
f01028e3:	eb 3f                	jmp    f0102924 <command_test_lists+0x1a3>
	}
	// Test 7 Example for alloc_block_NF: tstlsts merge
	else if(strcmp(arguments[1], "MERGE") == 0 || strcmp(arguments[1], "merge") == 0)
f01028e5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01028e8:	83 c0 04             	add    $0x4,%eax
f01028eb:	8b 00                	mov    (%eax),%eax
f01028ed:	83 ec 08             	sub    $0x8,%esp
f01028f0:	68 0e 46 13 f0       	push   $0xf013460e
f01028f5:	50                   	push   %eax
f01028f6:	e8 4e dc 02 00       	call   f0130549 <strcmp>
f01028fb:	83 c4 10             	add    $0x10,%esp
f01028fe:	85 c0                	test   %eax,%eax
f0102900:	74 1d                	je     f010291f <command_test_lists+0x19e>
f0102902:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102905:	83 c0 04             	add    $0x4,%eax
f0102908:	8b 00                	mov    (%eax),%eax
f010290a:	83 ec 08             	sub    $0x8,%esp
f010290d:	68 14 46 13 f0       	push   $0xf0134614
f0102912:	50                   	push   %eax
f0102913:	e8 31 dc 02 00       	call   f0130549 <strcmp>
f0102918:	83 c4 10             	add    $0x10,%esp
f010291b:	85 c0                	test   %eax,%eax
f010291d:	75 05                	jne    f0102924 <command_test_lists+0x1a3>
	{
		test_insert_sorted_with_merge_freeList();
f010291f:	e8 73 ca 00 00       	call   f010f397 <test_insert_sorted_with_merge_freeList>
	}
	return 0;
f0102924:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102929:	c9                   	leave  
f010292a:	c3                   	ret    

f010292b <command_test_chunks>:

int command_test_chunks(int number_of_arguments, char **arguments)
{
f010292b:	55                   	push   %ebp
f010292c:	89 e5                	mov    %esp,%ebp
f010292e:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102931:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102935:	74 1a                	je     f0102951 <command_test_chunks+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstchunk <testname>\n") ;
f0102937:	83 ec 0c             	sub    $0xc,%esp
f010293a:	68 1c 46 13 f0       	push   $0xf013461c
f010293f:	e8 e9 e2 ff ff       	call   f0100c2d <cprintf>
f0102944:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102947:	b8 00 00 00 00       	mov    $0x0,%eax
f010294c:	e9 e1 00 00 00       	jmp    f0102a32 <command_test_chunks+0x107>
	}
	// CUT-PASTE Test
	if(strcmp(arguments[1], "cutpaste") == 0)
f0102951:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102954:	83 c0 04             	add    $0x4,%eax
f0102957:	8b 00                	mov    (%eax),%eax
f0102959:	83 ec 08             	sub    $0x8,%esp
f010295c:	68 55 46 13 f0       	push   $0xf0134655
f0102961:	50                   	push   %eax
f0102962:	e8 e2 db 02 00       	call   f0130549 <strcmp>
f0102967:	83 c4 10             	add    $0x10,%esp
f010296a:	85 c0                	test   %eax,%eax
f010296c:	75 0a                	jne    f0102978 <command_test_chunks+0x4d>
	{
		test_cut_paste_pages();
f010296e:	e8 4e e2 00 00       	call   f0110bc1 <test_cut_paste_pages>
f0102973:	e9 b5 00 00 00       	jmp    f0102a2d <command_test_chunks+0x102>
	}
	// COPY-PASTE Test
	else if(strcmp(arguments[1], "copypaste") == 0)
f0102978:	8b 45 0c             	mov    0xc(%ebp),%eax
f010297b:	83 c0 04             	add    $0x4,%eax
f010297e:	8b 00                	mov    (%eax),%eax
f0102980:	83 ec 08             	sub    $0x8,%esp
f0102983:	68 5e 46 13 f0       	push   $0xf013465e
f0102988:	50                   	push   %eax
f0102989:	e8 bb db 02 00       	call   f0130549 <strcmp>
f010298e:	83 c4 10             	add    $0x10,%esp
f0102991:	85 c0                	test   %eax,%eax
f0102993:	75 0a                	jne    f010299f <command_test_chunks+0x74>
	{
		test_copy_paste_chunk();
f0102995:	e8 72 ec 00 00       	call   f011160c <test_copy_paste_chunk>
f010299a:	e9 8e 00 00 00       	jmp    f0102a2d <command_test_chunks+0x102>
	}
	// SHARE Test
	else if(strcmp(arguments[1], "share") == 0)
f010299f:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029a2:	83 c0 04             	add    $0x4,%eax
f01029a5:	8b 00                	mov    (%eax),%eax
f01029a7:	83 ec 08             	sub    $0x8,%esp
f01029aa:	68 68 46 13 f0       	push   $0xf0134668
f01029af:	50                   	push   %eax
f01029b0:	e8 94 db 02 00       	call   f0130549 <strcmp>
f01029b5:	83 c4 10             	add    $0x10,%esp
f01029b8:	85 c0                	test   %eax,%eax
f01029ba:	75 07                	jne    f01029c3 <command_test_chunks+0x98>
	{
		test_share_chunk();
f01029bc:	e8 49 fd 00 00       	call   f011270a <test_share_chunk>
f01029c1:	eb 6a                	jmp    f0102a2d <command_test_chunks+0x102>
	}
	// ALLOCATE Test
	else if(strcmp(arguments[1], "allocate") == 0)
f01029c3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029c6:	83 c0 04             	add    $0x4,%eax
f01029c9:	8b 00                	mov    (%eax),%eax
f01029cb:	83 ec 08             	sub    $0x8,%esp
f01029ce:	68 6e 46 13 f0       	push   $0xf013466e
f01029d3:	50                   	push   %eax
f01029d4:	e8 70 db 02 00       	call   f0130549 <strcmp>
f01029d9:	83 c4 10             	add    $0x10,%esp
f01029dc:	85 c0                	test   %eax,%eax
f01029de:	75 07                	jne    f01029e7 <command_test_chunks+0xbc>
	{
		test_allocate_chunk();
f01029e0:	e8 4d 07 01 00       	call   f0113132 <test_allocate_chunk>
f01029e5:	eb 46                	jmp    f0102a2d <command_test_chunks+0x102>
	}
	// REQUIRED SPACE Test
	else if(strcmp(arguments[1], "required_space") == 0)
f01029e7:	8b 45 0c             	mov    0xc(%ebp),%eax
f01029ea:	83 c0 04             	add    $0x4,%eax
f01029ed:	8b 00                	mov    (%eax),%eax
f01029ef:	83 ec 08             	sub    $0x8,%esp
f01029f2:	68 77 46 13 f0       	push   $0xf0134677
f01029f7:	50                   	push   %eax
f01029f8:	e8 4c db 02 00       	call   f0130549 <strcmp>
f01029fd:	83 c4 10             	add    $0x10,%esp
f0102a00:	85 c0                	test   %eax,%eax
f0102a02:	75 07                	jne    f0102a0b <command_test_chunks+0xe0>
	{
		test_calculate_required_frames();
f0102a04:	e8 d8 0f 01 00       	call   f01139e1 <test_calculate_required_frames>
f0102a09:	eb 22                	jmp    f0102a2d <command_test_chunks+0x102>
	}
	// ALLOCATED SPACE Test
	else if(strcmp(arguments[1], "allocated_space") == 0)
f0102a0b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a0e:	83 c0 04             	add    $0x4,%eax
f0102a11:	8b 00                	mov    (%eax),%eax
f0102a13:	83 ec 08             	sub    $0x8,%esp
f0102a16:	68 86 46 13 f0       	push   $0xf0134686
f0102a1b:	50                   	push   %eax
f0102a1c:	e8 28 db 02 00       	call   f0130549 <strcmp>
f0102a21:	83 c4 10             	add    $0x10,%esp
f0102a24:	85 c0                	test   %eax,%eax
f0102a26:	75 05                	jne    f0102a2d <command_test_chunks+0x102>
	{
		test_calculate_allocated_space();
f0102a28:	e8 28 18 01 00       	call   f0114255 <test_calculate_allocated_space>
	}
	return 0;
f0102a2d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102a32:	c9                   	leave  
f0102a33:	c3                   	ret    

f0102a34 <command_test_paging_manipulation>:

int command_test_paging_manipulation(int number_of_arguments, char **arguments)
{
f0102a34:	55                   	push   %ebp
f0102a35:	89 e5                	mov    %esp,%ebp
f0102a37:	83 ec 08             	sub    $0x8,%esp
	if (number_of_arguments != 2)
f0102a3a:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f0102a3e:	74 1a                	je     f0102a5a <command_test_paging_manipulation+0x26>
	{
		cprintf("Invalid number of arguments! USAGE: tstpg <testname>\n") ;
f0102a40:	83 ec 0c             	sub    $0xc,%esp
f0102a43:	68 98 46 13 f0       	push   $0xf0134698
f0102a48:	e8 e0 e1 ff ff       	call   f0100c2d <cprintf>
f0102a4d:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102a50:	b8 00 00 00 00       	mov    $0x0,%eax
f0102a55:	e9 e1 00 00 00       	jmp    f0102b3b <command_test_paging_manipulation+0x107>
	}
	// Test 1.1-Set/Clear permissions: tstpg scperm1
	if(strcmp(arguments[1], "scperm1") == 0)
f0102a5a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a5d:	83 c0 04             	add    $0x4,%eax
f0102a60:	8b 00                	mov    (%eax),%eax
f0102a62:	83 ec 08             	sub    $0x8,%esp
f0102a65:	68 ce 46 13 f0       	push   $0xf01346ce
f0102a6a:	50                   	push   %eax
f0102a6b:	e8 d9 da 02 00       	call   f0130549 <strcmp>
f0102a70:	83 c4 10             	add    $0x10,%esp
f0102a73:	85 c0                	test   %eax,%eax
f0102a75:	75 0a                	jne    f0102a81 <command_test_paging_manipulation+0x4d>
	{
		test_pt_set_page_permissions();
f0102a77:	e8 36 d8 00 00       	call   f01102b2 <test_pt_set_page_permissions>
f0102a7c:	e9 b5 00 00 00       	jmp    f0102b36 <command_test_paging_manipulation+0x102>
	}
	// Test 1.2-Set/Clear permissions: tstpg scperm2
	else if(strcmp(arguments[1], "scperm2") == 0)
f0102a81:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102a84:	83 c0 04             	add    $0x4,%eax
f0102a87:	8b 00                	mov    (%eax),%eax
f0102a89:	83 ec 08             	sub    $0x8,%esp
f0102a8c:	68 d6 46 13 f0       	push   $0xf01346d6
f0102a91:	50                   	push   %eax
f0102a92:	e8 b2 da 02 00       	call   f0130549 <strcmp>
f0102a97:	83 c4 10             	add    $0x10,%esp
f0102a9a:	85 c0                	test   %eax,%eax
f0102a9c:	75 0a                	jne    f0102aa8 <command_test_paging_manipulation+0x74>
	{
		test_pt_set_page_permissions_invalid_va();
f0102a9e:	e8 72 da 00 00       	call   f0110515 <test_pt_set_page_permissions_invalid_va>
f0102aa3:	e9 8e 00 00 00       	jmp    f0102b36 <command_test_paging_manipulation+0x102>
	}
	// Test 2-Get permissions: tstpg getperm
	else if(strcmp(arguments[1], "getperm") == 0)
f0102aa8:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102aab:	83 c0 04             	add    $0x4,%eax
f0102aae:	8b 00                	mov    (%eax),%eax
f0102ab0:	83 ec 08             	sub    $0x8,%esp
f0102ab3:	68 de 46 13 f0       	push   $0xf01346de
f0102ab8:	50                   	push   %eax
f0102ab9:	e8 8b da 02 00       	call   f0130549 <strcmp>
f0102abe:	83 c4 10             	add    $0x10,%esp
f0102ac1:	85 c0                	test   %eax,%eax
f0102ac3:	75 07                	jne    f0102acc <command_test_paging_manipulation+0x98>
	{
		test_pt_get_page_permissions();
f0102ac5:	e8 94 da 00 00       	call   f011055e <test_pt_get_page_permissions>
f0102aca:	eb 6a                	jmp    f0102b36 <command_test_paging_manipulation+0x102>
	}
	// Test 3.1-Clear entry: tstpg clear1
	else if(strcmp(arguments[1], "clear1") == 0)
f0102acc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102acf:	83 c0 04             	add    $0x4,%eax
f0102ad2:	8b 00                	mov    (%eax),%eax
f0102ad4:	83 ec 08             	sub    $0x8,%esp
f0102ad7:	68 e6 46 13 f0       	push   $0xf01346e6
f0102adc:	50                   	push   %eax
f0102add:	e8 67 da 02 00       	call   f0130549 <strcmp>
f0102ae2:	83 c4 10             	add    $0x10,%esp
f0102ae5:	85 c0                	test   %eax,%eax
f0102ae7:	75 07                	jne    f0102af0 <command_test_paging_manipulation+0xbc>
	{
		test_pt_clear_page_table_entry();
f0102ae9:	e8 b4 db 00 00       	call   f01106a2 <test_pt_clear_page_table_entry>
f0102aee:	eb 46                	jmp    f0102b36 <command_test_paging_manipulation+0x102>
	}
	// Test 3.2-Clear entry: tstpg clear2
	else if(strcmp(arguments[1], "clear2") == 0)
f0102af0:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102af3:	83 c0 04             	add    $0x4,%eax
f0102af6:	8b 00                	mov    (%eax),%eax
f0102af8:	83 ec 08             	sub    $0x8,%esp
f0102afb:	68 ed 46 13 f0       	push   $0xf01346ed
f0102b00:	50                   	push   %eax
f0102b01:	e8 43 da 02 00       	call   f0130549 <strcmp>
f0102b06:	83 c4 10             	add    $0x10,%esp
f0102b09:	85 c0                	test   %eax,%eax
f0102b0b:	75 07                	jne    f0102b14 <command_test_paging_manipulation+0xe0>
	{
		test_pt_clear_page_table_entry_invalid_va();
f0102b0d:	e8 e9 dc 00 00       	call   f01107fb <test_pt_clear_page_table_entry_invalid_va>
f0102b12:	eb 22                	jmp    f0102b36 <command_test_paging_manipulation+0x102>
	}
	// Test 4-Convert virtual to physical: tstpg v2p
	else if(strcmp(arguments[1], "v2p") == 0)
f0102b14:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b17:	83 c0 04             	add    $0x4,%eax
f0102b1a:	8b 00                	mov    (%eax),%eax
f0102b1c:	83 ec 08             	sub    $0x8,%esp
f0102b1f:	68 f4 46 13 f0       	push   $0xf01346f4
f0102b24:	50                   	push   %eax
f0102b25:	e8 1f da 02 00       	call   f0130549 <strcmp>
f0102b2a:	83 c4 10             	add    $0x10,%esp
f0102b2d:	85 c0                	test   %eax,%eax
f0102b2f:	75 05                	jne    f0102b36 <command_test_paging_manipulation+0x102>
	{
		test_virtual_to_physical();
f0102b31:	e8 fd dc 00 00       	call   f0110833 <test_virtual_to_physical>
	}
	return 0;
f0102b36:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102b3b:	c9                   	leave  
f0102b3c:	c3                   	ret    

f0102b3d <command_test_kheap>:

int command_test_kheap(int number_of_arguments, char **arguments)
{
f0102b3d:	55                   	push   %ebp
f0102b3e:	89 e5                	mov    %esp,%ebp
f0102b40:	83 ec 18             	sub    $0x18,%esp
	// Parameters Validation Checking
	if (strcmp(arguments[2], "kmalloc") == 0 && number_of_arguments != 4)
f0102b43:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b46:	83 c0 08             	add    $0x8,%eax
f0102b49:	8b 00                	mov    (%eax),%eax
f0102b4b:	83 ec 08             	sub    $0x8,%esp
f0102b4e:	68 f8 46 13 f0       	push   $0xf01346f8
f0102b53:	50                   	push   %eax
f0102b54:	e8 f0 d9 02 00       	call   f0130549 <strcmp>
f0102b59:	83 c4 10             	add    $0x10,%esp
f0102b5c:	85 c0                	test   %eax,%eax
f0102b5e:	75 20                	jne    f0102b80 <command_test_kheap+0x43>
f0102b60:	83 7d 08 04          	cmpl   $0x4,0x8(%ebp)
f0102b64:	74 1a                	je     f0102b80 <command_test_kheap+0x43>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> kmalloc <1 or 2 or 3>\n") ;
f0102b66:	83 ec 0c             	sub    $0xc,%esp
f0102b69:	68 00 47 13 f0       	push   $0xf0134700
f0102b6e:	e8 ba e0 ff ff       	call   f0100c2d <cprintf>
f0102b73:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102b76:	b8 00 00 00 00       	mov    $0x0,%eax
f0102b7b:	e9 33 03 00 00       	jmp    f0102eb3 <command_test_kheap+0x376>
	}
	if (strcmp(arguments[2], "kmalloc") != 0 && number_of_arguments != 3)
f0102b80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102b83:	83 c0 08             	add    $0x8,%eax
f0102b86:	8b 00                	mov    (%eax),%eax
f0102b88:	83 ec 08             	sub    $0x8,%esp
f0102b8b:	68 f8 46 13 f0       	push   $0xf01346f8
f0102b90:	50                   	push   %eax
f0102b91:	e8 b3 d9 02 00       	call   f0130549 <strcmp>
f0102b96:	83 c4 10             	add    $0x10,%esp
f0102b99:	85 c0                	test   %eax,%eax
f0102b9b:	74 20                	je     f0102bbd <command_test_kheap+0x80>
f0102b9d:	83 7d 08 03          	cmpl   $0x3,0x8(%ebp)
f0102ba1:	74 1a                	je     f0102bbd <command_test_kheap+0x80>
	{
		cprintf("Invalid number of arguments! USAGE: tstkheap <Strategy> <testname>\n") ;
f0102ba3:	83 ec 0c             	sub    $0xc,%esp
f0102ba6:	68 50 47 13 f0       	push   $0xf0134750
f0102bab:	e8 7d e0 ff ff       	call   f0100c2d <cprintf>
f0102bb0:	83 c4 10             	add    $0x10,%esp
		return 0;
f0102bb3:	b8 00 00 00 00       	mov    $0x0,%eax
f0102bb8:	e9 f6 02 00 00       	jmp    f0102eb3 <command_test_kheap+0x376>
	}

	// Setting Strategy
	if(strcmp(arguments[1], "FF") == 0 || strcmp(arguments[1], "ff") == 0)
f0102bbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bc0:	83 c0 04             	add    $0x4,%eax
f0102bc3:	8b 00                	mov    (%eax),%eax
f0102bc5:	83 ec 08             	sub    $0x8,%esp
f0102bc8:	68 fc 45 13 f0       	push   $0xf01345fc
f0102bcd:	50                   	push   %eax
f0102bce:	e8 76 d9 02 00       	call   f0130549 <strcmp>
f0102bd3:	83 c4 10             	add    $0x10,%esp
f0102bd6:	85 c0                	test   %eax,%eax
f0102bd8:	74 1d                	je     f0102bf7 <command_test_kheap+0xba>
f0102bda:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102bdd:	83 c0 04             	add    $0x4,%eax
f0102be0:	8b 00                	mov    (%eax),%eax
f0102be2:	83 ec 08             	sub    $0x8,%esp
f0102be5:	68 ff 45 13 f0       	push   $0xf01345ff
f0102bea:	50                   	push   %eax
f0102beb:	e8 59 d9 02 00       	call   f0130549 <strcmp>
f0102bf0:	83 c4 10             	add    $0x10,%esp
f0102bf3:	85 c0                	test   %eax,%eax
f0102bf5:	75 1a                	jne    f0102c11 <command_test_kheap+0xd4>
	{
		setKHeapPlacementStrategyFIRSTFIT();
f0102bf7:	e8 16 e2 ff ff       	call   f0100e12 <setKHeapPlacementStrategyFIRSTFIT>
		cprintf("Kernel Heap placement strategy is FIRST FIT\n");
f0102bfc:	83 ec 0c             	sub    $0xc,%esp
f0102bff:	68 98 41 13 f0       	push   $0xf0134198
f0102c04:	e8 24 e0 ff ff       	call   f0100c2d <cprintf>
f0102c09:	83 c4 10             	add    $0x10,%esp
f0102c0c:	e9 a0 00 00 00       	jmp    f0102cb1 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "BF") == 0 || strcmp(arguments[1], "bf") == 0)
f0102c11:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c14:	83 c0 04             	add    $0x4,%eax
f0102c17:	8b 00                	mov    (%eax),%eax
f0102c19:	83 ec 08             	sub    $0x8,%esp
f0102c1c:	68 02 46 13 f0       	push   $0xf0134602
f0102c21:	50                   	push   %eax
f0102c22:	e8 22 d9 02 00       	call   f0130549 <strcmp>
f0102c27:	83 c4 10             	add    $0x10,%esp
f0102c2a:	85 c0                	test   %eax,%eax
f0102c2c:	74 1d                	je     f0102c4b <command_test_kheap+0x10e>
f0102c2e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c31:	83 c0 04             	add    $0x4,%eax
f0102c34:	8b 00                	mov    (%eax),%eax
f0102c36:	83 ec 08             	sub    $0x8,%esp
f0102c39:	68 05 46 13 f0       	push   $0xf0134605
f0102c3e:	50                   	push   %eax
f0102c3f:	e8 05 d9 02 00       	call   f0130549 <strcmp>
f0102c44:	83 c4 10             	add    $0x10,%esp
f0102c47:	85 c0                	test   %eax,%eax
f0102c49:	75 17                	jne    f0102c62 <command_test_kheap+0x125>
	{
		setKHeapPlacementStrategyBESTFIT();
f0102c4b:	e8 d2 e1 ff ff       	call   f0100e22 <setKHeapPlacementStrategyBESTFIT>
		cprintf("Kernel Heap placement strategy is BEST FIT\n");
f0102c50:	83 ec 0c             	sub    $0xc,%esp
f0102c53:	68 c8 41 13 f0       	push   $0xf01341c8
f0102c58:	e8 d0 df ff ff       	call   f0100c2d <cprintf>
f0102c5d:	83 c4 10             	add    $0x10,%esp
f0102c60:	eb 4f                	jmp    f0102cb1 <command_test_kheap+0x174>
	}
	else if(strcmp(arguments[1], "NF") == 0 || strcmp(arguments[1], "nf") == 0)
f0102c62:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c65:	83 c0 04             	add    $0x4,%eax
f0102c68:	8b 00                	mov    (%eax),%eax
f0102c6a:	83 ec 08             	sub    $0x8,%esp
f0102c6d:	68 08 46 13 f0       	push   $0xf0134608
f0102c72:	50                   	push   %eax
f0102c73:	e8 d1 d8 02 00       	call   f0130549 <strcmp>
f0102c78:	83 c4 10             	add    $0x10,%esp
f0102c7b:	85 c0                	test   %eax,%eax
f0102c7d:	74 1d                	je     f0102c9c <command_test_kheap+0x15f>
f0102c7f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102c82:	83 c0 04             	add    $0x4,%eax
f0102c85:	8b 00                	mov    (%eax),%eax
f0102c87:	83 ec 08             	sub    $0x8,%esp
f0102c8a:	68 0b 46 13 f0       	push   $0xf013460b
f0102c8f:	50                   	push   %eax
f0102c90:	e8 b4 d8 02 00       	call   f0130549 <strcmp>
f0102c95:	83 c4 10             	add    $0x10,%esp
f0102c98:	85 c0                	test   %eax,%eax
f0102c9a:	75 15                	jne    f0102cb1 <command_test_kheap+0x174>
	{
		setKHeapPlacementStrategyNEXTFIT();
f0102c9c:	e8 91 e1 ff ff       	call   f0100e32 <setKHeapPlacementStrategyNEXTFIT>
		cprintf("Kernel Heap placement strategy is NEXT FIT\n");
f0102ca1:	83 ec 0c             	sub    $0xc,%esp
f0102ca4:	68 f4 41 13 f0       	push   $0xf01341f4
f0102ca9:	e8 7f df ff ff       	call   f0100c2d <cprintf>
f0102cae:	83 c4 10             	add    $0x10,%esp
	}

	// Test 1-kmalloc: tstkheap FF kmalloc 1
	if(strcmp(arguments[2], "kmalloc") == 0)
f0102cb1:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cb4:	83 c0 08             	add    $0x8,%eax
f0102cb7:	8b 00                	mov    (%eax),%eax
f0102cb9:	83 ec 08             	sub    $0x8,%esp
f0102cbc:	68 f8 46 13 f0       	push   $0xf01346f8
f0102cc1:	50                   	push   %eax
f0102cc2:	e8 82 d8 02 00       	call   f0130549 <strcmp>
f0102cc7:	83 c4 10             	add    $0x10,%esp
f0102cca:	85 c0                	test   %eax,%eax
f0102ccc:	0f 85 13 01 00 00    	jne    f0102de5 <command_test_kheap+0x2a8>
	{
		uint32 testNum = strtol(arguments[3], NULL, 10);
f0102cd2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102cd5:	83 c0 0c             	add    $0xc,%eax
f0102cd8:	8b 00                	mov    (%eax),%eax
f0102cda:	83 ec 04             	sub    $0x4,%esp
f0102cdd:	6a 0a                	push   $0xa
f0102cdf:	6a 00                	push   $0x0
f0102ce1:	50                   	push   %eax
f0102ce2:	e8 b6 da 02 00       	call   f013079d <strtol>
f0102ce7:	83 c4 10             	add    $0x10,%esp
f0102cea:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if(isKHeapPlacementStrategyFIRSTFIT())
f0102ced:	e8 74 e1 ff ff       	call   f0100e66 <isKHeapPlacementStrategyFIRSTFIT>
f0102cf2:	84 c0                	test   %al,%al
f0102cf4:	74 54                	je     f0102d4a <command_test_kheap+0x20d>
		{
			if (testNum == 0)
f0102cf6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102cfa:	75 1a                	jne    f0102d16 <command_test_kheap+0x1d9>
			{
				cprintf("Error: [Kernel.FirstFit] must specify the test number (1 or 2) as an argument\n");
f0102cfc:	83 ec 0c             	sub    $0xc,%esp
f0102cff:	68 6c 44 13 f0       	push   $0xf013446c
f0102d04:	e8 24 df ff ff       	call   f0100c2d <cprintf>
f0102d09:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102d0c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d11:	e9 9d 01 00 00       	jmp    f0102eb3 <command_test_kheap+0x376>
			}
			//Test FIRST FIT allocation
			if (testNum == 1)
f0102d16:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102d1a:	75 0a                	jne    f0102d26 <command_test_kheap+0x1e9>
				test_kmalloc();
f0102d1c:	e8 28 3e 01 00       	call   f0116b49 <test_kmalloc>
f0102d21:	e9 b5 00 00 00       	jmp    f0102ddb <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102d26:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102d2a:	75 0a                	jne    f0102d36 <command_test_kheap+0x1f9>
				test_kmalloc_firstfit1();
f0102d2c:	e8 a1 8c 01 00       	call   f011b9d2 <test_kmalloc_firstfit1>
f0102d31:	e9 a5 00 00 00       	jmp    f0102ddb <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102d36:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102d3a:	0f 85 9b 00 00 00    	jne    f0102ddb <command_test_kheap+0x29e>
				test_kmalloc_firstfit2();
f0102d40:	e8 2f a0 01 00       	call   f011cd74 <test_kmalloc_firstfit2>
f0102d45:	e9 91 00 00 00       	jmp    f0102ddb <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyBESTFIT())
f0102d4a:	e8 2c e1 ff ff       	call   f0100e7b <isKHeapPlacementStrategyBESTFIT>
f0102d4f:	84 c0                	test   %al,%al
f0102d51:	74 47                	je     f0102d9a <command_test_kheap+0x25d>
		{
			if (testNum == 0)
f0102d53:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102d57:	75 1a                	jne    f0102d73 <command_test_kheap+0x236>
			{
				cprintf("Error: [Kernel.BestFit] must specify the test number (1, 2, 3) as an argument\n");
f0102d59:	83 ec 0c             	sub    $0xc,%esp
f0102d5c:	68 bc 44 13 f0       	push   $0xf01344bc
f0102d61:	e8 c7 de ff ff       	call   f0100c2d <cprintf>
f0102d66:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102d69:	b8 00 00 00 00       	mov    $0x0,%eax
f0102d6e:	e9 40 01 00 00       	jmp    f0102eb3 <command_test_kheap+0x376>
			}
			if (testNum == 1)
f0102d73:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102d77:	75 07                	jne    f0102d80 <command_test_kheap+0x243>
				test_kmalloc();
f0102d79:	e8 cb 3d 01 00       	call   f0116b49 <test_kmalloc>
f0102d7e:	eb 5b                	jmp    f0102ddb <command_test_kheap+0x29e>
			else if (testNum == 2)
f0102d80:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102d84:	75 07                	jne    f0102d8d <command_test_kheap+0x250>
				test_kmalloc_bestfit1();
f0102d86:	e8 11 67 01 00       	call   f011949c <test_kmalloc_bestfit1>
f0102d8b:	eb 4e                	jmp    f0102ddb <command_test_kheap+0x29e>
			else if (testNum == 3)
f0102d8d:	83 7d f4 03          	cmpl   $0x3,-0xc(%ebp)
f0102d91:	75 48                	jne    f0102ddb <command_test_kheap+0x29e>
				test_kmalloc_bestfit2();
f0102d93:	e8 5a 79 01 00       	call   f011a6f2 <test_kmalloc_bestfit2>
f0102d98:	eb 41                	jmp    f0102ddb <command_test_kheap+0x29e>
		}
		else if(isKHeapPlacementStrategyNEXTFIT())
f0102d9a:	e8 f1 e0 ff ff       	call   f0100e90 <isKHeapPlacementStrategyNEXTFIT>
f0102d9f:	84 c0                	test   %al,%al
f0102da1:	74 38                	je     f0102ddb <command_test_kheap+0x29e>
		{
			if (testNum == 0)
f0102da3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0102da7:	75 1a                	jne    f0102dc3 <command_test_kheap+0x286>
			{
				cprintf("Error: [Kernel.NextFit] must specify the test number (1 or 2) as an argument\n");
f0102da9:	83 ec 0c             	sub    $0xc,%esp
f0102dac:	68 0c 45 13 f0       	push   $0xf013450c
f0102db1:	e8 77 de ff ff       	call   f0100c2d <cprintf>
f0102db6:	83 c4 10             	add    $0x10,%esp
				return 0;
f0102db9:	b8 00 00 00 00       	mov    $0x0,%eax
f0102dbe:	e9 f0 00 00 00       	jmp    f0102eb3 <command_test_kheap+0x376>
			}
			//Test cont. allocation
			if (testNum == 1)
f0102dc3:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
f0102dc7:	75 07                	jne    f0102dd0 <command_test_kheap+0x293>
				test_kmalloc();
f0102dc9:	e8 7b 3d 01 00       	call   f0116b49 <test_kmalloc>
f0102dce:	eb 0b                	jmp    f0102ddb <command_test_kheap+0x29e>
			//Test nextfit strategy
			else if (testNum == 2)
f0102dd0:	83 7d f4 02          	cmpl   $0x2,-0xc(%ebp)
f0102dd4:	75 05                	jne    f0102ddb <command_test_kheap+0x29e>
				test_kmalloc_nextfit();
f0102dd6:	e8 cc 4f 01 00       	call   f0117da7 <test_kmalloc_nextfit>
		}
		return 0;
f0102ddb:	b8 00 00 00 00       	mov    $0x0,%eax
f0102de0:	e9 ce 00 00 00       	jmp    f0102eb3 <command_test_kheap+0x376>
	}
	// Test 2-kfree: tstkheap FF kfree
	else if(strcmp(arguments[2], "kfree") == 0)
f0102de5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102de8:	83 c0 08             	add    $0x8,%eax
f0102deb:	8b 00                	mov    (%eax),%eax
f0102ded:	83 ec 08             	sub    $0x8,%esp
f0102df0:	68 94 47 13 f0       	push   $0xf0134794
f0102df5:	50                   	push   %eax
f0102df6:	e8 4e d7 02 00       	call   f0130549 <strcmp>
f0102dfb:	83 c4 10             	add    $0x10,%esp
f0102dfe:	85 c0                	test   %eax,%eax
f0102e00:	75 28                	jne    f0102e2a <command_test_kheap+0x2ed>
	{
		if (isKHeapPlacementStrategyBESTFIT() || isKHeapPlacementStrategyFIRSTFIT())
f0102e02:	e8 74 e0 ff ff       	call   f0100e7b <isKHeapPlacementStrategyBESTFIT>
f0102e07:	84 c0                	test   %al,%al
f0102e09:	75 09                	jne    f0102e14 <command_test_kheap+0x2d7>
f0102e0b:	e8 56 e0 ff ff       	call   f0100e66 <isKHeapPlacementStrategyFIRSTFIT>
f0102e10:	84 c0                	test   %al,%al
f0102e12:	74 07                	je     f0102e1b <command_test_kheap+0x2de>
		{
			test_kfree_bestfirstfit();
f0102e14:	e8 92 e5 01 00       	call   f01213ab <test_kfree_bestfirstfit>
f0102e19:	eb 05                	jmp    f0102e20 <command_test_kheap+0x2e3>
		}
		else //NEXT & CONT
		{
			test_kfree();
f0102e1b:	e8 39 c4 01 00       	call   f011f259 <test_kfree>
		}
		return 0;
f0102e20:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e25:	e9 89 00 00 00       	jmp    f0102eb3 <command_test_kheap+0x376>
	}
	// Test 3-kphysaddr: tstkheap FF kphysaddr
	else if(strcmp(arguments[2], "kphysaddr") == 0)
f0102e2a:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e2d:	83 c0 08             	add    $0x8,%eax
f0102e30:	8b 00                	mov    (%eax),%eax
f0102e32:	83 ec 08             	sub    $0x8,%esp
f0102e35:	68 9a 47 13 f0       	push   $0xf013479a
f0102e3a:	50                   	push   %eax
f0102e3b:	e8 09 d7 02 00       	call   f0130549 <strcmp>
f0102e40:	83 c4 10             	add    $0x10,%esp
f0102e43:	85 c0                	test   %eax,%eax
f0102e45:	75 0c                	jne    f0102e53 <command_test_kheap+0x316>
	{
		test_kheap_phys_addr();
f0102e47:	e8 5b ff 01 00       	call   f0122da7 <test_kheap_phys_addr>
		return 0;
f0102e4c:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e51:	eb 60                	jmp    f0102eb3 <command_test_kheap+0x376>
	}
	// Test 4-kvirtaddr: tstkheap FF kvirtaddr
	else if(strcmp(arguments[2], "kvirtaddr") == 0)
f0102e53:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e56:	83 c0 08             	add    $0x8,%eax
f0102e59:	8b 00                	mov    (%eax),%eax
f0102e5b:	83 ec 08             	sub    $0x8,%esp
f0102e5e:	68 a4 47 13 f0       	push   $0xf01347a4
f0102e63:	50                   	push   %eax
f0102e64:	e8 e0 d6 02 00       	call   f0130549 <strcmp>
f0102e69:	83 c4 10             	add    $0x10,%esp
f0102e6c:	85 c0                	test   %eax,%eax
f0102e6e:	75 0c                	jne    f0102e7c <command_test_kheap+0x33f>
	{
		test_kheap_virt_addr();
f0102e70:	e8 02 14 02 00       	call   f0124277 <test_kheap_virt_addr>
		return 0;
f0102e75:	b8 00 00 00 00       	mov    $0x0,%eax
f0102e7a:	eb 37                	jmp    f0102eb3 <command_test_kheap+0x376>
	}
	// Test 5-krealloc: tstkheap BF krealloc
	else if(strcmp(arguments[2], "krealloc") == 0)
f0102e7c:	8b 45 0c             	mov    0xc(%ebp),%eax
f0102e7f:	83 c0 08             	add    $0x8,%eax
f0102e82:	8b 00                	mov    (%eax),%eax
f0102e84:	83 ec 08             	sub    $0x8,%esp
f0102e87:	68 ae 47 13 f0       	push   $0xf01347ae
f0102e8c:	50                   	push   %eax
f0102e8d:	e8 b7 d6 02 00       	call   f0130549 <strcmp>
f0102e92:	83 c4 10             	add    $0x10,%esp
f0102e95:	85 c0                	test   %eax,%eax
f0102e97:	75 15                	jne    f0102eae <command_test_kheap+0x371>
	{
		if (isKHeapPlacementStrategyBESTFIT())
f0102e99:	e8 dd df ff ff       	call   f0100e7b <isKHeapPlacementStrategyBESTFIT>
f0102e9e:	84 c0                	test   %al,%al
f0102ea0:	74 05                	je     f0102ea7 <command_test_kheap+0x36a>
		{
			test_krealloc_BF();
f0102ea2:	e8 74 a2 02 00       	call   f012d11b <test_krealloc_BF>
		}
		return 0;
f0102ea7:	b8 00 00 00 00       	mov    $0x0,%eax
f0102eac:	eb 05                	jmp    f0102eb3 <command_test_kheap+0x376>
	}
	return 0;
f0102eae:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0102eb3:	c9                   	leave  
f0102eb4:	c3                   	ret    

f0102eb5 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0102eb5:	55                   	push   %ebp
f0102eb6:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0102eb8:	8b 45 08             	mov    0x8(%ebp),%eax
f0102ebb:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0102ec1:	29 d0                	sub    %edx,%eax
f0102ec3:	c1 f8 03             	sar    $0x3,%eax
f0102ec6:	89 c2                	mov    %eax,%edx
f0102ec8:	89 d0                	mov    %edx,%eax
f0102eca:	c1 e0 02             	shl    $0x2,%eax
f0102ecd:	01 d0                	add    %edx,%eax
f0102ecf:	c1 e0 02             	shl    $0x2,%eax
f0102ed2:	01 d0                	add    %edx,%eax
f0102ed4:	c1 e0 02             	shl    $0x2,%eax
f0102ed7:	01 d0                	add    %edx,%eax
f0102ed9:	89 c1                	mov    %eax,%ecx
f0102edb:	c1 e1 08             	shl    $0x8,%ecx
f0102ede:	01 c8                	add    %ecx,%eax
f0102ee0:	89 c1                	mov    %eax,%ecx
f0102ee2:	c1 e1 10             	shl    $0x10,%ecx
f0102ee5:	01 c8                	add    %ecx,%eax
f0102ee7:	01 c0                	add    %eax,%eax
f0102ee9:	01 d0                	add    %edx,%eax
}
f0102eeb:	5d                   	pop    %ebp
f0102eec:	c3                   	ret    

f0102eed <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0102eed:	55                   	push   %ebp
f0102eee:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0102ef0:	ff 75 08             	pushl  0x8(%ebp)
f0102ef3:	e8 bd ff ff ff       	call   f0102eb5 <to_frame_number>
f0102ef8:	83 c4 04             	add    $0x4,%esp
f0102efb:	c1 e0 0c             	shl    $0xc,%eax
}
f0102efe:	c9                   	leave  
f0102eff:	c3                   	ret    

f0102f00 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0102f00:	55                   	push   %ebp
f0102f01:	89 e5                	mov    %esp,%ebp
f0102f03:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0102f06:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f09:	c1 e8 0c             	shr    $0xc,%eax
f0102f0c:	89 c2                	mov    %eax,%edx
f0102f0e:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0102f13:	39 c2                	cmp    %eax,%edx
f0102f15:	72 14                	jb     f0102f2b <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0102f17:	83 ec 04             	sub    $0x4,%esp
f0102f1a:	68 b8 47 13 f0       	push   $0xf01347b8
f0102f1f:	6a 55                	push   $0x55
f0102f21:	68 e0 47 13 f0       	push   $0xf01347e0
f0102f26:	e8 7b d2 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0102f2b:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0102f31:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f34:	c1 e8 0c             	shr    $0xc,%eax
f0102f37:	89 c1                	mov    %eax,%ecx
f0102f39:	89 c8                	mov    %ecx,%eax
f0102f3b:	01 c0                	add    %eax,%eax
f0102f3d:	01 c8                	add    %ecx,%eax
f0102f3f:	c1 e0 03             	shl    $0x3,%eax
f0102f42:	01 d0                	add    %edx,%eax
}
f0102f44:	c9                   	leave  
f0102f45:	c3                   	ret    

f0102f46 <read_disk_page>:
void __pf_remove_env_all_tables(struct Env* ptr_env);
void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address);


int read_disk_page(uint32 dfn, void* va)
{
f0102f46:	55                   	push   %ebp
f0102f47:	89 e5                	mov    %esp,%ebp
f0102f49:	83 ec 18             	sub    $0x18,%esp
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0102f4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f4f:	05 00 14 00 00       	add    $0x1400,%eax
f0102f54:	c1 e0 03             	shl    $0x3,%eax
f0102f57:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf("reading from disk to mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_read(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0102f5a:	83 ec 04             	sub    $0x4,%esp
f0102f5d:	6a 08                	push   $0x8
f0102f5f:	ff 75 0c             	pushl  0xc(%ebp)
f0102f62:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f65:	e8 26 dc 02 00       	call   f0130b90 <ide_read>
f0102f6a:	83 c4 10             	add    $0x10,%esp
f0102f6d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf("read from disk successuflly.\n");} else {cprintf("read from disk failed !!\n");} );

	return success;
f0102f70:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0102f73:	c9                   	leave  
f0102f74:	c3                   	ret    

f0102f75 <write_disk_page>:


int write_disk_page(uint32 dfn, void* va)
{
f0102f75:	55                   	push   %ebp
f0102f76:	89 e5                	mov    %esp,%ebp
f0102f78:	83 ec 18             	sub    $0x18,%esp
	//write disk at wanted frame
	uint32 df_start_sector = PAGE_FILE_START_SECTOR+dfn*SECTOR_PER_PAGE;
f0102f7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0102f7e:	05 00 14 00 00       	add    $0x1400,%eax
f0102f83:	c1 e0 03             	shl    $0x3,%eax
f0102f86:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_STATMENT( cprintf(">>> writing to disk from mem addr %x at sector %d\n",va,df_start_sector);  );
	int success = ide_write(df_start_sector, (void*)va, SECTOR_PER_PAGE);
f0102f89:	83 ec 04             	sub    $0x4,%esp
f0102f8c:	6a 08                	push   $0x8
f0102f8e:	ff 75 0c             	pushl  0xc(%ebp)
f0102f91:	ff 75 f4             	pushl  -0xc(%ebp)
f0102f94:	e8 37 dd 02 00       	call   f0130cd0 <ide_write>
f0102f99:	83 c4 10             	add    $0x10,%esp
f0102f9c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//LOG_STATMENT( if(success==0) {cprintf(">>> written to disk successfully.\n");} else {cprintf(">>> written to disk failed !!\n");} );

	if(success != 0)
f0102f9f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0102fa3:	74 14                	je     f0102fb9 <write_disk_page+0x44>
		panic("Error writing on disk\n");
f0102fa5:	83 ec 04             	sub    $0x4,%esp
f0102fa8:	68 02 48 13 f0       	push   $0xf0134802
f0102fad:	6a 2e                	push   $0x2e
f0102faf:	68 19 48 13 f0       	push   $0xf0134819
f0102fb4:	e8 ed d1 ff ff       	call   f01001a6 <_panic>
	return success;
f0102fb9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0102fbc:	c9                   	leave  
f0102fbd:	c3                   	ret    

f0102fbe <initialize_disk_page_file>:
// After this point, ONLY use the functions below
// to allocate and deallocate physical memory via the disk_free_frame_list,
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//
void initialize_disk_page_file()
{
f0102fbe:	55                   	push   %ebp
f0102fbf:	89 e5                	mov    %esp,%ebp
f0102fc1:	53                   	push   %ebx
f0102fc2:	83 ec 14             	sub    $0x14,%esp
	int i;
	LIST_INIT(&disk_free_frame_list);
f0102fc5:	c7 05 14 85 6e f0 00 	movl   $0x0,0xf06e8514
f0102fcc:	00 00 00 
f0102fcf:	c7 05 18 85 6e f0 00 	movl   $0x0,0xf06e8518
f0102fd6:	00 00 00 
f0102fd9:	c7 05 20 85 6e f0 00 	movl   $0x0,0xf06e8520
f0102fe0:	00 00 00 

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f0102fe3:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
f0102fea:	e9 e8 00 00 00       	jmp    f01030d7 <initialize_disk_page_file+0x119>
	{
		initialize_frame_info(&(disk_frames_info[i]));
f0102fef:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f0102ff5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0102ff8:	89 d0                	mov    %edx,%eax
f0102ffa:	01 c0                	add    %eax,%eax
f0102ffc:	01 d0                	add    %edx,%eax
f0102ffe:	c1 e0 03             	shl    $0x3,%eax
f0103001:	01 c8                	add    %ecx,%eax
f0103003:	83 ec 0c             	sub    $0xc,%esp
f0103006:	50                   	push   %eax
f0103007:	e8 8b 37 00 00       	call   f0106797 <initialize_frame_info>
f010300c:	83 c4 10             	add    $0x10,%esp

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
f010300f:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f0103015:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103018:	89 d0                	mov    %edx,%eax
f010301a:	01 c0                	add    %eax,%eax
f010301c:	01 d0                	add    %edx,%eax
f010301e:	c1 e0 03             	shl    $0x3,%eax
f0103021:	01 c8                	add    %ecx,%eax
f0103023:	85 c0                	test   %eax,%eax
f0103025:	75 14                	jne    f010303b <initialize_disk_page_file+0x7d>
f0103027:	83 ec 04             	sub    $0x4,%esp
f010302a:	68 38 48 13 f0       	push   $0xf0134838
f010302f:	6a 59                	push   $0x59
f0103031:	68 19 48 13 f0       	push   $0xf0134819
f0103036:	e8 6b d1 ff ff       	call   f01001a6 <_panic>
f010303b:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f0103041:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103044:	89 d0                	mov    %edx,%eax
f0103046:	01 c0                	add    %eax,%eax
f0103048:	01 d0                	add    %edx,%eax
f010304a:	c1 e0 03             	shl    $0x3,%eax
f010304d:	01 c8                	add    %ecx,%eax
f010304f:	8b 15 14 85 6e f0    	mov    0xf06e8514,%edx
f0103055:	89 10                	mov    %edx,(%eax)
f0103057:	8b 00                	mov    (%eax),%eax
f0103059:	85 c0                	test   %eax,%eax
f010305b:	74 1f                	je     f010307c <initialize_disk_page_file+0xbe>
f010305d:	8b 15 14 85 6e f0    	mov    0xf06e8514,%edx
f0103063:	8b 1d 00 01 68 f0    	mov    0xf0680100,%ebx
f0103069:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f010306c:	89 c8                	mov    %ecx,%eax
f010306e:	01 c0                	add    %eax,%eax
f0103070:	01 c8                	add    %ecx,%eax
f0103072:	c1 e0 03             	shl    $0x3,%eax
f0103075:	01 d8                	add    %ebx,%eax
f0103077:	89 42 04             	mov    %eax,0x4(%edx)
f010307a:	eb 19                	jmp    f0103095 <initialize_disk_page_file+0xd7>
f010307c:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f0103082:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103085:	89 d0                	mov    %edx,%eax
f0103087:	01 c0                	add    %eax,%eax
f0103089:	01 d0                	add    %edx,%eax
f010308b:	c1 e0 03             	shl    $0x3,%eax
f010308e:	01 c8                	add    %ecx,%eax
f0103090:	a3 18 85 6e f0       	mov    %eax,0xf06e8518
f0103095:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f010309b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010309e:	89 d0                	mov    %edx,%eax
f01030a0:	01 c0                	add    %eax,%eax
f01030a2:	01 d0                	add    %edx,%eax
f01030a4:	c1 e0 03             	shl    $0x3,%eax
f01030a7:	01 c8                	add    %ecx,%eax
f01030a9:	a3 14 85 6e f0       	mov    %eax,0xf06e8514
f01030ae:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f01030b4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01030b7:	89 d0                	mov    %edx,%eax
f01030b9:	01 c0                	add    %eax,%eax
f01030bb:	01 d0                	add    %edx,%eax
f01030bd:	c1 e0 03             	shl    $0x3,%eax
f01030c0:	01 c8                	add    %ecx,%eax
f01030c2:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01030c9:	a1 20 85 6e f0       	mov    0xf06e8520,%eax
f01030ce:	40                   	inc    %eax
f01030cf:	a3 20 85 6e f0       	mov    %eax,0xf06e8520
{
	int i;
	LIST_INIT(&disk_free_frame_list);

	//LOG_STATMENT(cprintf("PAGES_PER_FILE = %d, PAGE_FILE_START_SECTOR = %d\n",PAGES_PER_FILE,PAGE_FILE_START_SECTOR););
	for (i = 1; i < PAGES_PER_FILE; i++)
f01030d4:	ff 45 f4             	incl   -0xc(%ebp)
f01030d7:	81 7d f4 ff 07 02 00 	cmpl   $0x207ff,-0xc(%ebp)
f01030de:	0f 8e 0b ff ff ff    	jle    f0102fef <initialize_disk_page_file+0x31>
		initialize_frame_info(&(disk_frames_info[i]));

		//disk_frames_info[i].references = 0;
		LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[i]);
	}
}
f01030e4:	90                   	nop
f01030e5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01030e8:	c9                   	leave  
f01030e9:	c3                   	ret    

f01030ea <to_disk_frame_number>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
static inline uint32 to_disk_frame_number(struct FrameInfo *ptr_frame_info)
{
f01030ea:	55                   	push   %ebp
f01030eb:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - disk_frames_info;
f01030ed:	8b 45 08             	mov    0x8(%ebp),%eax
f01030f0:	8b 15 00 01 68 f0    	mov    0xf0680100,%edx
f01030f6:	29 d0                	sub    %edx,%eax
f01030f8:	c1 f8 03             	sar    $0x3,%eax
f01030fb:	89 c2                	mov    %eax,%edx
f01030fd:	89 d0                	mov    %edx,%eax
f01030ff:	c1 e0 02             	shl    $0x2,%eax
f0103102:	01 d0                	add    %edx,%eax
f0103104:	c1 e0 02             	shl    $0x2,%eax
f0103107:	01 d0                	add    %edx,%eax
f0103109:	c1 e0 02             	shl    $0x2,%eax
f010310c:	01 d0                	add    %edx,%eax
f010310e:	89 c1                	mov    %eax,%ecx
f0103110:	c1 e1 08             	shl    $0x8,%ecx
f0103113:	01 c8                	add    %ecx,%eax
f0103115:	89 c1                	mov    %eax,%ecx
f0103117:	c1 e1 10             	shl    $0x10,%ecx
f010311a:	01 c8                	add    %ecx,%eax
f010311c:	01 c0                	add    %eax,%eax
f010311e:	01 d0                	add    %edx,%eax
}
f0103120:	5d                   	pop    %ebp
f0103121:	c3                   	ret    

f0103122 <allocate_disk_frame>:
// RETURNS
//   0 -- on success
//   E_NO_PAGE_FILE_SPACE -- otherwise
//
int allocate_disk_frame(uint32 *dfn)
{
f0103122:	55                   	push   %ebp
f0103123:	89 e5                	mov    %esp,%ebp
f0103125:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	struct FrameInfo *ptr_frame_info = LIST_FIRST(&disk_free_frame_list);
f0103128:	a1 14 85 6e f0       	mov    0xf06e8514,%eax
f010312d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(ptr_frame_info == NULL)
f0103130:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103134:	75 0a                	jne    f0103140 <allocate_disk_frame+0x1e>
		return E_NO_PAGE_FILE_SPACE;
f0103136:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f010313b:	e9 a7 00 00 00       	jmp    f01031e7 <allocate_disk_frame+0xc5>

	LIST_REMOVE(&disk_free_frame_list, ptr_frame_info);
f0103140:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103144:	75 14                	jne    f010315a <allocate_disk_frame+0x38>
f0103146:	83 ec 04             	sub    $0x4,%esp
f0103149:	68 5b 48 13 f0       	push   $0xf013485b
f010314e:	6a 78                	push   $0x78
f0103150:	68 19 48 13 f0       	push   $0xf0134819
f0103155:	e8 4c d0 ff ff       	call   f01001a6 <_panic>
f010315a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010315d:	8b 00                	mov    (%eax),%eax
f010315f:	85 c0                	test   %eax,%eax
f0103161:	74 10                	je     f0103173 <allocate_disk_frame+0x51>
f0103163:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103166:	8b 00                	mov    (%eax),%eax
f0103168:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010316b:	8b 52 04             	mov    0x4(%edx),%edx
f010316e:	89 50 04             	mov    %edx,0x4(%eax)
f0103171:	eb 0b                	jmp    f010317e <allocate_disk_frame+0x5c>
f0103173:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103176:	8b 40 04             	mov    0x4(%eax),%eax
f0103179:	a3 18 85 6e f0       	mov    %eax,0xf06e8518
f010317e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103181:	8b 40 04             	mov    0x4(%eax),%eax
f0103184:	85 c0                	test   %eax,%eax
f0103186:	74 0f                	je     f0103197 <allocate_disk_frame+0x75>
f0103188:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010318b:	8b 40 04             	mov    0x4(%eax),%eax
f010318e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103191:	8b 12                	mov    (%edx),%edx
f0103193:	89 10                	mov    %edx,(%eax)
f0103195:	eb 0a                	jmp    f01031a1 <allocate_disk_frame+0x7f>
f0103197:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010319a:	8b 00                	mov    (%eax),%eax
f010319c:	a3 14 85 6e f0       	mov    %eax,0xf06e8514
f01031a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01031a4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01031aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01031ad:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01031b4:	a1 20 85 6e f0       	mov    0xf06e8520,%eax
f01031b9:	48                   	dec    %eax
f01031ba:	a3 20 85 6e f0       	mov    %eax,0xf06e8520
	initialize_frame_info(ptr_frame_info);
f01031bf:	83 ec 0c             	sub    $0xc,%esp
f01031c2:	ff 75 f4             	pushl  -0xc(%ebp)
f01031c5:	e8 cd 35 00 00       	call   f0106797 <initialize_frame_info>
f01031ca:	83 c4 10             	add    $0x10,%esp
	*dfn = to_disk_frame_number(ptr_frame_info);
f01031cd:	83 ec 0c             	sub    $0xc,%esp
f01031d0:	ff 75 f4             	pushl  -0xc(%ebp)
f01031d3:	e8 12 ff ff ff       	call   f01030ea <to_disk_frame_number>
f01031d8:	83 c4 10             	add    $0x10,%esp
f01031db:	89 c2                	mov    %eax,%edx
f01031dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01031e0:	89 10                	mov    %edx,(%eax)
	return 0;
f01031e2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01031e7:	c9                   	leave  
f01031e8:	c3                   	ret    

f01031e9 <free_disk_frame>:

//
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
f01031e9:	55                   	push   %ebp
f01031ea:	89 e5                	mov    %esp,%ebp
f01031ec:	53                   	push   %ebx
f01031ed:	83 ec 04             	sub    $0x4,%esp
	// Fill this function in
	if(dfn == 0) return;
f01031f0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01031f4:	0f 84 ca 00 00 00    	je     f01032c4 <free_disk_frame+0xdb>
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
f01031fa:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f0103200:	8b 55 08             	mov    0x8(%ebp),%edx
f0103203:	89 d0                	mov    %edx,%eax
f0103205:	01 c0                	add    %eax,%eax
f0103207:	01 d0                	add    %edx,%eax
f0103209:	c1 e0 03             	shl    $0x3,%eax
f010320c:	01 c8                	add    %ecx,%eax
f010320e:	85 c0                	test   %eax,%eax
f0103210:	75 17                	jne    f0103229 <free_disk_frame+0x40>
f0103212:	83 ec 04             	sub    $0x4,%esp
f0103215:	68 38 48 13 f0       	push   $0xf0134838
f010321a:	68 85 00 00 00       	push   $0x85
f010321f:	68 19 48 13 f0       	push   $0xf0134819
f0103224:	e8 7d cf ff ff       	call   f01001a6 <_panic>
f0103229:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f010322f:	8b 55 08             	mov    0x8(%ebp),%edx
f0103232:	89 d0                	mov    %edx,%eax
f0103234:	01 c0                	add    %eax,%eax
f0103236:	01 d0                	add    %edx,%eax
f0103238:	c1 e0 03             	shl    $0x3,%eax
f010323b:	01 c8                	add    %ecx,%eax
f010323d:	8b 15 14 85 6e f0    	mov    0xf06e8514,%edx
f0103243:	89 10                	mov    %edx,(%eax)
f0103245:	8b 00                	mov    (%eax),%eax
f0103247:	85 c0                	test   %eax,%eax
f0103249:	74 1f                	je     f010326a <free_disk_frame+0x81>
f010324b:	8b 15 14 85 6e f0    	mov    0xf06e8514,%edx
f0103251:	8b 1d 00 01 68 f0    	mov    0xf0680100,%ebx
f0103257:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010325a:	89 c8                	mov    %ecx,%eax
f010325c:	01 c0                	add    %eax,%eax
f010325e:	01 c8                	add    %ecx,%eax
f0103260:	c1 e0 03             	shl    $0x3,%eax
f0103263:	01 d8                	add    %ebx,%eax
f0103265:	89 42 04             	mov    %eax,0x4(%edx)
f0103268:	eb 19                	jmp    f0103283 <free_disk_frame+0x9a>
f010326a:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f0103270:	8b 55 08             	mov    0x8(%ebp),%edx
f0103273:	89 d0                	mov    %edx,%eax
f0103275:	01 c0                	add    %eax,%eax
f0103277:	01 d0                	add    %edx,%eax
f0103279:	c1 e0 03             	shl    $0x3,%eax
f010327c:	01 c8                	add    %ecx,%eax
f010327e:	a3 18 85 6e f0       	mov    %eax,0xf06e8518
f0103283:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f0103289:	8b 55 08             	mov    0x8(%ebp),%edx
f010328c:	89 d0                	mov    %edx,%eax
f010328e:	01 c0                	add    %eax,%eax
f0103290:	01 d0                	add    %edx,%eax
f0103292:	c1 e0 03             	shl    $0x3,%eax
f0103295:	01 c8                	add    %ecx,%eax
f0103297:	a3 14 85 6e f0       	mov    %eax,0xf06e8514
f010329c:	8b 0d 00 01 68 f0    	mov    0xf0680100,%ecx
f01032a2:	8b 55 08             	mov    0x8(%ebp),%edx
f01032a5:	89 d0                	mov    %edx,%eax
f01032a7:	01 c0                	add    %eax,%eax
f01032a9:	01 d0                	add    %edx,%eax
f01032ab:	c1 e0 03             	shl    $0x3,%eax
f01032ae:	01 c8                	add    %ecx,%eax
f01032b0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01032b7:	a1 20 85 6e f0       	mov    0xf06e8520,%eax
f01032bc:	40                   	inc    %eax
f01032bd:	a3 20 85 6e f0       	mov    %eax,0xf06e8520
f01032c2:	eb 01                	jmp    f01032c5 <free_disk_frame+0xdc>
// Return a frame to the disk_free_frame_list.
//
inline void free_disk_frame(uint32 dfn)
{
	// Fill this function in
	if(dfn == 0) return;
f01032c4:	90                   	nop
	LIST_INSERT_HEAD(&disk_free_frame_list, &disk_frames_info[dfn]);
}
f01032c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01032c8:	c9                   	leave  
f01032c9:	c3                   	ret    

f01032ca <get_disk_page_table>:

int get_disk_page_table(uint32 *ptr_disk_page_directory, const uint32 virtual_address, int create, uint32 **ptr_disk_page_table)
{
f01032ca:	55                   	push   %ebp
f01032cb:	89 e5                	mov    %esp,%ebp
f01032cd:	83 ec 28             	sub    $0x28,%esp
	// Fill this function in
	uint32 disk_page_directory_entry = ptr_disk_page_directory[PDX(virtual_address)];
f01032d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01032d3:	c1 e8 16             	shr    $0x16,%eax
f01032d6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01032dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01032e0:	01 d0                	add    %edx,%eax
f01032e2:	8b 00                	mov    (%eax),%eax
f01032e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
	{
		*ptr_disk_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(disk_page_directory_entry));
	}
	else
	{
		*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(disk_page_directory_entry)) ;
f01032e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01032ea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01032ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01032f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01032f5:	c1 e8 0c             	shr    $0xc,%eax
f01032f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01032fb:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0103300:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103303:	72 17                	jb     f010331c <get_disk_page_table+0x52>
f0103305:	ff 75 f0             	pushl  -0x10(%ebp)
f0103308:	68 7c 48 13 f0       	push   $0xf013487c
f010330d:	68 92 00 00 00       	push   $0x92
f0103312:	68 19 48 13 f0       	push   $0xf0134819
f0103317:	e8 8a ce ff ff       	call   f01001a6 <_panic>
f010331c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010331f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103324:	89 c2                	mov    %eax,%edx
f0103326:	8b 45 14             	mov    0x14(%ebp),%eax
f0103329:	89 10                	mov    %edx,(%eax)
	}

	if (disk_page_directory_entry == 0)
f010332b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010332f:	0f 85 b7 00 00 00    	jne    f01033ec <get_disk_page_table+0x122>
	{
		//LOG_STATMENT(cprintf("get_disk_page_table: disk directory at %x",ptr_disk_page_directory));
		//LOG_STATMENT(cprintf("get_disk_page_table: page table not found "));
		if (create)
f0103335:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0103339:	0f 84 9d 00 00 00    	je     f01033dc <get_disk_page_table+0x112>
						,PERM_PRESENT);
			}
#else
			{
				struct FrameInfo* ptr_frame_info;
				allocate_frame(&ptr_frame_info) ;
f010333f:	83 ec 0c             	sub    $0xc,%esp
f0103342:	8d 45 dc             	lea    -0x24(%ebp),%eax
f0103345:	50                   	push   %eax
f0103346:	e8 67 34 00 00       	call   f01067b2 <allocate_frame>
f010334b:	83 c4 10             	add    $0x10,%esp

				//LOG_STATMENT(cprintf("created table"));
				uint32 phys_page_table = to_physical_address(ptr_frame_info);
f010334e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103351:	83 ec 0c             	sub    $0xc,%esp
f0103354:	50                   	push   %eax
f0103355:	e8 93 fb ff ff       	call   f0102eed <to_physical_address>
f010335a:	83 c4 10             	add    $0x10,%esp
f010335d:	89 45 e8             	mov    %eax,-0x18(%ebp)
				*ptr_disk_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0103360:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103363:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103366:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103369:	c1 e8 0c             	shr    $0xc,%eax
f010336c:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010336f:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0103374:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103377:	72 17                	jb     f0103390 <get_disk_page_table+0xc6>
f0103379:	ff 75 e4             	pushl  -0x1c(%ebp)
f010337c:	68 7c 48 13 f0       	push   $0xf013487c
f0103381:	68 ae 00 00 00       	push   $0xae
f0103386:	68 19 48 13 f0       	push   $0xf0134819
f010338b:	e8 16 ce ff ff       	call   f01001a6 <_panic>
f0103390:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103393:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103398:	89 c2                	mov    %eax,%edx
f010339a:	8b 45 14             	mov    0x14(%ebp),%eax
f010339d:	89 10                	mov    %edx,(%eax)
				ptr_frame_info->references = 1;
f010339f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01033a2:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
				ptr_disk_page_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table,PERM_PRESENT);
f01033a8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01033ab:	c1 e8 16             	shr    $0x16,%eax
f01033ae:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01033b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01033b8:	01 d0                	add    %edx,%eax
f01033ba:	8b 55 e8             	mov    -0x18(%ebp),%edx
f01033bd:	83 ca 01             	or     $0x1,%edx
f01033c0:	89 10                	mov    %edx,(%eax)
			}
#endif
			//initialize new page table by 0's
			memset(*ptr_disk_page_table , 0, PAGE_SIZE);
f01033c2:	8b 45 14             	mov    0x14(%ebp),%eax
f01033c5:	8b 00                	mov    (%eax),%eax
f01033c7:	83 ec 04             	sub    $0x4,%esp
f01033ca:	68 00 10 00 00       	push   $0x1000
f01033cf:	6a 00                	push   $0x0
f01033d1:	50                   	push   %eax
f01033d2:	e8 54 d2 02 00       	call   f013062b <memset>
f01033d7:	83 c4 10             	add    $0x10,%esp
f01033da:	eb 10                	jmp    f01033ec <get_disk_page_table+0x122>
			//virtual_address, ptr_disk_page_directory[PDX(virtual_address)]));
		}
		else
		{
			//LOG_STATMENT(cprintf("NOT creating table ..."));
			*ptr_disk_page_table = 0;
f01033dc:	8b 45 14             	mov    0x14(%ebp),%eax
f01033df:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			return 0;
f01033e5:	b8 00 00 00 00       	mov    $0x0,%eax
f01033ea:	eb 05                	jmp    f01033f1 <get_disk_page_table+0x127>
		}
	}
	//LOG_STATMENT(cprintf("found table at %x", *ptr_disk_page_table));
	return 0;
f01033ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01033f1:	c9                   	leave  
f01033f2:	c3                   	ret    

f01033f3 <pf_add_empty_env_page>:

int pf_add_empty_env_page( struct Env* ptr_env, uint32 virtual_address, uint8 initializeByZero)
{
f01033f3:	55                   	push   %ebp
f01033f4:	89 e5                	mov    %esp,%ebp
f01033f6:	83 ec 28             	sub    $0x28,%esp
f01033f9:	8b 45 10             	mov    0x10(%ebp),%eax
f01033fc:	88 45 e4             	mov    %al,-0x1c(%ebp)
	//2016: FIX:
	if (initializeByZero)
f01033ff:	80 7d e4 00          	cmpb   $0x0,-0x1c(%ebp)
f0103403:	74 75                	je     f010347a <pf_add_empty_env_page+0x87>
	{
		//2020
		if (virtual_address > USTACKBOTTOM && virtual_address < USTACKTOP - ptr_env->initNumStackPages * PAGE_SIZE)
f0103405:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f010340c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010340f:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103414:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103417:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010341a:	ba 00 00 00 00       	mov    $0x0,%edx
f010341f:	f7 75 f4             	divl   -0xc(%ebp)
f0103422:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103425:	29 d0                	sub    %edx,%eax
f0103427:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010342a:	73 32                	jae    f010345e <pf_add_empty_env_page+0x6b>
f010342c:	8b 45 08             	mov    0x8(%ebp),%eax
f010342f:	8b 90 14 da 01 00    	mov    0x1da14(%eax),%edx
f0103435:	b8 00 00 00 00       	mov    $0x0,%eax
f010343a:	29 d0                	sub    %edx,%eax
f010343c:	c1 e0 0c             	shl    $0xc,%eax
f010343f:	2d 00 20 40 11       	sub    $0x11402000,%eax
f0103444:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0103447:	76 15                	jbe    f010345e <pf_add_empty_env_page+0x6b>
			ptr_env->nNewPageAdded++ ;
f0103449:	8b 45 08             	mov    0x8(%ebp),%eax
f010344c:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f0103452:	8d 50 01             	lea    0x1(%eax),%edx
f0103455:	8b 45 08             	mov    0x8(%ebp),%eax
f0103458:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
		//======================
		return pf_add_env_page(ptr_env, virtual_address, ptr_zero_page);
f010345e:	a1 bc 84 6e f0       	mov    0xf06e84bc,%eax
f0103463:	83 ec 04             	sub    $0x4,%esp
f0103466:	50                   	push   %eax
f0103467:	ff 75 0c             	pushl  0xc(%ebp)
f010346a:	ff 75 08             	pushl  0x8(%ebp)
f010346d:	e8 b2 00 00 00       	call   f0103524 <pf_add_env_page>
f0103472:	83 c4 10             	add    $0x10,%esp
f0103475:	e9 a8 00 00 00       	jmp    f0103522 <pf_add_empty_env_page+0x12f>
	}

	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010347a:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103481:	76 19                	jbe    f010349c <pf_add_empty_env_page+0xa9>
f0103483:	68 ac 48 13 f0       	push   $0xf01348ac
f0103488:	68 d2 48 13 f0       	push   $0xf01348d2
f010348d:	68 d1 00 00 00       	push   $0xd1
f0103492:	68 19 48 13 f0       	push   $0xf0134819
f0103497:	e8 0a cd ff ff       	call   f01001a6 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010349c:	8b 45 08             	mov    0x8(%ebp),%eax
f010349f:	83 c0 64             	add    $0x64,%eax
f01034a2:	83 ec 08             	sub    $0x8,%esp
f01034a5:	50                   	push   %eax
f01034a6:	ff 75 08             	pushl  0x8(%ebp)
f01034a9:	e8 46 06 00 00       	call   f0103af4 <get_disk_page_directory>
f01034ae:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f01034b1:	8b 45 08             	mov    0x8(%ebp),%eax
f01034b4:	8b 40 64             	mov    0x64(%eax),%eax
f01034b7:	8d 55 ec             	lea    -0x14(%ebp),%edx
f01034ba:	52                   	push   %edx
f01034bb:	6a 01                	push   $0x1
f01034bd:	ff 75 0c             	pushl  0xc(%ebp)
f01034c0:	50                   	push   %eax
f01034c1:	e8 04 fe ff ff       	call   f01032ca <get_disk_page_table>
f01034c6:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01034c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01034cc:	8b 55 0c             	mov    0xc(%ebp),%edx
f01034cf:	c1 ea 0c             	shr    $0xc,%edx
f01034d2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01034d8:	c1 e2 02             	shl    $0x2,%edx
f01034db:	01 d0                	add    %edx,%eax
f01034dd:	8b 00                	mov    (%eax),%eax
f01034df:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if( dfn == 0)
f01034e2:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01034e5:	85 c0                	test   %eax,%eax
f01034e7:	75 34                	jne    f010351d <pf_add_empty_env_page+0x12a>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f01034e9:	83 ec 0c             	sub    $0xc,%esp
f01034ec:	8d 45 e8             	lea    -0x18(%ebp),%eax
f01034ef:	50                   	push   %eax
f01034f0:	e8 2d fc ff ff       	call   f0103122 <allocate_disk_frame>
f01034f5:	83 c4 10             	add    $0x10,%esp
f01034f8:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01034fb:	75 07                	jne    f0103504 <pf_add_empty_env_page+0x111>
f01034fd:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103502:	eb 1e                	jmp    f0103522 <pf_add_empty_env_page+0x12f>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f0103504:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103507:	8b 55 0c             	mov    0xc(%ebp),%edx
f010350a:	c1 ea 0c             	shr    $0xc,%edx
f010350d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103513:	c1 e2 02             	shl    $0x2,%edx
f0103516:	01 c2                	add    %eax,%edx
f0103518:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010351b:	89 02                	mov    %eax,(%edx)
	}

	return 0;
f010351d:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0103522:	c9                   	leave  
f0103523:	c3                   	ret    

f0103524 <pf_add_env_page>:

int pf_add_env_page( struct Env* ptr_env, uint32 virtual_address, void* dataSrc)
{
f0103524:	55                   	push   %ebp
f0103525:	89 e5                	mov    %esp,%ebp
f0103527:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	uint32 *ptr_disk_page_table;
	assert((uint32)virtual_address < KERNEL_BASE);
f010352a:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103531:	76 19                	jbe    f010354c <pf_add_env_page+0x28>
f0103533:	68 ac 48 13 f0       	push   $0xf01348ac
f0103538:	68 d2 48 13 f0       	push   $0xf01348d2
f010353d:	68 e6 00 00 00       	push   $0xe6
f0103542:	68 19 48 13 f0       	push   $0xf0134819
f0103547:	e8 5a cc ff ff       	call   f01001a6 <_panic>

	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010354c:	8b 45 08             	mov    0x8(%ebp),%eax
f010354f:	83 c0 64             	add    $0x64,%eax
f0103552:	83 ec 08             	sub    $0x8,%esp
f0103555:	50                   	push   %eax
f0103556:	ff 75 08             	pushl  0x8(%ebp)
f0103559:	e8 96 05 00 00       	call   f0103af4 <get_disk_page_directory>
f010355e:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir,  virtual_address, 1, &ptr_disk_page_table) ;
f0103561:	8b 45 08             	mov    0x8(%ebp),%eax
f0103564:	8b 40 64             	mov    0x64(%eax),%eax
f0103567:	8d 55 f0             	lea    -0x10(%ebp),%edx
f010356a:	52                   	push   %edx
f010356b:	6a 01                	push   $0x1
f010356d:	ff 75 0c             	pushl  0xc(%ebp)
f0103570:	50                   	push   %eax
f0103571:	e8 54 fd ff ff       	call   f01032ca <get_disk_page_table>
f0103576:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103579:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010357c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010357f:	c1 ea 0c             	shr    $0xc,%edx
f0103582:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103588:	c1 e2 02             	shl    $0x2,%edx
f010358b:	01 d0                	add    %edx,%eax
f010358d:	8b 00                	mov    (%eax),%eax
f010358f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if( dfn == 0)
f0103592:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103595:	85 c0                	test   %eax,%eax
f0103597:	75 34                	jne    f01035cd <pf_add_env_page+0xa9>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103599:	83 ec 0c             	sub    $0xc,%esp
f010359c:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010359f:	50                   	push   %eax
f01035a0:	e8 7d fb ff ff       	call   f0103122 <allocate_disk_frame>
f01035a5:	83 c4 10             	add    $0x10,%esp
f01035a8:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01035ab:	75 07                	jne    f01035b4 <pf_add_env_page+0x90>
f01035ad:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f01035b2:	eb 31                	jmp    f01035e5 <pf_add_env_page+0xc1>
		ptr_disk_page_table[PTX(virtual_address)] = dfn;
f01035b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01035b7:	8b 55 0c             	mov    0xc(%ebp),%edx
f01035ba:	c1 ea 0c             	shr    $0xc,%edx
f01035bd:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01035c3:	c1 e2 02             	shl    $0x2,%edx
f01035c6:	01 c2                	add    %eax,%edx
f01035c8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01035cb:	89 02                	mov    %eax,(%edx)
	//	uint32 oldDir = rcr3();
	//	lcr3(K_PHYSICAL_ADDRESS(ptr_env->env_pgdir));
	//	int ret = write_disk_page(dfn, (void*)dataSrc);
	//	lcr3(oldDir);

	int ret = write_disk_page(dfn, (void*)dataSrc);
f01035cd:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01035d0:	83 ec 08             	sub    $0x8,%esp
f01035d3:	ff 75 10             	pushl  0x10(%ebp)
f01035d6:	50                   	push   %eax
f01035d7:	e8 99 f9 ff ff       	call   f0102f75 <write_disk_page>
f01035dc:	83 c4 10             	add    $0x10,%esp
f01035df:	89 45 f4             	mov    %eax,-0xc(%ebp)
	return ret;
f01035e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01035e5:	c9                   	leave  
f01035e6:	c3                   	ret    

f01035e7 <pf_update_env_page>:

int pf_update_env_page(struct Env* ptr_env, uint32 virtual_address, struct FrameInfo* modified_page_frame_info)
{
f01035e7:	55                   	push   %ebp
f01035e8:	89 e5                	mov    %esp,%ebp
f01035ea:	83 ec 38             	sub    $0x38,%esp
	int ret;
	uint32 *ptr_disk_page_table;
	//ROUND DOWN it on 4 KB boundary in order to update the entire page starting from its first address.
	//virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);

	assert((uint32)virtual_address < KERNEL_BASE);
f01035ed:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f01035f4:	76 19                	jbe    f010360f <pf_update_env_page+0x28>
f01035f6:	68 ac 48 13 f0       	push   $0xf01348ac
f01035fb:	68 d2 48 13 f0       	push   $0xf01348d2
f0103600:	68 08 01 00 00       	push   $0x108
f0103605:	68 19 48 13 f0       	push   $0xf0134819
f010360a:	e8 97 cb ff ff       	call   f01001a6 <_panic>
	//char c = *((char*)virtual_address);
	//Get/Create the directory table
	get_disk_page_directory(ptr_env, &(ptr_env->disk_env_pgdir)) ;
f010360f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103612:	83 c0 64             	add    $0x64,%eax
f0103615:	83 ec 08             	sub    $0x8,%esp
f0103618:	50                   	push   %eax
f0103619:	ff 75 08             	pushl  0x8(%ebp)
f010361c:	e8 d3 04 00 00       	call   f0103af4 <get_disk_page_directory>
f0103621:	83 c4 10             	add    $0x10,%esp

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103624:	8b 45 08             	mov    0x8(%ebp),%eax
f0103627:	8b 40 64             	mov    0x64(%eax),%eax
f010362a:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f010362d:	52                   	push   %edx
f010362e:	6a 00                	push   $0x0
f0103630:	ff 75 0c             	pushl  0xc(%ebp)
f0103633:	50                   	push   %eax
f0103634:	e8 91 fc ff ff       	call   f01032ca <get_disk_page_table>
f0103639:	83 c4 10             	add    $0x10,%esp

	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
f010363c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010363f:	85 c0                	test   %eax,%eax
f0103641:	74 29                	je     f010366c <pf_update_env_page+0x85>
f0103643:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103646:	85 c0                	test   %eax,%eax
f0103648:	0f 84 43 01 00 00    	je     f0103791 <pf_update_env_page+0x1aa>
f010364e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0103651:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103654:	c1 ea 0c             	shr    $0xc,%edx
f0103657:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010365d:	c1 e2 02             	shl    $0x2,%edx
f0103660:	01 d0                	add    %edx,%eax
f0103662:	8b 00                	mov    (%eax),%eax
f0103664:	85 c0                	test   %eax,%eax
f0103666:	0f 85 25 01 00 00    	jne    f0103791 <pf_update_env_page+0x1aa>
	{
		uint32 VA = (uint32)virtual_address ;
f010366c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010366f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
f0103672:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103675:	85 c0                	test   %eax,%eax
f0103677:	79 09                	jns    f0103682 <pf_update_env_page+0x9b>
f0103679:	81 7d f4 ff ff ff 9f 	cmpl   $0x9fffffff,-0xc(%ebp)
f0103680:	76 38                	jbe    f01036ba <pf_update_env_page+0xd3>
f0103682:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0103689:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010368c:	2d 01 e0 f9 5f       	sub    $0x5ff9e001,%eax
f0103691:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103694:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103697:	ba 00 00 00 00       	mov    $0x0,%edx
f010369c:	f7 75 f0             	divl   -0x10(%ebp)
f010369f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01036a2:	29 d0                	sub    %edx,%eax
f01036a4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01036a7:	0f 87 cd 00 00 00    	ja     f010377a <pf_update_env_page+0x193>
f01036ad:	81 7d f4 ff df bf ee 	cmpl   $0xeebfdfff,-0xc(%ebp)
f01036b4:	0f 87 c0 00 00 00    	ja     f010377a <pf_update_env_page+0x193>
		{
			uint32 *ptr_table ;
			struct FrameInfo* ptr_fi = get_frame_info(ptr_env->env_page_directory, virtual_address, &ptr_table);
f01036ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01036bd:	8b 40 5c             	mov    0x5c(%eax),%eax
f01036c0:	83 ec 04             	sub    $0x4,%esp
f01036c3:	8d 55 d0             	lea    -0x30(%ebp),%edx
f01036c6:	52                   	push   %edx
f01036c7:	ff 75 0c             	pushl  0xc(%ebp)
f01036ca:	50                   	push   %eax
f01036cb:	e8 39 35 00 00       	call   f0106c09 <get_frame_info>
f01036d0:	83 c4 10             	add    $0x10,%esp
f01036d3:	89 45 e8             	mov    %eax,-0x18(%ebp)
			//if VA already mapped on the same modified_page_frame_info, then write it directly from the VA
			if (ptr_fi == modified_page_frame_info)
f01036d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01036d9:	3b 45 10             	cmp    0x10(%ebp),%eax
f01036dc:	75 52                	jne    f0103730 <pf_update_env_page+0x149>
			{
				ret = pf_add_env_page(ptr_env, VA, (void*)virtual_address) ;
f01036de:	8b 45 0c             	mov    0xc(%ebp),%eax
f01036e1:	83 ec 04             	sub    $0x4,%esp
f01036e4:	50                   	push   %eax
f01036e5:	ff 75 f4             	pushl  -0xc(%ebp)
f01036e8:	ff 75 08             	pushl  0x8(%ebp)
f01036eb:	e8 34 fe ff ff       	call   f0103524 <pf_add_env_page>
f01036f0:	83 c4 10             	add    $0x10,%esp
f01036f3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f01036f6:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f01036fa:	75 17                	jne    f0103713 <pf_update_env_page+0x12c>
				{
					panic("pf_update_env_page: page file out of space!") ;
f01036fc:	83 ec 04             	sub    $0x4,%esp
f01036ff:	68 e8 48 13 f0       	push   $0xf01348e8
f0103704:	68 1d 01 00 00       	push   $0x11d
f0103709:	68 19 48 13 f0       	push   $0xf0134819
f010370e:	e8 93 ca ff ff       	call   f01001a6 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103713:	8b 45 08             	mov    0x8(%ebp),%eax
f0103716:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f010371c:	8d 50 01             	lea    0x1(%eax),%edx
f010371f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103722:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
				return ret ;
f0103728:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010372b:	e9 ff 00 00 00       	jmp    f010382f <pf_update_env_page+0x248>
			}
			//Else, just add a new empty page to the page file, then update it with the given modified_page_frame_info in the below code
			else
			{
				ret = pf_add_empty_env_page(ptr_env, VA, 0);
f0103730:	83 ec 04             	sub    $0x4,%esp
f0103733:	6a 00                	push   $0x0
f0103735:	ff 75 f4             	pushl  -0xc(%ebp)
f0103738:	ff 75 08             	pushl  0x8(%ebp)
f010373b:	e8 b3 fc ff ff       	call   f01033f3 <pf_add_empty_env_page>
f0103740:	83 c4 10             	add    $0x10,%esp
f0103743:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				if (ret == E_NO_PAGE_FILE_SPACE)
f0103746:	83 7d e4 f8          	cmpl   $0xfffffff8,-0x1c(%ebp)
f010374a:	75 17                	jne    f0103763 <pf_update_env_page+0x17c>
				{
					panic("pf_update_env_page: attempt to add a new page, but page file out of space!") ;
f010374c:	83 ec 04             	sub    $0x4,%esp
f010374f:	68 14 49 13 f0       	push   $0xf0134914
f0103754:	68 28 01 00 00       	push   $0x128
f0103759:	68 19 48 13 f0       	push   $0xf0134819
f010375e:	e8 43 ca ff ff       	call   f01001a6 <_panic>
				}
				ptr_env->nNewPageAdded++ ;
f0103763:	8b 45 08             	mov    0x8(%ebp),%eax
f0103766:	8b 80 10 da 01 00    	mov    0x1da10(%eax),%eax
f010376c:	8d 50 01             	lea    0x1(%eax),%edx
f010376f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103772:	89 90 10 da 01 00    	mov    %edx,0x1da10(%eax)
	/*2022*///==========
	if(ptr_disk_page_table == NULL || (ptr_disk_page_table != NULL && ptr_disk_page_table[PTX(virtual_address)]== 0))
	{
		uint32 VA = (uint32)virtual_address ;
		if ((VA >= USER_HEAP_START && VA < USER_HEAP_MAX) || (VA >= USTACKBOTTOM && VA < USTACKTOP))
		{
f0103778:	eb 17                	jmp    f0103791 <pf_update_env_page+0x1aa>
				ptr_env->nNewPageAdded++ ;
			}
		}
		else
		{
			panic("pf_update_env_page: Invalid Access - Attempt to add a new page to page file that's outside the USER HEAP and USER STACK!");
f010377a:	83 ec 04             	sub    $0x4,%esp
f010377d:	68 60 49 13 f0       	push   $0xf0134960
f0103782:	68 2f 01 00 00       	push   $0x12f
f0103787:	68 19 48 13 f0       	push   $0xf0134819
f010378c:	e8 15 ca ff ff       	call   f01001a6 <_panic>
		}
	}
	//2022 END========================================

	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f0103791:	8b 45 08             	mov    0x8(%ebp),%eax
f0103794:	8b 40 64             	mov    0x64(%eax),%eax
f0103797:	8d 55 d4             	lea    -0x2c(%ebp),%edx
f010379a:	52                   	push   %edx
f010379b:	6a 00                	push   $0x0
f010379d:	ff 75 0c             	pushl  0xc(%ebp)
f01037a0:	50                   	push   %eax
f01037a1:	e8 24 fb ff ff       	call   f01032ca <get_disk_page_table>
f01037a6:	83 c4 10             	add    $0x10,%esp
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f01037a9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01037ac:	8b 55 0c             	mov    0xc(%ebp),%edx
f01037af:	c1 ea 0c             	shr    $0xc,%edx
f01037b2:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01037b8:	c1 e2 02             	shl    $0x2,%edx
f01037bb:	01 d0                	add    %edx,%eax
f01037bd:	8b 00                	mov    (%eax),%eax
f01037bf:	89 45 e0             	mov    %eax,-0x20(%ebp)

		//cprintf("[%s] updating page\n",ptr_env->prog_name);
	}
#else
	{
		ret = write_disk_page(dfn, STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(modified_page_frame_info)));
f01037c2:	83 ec 0c             	sub    $0xc,%esp
f01037c5:	ff 75 10             	pushl  0x10(%ebp)
f01037c8:	e8 20 f7 ff ff       	call   f0102eed <to_physical_address>
f01037cd:	83 c4 10             	add    $0x10,%esp
f01037d0:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01037d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01037d6:	c1 e8 0c             	shr    $0xc,%eax
f01037d9:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01037dc:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01037e1:	39 45 d8             	cmp    %eax,-0x28(%ebp)
f01037e4:	72 17                	jb     f01037fd <pf_update_env_page+0x216>
f01037e6:	ff 75 dc             	pushl  -0x24(%ebp)
f01037e9:	68 7c 48 13 f0       	push   $0xf013487c
f01037ee:	68 47 01 00 00       	push   $0x147
f01037f3:	68 19 48 13 f0       	push   $0xf0134819
f01037f8:	e8 a9 c9 ff ff       	call   f01001a6 <_panic>
f01037fd:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103800:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103805:	83 ec 08             	sub    $0x8,%esp
f0103808:	50                   	push   %eax
f0103809:	ff 75 e0             	pushl  -0x20(%ebp)
f010380c:	e8 64 f7 ff ff       	call   f0102f75 <write_disk_page>
f0103811:	83 c4 10             	add    $0x10,%esp
f0103814:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		//cprintf("[%s] finished updating page\n",ptr_env->prog_name);
	}
#endif
	//2020
	ptr_env->nPageOut++ ;
f0103817:	8b 45 08             	mov    0x8(%ebp),%eax
f010381a:	8b 80 0c da 01 00    	mov    0x1da0c(%eax),%eax
f0103820:	8d 50 01             	lea    0x1(%eax),%edx
f0103823:	8b 45 08             	mov    0x8(%ebp),%eax
f0103826:	89 90 0c da 01 00    	mov    %edx,0x1da0c(%eax)
	//======================

	return ret;
f010382c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
}
f010382f:	c9                   	leave  
f0103830:	c3                   	ret    

f0103831 <pf_read_env_page>:

int pf_read_env_page(struct Env* ptr_env, void* virtual_address)
{
f0103831:	55                   	push   %ebp
f0103832:	89 e5                	mov    %esp,%ebp
f0103834:	83 ec 18             	sub    $0x18,%esp
	uint32 *ptr_disk_page_table;

	//ROUND DOWN it on 4 KB boundary in order to read the entire page starting from its first address.
	virtual_address = ROUNDDOWN(virtual_address, PAGE_SIZE);
f0103837:	8b 45 0c             	mov    0xc(%ebp),%eax
f010383a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010383d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103840:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103845:	89 45 0c             	mov    %eax,0xc(%ebp)

	if( ptr_env->disk_env_pgdir == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103848:	8b 45 08             	mov    0x8(%ebp),%eax
f010384b:	8b 40 64             	mov    0x64(%eax),%eax
f010384e:	85 c0                	test   %eax,%eax
f0103850:	75 0a                	jne    f010385c <pf_read_env_page+0x2b>
f0103852:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103857:	e9 90 00 00 00       	jmp    f01038ec <pf_read_env_page+0xbb>

	get_disk_page_table(ptr_env->disk_env_pgdir, (uint32) virtual_address, 0, &ptr_disk_page_table);
f010385c:	8b 55 0c             	mov    0xc(%ebp),%edx
f010385f:	8b 45 08             	mov    0x8(%ebp),%eax
f0103862:	8b 40 64             	mov    0x64(%eax),%eax
f0103865:	8d 4d e8             	lea    -0x18(%ebp),%ecx
f0103868:	51                   	push   %ecx
f0103869:	6a 00                	push   $0x0
f010386b:	52                   	push   %edx
f010386c:	50                   	push   %eax
f010386d:	e8 58 fa ff ff       	call   f01032ca <get_disk_page_table>
f0103872:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return E_PAGE_NOT_EXIST_IN_PF;
f0103875:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103878:	85 c0                	test   %eax,%eax
f010387a:	75 07                	jne    f0103883 <pf_read_env_page+0x52>
f010387c:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f0103881:	eb 69                	jmp    f01038ec <pf_read_env_page+0xbb>

	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f0103883:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103886:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103889:	c1 ea 0c             	shr    $0xc,%edx
f010388c:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103892:	c1 e2 02             	shl    $0x2,%edx
f0103895:	01 d0                	add    %edx,%eax
f0103897:	8b 00                	mov    (%eax),%eax
f0103899:	89 45 f0             	mov    %eax,-0x10(%ebp)

	if( dfn == 0) return E_PAGE_NOT_EXIST_IN_PF;
f010389c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01038a0:	75 07                	jne    f01038a9 <pf_read_env_page+0x78>
f01038a2:	b8 f7 ff ff ff       	mov    $0xfffffff7,%eax
f01038a7:	eb 43                	jmp    f01038ec <pf_read_env_page+0xbb>

	int disk_read_error = read_disk_page(dfn, virtual_address);
f01038a9:	83 ec 08             	sub    $0x8,%esp
f01038ac:	ff 75 0c             	pushl  0xc(%ebp)
f01038af:	ff 75 f0             	pushl  -0x10(%ebp)
f01038b2:	e8 8f f6 ff ff       	call   f0102f46 <read_disk_page>
f01038b7:	83 c4 10             	add    $0x10,%esp
f01038ba:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//reset modified bit to 0: because FOS copies the placed or replaced page from
	//HD to memory, the page modified bit is set to 1, but we want the modified bit to be
	// affected only by "user code" modifications, not our (FOS kernel) modifications
	pt_set_page_permissions(ptr_env->env_page_directory, (uint32)virtual_address, 0, PERM_MODIFIED);
f01038bd:	8b 55 0c             	mov    0xc(%ebp),%edx
f01038c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01038c3:	8b 40 5c             	mov    0x5c(%eax),%eax
f01038c6:	6a 40                	push   $0x40
f01038c8:	6a 00                	push   $0x0
f01038ca:	52                   	push   %edx
f01038cb:	50                   	push   %eax
f01038cc:	e8 e3 3b 00 00       	call   f01074b4 <pt_set_page_permissions>
f01038d1:	83 c4 10             	add    $0x10,%esp

	//2020
	ptr_env->nPageIn++ ;
f01038d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01038d7:	8b 80 08 da 01 00    	mov    0x1da08(%eax),%eax
f01038dd:	8d 50 01             	lea    0x1(%eax),%edx
f01038e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01038e3:	89 90 08 da 01 00    	mov    %edx,0x1da08(%eax)
	//======================

	return disk_read_error;
f01038e9:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f01038ec:	c9                   	leave  
f01038ed:	c3                   	ret    

f01038ee <pf_remove_env_page>:

void pf_remove_env_page(struct Env* ptr_env, uint32 virtual_address)
{
f01038ee:	55                   	push   %ebp
f01038ef:	89 e5                	mov    %esp,%ebp
f01038f1:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f01038f4:	8b 45 08             	mov    0x8(%ebp),%eax
f01038f7:	8b 40 64             	mov    0x64(%eax),%eax
f01038fa:	85 c0                	test   %eax,%eax
f01038fc:	74 62                	je     f0103960 <pf_remove_env_page+0x72>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
f01038fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0103901:	8b 40 64             	mov    0x64(%eax),%eax
f0103904:	8d 55 f0             	lea    -0x10(%ebp),%edx
f0103907:	52                   	push   %edx
f0103908:	6a 00                	push   $0x0
f010390a:	ff 75 0c             	pushl  0xc(%ebp)
f010390d:	50                   	push   %eax
f010390e:	e8 b7 f9 ff ff       	call   f01032ca <get_disk_page_table>
f0103913:	83 c4 10             	add    $0x10,%esp
	if(ptr_disk_page_table == 0) return;
f0103916:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103919:	85 c0                	test   %eax,%eax
f010391b:	74 46                	je     f0103963 <pf_remove_env_page+0x75>

	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
f010391d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103920:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103923:	c1 ea 0c             	shr    $0xc,%edx
f0103926:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010392c:	c1 e2 02             	shl    $0x2,%edx
f010392f:	01 d0                	add    %edx,%eax
f0103931:	8b 00                	mov    (%eax),%eax
f0103933:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_disk_page_table[PTX(virtual_address)] = 0;
f0103936:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103939:	8b 55 0c             	mov    0xc(%ebp),%edx
f010393c:	c1 ea 0c             	shr    $0xc,%edx
f010393f:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0103945:	c1 e2 02             	shl    $0x2,%edx
f0103948:	01 d0                	add    %edx,%eax
f010394a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103950:	83 ec 0c             	sub    $0xc,%esp
f0103953:	ff 75 f4             	pushl  -0xc(%ebp)
f0103956:	e8 8e f8 ff ff       	call   f01031e9 <free_disk_frame>
f010395b:	83 c4 10             	add    $0x10,%esp
f010395e:	eb 04                	jmp    f0103964 <pf_remove_env_page+0x76>
{
	//LOG_STRING("pf_remove_env_page: 0");
	uint32 *ptr_disk_page_table;

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_pgdir == 0) return;
f0103960:	90                   	nop
f0103961:	eb 01                	jmp    f0103964 <pf_remove_env_page+0x76>

	//LOG_STRING("pf_remove_env_page: 1");
	get_disk_page_table(ptr_env->disk_env_pgdir, virtual_address, 0, &ptr_disk_page_table);
	if(ptr_disk_page_table == 0) return;
f0103963:	90                   	nop
	//LOG_STRING("pf_remove_env_page: 2");
	uint32 dfn=ptr_disk_page_table[PTX(virtual_address)];
	ptr_disk_page_table[PTX(virtual_address)] = 0;
	free_disk_frame(dfn);
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103964:	c9                   	leave  
f0103965:	c3                   	ret    

f0103966 <pf_free_env>:

void pf_free_env(struct Env* ptr_env)
{
f0103966:	55                   	push   %ebp
f0103967:	89 e5                	mov    %esp,%ebp
f0103969:	83 ec 28             	sub    $0x28,%esp
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f010396c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103973:	e9 ee 00 00 00       	jmp    f0103a66 <pf_free_env+0x100>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
f0103978:	8b 45 08             	mov    0x8(%ebp),%eax
f010397b:	8b 40 64             	mov    0x64(%eax),%eax
f010397e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103981:	c1 e2 02             	shl    $0x2,%edx
f0103984:	01 d0                	add    %edx,%eax
f0103986:	8b 00                	mov    (%eax),%eax
f0103988:	83 e0 01             	and    $0x1,%eax
f010398b:	85 c0                	test   %eax,%eax
f010398d:	0f 84 cf 00 00 00    	je     f0103a62 <pf_free_env+0xfc>
			continue;

		// find the pa and va of the page table
		uint32 pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdeno]);
f0103993:	8b 45 08             	mov    0x8(%ebp),%eax
f0103996:	8b 40 64             	mov    0x64(%eax),%eax
f0103999:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010399c:	c1 e2 02             	shl    $0x2,%edx
f010399f:	01 d0                	add    %edx,%eax
f01039a1:	8b 00                	mov    (%eax),%eax
f01039a3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01039a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f01039ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01039ae:	89 45 e8             	mov    %eax,-0x18(%ebp)
f01039b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039b4:	c1 e8 0c             	shr    $0xc,%eax
f01039b7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01039ba:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01039bf:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f01039c2:	72 17                	jb     f01039db <pf_free_env+0x75>
f01039c4:	ff 75 e8             	pushl  -0x18(%ebp)
f01039c7:	68 7c 48 13 f0       	push   $0xf013487c
f01039cc:	68 96 01 00 00       	push   $0x196
f01039d1:	68 19 48 13 f0       	push   $0xf0134819
f01039d6:	e8 cb c7 ff ff       	call   f01001a6 <_panic>
f01039db:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01039de:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01039e3:	89 45 e0             	mov    %eax,-0x20(%ebp)
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f01039e6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01039ed:	eb 3a                	jmp    f0103a29 <pf_free_env+0xc3>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[pteno];
f01039ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01039f2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01039f9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01039fc:	01 d0                	add    %edx,%eax
f01039fe:	8b 00                	mov    (%eax),%eax
f0103a00:	89 45 dc             	mov    %eax,-0x24(%ebp)
			pt[pteno] = 0;
f0103a03:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103a06:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103a0d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0103a10:	01 d0                	add    %edx,%eax
f0103a12:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			// and declare it free
			free_disk_frame(dfn);
f0103a18:	83 ec 0c             	sub    $0xc,%esp
f0103a1b:	ff 75 dc             	pushl  -0x24(%ebp)
f0103a1e:	e8 c6 f7 ff ff       	call   f01031e9 <free_disk_frame>
f0103a23:	83 c4 10             	add    $0x10,%esp
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
		}
#endif
		// unmap all PTEs in this page table
		uint32 pteno;
		for (pteno = 0; pteno < 1024; pteno++)
f0103a26:	ff 45 f0             	incl   -0x10(%ebp)
f0103a29:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
f0103a30:	76 bd                	jbe    f01039ef <pf_free_env+0x89>
			// and declare it free
			free_disk_frame(dfn);
		}

		// free the disk page table itself
		ptr_env->disk_env_pgdir[pdeno] = 0;
f0103a32:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a35:	8b 40 64             	mov    0x64(%eax),%eax
f0103a38:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103a3b:	c1 e2 02             	shl    $0x2,%edx
f0103a3e:	01 d0                	add    %edx,%eax
f0103a40:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		{
			kfree(pt);
		}
#else
		{
			decrement_references(to_frame_info(pa));
f0103a46:	83 ec 0c             	sub    $0xc,%esp
f0103a49:	ff 75 ec             	pushl  -0x14(%ebp)
f0103a4c:	e8 af f4 ff ff       	call   f0102f00 <to_frame_info>
f0103a51:	83 c4 10             	add    $0x10,%esp
f0103a54:	83 ec 0c             	sub    $0xc,%esp
f0103a57:	50                   	push   %eax
f0103a58:	e8 e4 2e 00 00       	call   f0106941 <decrement_references>
f0103a5d:	83 c4 10             	add    $0x10,%esp
f0103a60:	eb 01                	jmp    f0103a63 <pf_free_env+0xfd>

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdeno] & PERM_PRESENT))
			continue;
f0103a62:	90                   	nop

void pf_free_env(struct Env* ptr_env)
{
	uint32 pdeno;

	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103a63:	ff 45 f4             	incl   -0xc(%ebp)
f0103a66:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103a6d:	0f 86 05 ff ff ff    	jbe    f0103978 <pf_free_env+0x12>
	{
		kfree(ptr_env->disk_env_pgdir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_pgdir_PA));
f0103a73:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a76:	8b 40 68             	mov    0x68(%eax),%eax
f0103a79:	83 ec 0c             	sub    $0xc,%esp
f0103a7c:	50                   	push   %eax
f0103a7d:	e8 7e f4 ff ff       	call   f0102f00 <to_frame_info>
f0103a82:	83 c4 10             	add    $0x10,%esp
f0103a85:	83 ec 0c             	sub    $0xc,%esp
f0103a88:	50                   	push   %eax
f0103a89:	e8 b3 2e 00 00       	call   f0106941 <decrement_references>
f0103a8e:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_pgdir = 0;
f0103a91:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a94:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	ptr_env->disk_env_pgdir_PA = 0;
f0103a9b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103a9e:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
f0103aa5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103aa8:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103aab:	85 c0                	test   %eax,%eax
f0103aad:	74 42                	je     f0103af1 <pf_free_env+0x18b>
		return;
	__pf_remove_env_all_tables(ptr_env);
f0103aaf:	83 ec 0c             	sub    $0xc,%esp
f0103ab2:	ff 75 08             	pushl  0x8(%ebp)
f0103ab5:	e8 ee 03 00 00       	call   f0103ea8 <__pf_remove_env_all_tables>
f0103aba:	83 c4 10             	add    $0x10,%esp
	{
		kfree(ptr_env->disk_env_tabledir);
	}
#else
	{
		decrement_references(to_frame_info(ptr_env->disk_env_tabledir_PA));
f0103abd:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ac0:	8b 40 70             	mov    0x70(%eax),%eax
f0103ac3:	83 ec 0c             	sub    $0xc,%esp
f0103ac6:	50                   	push   %eax
f0103ac7:	e8 34 f4 ff ff       	call   f0102f00 <to_frame_info>
f0103acc:	83 c4 10             	add    $0x10,%esp
f0103acf:	83 ec 0c             	sub    $0xc,%esp
f0103ad2:	50                   	push   %eax
f0103ad3:	e8 69 2e 00 00       	call   f0106941 <decrement_references>
f0103ad8:	83 c4 10             	add    $0x10,%esp
	}
#endif
	ptr_env->disk_env_tabledir = 0;
f0103adb:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ade:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	ptr_env->disk_env_tabledir_PA = 0;
f0103ae5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ae8:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)
f0103aef:	eb 01                	jmp    f0103af2 <pf_free_env+0x18c>
	ptr_env->disk_env_pgdir_PA = 0;


	// remove all tables and the disk table
	if (ptr_env->disk_env_tabledir == 0)
		return;
f0103af1:	90                   	nop
	}
#endif
	ptr_env->disk_env_tabledir = 0;
	ptr_env->disk_env_tabledir_PA = 0;

}
f0103af2:	c9                   	leave  
f0103af3:	c3                   	ret    

f0103af4 <get_disk_page_directory>:


int get_disk_page_directory(struct Env* ptr_env, uint32** ptr_disk_page_directory)
{
f0103af4:	55                   	push   %ebp
f0103af5:	89 e5                	mov    %esp,%ebp
f0103af7:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_page_directory = ptr_env->disk_env_pgdir;
f0103afa:	8b 45 08             	mov    0x8(%ebp),%eax
f0103afd:	8b 50 64             	mov    0x64(%eax),%edx
f0103b00:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b03:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_page_directory == 0)
f0103b05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b08:	8b 00                	mov    (%eax),%eax
f0103b0a:	85 c0                	test   %eax,%eax
f0103b0c:	0f 85 aa 00 00 00    	jne    f0103bbc <get_disk_page_directory+0xc8>
			ptr_env->disk_env_pgdir_PA = kheap_physical_address((unsigned int)*ptr_disk_page_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0103b12:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0103b19:	83 ec 0c             	sub    $0xc,%esp
f0103b1c:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103b1f:	50                   	push   %eax
f0103b20:	e8 8d 2c 00 00       	call   f01067b2 <allocate_frame>
f0103b25:	83 c4 10             	add    $0x10,%esp
f0103b28:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103b2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103b2f:	79 08                	jns    f0103b39 <get_disk_page_directory+0x45>
				return r;
f0103b31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103b34:	e9 88 00 00 00       	jmp    f0103bc1 <get_disk_page_directory+0xcd>
			p->references = 1;
f0103b39:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b3c:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0103b42:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b45:	83 ec 0c             	sub    $0xc,%esp
f0103b48:	50                   	push   %eax
f0103b49:	e8 9f f3 ff ff       	call   f0102eed <to_physical_address>
f0103b4e:	83 c4 10             	add    $0x10,%esp
f0103b51:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103b54:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b57:	c1 e8 0c             	shr    $0xc,%eax
f0103b5a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103b5d:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0103b62:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103b65:	72 17                	jb     f0103b7e <get_disk_page_directory+0x8a>
f0103b67:	ff 75 f0             	pushl  -0x10(%ebp)
f0103b6a:	68 7c 48 13 f0       	push   $0xf013487c
f0103b6f:	68 ee 01 00 00       	push   $0x1ee
f0103b74:	68 19 48 13 f0       	push   $0xf0134819
f0103b79:	e8 28 c6 ff ff       	call   f01001a6 <_panic>
f0103b7e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103b81:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103b86:	89 c2                	mov    %eax,%edx
f0103b88:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103b8b:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_pgdir_PA = to_physical_address(p);
f0103b8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103b90:	83 ec 0c             	sub    $0xc,%esp
f0103b93:	50                   	push   %eax
f0103b94:	e8 54 f3 ff ff       	call   f0102eed <to_physical_address>
f0103b99:	83 c4 10             	add    $0x10,%esp
f0103b9c:	89 c2                	mov    %eax,%edx
f0103b9e:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ba1:	89 50 68             	mov    %edx,0x68(%eax)
		}
#endif
		memset(*ptr_disk_page_directory , 0, PAGE_SIZE);
f0103ba4:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103ba7:	8b 00                	mov    (%eax),%eax
f0103ba9:	83 ec 04             	sub    $0x4,%esp
f0103bac:	68 00 10 00 00       	push   $0x1000
f0103bb1:	6a 00                	push   $0x0
f0103bb3:	50                   	push   %eax
f0103bb4:	e8 72 ca 02 00       	call   f013062b <memset>
f0103bb9:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103bbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103bc1:	c9                   	leave  
f0103bc2:	c3                   	ret    

f0103bc3 <pf_calculate_allocated_pages>:

int pf_calculate_allocated_pages(struct Env* ptr_env)
{
f0103bc3:	55                   	push   %ebp
f0103bc4:	89 e5                	mov    %esp,%ebp
f0103bc6:	83 ec 28             	sub    $0x28,%esp
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;
f0103bc9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103bd0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103bd7:	e9 a6 00 00 00       	jmp    f0103c82 <pf_calculate_allocated_pages+0xbf>
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
f0103bdc:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bdf:	8b 40 64             	mov    0x64(%eax),%eax
f0103be2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103be5:	c1 e2 02             	shl    $0x2,%edx
f0103be8:	01 d0                	add    %edx,%eax
f0103bea:	8b 00                	mov    (%eax),%eax
f0103bec:	83 e0 01             	and    $0x1,%eax
f0103bef:	85 c0                	test   %eax,%eax
f0103bf1:	0f 84 87 00 00 00    	je     f0103c7e <pf_calculate_allocated_pages+0xbb>
			continue;

		// find the pa and va of the page table
		pa = EXTRACT_ADDRESS(ptr_env->disk_env_pgdir[pdIndex]);
f0103bf7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103bfa:	8b 40 64             	mov    0x64(%eax),%eax
f0103bfd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103c00:	c1 e2 02             	shl    $0x2,%edx
f0103c03:	01 d0                	add    %edx,%eax
f0103c05:	8b 00                	mov    (%eax),%eax
f0103c07:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0103c0c:	89 45 e8             	mov    %eax,-0x18(%ebp)
		{
			pt = (uint32*) kheap_virtual_address(pa);
		}
#else
		{
			pt = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(pa);
f0103c0f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103c12:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0103c15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103c18:	c1 e8 0c             	shr    $0xc,%eax
f0103c1b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0103c1e:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0103c23:	39 45 e0             	cmp    %eax,-0x20(%ebp)
f0103c26:	72 17                	jb     f0103c3f <pf_calculate_allocated_pages+0x7c>
f0103c28:	ff 75 e4             	pushl  -0x1c(%ebp)
f0103c2b:	68 7c 48 13 f0       	push   $0xf013487c
f0103c30:	68 0e 02 00 00       	push   $0x20e
f0103c35:	68 19 48 13 f0       	push   $0xf0134819
f0103c3a:	e8 67 c5 ff ff       	call   f01001a6 <_panic>
f0103c3f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0103c42:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103c47:	89 45 dc             	mov    %eax,-0x24(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103c4a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0103c51:	eb 20                	jmp    f0103c73 <pf_calculate_allocated_pages+0xb0>
		{
			// remove the disk page from disk page table
			uint32 dfn=pt[ptIndex];
f0103c53:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0103c56:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0103c5d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0103c60:	01 d0                	add    %edx,%eax
f0103c62:	8b 00                	mov    (%eax),%eax
f0103c64:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if(dfn != 0)
f0103c67:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0103c6b:	74 03                	je     f0103c70 <pf_calculate_allocated_pages+0xad>
				counter ++;
f0103c6d:	ff 45 f0             	incl   -0x10(%ebp)
		}
#endif

		// unmap all PTEs in this page table
		uint32 ptIndex;
		for (ptIndex = 0; ptIndex < 1024; ptIndex++)
f0103c70:	ff 45 ec             	incl   -0x14(%ebp)
f0103c73:	81 7d ec ff 03 00 00 	cmpl   $0x3ff,-0x14(%ebp)
f0103c7a:	76 d7                	jbe    f0103c53 <pf_calculate_allocated_pages+0x90>
f0103c7c:	eb 01                	jmp    f0103c7f <pf_calculate_allocated_pages+0xbc>

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
	{
		// only look at mapped page tables
		if (!(ptr_env->disk_env_pgdir[pdIndex] & PERM_PRESENT))
			continue;
f0103c7e:	90                   	nop
	uint32 *pt;
	uint32 pdIndex;
	uint32 pa;
	uint32 counter=0;

	for (pdIndex = 0; pdIndex < PDX(USER_TOP) ; pdIndex++)
f0103c7f:	ff 45 f4             	incl   -0xc(%ebp)
f0103c82:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103c89:	0f 86 4d ff ff ff    	jbe    f0103bdc <pf_calculate_allocated_pages+0x19>
			if(dfn != 0)
				counter ++;
		}
	}

	return counter;
f0103c8f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103c92:	c9                   	leave  
f0103c93:	c3                   	ret    

f0103c94 <pf_calculate_free_frames>:

//2016:
//calculate the disk free frames from the disk free frame list
int pf_calculate_free_frames()
{
f0103c94:	55                   	push   %ebp
f0103c95:	89 e5                	mov    %esp,%ebp
f0103c97:	83 ec 10             	sub    $0x10,%esp
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;
f0103c9a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103ca1:	a1 14 85 6e f0       	mov    0xf06e8514,%eax
f0103ca6:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103ca9:	eb 0b                	jmp    f0103cb6 <pf_calculate_free_frames+0x22>
	{
		totalFreeDiskFrames++ ;
f0103cab:	ff 45 f8             	incl   -0x8(%ebp)
int pf_calculate_free_frames()
{
	struct FrameInfo *ptr;
	uint32 totalFreeDiskFrames = 0 ;

	LIST_FOREACH(ptr, &disk_free_frame_list)
f0103cae:	a1 1c 85 6e f0       	mov    0xf06e851c,%eax
f0103cb3:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0103cb6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103cba:	74 07                	je     f0103cc3 <pf_calculate_free_frames+0x2f>
f0103cbc:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0103cbf:	8b 00                	mov    (%eax),%eax
f0103cc1:	eb 05                	jmp    f0103cc8 <pf_calculate_free_frames+0x34>
f0103cc3:	b8 00 00 00 00       	mov    $0x0,%eax
f0103cc8:	a3 1c 85 6e f0       	mov    %eax,0xf06e851c
f0103ccd:	a1 1c 85 6e f0       	mov    0xf06e851c,%eax
f0103cd2:	85 c0                	test   %eax,%eax
f0103cd4:	75 d5                	jne    f0103cab <pf_calculate_free_frames+0x17>
f0103cd6:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0103cda:	75 cf                	jne    f0103cab <pf_calculate_free_frames+0x17>
	{
		totalFreeDiskFrames++ ;
	}
	return totalFreeDiskFrames;
f0103cdc:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0103cdf:	c9                   	leave  
f0103ce0:	c3                   	ret    

f0103ce1 <get_disk_table_directory>:



/*========================== TABLE FILE MANAGMENT ==============================*/
int get_disk_table_directory(struct Env* ptr_env, uint32** ptr_disk_table_directory)
{
f0103ce1:	55                   	push   %ebp
f0103ce2:	89 e5                	mov    %esp,%ebp
f0103ce4:	83 ec 18             	sub    $0x18,%esp
	*ptr_disk_table_directory = ptr_env->disk_env_tabledir;
f0103ce7:	8b 45 08             	mov    0x8(%ebp),%eax
f0103cea:	8b 50 6c             	mov    0x6c(%eax),%edx
f0103ced:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cf0:	89 10                	mov    %edx,(%eax)
	if(*ptr_disk_table_directory == 0)
f0103cf2:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103cf5:	8b 00                	mov    (%eax),%eax
f0103cf7:	85 c0                	test   %eax,%eax
f0103cf9:	0f 85 aa 00 00 00    	jne    f0103da9 <get_disk_table_directory+0xc8>
			ptr_env->disk_env_tabledir_PA = kheap_physical_address((uint32)*ptr_disk_table_directory);
		}
#else
		{
			int r;
			struct FrameInfo *p = NULL;
f0103cff:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)

			if ((r = allocate_frame(&p)) < 0)
f0103d06:	83 ec 0c             	sub    $0xc,%esp
f0103d09:	8d 45 e8             	lea    -0x18(%ebp),%eax
f0103d0c:	50                   	push   %eax
f0103d0d:	e8 a0 2a 00 00       	call   f01067b2 <allocate_frame>
f0103d12:	83 c4 10             	add    $0x10,%esp
f0103d15:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0103d18:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103d1c:	79 08                	jns    f0103d26 <get_disk_table_directory+0x45>
				return r;
f0103d1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103d21:	e9 88 00 00 00       	jmp    f0103dae <get_disk_table_directory+0xcd>
			p->references = 1;
f0103d26:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d29:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

			//[4] initialize the new environment by the virtual address of the page directory
			// Hint: use "initialize_environment" function
			*ptr_disk_table_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0103d2f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d32:	83 ec 0c             	sub    $0xc,%esp
f0103d35:	50                   	push   %eax
f0103d36:	e8 b2 f1 ff ff       	call   f0102eed <to_physical_address>
f0103d3b:	83 c4 10             	add    $0x10,%esp
f0103d3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0103d41:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d44:	c1 e8 0c             	shr    $0xc,%eax
f0103d47:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0103d4a:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0103d4f:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f0103d52:	72 17                	jb     f0103d6b <get_disk_table_directory+0x8a>
f0103d54:	ff 75 f0             	pushl  -0x10(%ebp)
f0103d57:	68 7c 48 13 f0       	push   $0xf013487c
f0103d5c:	68 4c 02 00 00       	push   $0x24c
f0103d61:	68 19 48 13 f0       	push   $0xf0134819
f0103d66:	e8 3b c4 ff ff       	call   f01001a6 <_panic>
f0103d6b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103d6e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0103d73:	89 c2                	mov    %eax,%edx
f0103d75:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d78:	89 10                	mov    %edx,(%eax)
			ptr_env->disk_env_tabledir_PA = to_physical_address(p);
f0103d7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0103d7d:	83 ec 0c             	sub    $0xc,%esp
f0103d80:	50                   	push   %eax
f0103d81:	e8 67 f1 ff ff       	call   f0102eed <to_physical_address>
f0103d86:	83 c4 10             	add    $0x10,%esp
f0103d89:	89 c2                	mov    %eax,%edx
f0103d8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103d8e:	89 50 70             	mov    %edx,0x70(%eax)
		}
#endif
		memset(*ptr_disk_table_directory , 0, PAGE_SIZE);
f0103d91:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103d94:	8b 00                	mov    (%eax),%eax
f0103d96:	83 ec 04             	sub    $0x4,%esp
f0103d99:	68 00 10 00 00       	push   $0x1000
f0103d9e:	6a 00                	push   $0x0
f0103da0:	50                   	push   %eax
f0103da1:	e8 85 c8 02 00       	call   f013062b <memset>
f0103da6:	83 c4 10             	add    $0x10,%esp

		//	LOG_STATMENT(cprintf(">>>>>>>>>>>>>> Disk directory created at %x", *ptr_disk_page_directory));
	}
	return 0;
f0103da9:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0103dae:	c9                   	leave  
f0103daf:	c3                   	ret    

f0103db0 <__pf_write_env_table>:

int __pf_write_env_table( struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103db0:	55                   	push   %ebp
f0103db1:	89 e5                	mov    %esp,%ebp
f0103db3:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("========================== create_env_page");
	assert((uint32)virtual_address < KERNEL_BASE);
f0103db6:	81 7d 0c ff ff ff ef 	cmpl   $0xefffffff,0xc(%ebp)
f0103dbd:	76 19                	jbe    f0103dd8 <__pf_write_env_table+0x28>
f0103dbf:	68 ac 48 13 f0       	push   $0xf01348ac
f0103dc4:	68 d2 48 13 f0       	push   $0xf01348d2
f0103dc9:	68 5a 02 00 00       	push   $0x25a
f0103dce:	68 19 48 13 f0       	push   $0xf0134819
f0103dd3:	e8 ce c3 ff ff       	call   f01001a6 <_panic>

	get_disk_table_directory(ptr_env, &(ptr_env->disk_env_tabledir)) ;
f0103dd8:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ddb:	83 c0 6c             	add    $0x6c,%eax
f0103dde:	83 ec 08             	sub    $0x8,%esp
f0103de1:	50                   	push   %eax
f0103de2:	ff 75 08             	pushl  0x8(%ebp)
f0103de5:	e8 f7 fe ff ff       	call   f0103ce1 <get_disk_table_directory>
f0103dea:	83 c4 10             	add    $0x10,%esp

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103ded:	8b 45 08             	mov    0x8(%ebp),%eax
f0103df0:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103df3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103df6:	c1 ea 16             	shr    $0x16,%edx
f0103df9:	c1 e2 02             	shl    $0x2,%edx
f0103dfc:	01 d0                	add    %edx,%eax
f0103dfe:	8b 00                	mov    (%eax),%eax
f0103e00:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if( dfn == 0)
f0103e03:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e06:	85 c0                	test   %eax,%eax
f0103e08:	75 31                	jne    f0103e3b <__pf_write_env_table+0x8b>
	{
		if( allocate_disk_frame(&dfn) == E_NO_PAGE_FILE_SPACE) return E_NO_PAGE_FILE_SPACE;
f0103e0a:	83 ec 0c             	sub    $0xc,%esp
f0103e0d:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0103e10:	50                   	push   %eax
f0103e11:	e8 0c f3 ff ff       	call   f0103122 <allocate_disk_frame>
f0103e16:	83 c4 10             	add    $0x10,%esp
f0103e19:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0103e1c:	75 07                	jne    f0103e25 <__pf_write_env_table+0x75>
f0103e1e:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
f0103e23:	eb 2e                	jmp    f0103e53 <__pf_write_env_table+0xa3>
		ptr_env->disk_env_tabledir[PDX(virtual_address)] = dfn;
f0103e25:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e28:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e2b:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e2e:	c1 ea 16             	shr    $0x16,%edx
f0103e31:	c1 e2 02             	shl    $0x2,%edx
f0103e34:	01 c2                	add    %eax,%edx
f0103e36:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e39:	89 02                	mov    %eax,(%edx)
	//	lcr3(oldDir);

	//We already read it from the KERNEL mapping instead of the USER mapping

	//cprintf("[%s] writing table\n",ptr_env->prog_name);
	int ret = write_disk_page(dfn, (void*)tableKVirtualAddress);
f0103e3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0103e3e:	83 ec 08             	sub    $0x8,%esp
f0103e41:	ff 75 10             	pushl  0x10(%ebp)
f0103e44:	50                   	push   %eax
f0103e45:	e8 2b f1 ff ff       	call   f0102f75 <write_disk_page>
f0103e4a:	83 c4 10             	add    $0x10,%esp
f0103e4d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf("[%s] finished writing table\n",ptr_env->prog_name);
	return ret;
f0103e50:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0103e53:	c9                   	leave  
f0103e54:	c3                   	ret    

f0103e55 <__pf_read_env_table>:

int __pf_read_env_table(struct Env* ptr_env, uint32 virtual_address, uint32* tableKVirtualAddress)
{
f0103e55:	55                   	push   %ebp
f0103e56:	89 e5                	mov    %esp,%ebp
f0103e58:	83 ec 18             	sub    $0x18,%esp
	if( ptr_env->disk_env_tabledir == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103e5b:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e5e:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e61:	85 c0                	test   %eax,%eax
f0103e63:	75 07                	jne    f0103e6c <__pf_read_env_table+0x17>
f0103e65:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103e6a:	eb 3a                	jmp    f0103ea6 <__pf_read_env_table+0x51>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103e6c:	8b 45 08             	mov    0x8(%ebp),%eax
f0103e6f:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103e72:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103e75:	c1 ea 16             	shr    $0x16,%edx
f0103e78:	c1 e2 02             	shl    $0x2,%edx
f0103e7b:	01 d0                	add    %edx,%eax
f0103e7d:	8b 00                	mov    (%eax),%eax
f0103e7f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if( dfn == 0) return E_TABLE_NOT_EXIST_IN_PF;
f0103e82:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0103e86:	75 07                	jne    f0103e8f <__pf_read_env_table+0x3a>
f0103e88:	b8 f6 ff ff ff       	mov    $0xfffffff6,%eax
f0103e8d:	eb 17                	jmp    f0103ea6 <__pf_read_env_table+0x51>

	int disk_read_error = read_disk_page(dfn, tableKVirtualAddress);
f0103e8f:	83 ec 08             	sub    $0x8,%esp
f0103e92:	ff 75 10             	pushl  0x10(%ebp)
f0103e95:	ff 75 f4             	pushl  -0xc(%ebp)
f0103e98:	e8 a9 f0 ff ff       	call   f0102f46 <read_disk_page>
f0103e9d:	83 c4 10             	add    $0x10,%esp
f0103ea0:	89 45 f0             	mov    %eax,-0x10(%ebp)

	return disk_read_error;
f0103ea3:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0103ea6:	c9                   	leave  
f0103ea7:	c3                   	ret    

f0103ea8 <__pf_remove_env_all_tables>:

void __pf_remove_env_all_tables(struct Env* ptr_env)
{
f0103ea8:	55                   	push   %ebp
f0103ea9:	89 e5                	mov    %esp,%ebp
f0103eab:	83 ec 18             	sub    $0x18,%esp
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103eae:	8b 45 08             	mov    0x8(%ebp),%eax
f0103eb1:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eb4:	85 c0                	test   %eax,%eax
f0103eb6:	74 4c                	je     f0103f04 <__pf_remove_env_all_tables+0x5c>

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103eb8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0103ebf:	eb 38                	jmp    f0103ef9 <__pf_remove_env_all_tables+0x51>
	{
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
f0103ec1:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ec4:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103ec7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103eca:	c1 e2 02             	shl    $0x2,%edx
f0103ecd:	01 d0                	add    %edx,%eax
f0103ecf:	8b 00                	mov    (%eax),%eax
f0103ed1:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_env->disk_env_tabledir[pdeno] = 0;
f0103ed4:	8b 45 08             	mov    0x8(%ebp),%eax
f0103ed7:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103eda:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0103edd:	c1 e2 02             	shl    $0x2,%edx
f0103ee0:	01 d0                	add    %edx,%eax
f0103ee2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		free_disk_frame(dfn);
f0103ee8:	83 ec 0c             	sub    $0xc,%esp
f0103eeb:	ff 75 f0             	pushl  -0x10(%ebp)
f0103eee:	e8 f6 f2 ff ff       	call   f01031e9 <free_disk_frame>
f0103ef3:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;

	uint32 pdeno;
	for (pdeno = 0; pdeno < PDX(USER_TOP) ; pdeno++)
f0103ef6:	ff 45 f4             	incl   -0xc(%ebp)
f0103ef9:	81 7d f4 ba 03 00 00 	cmpl   $0x3ba,-0xc(%ebp)
f0103f00:	76 bf                	jbe    f0103ec1 <__pf_remove_env_all_tables+0x19>
f0103f02:	eb 01                	jmp    f0103f05 <__pf_remove_env_all_tables+0x5d>
void __pf_remove_env_all_tables(struct Env* ptr_env)
{
	//LOG_STRING("pf_remove_env_page: 0");

	//LOG_STATMENT(cprintf("ptr_env = %x",ptr_env));
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f04:	90                   	nop
		uint32 dfn=ptr_env->disk_env_tabledir[pdeno];
		ptr_env->disk_env_tabledir[pdeno] = 0;
		free_disk_frame(dfn);
	}
	//LOG_STRING("pf_remove_env_page: 3");
}
f0103f05:	c9                   	leave  
f0103f06:	c3                   	ret    

f0103f07 <__pf_remove_env_table>:

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
f0103f07:	55                   	push   %ebp
f0103f08:	89 e5                	mov    %esp,%ebp
f0103f0a:	83 ec 18             	sub    $0x18,%esp
	if (virtual_address == 0)
f0103f0d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f0103f11:	75 10                	jne    f0103f23 <__pf_remove_env_table+0x1c>
		cprintf("REMOVING table 0 from page file\n");
f0103f13:	83 ec 0c             	sub    $0xc,%esp
f0103f16:	68 dc 49 13 f0       	push   $0xf01349dc
f0103f1b:	e8 0d cd ff ff       	call   f0100c2d <cprintf>
f0103f20:	83 c4 10             	add    $0x10,%esp
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f23:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f26:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f29:	85 c0                	test   %eax,%eax
f0103f2b:	74 3d                	je     f0103f6a <__pf_remove_env_table+0x63>

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
f0103f2d:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f30:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f33:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f36:	c1 ea 16             	shr    $0x16,%edx
f0103f39:	c1 e2 02             	shl    $0x2,%edx
f0103f3c:	01 d0                	add    %edx,%eax
f0103f3e:	8b 00                	mov    (%eax),%eax
f0103f40:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
f0103f43:	8b 45 08             	mov    0x8(%ebp),%eax
f0103f46:	8b 40 6c             	mov    0x6c(%eax),%eax
f0103f49:	8b 55 0c             	mov    0xc(%ebp),%edx
f0103f4c:	c1 ea 16             	shr    $0x16,%edx
f0103f4f:	c1 e2 02             	shl    $0x2,%edx
f0103f52:	01 d0                	add    %edx,%eax
f0103f54:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	free_disk_frame(dfn);
f0103f5a:	83 ec 0c             	sub    $0xc,%esp
f0103f5d:	ff 75 f4             	pushl  -0xc(%ebp)
f0103f60:	e8 84 f2 ff ff       	call   f01031e9 <free_disk_frame>
f0103f65:	83 c4 10             	add    $0x10,%esp
f0103f68:	eb 01                	jmp    f0103f6b <__pf_remove_env_table+0x64>

void __pf_remove_env_table(struct Env* ptr_env, uint32 virtual_address)
{
	if (virtual_address == 0)
		cprintf("REMOVING table 0 from page file\n");
	if( ptr_env->disk_env_tabledir == 0) return;
f0103f6a:	90                   	nop

	uint32 dfn=ptr_env->disk_env_tabledir[PDX(virtual_address)];
	ptr_env->disk_env_tabledir[PDX(virtual_address)] = 0;
	free_disk_frame(dfn);
}
f0103f6b:	c9                   	leave  
f0103f6c:	c3                   	ret    

f0103f6d <test_disk_01>:
///========================== END OF TABLE FILE MANAGMENT =============================


void test_disk_01(void *virtual_address)
{
f0103f6d:	55                   	push   %ebp
f0103f6e:	89 e5                	mov    %esp,%ebp
f0103f70:	83 ec 18             	sub    $0x18,%esp
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
f0103f73:	c7 45 f4 2d 60 01 00 	movl   $0x1602d,-0xc(%ebp)
	for(;i<140000;i += 500)
f0103f7a:	eb 1f                	jmp    f0103f9b <test_disk_01+0x2e>
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
f0103f7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0103f7f:	83 ec 04             	sub    $0x4,%esp
f0103f82:	6a 08                	push   $0x8
f0103f84:	ff 75 08             	pushl  0x8(%ebp)
f0103f87:	50                   	push   %eax
f0103f88:	e8 43 cd 02 00       	call   f0130cd0 <ide_write>
f0103f8d:	83 c4 10             	add    $0x10,%esp
f0103f90:	85 c0                	test   %eax,%eax
f0103f92:	75 12                	jne    f0103fa6 <test_disk_01+0x39>

void test_disk_01(void *virtual_address)
{
	LOG_STATMENT(cprintf("doing tests for ide_write()\n"));
	int i=90157;
	for(;i<140000;i += 500)
f0103f94:	81 45 f4 f4 01 00 00 	addl   $0x1f4,-0xc(%ebp)
f0103f9b:	81 7d f4 df 22 02 00 	cmpl   $0x222df,-0xc(%ebp)
f0103fa2:	7e d8                	jle    f0103f7c <test_disk_01+0xf>
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103fa4:	eb 01                	jmp    f0103fa7 <test_disk_01+0x3a>
	for(;i<140000;i += 500)
	{
		if(ide_write(i,(void *)virtual_address,8) != 0)
		{
			LOG_STATMENT(cprintf("FAILURE to write sector %d\n",i););
			break;
f0103fa6:	90                   	nop
		{
			//LOG_STATMENT(cprintf("written at sector %d\n",i););
		}
	}
	LOG_STATMENT(cprintf("ide_write() test done\n"););
}
f0103fa7:	90                   	nop
f0103fa8:	c9                   	leave  
f0103fa9:	c3                   	ret    

f0103faa <mc146818_read>:
#include <kern/cpu/picirq.h>


unsigned
mc146818_read(unsigned reg)
{
f0103faa:	55                   	push   %ebp
f0103fab:	89 e5                	mov    %esp,%ebp
f0103fad:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0103fb0:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fb3:	0f b6 c0             	movzbl %al,%eax
f0103fb6:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0103fbd:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103fc0:	8a 45 f6             	mov    -0xa(%ebp),%al
f0103fc3:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103fc6:	ee                   	out    %al,(%dx)
f0103fc7:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0103fce:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0103fd1:	89 c2                	mov    %eax,%edx
f0103fd3:	ec                   	in     (%dx),%al
f0103fd4:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0103fd7:	8a 45 f7             	mov    -0x9(%ebp),%al
	return inb(IO_RTC+1);
f0103fda:	0f b6 c0             	movzbl %al,%eax
}
f0103fdd:	c9                   	leave  
f0103fde:	c3                   	ret    

f0103fdf <mc146818_write>:

void
mc146818_write(unsigned reg, unsigned datum)
{
f0103fdf:	55                   	push   %ebp
f0103fe0:	89 e5                	mov    %esp,%ebp
f0103fe2:	83 ec 10             	sub    $0x10,%esp
	outb(IO_RTC, reg);
f0103fe5:	8b 45 08             	mov    0x8(%ebp),%eax
f0103fe8:	0f b6 c0             	movzbl %al,%eax
f0103feb:	c7 45 fc 70 00 00 00 	movl   $0x70,-0x4(%ebp)
f0103ff2:	88 45 f6             	mov    %al,-0xa(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0103ff5:	8a 45 f6             	mov    -0xa(%ebp),%al
f0103ff8:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0103ffb:	ee                   	out    %al,(%dx)
	outb(IO_RTC+1, datum);
f0103ffc:	8b 45 0c             	mov    0xc(%ebp),%eax
f0103fff:	0f b6 c0             	movzbl %al,%eax
f0104002:	c7 45 f8 71 00 00 00 	movl   $0x71,-0x8(%ebp)
f0104009:	88 45 f7             	mov    %al,-0x9(%ebp)
f010400c:	8a 45 f7             	mov    -0x9(%ebp),%al
f010400f:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104012:	ee                   	out    %al,(%dx)
}
f0104013:	90                   	nop
f0104014:	c9                   	leave  
f0104015:	c3                   	ret    

f0104016 <kclock_start>:


void
kclock_start(uint8 quantum_in_ms)
{
f0104016:	55                   	push   %ebp
f0104017:	89 e5                	mov    %esp,%ebp
f0104019:	53                   	push   %ebx
f010401a:	83 ec 24             	sub    $0x24,%esp
f010401d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104020:	88 45 e4             	mov    %al,-0x1c(%ebp)
f0104023:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f010402a:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010402e:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104031:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104034:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);

	//2017
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) % 256);
//	outb(TIMER_CNTR0, TIMER_DIV((1000/CLOCK_INTERVAL_IN_MS)) / 256);
	if (IS_VALID_QUANTUM(quantum_in_ms))
f0104035:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f0104039:	77 48                	ja     f0104083 <kclock_start+0x6d>
f010403b:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104042:	c6 45 ee 34          	movb   $0x34,-0x12(%ebp)
f0104046:	8a 45 ee             	mov    -0x12(%ebp),%al
f0104049:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010404c:	ee                   	out    %al,(%dx)
	{
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(TIMER_DIV((1000/quantum_in_ms))) ;
f010404d:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104051:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f0104056:	99                   	cltd   
f0104057:	f7 fb                	idiv   %ebx
f0104059:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f010405f:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f0104063:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f0104068:	99                   	cltd   
f0104069:	f7 fb                	idiv   %ebx
f010406b:	89 c3                	mov    %eax,%ebx
f010406d:	89 c8                	mov    %ecx,%eax
f010406f:	99                   	cltd   
f0104070:	f7 fb                	idiv   %ebx
f0104072:	0f b7 c0             	movzwl %ax,%eax
f0104075:	83 ec 0c             	sub    $0xc,%esp
f0104078:	50                   	push   %eax
f0104079:	e8 b8 01 00 00       	call   f0104236 <kclock_write_cnt0_LSB_first>
f010407e:	83 c4 10             	add    $0x10,%esp
f0104081:	eb 13                	jmp    f0104096 <kclock_start+0x80>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f0104083:	6a 35                	push   $0x35
f0104085:	68 00 4a 13 f0       	push   $0xf0134a00
f010408a:	6a 33                	push   $0x33
f010408c:	68 5c 4a 13 f0       	push   $0xf0134a5c
f0104091:	e8 10 c1 ff ff       	call   f01001a6 <_panic>
//	cprintf("c = %d\n", c) ;

//	uint16 cnt0_after = kclock_read_cnt0() ;

	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104096:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f010409c:	0f b7 c0             	movzwl %ax,%eax
f010409f:	25 fe ff 00 00       	and    $0xfffe,%eax
f01040a4:	83 ec 0c             	sub    $0xc,%esp
f01040a7:	50                   	push   %eax
f01040a8:	e8 2d 1b 00 00       	call   f0105bda <irq_setmask_8259A>
f01040ad:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");

	//cprintf("Timer STARTED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );

}
f01040b0:	90                   	nop
f01040b1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01040b4:	c9                   	leave  
f01040b5:	c3                   	ret    

f01040b6 <kclock_stop>:

void
kclock_stop(void)
{
f01040b6:	55                   	push   %ebp
f01040b7:	89 e5                	mov    %esp,%ebp
f01040b9:	83 ec 18             	sub    $0x18,%esp
f01040bc:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01040c3:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f01040c7:	8a 45 f3             	mov    -0xd(%ebp),%al
f01040ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01040cd:	ee                   	out    %al,(%dx)
//	for (int i = 0 ; i <20; i++)
//	{
//		cnt0 = kclock_read_cnt0();
//		cprintf("STOP AFTER: cnt0 = %d\n",cnt0);
//	}
	irq_setmask_8259A(0xFFFF);
f01040ce:	83 ec 0c             	sub    $0xc,%esp
f01040d1:	68 ff ff 00 00       	push   $0xffff
f01040d6:	e8 ff 1a 00 00       	call   f0105bda <irq_setmask_8259A>
f01040db:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0 = kclock_read_cnt0() ;
//	cprintf("Timer STOPPED: Counter0 Value = %x\n", cnt0 );
	//cprintf("Timer STOPPED: Status Value = %x\n", status);


}
f01040de:	90                   	nop
f01040df:	c9                   	leave  
f01040e0:	c3                   	ret    

f01040e1 <kclock_resume>:

void
kclock_resume(void)
{
f01040e1:	55                   	push   %ebp
f01040e2:	89 e5                	mov    %esp,%ebp
f01040e4:	83 ec 18             	sub    $0x18,%esp
	uint16 cnt0 = kclock_read_cnt0() ;
f01040e7:	e8 8c 01 00 00       	call   f0104278 <kclock_read_cnt0>
f01040ec:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
	//2017: if the remaining time is small, then increase it a bit to avoid invoking the CLOCK INT
	//		before returning back to the environment (this cause INT inside INT!!!) el7 :)
	if (cnt0 < 20)
f01040f0:	66 83 7d f6 13       	cmpw   $0x13,-0xa(%ebp)
f01040f5:	77 06                	ja     f01040fd <kclock_resume+0x1c>
	{
		cnt0 = 20;
f01040f7:	66 c7 45 f6 14 00    	movw   $0x14,-0xa(%ebp)
	}

	if (cnt0 % 2 == 1)
f01040fd:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f0104101:	83 e0 01             	and    $0x1,%eax
f0104104:	66 85 c0             	test   %ax,%ax
f0104107:	74 09                	je     f0104112 <kclock_resume+0x31>
		cnt0++;
f0104109:	66 8b 45 f6          	mov    -0xa(%ebp),%ax
f010410d:	40                   	inc    %eax
f010410e:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
f0104112:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f0104119:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f010411d:	8a 45 ef             	mov    -0x11(%ebp),%al
f0104120:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104123:	ee                   	out    %al,(%dx)

	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f0104124:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
f0104128:	83 ec 0c             	sub    $0xc,%esp
f010412b:	50                   	push   %eax
f010412c:	e8 05 01 00 00       	call   f0104236 <kclock_write_cnt0_LSB_first>
f0104131:	83 c4 10             	add    $0x10,%esp
//	uint16 cnt0_after = kclock_read_cnt0() ;
//	cprintf("Timer RESUMED: Counter0 Before Lag = %d, After lag = %d\n", cnt0_before, cnt0_after );


	//cprintf("	Setup timer interrupts via 8259A\n");
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f0104134:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f010413a:	0f b7 c0             	movzwl %ax,%eax
f010413d:	25 fe ff 00 00       	and    $0xfffe,%eax
f0104142:	83 ec 0c             	sub    $0xc,%esp
f0104145:	50                   	push   %eax
f0104146:	e8 8f 1a 00 00       	call   f0105bda <irq_setmask_8259A>
f010414b:	83 c4 10             	add    $0x10,%esp
	//cprintf("	unmasked timer interrupt\n");
}
f010414e:	90                   	nop
f010414f:	c9                   	leave  
f0104150:	c3                   	ret    

f0104151 <kclock_start_counter>:


//==============

void kclock_start_counter(uint8 cnt0)
{
f0104151:	55                   	push   %ebp
f0104152:	89 e5                	mov    %esp,%ebp
f0104154:	83 ec 28             	sub    $0x28,%esp
f0104157:	8b 45 08             	mov    0x8(%ebp),%eax
f010415a:	88 45 e4             	mov    %al,-0x1c(%ebp)
f010415d:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f0104164:	c6 45 f3 34          	movb   $0x34,-0xd(%ebp)
f0104168:	8a 45 f3             	mov    -0xd(%ebp),%al
f010416b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010416e:	ee                   	out    %al,(%dx)
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
	kclock_write_cnt0_LSB_first(cnt0) ;
f010416f:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
f0104173:	83 ec 0c             	sub    $0xc,%esp
f0104176:	50                   	push   %eax
f0104177:	e8 ba 00 00 00       	call   f0104236 <kclock_write_cnt0_LSB_first>
f010417c:	83 c4 10             	add    $0x10,%esp
	irq_setmask_8259A(irq_mask_8259A & ~(1<<0));
f010417f:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f0104185:	0f b7 c0             	movzwl %ax,%eax
f0104188:	25 fe ff 00 00       	and    $0xfffe,%eax
f010418d:	83 ec 0c             	sub    $0xc,%esp
f0104190:	50                   	push   %eax
f0104191:	e8 44 1a 00 00       	call   f0105bda <irq_setmask_8259A>
f0104196:	83 c4 10             	add    $0x10,%esp

}
f0104199:	90                   	nop
f010419a:	c9                   	leave  
f010419b:	c3                   	ret    

f010419c <kclock_set_quantum>:
//2018
//Reset the CNT0 to the given quantum value without affecting the interrupt status
void kclock_set_quantum(uint8 quantum_in_ms)
{
f010419c:	55                   	push   %ebp
f010419d:	89 e5                	mov    %esp,%ebp
f010419f:	53                   	push   %ebx
f01041a0:	83 ec 24             	sub    $0x24,%esp
f01041a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01041a6:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (IS_VALID_QUANTUM(quantum_in_ms))
f01041a9:	80 7d e4 35          	cmpb   $0x35,-0x1c(%ebp)
f01041ad:	77 6c                	ja     f010421b <kclock_set_quantum+0x7f>
	{
		int cnt = TIMER_DIV((1000/quantum_in_ms));
f01041af:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01041b3:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f01041b8:	99                   	cltd   
f01041b9:	f7 fb                	idiv   %ebx
f01041bb:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f01041c1:	0f b6 5d e4          	movzbl -0x1c(%ebp),%ebx
f01041c5:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f01041ca:	99                   	cltd   
f01041cb:	f7 fb                	idiv   %ebx
f01041cd:	89 c3                	mov    %eax,%ebx
f01041cf:	89 c8                	mov    %ecx,%eax
f01041d1:	99                   	cltd   
f01041d2:	f7 fb                	idiv   %ebx
f01041d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (cnt%2 == 1)
f01041d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01041da:	25 01 00 00 80       	and    $0x80000001,%eax
f01041df:	85 c0                	test   %eax,%eax
f01041e1:	79 05                	jns    f01041e8 <kclock_set_quantum+0x4c>
f01041e3:	48                   	dec    %eax
f01041e4:	83 c8 fe             	or     $0xfffffffe,%eax
f01041e7:	40                   	inc    %eax
f01041e8:	83 f8 01             	cmp    $0x1,%eax
f01041eb:	75 03                	jne    f01041f0 <kclock_set_quantum+0x54>
			cnt++;
f01041ed:	ff 45 f4             	incl   -0xc(%ebp)
f01041f0:	c7 45 f0 43 00 00 00 	movl   $0x43,-0x10(%ebp)
f01041f7:	c6 45 ef 34          	movb   $0x34,-0x11(%ebp)
f01041fb:	8a 45 ef             	mov    -0x11(%ebp),%al
f01041fe:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104201:	ee                   	out    %al,(%dx)

		//cprintf("QUANTUM is set to %d ms (%d)\n", quantum_in_ms, TIMER_DIV((1000/quantum_in_ms)));
		outb(TIMER_MODE, TIMER_SEL0 | TIMER_RATEGEN | TIMER_16BIT);
		kclock_write_cnt0_LSB_first(cnt) ;
f0104202:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104205:	0f b7 c0             	movzwl %ax,%eax
f0104208:	83 ec 0c             	sub    $0xc,%esp
f010420b:	50                   	push   %eax
f010420c:	e8 25 00 00 00       	call   f0104236 <kclock_write_cnt0_LSB_first>
f0104211:	83 c4 10             	add    $0x10,%esp
		kclock_stop();
f0104214:	e8 9d fe ff ff       	call   f01040b6 <kclock_stop>
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
	}
}
f0104219:	eb 16                	jmp    f0104231 <kclock_set_quantum+0x95>
		kclock_stop();
		//uint16 cnt0 = kclock_read_cnt0_latch() ; //read after write to ensure it's set to the desired value
	}
	else
	{
		panic("attempt to set the CPU quantum by too large value. Quantum should be between 1 ms and %d ms", QUANTUM_LIMIT - 1);
f010421b:	6a 35                	push   $0x35
f010421d:	68 00 4a 13 f0       	push   $0xf0134a00
f0104222:	68 c9 00 00 00       	push   $0xc9
f0104227:	68 5c 4a 13 f0       	push   $0xf0134a5c
f010422c:	e8 75 bf ff ff       	call   f01001a6 <_panic>
	}
}
f0104231:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0104234:	c9                   	leave  
f0104235:	c3                   	ret    

f0104236 <kclock_write_cnt0_LSB_first>:


//2017
void
kclock_write_cnt0_LSB_first(uint16 val)
{
f0104236:	55                   	push   %ebp
f0104237:	89 e5                	mov    %esp,%ebp
f0104239:	83 ec 14             	sub    $0x14,%esp
f010423c:	8b 45 08             	mov    0x8(%ebp),%eax
f010423f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	outb(TIMER_CNTR0, (uint8)(val & 0x00FF));
f0104243:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0104246:	0f b6 c0             	movzbl %al,%eax
f0104249:	c7 45 fc 40 00 00 00 	movl   $0x40,-0x4(%ebp)
f0104250:	88 45 f6             	mov    %al,-0xa(%ebp)
f0104253:	8a 45 f6             	mov    -0xa(%ebp),%al
f0104256:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0104259:	ee                   	out    %al,(%dx)
	outb(TIMER_CNTR0, (uint8)((val>>8) & 0x00FF));
f010425a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010425d:	66 c1 e8 08          	shr    $0x8,%ax
f0104261:	0f b6 c0             	movzbl %al,%eax
f0104264:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)
f010426b:	88 45 f7             	mov    %al,-0x9(%ebp)
f010426e:	8a 45 f7             	mov    -0x9(%ebp),%al
f0104271:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0104274:	ee                   	out    %al,(%dx)
}
f0104275:	90                   	nop
f0104276:	c9                   	leave  
f0104277:	c3                   	ret    

f0104278 <kclock_read_cnt0>:
//==============


uint16
kclock_read_cnt0(void)
{
f0104278:	55                   	push   %ebp
f0104279:	89 e5                	mov    %esp,%ebp
f010427b:	83 ec 20             	sub    $0x20,%esp
f010427e:	c7 45 f8 40 00 00 00 	movl   $0x40,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0104285:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0104288:	89 c2                	mov    %eax,%edx
f010428a:	ec                   	in     (%dx),%al
f010428b:	88 45 ee             	mov    %al,-0x12(%ebp)
	return data;
f010428e:	8a 45 ee             	mov    -0x12(%ebp),%al
	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104291:	88 45 ff             	mov    %al,-0x1(%ebp)
f0104294:	c7 45 f0 40 00 00 00 	movl   $0x40,-0x10(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010429b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010429e:	89 c2                	mov    %eax,%edx
f01042a0:	ec                   	in     (%dx),%al
f01042a1:	88 45 ef             	mov    %al,-0x11(%ebp)
	return data;
f01042a4:	8a 45 ef             	mov    -0x11(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f01042a7:	88 45 f7             	mov    %al,-0x9(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f01042aa:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
f01042ae:	c1 e0 08             	shl    $0x8,%eax
f01042b1:	89 c2                	mov    %eax,%edx
f01042b3:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f01042b7:	09 d0                	or     %edx,%eax
f01042b9:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
	return cnt0 ;
f01042bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01042c0:	c9                   	leave  
f01042c1:	c3                   	ret    

f01042c2 <kclock_read_cnt0_latch>:


uint16
kclock_read_cnt0_latch(void)
{
f01042c2:	55                   	push   %ebp
f01042c3:	89 e5                	mov    %esp,%ebp
f01042c5:	83 ec 30             	sub    $0x30,%esp
f01042c8:	c7 45 f8 43 00 00 00 	movl   $0x43,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042cf:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01042d2:	89 c2                	mov    %eax,%edx
f01042d4:	ec                   	in     (%dx),%al
f01042d5:	88 45 db             	mov    %al,-0x25(%ebp)
	return data;
f01042d8:	8a 45 db             	mov    -0x25(%ebp),%al
	uint8 old_mode = inb(TIMER_MODE) ;
f01042db:	88 45 ff             	mov    %al,-0x1(%ebp)
f01042de:	c7 45 f4 43 00 00 00 	movl   $0x43,-0xc(%ebp)
f01042e5:	c6 45 dc 00          	movb   $0x0,-0x24(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f01042e9:	8a 45 dc             	mov    -0x24(%ebp),%al
f01042ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01042ef:	ee                   	out    %al,(%dx)
f01042f0:	c7 45 ec 40 00 00 00 	movl   $0x40,-0x14(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f01042f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01042fa:	89 c2                	mov    %eax,%edx
f01042fc:	ec                   	in     (%dx),%al
f01042fd:	88 45 dd             	mov    %al,-0x23(%ebp)
	return data;
f0104300:	8a 45 dd             	mov    -0x23(%ebp),%al
	outb(TIMER_MODE, TIMER_SEL0 | TIMER_LATCH);

	uint8 cnt0_lo =  inb(TIMER_CNTR0);
f0104303:	88 45 f3             	mov    %al,-0xd(%ebp)
f0104306:	c7 45 e4 40 00 00 00 	movl   $0x40,-0x1c(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f010430d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0104310:	89 c2                	mov    %eax,%edx
f0104312:	ec                   	in     (%dx),%al
f0104313:	88 45 de             	mov    %al,-0x22(%ebp)
	return data;
f0104316:	8a 45 de             	mov    -0x22(%ebp),%al
	uint8 cnt0_hi =  inb(TIMER_CNTR0);
f0104319:	88 45 eb             	mov    %al,-0x15(%ebp)
	uint16 cnt0 = (cnt0_hi << 8) | cnt0_lo ;
f010431c:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
f0104320:	c1 e0 08             	shl    $0x8,%eax
f0104323:	89 c2                	mov    %eax,%edx
f0104325:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
f0104329:	09 d0                	or     %edx,%eax
f010432b:	66 89 45 e8          	mov    %ax,-0x18(%ebp)
	outb(TIMER_MODE, old_mode);
f010432f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
f0104333:	c7 45 e0 43 00 00 00 	movl   $0x43,-0x20(%ebp)
f010433a:	88 45 df             	mov    %al,-0x21(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f010433d:	8a 45 df             	mov    -0x21(%ebp),%al
f0104340:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0104343:	ee                   	out    %al,(%dx)

	return cnt0 ;
f0104344:	8b 45 e8             	mov    -0x18(%ebp),%eax
}
f0104347:	c9                   	leave  
f0104348:	c3                   	ret    

f0104349 <isSchedMethodRR>:
//void on_clock_update_WS_time_stamps();
extern void cleanup_buffers(struct Env* e);
//================

void sched_delete_ready_queues() ;
uint32 isSchedMethodRR(){if(scheduler_method == SCH_RR) return 1; return 0;}
f0104349:	55                   	push   %ebp
f010434a:	89 e5                	mov    %esp,%ebp
f010434c:	a1 a8 84 6e f0       	mov    0xf06e84a8,%eax
f0104351:	85 c0                	test   %eax,%eax
f0104353:	75 07                	jne    f010435c <isSchedMethodRR+0x13>
f0104355:	b8 01 00 00 00       	mov    $0x1,%eax
f010435a:	eb 05                	jmp    f0104361 <isSchedMethodRR+0x18>
f010435c:	b8 00 00 00 00       	mov    $0x0,%eax
f0104361:	5d                   	pop    %ebp
f0104362:	c3                   	ret    

f0104363 <isSchedMethodMLFQ>:
uint32 isSchedMethodMLFQ(){if(scheduler_method == SCH_MLFQ) return 1; return 0;}
f0104363:	55                   	push   %ebp
f0104364:	89 e5                	mov    %esp,%ebp
f0104366:	a1 a8 84 6e f0       	mov    0xf06e84a8,%eax
f010436b:	83 f8 01             	cmp    $0x1,%eax
f010436e:	75 07                	jne    f0104377 <isSchedMethodMLFQ+0x14>
f0104370:	b8 01 00 00 00       	mov    $0x1,%eax
f0104375:	eb 05                	jmp    f010437c <isSchedMethodMLFQ+0x19>
f0104377:	b8 00 00 00 00       	mov    $0x0,%eax
f010437c:	5d                   	pop    %ebp
f010437d:	c3                   	ret    

f010437e <init_queue>:

//==================================================================================//
//============================== HELPER FUNCTIONS ==================================//
//==================================================================================//
void init_queue(struct Env_Queue* queue)
{
f010437e:	55                   	push   %ebp
f010437f:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f0104381:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104385:	74 1d                	je     f01043a4 <init_queue+0x26>
	{
		LIST_INIT(queue);
f0104387:	8b 45 08             	mov    0x8(%ebp),%eax
f010438a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0104390:	8b 45 08             	mov    0x8(%ebp),%eax
f0104393:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010439a:	8b 45 08             	mov    0x8(%ebp),%eax
f010439d:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
}
f01043a4:	90                   	nop
f01043a5:	5d                   	pop    %ebp
f01043a6:	c3                   	ret    

f01043a7 <queue_size>:

int queue_size(struct Env_Queue* queue)
{
f01043a7:	55                   	push   %ebp
f01043a8:	89 e5                	mov    %esp,%ebp
	if(queue != NULL)
f01043aa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01043ae:	74 08                	je     f01043b8 <queue_size+0x11>
	{
		return LIST_SIZE(queue);
f01043b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01043b3:	8b 40 0c             	mov    0xc(%eax),%eax
f01043b6:	eb 05                	jmp    f01043bd <queue_size+0x16>
	}
	else
	{
		return 0;
f01043b8:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
f01043bd:	5d                   	pop    %ebp
f01043be:	c3                   	ret    

f01043bf <enqueue>:

void enqueue(struct Env_Queue* queue, struct Env* env)
{
f01043bf:	55                   	push   %ebp
f01043c0:	89 e5                	mov    %esp,%ebp
f01043c2:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01043c5:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01043c9:	74 66                	je     f0104431 <enqueue+0x72>
	{
		LIST_INSERT_HEAD(queue, env);
f01043cb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01043cf:	75 14                	jne    f01043e5 <enqueue+0x26>
f01043d1:	83 ec 04             	sub    $0x4,%esp
f01043d4:	68 70 4a 13 f0       	push   $0xf0134a70
f01043d9:	6a 2f                	push   $0x2f
f01043db:	68 93 4a 13 f0       	push   $0xf0134a93
f01043e0:	e8 c1 bd ff ff       	call   f01001a6 <_panic>
f01043e5:	8b 45 08             	mov    0x8(%ebp),%eax
f01043e8:	8b 10                	mov    (%eax),%edx
f01043ea:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043ed:	89 50 44             	mov    %edx,0x44(%eax)
f01043f0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01043f3:	8b 40 44             	mov    0x44(%eax),%eax
f01043f6:	85 c0                	test   %eax,%eax
f01043f8:	74 0d                	je     f0104407 <enqueue+0x48>
f01043fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01043fd:	8b 00                	mov    (%eax),%eax
f01043ff:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104402:	89 50 48             	mov    %edx,0x48(%eax)
f0104405:	eb 09                	jmp    f0104410 <enqueue+0x51>
f0104407:	8b 45 08             	mov    0x8(%ebp),%eax
f010440a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010440d:	89 50 04             	mov    %edx,0x4(%eax)
f0104410:	8b 45 08             	mov    0x8(%ebp),%eax
f0104413:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104416:	89 10                	mov    %edx,(%eax)
f0104418:	8b 45 0c             	mov    0xc(%ebp),%eax
f010441b:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104422:	8b 45 08             	mov    0x8(%ebp),%eax
f0104425:	8b 40 0c             	mov    0xc(%eax),%eax
f0104428:	8d 50 01             	lea    0x1(%eax),%edx
f010442b:	8b 45 08             	mov    0x8(%ebp),%eax
f010442e:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104431:	90                   	nop
f0104432:	c9                   	leave  
f0104433:	c3                   	ret    

f0104434 <dequeue>:

struct Env* dequeue(struct Env_Queue* queue)
{
f0104434:	55                   	push   %ebp
f0104435:	89 e5                	mov    %esp,%ebp
f0104437:	83 ec 18             	sub    $0x18,%esp
	struct Env* envItem = LIST_LAST(queue);
f010443a:	8b 45 08             	mov    0x8(%ebp),%eax
f010443d:	8b 40 04             	mov    0x4(%eax),%eax
f0104440:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (envItem != NULL)
f0104443:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104447:	0f 84 8a 00 00 00    	je     f01044d7 <dequeue+0xa3>
	{
		LIST_REMOVE(queue, envItem);
f010444d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104451:	75 14                	jne    f0104467 <dequeue+0x33>
f0104453:	83 ec 04             	sub    $0x4,%esp
f0104456:	68 a4 4a 13 f0       	push   $0xf0134aa4
f010445b:	6a 38                	push   $0x38
f010445d:	68 93 4a 13 f0       	push   $0xf0134a93
f0104462:	e8 3f bd ff ff       	call   f01001a6 <_panic>
f0104467:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010446a:	8b 40 44             	mov    0x44(%eax),%eax
f010446d:	85 c0                	test   %eax,%eax
f010446f:	74 11                	je     f0104482 <dequeue+0x4e>
f0104471:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104474:	8b 40 44             	mov    0x44(%eax),%eax
f0104477:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010447a:	8b 52 48             	mov    0x48(%edx),%edx
f010447d:	89 50 48             	mov    %edx,0x48(%eax)
f0104480:	eb 0c                	jmp    f010448e <dequeue+0x5a>
f0104482:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104485:	8b 50 48             	mov    0x48(%eax),%edx
f0104488:	8b 45 08             	mov    0x8(%ebp),%eax
f010448b:	89 50 04             	mov    %edx,0x4(%eax)
f010448e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104491:	8b 40 48             	mov    0x48(%eax),%eax
f0104494:	85 c0                	test   %eax,%eax
f0104496:	74 11                	je     f01044a9 <dequeue+0x75>
f0104498:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010449b:	8b 40 48             	mov    0x48(%eax),%eax
f010449e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01044a1:	8b 52 44             	mov    0x44(%edx),%edx
f01044a4:	89 50 44             	mov    %edx,0x44(%eax)
f01044a7:	eb 0b                	jmp    f01044b4 <dequeue+0x80>
f01044a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044ac:	8b 50 44             	mov    0x44(%eax),%edx
f01044af:	8b 45 08             	mov    0x8(%ebp),%eax
f01044b2:	89 10                	mov    %edx,(%eax)
f01044b4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044b7:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01044be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01044c1:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01044c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01044cb:	8b 40 0c             	mov    0xc(%eax),%eax
f01044ce:	8d 50 ff             	lea    -0x1(%eax),%edx
f01044d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01044d4:	89 50 0c             	mov    %edx,0xc(%eax)
	}
	return envItem;
f01044d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f01044da:	c9                   	leave  
f01044db:	c3                   	ret    

f01044dc <remove_from_queue>:

void remove_from_queue(struct Env_Queue* queue, struct Env* e)
{
f01044dc:	55                   	push   %ebp
f01044dd:	89 e5                	mov    %esp,%ebp
f01044df:	83 ec 08             	sub    $0x8,%esp
	if (e != NULL)
f01044e2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044e6:	0f 84 8a 00 00 00    	je     f0104576 <remove_from_queue+0x9a>
	{
		LIST_REMOVE(queue, e);
f01044ec:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01044f0:	75 14                	jne    f0104506 <remove_from_queue+0x2a>
f01044f2:	83 ec 04             	sub    $0x4,%esp
f01044f5:	68 a4 4a 13 f0       	push   $0xf0134aa4
f01044fa:	6a 41                	push   $0x41
f01044fc:	68 93 4a 13 f0       	push   $0xf0134a93
f0104501:	e8 a0 bc ff ff       	call   f01001a6 <_panic>
f0104506:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104509:	8b 40 44             	mov    0x44(%eax),%eax
f010450c:	85 c0                	test   %eax,%eax
f010450e:	74 11                	je     f0104521 <remove_from_queue+0x45>
f0104510:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104513:	8b 40 44             	mov    0x44(%eax),%eax
f0104516:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104519:	8b 52 48             	mov    0x48(%edx),%edx
f010451c:	89 50 48             	mov    %edx,0x48(%eax)
f010451f:	eb 0c                	jmp    f010452d <remove_from_queue+0x51>
f0104521:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104524:	8b 50 48             	mov    0x48(%eax),%edx
f0104527:	8b 45 08             	mov    0x8(%ebp),%eax
f010452a:	89 50 04             	mov    %edx,0x4(%eax)
f010452d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104530:	8b 40 48             	mov    0x48(%eax),%eax
f0104533:	85 c0                	test   %eax,%eax
f0104535:	74 11                	je     f0104548 <remove_from_queue+0x6c>
f0104537:	8b 45 0c             	mov    0xc(%ebp),%eax
f010453a:	8b 40 48             	mov    0x48(%eax),%eax
f010453d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0104540:	8b 52 44             	mov    0x44(%edx),%edx
f0104543:	89 50 44             	mov    %edx,0x44(%eax)
f0104546:	eb 0b                	jmp    f0104553 <remove_from_queue+0x77>
f0104548:	8b 45 0c             	mov    0xc(%ebp),%eax
f010454b:	8b 50 44             	mov    0x44(%eax),%edx
f010454e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104551:	89 10                	mov    %edx,(%eax)
f0104553:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104556:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010455d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0104560:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104567:	8b 45 08             	mov    0x8(%ebp),%eax
f010456a:	8b 40 0c             	mov    0xc(%eax),%eax
f010456d:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104570:	8b 45 08             	mov    0x8(%ebp),%eax
f0104573:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
f0104576:	90                   	nop
f0104577:	c9                   	leave  
f0104578:	c3                   	ret    

f0104579 <find_env_in_queue>:

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
f0104579:	55                   	push   %ebp
f010457a:	89 e5                	mov    %esp,%ebp
f010457c:	83 ec 10             	sub    $0x10,%esp
	struct Env * ptr_env=NULL;
f010457f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	LIST_FOREACH(ptr_env, queue)
f0104586:	8b 45 08             	mov    0x8(%ebp),%eax
f0104589:	8b 00                	mov    (%eax),%eax
f010458b:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010458e:	eb 19                	jmp    f01045a9 <find_env_in_queue+0x30>
	{
		if(ptr_env->env_id == envID)
f0104590:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0104593:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104596:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0104599:	75 05                	jne    f01045a0 <find_env_in_queue+0x27>
		{
			return ptr_env;
f010459b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010459e:	eb 37                	jmp    f01045d7 <find_env_in_queue+0x5e>
}

struct Env* find_env_in_queue(struct Env_Queue* queue, uint32 envID)
{
	struct Env * ptr_env=NULL;
	LIST_FOREACH(ptr_env, queue)
f01045a0:	8b 45 08             	mov    0x8(%ebp),%eax
f01045a3:	8b 40 08             	mov    0x8(%eax),%eax
f01045a6:	89 45 fc             	mov    %eax,-0x4(%ebp)
f01045a9:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045ad:	74 08                	je     f01045b7 <find_env_in_queue+0x3e>
f01045af:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01045b2:	8b 40 44             	mov    0x44(%eax),%eax
f01045b5:	eb 05                	jmp    f01045bc <find_env_in_queue+0x43>
f01045b7:	b8 00 00 00 00       	mov    $0x0,%eax
f01045bc:	8b 55 08             	mov    0x8(%ebp),%edx
f01045bf:	89 42 08             	mov    %eax,0x8(%edx)
f01045c2:	8b 45 08             	mov    0x8(%ebp),%eax
f01045c5:	8b 40 08             	mov    0x8(%eax),%eax
f01045c8:	85 c0                	test   %eax,%eax
f01045ca:	75 c4                	jne    f0104590 <find_env_in_queue+0x17>
f01045cc:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01045d0:	75 be                	jne    f0104590 <find_env_in_queue+0x17>
		if(ptr_env->env_id == envID)
		{
			return ptr_env;
		}
	}
	return NULL;
f01045d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01045d7:	c9                   	leave  
f01045d8:	c3                   	ret    

f01045d9 <fos_scheduler_MLFQ>:
//==================================================================================//

struct Env* fos_scheduler_MLFQ()
{
f01045d9:	55                   	push   %ebp
f01045da:	89 e5                	mov    %esp,%ebp
f01045dc:	83 ec 08             	sub    $0x8,%esp
	//Apply the MLFQ with the specified levels to pick up the next environment
	//Note: the "curenv" (if exist) should be placed in its correct queue
	// your code is here, remove the panic and write your code
	panic("fos_scheduler_MLFQ() is not implemented yet...!!");
f01045df:	83 ec 04             	sub    $0x4,%esp
f01045e2:	68 c4 4a 13 f0       	push   $0xf0134ac4
f01045e7:	6a 58                	push   $0x58
f01045e9:	68 93 4a 13 f0       	push   $0xf0134a93
f01045ee:	e8 b3 bb ff ff       	call   f01001a6 <_panic>

f01045f3 <fos_scheduler>:

}

void
fos_scheduler(void)
{
f01045f3:	55                   	push   %ebp
f01045f4:	89 e5                	mov    %esp,%ebp
f01045f6:	83 ec 18             	sub    $0x18,%esp
	chk1();
f01045f9:	e8 15 b1 02 00       	call   f012f713 <chk1>
	scheduler_status = SCH_STARTED;
f01045fe:	c7 05 b4 84 6e f0 01 	movl   $0x1,0xf06e84b4
f0104605:	00 00 00 

	//This variable should be set to the next environment to be run (if any)
	struct Env* next_env = NULL;
f0104608:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (scheduler_method == SCH_RR)
f010460f:	a1 a8 84 6e f0       	mov    0xf06e84a8,%eax
f0104614:	85 c0                	test   %eax,%eax
f0104616:	75 48                	jne    f0104660 <fos_scheduler+0x6d>
		// and switch to such environment if found.
		// It's OK to choose the previously running env if no other env
		// is runnable.

		//If the curenv is still exist, then insert it again in the ready queue
		if (curenv != NULL)
f0104618:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010461d:	85 c0                	test   %eax,%eax
f010461f:	74 16                	je     f0104637 <fos_scheduler+0x44>
		{
			enqueue(&(env_ready_queues[0]), curenv);
f0104621:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f0104626:	83 ec 08             	sub    $0x8,%esp
f0104629:	50                   	push   %eax
f010462a:	68 0c 01 68 f0       	push   $0xf068010c
f010462f:	e8 8b fd ff ff       	call   f01043bf <enqueue>
f0104634:	83 c4 10             	add    $0x10,%esp
		}

		//Pick the next environment from the ready queue
		next_env = dequeue(&(env_ready_queues[0]));
f0104637:	83 ec 0c             	sub    $0xc,%esp
f010463a:	68 0c 01 68 f0       	push   $0xf068010c
f010463f:	e8 f0 fd ff ff       	call   f0104434 <dequeue>
f0104644:	83 c4 10             	add    $0x10,%esp
f0104647:	89 45 f4             	mov    %eax,-0xc(%ebp)

		//Reset the quantum
		//2017: Reset the value of CNT0 for the next clock interval
		kclock_set_quantum(quantums[0]);
f010464a:	a0 88 84 6e f0       	mov    0xf06e8488,%al
f010464f:	0f b6 c0             	movzbl %al,%eax
f0104652:	83 ec 0c             	sub    $0xc,%esp
f0104655:	50                   	push   %eax
f0104656:	e8 41 fb ff ff       	call   f010419c <kclock_set_quantum>
f010465b:	83 c4 10             	add    $0x10,%esp
f010465e:	eb 12                	jmp    f0104672 <fos_scheduler+0x7f>
		//uint16 cnt0 = kclock_read_cnt0_latch() ;
		//cprintf("CLOCK INTERRUPT AFTER RESET: Counter0 Value = %d\n", cnt0 );

	}
	else if (scheduler_method == SCH_MLFQ)
f0104660:	a1 a8 84 6e f0       	mov    0xf06e84a8,%eax
f0104665:	83 f8 01             	cmp    $0x1,%eax
f0104668:	75 08                	jne    f0104672 <fos_scheduler+0x7f>
	{
		next_env = fos_scheduler_MLFQ();
f010466a:	e8 6a ff ff ff       	call   f01045d9 <fos_scheduler_MLFQ>
f010466f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}


	//temporarily set the curenv by the next env JUST for checking the scheduler
	//Then: reset it again
	struct Env* old_curenv = curenv;
f0104672:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f0104677:	89 45 f0             	mov    %eax,-0x10(%ebp)
	curenv = next_env ;
f010467a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010467d:	a3 34 87 65 f0       	mov    %eax,0xf0658734
	chk2(next_env) ;
f0104682:	83 ec 0c             	sub    $0xc,%esp
f0104685:	ff 75 f4             	pushl  -0xc(%ebp)
f0104688:	e8 c3 b0 02 00       	call   f012f750 <chk2>
f010468d:	83 c4 10             	add    $0x10,%esp
	curenv = old_curenv;
f0104690:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104693:	a3 34 87 65 f0       	mov    %eax,0xf0658734

	//sched_print_all();

	if(next_env != NULL)
f0104698:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010469c:	74 0b                	je     f01046a9 <fos_scheduler+0xb6>
	{
//		cprintf("\nScheduler select program '%s' [%d]... counter = %d\n", next_env->prog_name, next_env->env_id, kclock_read_cnt0());
//		cprintf("Q0 = %d, Q1 = %d, Q2 = %d, Q3 = %d\n", queue_size(&(env_ready_queues[0])), queue_size(&(env_ready_queues[1])), queue_size(&(env_ready_queues[2])), queue_size(&(env_ready_queues[3])));
		env_run(next_env);
f010469e:	83 ec 0c             	sub    $0xc,%esp
f01046a1:	ff 75 f4             	pushl  -0xc(%ebp)
f01046a4:	e8 a6 49 00 00       	call   f010904f <env_run>
	}
	else
	{
		/*2015*///No more envs... curenv doesn't exist any more! return back to command prompt
		curenv = NULL;
f01046a9:	c7 05 34 87 65 f0 00 	movl   $0x0,0xf0658734
f01046b0:	00 00 00 
		//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
		lcr3(phys_page_directory);
f01046b3:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f01046b8:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01046bb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01046be:	0f 22 d8             	mov    %eax,%cr3

		//cprintf("SP = %x\n", read_esp());

		scheduler_status = SCH_STOPPED;
f01046c1:	c7 05 b4 84 6e f0 00 	movl   $0x0,0xf06e84b4
f01046c8:	00 00 00 
		//cprintf("[sched] no envs - nothing more to do!\n");
		while (1)
			run_command_prompt(NULL);
f01046cb:	83 ec 0c             	sub    $0xc,%esp
f01046ce:	6a 00                	push   $0x0
f01046d0:	e8 7e c5 ff ff       	call   f0100c53 <run_command_prompt>
f01046d5:	83 c4 10             	add    $0x10,%esp
f01046d8:	eb f1                	jmp    f01046cb <fos_scheduler+0xd8>

f01046da <sched_init_RR>:

	}
}

void sched_init_RR(uint8 quantum)
{
f01046da:	55                   	push   %ebp
f01046db:	89 e5                	mov    %esp,%ebp
f01046dd:	83 ec 18             	sub    $0x18,%esp
f01046e0:	8b 45 08             	mov    0x8(%ebp),%eax
f01046e3:	88 45 f4             	mov    %al,-0xc(%ebp)
	scheduler_status = SCH_STOPPED;
f01046e6:	c7 05 b4 84 6e f0 00 	movl   $0x0,0xf06e84b4
f01046ed:	00 00 00 
	scheduler_method = SCH_RR;
f01046f0:	c7 05 a8 84 6e f0 00 	movl   $0x0,0xf06e84a8
f01046f7:	00 00 00 

	// Create 1 ready queue for the RR
	num_of_ready_queues = 1;
f01046fa:	c6 05 dc 84 6e f0 01 	movb   $0x1,0xf06e84dc
#if USE_KHEAP
	sched_delete_ready_queues();
	env_ready_queues = kmalloc(sizeof(struct Env_Queue));
	quantums = kmalloc(num_of_ready_queues * sizeof(uint8)) ;
#endif
	quantums[0] = quantum;
f0104701:	8a 45 f4             	mov    -0xc(%ebp),%al
f0104704:	a2 88 84 6e f0       	mov    %al,0xf06e8488
	kclock_set_quantum(quantums[0]);
f0104709:	a0 88 84 6e f0       	mov    0xf06e8488,%al
f010470e:	0f b6 c0             	movzbl %al,%eax
f0104711:	83 ec 0c             	sub    $0xc,%esp
f0104714:	50                   	push   %eax
f0104715:	e8 82 fa ff ff       	call   f010419c <kclock_set_quantum>
f010471a:	83 c4 10             	add    $0x10,%esp
	init_queue(&(env_ready_queues[0]));
f010471d:	83 ec 0c             	sub    $0xc,%esp
f0104720:	68 0c 01 68 f0       	push   $0xf068010c
f0104725:	e8 54 fc ff ff       	call   f010437e <init_queue>
f010472a:	83 c4 10             	add    $0x10,%esp
}
f010472d:	90                   	nop
f010472e:	c9                   	leave  
f010472f:	c3                   	ret    

f0104730 <sched_init_MLFQ>:

void sched_init_MLFQ(uint8 numOfLevels, uint8 *quantumOfEachLevel)
{
f0104730:	55                   	push   %ebp
f0104731:	89 e5                	mov    %esp,%ebp
f0104733:	83 ec 18             	sub    $0x18,%esp
f0104736:	8b 45 08             	mov    0x8(%ebp),%eax
f0104739:	88 45 f4             	mov    %al,-0xc(%ebp)

	//[1] Create the ready queues and initialize them using init_queue()
	//[2] Create the "quantums" array and initialize it by the given quantums in "quantumOfEachLevel[]"
	//[3] Set the CPU quantum by the first level one
#else
	panic("sched_init_MLFQ: Kernel Heap is disabled");
f010473c:	83 ec 04             	sub    $0x4,%esp
f010473f:	68 f8 4a 13 f0       	push   $0xf0134af8
f0104744:	68 cc 00 00 00       	push   $0xcc
f0104749:	68 93 4a 13 f0       	push   $0xf0134a93
f010474e:	e8 53 ba ff ff       	call   f01001a6 <_panic>

f0104753 <sched_init>:
#endif
}


void sched_init()
{
f0104753:	55                   	push   %ebp
f0104754:	89 e5                	mov    %esp,%ebp
f0104756:	83 ec 08             	sub    $0x8,%esp
	old_pf_counter = 0;
f0104759:	c7 05 74 60 6e f0 00 	movl   $0x0,0xf06e6074
f0104760:	00 00 00 

	sched_init_RR(CLOCK_INTERVAL_IN_MS);
f0104763:	83 ec 0c             	sub    $0xc,%esp
f0104766:	6a 0a                	push   $0xa
f0104768:	e8 6d ff ff ff       	call   f01046da <sched_init_RR>
f010476d:	83 c4 10             	add    $0x10,%esp

	init_queue(&env_new_queue);
f0104770:	83 ec 0c             	sub    $0xc,%esp
f0104773:	68 98 84 6e f0       	push   $0xf06e8498
f0104778:	e8 01 fc ff ff       	call   f010437e <init_queue>
f010477d:	83 c4 10             	add    $0x10,%esp
	init_queue(&env_exit_queue);
f0104780:	83 ec 0c             	sub    $0xc,%esp
f0104783:	68 64 60 6e f0       	push   $0xf06e6064
f0104788:	e8 f1 fb ff ff       	call   f010437e <init_queue>
f010478d:	83 c4 10             	add    $0x10,%esp
}
f0104790:	90                   	nop
f0104791:	c9                   	leave  
f0104792:	c3                   	ret    

f0104793 <sched_delete_ready_queues>:

void sched_delete_ready_queues()
{
f0104793:	55                   	push   %ebp
f0104794:	89 e5                	mov    %esp,%ebp
f0104796:	83 ec 08             	sub    $0x8,%esp
	if (env_ready_queues != NULL)
		kfree(env_ready_queues);
f0104799:	83 ec 0c             	sub    $0xc,%esp
f010479c:	68 0c 01 68 f0       	push   $0xf068010c
f01047a1:	e8 58 2c 00 00       	call   f01073fe <kfree>
f01047a6:	83 c4 10             	add    $0x10,%esp
	if (quantums != NULL)
	kfree(quantums);
f01047a9:	83 ec 0c             	sub    $0xc,%esp
f01047ac:	68 88 84 6e f0       	push   $0xf06e8488
f01047b1:	e8 48 2c 00 00       	call   f01073fe <kfree>
f01047b6:	83 c4 10             	add    $0x10,%esp
}
f01047b9:	90                   	nop
f01047ba:	c9                   	leave  
f01047bb:	c3                   	ret    

f01047bc <sched_insert_ready>:
void sched_insert_ready(struct Env* env)
{
f01047bc:	55                   	push   %ebp
f01047bd:	89 e5                	mov    %esp,%ebp
f01047bf:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01047c2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01047c6:	74 1d                	je     f01047e5 <sched_insert_ready+0x29>
	{
		env->env_status = ENV_READY ;
f01047c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01047cb:	c7 40 54 01 00 00 00 	movl   $0x1,0x54(%eax)
		enqueue(&(env_ready_queues[0]), env);
f01047d2:	83 ec 08             	sub    $0x8,%esp
f01047d5:	ff 75 08             	pushl  0x8(%ebp)
f01047d8:	68 0c 01 68 f0       	push   $0xf068010c
f01047dd:	e8 dd fb ff ff       	call   f01043bf <enqueue>
f01047e2:	83 c4 10             	add    $0x10,%esp
	}
}
f01047e5:	90                   	nop
f01047e6:	c9                   	leave  
f01047e7:	c3                   	ret    

f01047e8 <sched_remove_ready>:


void sched_remove_ready(struct Env* env)
{
f01047e8:	55                   	push   %ebp
f01047e9:	89 e5                	mov    %esp,%ebp
f01047eb:	83 ec 18             	sub    $0x18,%esp
	if(env != NULL)
f01047ee:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01047f2:	0f 84 02 01 00 00    	je     f01048fa <sched_remove_ready+0x112>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01047f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01047ff:	e9 e5 00 00 00       	jmp    f01048e9 <sched_remove_ready+0x101>
		{
			struct Env * ptr_env = find_env_in_queue(&(env_ready_queues[i]), env->env_id);
f0104804:	8b 45 08             	mov    0x8(%ebp),%eax
f0104807:	8b 40 4c             	mov    0x4c(%eax),%eax
f010480a:	89 c2                	mov    %eax,%edx
f010480c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010480f:	c1 e0 04             	shl    $0x4,%eax
f0104812:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f0104817:	52                   	push   %edx
f0104818:	50                   	push   %eax
f0104819:	e8 5b fd ff ff       	call   f0104579 <find_env_in_queue>
f010481e:	83 c4 08             	add    $0x8,%esp
f0104821:	89 45 f0             	mov    %eax,-0x10(%ebp)
			if (ptr_env != NULL)
f0104824:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0104828:	0f 84 b8 00 00 00    	je     f01048e6 <sched_remove_ready+0xfe>
			{
				LIST_REMOVE(&(env_ready_queues[i]), env);
f010482e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104832:	75 17                	jne    f010484b <sched_remove_ready+0x63>
f0104834:	83 ec 04             	sub    $0x4,%esp
f0104837:	68 a4 4a 13 f0       	push   $0xf0134aa4
f010483c:	68 f5 00 00 00       	push   $0xf5
f0104841:	68 93 4a 13 f0       	push   $0xf0134a93
f0104846:	e8 5b b9 ff ff       	call   f01001a6 <_panic>
f010484b:	8b 45 08             	mov    0x8(%ebp),%eax
f010484e:	8b 40 44             	mov    0x44(%eax),%eax
f0104851:	85 c0                	test   %eax,%eax
f0104853:	74 11                	je     f0104866 <sched_remove_ready+0x7e>
f0104855:	8b 45 08             	mov    0x8(%ebp),%eax
f0104858:	8b 40 44             	mov    0x44(%eax),%eax
f010485b:	8b 55 08             	mov    0x8(%ebp),%edx
f010485e:	8b 52 48             	mov    0x48(%edx),%edx
f0104861:	89 50 48             	mov    %edx,0x48(%eax)
f0104864:	eb 14                	jmp    f010487a <sched_remove_ready+0x92>
f0104866:	8b 45 08             	mov    0x8(%ebp),%eax
f0104869:	8b 40 48             	mov    0x48(%eax),%eax
f010486c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010486f:	c1 e2 04             	shl    $0x4,%edx
f0104872:	81 c2 10 01 68 f0    	add    $0xf0680110,%edx
f0104878:	89 02                	mov    %eax,(%edx)
f010487a:	8b 45 08             	mov    0x8(%ebp),%eax
f010487d:	8b 40 48             	mov    0x48(%eax),%eax
f0104880:	85 c0                	test   %eax,%eax
f0104882:	74 11                	je     f0104895 <sched_remove_ready+0xad>
f0104884:	8b 45 08             	mov    0x8(%ebp),%eax
f0104887:	8b 40 48             	mov    0x48(%eax),%eax
f010488a:	8b 55 08             	mov    0x8(%ebp),%edx
f010488d:	8b 52 44             	mov    0x44(%edx),%edx
f0104890:	89 50 44             	mov    %edx,0x44(%eax)
f0104893:	eb 14                	jmp    f01048a9 <sched_remove_ready+0xc1>
f0104895:	8b 45 08             	mov    0x8(%ebp),%eax
f0104898:	8b 40 44             	mov    0x44(%eax),%eax
f010489b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010489e:	c1 e2 04             	shl    $0x4,%edx
f01048a1:	81 c2 0c 01 68 f0    	add    $0xf068010c,%edx
f01048a7:	89 02                	mov    %eax,(%edx)
f01048a9:	8b 45 08             	mov    0x8(%ebp),%eax
f01048ac:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01048b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01048b6:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01048bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048c0:	c1 e0 04             	shl    $0x4,%eax
f01048c3:	05 18 01 68 f0       	add    $0xf0680118,%eax
f01048c8:	8b 00                	mov    (%eax),%eax
f01048ca:	8d 50 ff             	lea    -0x1(%eax),%edx
f01048cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01048d0:	c1 e0 04             	shl    $0x4,%eax
f01048d3:	05 18 01 68 f0       	add    $0xf0680118,%eax
f01048d8:	89 10                	mov    %edx,(%eax)
				env->env_status = ENV_UNKNOWN;
f01048da:	8b 45 08             	mov    0x8(%ebp),%eax
f01048dd:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
				return;
f01048e4:	eb 14                	jmp    f01048fa <sched_remove_ready+0x112>

void sched_remove_ready(struct Env* env)
{
	if(env != NULL)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01048e6:	ff 45 f4             	incl   -0xc(%ebp)
f01048e9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01048ee:	0f b6 c0             	movzbl %al,%eax
f01048f1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01048f4:	0f 8f 0a ff ff ff    	jg     f0104804 <sched_remove_ready+0x1c>
				env->env_status = ENV_UNKNOWN;
				return;
			}
		}
	}
}
f01048fa:	c9                   	leave  
f01048fb:	c3                   	ret    

f01048fc <sched_insert_new>:

void sched_insert_new(struct Env* env)
{
f01048fc:	55                   	push   %ebp
f01048fd:	89 e5                	mov    %esp,%ebp
f01048ff:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104902:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104906:	74 1d                	je     f0104925 <sched_insert_new+0x29>
	{
		env->env_status = ENV_NEW ;
f0104908:	8b 45 08             	mov    0x8(%ebp),%eax
f010490b:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
		enqueue(&env_new_queue, env);
f0104912:	83 ec 08             	sub    $0x8,%esp
f0104915:	ff 75 08             	pushl  0x8(%ebp)
f0104918:	68 98 84 6e f0       	push   $0xf06e8498
f010491d:	e8 9d fa ff ff       	call   f01043bf <enqueue>
f0104922:	83 c4 10             	add    $0x10,%esp
	}
}
f0104925:	90                   	nop
f0104926:	c9                   	leave  
f0104927:	c3                   	ret    

f0104928 <sched_remove_new>:
void sched_remove_new(struct Env* env)
{
f0104928:	55                   	push   %ebp
f0104929:	89 e5                	mov    %esp,%ebp
f010492b:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f010492e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104932:	0f 84 92 00 00 00    	je     f01049ca <sched_remove_new+0xa2>
	{
		LIST_REMOVE(&env_new_queue, env) ;
f0104938:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010493c:	75 17                	jne    f0104955 <sched_remove_new+0x2d>
f010493e:	83 ec 04             	sub    $0x4,%esp
f0104941:	68 a4 4a 13 f0       	push   $0xf0134aa4
f0104946:	68 09 01 00 00       	push   $0x109
f010494b:	68 93 4a 13 f0       	push   $0xf0134a93
f0104950:	e8 51 b8 ff ff       	call   f01001a6 <_panic>
f0104955:	8b 45 08             	mov    0x8(%ebp),%eax
f0104958:	8b 40 44             	mov    0x44(%eax),%eax
f010495b:	85 c0                	test   %eax,%eax
f010495d:	74 11                	je     f0104970 <sched_remove_new+0x48>
f010495f:	8b 45 08             	mov    0x8(%ebp),%eax
f0104962:	8b 40 44             	mov    0x44(%eax),%eax
f0104965:	8b 55 08             	mov    0x8(%ebp),%edx
f0104968:	8b 52 48             	mov    0x48(%edx),%edx
f010496b:	89 50 48             	mov    %edx,0x48(%eax)
f010496e:	eb 0b                	jmp    f010497b <sched_remove_new+0x53>
f0104970:	8b 45 08             	mov    0x8(%ebp),%eax
f0104973:	8b 40 48             	mov    0x48(%eax),%eax
f0104976:	a3 9c 84 6e f0       	mov    %eax,0xf06e849c
f010497b:	8b 45 08             	mov    0x8(%ebp),%eax
f010497e:	8b 40 48             	mov    0x48(%eax),%eax
f0104981:	85 c0                	test   %eax,%eax
f0104983:	74 11                	je     f0104996 <sched_remove_new+0x6e>
f0104985:	8b 45 08             	mov    0x8(%ebp),%eax
f0104988:	8b 40 48             	mov    0x48(%eax),%eax
f010498b:	8b 55 08             	mov    0x8(%ebp),%edx
f010498e:	8b 52 44             	mov    0x44(%edx),%edx
f0104991:	89 50 44             	mov    %edx,0x44(%eax)
f0104994:	eb 0b                	jmp    f01049a1 <sched_remove_new+0x79>
f0104996:	8b 45 08             	mov    0x8(%ebp),%eax
f0104999:	8b 40 44             	mov    0x44(%eax),%eax
f010499c:	a3 98 84 6e f0       	mov    %eax,0xf06e8498
f01049a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01049a4:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f01049ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01049ae:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01049b5:	a1 a4 84 6e f0       	mov    0xf06e84a4,%eax
f01049ba:	48                   	dec    %eax
f01049bb:	a3 a4 84 6e f0       	mov    %eax,0xf06e84a4
		env->env_status = ENV_UNKNOWN;
f01049c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01049c3:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f01049ca:	90                   	nop
f01049cb:	c9                   	leave  
f01049cc:	c3                   	ret    

f01049cd <sched_insert_exit>:

void sched_insert_exit(struct Env* env)
{
f01049cd:	55                   	push   %ebp
f01049ce:	89 e5                	mov    %esp,%ebp
f01049d0:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f01049d3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01049d7:	74 34                	je     f0104a0d <sched_insert_exit+0x40>
	{
		if(isBufferingEnabled()) {cleanup_buffers(env);}
f01049d9:	e8 64 89 00 00       	call   f010d342 <isBufferingEnabled>
f01049de:	84 c0                	test   %al,%al
f01049e0:	74 0e                	je     f01049f0 <sched_insert_exit+0x23>
f01049e2:	83 ec 0c             	sub    $0xc,%esp
f01049e5:	ff 75 08             	pushl  0x8(%ebp)
f01049e8:	e8 cb 5a 00 00       	call   f010a4b8 <cleanup_buffers>
f01049ed:	83 c4 10             	add    $0x10,%esp
		env->env_status = ENV_EXIT ;
f01049f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01049f3:	c7 40 54 05 00 00 00 	movl   $0x5,0x54(%eax)
		enqueue(&env_exit_queue, env);
f01049fa:	83 ec 08             	sub    $0x8,%esp
f01049fd:	ff 75 08             	pushl  0x8(%ebp)
f0104a00:	68 64 60 6e f0       	push   $0xf06e6064
f0104a05:	e8 b5 f9 ff ff       	call   f01043bf <enqueue>
f0104a0a:	83 c4 10             	add    $0x10,%esp
	}
}
f0104a0d:	90                   	nop
f0104a0e:	c9                   	leave  
f0104a0f:	c3                   	ret    

f0104a10 <sched_remove_exit>:
void sched_remove_exit(struct Env* env)
{
f0104a10:	55                   	push   %ebp
f0104a11:	89 e5                	mov    %esp,%ebp
f0104a13:	83 ec 08             	sub    $0x8,%esp
	if(env != NULL)
f0104a16:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a1a:	0f 84 92 00 00 00    	je     f0104ab2 <sched_remove_exit+0xa2>
	{
		LIST_REMOVE(&env_exit_queue, env) ;
f0104a20:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0104a24:	75 17                	jne    f0104a3d <sched_remove_exit+0x2d>
f0104a26:	83 ec 04             	sub    $0x4,%esp
f0104a29:	68 a4 4a 13 f0       	push   $0xf0134aa4
f0104a2e:	68 1b 01 00 00       	push   $0x11b
f0104a33:	68 93 4a 13 f0       	push   $0xf0134a93
f0104a38:	e8 69 b7 ff ff       	call   f01001a6 <_panic>
f0104a3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a40:	8b 40 44             	mov    0x44(%eax),%eax
f0104a43:	85 c0                	test   %eax,%eax
f0104a45:	74 11                	je     f0104a58 <sched_remove_exit+0x48>
f0104a47:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a4a:	8b 40 44             	mov    0x44(%eax),%eax
f0104a4d:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a50:	8b 52 48             	mov    0x48(%edx),%edx
f0104a53:	89 50 48             	mov    %edx,0x48(%eax)
f0104a56:	eb 0b                	jmp    f0104a63 <sched_remove_exit+0x53>
f0104a58:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a5b:	8b 40 48             	mov    0x48(%eax),%eax
f0104a5e:	a3 68 60 6e f0       	mov    %eax,0xf06e6068
f0104a63:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a66:	8b 40 48             	mov    0x48(%eax),%eax
f0104a69:	85 c0                	test   %eax,%eax
f0104a6b:	74 11                	je     f0104a7e <sched_remove_exit+0x6e>
f0104a6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a70:	8b 40 48             	mov    0x48(%eax),%eax
f0104a73:	8b 55 08             	mov    0x8(%ebp),%edx
f0104a76:	8b 52 44             	mov    0x44(%edx),%edx
f0104a79:	89 50 44             	mov    %edx,0x44(%eax)
f0104a7c:	eb 0b                	jmp    f0104a89 <sched_remove_exit+0x79>
f0104a7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a81:	8b 40 44             	mov    0x44(%eax),%eax
f0104a84:	a3 64 60 6e f0       	mov    %eax,0xf06e6064
f0104a89:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a8c:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104a93:	8b 45 08             	mov    0x8(%ebp),%eax
f0104a96:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104a9d:	a1 70 60 6e f0       	mov    0xf06e6070,%eax
f0104aa2:	48                   	dec    %eax
f0104aa3:	a3 70 60 6e f0       	mov    %eax,0xf06e6070
		env->env_status = ENV_UNKNOWN;
f0104aa8:	8b 45 08             	mov    0x8(%ebp),%eax
f0104aab:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	}
}
f0104ab2:	90                   	nop
f0104ab3:	c9                   	leave  
f0104ab4:	c3                   	ret    

f0104ab5 <sched_print_all>:

void sched_print_all()
{
f0104ab5:	55                   	push   %ebp
f0104ab6:	89 e5                	mov    %esp,%ebp
f0104ab8:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104abb:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f0104ac0:	85 c0                	test   %eax,%eax
f0104ac2:	74 6c                	je     f0104b30 <sched_print_all+0x7b>
	{
		cprintf("\nThe processes in NEW queue are:\n");
f0104ac4:	83 ec 0c             	sub    $0xc,%esp
f0104ac7:	68 24 4b 13 f0       	push   $0xf0134b24
f0104acc:	e8 5c c1 ff ff       	call   f0100c2d <cprintf>
f0104ad1:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104ad4:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f0104ad9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104adc:	eb 29                	jmp    f0104b07 <sched_print_all+0x52>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104ade:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ae1:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104ae7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104aea:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104aed:	83 ec 04             	sub    $0x4,%esp
f0104af0:	52                   	push   %edx
f0104af1:	50                   	push   %eax
f0104af2:	68 46 4b 13 f0       	push   $0xf0134b46
f0104af7:	e8 31 c1 ff ff       	call   f0100c2d <cprintf>
f0104afc:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nThe processes in NEW queue are:\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104aff:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0104b04:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104b07:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104b0b:	74 08                	je     f0104b15 <sched_print_all+0x60>
f0104b0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b10:	8b 40 44             	mov    0x44(%eax),%eax
f0104b13:	eb 05                	jmp    f0104b1a <sched_print_all+0x65>
f0104b15:	b8 00 00 00 00       	mov    $0x0,%eax
f0104b1a:	a3 a0 84 6e f0       	mov    %eax,0xf06e84a0
f0104b1f:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0104b24:	85 c0                	test   %eax,%eax
f0104b26:	75 b6                	jne    f0104ade <sched_print_all+0x29>
f0104b28:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104b2c:	75 b0                	jne    f0104ade <sched_print_all+0x29>
f0104b2e:	eb 10                	jmp    f0104b40 <sched_print_all+0x8b>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("\nNo processes in NEW queue\n");
f0104b30:	83 ec 0c             	sub    $0xc,%esp
f0104b33:	68 50 4b 13 f0       	push   $0xf0134b50
f0104b38:	e8 f0 c0 ff ff       	call   f0100c2d <cprintf>
f0104b3d:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104b40:	83 ec 0c             	sub    $0xc,%esp
f0104b43:	68 6c 4b 13 f0       	push   $0xf0134b6c
f0104b48:	e8 e0 c0 ff ff       	call   f0100c2d <cprintf>
f0104b4d:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104b50:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104b57:	e9 cb 00 00 00       	jmp    f0104c27 <sched_print_all+0x172>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104b5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b5f:	c1 e0 04             	shl    $0x4,%eax
f0104b62:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f0104b67:	8b 00                	mov    (%eax),%eax
f0104b69:	85 c0                	test   %eax,%eax
f0104b6b:	0f 84 90 00 00 00    	je     f0104c01 <sched_print_all+0x14c>
		{
			cprintf("The processes in READY queue #%d are:\n", i);
f0104b71:	83 ec 08             	sub    $0x8,%esp
f0104b74:	ff 75 f0             	pushl  -0x10(%ebp)
f0104b77:	68 a0 4b 13 f0       	push   $0xf0134ba0
f0104b7c:	e8 ac c0 ff ff       	call   f0100c2d <cprintf>
f0104b81:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104b84:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104b87:	c1 e0 04             	shl    $0x4,%eax
f0104b8a:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f0104b8f:	8b 00                	mov    (%eax),%eax
f0104b91:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104b94:	eb 31                	jmp    f0104bc7 <sched_print_all+0x112>
			{
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104b99:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104b9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ba2:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ba5:	83 ec 04             	sub    $0x4,%esp
f0104ba8:	52                   	push   %edx
f0104ba9:	50                   	push   %eax
f0104baa:	68 46 4b 13 f0       	push   $0xf0134b46
f0104baf:	e8 79 c0 ff ff       	call   f0100c2d <cprintf>
f0104bb4:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("The processes in READY queue #%d are:\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104bb7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104bba:	c1 e0 04             	shl    $0x4,%eax
f0104bbd:	05 14 01 68 f0       	add    $0xf0680114,%eax
f0104bc2:	8b 00                	mov    (%eax),%eax
f0104bc4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104bc7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bcb:	74 08                	je     f0104bd5 <sched_print_all+0x120>
f0104bcd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104bd0:	8b 40 44             	mov    0x44(%eax),%eax
f0104bd3:	eb 05                	jmp    f0104bda <sched_print_all+0x125>
f0104bd5:	b8 00 00 00 00       	mov    $0x0,%eax
f0104bda:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104bdd:	c1 e2 04             	shl    $0x4,%edx
f0104be0:	81 c2 14 01 68 f0    	add    $0xf0680114,%edx
f0104be6:	89 02                	mov    %eax,(%edx)
f0104be8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104beb:	c1 e0 04             	shl    $0x4,%eax
f0104bee:	05 14 01 68 f0       	add    $0xf0680114,%eax
f0104bf3:	8b 00                	mov    (%eax),%eax
f0104bf5:	85 c0                	test   %eax,%eax
f0104bf7:	75 9d                	jne    f0104b96 <sched_print_all+0xe1>
f0104bf9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104bfd:	75 97                	jne    f0104b96 <sched_print_all+0xe1>
f0104bff:	eb 13                	jmp    f0104c14 <sched_print_all+0x15f>
				cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n", i);
f0104c01:	83 ec 08             	sub    $0x8,%esp
f0104c04:	ff 75 f0             	pushl  -0x10(%ebp)
f0104c07:	68 c8 4b 13 f0       	push   $0xf0134bc8
f0104c0c:	e8 1c c0 ff ff       	call   f0100c2d <cprintf>
f0104c11:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104c14:	83 ec 0c             	sub    $0xc,%esp
f0104c17:	68 6c 4b 13 f0       	push   $0xf0134b6c
f0104c1c:	e8 0c c0 ff ff       	call   f0100c2d <cprintf>
f0104c21:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("\nNo processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104c24:	ff 45 f0             	incl   -0x10(%ebp)
f0104c27:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0104c2c:	0f b6 c0             	movzbl %al,%eax
f0104c2f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104c32:	0f 8f 24 ff ff ff    	jg     f0104b5c <sched_print_all+0xa7>
		{
			cprintf("No processes in READY queue #%d\n", i);
		}
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
f0104c38:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f0104c3d:	85 c0                	test   %eax,%eax
f0104c3f:	74 6c                	je     f0104cad <sched_print_all+0x1f8>
	{
		cprintf("The processes in EXIT queue are:\n");
f0104c41:	83 ec 0c             	sub    $0xc,%esp
f0104c44:	68 ec 4b 13 f0       	push   $0xf0134bec
f0104c49:	e8 df bf ff ff       	call   f0100c2d <cprintf>
f0104c4e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104c51:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f0104c56:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c59:	eb 29                	jmp    f0104c84 <sched_print_all+0x1cf>
		{
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
f0104c5b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c5e:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104c64:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c67:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104c6a:	83 ec 04             	sub    $0x4,%esp
f0104c6d:	52                   	push   %edx
f0104c6e:	50                   	push   %eax
f0104c6f:	68 46 4b 13 f0       	push   $0xf0134b46
f0104c74:	e8 b4 bf ff ff       	call   f0100c2d <cprintf>
f0104c79:	83 c4 10             	add    $0x10,%esp
		cprintf("================================================\n");
	}
	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("The processes in EXIT queue are:\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104c7c:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f0104c81:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104c84:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104c88:	74 08                	je     f0104c92 <sched_print_all+0x1dd>
f0104c8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104c8d:	8b 40 44             	mov    0x44(%eax),%eax
f0104c90:	eb 05                	jmp    f0104c97 <sched_print_all+0x1e2>
f0104c92:	b8 00 00 00 00       	mov    $0x0,%eax
f0104c97:	a3 6c 60 6e f0       	mov    %eax,0xf06e606c
f0104c9c:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f0104ca1:	85 c0                	test   %eax,%eax
f0104ca3:	75 b6                	jne    f0104c5b <sched_print_all+0x1a6>
f0104ca5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104ca9:	75 b0                	jne    f0104c5b <sched_print_all+0x1a6>
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
	}
}
f0104cab:	eb 10                	jmp    f0104cbd <sched_print_all+0x208>
			cprintf("	[%d] %s\n", ptr_env->env_id, ptr_env->prog_name);
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0104cad:	83 ec 0c             	sub    $0xc,%esp
f0104cb0:	68 0e 4c 13 f0       	push   $0xf0134c0e
f0104cb5:	e8 73 bf ff ff       	call   f0100c2d <cprintf>
f0104cba:	83 c4 10             	add    $0x10,%esp
	}
}
f0104cbd:	90                   	nop
f0104cbe:	c9                   	leave  
f0104cbf:	c3                   	ret    

f0104cc0 <sched_run_all>:

void sched_run_all()
{
f0104cc0:	55                   	push   %ebp
f0104cc1:	89 e5                	mov    %esp,%ebp
f0104cc3:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0104cc6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104ccd:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f0104cd2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104cd5:	eb 24                	jmp    f0104cfb <sched_run_all+0x3b>
	{
		sched_remove_new(ptr_env);
f0104cd7:	83 ec 0c             	sub    $0xc,%esp
f0104cda:	ff 75 f4             	pushl  -0xc(%ebp)
f0104cdd:	e8 46 fc ff ff       	call   f0104928 <sched_remove_new>
f0104ce2:	83 c4 10             	add    $0x10,%esp
		sched_insert_ready(ptr_env);
f0104ce5:	83 ec 0c             	sub    $0xc,%esp
f0104ce8:	ff 75 f4             	pushl  -0xc(%ebp)
f0104ceb:	e8 cc fa ff ff       	call   f01047bc <sched_insert_ready>
f0104cf0:	83 c4 10             	add    $0x10,%esp
}

void sched_run_all()
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f0104cf3:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0104cf8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104cfb:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104cff:	74 08                	je     f0104d09 <sched_run_all+0x49>
f0104d01:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d04:	8b 40 44             	mov    0x44(%eax),%eax
f0104d07:	eb 05                	jmp    f0104d0e <sched_run_all+0x4e>
f0104d09:	b8 00 00 00 00       	mov    $0x0,%eax
f0104d0e:	a3 a0 84 6e f0       	mov    %eax,0xf06e84a0
f0104d13:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0104d18:	85 c0                	test   %eax,%eax
f0104d1a:	75 bb                	jne    f0104cd7 <sched_run_all+0x17>
f0104d1c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104d20:	75 b5                	jne    f0104cd7 <sched_run_all+0x17>
	{
		sched_remove_new(ptr_env);
		sched_insert_ready(ptr_env);
	}
	/*2015*///if scheduler not run yet, then invoke it!
	if (scheduler_status == SCH_STOPPED)
f0104d22:	a1 b4 84 6e f0       	mov    0xf06e84b4,%eax
f0104d27:	85 c0                	test   %eax,%eax
f0104d29:	75 05                	jne    f0104d30 <sched_run_all+0x70>
		fos_scheduler();
f0104d2b:	e8 c3 f8 ff ff       	call   f01045f3 <fos_scheduler>
}
f0104d30:	90                   	nop
f0104d31:	c9                   	leave  
f0104d32:	c3                   	ret    

f0104d33 <sched_kill_all>:

void sched_kill_all()
{
f0104d33:	55                   	push   %ebp
f0104d34:	89 e5                	mov    %esp,%ebp
f0104d36:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
f0104d39:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f0104d3e:	85 c0                	test   %eax,%eax
f0104d40:	0f 84 98 00 00 00    	je     f0104dde <sched_kill_all+0xab>
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
f0104d46:	83 ec 0c             	sub    $0xc,%esp
f0104d49:	68 2c 4c 13 f0       	push   $0xf0134c2c
f0104d4e:	e8 da be ff ff       	call   f0100c2d <cprintf>
f0104d53:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104d56:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f0104d5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104d5e:	eb 55                	jmp    f0104db5 <sched_kill_all+0x82>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104d60:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d63:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104d69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104d6c:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104d6f:	83 ec 04             	sub    $0x4,%esp
f0104d72:	52                   	push   %edx
f0104d73:	50                   	push   %eax
f0104d74:	68 58 4c 13 f0       	push   $0xf0134c58
f0104d79:	e8 af be ff ff       	call   f0100c2d <cprintf>
f0104d7e:	83 c4 10             	add    $0x10,%esp
			sched_remove_new(ptr_env);
f0104d81:	83 ec 0c             	sub    $0xc,%esp
f0104d84:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d87:	e8 9c fb ff ff       	call   f0104928 <sched_remove_new>
f0104d8c:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0104d8f:	83 ec 0c             	sub    $0xc,%esp
f0104d92:	ff 75 f4             	pushl  -0xc(%ebp)
f0104d95:	e8 09 43 00 00       	call   f01090a3 <env_free>
f0104d9a:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0104d9d:	83 ec 0c             	sub    $0xc,%esp
f0104da0:	68 6b 4c 13 f0       	push   $0xf0134c6b
f0104da5:	e8 83 be ff ff       	call   f0100c2d <cprintf>
f0104daa:	83 c4 10             	add    $0x10,%esp
{
	struct Env* ptr_env ;
	if (!LIST_EMPTY(&env_new_queue))
	{
		cprintf("\nKILLING the processes in the NEW queue...\n");
		LIST_FOREACH(ptr_env, &env_new_queue)
f0104dad:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0104db2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104db5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104db9:	74 08                	je     f0104dc3 <sched_kill_all+0x90>
f0104dbb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104dbe:	8b 40 44             	mov    0x44(%eax),%eax
f0104dc1:	eb 05                	jmp    f0104dc8 <sched_kill_all+0x95>
f0104dc3:	b8 00 00 00 00       	mov    $0x0,%eax
f0104dc8:	a3 a0 84 6e f0       	mov    %eax,0xf06e84a0
f0104dcd:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0104dd2:	85 c0                	test   %eax,%eax
f0104dd4:	75 8a                	jne    f0104d60 <sched_kill_all+0x2d>
f0104dd6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104dda:	75 84                	jne    f0104d60 <sched_kill_all+0x2d>
f0104ddc:	eb 10                	jmp    f0104dee <sched_kill_all+0xbb>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in NEW queue\n");
f0104dde:	83 ec 0c             	sub    $0xc,%esp
f0104de1:	68 71 4c 13 f0       	push   $0xf0134c71
f0104de6:	e8 42 be ff ff       	call   f0100c2d <cprintf>
f0104deb:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("================================================\n");
f0104dee:	83 ec 0c             	sub    $0xc,%esp
f0104df1:	68 6c 4b 13 f0       	push   $0xf0134b6c
f0104df6:	e8 32 be ff ff       	call   f0100c2d <cprintf>
f0104dfb:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104dfe:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0104e05:	e9 a0 01 00 00       	jmp    f0104faa <sched_kill_all+0x277>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0104e0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e0d:	c1 e0 04             	shl    $0x4,%eax
f0104e10:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f0104e15:	8b 00                	mov    (%eax),%eax
f0104e17:	85 c0                	test   %eax,%eax
f0104e19:	0f 84 65 01 00 00    	je     f0104f84 <sched_kill_all+0x251>
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
f0104e1f:	83 ec 08             	sub    $0x8,%esp
f0104e22:	ff 75 f0             	pushl  -0x10(%ebp)
f0104e25:	68 8c 4c 13 f0       	push   $0xf0134c8c
f0104e2a:	e8 fe bd ff ff       	call   f0100c2d <cprintf>
f0104e2f:	83 c4 10             	add    $0x10,%esp
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104e32:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104e35:	c1 e0 04             	shl    $0x4,%eax
f0104e38:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f0104e3d:	8b 00                	mov    (%eax),%eax
f0104e3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104e42:	e9 fb 00 00 00       	jmp    f0104f42 <sched_kill_all+0x20f>
			{
				cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104e47:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e4a:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104e50:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e53:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104e56:	83 ec 04             	sub    $0x4,%esp
f0104e59:	52                   	push   %edx
f0104e5a:	50                   	push   %eax
f0104e5b:	68 58 4c 13 f0       	push   $0xf0134c58
f0104e60:	e8 c8 bd ff ff       	call   f0100c2d <cprintf>
f0104e65:	83 c4 10             	add    $0x10,%esp
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f0104e68:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104e6c:	75 17                	jne    f0104e85 <sched_kill_all+0x152>
f0104e6e:	83 ec 04             	sub    $0x4,%esp
f0104e71:	68 a4 4a 13 f0       	push   $0xf0134aa4
f0104e76:	68 76 01 00 00       	push   $0x176
f0104e7b:	68 93 4a 13 f0       	push   $0xf0134a93
f0104e80:	e8 21 b3 ff ff       	call   f01001a6 <_panic>
f0104e85:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e88:	8b 40 44             	mov    0x44(%eax),%eax
f0104e8b:	85 c0                	test   %eax,%eax
f0104e8d:	74 11                	je     f0104ea0 <sched_kill_all+0x16d>
f0104e8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104e92:	8b 40 44             	mov    0x44(%eax),%eax
f0104e95:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104e98:	8b 52 48             	mov    0x48(%edx),%edx
f0104e9b:	89 50 48             	mov    %edx,0x48(%eax)
f0104e9e:	eb 14                	jmp    f0104eb4 <sched_kill_all+0x181>
f0104ea0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ea3:	8b 40 48             	mov    0x48(%eax),%eax
f0104ea6:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ea9:	c1 e2 04             	shl    $0x4,%edx
f0104eac:	81 c2 10 01 68 f0    	add    $0xf0680110,%edx
f0104eb2:	89 02                	mov    %eax,(%edx)
f0104eb4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104eb7:	8b 40 48             	mov    0x48(%eax),%eax
f0104eba:	85 c0                	test   %eax,%eax
f0104ebc:	74 11                	je     f0104ecf <sched_kill_all+0x19c>
f0104ebe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ec1:	8b 40 48             	mov    0x48(%eax),%eax
f0104ec4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0104ec7:	8b 52 44             	mov    0x44(%edx),%edx
f0104eca:	89 50 44             	mov    %edx,0x44(%eax)
f0104ecd:	eb 14                	jmp    f0104ee3 <sched_kill_all+0x1b0>
f0104ecf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ed2:	8b 40 44             	mov    0x44(%eax),%eax
f0104ed5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104ed8:	c1 e2 04             	shl    $0x4,%edx
f0104edb:	81 c2 0c 01 68 f0    	add    $0xf068010c,%edx
f0104ee1:	89 02                	mov    %eax,(%edx)
f0104ee3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ee6:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0104eed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104ef0:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0104ef7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104efa:	c1 e0 04             	shl    $0x4,%eax
f0104efd:	05 18 01 68 f0       	add    $0xf0680118,%eax
f0104f02:	8b 00                	mov    (%eax),%eax
f0104f04:	8d 50 ff             	lea    -0x1(%eax),%edx
f0104f07:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f0a:	c1 e0 04             	shl    $0x4,%eax
f0104f0d:	05 18 01 68 f0       	add    $0xf0680118,%eax
f0104f12:	89 10                	mov    %edx,(%eax)
				env_free(ptr_env);
f0104f14:	83 ec 0c             	sub    $0xc,%esp
f0104f17:	ff 75 f4             	pushl  -0xc(%ebp)
f0104f1a:	e8 84 41 00 00       	call   f01090a3 <env_free>
f0104f1f:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0104f22:	83 ec 0c             	sub    $0xc,%esp
f0104f25:	68 6b 4c 13 f0       	push   $0xf0134c6b
f0104f2a:	e8 fe bc ff ff       	call   f0100c2d <cprintf>
f0104f2f:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			cprintf("KILLING the processes in the READY queue #%d...\n", i);
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0104f32:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f35:	c1 e0 04             	shl    $0x4,%eax
f0104f38:	05 14 01 68 f0       	add    $0xf0680114,%eax
f0104f3d:	8b 00                	mov    (%eax),%eax
f0104f3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104f42:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f46:	74 08                	je     f0104f50 <sched_kill_all+0x21d>
f0104f48:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104f4b:	8b 40 44             	mov    0x44(%eax),%eax
f0104f4e:	eb 05                	jmp    f0104f55 <sched_kill_all+0x222>
f0104f50:	b8 00 00 00 00       	mov    $0x0,%eax
f0104f55:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0104f58:	c1 e2 04             	shl    $0x4,%edx
f0104f5b:	81 c2 14 01 68 f0    	add    $0xf0680114,%edx
f0104f61:	89 02                	mov    %eax,(%edx)
f0104f63:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0104f66:	c1 e0 04             	shl    $0x4,%eax
f0104f69:	05 14 01 68 f0       	add    $0xf0680114,%eax
f0104f6e:	8b 00                	mov    (%eax),%eax
f0104f70:	85 c0                	test   %eax,%eax
f0104f72:	0f 85 cf fe ff ff    	jne    f0104e47 <sched_kill_all+0x114>
f0104f78:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0104f7c:	0f 85 c5 fe ff ff    	jne    f0104e47 <sched_kill_all+0x114>
f0104f82:	eb 13                	jmp    f0104f97 <sched_kill_all+0x264>
				cprintf("DONE\n");
			}
		}
		else
		{
			cprintf("No processes in READY queue #%d\n",i);
f0104f84:	83 ec 08             	sub    $0x8,%esp
f0104f87:	ff 75 f0             	pushl  -0x10(%ebp)
f0104f8a:	68 c8 4b 13 f0       	push   $0xf0134bc8
f0104f8f:	e8 99 bc ff ff       	call   f0100c2d <cprintf>
f0104f94:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("================================================\n");
f0104f97:	83 ec 0c             	sub    $0xc,%esp
f0104f9a:	68 6c 4b 13 f0       	push   $0xf0134b6c
f0104f9f:	e8 89 bc ff ff       	call   f0100c2d <cprintf>
f0104fa4:	83 c4 10             	add    $0x10,%esp
	else
	{
		cprintf("No processes in NEW queue\n");
	}
	cprintf("================================================\n");
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f0104fa7:	ff 45 f0             	incl   -0x10(%ebp)
f0104faa:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0104faf:	0f b6 c0             	movzbl %al,%eax
f0104fb2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0104fb5:	0f 8f 4f fe ff ff    	jg     f0104e0a <sched_kill_all+0xd7>
			cprintf("No processes in READY queue #%d\n",i);
		}
		cprintf("================================================\n");
	}

	if (!LIST_EMPTY(&env_exit_queue))
f0104fbb:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f0104fc0:	85 c0                	test   %eax,%eax
f0104fc2:	0f 84 98 00 00 00    	je     f0105060 <sched_kill_all+0x32d>
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
f0104fc8:	83 ec 0c             	sub    $0xc,%esp
f0104fcb:	68 c0 4c 13 f0       	push   $0xf0134cc0
f0104fd0:	e8 58 bc ff ff       	call   f0100c2d <cprintf>
f0104fd5:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_env, &env_exit_queue)
f0104fd8:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f0104fdd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0104fe0:	eb 55                	jmp    f0105037 <sched_kill_all+0x304>
		{
			cprintf("	killing[%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0104fe2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fe5:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0104feb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0104fee:	8b 40 4c             	mov    0x4c(%eax),%eax
f0104ff1:	83 ec 04             	sub    $0x4,%esp
f0104ff4:	52                   	push   %edx
f0104ff5:	50                   	push   %eax
f0104ff6:	68 58 4c 13 f0       	push   $0xf0134c58
f0104ffb:	e8 2d bc ff ff       	call   f0100c2d <cprintf>
f0105000:	83 c4 10             	add    $0x10,%esp
			sched_remove_exit(ptr_env);
f0105003:	83 ec 0c             	sub    $0xc,%esp
f0105006:	ff 75 f4             	pushl  -0xc(%ebp)
f0105009:	e8 02 fa ff ff       	call   f0104a10 <sched_remove_exit>
f010500e:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105011:	83 ec 0c             	sub    $0xc,%esp
f0105014:	ff 75 f4             	pushl  -0xc(%ebp)
f0105017:	e8 87 40 00 00       	call   f01090a3 <env_free>
f010501c:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f010501f:	83 ec 0c             	sub    $0xc,%esp
f0105022:	68 6b 4c 13 f0       	push   $0xf0134c6b
f0105027:	e8 01 bc ff ff       	call   f0100c2d <cprintf>
f010502c:	83 c4 10             	add    $0x10,%esp
	}

	if (!LIST_EMPTY(&env_exit_queue))
	{
		cprintf("KILLING the processes in the EXIT queue...\n");
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010502f:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f0105034:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105037:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010503b:	74 08                	je     f0105045 <sched_kill_all+0x312>
f010503d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105040:	8b 40 44             	mov    0x44(%eax),%eax
f0105043:	eb 05                	jmp    f010504a <sched_kill_all+0x317>
f0105045:	b8 00 00 00 00       	mov    $0x0,%eax
f010504a:	a3 6c 60 6e f0       	mov    %eax,0xf06e606c
f010504f:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f0105054:	85 c0                	test   %eax,%eax
f0105056:	75 8a                	jne    f0104fe2 <sched_kill_all+0x2af>
f0105058:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010505c:	75 84                	jne    f0104fe2 <sched_kill_all+0x2af>
f010505e:	eb 10                	jmp    f0105070 <sched_kill_all+0x33d>
			cprintf("DONE\n");
		}
	}
	else
	{
		cprintf("No processes in EXIT queue\n");
f0105060:	83 ec 0c             	sub    $0xc,%esp
f0105063:	68 0e 4c 13 f0       	push   $0xf0134c0e
f0105068:	e8 c0 bb ff ff       	call   f0100c2d <cprintf>
f010506d:	83 c4 10             	add    $0x10,%esp
	}

	//reinvoke the scheduler since there're no env to return back to it
	curenv = NULL;
f0105070:	c7 05 34 87 65 f0 00 	movl   $0x0,0xf0658734
f0105077:	00 00 00 
	fos_scheduler();
f010507a:	e8 74 f5 ff ff       	call   f01045f3 <fos_scheduler>

f010507f <sched_new_env>:
}


void sched_new_env(struct Env* e)
{
f010507f:	55                   	push   %ebp
f0105080:	89 e5                	mov    %esp,%ebp
f0105082:	83 ec 08             	sub    $0x8,%esp
	//add the given env to the scheduler NEW queue
	if (e!=NULL)
f0105085:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0105089:	74 0e                	je     f0105099 <sched_new_env+0x1a>
	{
		sched_insert_new(e);
f010508b:	83 ec 0c             	sub    $0xc,%esp
f010508e:	ff 75 08             	pushl  0x8(%ebp)
f0105091:	e8 66 f8 ff ff       	call   f01048fc <sched_insert_new>
f0105096:	83 c4 10             	add    $0x10,%esp
	}
}
f0105099:	90                   	nop
f010509a:	c9                   	leave  
f010509b:	c3                   	ret    

f010509c <sched_run_env>:
	sched_insert_new(e);
}
 */

void sched_run_env(uint32 envId)
{
f010509c:	55                   	push   %ebp
f010509d:	89 e5                	mov    %esp,%ebp
f010509f:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01050a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(ptr_env, &env_new_queue)
f01050a9:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f01050ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050b1:	eb 3d                	jmp    f01050f0 <sched_run_env+0x54>
	{
		if(ptr_env->env_id == envId)
f01050b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050b6:	8b 40 4c             	mov    0x4c(%eax),%eax
f01050b9:	3b 45 08             	cmp    0x8(%ebp),%eax
f01050bc:	75 2a                	jne    f01050e8 <sched_run_env+0x4c>
		{
			sched_remove_new(ptr_env);
f01050be:	83 ec 0c             	sub    $0xc,%esp
f01050c1:	ff 75 f4             	pushl  -0xc(%ebp)
f01050c4:	e8 5f f8 ff ff       	call   f0104928 <sched_remove_new>
f01050c9:	83 c4 10             	add    $0x10,%esp
			sched_insert_ready(ptr_env);
f01050cc:	83 ec 0c             	sub    $0xc,%esp
f01050cf:	ff 75 f4             	pushl  -0xc(%ebp)
f01050d2:	e8 e5 f6 ff ff       	call   f01047bc <sched_insert_ready>
f01050d7:	83 c4 10             	add    $0x10,%esp

			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
f01050da:	a1 b4 84 6e f0       	mov    0xf06e84b4,%eax
f01050df:	85 c0                	test   %eax,%eax
f01050e1:	75 36                	jne    f0105119 <sched_run_env+0x7d>
			{
				fos_scheduler();
f01050e3:	e8 0b f5 ff ff       	call   f01045f3 <fos_scheduler>
 */

void sched_run_env(uint32 envId)
{
	struct Env* ptr_env=NULL;
	LIST_FOREACH(ptr_env, &env_new_queue)
f01050e8:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f01050ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01050f0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01050f4:	74 08                	je     f01050fe <sched_run_env+0x62>
f01050f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01050f9:	8b 40 44             	mov    0x44(%eax),%eax
f01050fc:	eb 05                	jmp    f0105103 <sched_run_env+0x67>
f01050fe:	b8 00 00 00 00       	mov    $0x0,%eax
f0105103:	a3 a0 84 6e f0       	mov    %eax,0xf06e84a0
f0105108:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f010510d:	85 c0                	test   %eax,%eax
f010510f:	75 a2                	jne    f01050b3 <sched_run_env+0x17>
f0105111:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105115:	75 9c                	jne    f01050b3 <sched_run_env+0x17>
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f0105117:	eb 01                	jmp    f010511a <sched_run_env+0x7e>
			/*2015*///if scheduler not run yet, then invoke it!
			if (scheduler_status == SCH_STOPPED)
			{
				fos_scheduler();
			}
			break;
f0105119:	90                   	nop
	//	LIST_FOREACH(ptr_env, &env_ready_queue)
	//	{
	//		cprintf("%s - %d\n", ptr_env->prog_name, ptr_env->env_id);
	//	}

}
f010511a:	90                   	nop
f010511b:	c9                   	leave  
f010511c:	c3                   	ret    

f010511d <sched_exit_env>:

void sched_exit_env(uint32 envId)
{
f010511d:	55                   	push   %ebp
f010511e:	89 e5                	mov    %esp,%ebp
f0105120:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105123:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f010512a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f0105131:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105135:	75 59                	jne    f0105190 <sched_exit_env+0x73>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105137:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f010513c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010513f:	eb 28                	jmp    f0105169 <sched_exit_env+0x4c>
				{
			if(ptr_env->env_id == envId)
f0105141:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105144:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105147:	3b 45 08             	cmp    0x8(%ebp),%eax
f010514a:	75 15                	jne    f0105161 <sched_exit_env+0x44>
			{
				sched_remove_new(ptr_env);
f010514c:	83 ec 0c             	sub    $0xc,%esp
f010514f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105152:	e8 d1 f7 ff ff       	call   f0104928 <sched_remove_new>
f0105157:	83 c4 10             	add    $0x10,%esp
				found = 1;
f010515a:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f0105161:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0105166:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105169:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010516d:	74 08                	je     f0105177 <sched_exit_env+0x5a>
f010516f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105172:	8b 40 44             	mov    0x44(%eax),%eax
f0105175:	eb 05                	jmp    f010517c <sched_exit_env+0x5f>
f0105177:	b8 00 00 00 00       	mov    $0x0,%eax
f010517c:	a3 a0 84 6e f0       	mov    %eax,0xf06e84a0
f0105181:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0105186:	85 c0                	test   %eax,%eax
f0105188:	75 b7                	jne    f0105141 <sched_exit_env+0x24>
f010518a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010518e:	75 b1                	jne    f0105141 <sched_exit_env+0x24>
				found = 1;
				//			return;
			}
				}
	}
	if (!found)
f0105190:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105194:	0f 85 6e 01 00 00    	jne    f0105308 <sched_exit_env+0x1eb>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f010519a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f01051a1:	e9 4e 01 00 00       	jmp    f01052f4 <sched_exit_env+0x1d7>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f01051a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051a9:	c1 e0 04             	shl    $0x4,%eax
f01051ac:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f01051b1:	8b 00                	mov    (%eax),%eax
f01051b3:	85 c0                	test   %eax,%eax
f01051b5:	0f 84 30 01 00 00    	je     f01052eb <sched_exit_env+0x1ce>
			{
				ptr_env=NULL;
f01051bb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01051c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01051c5:	c1 e0 04             	shl    $0x4,%eax
f01051c8:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f01051cd:	8b 00                	mov    (%eax),%eax
f01051cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01051d2:	e9 d4 00 00 00       	jmp    f01052ab <sched_exit_env+0x18e>
				{
					if(ptr_env->env_id == envId)
f01051d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01051da:	8b 40 4c             	mov    0x4c(%eax),%eax
f01051dd:	3b 45 08             	cmp    0x8(%ebp),%eax
f01051e0:	0f 85 b5 00 00 00    	jne    f010529b <sched_exit_env+0x17e>
					{
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01051e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01051ea:	75 17                	jne    f0105203 <sched_exit_env+0xe6>
f01051ec:	83 ec 04             	sub    $0x4,%esp
f01051ef:	68 a4 4a 13 f0       	push   $0xf0134aa4
f01051f4:	68 e1 01 00 00       	push   $0x1e1
f01051f9:	68 93 4a 13 f0       	push   $0xf0134a93
f01051fe:	e8 a3 af ff ff       	call   f01001a6 <_panic>
f0105203:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105206:	8b 40 44             	mov    0x44(%eax),%eax
f0105209:	85 c0                	test   %eax,%eax
f010520b:	74 11                	je     f010521e <sched_exit_env+0x101>
f010520d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105210:	8b 40 44             	mov    0x44(%eax),%eax
f0105213:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105216:	8b 52 48             	mov    0x48(%edx),%edx
f0105219:	89 50 48             	mov    %edx,0x48(%eax)
f010521c:	eb 14                	jmp    f0105232 <sched_exit_env+0x115>
f010521e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105221:	8b 40 48             	mov    0x48(%eax),%eax
f0105224:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105227:	c1 e2 04             	shl    $0x4,%edx
f010522a:	81 c2 10 01 68 f0    	add    $0xf0680110,%edx
f0105230:	89 02                	mov    %eax,(%edx)
f0105232:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105235:	8b 40 48             	mov    0x48(%eax),%eax
f0105238:	85 c0                	test   %eax,%eax
f010523a:	74 11                	je     f010524d <sched_exit_env+0x130>
f010523c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010523f:	8b 40 48             	mov    0x48(%eax),%eax
f0105242:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105245:	8b 52 44             	mov    0x44(%edx),%edx
f0105248:	89 50 44             	mov    %edx,0x44(%eax)
f010524b:	eb 14                	jmp    f0105261 <sched_exit_env+0x144>
f010524d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105250:	8b 40 44             	mov    0x44(%eax),%eax
f0105253:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105256:	c1 e2 04             	shl    $0x4,%edx
f0105259:	81 c2 0c 01 68 f0    	add    $0xf068010c,%edx
f010525f:	89 02                	mov    %eax,(%edx)
f0105261:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105264:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010526b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010526e:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105275:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105278:	c1 e0 04             	shl    $0x4,%eax
f010527b:	05 18 01 68 f0       	add    $0xf0680118,%eax
f0105280:	8b 00                	mov    (%eax),%eax
f0105282:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105285:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105288:	c1 e0 04             	shl    $0x4,%eax
f010528b:	05 18 01 68 f0       	add    $0xf0680118,%eax
f0105290:	89 10                	mov    %edx,(%eax)
						found = 1;
f0105292:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f0105299:	eb 50                	jmp    f01052eb <sched_exit_env+0x1ce>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f010529b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010529e:	c1 e0 04             	shl    $0x4,%eax
f01052a1:	05 14 01 68 f0       	add    $0xf0680114,%eax
f01052a6:	8b 00                	mov    (%eax),%eax
f01052a8:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01052ab:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052af:	74 08                	je     f01052b9 <sched_exit_env+0x19c>
f01052b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01052b4:	8b 40 44             	mov    0x44(%eax),%eax
f01052b7:	eb 05                	jmp    f01052be <sched_exit_env+0x1a1>
f01052b9:	b8 00 00 00 00       	mov    $0x0,%eax
f01052be:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01052c1:	c1 e2 04             	shl    $0x4,%edx
f01052c4:	81 c2 14 01 68 f0    	add    $0xf0680114,%edx
f01052ca:	89 02                	mov    %eax,(%edx)
f01052cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01052cf:	c1 e0 04             	shl    $0x4,%eax
f01052d2:	05 14 01 68 f0       	add    $0xf0680114,%eax
f01052d7:	8b 00                	mov    (%eax),%eax
f01052d9:	85 c0                	test   %eax,%eax
f01052db:	0f 85 f6 fe ff ff    	jne    f01051d7 <sched_exit_env+0xba>
f01052e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01052e5:	0f 85 ec fe ff ff    	jne    f01051d7 <sched_exit_env+0xba>
						found = 1;
						break;
					}
				}
			}
			if (found)
f01052eb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01052ef:	75 16                	jne    f0105307 <sched_exit_env+0x1ea>
			}
				}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f01052f1:	ff 45 ec             	incl   -0x14(%ebp)
f01052f4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01052f9:	0f b6 c0             	movzbl %al,%eax
f01052fc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01052ff:	0f 8f a1 fe ff ff    	jg     f01051a6 <sched_exit_env+0x89>
f0105305:	eb 01                	jmp    f0105308 <sched_exit_env+0x1eb>
						break;
					}
				}
			}
			if (found)
				break;
f0105307:	90                   	nop
		}
	}
	if (!found)
f0105308:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010530c:	75 1c                	jne    f010532a <sched_exit_env+0x20d>
	{
		if (curenv->env_id == envId)
f010530e:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f0105313:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105316:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105319:	75 0f                	jne    f010532a <sched_exit_env+0x20d>
		{
			ptr_env = curenv;
f010531b:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f0105320:	89 45 f4             	mov    %eax,-0xc(%ebp)
			found = 1;
f0105323:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}

	if (found)
f010532a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010532e:	74 2a                	je     f010535a <sched_exit_env+0x23d>
	{
		sched_insert_exit(ptr_env);
f0105330:	83 ec 0c             	sub    $0xc,%esp
f0105333:	ff 75 f4             	pushl  -0xc(%ebp)
f0105336:	e8 92 f6 ff ff       	call   f01049cd <sched_insert_exit>
f010533b:	83 c4 10             	add    $0x10,%esp

		//If it's the curenv, then reinvoke the scheduler as there's no meaning to return back to an exited env
		if (curenv->env_id == envId)
f010533e:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f0105343:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105346:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105349:	75 0f                	jne    f010535a <sched_exit_env+0x23d>
		{
			curenv = NULL;
f010534b:	c7 05 34 87 65 f0 00 	movl   $0x0,0xf0658734
f0105352:	00 00 00 
			fos_scheduler();
f0105355:	e8 99 f2 ff ff       	call   f01045f3 <fos_scheduler>
		}
	}
}
f010535a:	90                   	nop
f010535b:	c9                   	leave  
f010535c:	c3                   	ret    

f010535d <sched_exit_all_ready_envs>:

/*2018*/
void sched_exit_all_ready_envs()
{
f010535d:	55                   	push   %ebp
f010535e:	89 e5                	mov    %esp,%ebp
f0105360:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f0105363:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f010536a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0105371:	e9 3e 01 00 00       	jmp    f01054b4 <sched_exit_all_ready_envs+0x157>
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
f0105376:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105379:	c1 e0 04             	shl    $0x4,%eax
f010537c:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f0105381:	8b 00                	mov    (%eax),%eax
f0105383:	85 c0                	test   %eax,%eax
f0105385:	0f 84 26 01 00 00    	je     f01054b1 <sched_exit_all_ready_envs+0x154>
		{
			ptr_env=NULL;
f010538b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105392:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105395:	c1 e0 04             	shl    $0x4,%eax
f0105398:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f010539d:	8b 00                	mov    (%eax),%eax
f010539f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01053a2:	e9 ca 00 00 00       	jmp    f0105471 <sched_exit_all_ready_envs+0x114>
			{
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01053a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01053ab:	75 17                	jne    f01053c4 <sched_exit_all_ready_envs+0x67>
f01053ad:	83 ec 04             	sub    $0x4,%esp
f01053b0:	68 a4 4a 13 f0       	push   $0xf0134aa4
f01053b5:	68 0c 02 00 00       	push   $0x20c
f01053ba:	68 93 4a 13 f0       	push   $0xf0134a93
f01053bf:	e8 e2 ad ff ff       	call   f01001a6 <_panic>
f01053c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053c7:	8b 40 44             	mov    0x44(%eax),%eax
f01053ca:	85 c0                	test   %eax,%eax
f01053cc:	74 11                	je     f01053df <sched_exit_all_ready_envs+0x82>
f01053ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053d1:	8b 40 44             	mov    0x44(%eax),%eax
f01053d4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01053d7:	8b 52 48             	mov    0x48(%edx),%edx
f01053da:	89 50 48             	mov    %edx,0x48(%eax)
f01053dd:	eb 14                	jmp    f01053f3 <sched_exit_all_ready_envs+0x96>
f01053df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053e2:	8b 40 48             	mov    0x48(%eax),%eax
f01053e5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01053e8:	c1 e2 04             	shl    $0x4,%edx
f01053eb:	81 c2 10 01 68 f0    	add    $0xf0680110,%edx
f01053f1:	89 02                	mov    %eax,(%edx)
f01053f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01053f6:	8b 40 48             	mov    0x48(%eax),%eax
f01053f9:	85 c0                	test   %eax,%eax
f01053fb:	74 11                	je     f010540e <sched_exit_all_ready_envs+0xb1>
f01053fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105400:	8b 40 48             	mov    0x48(%eax),%eax
f0105403:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105406:	8b 52 44             	mov    0x44(%edx),%edx
f0105409:	89 50 44             	mov    %edx,0x44(%eax)
f010540c:	eb 14                	jmp    f0105422 <sched_exit_all_ready_envs+0xc5>
f010540e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105411:	8b 40 44             	mov    0x44(%eax),%eax
f0105414:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105417:	c1 e2 04             	shl    $0x4,%edx
f010541a:	81 c2 0c 01 68 f0    	add    $0xf068010c,%edx
f0105420:	89 02                	mov    %eax,(%edx)
f0105422:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105425:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010542c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010542f:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f0105436:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105439:	c1 e0 04             	shl    $0x4,%eax
f010543c:	05 18 01 68 f0       	add    $0xf0680118,%eax
f0105441:	8b 00                	mov    (%eax),%eax
f0105443:	8d 50 ff             	lea    -0x1(%eax),%edx
f0105446:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105449:	c1 e0 04             	shl    $0x4,%eax
f010544c:	05 18 01 68 f0       	add    $0xf0680118,%eax
f0105451:	89 10                	mov    %edx,(%eax)
				sched_insert_exit(ptr_env);
f0105453:	83 ec 0c             	sub    $0xc,%esp
f0105456:	ff 75 f4             	pushl  -0xc(%ebp)
f0105459:	e8 6f f5 ff ff       	call   f01049cd <sched_insert_exit>
f010545e:	83 c4 10             	add    $0x10,%esp
	for (int i = 0 ; i < num_of_ready_queues ; i++)
	{
		if (!LIST_EMPTY(&(env_ready_queues[i])))
		{
			ptr_env=NULL;
			LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f0105461:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105464:	c1 e0 04             	shl    $0x4,%eax
f0105467:	05 14 01 68 f0       	add    $0xf0680114,%eax
f010546c:	8b 00                	mov    (%eax),%eax
f010546e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105471:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105475:	74 08                	je     f010547f <sched_exit_all_ready_envs+0x122>
f0105477:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010547a:	8b 40 44             	mov    0x44(%eax),%eax
f010547d:	eb 05                	jmp    f0105484 <sched_exit_all_ready_envs+0x127>
f010547f:	b8 00 00 00 00       	mov    $0x0,%eax
f0105484:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105487:	c1 e2 04             	shl    $0x4,%edx
f010548a:	81 c2 14 01 68 f0    	add    $0xf0680114,%edx
f0105490:	89 02                	mov    %eax,(%edx)
f0105492:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105495:	c1 e0 04             	shl    $0x4,%eax
f0105498:	05 14 01 68 f0       	add    $0xf0680114,%eax
f010549d:	8b 00                	mov    (%eax),%eax
f010549f:	85 c0                	test   %eax,%eax
f01054a1:	0f 85 00 ff ff ff    	jne    f01053a7 <sched_exit_all_ready_envs+0x4a>
f01054a7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01054ab:	0f 85 f6 fe ff ff    	jne    f01053a7 <sched_exit_all_ready_envs+0x4a>

/*2018*/
void sched_exit_all_ready_envs()
{
	struct Env* ptr_env=NULL;
	for (int i = 0 ; i < num_of_ready_queues ; i++)
f01054b1:	ff 45 f0             	incl   -0x10(%ebp)
f01054b4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01054b9:	0f b6 c0             	movzbl %al,%eax
f01054bc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01054bf:	0f 8f b1 fe ff ff    	jg     f0105376 <sched_exit_all_ready_envs+0x19>
				LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
				sched_insert_exit(ptr_env);
			}
		}
	}
}
f01054c5:	90                   	nop
f01054c6:	c9                   	leave  
f01054c7:	c3                   	ret    

f01054c8 <sched_kill_env>:

/*2015*/
void sched_kill_env(uint32 envId)
{
f01054c8:	55                   	push   %ebp
f01054c9:	89 e5                	mov    %esp,%ebp
f01054cb:	83 ec 18             	sub    $0x18,%esp
	struct Env* ptr_env=NULL;
f01054ce:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int found = 0;
f01054d5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	if (!found)
f01054dc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01054e0:	0f 85 a0 00 00 00    	jne    f0105586 <sched_kill_env+0xbe>
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f01054e6:	a1 98 84 6e f0       	mov    0xf06e8498,%eax
f01054eb:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01054ee:	eb 67                	jmp    f0105557 <sched_kill_env+0x8f>
					{
			if(ptr_env->env_id == envId)
f01054f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054f3:	8b 40 4c             	mov    0x4c(%eax),%eax
f01054f6:	3b 45 08             	cmp    0x8(%ebp),%eax
f01054f9:	75 54                	jne    f010554f <sched_kill_env+0x87>
			{
				cprintf("killing[%d] %s from the NEW queue...", ptr_env->env_id, ptr_env->prog_name);
f01054fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01054fe:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f0105504:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105507:	8b 40 4c             	mov    0x4c(%eax),%eax
f010550a:	83 ec 04             	sub    $0x4,%esp
f010550d:	52                   	push   %edx
f010550e:	50                   	push   %eax
f010550f:	68 ec 4c 13 f0       	push   $0xf0134cec
f0105514:	e8 14 b7 ff ff       	call   f0100c2d <cprintf>
f0105519:	83 c4 10             	add    $0x10,%esp
				sched_remove_new(ptr_env);
f010551c:	83 ec 0c             	sub    $0xc,%esp
f010551f:	ff 75 f4             	pushl  -0xc(%ebp)
f0105522:	e8 01 f4 ff ff       	call   f0104928 <sched_remove_new>
f0105527:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f010552a:	83 ec 0c             	sub    $0xc,%esp
f010552d:	ff 75 f4             	pushl  -0xc(%ebp)
f0105530:	e8 6e 3b 00 00       	call   f01090a3 <env_free>
f0105535:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f0105538:	83 ec 0c             	sub    $0xc,%esp
f010553b:	68 6b 4c 13 f0       	push   $0xf0134c6b
f0105540:	e8 e8 b6 ff ff       	call   f0100c2d <cprintf>
f0105545:	83 c4 10             	add    $0x10,%esp
				found = 1;
f0105548:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
{
	struct Env* ptr_env=NULL;
	int found = 0;
	if (!found)
	{
		LIST_FOREACH(ptr_env, &env_new_queue)
f010554f:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0105554:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105557:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010555b:	74 08                	je     f0105565 <sched_kill_env+0x9d>
f010555d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105560:	8b 40 44             	mov    0x44(%eax),%eax
f0105563:	eb 05                	jmp    f010556a <sched_kill_env+0xa2>
f0105565:	b8 00 00 00 00       	mov    $0x0,%eax
f010556a:	a3 a0 84 6e f0       	mov    %eax,0xf06e84a0
f010556f:	a1 a0 84 6e f0       	mov    0xf06e84a0,%eax
f0105574:	85 c0                	test   %eax,%eax
f0105576:	0f 85 74 ff ff ff    	jne    f01054f0 <sched_kill_env+0x28>
f010557c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105580:	0f 85 6a ff ff ff    	jne    f01054f0 <sched_kill_env+0x28>
				found = 1;
				//			return;
			}
					}
	}
	if (!found)
f0105586:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f010558a:	0f 85 ad 01 00 00    	jne    f010573d <sched_kill_env+0x275>
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105590:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0105597:	e9 8d 01 00 00       	jmp    f0105729 <sched_kill_env+0x261>
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
f010559c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010559f:	c1 e0 04             	shl    $0x4,%eax
f01055a2:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f01055a7:	8b 00                	mov    (%eax),%eax
f01055a9:	85 c0                	test   %eax,%eax
f01055ab:	0f 84 6f 01 00 00    	je     f0105720 <sched_kill_env+0x258>
			{
				ptr_env=NULL;
f01055b1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01055b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01055bb:	c1 e0 04             	shl    $0x4,%eax
f01055be:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f01055c3:	8b 00                	mov    (%eax),%eax
f01055c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01055c8:	e9 13 01 00 00       	jmp    f01056e0 <sched_kill_env+0x218>
				{
					if(ptr_env->env_id == envId)
f01055cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055d0:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055d3:	3b 45 08             	cmp    0x8(%ebp),%eax
f01055d6:	0f 85 f4 00 00 00    	jne    f01056d0 <sched_kill_env+0x208>
					{
						cprintf("killing[%d] %s from the READY queue #%d...", ptr_env->env_id, ptr_env->prog_name, i);
f01055dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055df:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f01055e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01055e8:	8b 40 4c             	mov    0x4c(%eax),%eax
f01055eb:	ff 75 ec             	pushl  -0x14(%ebp)
f01055ee:	52                   	push   %edx
f01055ef:	50                   	push   %eax
f01055f0:	68 14 4d 13 f0       	push   $0xf0134d14
f01055f5:	e8 33 b6 ff ff       	call   f0100c2d <cprintf>
f01055fa:	83 c4 10             	add    $0x10,%esp
						LIST_REMOVE(&(env_ready_queues[i]), ptr_env);
f01055fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105601:	75 17                	jne    f010561a <sched_kill_env+0x152>
f0105603:	83 ec 04             	sub    $0x4,%esp
f0105606:	68 a4 4a 13 f0       	push   $0xf0134aa4
f010560b:	68 33 02 00 00       	push   $0x233
f0105610:	68 93 4a 13 f0       	push   $0xf0134a93
f0105615:	e8 8c ab ff ff       	call   f01001a6 <_panic>
f010561a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010561d:	8b 40 44             	mov    0x44(%eax),%eax
f0105620:	85 c0                	test   %eax,%eax
f0105622:	74 11                	je     f0105635 <sched_kill_env+0x16d>
f0105624:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105627:	8b 40 44             	mov    0x44(%eax),%eax
f010562a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010562d:	8b 52 48             	mov    0x48(%edx),%edx
f0105630:	89 50 48             	mov    %edx,0x48(%eax)
f0105633:	eb 14                	jmp    f0105649 <sched_kill_env+0x181>
f0105635:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105638:	8b 40 48             	mov    0x48(%eax),%eax
f010563b:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010563e:	c1 e2 04             	shl    $0x4,%edx
f0105641:	81 c2 10 01 68 f0    	add    $0xf0680110,%edx
f0105647:	89 02                	mov    %eax,(%edx)
f0105649:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010564c:	8b 40 48             	mov    0x48(%eax),%eax
f010564f:	85 c0                	test   %eax,%eax
f0105651:	74 11                	je     f0105664 <sched_kill_env+0x19c>
f0105653:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105656:	8b 40 48             	mov    0x48(%eax),%eax
f0105659:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010565c:	8b 52 44             	mov    0x44(%edx),%edx
f010565f:	89 50 44             	mov    %edx,0x44(%eax)
f0105662:	eb 14                	jmp    f0105678 <sched_kill_env+0x1b0>
f0105664:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105667:	8b 40 44             	mov    0x44(%eax),%eax
f010566a:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010566d:	c1 e2 04             	shl    $0x4,%edx
f0105670:	81 c2 0c 01 68 f0    	add    $0xf068010c,%edx
f0105676:	89 02                	mov    %eax,(%edx)
f0105678:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010567b:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f0105682:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105685:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010568c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010568f:	c1 e0 04             	shl    $0x4,%eax
f0105692:	05 18 01 68 f0       	add    $0xf0680118,%eax
f0105697:	8b 00                	mov    (%eax),%eax
f0105699:	8d 50 ff             	lea    -0x1(%eax),%edx
f010569c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010569f:	c1 e0 04             	shl    $0x4,%eax
f01056a2:	05 18 01 68 f0       	add    $0xf0680118,%eax
f01056a7:	89 10                	mov    %edx,(%eax)
						env_free(ptr_env);
f01056a9:	83 ec 0c             	sub    $0xc,%esp
f01056ac:	ff 75 f4             	pushl  -0xc(%ebp)
f01056af:	e8 ef 39 00 00       	call   f01090a3 <env_free>
f01056b4:	83 c4 10             	add    $0x10,%esp
						cprintf("DONE\n");
f01056b7:	83 ec 0c             	sub    $0xc,%esp
f01056ba:	68 6b 4c 13 f0       	push   $0xf0134c6b
f01056bf:	e8 69 b5 ff ff       	call   f0100c2d <cprintf>
f01056c4:	83 c4 10             	add    $0x10,%esp
						found = 1;
f01056c7:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
						break;
f01056ce:	eb 50                	jmp    f0105720 <sched_kill_env+0x258>
		for (int i = 0 ; i < num_of_ready_queues ; i++)
		{
			if (!LIST_EMPTY(&(env_ready_queues[i])))
			{
				ptr_env=NULL;
				LIST_FOREACH(ptr_env, &(env_ready_queues[i]))
f01056d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01056d3:	c1 e0 04             	shl    $0x4,%eax
f01056d6:	05 14 01 68 f0       	add    $0xf0680114,%eax
f01056db:	8b 00                	mov    (%eax),%eax
f01056dd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01056e0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01056e4:	74 08                	je     f01056ee <sched_kill_env+0x226>
f01056e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01056e9:	8b 40 44             	mov    0x44(%eax),%eax
f01056ec:	eb 05                	jmp    f01056f3 <sched_kill_env+0x22b>
f01056ee:	b8 00 00 00 00       	mov    $0x0,%eax
f01056f3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01056f6:	c1 e2 04             	shl    $0x4,%edx
f01056f9:	81 c2 14 01 68 f0    	add    $0xf0680114,%edx
f01056ff:	89 02                	mov    %eax,(%edx)
f0105701:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105704:	c1 e0 04             	shl    $0x4,%eax
f0105707:	05 14 01 68 f0       	add    $0xf0680114,%eax
f010570c:	8b 00                	mov    (%eax),%eax
f010570e:	85 c0                	test   %eax,%eax
f0105710:	0f 85 b7 fe ff ff    	jne    f01055cd <sched_kill_env+0x105>
f0105716:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010571a:	0f 85 ad fe ff ff    	jne    f01055cd <sched_kill_env+0x105>
						break;
						//return;
					}
				}
			}
			if (found)
f0105720:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105724:	75 16                	jne    f010573c <sched_kill_env+0x274>
			}
					}
	}
	if (!found)
	{
		for (int i = 0 ; i < num_of_ready_queues ; i++)
f0105726:	ff 45 ec             	incl   -0x14(%ebp)
f0105729:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f010572e:	0f b6 c0             	movzbl %al,%eax
f0105731:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0105734:	0f 8f 62 fe ff ff    	jg     f010559c <sched_kill_env+0xd4>
f010573a:	eb 01                	jmp    f010573d <sched_kill_env+0x275>
						//return;
					}
				}
			}
			if (found)
				break;
f010573c:	90                   	nop
		}
	}
	if (!found)
f010573d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0105741:	0f 85 a7 00 00 00    	jne    f01057ee <sched_kill_env+0x326>
	{
		ptr_env=NULL;
f0105747:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f010574e:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f0105753:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0105756:	eb 67                	jmp    f01057bf <sched_kill_env+0x2f7>
		{
			if(ptr_env->env_id == envId)
f0105758:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010575b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010575e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105761:	75 54                	jne    f01057b7 <sched_kill_env+0x2ef>
			{
				cprintf("killing[%d] %s from the EXIT queue...", ptr_env->env_id, ptr_env->prog_name);
f0105763:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105766:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f010576c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010576f:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105772:	83 ec 04             	sub    $0x4,%esp
f0105775:	52                   	push   %edx
f0105776:	50                   	push   %eax
f0105777:	68 40 4d 13 f0       	push   $0xf0134d40
f010577c:	e8 ac b4 ff ff       	call   f0100c2d <cprintf>
f0105781:	83 c4 10             	add    $0x10,%esp
				sched_remove_exit(ptr_env);
f0105784:	83 ec 0c             	sub    $0xc,%esp
f0105787:	ff 75 f4             	pushl  -0xc(%ebp)
f010578a:	e8 81 f2 ff ff       	call   f0104a10 <sched_remove_exit>
f010578f:	83 c4 10             	add    $0x10,%esp
				env_free(ptr_env);
f0105792:	83 ec 0c             	sub    $0xc,%esp
f0105795:	ff 75 f4             	pushl  -0xc(%ebp)
f0105798:	e8 06 39 00 00       	call   f01090a3 <env_free>
f010579d:	83 c4 10             	add    $0x10,%esp
				cprintf("DONE\n");
f01057a0:	83 ec 0c             	sub    $0xc,%esp
f01057a3:	68 6b 4c 13 f0       	push   $0xf0134c6b
f01057a8:	e8 80 b4 ff ff       	call   f0100c2d <cprintf>
f01057ad:	83 c4 10             	add    $0x10,%esp
				found = 1;
f01057b0:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
		}
	}
	if (!found)
	{
		ptr_env=NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01057b7:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f01057bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01057bf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057c3:	74 08                	je     f01057cd <sched_kill_env+0x305>
f01057c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01057c8:	8b 40 44             	mov    0x44(%eax),%eax
f01057cb:	eb 05                	jmp    f01057d2 <sched_kill_env+0x30a>
f01057cd:	b8 00 00 00 00       	mov    $0x0,%eax
f01057d2:	a3 6c 60 6e f0       	mov    %eax,0xf06e606c
f01057d7:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f01057dc:	85 c0                	test   %eax,%eax
f01057de:	0f 85 74 ff ff ff    	jne    f0105758 <sched_kill_env+0x290>
f01057e4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01057e8:	0f 85 6a ff ff ff    	jne    f0105758 <sched_kill_env+0x290>
				//return;
			}
		}
	}

	if (!found)
f01057ee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01057f2:	0f 85 a0 00 00 00    	jne    f0105898 <sched_kill_env+0x3d0>
	{
		if (curenv->env_id == envId)
f01057f8:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01057fd:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105800:	3b 45 08             	cmp    0x8(%ebp),%eax
f0105803:	0f 85 8f 00 00 00    	jne    f0105898 <sched_kill_env+0x3d0>
		{
			ptr_env = curenv;
f0105809:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010580e:	89 45 f4             	mov    %eax,-0xc(%ebp)
			assert(ptr_env->env_id == ENV_RUNNABLE);
f0105811:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105814:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105817:	83 f8 02             	cmp    $0x2,%eax
f010581a:	74 19                	je     f0105835 <sched_kill_env+0x36d>
f010581c:	68 68 4d 13 f0       	push   $0xf0134d68
f0105821:	68 88 4d 13 f0       	push   $0xf0134d88
f0105826:	68 56 02 00 00       	push   $0x256
f010582b:	68 93 4a 13 f0       	push   $0xf0134a93
f0105830:	e8 71 a9 ff ff       	call   f01001a6 <_panic>
			cprintf("killing a RUNNABLE environment [%d] %s...", ptr_env->env_id, ptr_env->prog_name);
f0105835:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105838:	8d 90 18 da 01 00    	lea    0x1da18(%eax),%edx
f010583e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105841:	8b 40 4c             	mov    0x4c(%eax),%eax
f0105844:	83 ec 04             	sub    $0x4,%esp
f0105847:	52                   	push   %edx
f0105848:	50                   	push   %eax
f0105849:	68 a0 4d 13 f0       	push   $0xf0134da0
f010584e:	e8 da b3 ff ff       	call   f0100c2d <cprintf>
f0105853:	83 c4 10             	add    $0x10,%esp
			env_free(ptr_env);
f0105856:	83 ec 0c             	sub    $0xc,%esp
f0105859:	ff 75 f4             	pushl  -0xc(%ebp)
f010585c:	e8 42 38 00 00       	call   f01090a3 <env_free>
f0105861:	83 c4 10             	add    $0x10,%esp
			cprintf("DONE\n");
f0105864:	83 ec 0c             	sub    $0xc,%esp
f0105867:	68 6b 4c 13 f0       	push   $0xf0134c6b
f010586c:	e8 bc b3 ff ff       	call   f0100c2d <cprintf>
f0105871:	83 c4 10             	add    $0x10,%esp
			found = 1;
f0105874:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
			//If it's the curenv, then reset it and reinvoke the scheduler
			//as there's no meaning to return back to a killed env
			//lcr3(K_PHYSICAL_ADDRESS(ptr_page_directory));
			lcr3(phys_page_directory);
f010587b:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f0105880:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105883:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105886:	0f 22 d8             	mov    %eax,%cr3
			curenv = NULL;
f0105889:	c7 05 34 87 65 f0 00 	movl   $0x0,0xf0658734
f0105890:	00 00 00 
			fos_scheduler();
f0105893:	e8 5b ed ff ff       	call   f01045f3 <fos_scheduler>
		}
	}
}
f0105898:	90                   	nop
f0105899:	c9                   	leave  
f010589a:	c3                   	ret    

f010589b <clock_interrupt_handler>:


void clock_interrupt_handler()
{
f010589b:	55                   	push   %ebp
f010589c:	89 e5                	mov    %esp,%ebp
f010589e:	83 ec 08             	sub    $0x8,%esp
	//cputchar('i');

	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f01058a1:	83 ec 0c             	sub    $0xc,%esp
f01058a4:	6a 01                	push   $0x1
f01058a6:	e8 d4 79 00 00       	call   f010d27f <isPageReplacmentAlgorithmLRU>
f01058ab:	83 c4 10             	add    $0x10,%esp
f01058ae:	85 c0                	test   %eax,%eax
f01058b0:	74 05                	je     f01058b7 <clock_interrupt_handler+0x1c>
	{
		update_WS_time_stamps();
f01058b2:	e8 05 00 00 00       	call   f01058bc <update_WS_time_stamps>
	}
	//cprintf("Clock Handler\n") ;
	fos_scheduler();
f01058b7:	e8 37 ed ff ff       	call   f01045f3 <fos_scheduler>

f01058bc <update_WS_time_stamps>:
}

void update_WS_time_stamps()
{
f01058bc:	55                   	push   %ebp
f01058bd:	89 e5                	mov    %esp,%ebp
f01058bf:	53                   	push   %ebx
f01058c0:	83 ec 24             	sub    $0x24,%esp
	struct Env *curr_env_ptr = curenv;
f01058c3:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01058c8:	89 45 ec             	mov    %eax,-0x14(%ebp)

	if(curr_env_ptr != NULL)
f01058cb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f01058cf:	0f 84 cf 01 00 00    	je     f0105aa4 <update_WS_time_stamps+0x1e8>
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01058d5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01058dc:	e9 ce 00 00 00       	jmp    f01059af <update_WS_time_stamps+0xf3>
			{
				if( curr_env_ptr->ptr_pageWorkingSet[i].empty != 1)
f01058e1:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01058e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01058e7:	89 d0                	mov    %edx,%eax
f01058e9:	01 c0                	add    %eax,%eax
f01058eb:	01 d0                	add    %edx,%eax
f01058ed:	c1 e0 03             	shl    $0x3,%eax
f01058f0:	01 c8                	add    %ecx,%eax
f01058f2:	83 c0 7c             	add    $0x7c,%eax
f01058f5:	8a 00                	mov    (%eax),%al
f01058f7:	3c 01                	cmp    $0x1,%al
f01058f9:	0f 84 ad 00 00 00    	je     f01059ac <update_WS_time_stamps+0xf0>
				{
					//update the time if the page was referenced
					uint32 page_va = curr_env_ptr->ptr_pageWorkingSet[i].virtual_address ;
f01058ff:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105902:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105905:	89 d0                	mov    %edx,%eax
f0105907:	01 c0                	add    %eax,%eax
f0105909:	01 d0                	add    %edx,%eax
f010590b:	c1 e0 03             	shl    $0x3,%eax
f010590e:	01 c8                	add    %ecx,%eax
f0105910:	83 c0 78             	add    $0x78,%eax
f0105913:	8b 00                	mov    (%eax),%eax
f0105915:	89 45 e8             	mov    %eax,-0x18(%ebp)
					uint32 perm = pt_get_page_permissions(curr_env_ptr->env_page_directory, page_va) ;
f0105918:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010591b:	8b 40 5c             	mov    0x5c(%eax),%eax
f010591e:	83 ec 08             	sub    $0x8,%esp
f0105921:	ff 75 e8             	pushl  -0x18(%ebp)
f0105924:	50                   	push   %eax
f0105925:	e8 3f 1c 00 00       	call   f0107569 <pt_get_page_permissions>
f010592a:	83 c4 10             	add    $0x10,%esp
f010592d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->ptr_pageWorkingSet[i].time_stamp;
f0105930:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105933:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105936:	89 d0                	mov    %edx,%eax
f0105938:	01 c0                	add    %eax,%eax
f010593a:	01 d0                	add    %edx,%eax
f010593c:	c1 e0 03             	shl    $0x3,%eax
f010593f:	01 c8                	add    %ecx,%eax
f0105941:	83 e8 80             	sub    $0xffffff80,%eax
f0105944:	8b 00                	mov    (%eax),%eax
f0105946:	89 45 e0             	mov    %eax,-0x20(%ebp)

					if (perm & PERM_USED)
f0105949:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010594c:	83 e0 20             	and    $0x20,%eax
f010594f:	85 c0                	test   %eax,%eax
f0105951:	74 3b                	je     f010598e <update_WS_time_stamps+0xd2>
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105953:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0105956:	c1 e8 02             	shr    $0x2,%eax
f0105959:	0d 00 00 00 80       	or     $0x80000000,%eax
f010595e:	89 c1                	mov    %eax,%ecx
f0105960:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105963:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105966:	89 d0                	mov    %edx,%eax
f0105968:	01 c0                	add    %eax,%eax
f010596a:	01 d0                	add    %edx,%eax
f010596c:	c1 e0 03             	shl    $0x3,%eax
f010596f:	01 d8                	add    %ebx,%eax
f0105971:	83 e8 80             	sub    $0xffffff80,%eax
f0105974:	89 08                	mov    %ecx,(%eax)
						pt_set_page_permissions(curr_env_ptr->env_page_directory, page_va, 0 , PERM_USED) ;
f0105976:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105979:	8b 40 5c             	mov    0x5c(%eax),%eax
f010597c:	6a 20                	push   $0x20
f010597e:	6a 00                	push   $0x0
f0105980:	ff 75 e8             	pushl  -0x18(%ebp)
f0105983:	50                   	push   %eax
f0105984:	e8 2b 1b 00 00       	call   f01074b4 <pt_set_page_permissions>
f0105989:	83 c4 10             	add    $0x10,%esp
f010598c:	eb 1e                	jmp    f01059ac <update_WS_time_stamps+0xf0>
					}
					else
					{
						curr_env_ptr->ptr_pageWorkingSet[i].time_stamp = (oldTimeStamp>>2);
f010598e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0105991:	c1 e8 02             	shr    $0x2,%eax
f0105994:	89 c1                	mov    %eax,%ecx
f0105996:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105999:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010599c:	89 d0                	mov    %edx,%eax
f010599e:	01 c0                	add    %eax,%eax
f01059a0:	01 d0                	add    %edx,%eax
f01059a2:	c1 e0 03             	shl    $0x3,%eax
f01059a5:	01 d8                	add    %ebx,%eax
f01059a7:	83 e8 80             	sub    $0xffffff80,%eax
f01059aa:	89 08                	mov    %ecx,(%eax)

	if(curr_env_ptr != NULL)
	{
		{
			int i ;
			for (i = 0 ; i < (curr_env_ptr->page_WS_max_size); i++)
f01059ac:	ff 45 f4             	incl   -0xc(%ebp)
f01059af:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01059b2:	8b 50 74             	mov    0x74(%eax),%edx
f01059b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01059b8:	39 c2                	cmp    %eax,%edx
f01059ba:	0f 87 21 ff ff ff    	ja     f01058e1 <update_WS_time_stamps+0x25>
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f01059c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f01059c7:	e9 ce 00 00 00       	jmp    f0105a9a <update_WS_time_stamps+0x1de>
			{
				if( curr_env_ptr->__ptr_tws[t].empty != 1)
f01059cc:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01059cf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01059d2:	89 d0                	mov    %edx,%eax
f01059d4:	01 c0                	add    %eax,%eax
f01059d6:	01 d0                	add    %edx,%eax
f01059d8:	c1 e0 03             	shl    $0x3,%eax
f01059db:	01 c8                	add    %ecx,%eax
f01059dd:	05 3c d5 01 00       	add    $0x1d53c,%eax
f01059e2:	8a 00                	mov    (%eax),%al
f01059e4:	3c 01                	cmp    $0x1,%al
f01059e6:	0f 84 ab 00 00 00    	je     f0105a97 <update_WS_time_stamps+0x1db>
				{
					//update the time if the page was referenced
					uint32 table_va = curr_env_ptr->__ptr_tws[t].virtual_address;
f01059ec:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01059ef:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01059f2:	89 d0                	mov    %edx,%eax
f01059f4:	01 c0                	add    %eax,%eax
f01059f6:	01 d0                	add    %edx,%eax
f01059f8:	c1 e0 03             	shl    $0x3,%eax
f01059fb:	01 c8                	add    %ecx,%eax
f01059fd:	05 38 d5 01 00       	add    $0x1d538,%eax
f0105a02:	8b 00                	mov    (%eax),%eax
f0105a04:	89 45 dc             	mov    %eax,-0x24(%ebp)
					uint32 oldTimeStamp = curr_env_ptr->__ptr_tws[t].time_stamp;
f0105a07:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f0105a0a:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a0d:	89 d0                	mov    %edx,%eax
f0105a0f:	01 c0                	add    %eax,%eax
f0105a11:	01 d0                	add    %edx,%eax
f0105a13:	c1 e0 03             	shl    $0x3,%eax
f0105a16:	01 c8                	add    %ecx,%eax
f0105a18:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a1d:	8b 00                	mov    (%eax),%eax
f0105a1f:	89 45 d8             	mov    %eax,-0x28(%ebp)

					if (pd_is_table_used(curr_env_ptr->env_page_directory, table_va))
f0105a22:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a25:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a28:	83 ec 08             	sub    $0x8,%esp
f0105a2b:	ff 75 dc             	pushl  -0x24(%ebp)
f0105a2e:	50                   	push   %eax
f0105a2f:	e8 5a 1c 00 00       	call   f010768e <pd_is_table_used>
f0105a34:	83 c4 10             	add    $0x10,%esp
f0105a37:	85 c0                	test   %eax,%eax
f0105a39:	74 3c                	je     f0105a77 <update_WS_time_stamps+0x1bb>
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2) | 0x80000000;
f0105a3b:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105a3e:	c1 e8 02             	shr    $0x2,%eax
f0105a41:	0d 00 00 00 80       	or     $0x80000000,%eax
f0105a46:	89 c1                	mov    %eax,%ecx
f0105a48:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105a4b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a4e:	89 d0                	mov    %edx,%eax
f0105a50:	01 c0                	add    %eax,%eax
f0105a52:	01 d0                	add    %edx,%eax
f0105a54:	c1 e0 03             	shl    $0x3,%eax
f0105a57:	01 d8                	add    %ebx,%eax
f0105a59:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a5e:	89 08                	mov    %ecx,(%eax)
						pd_set_table_unused(curr_env_ptr->env_page_directory, table_va);
f0105a60:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105a63:	8b 40 5c             	mov    0x5c(%eax),%eax
f0105a66:	83 ec 08             	sub    $0x8,%esp
f0105a69:	ff 75 dc             	pushl  -0x24(%ebp)
f0105a6c:	50                   	push   %eax
f0105a6d:	e8 40 1c 00 00       	call   f01076b2 <pd_set_table_unused>
f0105a72:	83 c4 10             	add    $0x10,%esp
f0105a75:	eb 20                	jmp    f0105a97 <update_WS_time_stamps+0x1db>
					}
					else
					{
						curr_env_ptr->__ptr_tws[t].time_stamp = (oldTimeStamp>>2);
f0105a77:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105a7a:	c1 e8 02             	shr    $0x2,%eax
f0105a7d:	89 c1                	mov    %eax,%ecx
f0105a7f:	8b 5d ec             	mov    -0x14(%ebp),%ebx
f0105a82:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105a85:	89 d0                	mov    %edx,%eax
f0105a87:	01 c0                	add    %eax,%eax
f0105a89:	01 d0                	add    %edx,%eax
f0105a8b:	c1 e0 03             	shl    $0x3,%eax
f0105a8e:	01 d8                	add    %ebx,%eax
f0105a90:	05 40 d5 01 00       	add    $0x1d540,%eax
f0105a95:	89 08                	mov    %ecx,(%eax)
			}
		}

		{
			int t ;
			for (t = 0 ; t < __TWS_MAX_SIZE; t++)
f0105a97:	ff 45 f0             	incl   -0x10(%ebp)
f0105a9a:	83 7d f0 31          	cmpl   $0x31,-0x10(%ebp)
f0105a9e:	0f 8e 28 ff ff ff    	jle    f01059cc <update_WS_time_stamps+0x110>
					}
				}
			}
		}
	}
}
f0105aa4:	90                   	nop
f0105aa5:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0105aa8:	c9                   	leave  
f0105aa9:	c3                   	ret    

f0105aaa <pic_init>:
static bool didinit;

/* Initialize the 8259A interrupt controllers. */
void
pic_init(void)
{
f0105aaa:	55                   	push   %ebp
f0105aab:	89 e5                	mov    %esp,%ebp
f0105aad:	83 ec 58             	sub    $0x58,%esp
	didinit = 1;
f0105ab0:	c7 05 2c 87 65 f0 01 	movl   $0x1,0xf065872c
f0105ab7:	00 00 00 
f0105aba:	c7 45 f4 21 00 00 00 	movl   $0x21,-0xc(%ebp)
f0105ac1:	c6 45 b2 ff          	movb   $0xff,-0x4e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0105ac5:	8a 45 b2             	mov    -0x4e(%ebp),%al
f0105ac8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0105acb:	ee                   	out    %al,(%dx)
f0105acc:	c7 45 f0 a1 00 00 00 	movl   $0xa1,-0x10(%ebp)
f0105ad3:	c6 45 b3 ff          	movb   $0xff,-0x4d(%ebp)
f0105ad7:	8a 45 b3             	mov    -0x4d(%ebp),%al
f0105ada:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105add:	ee                   	out    %al,(%dx)
f0105ade:	c7 45 ec 20 00 00 00 	movl   $0x20,-0x14(%ebp)
f0105ae5:	c6 45 b4 11          	movb   $0x11,-0x4c(%ebp)
f0105ae9:	8a 45 b4             	mov    -0x4c(%ebp),%al
f0105aec:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0105aef:	ee                   	out    %al,(%dx)
f0105af0:	c7 45 e8 21 00 00 00 	movl   $0x21,-0x18(%ebp)
f0105af7:	c6 45 b5 20          	movb   $0x20,-0x4b(%ebp)
f0105afb:	8a 45 b5             	mov    -0x4b(%ebp),%al
f0105afe:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0105b01:	ee                   	out    %al,(%dx)
f0105b02:	c7 45 e4 21 00 00 00 	movl   $0x21,-0x1c(%ebp)
f0105b09:	c6 45 b6 04          	movb   $0x4,-0x4a(%ebp)
f0105b0d:	8a 45 b6             	mov    -0x4a(%ebp),%al
f0105b10:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0105b13:	ee                   	out    %al,(%dx)
f0105b14:	c7 45 e0 21 00 00 00 	movl   $0x21,-0x20(%ebp)
f0105b1b:	c6 45 b7 03          	movb   $0x3,-0x49(%ebp)
f0105b1f:	8a 45 b7             	mov    -0x49(%ebp),%al
f0105b22:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0105b25:	ee                   	out    %al,(%dx)
f0105b26:	c7 45 dc a0 00 00 00 	movl   $0xa0,-0x24(%ebp)
f0105b2d:	c6 45 b8 11          	movb   $0x11,-0x48(%ebp)
f0105b31:	8a 45 b8             	mov    -0x48(%ebp),%al
f0105b34:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0105b37:	ee                   	out    %al,(%dx)
f0105b38:	c7 45 d8 a1 00 00 00 	movl   $0xa1,-0x28(%ebp)
f0105b3f:	c6 45 b9 28          	movb   $0x28,-0x47(%ebp)
f0105b43:	8a 45 b9             	mov    -0x47(%ebp),%al
f0105b46:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105b49:	ee                   	out    %al,(%dx)
f0105b4a:	c7 45 d4 a1 00 00 00 	movl   $0xa1,-0x2c(%ebp)
f0105b51:	c6 45 ba 02          	movb   $0x2,-0x46(%ebp)
f0105b55:	8a 45 ba             	mov    -0x46(%ebp),%al
f0105b58:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0105b5b:	ee                   	out    %al,(%dx)
f0105b5c:	c7 45 d0 a1 00 00 00 	movl   $0xa1,-0x30(%ebp)
f0105b63:	c6 45 bb 01          	movb   $0x1,-0x45(%ebp)
f0105b67:	8a 45 bb             	mov    -0x45(%ebp),%al
f0105b6a:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0105b6d:	ee                   	out    %al,(%dx)
f0105b6e:	c7 45 cc 20 00 00 00 	movl   $0x20,-0x34(%ebp)
f0105b75:	c6 45 bc 68          	movb   $0x68,-0x44(%ebp)
f0105b79:	8a 45 bc             	mov    -0x44(%ebp),%al
f0105b7c:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0105b7f:	ee                   	out    %al,(%dx)
f0105b80:	c7 45 c8 20 00 00 00 	movl   $0x20,-0x38(%ebp)
f0105b87:	c6 45 bd 0a          	movb   $0xa,-0x43(%ebp)
f0105b8b:	8a 45 bd             	mov    -0x43(%ebp),%al
f0105b8e:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0105b91:	ee                   	out    %al,(%dx)
f0105b92:	c7 45 c4 a0 00 00 00 	movl   $0xa0,-0x3c(%ebp)
f0105b99:	c6 45 be 68          	movb   $0x68,-0x42(%ebp)
f0105b9d:	8a 45 be             	mov    -0x42(%ebp),%al
f0105ba0:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0105ba3:	ee                   	out    %al,(%dx)
f0105ba4:	c7 45 c0 a0 00 00 00 	movl   $0xa0,-0x40(%ebp)
f0105bab:	c6 45 bf 0a          	movb   $0xa,-0x41(%ebp)
f0105baf:	8a 45 bf             	mov    -0x41(%ebp),%al
f0105bb2:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0105bb5:	ee                   	out    %al,(%dx)
	outb(IO_PIC1, 0x0a);             /* read IRR by default */

	outb(IO_PIC2, 0x68);               /* OCW3 */
	outb(IO_PIC2, 0x0a);               /* OCW3 */

	if (irq_mask_8259A != 0xFFFF)
f0105bb6:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f0105bbc:	66 83 f8 ff          	cmp    $0xffff,%ax
f0105bc0:	74 15                	je     f0105bd7 <pic_init+0x12d>
		irq_setmask_8259A(irq_mask_8259A);
f0105bc2:	66 a1 b0 08 19 f0    	mov    0xf01908b0,%ax
f0105bc8:	0f b7 c0             	movzwl %ax,%eax
f0105bcb:	83 ec 0c             	sub    $0xc,%esp
f0105bce:	50                   	push   %eax
f0105bcf:	e8 06 00 00 00       	call   f0105bda <irq_setmask_8259A>
f0105bd4:	83 c4 10             	add    $0x10,%esp
}
f0105bd7:	90                   	nop
f0105bd8:	c9                   	leave  
f0105bd9:	c3                   	ret    

f0105bda <irq_setmask_8259A>:

void
irq_setmask_8259A(uint16 mask)
{
f0105bda:	55                   	push   %ebp
f0105bdb:	89 e5                	mov    %esp,%ebp
f0105bdd:	83 ec 14             	sub    $0x14,%esp
f0105be0:	8b 45 08             	mov    0x8(%ebp),%eax
f0105be3:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	int i;
	irq_mask_8259A = mask;
f0105be7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bea:	66 a3 b0 08 19 f0    	mov    %ax,0xf01908b0
	if (!didinit)
f0105bf0:	a1 2c 87 65 f0       	mov    0xf065872c,%eax
f0105bf5:	85 c0                	test   %eax,%eax
f0105bf7:	74 34                	je     f0105c2d <irq_setmask_8259A+0x53>
		return;
	outb(IO_PIC1+1, (char)mask);
f0105bf9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105bfc:	0f b6 c0             	movzbl %al,%eax
f0105bff:	c7 45 fc 21 00 00 00 	movl   $0x21,-0x4(%ebp)
f0105c06:	88 45 f6             	mov    %al,-0xa(%ebp)
f0105c09:	8a 45 f6             	mov    -0xa(%ebp),%al
f0105c0c:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0105c0f:	ee                   	out    %al,(%dx)
	outb(IO_PIC2+1, (char)(mask >> 8));
f0105c10:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105c13:	66 c1 e8 08          	shr    $0x8,%ax
f0105c17:	0f b6 c0             	movzbl %al,%eax
f0105c1a:	c7 45 f8 a1 00 00 00 	movl   $0xa1,-0x8(%ebp)
f0105c21:	88 45 f7             	mov    %al,-0x9(%ebp)
f0105c24:	8a 45 f7             	mov    -0x9(%ebp),%al
f0105c27:	8b 55 f8             	mov    -0x8(%ebp),%edx
f0105c2a:	ee                   	out    %al,(%dx)
f0105c2b:	eb 01                	jmp    f0105c2e <irq_setmask_8259A+0x54>
irq_setmask_8259A(uint16 mask)
{
	int i;
	irq_mask_8259A = mask;
	if (!didinit)
		return;
f0105c2d:	90                   	nop
	//cprintf("enabled interrupts:");
	//for (i = 0; i < 16; i++)
		//if (~mask & (1<<i))
			//cprintf(" %d", i);
	//cprintf("\n");
}
f0105c2e:	c9                   	leave  
f0105c2f:	c3                   	ret    

f0105c30 <initialize_kernel_VM>:
//
// From USER_TOP to USER_LIMIT, the user is allowed to read but not write.
// Above USER_LIMIT the user cannot read (or write).

void initialize_kernel_VM()
{
f0105c30:	55                   	push   %ebp
f0105c31:	89 e5                	mov    %esp,%ebp
f0105c33:	83 ec 38             	sub    $0x38,%esp
	//panic("initialize_kernel_VM: This function is not finished\n");

	//////////////////////////////////////////////////////////////////////
	// create initial page directory.

	ptr_page_directory = boot_allocate_space(PAGE_SIZE, PAGE_SIZE);
f0105c36:	83 ec 08             	sub    $0x8,%esp
f0105c39:	68 00 10 00 00       	push   $0x1000
f0105c3e:	68 00 10 00 00       	push   $0x1000
f0105c43:	e8 5d 02 00 00       	call   f0105ea5 <boot_allocate_space>
f0105c48:	83 c4 10             	add    $0x10,%esp
f0105c4b:	a3 d8 84 6e f0       	mov    %eax,0xf06e84d8
	memset(ptr_page_directory, 0, PAGE_SIZE);
f0105c50:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0105c55:	83 ec 04             	sub    $0x4,%esp
f0105c58:	68 00 10 00 00       	push   $0x1000
f0105c5d:	6a 00                	push   $0x0
f0105c5f:	50                   	push   %eax
f0105c60:	e8 c6 a9 02 00       	call   f013062b <memset>
f0105c65:	83 c4 10             	add    $0x10,%esp
	phys_page_directory = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f0105c68:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0105c6d:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105c70:	81 7d e8 ff ff ff ef 	cmpl   $0xefffffff,-0x18(%ebp)
f0105c77:	77 14                	ja     f0105c8d <initialize_kernel_VM+0x5d>
f0105c79:	ff 75 e8             	pushl  -0x18(%ebp)
f0105c7c:	68 cc 4d 13 f0       	push   $0xf0134dcc
f0105c81:	6a 45                	push   $0x45
f0105c83:	68 00 4e 13 f0       	push   $0xf0134e00
f0105c88:	e8 19 a5 ff ff       	call   f01001a6 <_panic>
f0105c8d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105c90:	05 00 00 00 10       	add    $0x10000000,%eax
f0105c95:	a3 08 85 6e f0       	mov    %eax,0xf06e8508
	// Map the kernel stack with VA range :
	//  [KERNEL_STACK_TOP-KERNEL_STACK_SIZE, KERNEL_STACK_TOP),
	// to physical address : "phys_stack_bottom".
	//     Permissions: kernel RW, user NONE
	// Your code goes here:
	boot_map_range(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE, KERNEL_STACK_SIZE, STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom), PERM_WRITEABLE) ;
f0105c9a:	c7 45 e4 00 80 18 f0 	movl   $0xf0188000,-0x1c(%ebp)
f0105ca1:	81 7d e4 ff ff ff ef 	cmpl   $0xefffffff,-0x1c(%ebp)
f0105ca8:	77 14                	ja     f0105cbe <initialize_kernel_VM+0x8e>
f0105caa:	ff 75 e4             	pushl  -0x1c(%ebp)
f0105cad:	68 cc 4d 13 f0       	push   $0xf0134dcc
f0105cb2:	6a 4d                	push   $0x4d
f0105cb4:	68 00 4e 13 f0       	push   $0xf0134e00
f0105cb9:	e8 e8 a4 ff ff       	call   f01001a6 <_panic>
f0105cbe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0105cc1:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0105cc7:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0105ccc:	83 ec 0c             	sub    $0xc,%esp
f0105ccf:	6a 02                	push   $0x2
f0105cd1:	52                   	push   %edx
f0105cd2:	68 00 80 00 00       	push   $0x8000
f0105cd7:	68 00 80 bf ef       	push   $0xefbf8000
f0105cdc:	50                   	push   %eax
f0105cdd:	e8 24 02 00 00       	call   f0105f06 <boot_map_range>
f0105ce2:	83 c4 20             	add    $0x20,%esp
	// Permissions: kernel RW, user NONE
	// Your code goes here:

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
f0105ce5:	c7 45 f0 00 00 00 f0 	movl   $0xf0000000,-0x10(%ebp)
f0105cec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	unsigned int nTables=0;
f0105cf3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105cfa:	eb 25                	jmp    f0105d21 <initialize_kernel_VM+0xf1>
	{
		++nTables;
f0105cfc:	ff 45 ec             	incl   -0x14(%ebp)
		boot_get_page_table(ptr_page_directory, (uint32)sva, 1);
f0105cff:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0105d02:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0105d07:	83 ec 04             	sub    $0x4,%esp
f0105d0a:	6a 01                	push   $0x1
f0105d0c:	52                   	push   %edx
f0105d0d:	50                   	push   %eax
f0105d0e:	e8 67 02 00 00       	call   f0105f7a <boot_get_page_table>
f0105d13:	83 c4 10             	add    $0x10,%esp

	//2016:
	//boot tables
	unsigned long long sva = KERNEL_BASE;
	unsigned int nTables=0;
	for (;sva < 0xFFFFFFFF;  sva += PTSIZE)
f0105d16:	81 45 f0 00 00 40 00 	addl   $0x400000,-0x10(%ebp)
f0105d1d:	83 55 f4 00          	adcl   $0x0,-0xc(%ebp)
f0105d21:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d25:	72 d5                	jb     f0105cfc <initialize_kernel_VM+0xcc>
f0105d27:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0105d2b:	77 06                	ja     f0105d33 <initialize_kernel_VM+0x103>
f0105d2d:	83 7d f0 fe          	cmpl   $0xfffffffe,-0x10(%ebp)
f0105d31:	76 c9                	jbe    f0105cfc <initialize_kernel_VM+0xcc>
	//    - frames_info -- kernel RW, user NONE
	//    - the image mapped at READ_ONLY_FRAMES_INFO  -- kernel R, user R
	// Your code goes here:
	//cprintf("size of WorkingSetPage = %d\n",sizeof(struct WorkingSetPage));
	uint32 array_size;
	array_size = number_of_frames * sizeof(struct FrameInfo) ;
f0105d33:	8b 15 70 84 6e f0    	mov    0xf06e8470,%edx
f0105d39:	89 d0                	mov    %edx,%eax
f0105d3b:	01 c0                	add    %eax,%eax
f0105d3d:	01 d0                	add    %edx,%eax
f0105d3f:	c1 e0 03             	shl    $0x3,%eax
f0105d42:	89 45 e0             	mov    %eax,-0x20(%ebp)
	frames_info = boot_allocate_space(array_size, PAGE_SIZE);
f0105d45:	83 ec 08             	sub    $0x8,%esp
f0105d48:	68 00 10 00 00       	push   $0x1000
f0105d4d:	ff 75 e0             	pushl  -0x20(%ebp)
f0105d50:	e8 50 01 00 00       	call   f0105ea5 <boot_allocate_space>
f0105d55:	83 c4 10             	add    $0x10,%esp
f0105d58:	a3 b0 84 6e f0       	mov    %eax,0xf06e84b0
	memset(frames_info, 0, array_size);
f0105d5d:	a1 b0 84 6e f0       	mov    0xf06e84b0,%eax
f0105d62:	83 ec 04             	sub    $0x4,%esp
f0105d65:	ff 75 e0             	pushl  -0x20(%ebp)
f0105d68:	6a 00                	push   $0x0
f0105d6a:	50                   	push   %eax
f0105d6b:	e8 bb a8 02 00       	call   f013062b <memset>
f0105d70:	83 c4 10             	add    $0x10,%esp
	//2016: Not valid any more since the RAM size exceed the 64 MB limit. This lead to the
	// 		size of "frames_info" can exceed the 4 MB space for "READ_ONLY_FRAMES_INFO"
	//boot_map_range(ptr_page_directory, READ_ONLY_FRAMES_INFO, array_size, STATIC_KERNEL_PHYSICAL_ADDRESS(frames_info),PERM_USER) ;


	uint32 disk_array_size = PAGES_PER_FILE * sizeof(struct FrameInfo);
f0105d73:	c7 45 dc 00 c0 30 00 	movl   $0x30c000,-0x24(%ebp)
	disk_frames_info = boot_allocate_space(disk_array_size , PAGE_SIZE);
f0105d7a:	83 ec 08             	sub    $0x8,%esp
f0105d7d:	68 00 10 00 00       	push   $0x1000
f0105d82:	ff 75 dc             	pushl  -0x24(%ebp)
f0105d85:	e8 1b 01 00 00       	call   f0105ea5 <boot_allocate_space>
f0105d8a:	83 c4 10             	add    $0x10,%esp
f0105d8d:	a3 00 01 68 f0       	mov    %eax,0xf0680100
	memset(disk_frames_info , 0, disk_array_size);
f0105d92:	a1 00 01 68 f0       	mov    0xf0680100,%eax
f0105d97:	83 ec 04             	sub    $0x4,%esp
f0105d9a:	ff 75 dc             	pushl  -0x24(%ebp)
f0105d9d:	6a 00                	push   $0x0
f0105d9f:	50                   	push   %eax
f0105da0:	e8 86 a8 02 00       	call   f013062b <memset>
f0105da5:	83 c4 10             	add    $0x10,%esp

	// This allows the kernel & user to access any page table entry using a
	// specified VA for each: VPT for kernel and UVPT for User.
	setup_listing_to_all_page_tables_entries();
f0105da8:	e8 02 05 00 00       	call   f01062af <setup_listing_to_all_page_tables_entries>
	// Permissions:
	//    - envs itself -- kernel RW, user NONE
	//    - the image of envs mapped at UENVS  -- kernel R, user R

	// LAB 3: Your code here.
	cprintf("Max Envs = %d, Nearest Pow of 2 = %d\n",NENV, NEARPOW2NENV);
f0105dad:	83 ec 0c             	sub    $0xc,%esp
f0105db0:	6a 08                	push   $0x8
f0105db2:	e8 11 94 02 00       	call   f012f1c8 <nearest_pow2_ceil>
f0105db7:	83 c4 10             	add    $0x10,%esp
f0105dba:	83 ec 04             	sub    $0x4,%esp
f0105dbd:	50                   	push   %eax
f0105dbe:	6a 08                	push   $0x8
f0105dc0:	68 20 4e 13 f0       	push   $0xf0134e20
f0105dc5:	e8 63 ae ff ff       	call   f0100c2d <cprintf>
f0105dca:	83 c4 10             	add    $0x10,%esp
	int envs_size = NENV * sizeof(struct Env) ;
f0105dcd:	c7 45 d8 40 55 0f 00 	movl   $0xf5540,-0x28(%ebp)

	//allocate space for "envs" array aligned on 4KB boundary
	envs = boot_allocate_space(envs_size, PAGE_SIZE);
f0105dd4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0105dd7:	83 ec 08             	sub    $0x8,%esp
f0105dda:	68 00 10 00 00       	push   $0x1000
f0105ddf:	50                   	push   %eax
f0105de0:	e8 c0 00 00 00       	call   f0105ea5 <boot_allocate_space>
f0105de5:	83 c4 10             	add    $0x10,%esp
f0105de8:	a3 30 87 65 f0       	mov    %eax,0xf0658730
	memset(envs , 0, envs_size);
f0105ded:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105df0:	a1 30 87 65 f0       	mov    0xf0658730,%eax
f0105df5:	83 ec 04             	sub    $0x4,%esp
f0105df8:	52                   	push   %edx
f0105df9:	6a 00                	push   $0x0
f0105dfb:	50                   	push   %eax
f0105dfc:	e8 2a a8 02 00       	call   f013062b <memset>
f0105e01:	83 c4 10             	add    $0x10,%esp

	//make the user to access this array by mapping it to UPAGES linear address (UPAGES is in User/Kernel space)
	boot_map_range(ptr_page_directory, UENVS, envs_size, STATIC_KERNEL_PHYSICAL_ADDRESS(envs), PERM_USER) ;
f0105e04:	a1 30 87 65 f0       	mov    0xf0658730,%eax
f0105e09:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0105e0c:	81 7d d4 ff ff ff ef 	cmpl   $0xefffffff,-0x2c(%ebp)
f0105e13:	77 17                	ja     f0105e2c <initialize_kernel_VM+0x1fc>
f0105e15:	ff 75 d4             	pushl  -0x2c(%ebp)
f0105e18:	68 cc 4d 13 f0       	push   $0xf0134dcc
f0105e1d:	68 96 00 00 00       	push   $0x96
f0105e22:	68 00 4e 13 f0       	push   $0xf0134e00
f0105e27:	e8 7a a3 ff ff       	call   f01001a6 <_panic>
f0105e2c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0105e2f:	8d 88 00 00 00 10    	lea    0x10000000(%eax),%ecx
f0105e35:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0105e38:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0105e3d:	83 ec 0c             	sub    $0xc,%esp
f0105e40:	6a 04                	push   $0x4
f0105e42:	51                   	push   %ecx
f0105e43:	52                   	push   %edx
f0105e44:	68 00 00 c0 ee       	push   $0xeec00000
f0105e49:	50                   	push   %eax
f0105e4a:	e8 b7 00 00 00       	call   f0105f06 <boot_map_range>
f0105e4f:	83 c4 20             	add    $0x20,%esp

	//update permissions of the corresponding entry in page directory to make it USER with PERMISSION read only
	ptr_page_directory[PDX(UENVS)] = ptr_page_directory[PDX(UENVS)]|(PERM_USER|(PERM_PRESENT & (~PERM_WRITEABLE)));
f0105e52:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0105e57:	05 ec 0e 00 00       	add    $0xeec,%eax
f0105e5c:	8b 15 d8 84 6e f0    	mov    0xf06e84d8,%edx
f0105e62:	81 c2 ec 0e 00 00    	add    $0xeec,%edx
f0105e68:	8b 12                	mov    (%edx),%edx
f0105e6a:	83 ca 05             	or     $0x5,%edx
f0105e6d:	89 10                	mov    %edx,(%eax)
		// map all used pages so far for the kernel
		boot_map_range(ptr_page_directory, KERNEL_BASE, (uint32)ptr_free_mem - KERNEL_BASE, 0, PERM_WRITEABLE) ;
	}
#else
	{
		boot_map_range(ptr_page_directory, KERNEL_BASE, 0xFFFFFFFF - KERNEL_BASE, 0, PERM_WRITEABLE) ;
f0105e6f:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0105e74:	83 ec 0c             	sub    $0xc,%esp
f0105e77:	6a 02                	push   $0x2
f0105e79:	6a 00                	push   $0x0
f0105e7b:	68 ff ff ff 0f       	push   $0xfffffff
f0105e80:	68 00 00 00 f0       	push   $0xf0000000
f0105e85:	50                   	push   %eax
f0105e86:	e8 7b 00 00 00       	call   f0105f06 <boot_map_range>
f0105e8b:	83 c4 20             	add    $0x20,%esp
	}
#endif
	// Check that the initial page directory has been set up correctly.
	check_boot_pgdir();
f0105e8e:	e8 0c 9b 02 00       	call   f012f99f <check_boot_pgdir>

	memory_scarce_threshold_percentage = DEFAULT_MEM_SCARCE_PERCENTAGE;	// Memory remains plentiful till % of free frames gets below 25% of the memory space
f0105e93:	c7 05 60 60 6e f0 19 	movl   $0x19,0xf06e6060
f0105e9a:	00 00 00 

	/*
	NOW: Turn off the segmentation by setting the segments' base to 0, and
	turn on the paging by setting the corresponding flags in control register 0 (cr0)
	 */
	turn_on_paging() ;
f0105e9d:	e8 0d 03 00 00       	call   f01061af <turn_on_paging>
}
f0105ea2:	90                   	nop
f0105ea3:	c9                   	leave  
f0105ea4:	c3                   	ret    

f0105ea5 <boot_allocate_space>:
// It's too early to run out of memory.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void* boot_allocate_space(uint32 size, uint32 align)
{
f0105ea5:	55                   	push   %ebp
f0105ea6:	89 e5                	mov    %esp,%ebp
f0105ea8:	83 ec 10             	sub    $0x10,%esp
	// Initialize ptr_free_mem if this is the first time.
	// 'end_of_kernel' is a symbol automatically generated by the linker,
	// which points to the end of the kernel-
	// i.e., the first virtual address that the linker
	// did not assign to any kernel code or global variables.
	if (ptr_free_mem == 0)
f0105eab:	a1 d4 84 6e f0       	mov    0xf06e84d4,%eax
f0105eb0:	85 c0                	test   %eax,%eax
f0105eb2:	75 0a                	jne    f0105ebe <boot_allocate_space+0x19>
		ptr_free_mem = end_of_kernel;
f0105eb4:	c7 05 d4 84 6e f0 1c 	movl   $0xf06e861c,0xf06e84d4
f0105ebb:	86 6e f0 

	// Your code here:
	//	Step 1: round ptr_free_mem up to be aligned properly
	ptr_free_mem = ROUNDUP(ptr_free_mem, align) ;
f0105ebe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105ec1:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0105ec4:	a1 d4 84 6e f0       	mov    0xf06e84d4,%eax
f0105ec9:	89 c2                	mov    %eax,%edx
f0105ecb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0105ece:	01 d0                	add    %edx,%eax
f0105ed0:	48                   	dec    %eax
f0105ed1:	89 45 f8             	mov    %eax,-0x8(%ebp)
f0105ed4:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105ed7:	ba 00 00 00 00       	mov    $0x0,%edx
f0105edc:	f7 75 fc             	divl   -0x4(%ebp)
f0105edf:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0105ee2:	29 d0                	sub    %edx,%eax
f0105ee4:	a3 d4 84 6e f0       	mov    %eax,0xf06e84d4

	//	Step 2: save current value of ptr_free_mem as allocated space
	void *ptr_allocated_mem;
	ptr_allocated_mem = ptr_free_mem ;
f0105ee9:	a1 d4 84 6e f0       	mov    0xf06e84d4,%eax
f0105eee:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//	Step 3: increase ptr_free_mem to record allocation
	ptr_free_mem += size ;
f0105ef1:	8b 15 d4 84 6e f0    	mov    0xf06e84d4,%edx
f0105ef7:	8b 45 08             	mov    0x8(%ebp),%eax
f0105efa:	01 d0                	add    %edx,%eax
f0105efc:	a3 d4 84 6e f0       	mov    %eax,0xf06e84d4

	//// 2016: Step 3.5: initialize allocated space by ZEROOOOOOOOOOOOOO
	//memset(ptr_allocated_mem, 0, size);

	//	Step 4: return allocated space
	return ptr_allocated_mem ;
f0105f01:	8b 45 f4             	mov    -0xc(%ebp),%eax

}
f0105f04:	c9                   	leave  
f0105f05:	c3                   	ret    

f0105f06 <boot_map_range>:
//
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
void boot_map_range(uint32 *ptr_page_directory, uint32 virtual_address, uint32 size, uint32 physical_address, int perm)
{
f0105f06:	55                   	push   %ebp
f0105f07:	89 e5                	mov    %esp,%ebp
f0105f09:	83 ec 18             	sub    $0x18,%esp
	int i = 0 ;
f0105f0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105f13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0105f1a:	eb 53                	jmp    f0105f6f <boot_map_range+0x69>
	{
		uint32 *ptr_page_table = boot_get_page_table(ptr_page_directory, virtual_address, 1) ;
f0105f1c:	83 ec 04             	sub    $0x4,%esp
f0105f1f:	6a 01                	push   $0x1
f0105f21:	ff 75 0c             	pushl  0xc(%ebp)
f0105f24:	ff 75 08             	pushl  0x8(%ebp)
f0105f27:	e8 4e 00 00 00       	call   f0105f7a <boot_get_page_table>
f0105f2c:	83 c4 10             	add    $0x10,%esp
f0105f2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		uint32 index_page_table = PTX(virtual_address);
f0105f32:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f35:	c1 e8 0c             	shr    $0xc,%eax
f0105f38:	25 ff 03 00 00       	and    $0x3ff,%eax
f0105f3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//LOG_VARS("\nCONSTRUCT_ENTRY = %x",physical_address);
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;
f0105f40:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105f43:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105f4a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105f4d:	01 c2                	add    %eax,%edx
f0105f4f:	8b 45 18             	mov    0x18(%ebp),%eax
f0105f52:	0b 45 14             	or     0x14(%ebp),%eax
f0105f55:	83 c8 01             	or     $0x1,%eax
f0105f58:	89 02                	mov    %eax,(%edx)

		physical_address += PAGE_SIZE ;
f0105f5a:	81 45 14 00 10 00 00 	addl   $0x1000,0x14(%ebp)
		virtual_address += PAGE_SIZE ;
f0105f61:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
{
	int i = 0 ;
	//physical_address = ROUNDUP(physical_address, PAGE_SIZE) ;
	///we assume here that all addresses are given divisible by 4 KB, look at boot_allocate_space ...

	for (i = 0 ; i < size ; i += PAGE_SIZE)
f0105f68:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0105f6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f72:	3b 45 10             	cmp    0x10(%ebp),%eax
f0105f75:	72 a5                	jb     f0105f1c <boot_map_range+0x16>
		ptr_page_table[index_page_table] = CONSTRUCT_ENTRY(physical_address, perm | PERM_PRESENT) ;

		physical_address += PAGE_SIZE ;
		virtual_address += PAGE_SIZE ;
	}
}
f0105f77:	90                   	nop
f0105f78:	c9                   	leave  
f0105f79:	c3                   	ret    

f0105f7a <boot_get_page_table>:
// boot_get_page_table cannot fail.  It's too early to fail.
// This function may ONLY be used during boot time,
// before the free_frame_list has been set up.
//
uint32* boot_get_page_table(uint32 *ptr_page_directory, uint32 virtual_address, int create)
{
f0105f7a:	55                   	push   %ebp
f0105f7b:	89 e5                	mov    %esp,%ebp
f0105f7d:	83 ec 28             	sub    $0x28,%esp
	uint32 index_page_directory = PDX(virtual_address);
f0105f80:	8b 45 0c             	mov    0xc(%ebp),%eax
f0105f83:	c1 e8 16             	shr    $0x16,%eax
f0105f86:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 page_directory_entry = ptr_page_directory[index_page_directory];
f0105f89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0105f8c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0105f93:	8b 45 08             	mov    0x8(%ebp),%eax
f0105f96:	01 d0                	add    %edx,%eax
f0105f98:	8b 00                	mov    (%eax),%eax
f0105f9a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	//cprintf("boot d ind = %d, entry = %x\n",index_page_directory, page_directory_entry);
	uint32 phys_page_table = EXTRACT_ADDRESS(page_directory_entry);
f0105f9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0105fa0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0105fa5:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 *ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table);
f0105fa8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0105fab:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0105fae:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105fb1:	c1 e8 0c             	shr    $0xc,%eax
f0105fb4:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0105fb7:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0105fbc:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0105fbf:	72 17                	jb     f0105fd8 <boot_get_page_table+0x5e>
f0105fc1:	ff 75 e8             	pushl  -0x18(%ebp)
f0105fc4:	68 48 4e 13 f0       	push   $0xf0134e48
f0105fc9:	68 15 01 00 00       	push   $0x115
f0105fce:	68 00 4e 13 f0       	push   $0xf0134e00
f0105fd3:	e8 ce a1 ff ff       	call   f01001a6 <_panic>
f0105fd8:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0105fdb:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0105fe0:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (phys_page_table == 0)
f0105fe3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0105fe7:	75 72                	jne    f010605b <boot_get_page_table+0xe1>
	{
		if (create)
f0105fe9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0105fed:	74 65                	je     f0106054 <boot_get_page_table+0xda>
		{
			ptr_page_table = boot_allocate_space(PAGE_SIZE, PAGE_SIZE) ;
f0105fef:	83 ec 08             	sub    $0x8,%esp
f0105ff2:	68 00 10 00 00       	push   $0x1000
f0105ff7:	68 00 10 00 00       	push   $0x1000
f0105ffc:	e8 a4 fe ff ff       	call   f0105ea5 <boot_allocate_space>
f0106001:	83 c4 10             	add    $0x10,%esp
f0106004:	89 45 e0             	mov    %eax,-0x20(%ebp)
			phys_page_table = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_table);
f0106007:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010600a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010600d:	81 7d dc ff ff ff ef 	cmpl   $0xefffffff,-0x24(%ebp)
f0106014:	77 17                	ja     f010602d <boot_get_page_table+0xb3>
f0106016:	ff 75 dc             	pushl  -0x24(%ebp)
f0106019:	68 cc 4d 13 f0       	push   $0xf0134dcc
f010601e:	68 1b 01 00 00       	push   $0x11b
f0106023:	68 00 4e 13 f0       	push   $0xf0134e00
f0106028:	e8 79 a1 ff ff       	call   f01001a6 <_panic>
f010602d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106030:	05 00 00 00 10       	add    $0x10000000,%eax
f0106035:	89 45 ec             	mov    %eax,-0x14(%ebp)
			ptr_page_directory[index_page_directory] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_WRITEABLE);
f0106038:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010603b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106042:	8b 45 08             	mov    0x8(%ebp),%eax
f0106045:	01 d0                	add    %edx,%eax
f0106047:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010604a:	83 ca 03             	or     $0x3,%edx
f010604d:	89 10                	mov    %edx,(%eax)
			return ptr_page_table ;
f010604f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106052:	eb 0a                	jmp    f010605e <boot_get_page_table+0xe4>
		}
		else
			return 0 ;
f0106054:	b8 00 00 00 00       	mov    $0x0,%eax
f0106059:	eb 03                	jmp    f010605e <boot_get_page_table+0xe4>
	}
	return ptr_page_table ;
f010605b:	8b 45 e0             	mov    -0x20(%ebp),%eax
}
f010605e:	c9                   	leave  
f010605f:	c3                   	ret    

f0106060 <nvram_read>:


int nvram_read(int r)
{
f0106060:	55                   	push   %ebp
f0106061:	89 e5                	mov    %esp,%ebp
f0106063:	53                   	push   %ebx
f0106064:	83 ec 04             	sub    $0x4,%esp
	return mc146818_read(r) | (mc146818_read(r + 1) << 8);
f0106067:	8b 45 08             	mov    0x8(%ebp),%eax
f010606a:	83 ec 0c             	sub    $0xc,%esp
f010606d:	50                   	push   %eax
f010606e:	e8 37 df ff ff       	call   f0103faa <mc146818_read>
f0106073:	83 c4 10             	add    $0x10,%esp
f0106076:	89 c3                	mov    %eax,%ebx
f0106078:	8b 45 08             	mov    0x8(%ebp),%eax
f010607b:	40                   	inc    %eax
f010607c:	83 ec 0c             	sub    $0xc,%esp
f010607f:	50                   	push   %eax
f0106080:	e8 25 df ff ff       	call   f0103faa <mc146818_read>
f0106085:	83 c4 10             	add    $0x10,%esp
f0106088:	c1 e0 08             	shl    $0x8,%eax
f010608b:	09 d8                	or     %ebx,%eax
}
f010608d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106090:	c9                   	leave  
f0106091:	c3                   	ret    

f0106092 <detect_memory>:

void detect_memory()
{
f0106092:	55                   	push   %ebp
f0106093:	89 e5                	mov    %esp,%ebp
f0106095:	83 ec 28             	sub    $0x28,%esp
	uint32 maxpa;	// Maximum physical address
	uint32 size_of_base_mem;		// Amount of base memory (in bytes)
	uint32 size_of_extended_mem;		// Amount of extended memory (in bytes)

	// CMOS tells us how many kilobytes there are
	size_of_base_mem = ROUNDDOWN(nvram_read(NVRAM_BASELO)*1024, PAGE_SIZE);
f0106098:	83 ec 0c             	sub    $0xc,%esp
f010609b:	6a 15                	push   $0x15
f010609d:	e8 be ff ff ff       	call   f0106060 <nvram_read>
f01060a2:	83 c4 10             	add    $0x10,%esp
f01060a5:	c1 e0 0a             	shl    $0xa,%eax
f01060a8:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01060ab:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01060ae:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060b3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	size_of_extended_mem = ROUNDDOWN(nvram_read(NVRAM_EXTLO)*1024, PAGE_SIZE);
f01060b6:	83 ec 0c             	sub    $0xc,%esp
f01060b9:	6a 17                	push   $0x17
f01060bb:	e8 a0 ff ff ff       	call   f0106060 <nvram_read>
f01060c0:	83 c4 10             	add    $0x10,%esp
f01060c3:	c1 e0 0a             	shl    $0xa,%eax
f01060c6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01060c9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01060cc:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
	//2016
	//For physical memory larger than 16MB, we needed to read total memory size
	// from a different register of the MC chip, see here:
	// http://bochs.sourceforge.net/techspec/CMOS-reference.txt
	// "CMOS 34h - AMI -"
	uint32 size_of_other_mem = ROUNDDOWN(nvram_read(0x34)*1024*64, PAGE_SIZE);
f01060d4:	83 ec 0c             	sub    $0xc,%esp
f01060d7:	6a 34                	push   $0x34
f01060d9:	e8 82 ff ff ff       	call   f0106060 <nvram_read>
f01060de:	83 c4 10             	add    $0x10,%esp
f01060e1:	c1 e0 10             	shl    $0x10,%eax
f01060e4:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01060e7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01060ea:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01060ef:	89 45 dc             	mov    %eax,-0x24(%ebp)
	//cprintf("other mem = %dK\n", size_of_other_mem/1024);

	// Calculate the maximum physical address based on whether
	// or not there is any extended memory.  See comment in ../inc/mmu.h.
	//2016
	if(size_of_other_mem > 0)
f01060f2:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01060f6:	74 18                	je     f0106110 <detect_memory+0x7e>
	{
		maxpa = size_of_other_mem + 16*1024*1024;
f01060f8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01060fb:	05 00 00 00 01       	add    $0x1000000,%eax
f0106100:	89 45 f4             	mov    %eax,-0xc(%ebp)
		size_of_extended_mem = maxpa - PHYS_EXTENDED_MEM;
f0106103:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106106:	2d 00 00 10 00       	sub    $0x100000,%eax
f010610b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010610e:	eb 19                	jmp    f0106129 <detect_memory+0x97>
	}
	else
	{
		if (size_of_extended_mem)
f0106110:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106114:	74 0d                	je     f0106123 <detect_memory+0x91>
			maxpa = PHYS_EXTENDED_MEM + size_of_extended_mem;
f0106116:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106119:	05 00 00 10 00       	add    $0x100000,%eax
f010611e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0106121:	eb 06                	jmp    f0106129 <detect_memory+0x97>
		else
			maxpa = size_of_extended_mem;
f0106123:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106126:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	uint32 kernel_virtual_area = ((0xFFFFFFFF-KERNEL_BASE)+1);
f0106129:	c7 45 d8 00 00 00 10 	movl   $0x10000000,-0x28(%ebp)
	if(USE_KHEAP == 0 && maxpa > kernel_virtual_area)
f0106130:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106133:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0106136:	76 32                	jbe    f010616a <detect_memory+0xd8>
	{
		cprintf("Error!: Physical memory = %dK larger than kernel virtual area (%dK)\n", maxpa/1024, kernel_virtual_area/1024);
f0106138:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010613b:	c1 e8 0a             	shr    $0xa,%eax
f010613e:	89 c2                	mov    %eax,%edx
f0106140:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106143:	c1 e8 0a             	shr    $0xa,%eax
f0106146:	83 ec 04             	sub    $0x4,%esp
f0106149:	52                   	push   %edx
f010614a:	50                   	push   %eax
f010614b:	68 78 4e 13 f0       	push   $0xf0134e78
f0106150:	e8 d8 aa ff ff       	call   f0100c2d <cprintf>
f0106155:	83 c4 10             	add    $0x10,%esp
		cprintf("Cannot use physical memory larger than kernel virtual area\nTo enable physical memory larger than virtual kernel area, set USE_KHEAP = 1 in FOS code");
f0106158:	83 ec 0c             	sub    $0xc,%esp
f010615b:	68 c0 4e 13 f0       	push   $0xf0134ec0
f0106160:	e8 c8 aa ff ff       	call   f0100c2d <cprintf>
f0106165:	83 c4 10             	add    $0x10,%esp
		while(1);
f0106168:	eb fe                	jmp    f0106168 <detect_memory+0xd6>
	}
	number_of_frames = maxpa / PAGE_SIZE;
f010616a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010616d:	c1 e8 0c             	shr    $0xc,%eax
f0106170:	a3 70 84 6e f0       	mov    %eax,0xf06e8470

	cprintf("Physical memory: %dK available, ", (int)(maxpa/1024));
f0106175:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106178:	c1 e8 0a             	shr    $0xa,%eax
f010617b:	83 ec 08             	sub    $0x8,%esp
f010617e:	50                   	push   %eax
f010617f:	68 54 4f 13 f0       	push   $0xf0134f54
f0106184:	e8 a4 aa ff ff       	call   f0100c2d <cprintf>
f0106189:	83 c4 10             	add    $0x10,%esp
	cprintf("base = %dK, extended = %dK\n", (int)(size_of_base_mem/1024), (int)(size_of_extended_mem/1024));
f010618c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010618f:	c1 e8 0a             	shr    $0xa,%eax
f0106192:	89 c2                	mov    %eax,%edx
f0106194:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106197:	c1 e8 0a             	shr    $0xa,%eax
f010619a:	83 ec 04             	sub    $0x4,%esp
f010619d:	52                   	push   %edx
f010619e:	50                   	push   %eax
f010619f:	68 75 4f 13 f0       	push   $0xf0134f75
f01061a4:	e8 84 aa ff ff       	call   f0100c2d <cprintf>
f01061a9:	83 c4 10             	add    $0x10,%esp
}
f01061ac:	90                   	nop
f01061ad:	c9                   	leave  
f01061ae:	c3                   	ret    

f01061af <turn_on_paging>:
// --------------------------------------------------------------
// Set up initial memory mappings and turn on MMU.
// --------------------------------------------------------------

void turn_on_paging()
{
f01061af:	55                   	push   %ebp
f01061b0:	89 e5                	mov    %esp,%ebp
f01061b2:	83 ec 30             	sub    $0x30,%esp
	// (Limits our kernel to <4MB)

	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
f01061b5:	c7 45 fc c0 03 00 00 	movl   $0x3c0,-0x4(%ebp)
		int j = 0;
f01061bc:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01061c3:	eb 24                	jmp    f01061e9 <turn_on_paging+0x3a>
		{
			ptr_page_directory[j] = ptr_page_directory[i];
f01061c5:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01061ca:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01061cd:	c1 e2 02             	shl    $0x2,%edx
f01061d0:	01 c2                	add    %eax,%edx
f01061d2:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01061d7:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f01061da:	c1 e1 02             	shl    $0x2,%ecx
f01061dd:	01 c8                	add    %ecx,%eax
f01061df:	8b 00                	mov    (%eax),%eax
f01061e1:	89 02                	mov    %eax,(%edx)
	//2016
	//ptr_page_directory[0] = ptr_page_directory[PDX(KERNEL_BASE)];
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f01061e3:	ff 45 fc             	incl   -0x4(%ebp)
f01061e6:	ff 45 f8             	incl   -0x8(%ebp)
f01061e9:	a1 d4 84 6e f0       	mov    0xf06e84d4,%eax
f01061ee:	c1 e8 16             	shr    $0x16,%eax
f01061f1:	89 c2                	mov    %eax,%edx
f01061f3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01061f6:	39 c2                	cmp    %eax,%edx
f01061f8:	77 cb                	ja     f01061c5 <turn_on_paging+0x16>
			ptr_page_directory[j] = ptr_page_directory[i];
		}
	}

	// Install page table.
	lcr3(phys_page_directory);
f01061fa:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f01061ff:	89 45 e8             	mov    %eax,-0x18(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0106202:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106205:	0f 22 d8             	mov    %eax,%cr3

static __inline uint32
rcr0(void)
{
	uint32 val;
	__asm __volatile("movl %%cr0,%0" : "=r" (val));
f0106208:	0f 20 c0             	mov    %cr0,%eax
f010620b:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return val;
f010620e:	8b 45 e0             	mov    -0x20(%ebp),%eax

	// Turn on paging.
	uint32 cr0;
	cr0 = rcr0();
f0106211:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	cr0 |= CR0_PE|CR0_PG|CR0_AM|CR0_WP|CR0_NE|CR0_TS|CR0_EM|CR0_MP;
f0106214:	81 4d e4 2f 00 05 80 	orl    $0x8005002f,-0x1c(%ebp)
	cr0 &= ~(CR0_TS|CR0_EM);
f010621b:	83 65 e4 f3          	andl   $0xfffffff3,-0x1c(%ebp)
f010621f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106222:	89 45 dc             	mov    %eax,-0x24(%ebp)
}

static __inline void
lcr0(uint32 val)
{
	__asm __volatile("movl %0,%%cr0" : : "r" (val));
f0106225:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106228:	0f 22 c0             	mov    %eax,%cr0

	// Current mapping: KERNEL_BASE+x => x => x.
	// (x < 4MB so uses paging ptr_page_directory[0])

	// Reload all segment registers.
	asm volatile("lgdt gdt_pd");
f010622b:	0f 01 15 f0 08 19 f0 	lgdtl  0xf01908f0
	asm volatile("movw %%ax,%%gs" :: "a" (GD_UD|3));
f0106232:	b8 23 00 00 00       	mov    $0x23,%eax
f0106237:	8e e8                	mov    %eax,%gs
	asm volatile("movw %%ax,%%fs" :: "a" (GD_UD|3));
f0106239:	b8 23 00 00 00       	mov    $0x23,%eax
f010623e:	8e e0                	mov    %eax,%fs
	asm volatile("movw %%ax,%%es" :: "a" (GD_KD));
f0106240:	b8 10 00 00 00       	mov    $0x10,%eax
f0106245:	8e c0                	mov    %eax,%es
	asm volatile("movw %%ax,%%ds" :: "a" (GD_KD));
f0106247:	b8 10 00 00 00       	mov    $0x10,%eax
f010624c:	8e d8                	mov    %eax,%ds
	asm volatile("movw %%ax,%%ss" :: "a" (GD_KD));
f010624e:	b8 10 00 00 00       	mov    $0x10,%eax
f0106253:	8e d0                	mov    %eax,%ss
	asm volatile("ljmp %0,$1f\n 1:\n" :: "i" (GD_KT));  // reload cs
f0106255:	ea 5c 62 10 f0 08 00 	ljmp   $0x8,$0xf010625c
	asm volatile("lldt %%ax" :: "a" (0));
f010625c:	b8 00 00 00 00       	mov    $0x0,%eax
f0106261:	0f 00 d0             	lldt   %ax
	// This mapping was only used after paging was turned on but
	// before the segment registers were reloaded.
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
f0106264:	c7 45 f4 c0 03 00 00 	movl   $0x3c0,-0xc(%ebp)
		int j = 0;
f010626b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106272:	eb 19                	jmp    f010628d <turn_on_paging+0xde>
		{
			ptr_page_directory[j] = 0;
f0106274:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0106279:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010627c:	c1 e2 02             	shl    $0x2,%edx
f010627f:	01 d0                	add    %edx,%eax
f0106281:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	//2016
	//ptr_page_directory[0] = 0;
	{
		int i = PDX(KERNEL_BASE);
		int j = 0;
		for(; i< PDX((uint32)ptr_free_mem); ++i, ++j)
f0106287:	ff 45 f4             	incl   -0xc(%ebp)
f010628a:	ff 45 f0             	incl   -0x10(%ebp)
f010628d:	a1 d4 84 6e f0       	mov    0xf06e84d4,%eax
f0106292:	c1 e8 16             	shr    $0x16,%eax
f0106295:	89 c2                	mov    %eax,%edx
f0106297:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010629a:	39 c2                	cmp    %eax,%edx
f010629c:	77 d6                	ja     f0106274 <turn_on_paging+0xc5>
		{
			ptr_page_directory[j] = 0;
		}
	}
	// Flush the TLB for good measure, to kill the ptr_page_directory[0] mapping.
	lcr3(phys_page_directory);
f010629e:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f01062a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f01062a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01062a9:	0f 22 d8             	mov    %eax,%cr3
}
f01062ac:	90                   	nop
f01062ad:	c9                   	leave  
f01062ae:	c3                   	ret    

f01062af <setup_listing_to_all_page_tables_entries>:

void setup_listing_to_all_page_tables_entries()
{
f01062af:	55                   	push   %ebp
f01062b0:	89 e5                	mov    %esp,%ebp
f01062b2:	83 ec 18             	sub    $0x18,%esp
	//////////////////////////////////////////////////////////////////////
	// Recursively insert PD in itself as a page table, to form
	// a virtual page table at virtual address VPT.

	// Permissions: kernel RW, user NONE
	uint32 phys_frame_address = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory);
f01062b5:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01062ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01062bd:	81 7d f4 ff ff ff ef 	cmpl   $0xefffffff,-0xc(%ebp)
f01062c4:	77 17                	ja     f01062dd <setup_listing_to_all_page_tables_entries+0x2e>
f01062c6:	ff 75 f4             	pushl  -0xc(%ebp)
f01062c9:	68 cc 4d 13 f0       	push   $0xf0134dcc
f01062ce:	68 ab 01 00 00       	push   $0x1ab
f01062d3:	68 00 4e 13 f0       	push   $0xf0134e00
f01062d8:	e8 c9 9e ff ff       	call   f01001a6 <_panic>
f01062dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01062e0:	05 00 00 00 10       	add    $0x10000000,%eax
f01062e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	ptr_page_directory[PDX(VPT)] = CONSTRUCT_ENTRY(phys_frame_address , PERM_PRESENT | PERM_WRITEABLE);
f01062e8:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01062ed:	05 fc 0e 00 00       	add    $0xefc,%eax
f01062f2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01062f5:	83 ca 03             	or     $0x3,%edx
f01062f8:	89 10                	mov    %edx,(%eax)

	// same for UVPT
	//Permissions: kernel R, user R
	ptr_page_directory[PDX(UVPT)] = STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_page_directory)|PERM_USER|PERM_PRESENT;
f01062fa:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01062ff:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f0106305:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f010630a:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010630d:	81 7d ec ff ff ff ef 	cmpl   $0xefffffff,-0x14(%ebp)
f0106314:	77 17                	ja     f010632d <setup_listing_to_all_page_tables_entries+0x7e>
f0106316:	ff 75 ec             	pushl  -0x14(%ebp)
f0106319:	68 cc 4d 13 f0       	push   $0xf0134dcc
f010631e:	68 b0 01 00 00       	push   $0x1b0
f0106323:	68 00 4e 13 f0       	push   $0xf0134e00
f0106328:	e8 79 9e ff ff       	call   f01001a6 <_panic>
f010632d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106330:	05 00 00 00 10       	add    $0x10000000,%eax
f0106335:	83 c8 05             	or     $0x5,%eax
f0106338:	89 02                	mov    %eax,(%edx)

}
f010633a:	90                   	nop
f010633b:	c9                   	leave  
f010633c:	c3                   	ret    

f010633d <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010633d:	55                   	push   %ebp
f010633e:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106340:	8b 45 08             	mov    0x8(%ebp),%eax
f0106343:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0106349:	29 d0                	sub    %edx,%eax
f010634b:	c1 f8 03             	sar    $0x3,%eax
f010634e:	89 c2                	mov    %eax,%edx
f0106350:	89 d0                	mov    %edx,%eax
f0106352:	c1 e0 02             	shl    $0x2,%eax
f0106355:	01 d0                	add    %edx,%eax
f0106357:	c1 e0 02             	shl    $0x2,%eax
f010635a:	01 d0                	add    %edx,%eax
f010635c:	c1 e0 02             	shl    $0x2,%eax
f010635f:	01 d0                	add    %edx,%eax
f0106361:	89 c1                	mov    %eax,%ecx
f0106363:	c1 e1 08             	shl    $0x8,%ecx
f0106366:	01 c8                	add    %ecx,%eax
f0106368:	89 c1                	mov    %eax,%ecx
f010636a:	c1 e1 10             	shl    $0x10,%ecx
f010636d:	01 c8                	add    %ecx,%eax
f010636f:	01 c0                	add    %eax,%eax
f0106371:	01 d0                	add    %edx,%eax
}
f0106373:	5d                   	pop    %ebp
f0106374:	c3                   	ret    

f0106375 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106375:	55                   	push   %ebp
f0106376:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106378:	ff 75 08             	pushl  0x8(%ebp)
f010637b:	e8 bd ff ff ff       	call   f010633d <to_frame_number>
f0106380:	83 c4 04             	add    $0x4,%esp
f0106383:	c1 e0 0c             	shl    $0xc,%eax
}
f0106386:	c9                   	leave  
f0106387:	c3                   	ret    

f0106388 <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106388:	55                   	push   %ebp
f0106389:	89 e5                	mov    %esp,%ebp
f010638b:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f010638e:	8b 45 08             	mov    0x8(%ebp),%eax
f0106391:	c1 e8 0c             	shr    $0xc,%eax
f0106394:	89 c2                	mov    %eax,%edx
f0106396:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f010639b:	39 c2                	cmp    %eax,%edx
f010639d:	72 14                	jb     f01063b3 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f010639f:	83 ec 04             	sub    $0x4,%esp
f01063a2:	68 94 4f 13 f0       	push   $0xf0134f94
f01063a7:	6a 55                	push   $0x55
f01063a9:	68 b9 4f 13 f0       	push   $0xf0134fb9
f01063ae:	e8 f3 9d ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f01063b3:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f01063b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01063bc:	c1 e8 0c             	shr    $0xc,%eax
f01063bf:	89 c1                	mov    %eax,%ecx
f01063c1:	89 c8                	mov    %ecx,%eax
f01063c3:	01 c0                	add    %eax,%eax
f01063c5:	01 c8                	add    %ecx,%eax
f01063c7:	c1 e0 03             	shl    $0x3,%eax
f01063ca:	01 d0                	add    %edx,%eax
}
f01063cc:	c9                   	leave  
f01063cd:	c3                   	ret    

f01063ce <tlb_invalidate>:




void tlb_invalidate(uint32 *ptr_page_directory, void *virtual_address)
{
f01063ce:	55                   	push   %ebp
f01063cf:	89 e5                	mov    %esp,%ebp
f01063d1:	83 ec 10             	sub    $0x10,%esp
f01063d4:	8b 45 0c             	mov    0xc(%ebp),%eax
f01063d7:	89 45 fc             	mov    %eax,-0x4(%ebp)
}

static __inline void 
invlpg(void *addr)
{ 
	__asm __volatile("invlpg (%0)" : : "r" (addr) : "memory");
f01063da:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01063dd:	0f 01 38             	invlpg (%eax)
	// Flush the entry only if we're modifying the current address space.
	// For now, there is only one address space, so always invalidate.
	invlpg(virtual_address);
}
f01063e0:	90                   	nop
f01063e1:	c9                   	leave  
f01063e2:	c3                   	ret    

f01063e3 <initialize_paging>:
// and NEVER use boot_allocate_space() or the related boot-time functions above.
//

extern void initialize_disk_page_file();
void initialize_paging()
{
f01063e3:	55                   	push   %ebp
f01063e4:	89 e5                	mov    %esp,%ebp
f01063e6:	53                   	push   %ebx
f01063e7:	83 ec 24             	sub    $0x24,%esp
	//     Some of it is in use, some is free. Where is the kernel?
	//     Which frames are used for page tables and other data structures?
	//
	// Change the code to reflect this.
	int i;
	LIST_INIT(&free_frame_list);
f01063ea:	c7 05 78 84 6e f0 00 	movl   $0x0,0xf06e8478
f01063f1:	00 00 00 
f01063f4:	c7 05 7c 84 6e f0 00 	movl   $0x0,0xf06e847c
f01063fb:	00 00 00 
f01063fe:	c7 05 84 84 6e f0 00 	movl   $0x0,0xf06e8484
f0106405:	00 00 00 
	LIST_INIT(&modified_frame_list);
f0106408:	c7 05 e0 8f 65 f0 00 	movl   $0x0,0xf0658fe0
f010640f:	00 00 00 
f0106412:	c7 05 e4 8f 65 f0 00 	movl   $0x0,0xf0658fe4
f0106419:	00 00 00 
f010641c:	c7 05 ec 8f 65 f0 00 	movl   $0x0,0xf0658fec
f0106423:	00 00 00 

	frames_info[0].references = 1;
f0106426:	a1 b0 84 6e f0       	mov    0xf06e84b0,%eax
f010642b:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[1].references = 1;
f0106431:	a1 b0 84 6e f0       	mov    0xf06e84b0,%eax
f0106436:	83 c0 18             	add    $0x18,%eax
f0106439:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	frames_info[2].references = 1;
f010643f:	a1 b0 84 6e f0       	mov    0xf06e84b0,%eax
f0106444:	83 c0 30             	add    $0x30,%eax
f0106447:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
f010644d:	c7 05 bc 84 6e f0 00 	movl   $0xf0001000,0xf06e84bc
f0106454:	10 00 f0 
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
f0106457:	c7 05 e0 84 6e f0 00 	movl   $0xf0002000,0xf06e84e0
f010645e:	20 00 f0 
	i =0;
f0106461:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<1024; i++)
f0106468:	eb 1f                	jmp    f0106489 <initialize_paging+0xa6>
	{
		ptr_zero_page[i]=0;
f010646a:	8b 15 bc 84 6e f0    	mov    0xf06e84bc,%edx
f0106470:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106473:	01 d0                	add    %edx,%eax
f0106475:	c6 00 00             	movb   $0x0,(%eax)
		ptr_temp_page[i]=0;
f0106478:	8b 15 e0 84 6e f0    	mov    0xf06e84e0,%edx
f010647e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106481:	01 d0                	add    %edx,%eax
f0106483:	c6 00 00             	movb   $0x0,(%eax)
	frames_info[1].references = 1;
	frames_info[2].references = 1;
	ptr_zero_page = (uint8*) KERNEL_BASE+PAGE_SIZE;
	ptr_temp_page = (uint8*) KERNEL_BASE+2*PAGE_SIZE;
	i =0;
	for(;i<1024; i++)
f0106486:	ff 45 f4             	incl   -0xc(%ebp)
f0106489:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0106490:	7e d8                	jle    f010646a <initialize_paging+0x87>
	{
		ptr_zero_page[i]=0;
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);
f0106492:	c7 45 f0 00 10 00 00 	movl   $0x1000,-0x10(%ebp)
f0106499:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010649c:	05 ff ff 09 00       	add    $0x9ffff,%eax
f01064a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01064a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01064ac:	f7 75 f0             	divl   -0x10(%ebp)
f01064af:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01064b2:	29 d0                	sub    %edx,%eax
f01064b4:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01064b7:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)
f01064be:	e9 e8 00 00 00       	jmp    f01065ab <initialize_paging+0x1c8>
	{

		initialize_frame_info(&(frames_info[i]));
f01064c3:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f01064c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01064cc:	89 d0                	mov    %edx,%eax
f01064ce:	01 c0                	add    %eax,%eax
f01064d0:	01 d0                	add    %edx,%eax
f01064d2:	c1 e0 03             	shl    $0x3,%eax
f01064d5:	01 c8                	add    %ecx,%eax
f01064d7:	83 ec 0c             	sub    $0xc,%esp
f01064da:	50                   	push   %eax
f01064db:	e8 b7 02 00 00       	call   f0106797 <initialize_frame_info>
f01064e0:	83 c4 10             	add    $0x10,%esp
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01064e3:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f01064e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01064ec:	89 d0                	mov    %edx,%eax
f01064ee:	01 c0                	add    %eax,%eax
f01064f0:	01 d0                	add    %edx,%eax
f01064f2:	c1 e0 03             	shl    $0x3,%eax
f01064f5:	01 c8                	add    %ecx,%eax
f01064f7:	85 c0                	test   %eax,%eax
f01064f9:	75 14                	jne    f010650f <initialize_paging+0x12c>
f01064fb:	83 ec 04             	sub    $0x4,%esp
f01064fe:	68 d4 4f 13 f0       	push   $0xf0134fd4
f0106503:	6a 5c                	push   $0x5c
f0106505:	68 f7 4f 13 f0       	push   $0xf0134ff7
f010650a:	e8 97 9c ff ff       	call   f01001a6 <_panic>
f010650f:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f0106515:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106518:	89 d0                	mov    %edx,%eax
f010651a:	01 c0                	add    %eax,%eax
f010651c:	01 d0                	add    %edx,%eax
f010651e:	c1 e0 03             	shl    $0x3,%eax
f0106521:	01 c8                	add    %ecx,%eax
f0106523:	8b 15 78 84 6e f0    	mov    0xf06e8478,%edx
f0106529:	89 10                	mov    %edx,(%eax)
f010652b:	8b 00                	mov    (%eax),%eax
f010652d:	85 c0                	test   %eax,%eax
f010652f:	74 1f                	je     f0106550 <initialize_paging+0x16d>
f0106531:	8b 15 78 84 6e f0    	mov    0xf06e8478,%edx
f0106537:	8b 1d b0 84 6e f0    	mov    0xf06e84b0,%ebx
f010653d:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106540:	89 c8                	mov    %ecx,%eax
f0106542:	01 c0                	add    %eax,%eax
f0106544:	01 c8                	add    %ecx,%eax
f0106546:	c1 e0 03             	shl    $0x3,%eax
f0106549:	01 d8                	add    %ebx,%eax
f010654b:	89 42 04             	mov    %eax,0x4(%edx)
f010654e:	eb 19                	jmp    f0106569 <initialize_paging+0x186>
f0106550:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f0106556:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106559:	89 d0                	mov    %edx,%eax
f010655b:	01 c0                	add    %eax,%eax
f010655d:	01 d0                	add    %edx,%eax
f010655f:	c1 e0 03             	shl    $0x3,%eax
f0106562:	01 c8                	add    %ecx,%eax
f0106564:	a3 7c 84 6e f0       	mov    %eax,0xf06e847c
f0106569:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f010656f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106572:	89 d0                	mov    %edx,%eax
f0106574:	01 c0                	add    %eax,%eax
f0106576:	01 d0                	add    %edx,%eax
f0106578:	c1 e0 03             	shl    $0x3,%eax
f010657b:	01 c8                	add    %ecx,%eax
f010657d:	a3 78 84 6e f0       	mov    %eax,0xf06e8478
f0106582:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f0106588:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010658b:	89 d0                	mov    %edx,%eax
f010658d:	01 c0                	add    %eax,%eax
f010658f:	01 d0                	add    %edx,%eax
f0106591:	c1 e0 03             	shl    $0x3,%eax
f0106594:	01 c8                	add    %ecx,%eax
f0106596:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010659d:	a1 84 84 6e f0       	mov    0xf06e8484,%eax
f01065a2:	40                   	inc    %eax
f01065a3:	a3 84 84 6e f0       	mov    %eax,0xf06e8484
		ptr_temp_page[i]=0;
	}

	int range_end = ROUNDUP(PHYS_IO_MEM,PAGE_SIZE);

	for (i = 3; i < range_end/PAGE_SIZE; i++)
f01065a8:	ff 45 f4             	incl   -0xc(%ebp)
f01065ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01065ae:	85 c0                	test   %eax,%eax
f01065b0:	79 05                	jns    f01065b7 <initialize_paging+0x1d4>
f01065b2:	05 ff 0f 00 00       	add    $0xfff,%eax
f01065b7:	c1 f8 0c             	sar    $0xc,%eax
f01065ba:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01065bd:	0f 8f 00 ff ff ff    	jg     f01064c3 <initialize_paging+0xe0>
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01065c3:	c7 45 f4 a0 00 00 00 	movl   $0xa0,-0xc(%ebp)
f01065ca:	eb 1d                	jmp    f01065e9 <initialize_paging+0x206>
	{
		frames_info[i].references = 1;
f01065cc:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f01065d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01065d5:	89 d0                	mov    %edx,%eax
f01065d7:	01 c0                	add    %eax,%eax
f01065d9:	01 d0                	add    %edx,%eax
f01065db:	c1 e0 03             	shl    $0x3,%eax
f01065de:	01 c8                	add    %ecx,%eax
f01065e0:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		//frames_info[i].references = 0;

		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	for (i = PHYS_IO_MEM/PAGE_SIZE ; i < PHYS_EXTENDED_MEM/PAGE_SIZE; i++)
f01065e6:	ff 45 f4             	incl   -0xc(%ebp)
f01065e9:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
f01065f0:	7e da                	jle    f01065cc <initialize_paging+0x1e9>
	{
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);
f01065f2:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f01065f9:	a1 d4 84 6e f0       	mov    0xf06e84d4,%eax
f01065fe:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0106601:	81 7d e0 ff ff ff ef 	cmpl   $0xefffffff,-0x20(%ebp)
f0106608:	77 14                	ja     f010661e <initialize_paging+0x23b>
f010660a:	ff 75 e0             	pushl  -0x20(%ebp)
f010660d:	68 14 50 13 f0       	push   $0xf0135014
f0106612:	6a 64                	push   $0x64
f0106614:	68 f7 4f 13 f0       	push   $0xf0134ff7
f0106619:	e8 88 9b ff ff       	call   f01001a6 <_panic>
f010661e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106621:	8d 90 00 00 00 10    	lea    0x10000000(%eax),%edx
f0106627:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010662a:	01 d0                	add    %edx,%eax
f010662c:	48                   	dec    %eax
f010662d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0106630:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0106633:	ba 00 00 00 00       	mov    $0x0,%edx
f0106638:	f7 75 e4             	divl   -0x1c(%ebp)
f010663b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010663e:	29 d0                	sub    %edx,%eax
f0106640:	89 45 e8             	mov    %eax,-0x18(%ebp)

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106643:	c7 45 f4 00 01 00 00 	movl   $0x100,-0xc(%ebp)
f010664a:	eb 1d                	jmp    f0106669 <initialize_paging+0x286>
	{
		frames_info[i].references = 1;
f010664c:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f0106652:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106655:	89 d0                	mov    %edx,%eax
f0106657:	01 c0                	add    %eax,%eax
f0106659:	01 d0                	add    %edx,%eax
f010665b:	c1 e0 03             	shl    $0x3,%eax
f010665e:	01 c8                	add    %ecx,%eax
f0106660:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
		frames_info[i].references = 1;
	}

	range_end = ROUNDUP(STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_free_mem), PAGE_SIZE);

	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
f0106666:	ff 45 f4             	incl   -0xc(%ebp)
f0106669:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010666c:	85 c0                	test   %eax,%eax
f010666e:	79 05                	jns    f0106675 <initialize_paging+0x292>
f0106670:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106675:	c1 f8 0c             	sar    $0xc,%eax
f0106678:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010667b:	7f cf                	jg     f010664c <initialize_paging+0x269>
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f010667d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106680:	85 c0                	test   %eax,%eax
f0106682:	79 05                	jns    f0106689 <initialize_paging+0x2a6>
f0106684:	05 ff 0f 00 00       	add    $0xfff,%eax
f0106689:	c1 f8 0c             	sar    $0xc,%eax
f010668c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010668f:	e9 e8 00 00 00       	jmp    f010677c <initialize_paging+0x399>
	{
		initialize_frame_info(&(frames_info[i]));
f0106694:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f010669a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010669d:	89 d0                	mov    %edx,%eax
f010669f:	01 c0                	add    %eax,%eax
f01066a1:	01 d0                	add    %edx,%eax
f01066a3:	c1 e0 03             	shl    $0x3,%eax
f01066a6:	01 c8                	add    %ecx,%eax
f01066a8:	83 ec 0c             	sub    $0xc,%esp
f01066ab:	50                   	push   %eax
f01066ac:	e8 e6 00 00 00       	call   f0106797 <initialize_frame_info>
f01066b1:	83 c4 10             	add    $0x10,%esp

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
f01066b4:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f01066ba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066bd:	89 d0                	mov    %edx,%eax
f01066bf:	01 c0                	add    %eax,%eax
f01066c1:	01 d0                	add    %edx,%eax
f01066c3:	c1 e0 03             	shl    $0x3,%eax
f01066c6:	01 c8                	add    %ecx,%eax
f01066c8:	85 c0                	test   %eax,%eax
f01066ca:	75 14                	jne    f01066e0 <initialize_paging+0x2fd>
f01066cc:	83 ec 04             	sub    $0x4,%esp
f01066cf:	68 d4 4f 13 f0       	push   $0xf0134fd4
f01066d4:	6a 70                	push   $0x70
f01066d6:	68 f7 4f 13 f0       	push   $0xf0134ff7
f01066db:	e8 c6 9a ff ff       	call   f01001a6 <_panic>
f01066e0:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f01066e6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01066e9:	89 d0                	mov    %edx,%eax
f01066eb:	01 c0                	add    %eax,%eax
f01066ed:	01 d0                	add    %edx,%eax
f01066ef:	c1 e0 03             	shl    $0x3,%eax
f01066f2:	01 c8                	add    %ecx,%eax
f01066f4:	8b 15 78 84 6e f0    	mov    0xf06e8478,%edx
f01066fa:	89 10                	mov    %edx,(%eax)
f01066fc:	8b 00                	mov    (%eax),%eax
f01066fe:	85 c0                	test   %eax,%eax
f0106700:	74 1f                	je     f0106721 <initialize_paging+0x33e>
f0106702:	8b 15 78 84 6e f0    	mov    0xf06e8478,%edx
f0106708:	8b 1d b0 84 6e f0    	mov    0xf06e84b0,%ebx
f010670e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0106711:	89 c8                	mov    %ecx,%eax
f0106713:	01 c0                	add    %eax,%eax
f0106715:	01 c8                	add    %ecx,%eax
f0106717:	c1 e0 03             	shl    $0x3,%eax
f010671a:	01 d8                	add    %ebx,%eax
f010671c:	89 42 04             	mov    %eax,0x4(%edx)
f010671f:	eb 19                	jmp    f010673a <initialize_paging+0x357>
f0106721:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f0106727:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010672a:	89 d0                	mov    %edx,%eax
f010672c:	01 c0                	add    %eax,%eax
f010672e:	01 d0                	add    %edx,%eax
f0106730:	c1 e0 03             	shl    $0x3,%eax
f0106733:	01 c8                	add    %ecx,%eax
f0106735:	a3 7c 84 6e f0       	mov    %eax,0xf06e847c
f010673a:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f0106740:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106743:	89 d0                	mov    %edx,%eax
f0106745:	01 c0                	add    %eax,%eax
f0106747:	01 d0                	add    %edx,%eax
f0106749:	c1 e0 03             	shl    $0x3,%eax
f010674c:	01 c8                	add    %ecx,%eax
f010674e:	a3 78 84 6e f0       	mov    %eax,0xf06e8478
f0106753:	8b 0d b0 84 6e f0    	mov    0xf06e84b0,%ecx
f0106759:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010675c:	89 d0                	mov    %edx,%eax
f010675e:	01 c0                	add    %eax,%eax
f0106760:	01 d0                	add    %edx,%eax
f0106762:	c1 e0 03             	shl    $0x3,%eax
f0106765:	01 c8                	add    %ecx,%eax
f0106767:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010676e:	a1 84 84 6e f0       	mov    0xf06e8484,%eax
f0106773:	40                   	inc    %eax
f0106774:	a3 84 84 6e f0       	mov    %eax,0xf06e8484
	for (i = PHYS_EXTENDED_MEM/PAGE_SIZE ; i < range_end/PAGE_SIZE; i++)
	{
		frames_info[i].references = 1;
	}

	for (i = range_end/PAGE_SIZE ; i < number_of_frames; i++)
f0106779:	ff 45 f4             	incl   -0xc(%ebp)
f010677c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010677f:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0106784:	39 c2                	cmp    %eax,%edx
f0106786:	0f 82 08 ff ff ff    	jb     f0106694 <initialize_paging+0x2b1>

		//frames_info[i].references = 0;
		LIST_INSERT_HEAD(&free_frame_list, &frames_info[i]);
	}

	initialize_disk_page_file();
f010678c:	e8 2d c8 ff ff       	call   f0102fbe <initialize_disk_page_file>
}
f0106791:	90                   	nop
f0106792:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0106795:	c9                   	leave  
f0106796:	c3                   	ret    

f0106797 <initialize_frame_info>:
// Initialize a Frame_Info structure.
// The result has null links and 0 references.
// Note that the corresponding physical frame is NOT initialized!
//
void initialize_frame_info(struct FrameInfo *ptr_frame_info)
{
f0106797:	55                   	push   %ebp
f0106798:	89 e5                	mov    %esp,%ebp
f010679a:	83 ec 08             	sub    $0x8,%esp
	memset(ptr_frame_info, 0, sizeof(*ptr_frame_info));
f010679d:	83 ec 04             	sub    $0x4,%esp
f01067a0:	6a 18                	push   $0x18
f01067a2:	6a 00                	push   $0x0
f01067a4:	ff 75 08             	pushl  0x8(%ebp)
f01067a7:	e8 7f 9e 02 00       	call   f013062b <memset>
f01067ac:	83 c4 10             	add    $0x10,%esp
}
f01067af:	90                   	nop
f01067b0:	c9                   	leave  
f01067b1:	c3                   	ret    

f01067b2 <allocate_frame>:
// Hint: references should not be incremented

//extern void env_free(struct Env *e);

int allocate_frame(struct FrameInfo **ptr_frame_info)
{
f01067b2:	55                   	push   %ebp
f01067b3:	89 e5                	mov    %esp,%ebp
f01067b5:	83 ec 18             	sub    $0x18,%esp
	*ptr_frame_info = LIST_FIRST(&free_frame_list);
f01067b8:	8b 15 78 84 6e f0    	mov    0xf06e8478,%edx
f01067be:	8b 45 08             	mov    0x8(%ebp),%eax
f01067c1:	89 10                	mov    %edx,(%eax)
	int c = 0;
f01067c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if (*ptr_frame_info == NULL)
f01067ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01067cd:	8b 00                	mov    (%eax),%eax
f01067cf:	85 c0                	test   %eax,%eax
f01067d1:	75 17                	jne    f01067ea <allocate_frame+0x38>
	{
		//TODO: [PROJECT MS3] [KERNEL MEM] Free RAM when it's FULL
		// Write your code here, remove the panic and write your code
		panic("ERROR: Kernel run out of memory... allocate_frame cannot find a free frame.\n");
f01067d3:	83 ec 04             	sub    $0x4,%esp
f01067d6:	68 48 50 13 f0       	push   $0xf0135048
f01067db:	68 99 00 00 00       	push   $0x99
f01067e0:	68 f7 4f 13 f0       	push   $0xf0134ff7
f01067e5:	e8 bc 99 ff ff       	call   f01001a6 <_panic>
	}

	LIST_REMOVE(&free_frame_list,*ptr_frame_info);
f01067ea:	8b 45 08             	mov    0x8(%ebp),%eax
f01067ed:	8b 00                	mov    (%eax),%eax
f01067ef:	85 c0                	test   %eax,%eax
f01067f1:	75 17                	jne    f010680a <allocate_frame+0x58>
f01067f3:	83 ec 04             	sub    $0x4,%esp
f01067f6:	68 95 50 13 f0       	push   $0xf0135095
f01067fb:	68 9c 00 00 00       	push   $0x9c
f0106800:	68 f7 4f 13 f0       	push   $0xf0134ff7
f0106805:	e8 9c 99 ff ff       	call   f01001a6 <_panic>
f010680a:	8b 45 08             	mov    0x8(%ebp),%eax
f010680d:	8b 00                	mov    (%eax),%eax
f010680f:	8b 00                	mov    (%eax),%eax
f0106811:	85 c0                	test   %eax,%eax
f0106813:	74 14                	je     f0106829 <allocate_frame+0x77>
f0106815:	8b 45 08             	mov    0x8(%ebp),%eax
f0106818:	8b 00                	mov    (%eax),%eax
f010681a:	8b 00                	mov    (%eax),%eax
f010681c:	8b 55 08             	mov    0x8(%ebp),%edx
f010681f:	8b 12                	mov    (%edx),%edx
f0106821:	8b 52 04             	mov    0x4(%edx),%edx
f0106824:	89 50 04             	mov    %edx,0x4(%eax)
f0106827:	eb 0d                	jmp    f0106836 <allocate_frame+0x84>
f0106829:	8b 45 08             	mov    0x8(%ebp),%eax
f010682c:	8b 00                	mov    (%eax),%eax
f010682e:	8b 40 04             	mov    0x4(%eax),%eax
f0106831:	a3 7c 84 6e f0       	mov    %eax,0xf06e847c
f0106836:	8b 45 08             	mov    0x8(%ebp),%eax
f0106839:	8b 00                	mov    (%eax),%eax
f010683b:	8b 40 04             	mov    0x4(%eax),%eax
f010683e:	85 c0                	test   %eax,%eax
f0106840:	74 13                	je     f0106855 <allocate_frame+0xa3>
f0106842:	8b 45 08             	mov    0x8(%ebp),%eax
f0106845:	8b 00                	mov    (%eax),%eax
f0106847:	8b 40 04             	mov    0x4(%eax),%eax
f010684a:	8b 55 08             	mov    0x8(%ebp),%edx
f010684d:	8b 12                	mov    (%edx),%edx
f010684f:	8b 12                	mov    (%edx),%edx
f0106851:	89 10                	mov    %edx,(%eax)
f0106853:	eb 0c                	jmp    f0106861 <allocate_frame+0xaf>
f0106855:	8b 45 08             	mov    0x8(%ebp),%eax
f0106858:	8b 00                	mov    (%eax),%eax
f010685a:	8b 00                	mov    (%eax),%eax
f010685c:	a3 78 84 6e f0       	mov    %eax,0xf06e8478
f0106861:	8b 45 08             	mov    0x8(%ebp),%eax
f0106864:	8b 00                	mov    (%eax),%eax
f0106866:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010686c:	8b 45 08             	mov    0x8(%ebp),%eax
f010686f:	8b 00                	mov    (%eax),%eax
f0106871:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106878:	a1 84 84 6e f0       	mov    0xf06e8484,%eax
f010687d:	48                   	dec    %eax
f010687e:	a3 84 84 6e f0       	mov    %eax,0xf06e8484

	/******************* PAGE BUFFERING CODE *******************
	 ***********************************************************/

	if((*ptr_frame_info)->isBuffered)
f0106883:	8b 45 08             	mov    0x8(%ebp),%eax
f0106886:	8b 00                	mov    (%eax),%eax
f0106888:	8a 40 14             	mov    0x14(%eax),%al
f010688b:	84 c0                	test   %al,%al
f010688d:	74 20                	je     f01068af <allocate_frame+0xfd>
	{
		pt_clear_page_table_entry((*ptr_frame_info)->environment->env_page_directory,(*ptr_frame_info)->va);
f010688f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106892:	8b 00                	mov    (%eax),%eax
f0106894:	8b 50 0c             	mov    0xc(%eax),%edx
f0106897:	8b 45 08             	mov    0x8(%ebp),%eax
f010689a:	8b 00                	mov    (%eax),%eax
f010689c:	8b 40 10             	mov    0x10(%eax),%eax
f010689f:	8b 40 5c             	mov    0x5c(%eax),%eax
f01068a2:	83 ec 08             	sub    $0x8,%esp
f01068a5:	52                   	push   %edx
f01068a6:	50                   	push   %eax
f01068a7:	e8 1b 0d 00 00       	call   f01075c7 <pt_clear_page_table_entry>
f01068ac:	83 c4 10             	add    $0x10,%esp
	}

	/**********************************************************
	 ***********************************************************/

	initialize_frame_info(*ptr_frame_info);
f01068af:	8b 45 08             	mov    0x8(%ebp),%eax
f01068b2:	8b 00                	mov    (%eax),%eax
f01068b4:	83 ec 0c             	sub    $0xc,%esp
f01068b7:	50                   	push   %eax
f01068b8:	e8 da fe ff ff       	call   f0106797 <initialize_frame_info>
f01068bd:	83 c4 10             	add    $0x10,%esp
	return 0;
f01068c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01068c5:	c9                   	leave  
f01068c6:	c3                   	ret    

f01068c7 <free_frame>:
//
// Return a frame to the free_frame_list.
// (This function should only be called when ptr_frame_info->references reaches 0.)
//
void free_frame(struct FrameInfo *ptr_frame_info)
{
f01068c7:	55                   	push   %ebp
f01068c8:	89 e5                	mov    %esp,%ebp
f01068ca:	83 ec 08             	sub    $0x8,%esp
	/*2012: clear it to ensure that its members (env, isBuffered, ...) become NULL*/
	initialize_frame_info(ptr_frame_info);
f01068cd:	83 ec 0c             	sub    $0xc,%esp
f01068d0:	ff 75 08             	pushl  0x8(%ebp)
f01068d3:	e8 bf fe ff ff       	call   f0106797 <initialize_frame_info>
f01068d8:	83 c4 10             	add    $0x10,%esp
	/*=============================================================================*/

	// Fill this function in
	LIST_INSERT_HEAD(&free_frame_list, ptr_frame_info);
f01068db:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01068df:	75 17                	jne    f01068f8 <free_frame+0x31>
f01068e1:	83 ec 04             	sub    $0x4,%esp
f01068e4:	68 d4 4f 13 f0       	push   $0xf0134fd4
f01068e9:	68 b9 00 00 00       	push   $0xb9
f01068ee:	68 f7 4f 13 f0       	push   $0xf0134ff7
f01068f3:	e8 ae 98 ff ff       	call   f01001a6 <_panic>
f01068f8:	8b 15 78 84 6e f0    	mov    0xf06e8478,%edx
f01068fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0106901:	89 10                	mov    %edx,(%eax)
f0106903:	8b 45 08             	mov    0x8(%ebp),%eax
f0106906:	8b 00                	mov    (%eax),%eax
f0106908:	85 c0                	test   %eax,%eax
f010690a:	74 0d                	je     f0106919 <free_frame+0x52>
f010690c:	a1 78 84 6e f0       	mov    0xf06e8478,%eax
f0106911:	8b 55 08             	mov    0x8(%ebp),%edx
f0106914:	89 50 04             	mov    %edx,0x4(%eax)
f0106917:	eb 08                	jmp    f0106921 <free_frame+0x5a>
f0106919:	8b 45 08             	mov    0x8(%ebp),%eax
f010691c:	a3 7c 84 6e f0       	mov    %eax,0xf06e847c
f0106921:	8b 45 08             	mov    0x8(%ebp),%eax
f0106924:	a3 78 84 6e f0       	mov    %eax,0xf06e8478
f0106929:	8b 45 08             	mov    0x8(%ebp),%eax
f010692c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0106933:	a1 84 84 6e f0       	mov    0xf06e8484,%eax
f0106938:	40                   	inc    %eax
f0106939:	a3 84 84 6e f0       	mov    %eax,0xf06e8484
	//LOG_STATMENT(cprintf("FN # %d FREED",to_frame_number(ptr_frame_info)));


}
f010693e:	90                   	nop
f010693f:	c9                   	leave  
f0106940:	c3                   	ret    

f0106941 <decrement_references>:
//
// Decrement the reference count on a frame
// freeing it if there are no more references.
//
void decrement_references(struct FrameInfo* ptr_frame_info)
{
f0106941:	55                   	push   %ebp
f0106942:	89 e5                	mov    %esp,%ebp
f0106944:	83 ec 08             	sub    $0x8,%esp
	if (--(ptr_frame_info->references) == 0)
f0106947:	8b 45 08             	mov    0x8(%ebp),%eax
f010694a:	8b 40 08             	mov    0x8(%eax),%eax
f010694d:	48                   	dec    %eax
f010694e:	8b 55 08             	mov    0x8(%ebp),%edx
f0106951:	66 89 42 08          	mov    %ax,0x8(%edx)
f0106955:	8b 45 08             	mov    0x8(%ebp),%eax
f0106958:	8b 40 08             	mov    0x8(%eax),%eax
f010695b:	66 85 c0             	test   %ax,%ax
f010695e:	75 0e                	jne    f010696e <decrement_references+0x2d>
		free_frame(ptr_frame_info);
f0106960:	83 ec 0c             	sub    $0xc,%esp
f0106963:	ff 75 08             	pushl  0x8(%ebp)
f0106966:	e8 5c ff ff ff       	call   f01068c7 <free_frame>
f010696b:	83 c4 10             	add    $0x10,%esp
}
f010696e:	90                   	nop
f010696f:	c9                   	leave  
f0106970:	c3                   	ret    

f0106971 <get_page_table>:
//  TABLE_IN_MEMORY : if page table exists in main memory
//	TABLE_NOT_EXIST : if page table doesn't exist,
//

int get_page_table(uint32 *ptr_page_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106971:	55                   	push   %ebp
f0106972:	89 e5                	mov    %esp,%ebp
f0106974:	83 ec 28             	sub    $0x28,%esp
	//	cprintf("gpt .05\n");
	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106977:	8b 45 0c             	mov    0xc(%ebp),%eax
f010697a:	c1 e8 16             	shr    $0x16,%eax
f010697d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106984:	8b 45 08             	mov    0x8(%ebp),%eax
f0106987:	01 d0                	add    %edx,%eax
f0106989:	8b 00                	mov    (%eax),%eax
f010698b:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//2022: check PERM_PRESENT of the table first before calculating its PA
	if ( (page_directory_entry & PERM_PRESENT) == PERM_PRESENT)
f010698e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106991:	83 e0 01             	and    $0x1,%eax
f0106994:	85 c0                	test   %eax,%eax
f0106996:	74 4e                	je     f01069e6 <get_page_table+0x75>
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
			//cprintf("===>get_page_table: page_dir_entry = %x ptr_page_table = %x\n", page_directory_entry,*ptr_page_table);
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106998:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010699b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01069a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01069a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069a6:	c1 e8 0c             	shr    $0xc,%eax
f01069a9:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01069ac:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01069b1:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01069b4:	72 17                	jb     f01069cd <get_page_table+0x5c>
f01069b6:	ff 75 f0             	pushl  -0x10(%ebp)
f01069b9:	68 b4 50 13 f0       	push   $0xf01350b4
f01069be:	68 e2 00 00 00       	push   $0xe2
f01069c3:	68 f7 4f 13 f0       	push   $0xf0134ff7
f01069c8:	e8 d9 97 ff ff       	call   f01001a6 <_panic>
f01069cd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01069d0:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01069d5:	89 c2                	mov    %eax,%edx
f01069d7:	8b 45 10             	mov    0x10(%ebp),%eax
f01069da:	89 10                	mov    %edx,(%eax)
		}
		return TABLE_IN_MEMORY;
f01069dc:	b8 00 00 00 00       	mov    $0x0,%eax
f01069e1:	e9 8f 00 00 00       	jmp    f0106a75 <get_page_table+0x104>
	}
	else if (page_directory_entry != 0) //the table exists but not in main mem, so it must be in sec mem
f01069e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01069ea:	74 7b                	je     f0106a67 <get_page_table+0xf6>
f01069ec:	8b 45 0c             	mov    0xc(%ebp),%eax
f01069ef:	89 45 e0             	mov    %eax,-0x20(%ebp)

//Ahmed 2010:
static __inline void
lcr2(uint32 val)
{
	__asm __volatile("movl %0,%%cr2" : : "r" (val));
f01069f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01069f5:	0f 22 d0             	mov    %eax,%cr2
		// Call the fault_handler() to load the table in memory for us ...
		//		cprintf("gpt .1\n, %x page_directory_entry\n", page_directory_entry);
		lcr2((uint32)virtual_address) ;

		//		cprintf("gpt .12\n");
		fault_handler(NULL);
f01069f8:	83 ec 0c             	sub    $0xc,%esp
f01069fb:	6a 00                	push   $0x0
f01069fd:	e8 75 52 00 00       	call   f010bc77 <fault_handler>
f0106a02:	83 c4 10             	add    $0x10,%esp

		//		cprintf("gpt .15\n");
		// now the page_fault_handler() should have returned successfully and updated the
		// directory with the new table frame number in memory
		page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106a05:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106a08:	c1 e8 16             	shr    $0x16,%eax
f0106a0b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106a12:	8b 45 08             	mov    0x8(%ebp),%eax
f0106a15:	01 d0                	add    %edx,%eax
f0106a17:	8b 00                	mov    (%eax),%eax
f0106a19:	89 45 f4             	mov    %eax,-0xc(%ebp)
		{
			*ptr_page_table = (void *)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
		}
		else
		{
			*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106a1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106a1f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106a24:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106a27:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a2a:	c1 e8 0c             	shr    $0xc,%eax
f0106a2d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0106a30:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0106a35:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f0106a38:	72 17                	jb     f0106a51 <get_page_table+0xe0>
f0106a3a:	ff 75 e8             	pushl  -0x18(%ebp)
f0106a3d:	68 b4 50 13 f0       	push   $0xf01350b4
f0106a42:	68 fa 00 00 00       	push   $0xfa
f0106a47:	68 f7 4f 13 f0       	push   $0xf0134ff7
f0106a4c:	e8 55 97 ff ff       	call   f01001a6 <_panic>
f0106a51:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106a54:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106a59:	89 c2                	mov    %eax,%edx
f0106a5b:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a5e:	89 10                	mov    %edx,(%eax)
		}

		return TABLE_IN_MEMORY;
f0106a60:	b8 00 00 00 00       	mov    $0x0,%eax
f0106a65:	eb 0e                	jmp    f0106a75 <get_page_table+0x104>
	}
	else // there is no table for this va anywhere. This is a new table required, so check if the user want creation
	{
		//		cprintf("gpt .2\n");
		*ptr_page_table = 0;
f0106a67:	8b 45 10             	mov    0x10(%ebp),%eax
f0106a6a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return TABLE_NOT_EXIST;
f0106a70:	b8 01 00 00 00       	mov    $0x1,%eax
	}
}
f0106a75:	c9                   	leave  
f0106a76:	c3                   	ret    

f0106a77 <create_page_table>:

void * create_page_table(uint32 *ptr_directory, const uint32 virtual_address)
{
f0106a77:	55                   	push   %ebp
f0106a78:	89 e5                	mov    %esp,%ebp
f0106a7a:	83 ec 18             	sub    $0x18,%esp
	memset(ptr_page_table , 0, PAGE_SIZE);
	tlbflush();

#else
	uint32 * ptr_page_table ;
	__static_cpt(ptr_directory, virtual_address, &ptr_page_table) ;
f0106a7d:	83 ec 04             	sub    $0x4,%esp
f0106a80:	8d 45 f4             	lea    -0xc(%ebp),%eax
f0106a83:	50                   	push   %eax
f0106a84:	ff 75 0c             	pushl  0xc(%ebp)
f0106a87:	ff 75 08             	pushl  0x8(%ebp)
f0106a8a:	e8 08 00 00 00       	call   f0106a97 <__static_cpt>
f0106a8f:	83 c4 10             	add    $0x10,%esp
#endif

	return ptr_page_table;
f0106a92:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0106a95:	c9                   	leave  
f0106a96:	c3                   	ret    

f0106a97 <__static_cpt>:

void __static_cpt(uint32 *ptr_directory, const uint32 virtual_address, uint32 **ptr_page_table)
{
f0106a97:	55                   	push   %ebp
f0106a98:	89 e5                	mov    %esp,%ebp
f0106a9a:	83 ec 28             	sub    $0x28,%esp
	struct FrameInfo* ptr_new_frame_info;
	int err = allocate_frame(&ptr_new_frame_info) ;
f0106a9d:	83 ec 0c             	sub    $0xc,%esp
f0106aa0:	8d 45 e0             	lea    -0x20(%ebp),%eax
f0106aa3:	50                   	push   %eax
f0106aa4:	e8 09 fd ff ff       	call   f01067b2 <allocate_frame>
f0106aa9:	83 c4 10             	add    $0x10,%esp
f0106aac:	89 45 f4             	mov    %eax,-0xc(%ebp)

	uint32 phys_page_table = to_physical_address(ptr_new_frame_info);
f0106aaf:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106ab2:	83 ec 0c             	sub    $0xc,%esp
f0106ab5:	50                   	push   %eax
f0106ab6:	e8 ba f8 ff ff       	call   f0106375 <to_physical_address>
f0106abb:	83 c4 10             	add    $0x10,%esp
f0106abe:	89 45 f0             	mov    %eax,-0x10(%ebp)
	*ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(phys_page_table) ;
f0106ac1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ac4:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106ac7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106aca:	c1 e8 0c             	shr    $0xc,%eax
f0106acd:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106ad0:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0106ad5:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106ad8:	72 17                	jb     f0106af1 <__static_cpt+0x5a>
f0106ada:	ff 75 ec             	pushl  -0x14(%ebp)
f0106add:	68 b4 50 13 f0       	push   $0xf01350b4
f0106ae2:	68 30 01 00 00       	push   $0x130
f0106ae7:	68 f7 4f 13 f0       	push   $0xf0134ff7
f0106aec:	e8 b5 96 ff ff       	call   f01001a6 <_panic>
f0106af1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106af4:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106af9:	89 c2                	mov    %eax,%edx
f0106afb:	8b 45 10             	mov    0x10(%ebp),%eax
f0106afe:	89 10                	mov    %edx,(%eax)
	ptr_new_frame_info->references = 1;
f0106b00:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0106b03:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)
	ptr_directory[PDX(virtual_address)] = CONSTRUCT_ENTRY(phys_page_table, PERM_PRESENT | PERM_USER | PERM_WRITEABLE);
f0106b09:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106b0c:	c1 e8 16             	shr    $0x16,%eax
f0106b0f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106b16:	8b 45 08             	mov    0x8(%ebp),%eax
f0106b19:	01 d0                	add    %edx,%eax
f0106b1b:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106b1e:	83 ca 07             	or     $0x7,%edx
f0106b21:	89 10                	mov    %edx,(%eax)
	//initialize new page table by 0's
	memset(*ptr_page_table , 0, PAGE_SIZE);
f0106b23:	8b 45 10             	mov    0x10(%ebp),%eax
f0106b26:	8b 00                	mov    (%eax),%eax
f0106b28:	83 ec 04             	sub    $0x4,%esp
f0106b2b:	68 00 10 00 00       	push   $0x1000
f0106b30:	6a 00                	push   $0x0
f0106b32:	50                   	push   %eax
f0106b33:	e8 f3 9a 02 00       	call   f013062b <memset>
f0106b38:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0106b3b:	0f 20 d8             	mov    %cr3,%eax
f0106b3e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f0106b41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106b44:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0106b47:	90                   	nop
f0106b48:	c9                   	leave  
f0106b49:	c3                   	ret    

f0106b4a <map_frame>:
//   0 on success
//
// Hint: implement using get_page_table() and unmap_frame().
//
int map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106b4a:	55                   	push   %ebp
f0106b4b:	89 e5                	mov    %esp,%ebp
f0106b4d:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106b50:	ff 75 0c             	pushl  0xc(%ebp)
f0106b53:	e8 1d f8 ff ff       	call   f0106375 <to_physical_address>
f0106b58:	83 c4 04             	add    $0x4,%esp
f0106b5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	if( get_page_table(ptr_page_directory, virtual_address, &ptr_page_table) == TABLE_NOT_EXIST)
f0106b5e:	83 ec 04             	sub    $0x4,%esp
f0106b61:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106b64:	50                   	push   %eax
f0106b65:	ff 75 10             	pushl  0x10(%ebp)
f0106b68:	ff 75 08             	pushl  0x8(%ebp)
f0106b6b:	e8 01 fe ff ff       	call   f0106971 <get_page_table>
f0106b70:	83 c4 10             	add    $0x10,%esp
f0106b73:	83 f8 01             	cmp    $0x1,%eax
f0106b76:	75 15                	jne    f0106b8d <map_frame+0x43>
			uint32* ptr_page_table2 =NULL;
			//cprintf("======> After the table created at %x\n\n", get_page_table(ptr_page_directory, virtual_address,&ptr_page_table2));
		}
#else
		{
			__static_cpt(ptr_page_directory, (uint32)virtual_address, &ptr_page_table);
f0106b78:	83 ec 04             	sub    $0x4,%esp
f0106b7b:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0106b7e:	50                   	push   %eax
f0106b7f:	ff 75 10             	pushl  0x10(%ebp)
f0106b82:	ff 75 08             	pushl  0x8(%ebp)
f0106b85:	e8 0d ff ff ff       	call   f0106a97 <__static_cpt>
f0106b8a:	83 c4 10             	add    $0x10,%esp
#endif

	}

	//cprintf("NOW .. map add = %x ptr_page_table = %x PTX(virtual_address) = %d\n", virtual_address, ptr_page_table,PTX(virtual_address));
	uint32 page_table_entry = ptr_page_table[PTX(virtual_address)];
f0106b8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106b90:	8b 55 10             	mov    0x10(%ebp),%edx
f0106b93:	c1 ea 0c             	shr    $0xc,%edx
f0106b96:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106b9c:	c1 e2 02             	shl    $0x2,%edx
f0106b9f:	01 d0                	add    %edx,%eax
f0106ba1:	8b 00                	mov    (%eax),%eax
f0106ba3:	89 45 f0             	mov    %eax,-0x10(%ebp)

	}*/

	/*NEW'15 CORRECT SOLUTION*/
	//If already mapped
	if ((page_table_entry & PERM_PRESENT) == PERM_PRESENT)
f0106ba6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106ba9:	83 e0 01             	and    $0x1,%eax
f0106bac:	85 c0                	test   %eax,%eax
f0106bae:	74 25                	je     f0106bd5 <map_frame+0x8b>
	{
		//on this pa, then do nothing
		if (EXTRACT_ADDRESS(page_table_entry) == physical_address)
f0106bb0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106bb3:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106bb8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0106bbb:	75 07                	jne    f0106bc4 <map_frame+0x7a>
			return 0;
f0106bbd:	b8 00 00 00 00       	mov    $0x0,%eax
f0106bc2:	eb 43                	jmp    f0106c07 <map_frame+0xbd>
		//on another pa, then unmap it
		else
			unmap_frame(ptr_page_directory , virtual_address);
f0106bc4:	83 ec 08             	sub    $0x8,%esp
f0106bc7:	ff 75 10             	pushl  0x10(%ebp)
f0106bca:	ff 75 08             	pushl  0x8(%ebp)
f0106bcd:	e8 a7 00 00 00       	call   f0106c79 <unmap_frame>
f0106bd2:	83 c4 10             	add    $0x10,%esp
	}
	ptr_frame_info->references++;
f0106bd5:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106bd8:	8b 40 08             	mov    0x8(%eax),%eax
f0106bdb:	40                   	inc    %eax
f0106bdc:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106bdf:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106be3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106be6:	8b 55 10             	mov    0x10(%ebp),%edx
f0106be9:	c1 ea 0c             	shr    $0xc,%edx
f0106bec:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106bf2:	c1 e2 02             	shl    $0x2,%edx
f0106bf5:	01 c2                	add    %eax,%edx
f0106bf7:	8b 45 14             	mov    0x14(%ebp),%eax
f0106bfa:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106bfd:	83 c8 01             	or     $0x1,%eax
f0106c00:	89 02                	mov    %eax,(%edx)

	return 0;
f0106c02:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106c07:	c9                   	leave  
f0106c08:	c3                   	ret    

f0106c09 <get_frame_info>:
// Return 0 if there is no frame mapped at virtual_address.
//
// Hint: implement using get_page_table() and get_frame_info().
//
struct FrameInfo * get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table)
{
f0106c09:	55                   	push   %ebp
f0106c0a:	89 e5                	mov    %esp,%ebp
f0106c0c:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	//cprintf(".gfi .1\n %x, %x, %x, \n", ptr_page_directory, virtual_address, ptr_page_table);
	uint32 ret =  get_page_table(ptr_page_directory, virtual_address, ptr_page_table) ;
f0106c0f:	83 ec 04             	sub    $0x4,%esp
f0106c12:	ff 75 10             	pushl  0x10(%ebp)
f0106c15:	ff 75 0c             	pushl  0xc(%ebp)
f0106c18:	ff 75 08             	pushl  0x8(%ebp)
f0106c1b:	e8 51 fd ff ff       	call   f0106971 <get_page_table>
f0106c20:	83 c4 10             	add    $0x10,%esp
f0106c23:	89 45 f4             	mov    %eax,-0xc(%ebp)
	//cprintf(".gfi .15\n");
	if((*ptr_page_table) != 0)
f0106c26:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c29:	8b 00                	mov    (%eax),%eax
f0106c2b:	85 c0                	test   %eax,%eax
f0106c2d:	74 43                	je     f0106c72 <get_frame_info+0x69>
	{
		uint32 index_page_table = PTX(virtual_address);
f0106c2f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106c32:	c1 e8 0c             	shr    $0xc,%eax
f0106c35:	25 ff 03 00 00       	and    $0x3ff,%eax
f0106c3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf(".gfi .2\n");
		uint32 page_table_entry = (*ptr_page_table)[index_page_table];
f0106c3d:	8b 45 10             	mov    0x10(%ebp),%eax
f0106c40:	8b 00                	mov    (%eax),%eax
f0106c42:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106c45:	c1 e2 02             	shl    $0x2,%edx
f0106c48:	01 d0                	add    %edx,%eax
f0106c4a:	8b 00                	mov    (%eax),%eax
f0106c4c:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if( page_table_entry != 0)
f0106c4f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0106c53:	74 16                	je     f0106c6b <get_frame_info+0x62>
		{
			//cprintf(".gfi .3\n");
			return to_frame_info( EXTRACT_ADDRESS ( page_table_entry ) );
f0106c55:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106c58:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106c5d:	83 ec 0c             	sub    $0xc,%esp
f0106c60:	50                   	push   %eax
f0106c61:	e8 22 f7 ff ff       	call   f0106388 <to_frame_info>
f0106c66:	83 c4 10             	add    $0x10,%esp
f0106c69:	eb 0c                	jmp    f0106c77 <get_frame_info+0x6e>
		}
		return 0;
f0106c6b:	b8 00 00 00 00       	mov    $0x0,%eax
f0106c70:	eb 05                	jmp    f0106c77 <get_frame_info+0x6e>
	}
	return 0;
f0106c72:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106c77:	c9                   	leave  
f0106c78:	c3                   	ret    

f0106c79 <unmap_frame>:
//
// Hint: implement using get_frame_info(),
// 	tlb_invalidate(), and decrement_references().
//
void unmap_frame(uint32 *ptr_page_directory, uint32 virtual_address)
{
f0106c79:	55                   	push   %ebp
f0106c7a:	89 e5                	mov    %esp,%ebp
f0106c7c:	83 ec 18             	sub    $0x18,%esp
	// Fill this function in
	uint32 *ptr_page_table;
	struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, virtual_address, &ptr_page_table);
f0106c7f:	83 ec 04             	sub    $0x4,%esp
f0106c82:	8d 45 f0             	lea    -0x10(%ebp),%eax
f0106c85:	50                   	push   %eax
f0106c86:	ff 75 0c             	pushl  0xc(%ebp)
f0106c89:	ff 75 08             	pushl  0x8(%ebp)
f0106c8c:	e8 78 ff ff ff       	call   f0106c09 <get_frame_info>
f0106c91:	83 c4 10             	add    $0x10,%esp
f0106c94:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if( ptr_frame_info != 0 )
f0106c97:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0106c9b:	74 60                	je     f0106cfd <unmap_frame+0x84>
	{
		if (ptr_frame_info->isBuffered && !CHECK_IF_KERNEL_ADDRESS((uint32)virtual_address))
f0106c9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0106ca0:	8a 40 14             	mov    0x14(%eax),%al
f0106ca3:	84 c0                	test   %al,%al
f0106ca5:	74 1c                	je     f0106cc3 <unmap_frame+0x4a>
f0106ca7:	81 7d 0c ff ff bf ee 	cmpl   $0xeebfffff,0xc(%ebp)
f0106cae:	77 13                	ja     f0106cc3 <unmap_frame+0x4a>
			cprintf("Freeing BUFFERED frame at va %x!!!\n", virtual_address) ;
f0106cb0:	83 ec 08             	sub    $0x8,%esp
f0106cb3:	ff 75 0c             	pushl  0xc(%ebp)
f0106cb6:	68 e4 50 13 f0       	push   $0xf01350e4
f0106cbb:	e8 6d 9f ff ff       	call   f0100c2d <cprintf>
f0106cc0:	83 c4 10             	add    $0x10,%esp
		decrement_references(ptr_frame_info);
f0106cc3:	83 ec 0c             	sub    $0xc,%esp
f0106cc6:	ff 75 f4             	pushl  -0xc(%ebp)
f0106cc9:	e8 73 fc ff ff       	call   f0106941 <decrement_references>
f0106cce:	83 c4 10             	add    $0x10,%esp
		ptr_page_table[PTX(virtual_address)] = 0;
f0106cd1:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106cd4:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106cd7:	c1 ea 0c             	shr    $0xc,%edx
f0106cda:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106ce0:	c1 e2 02             	shl    $0x2,%edx
f0106ce3:	01 d0                	add    %edx,%eax
f0106ce5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		tlb_invalidate(ptr_page_directory, (void *)virtual_address);
f0106ceb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106cee:	83 ec 08             	sub    $0x8,%esp
f0106cf1:	50                   	push   %eax
f0106cf2:	ff 75 08             	pushl  0x8(%ebp)
f0106cf5:	e8 d4 f6 ff ff       	call   f01063ce <tlb_invalidate>
f0106cfa:	83 c4 10             	add    $0x10,%esp
	}
}
f0106cfd:	90                   	nop
f0106cfe:	c9                   	leave  
f0106cff:	c3                   	ret    

f0106d00 <loadtime_map_frame>:
// RETURNS:
//   0 on success
//
//
int loadtime_map_frame(uint32 *ptr_page_directory, struct FrameInfo *ptr_frame_info, uint32 virtual_address, int perm)
{
f0106d00:	55                   	push   %ebp
f0106d01:	89 e5                	mov    %esp,%ebp
f0106d03:	83 ec 28             	sub    $0x28,%esp
	uint32 physical_address = to_physical_address(ptr_frame_info);
f0106d06:	ff 75 0c             	pushl  0xc(%ebp)
f0106d09:	e8 67 f6 ff ff       	call   f0106375 <to_physical_address>
f0106d0e:	83 c4 04             	add    $0x4,%esp
f0106d11:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;

	uint32 page_directory_entry = ptr_page_directory[PDX(virtual_address)];
f0106d14:	8b 45 10             	mov    0x10(%ebp),%eax
f0106d17:	c1 e8 16             	shr    $0x16,%eax
f0106d1a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0106d21:	8b 45 08             	mov    0x8(%ebp),%eax
f0106d24:	01 d0                	add    %edx,%eax
f0106d26:	8b 00                	mov    (%eax),%eax
f0106d28:	89 45 f0             	mov    %eax,-0x10(%ebp)
	{
		ptr_page_table = (uint32*)kheap_virtual_address(EXTRACT_ADDRESS(page_directory_entry)) ;
	}
	else
	{
		ptr_page_table = STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(page_directory_entry)) ;
f0106d2b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106d2e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0106d33:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0106d36:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d39:	c1 e8 0c             	shr    $0xc,%eax
f0106d3c:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0106d3f:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0106d44:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0106d47:	72 17                	jb     f0106d60 <loadtime_map_frame+0x60>
f0106d49:	ff 75 ec             	pushl  -0x14(%ebp)
f0106d4c:	68 b4 50 13 f0       	push   $0xf01350b4
f0106d51:	68 e6 01 00 00       	push   $0x1e6
f0106d56:	68 f7 4f 13 f0       	push   $0xf0134ff7
f0106d5b:	e8 46 94 ff ff       	call   f01001a6 <_panic>
f0106d60:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106d63:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0106d68:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	}

	//if page table not exist, create it in memory and link it with the directory
	if (page_directory_entry == 0)
f0106d6b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106d6f:	75 15                	jne    f0106d86 <loadtime_map_frame+0x86>
		{
			ptr_page_table = create_page_table(ptr_page_directory, virtual_address);
		}
#else
		{
			__static_cpt(ptr_page_directory, virtual_address, &ptr_page_table);
f0106d71:	83 ec 04             	sub    $0x4,%esp
f0106d74:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f0106d77:	50                   	push   %eax
f0106d78:	ff 75 10             	pushl  0x10(%ebp)
f0106d7b:	ff 75 08             	pushl  0x8(%ebp)
f0106d7e:	e8 14 fd ff ff       	call   f0106a97 <__static_cpt>
f0106d83:	83 c4 10             	add    $0x10,%esp
		}
#endif
	}

	ptr_frame_info->references++;
f0106d86:	8b 45 0c             	mov    0xc(%ebp),%eax
f0106d89:	8b 40 08             	mov    0x8(%eax),%eax
f0106d8c:	40                   	inc    %eax
f0106d8d:	8b 55 0c             	mov    0xc(%ebp),%edx
f0106d90:	66 89 42 08          	mov    %ax,0x8(%edx)
	ptr_page_table[PTX(virtual_address)] = CONSTRUCT_ENTRY(physical_address , perm | PERM_PRESENT);
f0106d94:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106d97:	8b 55 10             	mov    0x10(%ebp),%edx
f0106d9a:	c1 ea 0c             	shr    $0xc,%edx
f0106d9d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0106da3:	c1 e2 02             	shl    $0x2,%edx
f0106da6:	01 c2                	add    %eax,%edx
f0106da8:	8b 45 14             	mov    0x14(%ebp),%eax
f0106dab:	0b 45 f4             	or     -0xc(%ebp),%eax
f0106dae:	83 c8 01             	or     $0x1,%eax
f0106db1:	89 02                	mov    %eax,(%edx)

	return 0;
f0106db3:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0106db8:	c9                   	leave  
f0106db9:	c3                   	ret    

f0106dba <calculate_available_frames>:



// calculate_available_frames:
struct freeFramesCounters calculate_available_frames()
{
f0106dba:	55                   	push   %ebp
f0106dbb:	89 e5                	mov    %esp,%ebp
f0106dbd:	57                   	push   %edi
f0106dbe:	56                   	push   %esi
f0106dbf:	53                   	push   %ebx
f0106dc0:	83 ec 20             	sub    $0x20,%esp

	//calculate the free frames from the free frame list
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
f0106dc3:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	uint32 totalFreeBuffered = 0 ;
f0106dca:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	uint32 totalModified = 0 ;
f0106dd1:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	LIST_FOREACH(ptr, &free_frame_list)
f0106dd8:	a1 78 84 6e f0       	mov    0xf06e8478,%eax
f0106ddd:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106de0:	eb 1a                	jmp    f0106dfc <calculate_available_frames+0x42>
	{
		if (ptr->isBuffered)
f0106de2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106de5:	8a 40 14             	mov    0x14(%eax),%al
f0106de8:	84 c0                	test   %al,%al
f0106dea:	74 05                	je     f0106df1 <calculate_available_frames+0x37>
			totalFreeBuffered++ ;
f0106dec:	ff 45 e8             	incl   -0x18(%ebp)
f0106def:	eb 03                	jmp    f0106df4 <calculate_available_frames+0x3a>
		else
			totalFreeUnBuffered++ ;
f0106df1:	ff 45 ec             	incl   -0x14(%ebp)
	struct FrameInfo *ptr;
	uint32 totalFreeUnBuffered = 0 ;
	uint32 totalFreeBuffered = 0 ;
	uint32 totalModified = 0 ;

	LIST_FOREACH(ptr, &free_frame_list)
f0106df4:	a1 80 84 6e f0       	mov    0xf06e8480,%eax
f0106df9:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106dfc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e00:	74 07                	je     f0106e09 <calculate_available_frames+0x4f>
f0106e02:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106e05:	8b 00                	mov    (%eax),%eax
f0106e07:	eb 05                	jmp    f0106e0e <calculate_available_frames+0x54>
f0106e09:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e0e:	a3 80 84 6e f0       	mov    %eax,0xf06e8480
f0106e13:	a1 80 84 6e f0       	mov    0xf06e8480,%eax
f0106e18:	85 c0                	test   %eax,%eax
f0106e1a:	75 c6                	jne    f0106de2 <calculate_available_frames+0x28>
f0106e1c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e20:	75 c0                	jne    f0106de2 <calculate_available_frames+0x28>
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106e22:	a1 e0 8f 65 f0       	mov    0xf0658fe0,%eax
f0106e27:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106e2a:	eb 0b                	jmp    f0106e37 <calculate_available_frames+0x7d>
	{
		totalModified++ ;
f0106e2c:	ff 45 e4             	incl   -0x1c(%ebp)
			totalFreeBuffered++ ;
		else
			totalFreeUnBuffered++ ;
	}

	LIST_FOREACH(ptr, &modified_frame_list)
f0106e2f:	a1 e8 8f 65 f0       	mov    0xf0658fe8,%eax
f0106e34:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0106e37:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e3b:	74 07                	je     f0106e44 <calculate_available_frames+0x8a>
f0106e3d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106e40:	8b 00                	mov    (%eax),%eax
f0106e42:	eb 05                	jmp    f0106e49 <calculate_available_frames+0x8f>
f0106e44:	b8 00 00 00 00       	mov    $0x0,%eax
f0106e49:	a3 e8 8f 65 f0       	mov    %eax,0xf0658fe8
f0106e4e:	a1 e8 8f 65 f0       	mov    0xf0658fe8,%eax
f0106e53:	85 c0                	test   %eax,%eax
f0106e55:	75 d5                	jne    f0106e2c <calculate_available_frames+0x72>
f0106e57:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0106e5b:	75 cf                	jne    f0106e2c <calculate_available_frames+0x72>
	{
		totalModified++ ;
	}

	struct freeFramesCounters counters ;
	counters.freeBuffered = totalFreeBuffered ;
f0106e5d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0106e60:	89 45 d8             	mov    %eax,-0x28(%ebp)
	counters.freeNotBuffered = totalFreeUnBuffered ;
f0106e63:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0106e66:	89 45 dc             	mov    %eax,-0x24(%ebp)
	counters.modified = totalModified;
f0106e69:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0106e6c:	89 45 e0             	mov    %eax,-0x20(%ebp)
	return counters;
f0106e6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e72:	89 c3                	mov    %eax,%ebx
f0106e74:	8d 45 d8             	lea    -0x28(%ebp),%eax
f0106e77:	ba 03 00 00 00       	mov    $0x3,%edx
f0106e7c:	89 df                	mov    %ebx,%edi
f0106e7e:	89 c6                	mov    %eax,%esi
f0106e80:	89 d1                	mov    %edx,%ecx
f0106e82:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f0106e84:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e87:	83 c4 20             	add    $0x20,%esp
f0106e8a:	5b                   	pop    %ebx
f0106e8b:	5e                   	pop    %esi
f0106e8c:	5f                   	pop    %edi
f0106e8d:	5d                   	pop    %ebp
f0106e8e:	c2 04 00             	ret    $0x4

f0106e91 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0106e91:	55                   	push   %ebp
f0106e92:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f0106e94:	8b 45 08             	mov    0x8(%ebp),%eax
f0106e97:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0106e9d:	29 d0                	sub    %edx,%eax
f0106e9f:	c1 f8 03             	sar    $0x3,%eax
f0106ea2:	89 c2                	mov    %eax,%edx
f0106ea4:	89 d0                	mov    %edx,%eax
f0106ea6:	c1 e0 02             	shl    $0x2,%eax
f0106ea9:	01 d0                	add    %edx,%eax
f0106eab:	c1 e0 02             	shl    $0x2,%eax
f0106eae:	01 d0                	add    %edx,%eax
f0106eb0:	c1 e0 02             	shl    $0x2,%eax
f0106eb3:	01 d0                	add    %edx,%eax
f0106eb5:	89 c1                	mov    %eax,%ecx
f0106eb7:	c1 e1 08             	shl    $0x8,%ecx
f0106eba:	01 c8                	add    %ecx,%eax
f0106ebc:	89 c1                	mov    %eax,%ecx
f0106ebe:	c1 e1 10             	shl    $0x10,%ecx
f0106ec1:	01 c8                	add    %ecx,%eax
f0106ec3:	01 c0                	add    %eax,%eax
f0106ec5:	01 d0                	add    %edx,%eax
}
f0106ec7:	5d                   	pop    %ebp
f0106ec8:	c3                   	ret    

f0106ec9 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0106ec9:	55                   	push   %ebp
f0106eca:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0106ecc:	ff 75 08             	pushl  0x8(%ebp)
f0106ecf:	e8 bd ff ff ff       	call   f0106e91 <to_frame_number>
f0106ed4:	83 c4 04             	add    $0x4,%esp
f0106ed7:	c1 e0 0c             	shl    $0xc,%eax
}
f0106eda:	c9                   	leave  
f0106edb:	c3                   	ret    

f0106edc <to_frame_info>:

static inline struct FrameInfo* to_frame_info(uint32 physical_address)
{
f0106edc:	55                   	push   %ebp
f0106edd:	89 e5                	mov    %esp,%ebp
f0106edf:	83 ec 08             	sub    $0x8,%esp
	if (PPN(physical_address) >= number_of_frames)
f0106ee2:	8b 45 08             	mov    0x8(%ebp),%eax
f0106ee5:	c1 e8 0c             	shr    $0xc,%eax
f0106ee8:	89 c2                	mov    %eax,%edx
f0106eea:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0106eef:	39 c2                	cmp    %eax,%edx
f0106ef1:	72 14                	jb     f0106f07 <to_frame_info+0x2b>
		panic("to_frame_info called with invalid pa");
f0106ef3:	83 ec 04             	sub    $0x4,%esp
f0106ef6:	68 08 51 13 f0       	push   $0xf0135108
f0106efb:	6a 55                	push   $0x55
f0106efd:	68 2d 51 13 f0       	push   $0xf013512d
f0106f02:	e8 9f 92 ff ff       	call   f01001a6 <_panic>
	return &frames_info[PPN(physical_address)];
f0106f07:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0106f0d:	8b 45 08             	mov    0x8(%ebp),%eax
f0106f10:	c1 e8 0c             	shr    $0xc,%eax
f0106f13:	89 c1                	mov    %eax,%ecx
f0106f15:	89 c8                	mov    %ecx,%eax
f0106f17:	01 c0                	add    %eax,%eax
f0106f19:	01 c8                	add    %ecx,%eax
f0106f1b:	c1 e0 03             	shl    $0x3,%eax
f0106f1e:	01 d0                	add    %edx,%eax
}
f0106f20:	c9                   	leave  
f0106f21:	c3                   	ret    

f0106f22 <create_shares_array>:
// [1] Create "shares" array:
//===========================
//Dynamically allocate the array of shared objects
//initialize the array of shared objects by 0's and empty = 1
void create_shares_array(uint32 numOfElements)
{
f0106f22:	55                   	push   %ebp
f0106f23:	89 e5                	mov    %esp,%ebp
f0106f25:	83 ec 18             	sub    $0x18,%esp
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f28:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0106f2f:	eb 5f                	jmp    f0106f90 <create_shares_array+0x6e>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
f0106f31:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f34:	89 d0                	mov    %edx,%eax
f0106f36:	01 c0                	add    %eax,%eax
f0106f38:	01 d0                	add    %edx,%eax
f0106f3a:	01 c0                	add    %eax,%eax
f0106f3c:	01 d0                	add    %edx,%eax
f0106f3e:	c1 e0 02             	shl    $0x2,%eax
f0106f41:	01 d0                	add    %edx,%eax
f0106f43:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106f4a:	01 d0                	add    %edx,%eax
f0106f4c:	c1 e0 04             	shl    $0x4,%eax
f0106f4f:	05 20 01 68 f0       	add    $0xf0680120,%eax
f0106f54:	83 ec 04             	sub    $0x4,%esp
f0106f57:	68 50 10 00 00       	push   $0x1050
f0106f5c:	6a 00                	push   $0x0
f0106f5e:	50                   	push   %eax
f0106f5f:	e8 c7 96 02 00       	call   f013062b <memset>
f0106f64:	83 c4 10             	add    $0x10,%esp
		shares[i].empty = 1;
f0106f67:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0106f6a:	89 d0                	mov    %edx,%eax
f0106f6c:	01 c0                	add    %eax,%eax
f0106f6e:	01 d0                	add    %edx,%eax
f0106f70:	01 c0                	add    %eax,%eax
f0106f72:	01 d0                	add    %edx,%eax
f0106f74:	c1 e0 02             	shl    $0x2,%eax
f0106f77:	01 d0                	add    %edx,%eax
f0106f79:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106f80:	01 d0                	add    %edx,%eax
f0106f82:	c1 e0 04             	shl    $0x4,%eax
f0106f85:	05 6d 01 68 f0       	add    $0xf068016d,%eax
f0106f8a:	c6 00 01             	movb   $0x1,(%eax)
	if (shares == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of shared objects.");
	}
#endif
	for (int i = 0; i < MAX_SHARES; ++i)
f0106f8d:	ff 45 f4             	incl   -0xc(%ebp)
f0106f90:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f0106f94:	7e 9b                	jle    f0106f31 <create_shares_array+0xf>
	{
		memset(&(shares[i]), 0, sizeof(struct Share));
		shares[i].empty = 1;
	}
}
f0106f96:	90                   	nop
f0106f97:	c9                   	leave  
f0106f98:	c3                   	ret    

f0106f99 <allocate_share_object>:
//	a) if succeed:
//		1. allocatedObject (pointer to struct Share) passed by reference
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
f0106f99:	55                   	push   %ebp
f0106f9a:	89 e5                	mov    %esp,%ebp
f0106f9c:	83 ec 18             	sub    $0x18,%esp
	int32 sharedObjectID = -1 ;
f0106f9f:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SHARES; ++i)
f0106fa6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0106fad:	eb 34                	jmp    f0106fe3 <allocate_share_object+0x4a>
	{
		if (shares[i].empty)
f0106faf:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0106fb2:	89 d0                	mov    %edx,%eax
f0106fb4:	01 c0                	add    %eax,%eax
f0106fb6:	01 d0                	add    %edx,%eax
f0106fb8:	01 c0                	add    %eax,%eax
f0106fba:	01 d0                	add    %edx,%eax
f0106fbc:	c1 e0 02             	shl    $0x2,%eax
f0106fbf:	01 d0                	add    %edx,%eax
f0106fc1:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0106fc8:	01 d0                	add    %edx,%eax
f0106fca:	c1 e0 04             	shl    $0x4,%eax
f0106fcd:	05 6d 01 68 f0       	add    $0xf068016d,%eax
f0106fd2:	8a 00                	mov    (%eax),%al
f0106fd4:	84 c0                	test   %al,%al
f0106fd6:	74 08                	je     f0106fe0 <allocate_share_object+0x47>
		{
			sharedObjectID = i;
f0106fd8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0106fdb:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f0106fde:	eb 09                	jmp    f0106fe9 <allocate_share_object+0x50>
//		2. sharedObjectID (its index in the array) as a return parameter
//	b) E_NO_SHARE if the the array of shares is full (i.e. reaches "MAX_SHARES")
int allocate_share_object(struct Share **allocatedObject)
{
	int32 sharedObjectID = -1 ;
	for (int i = 0; i < MAX_SHARES; ++i)
f0106fe0:	ff 45 f0             	incl   -0x10(%ebp)
f0106fe3:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0106fe7:	7e c6                	jle    f0106faf <allocate_share_object+0x16>
			sharedObjectID = i;
			break;
		}
	}

	if (sharedObjectID == -1)
f0106fe9:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f0106fed:	75 14                	jne    f0107003 <allocate_share_object+0x6a>
				MAX_SHARES *= 2;
			}
		}
#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f0106fef:	83 ec 04             	sub    $0x4,%esp
f0106ff2:	68 48 51 13 f0       	push   $0xf0135148
f0106ff7:	6a 54                	push   $0x54
f0106ff9:	68 98 51 13 f0       	push   $0xf0135198
f0106ffe:	e8 a3 91 ff ff       	call   f01001a6 <_panic>
			return E_NO_SHARE;
		}
#endif
	}

	*allocatedObject = &(shares[sharedObjectID]);
f0107003:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107006:	89 d0                	mov    %edx,%eax
f0107008:	01 c0                	add    %eax,%eax
f010700a:	01 d0                	add    %edx,%eax
f010700c:	01 c0                	add    %eax,%eax
f010700e:	01 d0                	add    %edx,%eax
f0107010:	c1 e0 02             	shl    $0x2,%eax
f0107013:	01 d0                	add    %edx,%eax
f0107015:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010701c:	01 d0                	add    %edx,%eax
f010701e:	c1 e0 04             	shl    $0x4,%eax
f0107021:	8d 90 20 01 68 f0    	lea    -0xf97fee0(%eax),%edx
f0107027:	8b 45 08             	mov    0x8(%ebp),%eax
f010702a:	89 10                	mov    %edx,(%eax)
	shares[sharedObjectID].empty = 0;
f010702c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010702f:	89 d0                	mov    %edx,%eax
f0107031:	01 c0                	add    %eax,%eax
f0107033:	01 d0                	add    %edx,%eax
f0107035:	01 c0                	add    %eax,%eax
f0107037:	01 d0                	add    %edx,%eax
f0107039:	c1 e0 02             	shl    $0x2,%eax
f010703c:	01 d0                	add    %edx,%eax
f010703e:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107045:	01 d0                	add    %edx,%eax
f0107047:	c1 e0 04             	shl    $0x4,%eax
f010704a:	05 6d 01 68 f0       	add    $0xf068016d,%eax
f010704f:	c6 00 00             	movb   $0x0,(%eax)
		{
			panic("Kernel runs out of memory\nCan't create the framesStorage.");
		}
	}
#endif
	memset(shares[sharedObjectID].framesStorage, 0, PAGE_SIZE);
f0107052:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107055:	89 d0                	mov    %edx,%eax
f0107057:	01 c0                	add    %eax,%eax
f0107059:	01 d0                	add    %edx,%eax
f010705b:	01 c0                	add    %eax,%eax
f010705d:	01 d0                	add    %edx,%eax
f010705f:	c1 e0 02             	shl    $0x2,%eax
f0107062:	01 d0                	add    %edx,%eax
f0107064:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010706b:	01 d0                	add    %edx,%eax
f010706d:	c1 e0 04             	shl    $0x4,%eax
f0107070:	83 c0 50             	add    $0x50,%eax
f0107073:	05 20 01 68 f0       	add    $0xf0680120,%eax
f0107078:	83 ec 04             	sub    $0x4,%esp
f010707b:	68 00 10 00 00       	push   $0x1000
f0107080:	6a 00                	push   $0x0
f0107082:	50                   	push   %eax
f0107083:	e8 a3 95 02 00       	call   f013062b <memset>
f0107088:	83 c4 10             	add    $0x10,%esp

	return sharedObjectID;
f010708b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010708e:	c9                   	leave  
f010708f:	c3                   	ret    

f0107090 <get_share_object_ID>:
//Search for the given shared object in the "shares" array
//Return:
//	a) if found: SharedObjectID (index of the shared object in the array)
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
f0107090:	55                   	push   %ebp
f0107091:	89 e5                	mov    %esp,%ebp
f0107093:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107096:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	for(; i< MAX_SHARES; ++i)
f010709d:	e9 95 00 00 00       	jmp    f0107137 <get_share_object_ID+0xa7>
	{
		if (shares[i].empty)
f01070a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070a5:	89 d0                	mov    %edx,%eax
f01070a7:	01 c0                	add    %eax,%eax
f01070a9:	01 d0                	add    %edx,%eax
f01070ab:	01 c0                	add    %eax,%eax
f01070ad:	01 d0                	add    %edx,%eax
f01070af:	c1 e0 02             	shl    $0x2,%eax
f01070b2:	01 d0                	add    %edx,%eax
f01070b4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01070bb:	01 d0                	add    %edx,%eax
f01070bd:	c1 e0 04             	shl    $0x4,%eax
f01070c0:	05 6d 01 68 f0       	add    $0xf068016d,%eax
f01070c5:	8a 00                	mov    (%eax),%al
f01070c7:	84 c0                	test   %al,%al
f01070c9:	75 68                	jne    f0107133 <get_share_object_ID+0xa3>
			continue;

		//cprintf("shared var name = %s compared with %s\n", name, shares[i].name);
		if(shares[i].ownerID == ownerID && strcmp(name, shares[i].name)==0)
f01070cb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070ce:	89 d0                	mov    %edx,%eax
f01070d0:	01 c0                	add    %eax,%eax
f01070d2:	01 d0                	add    %edx,%eax
f01070d4:	01 c0                	add    %eax,%eax
f01070d6:	01 d0                	add    %edx,%eax
f01070d8:	c1 e0 02             	shl    $0x2,%eax
f01070db:	01 d0                	add    %edx,%eax
f01070dd:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01070e4:	01 d0                	add    %edx,%eax
f01070e6:	c1 e0 04             	shl    $0x4,%eax
f01070e9:	05 20 01 68 f0       	add    $0xf0680120,%eax
f01070ee:	8b 00                	mov    (%eax),%eax
f01070f0:	3b 45 08             	cmp    0x8(%ebp),%eax
f01070f3:	75 3f                	jne    f0107134 <get_share_object_ID+0xa4>
f01070f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01070f8:	89 d0                	mov    %edx,%eax
f01070fa:	01 c0                	add    %eax,%eax
f01070fc:	01 d0                	add    %edx,%eax
f01070fe:	01 c0                	add    %eax,%eax
f0107100:	01 d0                	add    %edx,%eax
f0107102:	c1 e0 02             	shl    $0x2,%eax
f0107105:	01 d0                	add    %edx,%eax
f0107107:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f010710e:	01 d0                	add    %edx,%eax
f0107110:	c1 e0 04             	shl    $0x4,%eax
f0107113:	05 20 01 68 f0       	add    $0xf0680120,%eax
f0107118:	83 c0 04             	add    $0x4,%eax
f010711b:	83 ec 08             	sub    $0x8,%esp
f010711e:	50                   	push   %eax
f010711f:	ff 75 0c             	pushl  0xc(%ebp)
f0107122:	e8 22 94 02 00       	call   f0130549 <strcmp>
f0107127:	83 c4 10             	add    $0x10,%esp
f010712a:	85 c0                	test   %eax,%eax
f010712c:	75 06                	jne    f0107134 <get_share_object_ID+0xa4>
		{
			//cprintf("%s found\n", name);
			return i;
f010712e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107131:	eb 13                	jmp    f0107146 <get_share_object_ID+0xb6>
	int i=0;

	for(; i< MAX_SHARES; ++i)
	{
		if (shares[i].empty)
			continue;
f0107133:	90                   	nop
//	b) else: E_SHARED_MEM_NOT_EXISTS
int get_share_object_ID(int32 ownerID, char* name)
{
	int i=0;

	for(; i< MAX_SHARES; ++i)
f0107134:	ff 45 f4             	incl   -0xc(%ebp)
f0107137:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010713b:	0f 8e 61 ff ff ff    	jle    f01070a2 <get_share_object_ID+0x12>
		{
			//cprintf("%s found\n", name);
			return i;
		}
	}
	return E_SHARED_MEM_NOT_EXISTS;
f0107141:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
}
f0107146:	c9                   	leave  
f0107147:	c3                   	ret    

f0107148 <free_share_object>:
//delete the given sharedObjectID from the "shares" array
//Return:
//	a) 0 if succeed
//	b) E_SHARED_MEM_NOT_EXISTS if the shared object is not exists
int free_share_object(uint32 sharedObjectID)
{
f0107148:	55                   	push   %ebp
f0107149:	89 e5                	mov    %esp,%ebp
f010714b:	83 ec 08             	sub    $0x8,%esp
	if (sharedObjectID >= MAX_SHARES)
f010714e:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f0107152:	76 0a                	jbe    f010715e <free_share_object+0x16>
		return E_SHARED_MEM_NOT_EXISTS;
f0107154:	b8 f0 ff ff ff       	mov    $0xfffffff0,%eax
f0107159:	e9 93 00 00 00       	jmp    f01071f1 <free_share_object+0xa9>

	//panic("deleteSharedObject: not implemented yet");
	clear_frames_storage(shares[sharedObjectID].framesStorage);
f010715e:	8b 55 08             	mov    0x8(%ebp),%edx
f0107161:	89 d0                	mov    %edx,%eax
f0107163:	01 c0                	add    %eax,%eax
f0107165:	01 d0                	add    %edx,%eax
f0107167:	01 c0                	add    %eax,%eax
f0107169:	01 d0                	add    %edx,%eax
f010716b:	c1 e0 02             	shl    $0x2,%eax
f010716e:	01 d0                	add    %edx,%eax
f0107170:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0107177:	01 d0                	add    %edx,%eax
f0107179:	c1 e0 04             	shl    $0x4,%eax
f010717c:	83 c0 50             	add    $0x50,%eax
f010717f:	05 20 01 68 f0       	add    $0xf0680120,%eax
f0107184:	83 ec 0c             	sub    $0xc,%esp
f0107187:	50                   	push   %eax
f0107188:	e8 3e 01 00 00       	call   f01072cb <clear_frames_storage>
f010718d:	83 c4 10             	add    $0x10,%esp
#if USE_KHEAP
	kfree(shares[sharedObjectID].framesStorage);
#endif
	memset(&(shares[sharedObjectID]), 0, sizeof(struct Share));
f0107190:	8b 55 08             	mov    0x8(%ebp),%edx
f0107193:	89 d0                	mov    %edx,%eax
f0107195:	01 c0                	add    %eax,%eax
f0107197:	01 d0                	add    %edx,%eax
f0107199:	01 c0                	add    %eax,%eax
f010719b:	01 d0                	add    %edx,%eax
f010719d:	c1 e0 02             	shl    $0x2,%eax
f01071a0:	01 d0                	add    %edx,%eax
f01071a2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01071a9:	01 d0                	add    %edx,%eax
f01071ab:	c1 e0 04             	shl    $0x4,%eax
f01071ae:	05 20 01 68 f0       	add    $0xf0680120,%eax
f01071b3:	83 ec 04             	sub    $0x4,%esp
f01071b6:	68 50 10 00 00       	push   $0x1050
f01071bb:	6a 00                	push   $0x0
f01071bd:	50                   	push   %eax
f01071be:	e8 68 94 02 00       	call   f013062b <memset>
f01071c3:	83 c4 10             	add    $0x10,%esp
	shares[sharedObjectID].empty = 1;
f01071c6:	8b 55 08             	mov    0x8(%ebp),%edx
f01071c9:	89 d0                	mov    %edx,%eax
f01071cb:	01 c0                	add    %eax,%eax
f01071cd:	01 d0                	add    %edx,%eax
f01071cf:	01 c0                	add    %eax,%eax
f01071d1:	01 d0                	add    %edx,%eax
f01071d3:	c1 e0 02             	shl    $0x2,%eax
f01071d6:	01 d0                	add    %edx,%eax
f01071d8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01071df:	01 d0                	add    %edx,%eax
f01071e1:	c1 e0 04             	shl    $0x4,%eax
f01071e4:	05 6d 01 68 f0       	add    $0xf068016d,%eax
f01071e9:	c6 00 01             	movb   $0x1,(%eax)

	return 0;
f01071ec:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01071f1:	c9                   	leave  
f01071f2:	c3                   	ret    

f01071f3 <create_frames_storage>:
//===========================
// [5] Create frames_storage:
//===========================
// if KHEAP = 1: Create the frames_storage by allocating a PAGE for its directory
inline uint32* create_frames_storage()
{
f01071f3:	55                   	push   %ebp
f01071f4:	89 e5                	mov    %esp,%ebp
f01071f6:	83 ec 18             	sub    $0x18,%esp
	uint32* frames_storage = kmalloc(PAGE_SIZE);
f01071f9:	83 ec 0c             	sub    $0xc,%esp
f01071fc:	68 00 10 00 00       	push   $0x1000
f0107201:	e8 de 01 00 00       	call   f01073e4 <kmalloc>
f0107206:	83 c4 10             	add    $0x10,%esp
f0107209:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(frames_storage == NULL)
f010720c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0107210:	75 17                	jne    f0107229 <create_frames_storage+0x36>
	{
		panic("NOT ENOUGH KERNEL HEAP SPACE");
f0107212:	83 ec 04             	sub    $0x4,%esp
f0107215:	68 b9 51 13 f0       	push   $0xf01351b9
f010721a:	68 a9 00 00 00       	push   $0xa9
f010721f:	68 98 51 13 f0       	push   $0xf0135198
f0107224:	e8 7d 8f ff ff       	call   f01001a6 <_panic>
	}
	return frames_storage;
f0107229:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010722c:	c9                   	leave  
f010722d:	c3                   	ret    

f010722e <add_frame_to_storage>:
//===========================
// [6] Add frame to storage:
//===========================
// Add a frame info to the storage of frames at the given index
inline void add_frame_to_storage(uint32* frames_storage, struct FrameInfo* ptr_frame_info, uint32 index)
{
f010722e:	55                   	push   %ebp
f010722f:	89 e5                	mov    %esp,%ebp
f0107231:	53                   	push   %ebx
f0107232:	83 ec 14             	sub    $0x14,%esp
	uint32 va = index * PAGE_SIZE ;
f0107235:	8b 45 10             	mov    0x10(%ebp),%eax
f0107238:	c1 e0 0c             	shl    $0xc,%eax
f010723b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	uint32 *ptr_page_table;
	int r = get_page_table(frames_storage,  va, &ptr_page_table);
f010723e:	83 ec 04             	sub    $0x4,%esp
f0107241:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107244:	50                   	push   %eax
f0107245:	ff 75 f4             	pushl  -0xc(%ebp)
f0107248:	ff 75 08             	pushl  0x8(%ebp)
f010724b:	e8 21 f7 ff ff       	call   f0106971 <get_page_table>
f0107250:	83 c4 10             	add    $0x10,%esp
f0107253:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if(r == TABLE_NOT_EXIST)
f0107256:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f010725a:	75 15                	jne    f0107271 <add_frame_to_storage+0x43>
		{
			ptr_page_table = create_page_table(frames_storage, (uint32)va);
		}
#else
		{
			__static_cpt(frames_storage, (uint32)va, &ptr_page_table);
f010725c:	83 ec 04             	sub    $0x4,%esp
f010725f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107262:	50                   	push   %eax
f0107263:	ff 75 f4             	pushl  -0xc(%ebp)
f0107266:	ff 75 08             	pushl  0x8(%ebp)
f0107269:	e8 29 f8 ff ff       	call   f0106a97 <__static_cpt>
f010726e:	83 c4 10             	add    $0x10,%esp

		}
#endif
	}
	ptr_page_table[PTX(va)] = CONSTRUCT_ENTRY(to_physical_address(ptr_frame_info), 0 | PERM_PRESENT);
f0107271:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107274:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107277:	c1 ea 0c             	shr    $0xc,%edx
f010727a:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0107280:	c1 e2 02             	shl    $0x2,%edx
f0107283:	8d 1c 10             	lea    (%eax,%edx,1),%ebx
f0107286:	83 ec 0c             	sub    $0xc,%esp
f0107289:	ff 75 0c             	pushl  0xc(%ebp)
f010728c:	e8 38 fc ff ff       	call   f0106ec9 <to_physical_address>
f0107291:	83 c4 10             	add    $0x10,%esp
f0107294:	83 c8 01             	or     $0x1,%eax
f0107297:	89 03                	mov    %eax,(%ebx)
}
f0107299:	90                   	nop
f010729a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010729d:	c9                   	leave  
f010729e:	c3                   	ret    

f010729f <get_frame_from_storage>:
//===========================
// [7] Get frame from storage:
//===========================
// Get a frame info from the storage of frames at the given index
inline struct FrameInfo* get_frame_from_storage(uint32* frames_storage, uint32 index)
{
f010729f:	55                   	push   %ebp
f01072a0:	89 e5                	mov    %esp,%ebp
f01072a2:	83 ec 18             	sub    $0x18,%esp
	struct FrameInfo* ptr_frame_info;
	uint32 *ptr_page_table ;
	uint32 va = index * PAGE_SIZE ;
f01072a5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01072a8:	c1 e0 0c             	shl    $0xc,%eax
f01072ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ptr_frame_info = get_frame_info(frames_storage,  va, &ptr_page_table);
f01072ae:	83 ec 04             	sub    $0x4,%esp
f01072b1:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01072b4:	50                   	push   %eax
f01072b5:	ff 75 f4             	pushl  -0xc(%ebp)
f01072b8:	ff 75 08             	pushl  0x8(%ebp)
f01072bb:	e8 49 f9 ff ff       	call   f0106c09 <get_frame_info>
f01072c0:	83 c4 10             	add    $0x10,%esp
f01072c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
	return ptr_frame_info;
f01072c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f01072c9:	c9                   	leave  
f01072ca:	c3                   	ret    

f01072cb <clear_frames_storage>:

//===========================
// [8] Clear the frames_storage:
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
f01072cb:	55                   	push   %ebp
f01072cc:	89 e5                	mov    %esp,%ebp
f01072ce:	83 ec 18             	sub    $0x18,%esp
	int fourMega = 1024 * PAGE_SIZE ;
f01072d1:	c7 45 f0 00 00 40 00 	movl   $0x400000,-0x10(%ebp)
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f01072d8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01072df:	eb 5b                	jmp    f010733c <clear_frames_storage+0x71>
	{
		if (frames_storage[i] != 0)
f01072e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072e4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01072eb:	8b 45 08             	mov    0x8(%ebp),%eax
f01072ee:	01 d0                	add    %edx,%eax
f01072f0:	8b 00                	mov    (%eax),%eax
f01072f2:	85 c0                	test   %eax,%eax
f01072f4:	74 43                	je     f0107339 <clear_frames_storage+0x6e>
			{
				kfree((void*)kheap_virtual_address(EXTRACT_ADDRESS(frames_storage[i])));
			}
#else
			{
				free_frame(to_frame_info(EXTRACT_ADDRESS(frames_storage[i])));
f01072f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01072f9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0107300:	8b 45 08             	mov    0x8(%ebp),%eax
f0107303:	01 d0                	add    %edx,%eax
f0107305:	8b 00                	mov    (%eax),%eax
f0107307:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010730c:	83 ec 0c             	sub    $0xc,%esp
f010730f:	50                   	push   %eax
f0107310:	e8 c7 fb ff ff       	call   f0106edc <to_frame_info>
f0107315:	83 c4 10             	add    $0x10,%esp
f0107318:	83 ec 0c             	sub    $0xc,%esp
f010731b:	50                   	push   %eax
f010731c:	e8 a6 f5 ff ff       	call   f01068c7 <free_frame>
f0107321:	83 c4 10             	add    $0x10,%esp
			}
#endif
			frames_storage[i] = 0;
f0107324:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107327:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010732e:	8b 45 08             	mov    0x8(%ebp),%eax
f0107331:	01 d0                	add    %edx,%eax
f0107333:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
//===========================
inline void clear_frames_storage(uint32* frames_storage)
{
	int fourMega = 1024 * PAGE_SIZE ;
	int i ;
	for (i = 0 ; i < 1024 ; i++)
f0107339:	ff 45 f4             	incl   -0xc(%ebp)
f010733c:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0107343:	7e 9c                	jle    f01072e1 <clear_frames_storage+0x16>
			}
#endif
			frames_storage[i] = 0;
		}
	}
}
f0107345:	90                   	nop
f0107346:	c9                   	leave  
f0107347:	c3                   	ret    

f0107348 <createSharedObject>:

//=========================
// [1] Create Share Object:
//=========================
int createSharedObject(int32 ownerID, char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f0107348:	55                   	push   %ebp
f0107349:	89 e5                	mov    %esp,%ebp
f010734b:	83 ec 18             	sub    $0x18,%esp
f010734e:	8b 45 14             	mov    0x14(%ebp),%eax
f0107351:	88 45 f4             	mov    %al,-0xc(%ebp)
	// your code is here, remove the panic and write your code
	panic("createSharedObject() is not implemented yet...!!");
f0107354:	83 ec 04             	sub    $0x4,%esp
f0107357:	68 d8 51 13 f0       	push   $0xf01351d8
f010735c:	68 fa 00 00 00       	push   $0xfa
f0107361:	68 98 51 13 f0       	push   $0xf0135198
f0107366:	e8 3b 8e ff ff       	call   f01001a6 <_panic>

f010736b <getSizeOfSharedObject>:

//==============================
// [2] Get Size of Share Object:
//==============================
int getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010736b:	55                   	push   %ebp
f010736c:	89 e5                	mov    %esp,%ebp
f010736e:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSizeOfSharedObject() is not implemented yet...!!");
f0107371:	83 ec 04             	sub    $0x4,%esp
f0107374:	68 0c 52 13 f0       	push   $0xf013520c
f0107379:	68 0c 01 00 00       	push   $0x10c
f010737e:	68 98 51 13 f0       	push   $0xf0135198
f0107383:	e8 1e 8e ff ff       	call   f01001a6 <_panic>

f0107388 <getSharedObject>:

//======================
// [3] Get Share Object:
//======================
int getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f0107388:	55                   	push   %ebp
f0107389:	89 e5                	mov    %esp,%ebp
f010738b:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("getSharedObject() is not implemented yet...!!");
f010738e:	83 ec 04             	sub    $0x4,%esp
f0107391:	68 40 52 13 f0       	push   $0xf0135240
f0107396:	68 1b 01 00 00       	push   $0x11b
f010739b:	68 98 51 13 f0       	push   $0xf0135198
f01073a0:	e8 01 8e ff ff       	call   f01001a6 <_panic>

f01073a5 <freeSharedObject>:

//===================
// Free Share Object:
//===================
int freeSharedObject(int32 sharedObjectID, void *startVA)
{
f01073a5:	55                   	push   %ebp
f01073a6:	89 e5                	mov    %esp,%ebp
f01073a8:	83 ec 18             	sub    $0x18,%esp
	struct Env* myenv = curenv; //The calling environment
f01073ab:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01073b0:	89 45 f4             	mov    %eax,-0xc(%ebp)

	// your code is here, remove the panic and write your code
	panic("freeSharedObject() is not implemented yet...!!");
f01073b3:	83 ec 04             	sub    $0x4,%esp
f01073b6:	68 70 52 13 f0       	push   $0xf0135270
f01073bb:	68 33 01 00 00       	push   $0x133
f01073c0:	68 98 51 13 f0       	push   $0xf0135198
f01073c5:	e8 dc 8d ff ff       	call   f01001a6 <_panic>

f01073ca <initialize_dyn_block_system>:
//NOTE: All kernel heap allocations are multiples of PAGE_SIZE (4KB)//
//==================================================================//
//==================================================================//

void initialize_dyn_block_system()
{
f01073ca:	55                   	push   %ebp
f01073cb:	89 e5                	mov    %esp,%ebp
f01073cd:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] initialize_dyn_block_system
	// your code is here, remove the panic and write your code
	kpanic_into_prompt("initialize_dyn_block_system() is not implemented yet...!!");
f01073d0:	83 ec 04             	sub    $0x4,%esp
f01073d3:	68 a0 52 13 f0       	push   $0xf01352a0
f01073d8:	6a 11                	push   $0x11
f01073da:	68 da 52 13 f0       	push   $0xf01352da
f01073df:	e8 a7 8e ff ff       	call   f010028b <_panic_into_prompt>

f01073e4 <kmalloc>:
	//[3] Initialize AvailableMemBlocksList by filling it with the MemBlockNodes
	//[4] Insert a new MemBlock with the remaining heap size into the FreeMemBlocksList
}

void* kmalloc(unsigned int size)
{
f01073e4:	55                   	push   %ebp
f01073e5:	89 e5                	mov    %esp,%ebp
f01073e7:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kmalloc
	// your code is here, remove the panic and write your code
	kpanic_into_prompt("kmalloc() is not implemented yet...!!");
f01073ea:	83 ec 04             	sub    $0x4,%esp
f01073ed:	68 ec 52 13 f0       	push   $0xf01352ec
f01073f2:	6a 26                	push   $0x26
f01073f4:	68 da 52 13 f0       	push   $0xf01352da
f01073f9:	e8 8d 8e ff ff       	call   f010028b <_panic_into_prompt>

f01073fe <kfree>:

	//change this "return" according to your answer
}

void kfree(void* virtual_address)
{
f01073fe:	55                   	push   %ebp
f01073ff:	89 e5                	mov    %esp,%ebp
f0107401:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kfree
	// Write your code here, remove the panic and write your code
	panic("kfree() is not implemented yet...!!");
f0107404:	83 ec 04             	sub    $0x4,%esp
f0107407:	68 14 53 13 f0       	push   $0xf0135314
f010740c:	6a 33                	push   $0x33
f010740e:	68 da 52 13 f0       	push   $0xf01352da
f0107413:	e8 8e 8d ff ff       	call   f01001a6 <_panic>

f0107418 <kheap_virtual_address>:

}

unsigned int kheap_virtual_address(unsigned int physical_address)
{
f0107418:	55                   	push   %ebp
f0107419:	89 e5                	mov    %esp,%ebp
f010741b:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_virtual_address
	// Write your code here, remove the panic and write your code
	panic("kheap_virtual_address() is not implemented yet...!!");
f010741e:	83 ec 04             	sub    $0x4,%esp
f0107421:	68 38 53 13 f0       	push   $0xf0135338
f0107426:	6a 3b                	push   $0x3b
f0107428:	68 da 52 13 f0       	push   $0xf01352da
f010742d:	e8 74 8d ff ff       	call   f01001a6 <_panic>

f0107432 <kheap_physical_address>:
	//refer to the project presentation and documentation for details
	//EFFICIENT IMPLEMENTATION ~O(1) IS REQUIRED ==================
}

unsigned int kheap_physical_address(unsigned int virtual_address)
{
f0107432:	55                   	push   %ebp
f0107433:	89 e5                	mov    %esp,%ebp
f0107435:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [KERNEL HEAP] kheap_physical_address
	// Write your code here, remove the panic and write your code
	panic("kheap_physical_address() is not implemented yet...!!");
f0107438:	83 ec 04             	sub    $0x4,%esp
f010743b:	68 6c 53 13 f0       	push   $0xf013536c
f0107440:	6a 46                	push   $0x46
f0107442:	68 da 52 13 f0       	push   $0xf01352da
f0107447:	e8 5a 8d ff ff       	call   f01001a6 <_panic>

f010744c <kfreeall>:
	//refer to the project presentation and documentation for details
}


void kfreeall()
{
f010744c:	55                   	push   %ebp
f010744d:	89 e5                	mov    %esp,%ebp
f010744f:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107452:	83 ec 04             	sub    $0x4,%esp
f0107455:	68 a1 53 13 f0       	push   $0xf01353a1
f010745a:	6a 4f                	push   $0x4f
f010745c:	68 da 52 13 f0       	push   $0xf01352da
f0107461:	e8 40 8d ff ff       	call   f01001a6 <_panic>

f0107466 <kshrink>:

}

void kshrink(uint32 newSize)
{
f0107466:	55                   	push   %ebp
f0107467:	89 e5                	mov    %esp,%ebp
f0107469:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f010746c:	83 ec 04             	sub    $0x4,%esp
f010746f:	68 a1 53 13 f0       	push   $0xf01353a1
f0107474:	6a 55                	push   $0x55
f0107476:	68 da 52 13 f0       	push   $0xf01352da
f010747b:	e8 26 8d ff ff       	call   f01001a6 <_panic>

f0107480 <kexpand>:
}

void kexpand(uint32 newSize)
{
f0107480:	55                   	push   %ebp
f0107481:	89 e5                	mov    %esp,%ebp
f0107483:	83 ec 08             	sub    $0x8,%esp
	panic("Not implemented!");
f0107486:	83 ec 04             	sub    $0x4,%esp
f0107489:	68 a1 53 13 f0       	push   $0xf01353a1
f010748e:	6a 5a                	push   $0x5a
f0107490:	68 da 52 13 f0       	push   $0xf01352da
f0107495:	e8 0c 8d ff ff       	call   f01001a6 <_panic>

f010749a <krealloc>:

//	A call with virtual_address = null is equivalent to kmalloc().
//	A call with new_size = zero is equivalent to kfree().

void *krealloc(void *virtual_address, uint32 new_size)
{
f010749a:	55                   	push   %ebp
f010749b:	89 e5                	mov    %esp,%ebp
f010749d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [KERNEL HEAP] krealloc
	// Write your code here, remove the panic and write your code
	panic("krealloc() is not implemented yet...!!");
f01074a0:	83 ec 04             	sub    $0x4,%esp
f01074a3:	68 b4 53 13 f0       	push   $0xf01353b4
f01074a8:	6a 71                	push   $0x71
f01074aa:	68 da 52 13 f0       	push   $0xf01352da
f01074af:	e8 f2 8c ff ff       	call   f01001a6 <_panic>

f01074b4 <pt_set_page_permissions>:
 */
#include "memory_manager.h"

/*[2.1] PAGE TABLE ENTRIES MANIPULATION */
inline void pt_set_page_permissions(uint32* page_directory, uint32 virtual_address, uint32 permissions_to_set, uint32 permissions_to_clear)
{
f01074b4:	55                   	push   %ebp
f01074b5:	89 e5                	mov    %esp,%ebp
f01074b7:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_set_page_permissions
	// Write your code here, remove the panic and write your code

	uint32 *ptr_page_table = NULL;
f01074ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	get_page_table(page_directory,virtual_address,&ptr_page_table);
f01074c1:	83 ec 04             	sub    $0x4,%esp
f01074c4:	8d 45 f4             	lea    -0xc(%ebp),%eax
f01074c7:	50                   	push   %eax
f01074c8:	ff 75 0c             	pushl  0xc(%ebp)
f01074cb:	ff 75 08             	pushl  0x8(%ebp)
f01074ce:	e8 9e f4 ff ff       	call   f0106971 <get_page_table>
f01074d3:	83 c4 10             	add    $0x10,%esp

	if(ptr_page_table != NULL)
f01074d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074d9:	85 c0                	test   %eax,%eax
f01074db:	74 64                	je     f0107541 <pt_set_page_permissions+0x8d>
	{
			ptr_page_table[PTX(virtual_address)] |= (permissions_to_set);
f01074dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074e0:	8b 55 0c             	mov    0xc(%ebp),%edx
f01074e3:	c1 ea 0c             	shr    $0xc,%edx
f01074e6:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01074ec:	c1 e2 02             	shl    $0x2,%edx
f01074ef:	01 c2                	add    %eax,%edx
f01074f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01074f4:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f01074f7:	c1 e9 0c             	shr    $0xc,%ecx
f01074fa:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f0107500:	c1 e1 02             	shl    $0x2,%ecx
f0107503:	01 c8                	add    %ecx,%eax
f0107505:	8b 00                	mov    (%eax),%eax
f0107507:	0b 45 10             	or     0x10(%ebp),%eax
f010750a:	89 02                	mov    %eax,(%edx)
			ptr_page_table[PTX(virtual_address)] &= (~permissions_to_clear);
f010750c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010750f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107512:	c1 ea 0c             	shr    $0xc,%edx
f0107515:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010751b:	c1 e2 02             	shl    $0x2,%edx
f010751e:	01 d0                	add    %edx,%eax
f0107520:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107523:	8b 4d 0c             	mov    0xc(%ebp),%ecx
f0107526:	c1 e9 0c             	shr    $0xc,%ecx
f0107529:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f010752f:	c1 e1 02             	shl    $0x2,%ecx
f0107532:	01 ca                	add    %ecx,%edx
f0107534:	8b 12                	mov    (%edx),%edx
f0107536:	8b 4d 14             	mov    0x14(%ebp),%ecx
f0107539:	f7 d1                	not    %ecx
f010753b:	21 ca                	and    %ecx,%edx
f010753d:	89 10                	mov    %edx,(%eax)
f010753f:	eb 14                	jmp    f0107555 <pt_set_page_permissions+0xa1>
	}
	else
	{
		panic("Invalid va");
f0107541:	83 ec 04             	sub    $0x4,%esp
f0107544:	68 db 53 13 f0       	push   $0xf01353db
f0107549:	6a 19                	push   $0x19
f010754b:	68 e6 53 13 f0       	push   $0xf01353e6
f0107550:	e8 51 8c ff ff       	call   f01001a6 <_panic>
	}

	tlb_invalidate((void *)NULL, (void *)virtual_address);
f0107555:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107558:	83 ec 08             	sub    $0x8,%esp
f010755b:	50                   	push   %eax
f010755c:	6a 00                	push   $0x0
f010755e:	e8 6b ee ff ff       	call   f01063ce <tlb_invalidate>
f0107563:	83 c4 10             	add    $0x10,%esp
}
f0107566:	90                   	nop
f0107567:	c9                   	leave  
f0107568:	c3                   	ret    

f0107569 <pt_get_page_permissions>:

inline int pt_get_page_permissions(uint32* page_directory, uint32 virtual_address )
{
f0107569:	55                   	push   %ebp
f010756a:	89 e5                	mov    %esp,%ebp
f010756c:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_get_page_permissions
	// Write your code here, remove the panic and write your code
	//panic("pt_get_page_permissions() is not implemented yet...!!");
	uint32 *ptr_page_table = NULL;
f010756f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	get_page_table(ptr_page_directory, virtual_address, &ptr_page_table);
f0107576:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f010757b:	83 ec 04             	sub    $0x4,%esp
f010757e:	8d 55 ec             	lea    -0x14(%ebp),%edx
f0107581:	52                   	push   %edx
f0107582:	ff 75 0c             	pushl  0xc(%ebp)
f0107585:	50                   	push   %eax
f0107586:	e8 e6 f3 ff ff       	call   f0106971 <get_page_table>
f010758b:	83 c4 10             	add    $0x10,%esp

	if ( ptr_page_table ==  NULL) // va has no page table
f010758e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107591:	85 c0                	test   %eax,%eax
f0107593:	75 07                	jne    f010759c <pt_get_page_permissions+0x33>
	{
		return -1;
f0107595:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010759a:	eb 29                	jmp    f01075c5 <pt_get_page_permissions+0x5c>
	}
	else
	{
		uint32 table_entry = ptr_page_table[PTX(virtual_address)];
f010759c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010759f:	8b 55 0c             	mov    0xc(%ebp),%edx
f01075a2:	c1 ea 0c             	shr    $0xc,%edx
f01075a5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01075ab:	c1 e2 02             	shl    $0x2,%edx
f01075ae:	01 d0                	add    %edx,%eax
f01075b0:	8b 00                	mov    (%eax),%eax
f01075b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		//cprintf("%x \n", ptr_page_table[PTX(virtual_address)]);
		uint32 permissions = table_entry << 20;
f01075b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075b8:	c1 e0 14             	shl    $0x14,%eax
f01075bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		permissions = permissions >> 20;
f01075be:	c1 6d f0 14          	shrl   $0x14,-0x10(%ebp)
		return permissions;
f01075c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
	}
}
f01075c5:	c9                   	leave  
f01075c6:	c3                   	ret    

f01075c7 <pt_clear_page_table_entry>:

inline void pt_clear_page_table_entry(uint32* page_directory, uint32 virtual_address)
{
f01075c7:	55                   	push   %ebp
f01075c8:	89 e5                	mov    %esp,%ebp
f01075ca:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] pt_clear_page_table_entry
	// Write your code here, remove the panic and write your code
	//panic("pt_clear_page_table_entry() is not implemented yet...!!");
	uint32 *ptr_page_table = NULL;
f01075cd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	get_page_table(ptr_page_directory, virtual_address, &ptr_page_table);
f01075d4:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01075d9:	83 ec 04             	sub    $0x4,%esp
f01075dc:	8d 55 f4             	lea    -0xc(%ebp),%edx
f01075df:	52                   	push   %edx
f01075e0:	ff 75 0c             	pushl  0xc(%ebp)
f01075e3:	50                   	push   %eax
f01075e4:	e8 88 f3 ff ff       	call   f0106971 <get_page_table>
f01075e9:	83 c4 10             	add    $0x10,%esp

	if ( ptr_page_table ==  NULL) // va has no page table
f01075ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01075ef:	85 c0                	test   %eax,%eax
f01075f1:	75 14                	jne    f0107607 <pt_clear_page_table_entry+0x40>
	{
		panic("Invalid va");
f01075f3:	83 ec 04             	sub    $0x4,%esp
f01075f6:	68 db 53 13 f0       	push   $0xf01353db
f01075fb:	6a 41                	push   $0x41
f01075fd:	68 e6 53 13 f0       	push   $0xf01353e6
f0107602:	e8 9f 8b ff ff       	call   f01001a6 <_panic>
	}
	else
	{
		unmap_frame(ptr_page_directory, virtual_address); // set the entry of the given page inside the page table to NULL
f0107607:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f010760c:	83 ec 08             	sub    $0x8,%esp
f010760f:	ff 75 0c             	pushl  0xc(%ebp)
f0107612:	50                   	push   %eax
f0107613:	e8 61 f6 ff ff       	call   f0106c79 <unmap_frame>
f0107618:	83 c4 10             	add    $0x10,%esp

		tlb_invalidate((void * )ptr_page_directory, (void * ) virtual_address);// Delete page table entry from cache
f010761b:	8b 55 0c             	mov    0xc(%ebp),%edx
f010761e:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0107623:	83 ec 08             	sub    $0x8,%esp
f0107626:	52                   	push   %edx
f0107627:	50                   	push   %eax
f0107628:	e8 a1 ed ff ff       	call   f01063ce <tlb_invalidate>
f010762d:	83 c4 10             	add    $0x10,%esp
	}

}
f0107630:	90                   	nop
f0107631:	c9                   	leave  
f0107632:	c3                   	ret    

f0107633 <virtual_to_physical>:

/***********************************************************************************************/

/*[2.2] ADDRESS CONVERTION*/
inline int virtual_to_physical(uint32* page_directory, uint32 virtual_address)
{
f0107633:	55                   	push   %ebp
f0107634:	89 e5                	mov    %esp,%ebp
f0107636:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS2] [PAGING HELPERS] virtual_to_physical
	// Write your code here, remove the panic and write your code
	//panic("virtual_to_physical() is not implemented yet...!!");
	uint32 *ptr_page_table = NULL;
f0107639:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	get_page_table(page_directory,virtual_address,&ptr_page_table);
f0107640:	83 ec 04             	sub    $0x4,%esp
f0107643:	8d 45 ec             	lea    -0x14(%ebp),%eax
f0107646:	50                   	push   %eax
f0107647:	ff 75 0c             	pushl  0xc(%ebp)
f010764a:	ff 75 08             	pushl  0x8(%ebp)
f010764d:	e8 1f f3 ff ff       	call   f0106971 <get_page_table>
f0107652:	83 c4 10             	add    $0x10,%esp
	if(ptr_page_table != NULL)
f0107655:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107658:	85 c0                	test   %eax,%eax
f010765a:	74 2b                	je     f0107687 <virtual_to_physical+0x54>
	{
		uint32 table_entry = ptr_page_table[PTX(virtual_address)];
f010765c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010765f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107662:	c1 ea 0c             	shr    $0xc,%edx
f0107665:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010766b:	c1 e2 02             	shl    $0x2,%edx
f010766e:	01 d0                	add    %edx,%eax
f0107670:	8b 00                	mov    (%eax),%eax
f0107672:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32 tmp = table_entry >> 12;
f0107675:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107678:	c1 e8 0c             	shr    $0xc,%eax
f010767b:	89 45 f0             	mov    %eax,-0x10(%ebp)
		tmp = tmp << 12;
f010767e:	c1 65 f0 0c          	shll   $0xc,-0x10(%ebp)
		return tmp ;
f0107682:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107685:	eb 05                	jmp    f010768c <virtual_to_physical+0x59>
	}
	else
	{
	  return -1;
f0107687:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
	}
}
f010768c:	c9                   	leave  
f010768d:	c3                   	ret    

f010768e <pd_is_table_used>:

///============================================================================================
/// Dealing with page directory entry flags

inline uint32 pd_is_table_used(uint32* page_directory, uint32 virtual_address)
{
f010768e:	55                   	push   %ebp
f010768f:	89 e5                	mov    %esp,%ebp
	return ( (page_directory[PDX(virtual_address)] & PERM_USED) == PERM_USED ? 1 : 0);
f0107691:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107694:	c1 e8 16             	shr    $0x16,%eax
f0107697:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010769e:	8b 45 08             	mov    0x8(%ebp),%eax
f01076a1:	01 d0                	add    %edx,%eax
f01076a3:	8b 00                	mov    (%eax),%eax
f01076a5:	83 e0 20             	and    $0x20,%eax
f01076a8:	85 c0                	test   %eax,%eax
f01076aa:	0f 95 c0             	setne  %al
f01076ad:	0f b6 c0             	movzbl %al,%eax
}
f01076b0:	5d                   	pop    %ebp
f01076b1:	c3                   	ret    

f01076b2 <pd_set_table_unused>:

inline void pd_set_table_unused(uint32* page_directory, uint32 virtual_address)
{
f01076b2:	55                   	push   %ebp
f01076b3:	89 e5                	mov    %esp,%ebp
f01076b5:	83 ec 08             	sub    $0x8,%esp
	page_directory[PDX(virtual_address)] &= (~PERM_USED);
f01076b8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01076bb:	c1 e8 16             	shr    $0x16,%eax
f01076be:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01076c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01076c8:	01 d0                	add    %edx,%eax
f01076ca:	8b 55 0c             	mov    0xc(%ebp),%edx
f01076cd:	c1 ea 16             	shr    $0x16,%edx
f01076d0:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f01076d7:	8b 55 08             	mov    0x8(%ebp),%edx
f01076da:	01 ca                	add    %ecx,%edx
f01076dc:	8b 12                	mov    (%edx),%edx
f01076de:	83 e2 df             	and    $0xffffffdf,%edx
f01076e1:	89 10                	mov    %edx,(%eax)
	tlb_invalidate((void *)NULL, (void *)virtual_address);
f01076e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01076e6:	83 ec 08             	sub    $0x8,%esp
f01076e9:	50                   	push   %eax
f01076ea:	6a 00                	push   $0x0
f01076ec:	e8 dd ec ff ff       	call   f01063ce <tlb_invalidate>
f01076f1:	83 c4 10             	add    $0x10,%esp
}
f01076f4:	90                   	nop
f01076f5:	c9                   	leave  
f01076f6:	c3                   	ret    

f01076f7 <pd_clear_page_dir_entry>:

inline void pd_clear_page_dir_entry(uint32* page_directory, uint32 virtual_address)
{
f01076f7:	55                   	push   %ebp
f01076f8:	89 e5                	mov    %esp,%ebp
f01076fa:	83 ec 10             	sub    $0x10,%esp
	page_directory[PDX(virtual_address)] = 0 ;
f01076fd:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107700:	c1 e8 16             	shr    $0x16,%eax
f0107703:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010770a:	8b 45 08             	mov    0x8(%ebp),%eax
f010770d:	01 d0                	add    %edx,%eax
f010770f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f0107715:	0f 20 d8             	mov    %cr3,%eax
f0107718:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010771b:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010771e:	0f 22 d8             	mov    %eax,%cr3
	tlbflush();
}
f0107721:	90                   	nop
f0107722:	c9                   	leave  
f0107723:	c3                   	ret    

f0107724 <env_page_ws_get_size>:

///============================================================================================
/// Dealing with environment working set

inline uint32 env_page_ws_get_size(struct Env *e)
{
f0107724:	55                   	push   %ebp
f0107725:	89 e5                	mov    %esp,%ebp
f0107727:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f010772a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107731:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<e->page_WS_max_size; i++) if(e->ptr_pageWorkingSet[i].empty == 0) counter++;
f0107738:	eb 20                	jmp    f010775a <env_page_ws_get_size+0x36>
f010773a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010773d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107740:	89 d0                	mov    %edx,%eax
f0107742:	01 c0                	add    %eax,%eax
f0107744:	01 d0                	add    %edx,%eax
f0107746:	c1 e0 03             	shl    $0x3,%eax
f0107749:	01 c8                	add    %ecx,%eax
f010774b:	83 c0 7c             	add    $0x7c,%eax
f010774e:	8a 00                	mov    (%eax),%al
f0107750:	84 c0                	test   %al,%al
f0107752:	75 03                	jne    f0107757 <env_page_ws_get_size+0x33>
f0107754:	ff 45 f8             	incl   -0x8(%ebp)
f0107757:	ff 45 fc             	incl   -0x4(%ebp)
f010775a:	8b 45 08             	mov    0x8(%ebp),%eax
f010775d:	8b 50 74             	mov    0x74(%eax),%edx
f0107760:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0107763:	39 c2                	cmp    %eax,%edx
f0107765:	77 d3                	ja     f010773a <env_page_ws_get_size+0x16>
	return counter;
f0107767:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f010776a:	c9                   	leave  
f010776b:	c3                   	ret    

f010776c <env_page_ws_invalidate>:

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f010776c:	55                   	push   %ebp
f010776d:	89 e5                	mov    %esp,%ebp
f010776f:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107772:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<e->page_WS_max_size; i++)
f0107779:	eb 4c                	jmp    f01077c7 <env_page_ws_invalidate+0x5b>
	{
		if(ROUNDDOWN(e->ptr_pageWorkingSet[i].virtual_address,PAGE_SIZE) == ROUNDDOWN(virtual_address,PAGE_SIZE))
f010777b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010777e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107781:	89 d0                	mov    %edx,%eax
f0107783:	01 c0                	add    %eax,%eax
f0107785:	01 d0                	add    %edx,%eax
f0107787:	c1 e0 03             	shl    $0x3,%eax
f010778a:	01 c8                	add    %ecx,%eax
f010778c:	83 c0 78             	add    $0x78,%eax
f010778f:	8b 00                	mov    (%eax),%eax
f0107791:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107794:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107797:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010779c:	89 c2                	mov    %eax,%edx
f010779e:	8b 45 0c             	mov    0xc(%ebp),%eax
f01077a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01077a4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01077a7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01077ac:	39 c2                	cmp    %eax,%edx
f01077ae:	75 14                	jne    f01077c4 <env_page_ws_invalidate+0x58>
		{
			env_page_ws_clear_entry(e, i);
f01077b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01077b3:	83 ec 08             	sub    $0x8,%esp
f01077b6:	50                   	push   %eax
f01077b7:	ff 75 08             	pushl  0x8(%ebp)
f01077ba:	e8 bc 00 00 00       	call   f010787b <env_page_ws_clear_entry>
f01077bf:	83 c4 10             	add    $0x10,%esp
			break;
f01077c2:	eb 10                	jmp    f01077d4 <env_page_ws_invalidate+0x68>
}

inline void env_page_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<e->page_WS_max_size; i++)
f01077c4:	ff 45 f4             	incl   -0xc(%ebp)
f01077c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01077ca:	8b 50 74             	mov    0x74(%eax),%edx
f01077cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01077d0:	39 c2                	cmp    %eax,%edx
f01077d2:	77 a7                	ja     f010777b <env_page_ws_invalidate+0xf>
		{
			env_page_ws_clear_entry(e, i);
			break;
		}
	}
}
f01077d4:	90                   	nop
f01077d5:	c9                   	leave  
f01077d6:	c3                   	ret    

f01077d7 <env_page_ws_set_entry>:

inline void env_page_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f01077d7:	55                   	push   %ebp
f01077d8:	89 e5                	mov    %esp,%ebp
f01077da:	53                   	push   %ebx
f01077db:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < e->page_WS_max_size);
f01077de:	8b 45 08             	mov    0x8(%ebp),%eax
f01077e1:	8b 40 74             	mov    0x74(%eax),%eax
f01077e4:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01077e7:	77 16                	ja     f01077ff <env_page_ws_set_entry+0x28>
f01077e9:	68 00 54 13 f0       	push   $0xf0135400
f01077ee:	68 36 54 13 f0       	push   $0xf0135436
f01077f3:	6a 26                	push   $0x26
f01077f5:	68 4c 54 13 f0       	push   $0xf013544c
f01077fa:	e8 a7 89 ff ff       	call   f01001a6 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f01077ff:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107806:	76 16                	jbe    f010781e <env_page_ws_set_entry+0x47>
f0107808:	68 6c 54 13 f0       	push   $0xf013546c
f010780d:	68 36 54 13 f0       	push   $0xf0135436
f0107812:	6a 27                	push   $0x27
f0107814:	68 4c 54 13 f0       	push   $0xf013544c
f0107819:	e8 88 89 ff ff       	call   f01001a6 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE);
f010781e:	8b 45 10             	mov    0x10(%ebp),%eax
f0107821:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107824:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107827:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010782c:	89 c1                	mov    %eax,%ecx
f010782e:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0107831:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107834:	89 d0                	mov    %edx,%eax
f0107836:	01 c0                	add    %eax,%eax
f0107838:	01 d0                	add    %edx,%eax
f010783a:	c1 e0 03             	shl    $0x3,%eax
f010783d:	01 d8                	add    %ebx,%eax
f010783f:	83 c0 78             	add    $0x78,%eax
f0107842:	89 08                	mov    %ecx,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 0;
f0107844:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107847:	8b 55 0c             	mov    0xc(%ebp),%edx
f010784a:	89 d0                	mov    %edx,%eax
f010784c:	01 c0                	add    %eax,%eax
f010784e:	01 d0                	add    %edx,%eax
f0107850:	c1 e0 03             	shl    $0x3,%eax
f0107853:	01 c8                	add    %ecx,%eax
f0107855:	83 c0 7c             	add    $0x7c,%eax
f0107858:	c6 00 00             	movb   $0x0,(%eax)

	e->ptr_pageWorkingSet[entry_index].time_stamp = 0x80000000;
f010785b:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010785e:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107861:	89 d0                	mov    %edx,%eax
f0107863:	01 c0                	add    %eax,%eax
f0107865:	01 d0                	add    %edx,%eax
f0107867:	c1 e0 03             	shl    $0x3,%eax
f010786a:	01 c8                	add    %ecx,%eax
f010786c:	83 e8 80             	sub    $0xffffff80,%eax
f010786f:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	//e->ptr_pageWorkingSet[entry_index].time_stamp = time;
	return;
f0107875:	90                   	nop
}
f0107876:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107879:	c9                   	leave  
f010787a:	c3                   	ret    

f010787b <env_page_ws_clear_entry>:

inline void env_page_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f010787b:	55                   	push   %ebp
f010787c:	89 e5                	mov    %esp,%ebp
f010787e:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107881:	8b 45 08             	mov    0x8(%ebp),%eax
f0107884:	8b 40 74             	mov    0x74(%eax),%eax
f0107887:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010788a:	77 16                	ja     f01078a2 <env_page_ws_clear_entry+0x27>
f010788c:	68 a0 54 13 f0       	push   $0xf01354a0
f0107891:	68 36 54 13 f0       	push   $0xf0135436
f0107896:	6a 32                	push   $0x32
f0107898:	68 4c 54 13 f0       	push   $0xf013544c
f010789d:	e8 04 89 ff ff       	call   f01001a6 <_panic>
	e->ptr_pageWorkingSet[entry_index].virtual_address = 0;
f01078a2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01078a5:	8b 55 0c             	mov    0xc(%ebp),%edx
f01078a8:	89 d0                	mov    %edx,%eax
f01078aa:	01 c0                	add    %eax,%eax
f01078ac:	01 d0                	add    %edx,%eax
f01078ae:	c1 e0 03             	shl    $0x3,%eax
f01078b1:	01 c8                	add    %ecx,%eax
f01078b3:	83 c0 78             	add    $0x78,%eax
f01078b6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->ptr_pageWorkingSet[entry_index].empty = 1;
f01078bc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01078bf:	8b 55 0c             	mov    0xc(%ebp),%edx
f01078c2:	89 d0                	mov    %edx,%eax
f01078c4:	01 c0                	add    %eax,%eax
f01078c6:	01 d0                	add    %edx,%eax
f01078c8:	c1 e0 03             	shl    $0x3,%eax
f01078cb:	01 c8                	add    %ecx,%eax
f01078cd:	83 c0 7c             	add    $0x7c,%eax
f01078d0:	c6 00 01             	movb   $0x1,(%eax)
	e->ptr_pageWorkingSet[entry_index].time_stamp = 0;
f01078d3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01078d6:	8b 55 0c             	mov    0xc(%ebp),%edx
f01078d9:	89 d0                	mov    %edx,%eax
f01078db:	01 c0                	add    %eax,%eax
f01078dd:	01 d0                	add    %edx,%eax
f01078df:	c1 e0 03             	shl    $0x3,%eax
f01078e2:	01 c8                	add    %ecx,%eax
f01078e4:	83 e8 80             	sub    $0xffffff80,%eax
f01078e7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f01078ed:	90                   	nop
f01078ee:	c9                   	leave  
f01078ef:	c3                   	ret    

f01078f0 <env_page_ws_get_virtual_address>:

inline uint32 env_page_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f01078f0:	55                   	push   %ebp
f01078f1:	89 e5                	mov    %esp,%ebp
f01078f3:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f01078f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01078f9:	8b 40 74             	mov    0x74(%eax),%eax
f01078fc:	3b 45 0c             	cmp    0xc(%ebp),%eax
f01078ff:	77 16                	ja     f0107917 <env_page_ws_get_virtual_address+0x27>
f0107901:	68 a0 54 13 f0       	push   $0xf01354a0
f0107906:	68 36 54 13 f0       	push   $0xf0135436
f010790b:	6a 3a                	push   $0x3a
f010790d:	68 4c 54 13 f0       	push   $0xf013544c
f0107912:	e8 8f 88 ff ff       	call   f01001a6 <_panic>
	return ROUNDDOWN(e->ptr_pageWorkingSet[entry_index].virtual_address,PAGE_SIZE);
f0107917:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010791a:	8b 55 0c             	mov    0xc(%ebp),%edx
f010791d:	89 d0                	mov    %edx,%eax
f010791f:	01 c0                	add    %eax,%eax
f0107921:	01 d0                	add    %edx,%eax
f0107923:	c1 e0 03             	shl    $0x3,%eax
f0107926:	01 c8                	add    %ecx,%eax
f0107928:	83 c0 78             	add    $0x78,%eax
f010792b:	8b 00                	mov    (%eax),%eax
f010792d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107930:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107933:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f0107938:	c9                   	leave  
f0107939:	c3                   	ret    

f010793a <env_page_ws_get_time_stamp>:

inline uint32 env_page_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f010793a:	55                   	push   %ebp
f010793b:	89 e5                	mov    %esp,%ebp
f010793d:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < (e->page_WS_max_size));
f0107940:	8b 45 08             	mov    0x8(%ebp),%eax
f0107943:	8b 40 74             	mov    0x74(%eax),%eax
f0107946:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0107949:	77 16                	ja     f0107961 <env_page_ws_get_time_stamp+0x27>
f010794b:	68 a0 54 13 f0       	push   $0xf01354a0
f0107950:	68 36 54 13 f0       	push   $0xf0135436
f0107955:	6a 40                	push   $0x40
f0107957:	68 4c 54 13 f0       	push   $0xf013544c
f010795c:	e8 45 88 ff ff       	call   f01001a6 <_panic>
	return e->ptr_pageWorkingSet[entry_index].time_stamp;
f0107961:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107964:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107967:	89 d0                	mov    %edx,%eax
f0107969:	01 c0                	add    %eax,%eax
f010796b:	01 d0                	add    %edx,%eax
f010796d:	c1 e0 03             	shl    $0x3,%eax
f0107970:	01 c8                	add    %ecx,%eax
f0107972:	83 e8 80             	sub    $0xffffff80,%eax
f0107975:	8b 00                	mov    (%eax),%eax
}
f0107977:	c9                   	leave  
f0107978:	c3                   	ret    

f0107979 <env_page_ws_is_entry_empty>:

inline uint32 env_page_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0107979:	55                   	push   %ebp
f010797a:	89 e5                	mov    %esp,%ebp
	return e->ptr_pageWorkingSet[entry_index].empty;
f010797c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010797f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107982:	89 d0                	mov    %edx,%eax
f0107984:	01 c0                	add    %eax,%eax
f0107986:	01 d0                	add    %edx,%eax
f0107988:	c1 e0 03             	shl    $0x3,%eax
f010798b:	01 c8                	add    %ecx,%eax
f010798d:	83 c0 7c             	add    $0x7c,%eax
f0107990:	8a 00                	mov    (%eax),%al
f0107992:	0f b6 c0             	movzbl %al,%eax
}
f0107995:	5d                   	pop    %ebp
f0107996:	c3                   	ret    

f0107997 <env_page_ws_print>:

void env_page_ws_print(struct Env *e)
{
f0107997:	55                   	push   %ebp
f0107998:	89 e5                	mov    %esp,%ebp
f010799a:	53                   	push   %ebx
f010799b:	83 ec 24             	sub    $0x24,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f010799e:	83 ec 0c             	sub    $0xc,%esp
f01079a1:	6a 02                	push   $0x2
f01079a3:	e8 d7 58 00 00       	call   f010d27f <isPageReplacmentAlgorithmLRU>
f01079a8:	83 c4 10             	add    $0x10,%esp
f01079ab:	85 c0                	test   %eax,%eax
f01079ad:	0f 84 fe 00 00 00    	je     f0107ab1 <env_page_ws_print+0x11a>
	{
		int i = 0;
f01079b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
		cprintf("ActiveList:\n============\n") ;
f01079ba:	83 ec 0c             	sub    $0xc,%esp
f01079bd:	68 d8 54 13 f0       	push   $0xf01354d8
f01079c2:	e8 66 92 ff ff       	call   f0100c2d <cprintf>
f01079c7:	83 c4 10             	add    $0x10,%esp
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01079ca:	8b 45 08             	mov    0x8(%ebp),%eax
f01079cd:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f01079d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01079d6:	eb 2c                	jmp    f0107a04 <env_page_ws_print+0x6d>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f01079d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01079db:	8b 10                	mov    (%eax),%edx
f01079dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01079e0:	8d 48 01             	lea    0x1(%eax),%ecx
f01079e3:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f01079e6:	83 ec 04             	sub    $0x4,%esp
f01079e9:	52                   	push   %edx
f01079ea:	50                   	push   %eax
f01079eb:	68 f2 54 13 f0       	push   $0xf01354f2
f01079f0:	e8 38 92 ff ff       	call   f0100c2d <cprintf>
f01079f5:	83 c4 10             	add    $0x10,%esp
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		int i = 0;
		cprintf("ActiveList:\n============\n") ;
		struct WorkingSetElement * ptr_WS_element ;
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
f01079f8:	8b 45 08             	mov    0x8(%ebp),%eax
f01079fb:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f0107a01:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107a04:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107a08:	74 08                	je     f0107a12 <env_page_ws_print+0x7b>
f0107a0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a0d:	8b 40 10             	mov    0x10(%eax),%eax
f0107a10:	eb 05                	jmp    f0107a17 <env_page_ws_print+0x80>
f0107a12:	b8 00 00 00 00       	mov    $0x0,%eax
f0107a17:	8b 55 08             	mov    0x8(%ebp),%edx
f0107a1a:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f0107a20:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a23:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f0107a29:	85 c0                	test   %eax,%eax
f0107a2b:	75 ab                	jne    f01079d8 <env_page_ws_print+0x41>
f0107a2d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107a31:	75 a5                	jne    f01079d8 <env_page_ws_print+0x41>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
f0107a33:	83 ec 0c             	sub    $0xc,%esp
f0107a36:	68 fa 54 13 f0       	push   $0xf01354fa
f0107a3b:	e8 ed 91 ff ff       	call   f0100c2d <cprintf>
f0107a40:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0107a43:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a46:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f0107a4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107a4f:	eb 2c                	jmp    f0107a7d <env_page_ws_print+0xe6>
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
f0107a51:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a54:	8b 10                	mov    (%eax),%edx
f0107a56:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107a59:	8d 48 01             	lea    0x1(%eax),%ecx
f0107a5c:	89 4d f4             	mov    %ecx,-0xc(%ebp)
f0107a5f:	83 ec 04             	sub    $0x4,%esp
f0107a62:	52                   	push   %edx
f0107a63:	50                   	push   %eax
f0107a64:	68 f2 54 13 f0       	push   $0xf01354f2
f0107a69:	e8 bf 91 ff ff       	call   f0100c2d <cprintf>
f0107a6e:	83 c4 10             	add    $0x10,%esp
		LIST_FOREACH(ptr_WS_element, &(e->ActiveList))
		{
			cprintf("%d:	%x\n", i++, ptr_WS_element->virtual_address);
		}
		cprintf("\nSecondList:\n============\n") ;
		LIST_FOREACH(ptr_WS_element, &(e->SecondList))
f0107a71:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a74:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0107a7a:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107a7d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107a81:	74 08                	je     f0107a8b <env_page_ws_print+0xf4>
f0107a83:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107a86:	8b 40 10             	mov    0x10(%eax),%eax
f0107a89:	eb 05                	jmp    f0107a90 <env_page_ws_print+0xf9>
f0107a8b:	b8 00 00 00 00       	mov    $0x0,%eax
f0107a90:	8b 55 08             	mov    0x8(%ebp),%edx
f0107a93:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f0107a99:	8b 45 08             	mov    0x8(%ebp),%eax
f0107a9c:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0107aa2:	85 c0                	test   %eax,%eax
f0107aa4:	75 ab                	jne    f0107a51 <env_page_ws_print+0xba>
f0107aa6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0107aaa:	75 a5                	jne    f0107a51 <env_page_ws_print+0xba>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0107aac:	e9 94 01 00 00       	jmp    f0107c45 <env_page_ws_print+0x2ae>
		}
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
f0107ab1:	83 ec 0c             	sub    $0xc,%esp
f0107ab4:	68 15 55 13 f0       	push   $0xf0135515
f0107ab9:	e8 6f 91 ff ff       	call   f0100c2d <cprintf>
f0107abe:	83 c4 10             	add    $0x10,%esp
		for(i=0; i< (e->page_WS_max_size); i++ )
f0107ac1:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0107ac8:	e9 69 01 00 00       	jmp    f0107c36 <env_page_ws_print+0x29f>
		{
			if (e->ptr_pageWorkingSet[i].empty)
f0107acd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ad0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107ad3:	89 d0                	mov    %edx,%eax
f0107ad5:	01 c0                	add    %eax,%eax
f0107ad7:	01 d0                	add    %edx,%eax
f0107ad9:	c1 e0 03             	shl    $0x3,%eax
f0107adc:	01 c8                	add    %ecx,%eax
f0107ade:	83 c0 7c             	add    $0x7c,%eax
f0107ae1:	8a 00                	mov    (%eax),%al
f0107ae3:	84 c0                	test   %al,%al
f0107ae5:	74 43                	je     f0107b2a <env_page_ws_print+0x193>
			{
				cprintf("EMPTY LOCATION");
f0107ae7:	83 ec 0c             	sub    $0xc,%esp
f0107aea:	68 1f 55 13 f0       	push   $0xf013551f
f0107aef:	e8 39 91 ff ff       	call   f0100c2d <cprintf>
f0107af4:	83 c4 10             	add    $0x10,%esp
				if(i==e->page_last_WS_index )
f0107af7:	8b 45 08             	mov    0x8(%ebp),%eax
f0107afa:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0107b00:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107b03:	75 10                	jne    f0107b15 <env_page_ws_print+0x17e>
				{
					cprintf("		<--");
f0107b05:	83 ec 0c             	sub    $0xc,%esp
f0107b08:	68 2e 55 13 f0       	push   $0xf013552e
f0107b0d:	e8 1b 91 ff ff       	call   f0100c2d <cprintf>
f0107b12:	83 c4 10             	add    $0x10,%esp
				}
				cprintf("\n");
f0107b15:	83 ec 0c             	sub    $0xc,%esp
f0107b18:	68 34 55 13 f0       	push   $0xf0135534
f0107b1d:	e8 0b 91 ff ff       	call   f0100c2d <cprintf>
f0107b22:	83 c4 10             	add    $0x10,%esp
				continue;
f0107b25:	e9 09 01 00 00       	jmp    f0107c33 <env_page_ws_print+0x29c>
			}
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0107b2a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107b2d:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107b30:	89 d0                	mov    %edx,%eax
f0107b32:	01 c0                	add    %eax,%eax
f0107b34:	01 d0                	add    %edx,%eax
f0107b36:	c1 e0 03             	shl    $0x3,%eax
f0107b39:	01 c8                	add    %ecx,%eax
f0107b3b:	83 c0 78             	add    $0x78,%eax
f0107b3e:	8b 00                	mov    (%eax),%eax
f0107b40:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 time_stamp = e->ptr_pageWorkingSet[i].time_stamp;
f0107b43:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107b46:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107b49:	89 d0                	mov    %edx,%eax
f0107b4b:	01 c0                	add    %eax,%eax
f0107b4d:	01 d0                	add    %edx,%eax
f0107b4f:	c1 e0 03             	shl    $0x3,%eax
f0107b52:	01 c8                	add    %ecx,%eax
f0107b54:	83 e8 80             	sub    $0xffffff80,%eax
f0107b57:	8b 00                	mov    (%eax),%eax
f0107b59:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			uint32 perm = pt_get_page_permissions(e->env_page_directory, virtual_address) ;
f0107b5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107b5f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107b62:	83 ec 08             	sub    $0x8,%esp
f0107b65:	ff 75 e8             	pushl  -0x18(%ebp)
f0107b68:	50                   	push   %eax
f0107b69:	e8 fb f9 ff ff       	call   f0107569 <pt_get_page_permissions>
f0107b6e:	83 c4 10             	add    $0x10,%esp
f0107b71:	89 45 e0             	mov    %eax,-0x20(%ebp)
			char isModified = ((perm&PERM_MODIFIED) ? 1 : 0);
f0107b74:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107b77:	83 e0 40             	and    $0x40,%eax
f0107b7a:	85 c0                	test   %eax,%eax
f0107b7c:	0f 95 c0             	setne  %al
f0107b7f:	88 45 df             	mov    %al,-0x21(%ebp)
			char isUsed= ((perm&PERM_USED) ? 1 : 0);
f0107b82:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107b85:	83 e0 20             	and    $0x20,%eax
f0107b88:	85 c0                	test   %eax,%eax
f0107b8a:	0f 95 c0             	setne  %al
f0107b8d:	88 45 de             	mov    %al,-0x22(%ebp)
			char isBuffered= ((perm&PERM_BUFFERED) ? 1 : 0);
f0107b90:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0107b93:	25 00 02 00 00       	and    $0x200,%eax
f0107b98:	85 c0                	test   %eax,%eax
f0107b9a:	0f 95 c0             	setne  %al
f0107b9d:	88 45 dd             	mov    %al,-0x23(%ebp)


			cprintf("address @ %d = %x",i, e->ptr_pageWorkingSet[i].virtual_address);
f0107ba0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ba3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107ba6:	89 d0                	mov    %edx,%eax
f0107ba8:	01 c0                	add    %eax,%eax
f0107baa:	01 d0                	add    %edx,%eax
f0107bac:	c1 e0 03             	shl    $0x3,%eax
f0107baf:	01 c8                	add    %ecx,%eax
f0107bb1:	83 c0 78             	add    $0x78,%eax
f0107bb4:	8b 00                	mov    (%eax),%eax
f0107bb6:	83 ec 04             	sub    $0x4,%esp
f0107bb9:	50                   	push   %eax
f0107bba:	ff 75 ec             	pushl  -0x14(%ebp)
f0107bbd:	68 36 55 13 f0       	push   $0xf0135536
f0107bc2:	e8 66 90 ff ff       	call   f0100c2d <cprintf>
f0107bc7:	83 c4 10             	add    $0x10,%esp

			//2021
			cprintf(", used= %d, modified= %d, buffered= %d, time stamp= %x, sweeps_cnt= %d", isUsed, isModified, isBuffered, time_stamp, e->ptr_pageWorkingSet[i].sweeps_counter) ;
f0107bca:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107bcd:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0107bd0:	89 d0                	mov    %edx,%eax
f0107bd2:	01 c0                	add    %eax,%eax
f0107bd4:	01 d0                	add    %edx,%eax
f0107bd6:	c1 e0 03             	shl    $0x3,%eax
f0107bd9:	01 c8                	add    %ecx,%eax
f0107bdb:	05 84 00 00 00       	add    $0x84,%eax
f0107be0:	8b 18                	mov    (%eax),%ebx
f0107be2:	0f be 4d dd          	movsbl -0x23(%ebp),%ecx
f0107be6:	0f be 55 df          	movsbl -0x21(%ebp),%edx
f0107bea:	0f be 45 de          	movsbl -0x22(%ebp),%eax
f0107bee:	83 ec 08             	sub    $0x8,%esp
f0107bf1:	53                   	push   %ebx
f0107bf2:	ff 75 e4             	pushl  -0x1c(%ebp)
f0107bf5:	51                   	push   %ecx
f0107bf6:	52                   	push   %edx
f0107bf7:	50                   	push   %eax
f0107bf8:	68 48 55 13 f0       	push   $0xf0135548
f0107bfd:	e8 2b 90 ff ff       	call   f0100c2d <cprintf>
f0107c02:	83 c4 20             	add    $0x20,%esp

			if(i==e->page_last_WS_index )
f0107c05:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c08:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0107c0e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107c11:	75 10                	jne    f0107c23 <env_page_ws_print+0x28c>
			{
				cprintf(" <--");
f0107c13:	83 ec 0c             	sub    $0xc,%esp
f0107c16:	68 8f 55 13 f0       	push   $0xf013558f
f0107c1b:	e8 0d 90 ff ff       	call   f0100c2d <cprintf>
f0107c20:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0107c23:	83 ec 0c             	sub    $0xc,%esp
f0107c26:	68 34 55 13 f0       	push   $0xf0135534
f0107c2b:	e8 fd 8f ff ff       	call   f0100c2d <cprintf>
f0107c30:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		uint32 i;
		cprintf("PAGE WS:\n");
		for(i=0; i< (e->page_WS_max_size); i++ )
f0107c33:	ff 45 ec             	incl   -0x14(%ebp)
f0107c36:	8b 45 08             	mov    0x8(%ebp),%eax
f0107c39:	8b 40 74             	mov    0x74(%eax),%eax
f0107c3c:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0107c3f:	0f 87 88 fe ff ff    	ja     f0107acd <env_page_ws_print+0x136>
				cprintf(" <--");
			}
			cprintf("\n");
		}
	}
}
f0107c45:	90                   	nop
f0107c46:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107c49:	c9                   	leave  
f0107c4a:	c3                   	ret    

f0107c4b <env_table_ws_print>:

// Table Working Set =========================================================

void env_table_ws_print(struct Env *e)
{
f0107c4b:	55                   	push   %ebp
f0107c4c:	89 e5                	mov    %esp,%ebp
f0107c4e:	53                   	push   %ebx
f0107c4f:	83 ec 14             	sub    $0x14,%esp
	uint32 i;
	cprintf("---------------------------------------------------\n");
f0107c52:	83 ec 0c             	sub    $0xc,%esp
f0107c55:	68 94 55 13 f0       	push   $0xf0135594
f0107c5a:	e8 ce 8f ff ff       	call   f0100c2d <cprintf>
f0107c5f:	83 c4 10             	add    $0x10,%esp
	cprintf("TABLE WS:\n");
f0107c62:	83 ec 0c             	sub    $0xc,%esp
f0107c65:	68 c9 55 13 f0       	push   $0xf01355c9
f0107c6a:	e8 be 8f ff ff       	call   f0100c2d <cprintf>
f0107c6f:	83 c4 10             	add    $0x10,%esp
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0107c72:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0107c79:	e9 16 01 00 00       	jmp    f0107d94 <env_table_ws_print+0x149>
	{
		if (e->__ptr_tws[i].empty)
f0107c7e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107c81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107c84:	89 d0                	mov    %edx,%eax
f0107c86:	01 c0                	add    %eax,%eax
f0107c88:	01 d0                	add    %edx,%eax
f0107c8a:	c1 e0 03             	shl    $0x3,%eax
f0107c8d:	01 c8                	add    %ecx,%eax
f0107c8f:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107c94:	8a 00                	mov    (%eax),%al
f0107c96:	84 c0                	test   %al,%al
f0107c98:	74 43                	je     f0107cdd <env_table_ws_print+0x92>
		{
			cprintf("EMPTY LOCATION");
f0107c9a:	83 ec 0c             	sub    $0xc,%esp
f0107c9d:	68 1f 55 13 f0       	push   $0xf013551f
f0107ca2:	e8 86 8f ff ff       	call   f0100c2d <cprintf>
f0107ca7:	83 c4 10             	add    $0x10,%esp
			if(i==e->table_last_WS_index )
f0107caa:	8b 45 08             	mov    0x8(%ebp),%eax
f0107cad:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0107cb3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107cb6:	75 10                	jne    f0107cc8 <env_table_ws_print+0x7d>
			{
				cprintf("		<--");
f0107cb8:	83 ec 0c             	sub    $0xc,%esp
f0107cbb:	68 2e 55 13 f0       	push   $0xf013552e
f0107cc0:	e8 68 8f ff ff       	call   f0100c2d <cprintf>
f0107cc5:	83 c4 10             	add    $0x10,%esp
			}
			cprintf("\n");
f0107cc8:	83 ec 0c             	sub    $0xc,%esp
f0107ccb:	68 34 55 13 f0       	push   $0xf0135534
f0107cd0:	e8 58 8f ff ff       	call   f0100c2d <cprintf>
f0107cd5:	83 c4 10             	add    $0x10,%esp
			continue;
f0107cd8:	e9 b4 00 00 00       	jmp    f0107d91 <env_table_ws_print+0x146>
		}
		uint32 virtual_address = e->__ptr_tws[i].virtual_address;
f0107cdd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ce0:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107ce3:	89 d0                	mov    %edx,%eax
f0107ce5:	01 c0                	add    %eax,%eax
f0107ce7:	01 d0                	add    %edx,%eax
f0107ce9:	c1 e0 03             	shl    $0x3,%eax
f0107cec:	01 c8                	add    %ecx,%eax
f0107cee:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107cf3:	8b 00                	mov    (%eax),%eax
f0107cf5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		cprintf("env address at %d = %x",i, e->__ptr_tws[i].virtual_address);
f0107cf8:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107cfb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107cfe:	89 d0                	mov    %edx,%eax
f0107d00:	01 c0                	add    %eax,%eax
f0107d02:	01 d0                	add    %edx,%eax
f0107d04:	c1 e0 03             	shl    $0x3,%eax
f0107d07:	01 c8                	add    %ecx,%eax
f0107d09:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107d0e:	8b 00                	mov    (%eax),%eax
f0107d10:	83 ec 04             	sub    $0x4,%esp
f0107d13:	50                   	push   %eax
f0107d14:	ff 75 f4             	pushl  -0xc(%ebp)
f0107d17:	68 d4 55 13 f0       	push   $0xf01355d4
f0107d1c:	e8 0c 8f ff ff       	call   f0100c2d <cprintf>
f0107d21:	83 c4 10             	add    $0x10,%esp

		cprintf(", used bit = %d, time stamp = %d", pd_is_table_used(e->env_page_directory, virtual_address), e->__ptr_tws[i].time_stamp);
f0107d24:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107d27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107d2a:	89 d0                	mov    %edx,%eax
f0107d2c:	01 c0                	add    %eax,%eax
f0107d2e:	01 d0                	add    %edx,%eax
f0107d30:	c1 e0 03             	shl    $0x3,%eax
f0107d33:	01 c8                	add    %ecx,%eax
f0107d35:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107d3a:	8b 18                	mov    (%eax),%ebx
f0107d3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d3f:	8b 40 5c             	mov    0x5c(%eax),%eax
f0107d42:	83 ec 08             	sub    $0x8,%esp
f0107d45:	ff 75 f0             	pushl  -0x10(%ebp)
f0107d48:	50                   	push   %eax
f0107d49:	e8 40 f9 ff ff       	call   f010768e <pd_is_table_used>
f0107d4e:	83 c4 10             	add    $0x10,%esp
f0107d51:	83 ec 04             	sub    $0x4,%esp
f0107d54:	53                   	push   %ebx
f0107d55:	50                   	push   %eax
f0107d56:	68 ec 55 13 f0       	push   $0xf01355ec
f0107d5b:	e8 cd 8e ff ff       	call   f0100c2d <cprintf>
f0107d60:	83 c4 10             	add    $0x10,%esp
		if(i==e->table_last_WS_index )
f0107d63:	8b 45 08             	mov    0x8(%ebp),%eax
f0107d66:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0107d6c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0107d6f:	75 10                	jne    f0107d81 <env_table_ws_print+0x136>
		{
			cprintf(" <--");
f0107d71:	83 ec 0c             	sub    $0xc,%esp
f0107d74:	68 8f 55 13 f0       	push   $0xf013558f
f0107d79:	e8 af 8e ff ff       	call   f0100c2d <cprintf>
f0107d7e:	83 c4 10             	add    $0x10,%esp
		}
		cprintf("\n");
f0107d81:	83 ec 0c             	sub    $0xc,%esp
f0107d84:	68 34 55 13 f0       	push   $0xf0135534
f0107d89:	e8 9f 8e ff ff       	call   f0100c2d <cprintf>
f0107d8e:	83 c4 10             	add    $0x10,%esp
void env_table_ws_print(struct Env *e)
{
	uint32 i;
	cprintf("---------------------------------------------------\n");
	cprintf("TABLE WS:\n");
	for(i=0; i< __TWS_MAX_SIZE; i++ )
f0107d91:	ff 45 f4             	incl   -0xc(%ebp)
f0107d94:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0107d98:	0f 86 e0 fe ff ff    	jbe    f0107c7e <env_table_ws_print+0x33>
		{
			cprintf(" <--");
		}
		cprintf("\n");
	}
}
f0107d9e:	90                   	nop
f0107d9f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107da2:	c9                   	leave  
f0107da3:	c3                   	ret    

f0107da4 <env_table_ws_get_size>:

inline uint32 env_table_ws_get_size(struct Env *e)
{
f0107da4:	55                   	push   %ebp
f0107da5:	89 e5                	mov    %esp,%ebp
f0107da7:	83 ec 10             	sub    $0x10,%esp
	int i=0, counter=0;
f0107daa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0107db1:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for(;i<__TWS_MAX_SIZE; i++) if(e->__ptr_tws[i].empty == 0) counter++;
f0107db8:	eb 22                	jmp    f0107ddc <env_table_ws_get_size+0x38>
f0107dba:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107dbd:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0107dc0:	89 d0                	mov    %edx,%eax
f0107dc2:	01 c0                	add    %eax,%eax
f0107dc4:	01 d0                	add    %edx,%eax
f0107dc6:	c1 e0 03             	shl    $0x3,%eax
f0107dc9:	01 c8                	add    %ecx,%eax
f0107dcb:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107dd0:	8a 00                	mov    (%eax),%al
f0107dd2:	84 c0                	test   %al,%al
f0107dd4:	75 03                	jne    f0107dd9 <env_table_ws_get_size+0x35>
f0107dd6:	ff 45 f8             	incl   -0x8(%ebp)
f0107dd9:	ff 45 fc             	incl   -0x4(%ebp)
f0107ddc:	83 7d fc 31          	cmpl   $0x31,-0x4(%ebp)
f0107de0:	7e d8                	jle    f0107dba <env_table_ws_get_size+0x16>
	return counter;
f0107de2:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f0107de5:	c9                   	leave  
f0107de6:	c3                   	ret    

f0107de7 <env_table_ws_invalidate>:

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
f0107de7:	55                   	push   %ebp
f0107de8:	89 e5                	mov    %esp,%ebp
f0107dea:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f0107ded:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(;i<__TWS_MAX_SIZE; i++)
f0107df4:	eb 4e                	jmp    f0107e44 <env_table_ws_invalidate+0x5d>
	{
		if(ROUNDDOWN(e->__ptr_tws[i].virtual_address,PAGE_SIZE*1024) == ROUNDDOWN(virtual_address,PAGE_SIZE*1024))
f0107df6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107df9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0107dfc:	89 d0                	mov    %edx,%eax
f0107dfe:	01 c0                	add    %eax,%eax
f0107e00:	01 d0                	add    %edx,%eax
f0107e02:	c1 e0 03             	shl    $0x3,%eax
f0107e05:	01 c8                	add    %ecx,%eax
f0107e07:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107e0c:	8b 00                	mov    (%eax),%eax
f0107e0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0107e11:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0107e14:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0107e19:	89 c2                	mov    %eax,%edx
f0107e1b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0107e1e:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0107e21:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0107e24:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0107e29:	39 c2                	cmp    %eax,%edx
f0107e2b:	75 14                	jne    f0107e41 <env_table_ws_invalidate+0x5a>
		{
			env_table_ws_clear_entry(e, i);
f0107e2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e30:	83 ec 08             	sub    $0x8,%esp
f0107e33:	50                   	push   %eax
f0107e34:	ff 75 08             	pushl  0x8(%ebp)
f0107e37:	e8 bc 00 00 00       	call   f0107ef8 <env_table_ws_clear_entry>
f0107e3c:	83 c4 10             	add    $0x10,%esp
			break;
f0107e3f:	eb 09                	jmp    f0107e4a <env_table_ws_invalidate+0x63>
}

inline void env_table_ws_invalidate(struct Env* e, uint32 virtual_address)
{
	int i=0;
	for(;i<__TWS_MAX_SIZE; i++)
f0107e41:	ff 45 f4             	incl   -0xc(%ebp)
f0107e44:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0107e48:	7e ac                	jle    f0107df6 <env_table_ws_invalidate+0xf>
		{
			env_table_ws_clear_entry(e, i);
			break;
		}
	}
}
f0107e4a:	90                   	nop
f0107e4b:	c9                   	leave  
f0107e4c:	c3                   	ret    

f0107e4d <env_table_ws_set_entry>:

inline void env_table_ws_set_entry(struct Env* e, uint32 entry_index, uint32 virtual_address)
{
f0107e4d:	55                   	push   %ebp
f0107e4e:	89 e5                	mov    %esp,%ebp
f0107e50:	53                   	push   %ebx
f0107e51:	83 ec 14             	sub    $0x14,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107e54:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107e58:	76 19                	jbe    f0107e73 <env_table_ws_set_entry+0x26>
f0107e5a:	68 10 56 13 f0       	push   $0xf0135610
f0107e5f:	68 36 54 13 f0       	push   $0xf0135436
f0107e64:	68 b6 00 00 00       	push   $0xb6
f0107e69:	68 4c 54 13 f0       	push   $0xf013544c
f0107e6e:	e8 33 83 ff ff       	call   f01001a6 <_panic>
	assert(virtual_address >= 0 && virtual_address < USER_TOP);
f0107e73:	81 7d 10 ff ff bf ee 	cmpl   $0xeebfffff,0x10(%ebp)
f0107e7a:	76 19                	jbe    f0107e95 <env_table_ws_set_entry+0x48>
f0107e7c:	68 6c 54 13 f0       	push   $0xf013546c
f0107e81:	68 36 54 13 f0       	push   $0xf0135436
f0107e86:	68 b7 00 00 00       	push   $0xb7
f0107e8b:	68 4c 54 13 f0       	push   $0xf013544c
f0107e90:	e8 11 83 ff ff       	call   f01001a6 <_panic>
	e->__ptr_tws[entry_index].virtual_address = ROUNDDOWN(virtual_address,PAGE_SIZE*1024);
f0107e95:	8b 45 10             	mov    0x10(%ebp),%eax
f0107e98:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107e9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107e9e:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0107ea3:	89 c1                	mov    %eax,%ecx
f0107ea5:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0107ea8:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107eab:	89 d0                	mov    %edx,%eax
f0107ead:	01 c0                	add    %eax,%eax
f0107eaf:	01 d0                	add    %edx,%eax
f0107eb1:	c1 e0 03             	shl    $0x3,%eax
f0107eb4:	01 d8                	add    %ebx,%eax
f0107eb6:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107ebb:	89 08                	mov    %ecx,(%eax)
	e->__ptr_tws[entry_index].empty = 0;
f0107ebd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ec0:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107ec3:	89 d0                	mov    %edx,%eax
f0107ec5:	01 c0                	add    %eax,%eax
f0107ec7:	01 d0                	add    %edx,%eax
f0107ec9:	c1 e0 03             	shl    $0x3,%eax
f0107ecc:	01 c8                	add    %ecx,%eax
f0107ece:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107ed3:	c6 00 00             	movb   $0x0,(%eax)

	//e->__ptr_tws[entry_index].time_stamp = time;
	e->__ptr_tws[entry_index].time_stamp = 0x80000000;
f0107ed6:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107ed9:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107edc:	89 d0                	mov    %edx,%eax
f0107ede:	01 c0                	add    %eax,%eax
f0107ee0:	01 d0                	add    %edx,%eax
f0107ee2:	c1 e0 03             	shl    $0x3,%eax
f0107ee5:	01 c8                	add    %ecx,%eax
f0107ee7:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107eec:	c7 00 00 00 00 80    	movl   $0x80000000,(%eax)
	return;
f0107ef2:	90                   	nop
}
f0107ef3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0107ef6:	c9                   	leave  
f0107ef7:	c3                   	ret    

f0107ef8 <env_table_ws_clear_entry>:

inline void env_table_ws_clear_entry(struct Env* e, uint32 entry_index)
{
f0107ef8:	55                   	push   %ebp
f0107ef9:	89 e5                	mov    %esp,%ebp
f0107efb:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107efe:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107f02:	76 19                	jbe    f0107f1d <env_table_ws_clear_entry+0x25>
f0107f04:	68 10 56 13 f0       	push   $0xf0135610
f0107f09:	68 36 54 13 f0       	push   $0xf0135436
f0107f0e:	68 c2 00 00 00       	push   $0xc2
f0107f13:	68 4c 54 13 f0       	push   $0xf013544c
f0107f18:	e8 89 82 ff ff       	call   f01001a6 <_panic>
	e->__ptr_tws[entry_index].virtual_address = 0;
f0107f1d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107f20:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f23:	89 d0                	mov    %edx,%eax
f0107f25:	01 c0                	add    %eax,%eax
f0107f27:	01 d0                	add    %edx,%eax
f0107f29:	c1 e0 03             	shl    $0x3,%eax
f0107f2c:	01 c8                	add    %ecx,%eax
f0107f2e:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107f33:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	e->__ptr_tws[entry_index].empty = 1;
f0107f39:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107f3c:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f3f:	89 d0                	mov    %edx,%eax
f0107f41:	01 c0                	add    %eax,%eax
f0107f43:	01 d0                	add    %edx,%eax
f0107f45:	c1 e0 03             	shl    $0x3,%eax
f0107f48:	01 c8                	add    %ecx,%eax
f0107f4a:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0107f4f:	c6 00 01             	movb   $0x1,(%eax)
	e->__ptr_tws[entry_index].time_stamp = 0;
f0107f52:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107f55:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f58:	89 d0                	mov    %edx,%eax
f0107f5a:	01 c0                	add    %eax,%eax
f0107f5c:	01 d0                	add    %edx,%eax
f0107f5e:	c1 e0 03             	shl    $0x3,%eax
f0107f61:	01 c8                	add    %ecx,%eax
f0107f63:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107f68:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
f0107f6e:	90                   	nop
f0107f6f:	c9                   	leave  
f0107f70:	c3                   	ret    

f0107f71 <env_table_ws_get_virtual_address>:

inline uint32 env_table_ws_get_virtual_address(struct Env* e, uint32 entry_index)
{
f0107f71:	55                   	push   %ebp
f0107f72:	89 e5                	mov    %esp,%ebp
f0107f74:	83 ec 18             	sub    $0x18,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107f77:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107f7b:	76 19                	jbe    f0107f96 <env_table_ws_get_virtual_address+0x25>
f0107f7d:	68 10 56 13 f0       	push   $0xf0135610
f0107f82:	68 36 54 13 f0       	push   $0xf0135436
f0107f87:	68 ca 00 00 00       	push   $0xca
f0107f8c:	68 4c 54 13 f0       	push   $0xf013544c
f0107f91:	e8 10 82 ff ff       	call   f01001a6 <_panic>
	return ROUNDDOWN(e->__ptr_tws[entry_index].virtual_address,PAGE_SIZE*1024);
f0107f96:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107f99:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107f9c:	89 d0                	mov    %edx,%eax
f0107f9e:	01 c0                	add    %eax,%eax
f0107fa0:	01 d0                	add    %edx,%eax
f0107fa2:	c1 e0 03             	shl    $0x3,%eax
f0107fa5:	01 c8                	add    %ecx,%eax
f0107fa7:	05 38 d5 01 00       	add    $0x1d538,%eax
f0107fac:	8b 00                	mov    (%eax),%eax
f0107fae:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0107fb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0107fb4:	25 00 00 c0 ff       	and    $0xffc00000,%eax
}
f0107fb9:	c9                   	leave  
f0107fba:	c3                   	ret    

f0107fbb <env_table_ws_get_time_stamp>:


inline uint32 env_table_ws_get_time_stamp(struct Env* e, uint32 entry_index)
{
f0107fbb:	55                   	push   %ebp
f0107fbc:	89 e5                	mov    %esp,%ebp
f0107fbe:	83 ec 08             	sub    $0x8,%esp
	assert(entry_index >= 0 && entry_index < __TWS_MAX_SIZE);
f0107fc1:	83 7d 0c 31          	cmpl   $0x31,0xc(%ebp)
f0107fc5:	76 19                	jbe    f0107fe0 <env_table_ws_get_time_stamp+0x25>
f0107fc7:	68 10 56 13 f0       	push   $0xf0135610
f0107fcc:	68 36 54 13 f0       	push   $0xf0135436
f0107fd1:	68 d1 00 00 00       	push   $0xd1
f0107fd6:	68 4c 54 13 f0       	push   $0xf013544c
f0107fdb:	e8 c6 81 ff ff       	call   f01001a6 <_panic>
	return e->__ptr_tws[entry_index].time_stamp;
f0107fe0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0107fe3:	8b 55 0c             	mov    0xc(%ebp),%edx
f0107fe6:	89 d0                	mov    %edx,%eax
f0107fe8:	01 c0                	add    %eax,%eax
f0107fea:	01 d0                	add    %edx,%eax
f0107fec:	c1 e0 03             	shl    $0x3,%eax
f0107fef:	01 c8                	add    %ecx,%eax
f0107ff1:	05 40 d5 01 00       	add    $0x1d540,%eax
f0107ff6:	8b 00                	mov    (%eax),%eax
}
f0107ff8:	c9                   	leave  
f0107ff9:	c3                   	ret    

f0107ffa <env_table_ws_is_entry_empty>:

inline uint32 env_table_ws_is_entry_empty(struct Env* e, uint32 entry_index)
{
f0107ffa:	55                   	push   %ebp
f0107ffb:	89 e5                	mov    %esp,%ebp
	return e->__ptr_tws[entry_index].empty;
f0107ffd:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0108000:	8b 55 0c             	mov    0xc(%ebp),%edx
f0108003:	89 d0                	mov    %edx,%eax
f0108005:	01 c0                	add    %eax,%eax
f0108007:	01 d0                	add    %edx,%eax
f0108009:	c1 e0 03             	shl    $0x3,%eax
f010800c:	01 c8                	add    %ecx,%eax
f010800e:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0108013:	8a 00                	mov    (%eax),%al
f0108015:	0f b6 c0             	movzbl %al,%eax
}
f0108018:	5d                   	pop    %ebp
f0108019:	c3                   	ret    

f010801a <cut_paste_WS>:
///=================================================================================================

// Change WS Sizes For PRIORITY  =========================================================

void cut_paste_WS(struct WorkingSetElement* newWS, int newSize, struct Env* e)
{
f010801a:	55                   	push   %ebp
f010801b:	89 e5                	mov    %esp,%ebp
f010801d:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] cut_paste_WS
	//your code is here, remove the panic and write your code
	panic("cut_paste_WS() is not implemented yet...!!");
f0108020:	83 ec 04             	sub    $0x4,%esp
f0108023:	68 44 56 13 f0       	push   $0xf0135644
f0108028:	68 e5 00 00 00       	push   $0xe5
f010802d:	68 4c 54 13 f0       	push   $0xf013544c
f0108032:	e8 6f 81 ff ff       	call   f01001a6 <_panic>

f0108037 <double_WS_Size>:
}

void double_WS_Size(struct Env* e, int isOneTimeOnly)
{
f0108037:	55                   	push   %ebp
f0108038:	89 e5                	mov    %esp,%ebp
f010803a:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] double_WS_Size
	//your code is here, remove the panic and write your code
	panic("double_WS_Size() is not implemented yet...!!");
f010803d:	83 ec 04             	sub    $0x4,%esp
f0108040:	68 70 56 13 f0       	push   $0xf0135670
f0108045:	68 ec 00 00 00       	push   $0xec
f010804a:	68 4c 54 13 f0       	push   $0xf013544c
f010804f:	e8 52 81 ff ff       	call   f01001a6 <_panic>

f0108054 <half_WS_Size>:
}

void half_WS_Size(struct Env* e, int isImmidiate)
{
f0108054:	55                   	push   %ebp
f0108055:	89 e5                	mov    %esp,%ebp
f0108057:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] half_WS_Size
	//your code is here, remove the panic and write your code
	panic("half_WS_Size() is not implemented yet...!!");
f010805a:	83 ec 04             	sub    $0x4,%esp
f010805d:	68 a0 56 13 f0       	push   $0xf01356a0
f0108062:	68 f3 00 00 00       	push   $0xf3
f0108067:	68 4c 54 13 f0       	push   $0xf013544c
f010806c:	e8 35 81 ff ff       	call   f01001a6 <_panic>

f0108071 <cut_paste_pages>:
//===============================
//This function should cut-paste the given number of pages from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int cut_paste_pages(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 num_of_pages)
{
f0108071:	55                   	push   %ebp
f0108072:	89 e5                	mov    %esp,%ebp
f0108074:	83 ec 58             	sub    $0x58,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] cut_paste_pages
	// Write your code here, remove the pani`c and write your code
	//panic("cut_paste_pages() is not implemented yet...!!");


	uint32 startAddDest = ROUNDDOWN(dest_va,PAGE_SIZE);
f0108077:	8b 45 10             	mov    0x10(%ebp),%eax
f010807a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010807d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0108080:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108085:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 endAddDest = ROUNDUP(dest_va + (num_of_pages * PAGE_SIZE),PAGE_SIZE);
f0108088:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f010808f:	8b 45 14             	mov    0x14(%ebp),%eax
f0108092:	c1 e0 0c             	shl    $0xc,%eax
f0108095:	89 c2                	mov    %eax,%edx
f0108097:	8b 45 10             	mov    0x10(%ebp),%eax
f010809a:	01 c2                	add    %eax,%edx
f010809c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010809f:	01 d0                	add    %edx,%eax
f01080a1:	48                   	dec    %eax
f01080a2:	89 45 dc             	mov    %eax,-0x24(%ebp)
f01080a5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01080a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01080ad:	f7 75 e0             	divl   -0x20(%ebp)
f01080b0:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01080b3:	29 d0                	sub    %edx,%eax
f01080b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *ptr_page_table2 = NULL;
f01080b8:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
	for(uint32 i = startAddDest; i < endAddDest; i += PAGE_SIZE)
f01080bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01080c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01080c5:	eb 77                	jmp    f010813e <cut_paste_pages+0xcd>
	{
		cprintf(" add is %x\n",i);
f01080c7:	83 ec 08             	sub    $0x8,%esp
f01080ca:	ff 75 f4             	pushl  -0xc(%ebp)
f01080cd:	68 cc 56 13 f0       	push   $0xf01356cc
f01080d2:	e8 56 8b ff ff       	call   f0100c2d <cprintf>
f01080d7:	83 c4 10             	add    $0x10,%esp
		uint32 *ptr_page_table = NULL;
f01080da:	c7 45 b0 00 00 00 00 	movl   $0x0,-0x50(%ebp)
		struct FrameInfo* ptr_frame_info = get_frame_info(ptr_page_directory, i, &ptr_page_table);
f01080e1:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01080e6:	83 ec 04             	sub    $0x4,%esp
f01080e9:	8d 55 b0             	lea    -0x50(%ebp),%edx
f01080ec:	52                   	push   %edx
f01080ed:	ff 75 f4             	pushl  -0xc(%ebp)
f01080f0:	50                   	push   %eax
f01080f1:	e8 13 eb ff ff       	call   f0106c09 <get_frame_info>
f01080f6:	83 c4 10             	add    $0x10,%esp
f01080f9:	89 45 d0             	mov    %eax,-0x30(%ebp)

		if (ptr_frame_info != NULL)// check page entry
f01080fc:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
f0108100:	74 1a                	je     f010811c <cut_paste_pages+0xab>
		{
			cprintf("page entry\n");
f0108102:	83 ec 0c             	sub    $0xc,%esp
f0108105:	68 d8 56 13 f0       	push   $0xf01356d8
f010810a:	e8 1e 8b ff ff       	call   f0100c2d <cprintf>
f010810f:	83 c4 10             	add    $0x10,%esp
				return -1;
f0108112:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0108117:	e9 1f 01 00 00       	jmp    f010823b <cut_paste_pages+0x1ca>
		}
		if ( ptr_page_table ==  NULL) // va has no page table
f010811c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f010811f:	85 c0                	test   %eax,%eax
f0108121:	75 14                	jne    f0108137 <cut_paste_pages+0xc6>
		{
//			cprintf("page table\n");
//			uint32 *ptr_page_table = NULL;
//			get_page_table(ptr_page_directory, i, &ptr_page_table);
//			cprintf("befor %x\n",ptr_page_table);
			create_page_table(ptr_page_directory, i);
f0108123:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0108128:	83 ec 08             	sub    $0x8,%esp
f010812b:	ff 75 f4             	pushl  -0xc(%ebp)
f010812e:	50                   	push   %eax
f010812f:	e8 43 e9 ff ff       	call   f0106a77 <create_page_table>
f0108134:	83 c4 10             	add    $0x10,%esp


	uint32 startAddDest = ROUNDDOWN(dest_va,PAGE_SIZE);
	uint32 endAddDest = ROUNDUP(dest_va + (num_of_pages * PAGE_SIZE),PAGE_SIZE);
	uint32 *ptr_page_table2 = NULL;
	for(uint32 i = startAddDest; i < endAddDest; i += PAGE_SIZE)
f0108137:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f010813e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0108141:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0108144:	72 81                	jb     f01080c7 <cut_paste_pages+0x56>
		}
	}



	uint32 startAddSource = ROUNDDOWN(source_va,PAGE_SIZE);
f0108146:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108149:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010814c:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010814f:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0108154:	89 45 c8             	mov    %eax,-0x38(%ebp)
	uint32 endAddSource = ROUNDUP(source_va + (num_of_pages * PAGE_SIZE),PAGE_SIZE);
f0108157:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f010815e:	8b 45 14             	mov    0x14(%ebp),%eax
f0108161:	c1 e0 0c             	shl    $0xc,%eax
f0108164:	89 c2                	mov    %eax,%edx
f0108166:	8b 45 0c             	mov    0xc(%ebp),%eax
f0108169:	01 c2                	add    %eax,%edx
f010816b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010816e:	01 d0                	add    %edx,%eax
f0108170:	48                   	dec    %eax
f0108171:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0108174:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108177:	ba 00 00 00 00       	mov    $0x0,%edx
f010817c:	f7 75 c4             	divl   -0x3c(%ebp)
f010817f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108182:	29 d0                	sub    %edx,%eax
f0108184:	89 45 bc             	mov    %eax,-0x44(%ebp)
	uint32 tmp_dest_va = dest_va;
f0108187:	8b 45 10             	mov    0x10(%ebp),%eax
f010818a:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for(uint32 i = startAddSource; i < endAddSource; i += PAGE_SIZE)
f010818d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0108190:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0108193:	e9 92 00 00 00       	jmp    f010822a <cut_paste_pages+0x1b9>
	{
	//	int perm_to_set = pt_get_page_permissions(ptr_page_directory, i); // get perm from source
//		int perm_to_clear = pt_get_page_permissions(ptr_page_directory, tmp_dest_va);
	//	cprintf("perm error\n");
		uint32 *ptr_page_table_src = NULL;
f0108198:	c7 45 ac 00 00 00 00 	movl   $0x0,-0x54(%ebp)
		uint32 *ptr_page_table_dest = NULL;
f010819f:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
		struct FrameInfo * ptr_frame_info = get_frame_info(ptr_page_directory, tmp_dest_va, &ptr_page_table_dest);
f01081a6:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01081ab:	83 ec 04             	sub    $0x4,%esp
f01081ae:	8d 55 a8             	lea    -0x58(%ebp),%edx
f01081b1:	52                   	push   %edx
f01081b2:	ff 75 f0             	pushl  -0x10(%ebp)
f01081b5:	50                   	push   %eax
f01081b6:	e8 4e ea ff ff       	call   f0106c09 <get_frame_info>
f01081bb:	83 c4 10             	add    $0x10,%esp
f01081be:	89 45 b8             	mov    %eax,-0x48(%ebp)
		struct FrameInfo * ptr_frame_info2 = get_frame_info(ptr_page_directory, i, &ptr_page_table_src);
f01081c1:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01081c6:	83 ec 04             	sub    $0x4,%esp
f01081c9:	8d 55 ac             	lea    -0x54(%ebp),%edx
f01081cc:	52                   	push   %edx
f01081cd:	ff 75 ec             	pushl  -0x14(%ebp)
f01081d0:	50                   	push   %eax
f01081d1:	e8 33 ea ff ff       	call   f0106c09 <get_frame_info>
f01081d6:	83 c4 10             	add    $0x10,%esp
f01081d9:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		//map_frame(ptr_page_directory, ptr_frame_info, tmp_dest_va, perm_to_set); // update perm. of dest.
		//cprintf("perm error2\n");
//		pt_set_page_permissions(ptr_page_directory,tmp_dest_va,perm_to_set,perm_to_clear);
		ptr_page_table_dest[PTX(tmp_dest_va)] = ptr_page_table_src[PTX(i)];
f01081dc:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01081df:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01081e2:	c1 ea 0c             	shr    $0xc,%edx
f01081e5:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f01081eb:	c1 e2 02             	shl    $0x2,%edx
f01081ee:	01 c2                	add    %eax,%edx
f01081f0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01081f3:	8b 4d ec             	mov    -0x14(%ebp),%ecx
f01081f6:	c1 e9 0c             	shr    $0xc,%ecx
f01081f9:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01081ff:	c1 e1 02             	shl    $0x2,%ecx
f0108202:	01 c8                	add    %ecx,%eax
f0108204:	8b 00                	mov    (%eax),%eax
f0108206:	89 02                	mov    %eax,(%edx)

		unmap_frame(ptr_page_directory, i);
f0108208:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f010820d:	83 ec 08             	sub    $0x8,%esp
f0108210:	ff 75 ec             	pushl  -0x14(%ebp)
f0108213:	50                   	push   %eax
f0108214:	e8 60 ea ff ff       	call   f0106c79 <unmap_frame>
f0108219:	83 c4 10             	add    $0x10,%esp
//		free_frame(to_frame_info(virtual_to_physical(ptr_page_directory, i)));
	//	cprintf("perm error3\n");

		tmp_dest_va += PAGE_SIZE;
f010821c:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)

	uint32 startAddSource = ROUNDDOWN(source_va,PAGE_SIZE);
	uint32 endAddSource = ROUNDUP(source_va + (num_of_pages * PAGE_SIZE),PAGE_SIZE);
	uint32 tmp_dest_va = dest_va;

	for(uint32 i = startAddSource; i < endAddSource; i += PAGE_SIZE)
f0108223:	81 45 ec 00 10 00 00 	addl   $0x1000,-0x14(%ebp)
f010822a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010822d:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0108230:	0f 82 62 ff ff ff    	jb     f0108198 <cut_paste_pages+0x127>
		tmp_dest_va += PAGE_SIZE;
	}



	return 0;
f0108236:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010823b:	c9                   	leave  
f010823c:	c3                   	ret    

f010823d <copy_paste_chunk>:
//===============================
//This function should copy-paste the given size from source_va to dest_va
//if the page table at any destination page in the range is not exist, it should create it
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int copy_paste_chunk(uint32* page_directory, uint32 source_va, uint32 dest_va, uint32 size)
{
f010823d:	55                   	push   %ebp
f010823e:	89 e5                	mov    %esp,%ebp
f0108240:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] copy_paste_chunk
	// Write your code here, remove the panic and write your code
	panic("copy_paste_chunk() is not implemented yet...!!");
f0108243:	83 ec 04             	sub    $0x4,%esp
f0108246:	68 e4 56 13 f0       	push   $0xf01356e4
f010824b:	6a 65                	push   $0x65
f010824d:	68 13 57 13 f0       	push   $0xf0135713
f0108252:	e8 4f 7f ff ff       	call   f01001a6 <_panic>

f0108257 <share_chunk>:
// 3) SHARE RANGE IN RAM:
//===============================
//This function should share the given size from dest_va with the source_va
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int share_chunk(uint32* page_directory, uint32 source_va,uint32 dest_va, uint32 size, uint32 perms)
{
f0108257:	55                   	push   %ebp
f0108258:	89 e5                	mov    %esp,%ebp
f010825a:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] share_chunk
	// Write your code here, remove the panic and write your code
	panic("share_chunk() is not implemented yet...!!");
f010825d:	83 ec 04             	sub    $0x4,%esp
f0108260:	68 30 57 13 f0       	push   $0xf0135730
f0108265:	6a 71                	push   $0x71
f0108267:	68 13 57 13 f0       	push   $0xf0135713
f010826c:	e8 35 7f ff ff       	call   f01001a6 <_panic>

f0108271 <allocate_chunk>:
// 4) ALLOCATE CHUNK IN RAM:
//===============================
//This function should allocate in RAM the given range [va, va+size)
//Hint: use ROUNDDOWN/ROUNDUP macros to align the addresses
int allocate_chunk(uint32* page_directory, uint32 va, uint32 size, uint32 perms)
{
f0108271:	55                   	push   %ebp
f0108272:	89 e5                	mov    %esp,%ebp
f0108274:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2] [CHUNK OPERATIONS] allocate_chunk
	// Write your code here, remove the panic and write your code
	panic("allocate_chunk() is not implemented yet...!!");
f0108277:	83 ec 04             	sub    $0x4,%esp
f010827a:	68 5c 57 13 f0       	push   $0xf013575c
f010827f:	6a 7d                	push   $0x7d
f0108281:	68 13 57 13 f0       	push   $0xf0135713
f0108286:	e8 1b 7f ff ff       	call   f01001a6 <_panic>

f010828b <calculate_allocated_space>:
/*BONUS*/
//=====================================
// 5) CALCULATE ALLOCATED SPACE IN RAM:
//=====================================
void calculate_allocated_space(uint32* page_directory, uint32 sva, uint32 eva, uint32 *num_tables, uint32 *num_pages)
{
f010828b:	55                   	push   %ebp
f010828c:	89 e5                	mov    %esp,%ebp
f010828e:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_allocated_space
	// Write your code here, remove the panic and write your code
	panic("calculate_allocated_space() is not implemented yet...!!");
f0108291:	83 ec 04             	sub    $0x4,%esp
f0108294:	68 8c 57 13 f0       	push   $0xf013578c
f0108299:	68 88 00 00 00       	push   $0x88
f010829e:	68 13 57 13 f0       	push   $0xf0135713
f01082a3:	e8 fe 7e ff ff       	call   f01001a6 <_panic>

f01082a8 <calculate_required_frames>:
// calculate_required_frames:
// calculates the new allocation size required for given address+size,
// we are not interested in knowing if pages or tables actually exist in memory or the page file,
// we are interested in knowing whether they are allocated or not.
uint32 calculate_required_frames(uint32* page_directory, uint32 sva, uint32 size)
{
f01082a8:	55                   	push   %ebp
f01082a9:	89 e5                	mov    %esp,%ebp
f01082ab:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS2 - BONUS] [CHUNK OPERATIONS] calculate_required_frames
	// Write your code here, remove the panic and write your code
	panic("calculate_required_frames() is not implemented yet...!!");
f01082ae:	83 ec 04             	sub    $0x4,%esp
f01082b1:	68 c4 57 13 f0       	push   $0xf01357c4
f01082b6:	68 97 00 00 00       	push   $0x97
f01082bb:	68 13 57 13 f0       	push   $0xf0135713
f01082c0:	e8 e1 7e ff ff       	call   f01001a6 <_panic>

f01082c5 <allocate_user_mem>:

//=====================================
// 1) ALLOCATE USER MEMORY:
//=====================================
void allocate_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01082c5:	55                   	push   %ebp
f01082c6:	89 e5                	mov    %esp,%ebp
f01082c8:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("allocate_user_mem() is not implemented yet...!!");
f01082cb:	83 ec 04             	sub    $0x4,%esp
f01082ce:	68 fc 57 13 f0       	push   $0xf01357fc
f01082d3:	68 ac 00 00 00       	push   $0xac
f01082d8:	68 13 57 13 f0       	push   $0xf0135713
f01082dd:	e8 c4 7e ff ff       	call   f01001a6 <_panic>

f01082e2 <free_user_mem>:

//=====================================
// 2) FREE USER MEMORY:
//=====================================
void free_user_mem(struct Env* e, uint32 virtual_address, uint32 size)
{
f01082e2:	55                   	push   %ebp
f01082e3:	89 e5                	mov    %esp,%ebp
f01082e5:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [USER HEAP - KERNEL SIDE] free_user_mem
	// Write your code here, remove the panic and write your code
	panic("free_user_mem() is not implemented yet...!!");
f01082e8:	83 ec 04             	sub    $0x4,%esp
f01082eb:	68 2c 58 13 f0       	push   $0xf013582c
f01082f0:	68 b6 00 00 00       	push   $0xb6
f01082f5:	68 13 57 13 f0       	push   $0xf0135713
f01082fa:	e8 a7 7e ff ff       	call   f01001a6 <_panic>

f01082ff <__free_user_mem_with_buffering>:

//=====================================
// 2) FREE USER MEMORY (BUFFERING):
//=====================================
void __free_user_mem_with_buffering(struct Env* e, uint32 virtual_address, uint32 size)
{
f01082ff:	55                   	push   %ebp
f0108300:	89 e5                	mov    %esp,%ebp
f0108302:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("__free_user_mem_with_buffering() is not implemented yet...!!");
f0108305:	83 ec 04             	sub    $0x4,%esp
f0108308:	68 58 58 13 f0       	push   $0xf0135858
f010830d:	68 c4 00 00 00       	push   $0xc4
f0108312:	68 13 57 13 f0       	push   $0xf0135713
f0108317:	e8 8a 7e ff ff       	call   f01001a6 <_panic>

f010831c <move_user_mem>:

//=====================================
// 3) MOVE USER MEMORY:
//=====================================
void move_user_mem(struct Env* e, uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010831c:	55                   	push   %ebp
f010831d:	89 e5                	mov    %esp,%ebp
f010831f:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [USER HEAP - KERNEL SIDE] move_user_mem
	//your code is here, remove the panic and write your code
	panic("move_user_mem() is not implemented yet...!!");
f0108322:	83 ec 04             	sub    $0x4,%esp
f0108325:	68 98 58 13 f0       	push   $0xf0135898
f010832a:	68 d4 00 00 00       	push   $0xd4
f010832f:	68 13 57 13 f0       	push   $0xf0135713
f0108334:	e8 6d 7e ff ff       	call   f01001a6 <_panic>

f0108339 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f0108339:	55                   	push   %ebp
f010833a:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010833c:	8b 45 08             	mov    0x8(%ebp),%eax
f010833f:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f0108345:	29 d0                	sub    %edx,%eax
f0108347:	c1 f8 03             	sar    $0x3,%eax
f010834a:	89 c2                	mov    %eax,%edx
f010834c:	89 d0                	mov    %edx,%eax
f010834e:	c1 e0 02             	shl    $0x2,%eax
f0108351:	01 d0                	add    %edx,%eax
f0108353:	c1 e0 02             	shl    $0x2,%eax
f0108356:	01 d0                	add    %edx,%eax
f0108358:	c1 e0 02             	shl    $0x2,%eax
f010835b:	01 d0                	add    %edx,%eax
f010835d:	89 c1                	mov    %eax,%ecx
f010835f:	c1 e1 08             	shl    $0x8,%ecx
f0108362:	01 c8                	add    %ecx,%eax
f0108364:	89 c1                	mov    %eax,%ecx
f0108366:	c1 e1 10             	shl    $0x10,%ecx
f0108369:	01 c8                	add    %ecx,%eax
f010836b:	01 c0                	add    %eax,%eax
f010836d:	01 d0                	add    %edx,%eax
}
f010836f:	5d                   	pop    %ebp
f0108370:	c3                   	ret    

f0108371 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f0108371:	55                   	push   %ebp
f0108372:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f0108374:	ff 75 08             	pushl  0x8(%ebp)
f0108377:	e8 bd ff ff ff       	call   f0108339 <to_frame_number>
f010837c:	83 c4 04             	add    $0x4,%esp
f010837f:	c1 e0 0c             	shl    $0xc,%eax
}
f0108382:	c9                   	leave  
f0108383:	c3                   	ret    

f0108384 <env_create>:
//===============================
// 1) CREATE NEW ENV & LOAD IT:
//===============================
// Allocates a new env and loads the named user program into it.
struct Env* env_create(char* user_program_name, unsigned int page_WS_size, unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f0108384:	55                   	push   %ebp
f0108385:	89 e5                	mov    %esp,%ebp
f0108387:	57                   	push   %edi
f0108388:	56                   	push   %esi
f0108389:	53                   	push   %ebx
f010838a:	81 ec fc 00 00 00    	sub    $0xfc,%esp
	//[1] get pointer to the start of the "user_program_name" program in memory
	// Hint: use "get_user_program_info" function,
	// you should set the following "ptr_program_start" by the start address of the user program
	uint8* ptr_program_start = 0;
f0108390:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)

	struct UserProgramInfo* ptr_user_program_info = get_user_program_info(user_program_name);
f0108397:	83 ec 0c             	sub    $0xc,%esp
f010839a:	ff 75 08             	pushl  0x8(%ebp)
f010839d:	e8 c8 22 00 00       	call   f010a66a <get_user_program_info>
f01083a2:	83 c4 10             	add    $0x10,%esp
f01083a5:	89 45 b4             	mov    %eax,-0x4c(%ebp)
	if(ptr_user_program_info == 0) return NULL;
f01083a8:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f01083ac:	75 0a                	jne    f01083b8 <env_create+0x34>
f01083ae:	b8 00 00 00 00       	mov    $0x0,%eax
f01083b3:	e9 8f 0c 00 00       	jmp    f0109047 <env_create+0xcc3>
	ptr_program_start = ptr_user_program_info->ptr_start ;
f01083b8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01083bb:	8b 40 08             	mov    0x8(%eax),%eax
f01083be:	89 45 b8             	mov    %eax,-0x48(%ebp)


	//[2] allocate new environment, (from the free environment list)
	//if there's no one, return NULL
	// Hint: use "allocate_environment" function
	struct Env* e = NULL;
f01083c1:	c7 85 44 ff ff ff 00 	movl   $0x0,-0xbc(%ebp)
f01083c8:	00 00 00 
	if(allocate_environment(&e) < 0)
f01083cb:	83 ec 0c             	sub    $0xc,%esp
f01083ce:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f01083d4:	50                   	push   %eax
f01083d5:	e8 32 10 00 00       	call   f010940c <allocate_environment>
f01083da:	83 c4 10             	add    $0x10,%esp
f01083dd:	85 c0                	test   %eax,%eax
f01083df:	79 0a                	jns    f01083eb <env_create+0x67>
	{
		return 0;
f01083e1:	b8 00 00 00 00       	mov    $0x0,%eax
f01083e6:	e9 5c 0c 00 00       	jmp    f0109047 <env_create+0xcc3>
	}

	//[2.5 - 2012] Set program name inside the environment
	//e->prog_name = ptr_user_program_info->name ;
	//2017: changed to fixed size array to be abale to access it from user side
	if (strlen(ptr_user_program_info->name) < PROGNAMELEN)
f01083eb:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01083ee:	8b 00                	mov    (%eax),%eax
f01083f0:	83 ec 0c             	sub    $0xc,%esp
f01083f3:	50                   	push   %eax
f01083f4:	e8 44 80 02 00       	call   f013043d <strlen>
f01083f9:	83 c4 10             	add    $0x10,%esp
f01083fc:	83 f8 3f             	cmp    $0x3f,%eax
f01083ff:	7f 20                	jg     f0108421 <env_create+0x9d>
		strcpy(e->prog_name, ptr_user_program_info->name);
f0108401:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108404:	8b 00                	mov    (%eax),%eax
f0108406:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f010840c:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f0108412:	83 ec 08             	sub    $0x8,%esp
f0108415:	50                   	push   %eax
f0108416:	52                   	push   %edx
f0108417:	e8 70 80 02 00       	call   f013048c <strcpy>
f010841c:	83 c4 10             	add    $0x10,%esp
f010841f:	eb 20                	jmp    f0108441 <env_create+0xbd>
	else
		strncpy(e->prog_name, ptr_user_program_info->name, PROGNAMELEN-1);
f0108421:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0108424:	8b 00                	mov    (%eax),%eax
f0108426:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f010842c:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f0108432:	83 ec 04             	sub    $0x4,%esp
f0108435:	6a 3f                	push   $0x3f
f0108437:	50                   	push   %eax
f0108438:	52                   	push   %edx
f0108439:	e8 7c 80 02 00       	call   f01304ba <strncpy>
f010843e:	83 c4 10             	add    $0x10,%esp
		phys_user_page_directory = kheap_physical_address((uint32)ptr_user_page_directory);
	}
#else
	{
		int r;
		struct FrameInfo *p = NULL;
f0108441:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f0108448:	00 00 00 

		allocate_frame(&p) ;
f010844b:	83 ec 0c             	sub    $0xc,%esp
f010844e:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f0108454:	50                   	push   %eax
f0108455:	e8 58 e3 ff ff       	call   f01067b2 <allocate_frame>
f010845a:	83 c4 10             	add    $0x10,%esp
		p->references = 1;
f010845d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0108463:	66 c7 40 08 01 00    	movw   $0x1,0x8(%eax)

		ptr_user_page_directory = STATIC_KERNEL_VIRTUAL_ADDRESS(to_physical_address(p));
f0108469:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010846f:	83 ec 0c             	sub    $0xc,%esp
f0108472:	50                   	push   %eax
f0108473:	e8 f9 fe ff ff       	call   f0108371 <to_physical_address>
f0108478:	83 c4 10             	add    $0x10,%esp
f010847b:	89 45 b0             	mov    %eax,-0x50(%ebp)
f010847e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0108481:	c1 e8 0c             	shr    $0xc,%eax
f0108484:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0108487:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f010848c:	39 45 ac             	cmp    %eax,-0x54(%ebp)
f010848f:	72 17                	jb     f01084a8 <env_create+0x124>
f0108491:	ff 75 b0             	pushl  -0x50(%ebp)
f0108494:	68 c4 58 13 f0       	push   $0xf01358c4
f0108499:	68 8d 00 00 00       	push   $0x8d
f010849e:	68 f3 58 13 f0       	push   $0xf01358f3
f01084a3:	e8 fe 7c ff ff       	call   f01001a6 <_panic>
f01084a8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01084ab:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01084b0:	89 45 a8             	mov    %eax,-0x58(%ebp)
		phys_user_page_directory = to_physical_address(p);
f01084b3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01084b9:	83 ec 0c             	sub    $0xc,%esp
f01084bc:	50                   	push   %eax
f01084bd:	e8 af fe ff ff       	call   f0108371 <to_physical_address>
f01084c2:	83 c4 10             	add    $0x10,%esp
f01084c5:	89 45 a4             	mov    %eax,-0x5c(%ebp)
#endif
	//[4] initialize the new environment by the virtual address of the page directory
	// Hint: use "initialize_environment" function

	//2016
	e->page_WS_max_size = page_WS_size;
f01084c8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01084ce:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084d1:	89 50 74             	mov    %edx,0x74(%eax)

	//2020
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f01084d4:	83 ec 0c             	sub    $0xc,%esp
f01084d7:	6a 02                	push   $0x2
f01084d9:	e8 a1 4d 00 00       	call   f010d27f <isPageReplacmentAlgorithmLRU>
f01084de:	83 c4 10             	add    $0x10,%esp
f01084e1:	85 c0                	test   %eax,%eax
f01084e3:	74 21                	je     f0108506 <env_create+0x182>
	{
		e->SecondListSize = LRU_second_list_size;
f01084e5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01084eb:	8b 55 10             	mov    0x10(%ebp),%edx
f01084ee:	89 90 a4 ea 01 00    	mov    %edx,0x1eaa4(%eax)
		e->ActiveListSize = page_WS_size - LRU_second_list_size;
f01084f4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01084fa:	8b 55 0c             	mov    0xc(%ebp),%edx
f01084fd:	2b 55 10             	sub    0x10(%ebp),%edx
f0108500:	89 90 a0 ea 01 00    	mov    %edx,0x1eaa0(%eax)
	}

	//2018
	if (percent_WS_pages_to_remove == 0)	// If not entered as input, 0 as default value
f0108506:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
f010850a:	75 12                	jne    f010851e <env_create+0x19a>
		e->percentage_of_WS_pages_to_be_removed = DEFAULT_PERCENT_OF_PAGE_WS_TO_REMOVE;
f010850c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108512:	c7 80 5c da 01 00 0a 	movl   $0xa,0x1da5c(%eax)
f0108519:	00 00 00 
f010851c:	eb 0f                	jmp    f010852d <env_create+0x1a9>
	else
		e->percentage_of_WS_pages_to_be_removed = percent_WS_pages_to_remove;
f010851e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108524:	8b 55 14             	mov    0x14(%ebp),%edx
f0108527:	89 90 5c da 01 00    	mov    %edx,0x1da5c(%eax)

	initialize_environment(e, ptr_user_page_directory, phys_user_page_directory);
f010852d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108533:	83 ec 04             	sub    $0x4,%esp
f0108536:	ff 75 a4             	pushl  -0x5c(%ebp)
f0108539:	ff 75 a8             	pushl  -0x58(%ebp)
f010853c:	50                   	push   %eax
f010853d:	e8 ed 16 00 00       	call   f0109c2f <initialize_environment>
f0108542:	83 c4 10             	add    $0x10,%esp

static __inline uint32
rcr3(void)
{
	uint32 val;
	__asm __volatile("movl %%cr3,%0" : "=r" (val));
f0108545:	0f 20 d8             	mov    %cr3,%eax
f0108548:	89 45 98             	mov    %eax,-0x68(%ebp)
	return val;
f010854b:	8b 45 98             	mov    -0x68(%ebp),%eax
	// 	usually size_in_file < or = size_in_memory
	//	4- uint8 *virtual_address: start virtual address that this segment should be copied to it

	//[6] switch to user page directory
	// Hint: use rcr3() and lcr3()
	uint32 kern_phys_pgdir = rcr3() ;
f010854e:	89 45 9c             	mov    %eax,-0x64(%ebp)
	lcr3(e->env_cr3) ;
f0108551:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108557:	8b 40 60             	mov    0x60(%eax),%eax
f010855a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0108560:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0108566:	0f 22 d8             	mov    %eax,%cr3

	//[7] load each program segment into user virtual space
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
f0108569:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int segment_counter=0;
f0108570:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
f0108577:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010857d:	8b 40 74             	mov    0x74(%eax),%eax
f0108580:	48                   	dec    %eax
f0108581:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 lastTableNumber=0xffffffff;
f0108584:	c7 85 40 ff ff ff ff 	movl   $0xffffffff,-0xc0(%ebp)
f010858b:	ff ff ff 

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f010858e:	8d 85 f8 fe ff ff    	lea    -0x108(%ebp),%eax
f0108594:	83 ec 08             	sub    $0x8,%esp
f0108597:	ff 75 b8             	pushl  -0x48(%ebp)
f010859a:	50                   	push   %eax
f010859b:	e8 ff 1d 00 00       	call   f010a39f <PROGRAM_SEGMENT_FIRST>
f01085a0:	83 c4 0c             	add    $0xc,%esp
f01085a3:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f01085a9:	8d 95 f8 fe ff ff    	lea    -0x108(%ebp),%edx
f01085af:	b9 05 00 00 00       	mov    $0x5,%ecx
f01085b4:	89 c7                	mov    %eax,%edi
f01085b6:	89 d6                	mov    %edx,%esi
f01085b8:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01085ba:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f01085c0:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01085c3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01085c6:	8b 40 10             	mov    0x10(%eax),%eax
f01085c9:	83 f8 ff             	cmp    $0xffffffff,%eax
f01085cc:	75 07                	jne    f01085d5 <env_create+0x251>
f01085ce:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f01085d5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01085d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f01085db:	e9 24 03 00 00       	jmp    f0108904 <env_create+0x580>
	{
		segment_counter++;
f01085e0:	ff 45 e0             	incl   -0x20(%ebp)
		LOG_STRING("===============================================================================");
		LOG_STATMENT(cprintf("SEGMENT #%d, size_in_file = %d, size_in_memory= %d, dest va = %x",segment_counter,seg->size_in_file,
				seg->size_in_memory, seg->virtual_address));
		LOG_STRING("===============================================================================");

		uint32 allocated_pages=0;
f01085e3:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01085ea:	00 00 00 
		program_segment_alloc_map_copy_workingset(e, seg, &allocated_pages, remaining_ws_pages, &lastTableNumber);
f01085ed:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01085f3:	83 ec 0c             	sub    $0xc,%esp
f01085f6:	8d 95 40 ff ff ff    	lea    -0xc0(%ebp),%edx
f01085fc:	52                   	push   %edx
f01085fd:	ff 75 dc             	pushl  -0x24(%ebp)
f0108600:	8d 95 24 ff ff ff    	lea    -0xdc(%ebp),%edx
f0108606:	52                   	push   %edx
f0108607:	ff 75 e4             	pushl  -0x1c(%ebp)
f010860a:	50                   	push   %eax
f010860b:	e8 f4 0e 00 00       	call   f0109504 <program_segment_alloc_map_copy_workingset>
f0108610:	83 c4 20             	add    $0x20,%esp

		remaining_ws_pages -= allocated_pages;
f0108613:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0108619:	29 45 dc             	sub    %eax,-0x24(%ebp)
		LOG_STATMENT(cprintf("SEGMENT: allocated pages in WS = %d",allocated_pages));
		LOG_STATMENT(cprintf("SEGMENT: remaining WS pages after allocation = %d",remaining_ws_pages));


		///[1] temporary initialize 1st page in memory then writing it on page file
		uint32 dataSrc_va = (uint32) seg->ptr_start;
f010861c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010861f:	8b 00                	mov    (%eax),%eax
f0108621:	89 45 94             	mov    %eax,-0x6c(%ebp)
		uint32 seg_va = (uint32) seg->virtual_address ;
f0108624:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108627:	8b 40 0c             	mov    0xc(%eax),%eax
f010862a:	89 45 90             	mov    %eax,-0x70(%ebp)

		uint32 start_first_page = ROUNDDOWN(seg_va , PAGE_SIZE);
f010862d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108630:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0108633:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0108636:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010863b:	89 45 88             	mov    %eax,-0x78(%ebp)
		uint32 end_first_page = ROUNDUP(seg_va , PAGE_SIZE);
f010863e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f0108645:	8b 55 90             	mov    -0x70(%ebp),%edx
f0108648:	8b 45 84             	mov    -0x7c(%ebp),%eax
f010864b:	01 d0                	add    %edx,%eax
f010864d:	48                   	dec    %eax
f010864e:	89 45 80             	mov    %eax,-0x80(%ebp)
f0108651:	8b 45 80             	mov    -0x80(%ebp),%eax
f0108654:	ba 00 00 00 00       	mov    $0x0,%edx
f0108659:	f7 75 84             	divl   -0x7c(%ebp)
f010865c:	8b 45 80             	mov    -0x80(%ebp),%eax
f010865f:	29 d0                	sub    %edx,%eax
f0108661:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
		uint32 offset_first_page = seg_va  - start_first_page ;
f0108667:	8b 45 90             	mov    -0x70(%ebp),%eax
f010866a:	2b 45 88             	sub    -0x78(%ebp),%eax
f010866d:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		memset(ptr_temp_page , 0, PAGE_SIZE);
f0108673:	a1 e0 84 6e f0       	mov    0xf06e84e0,%eax
f0108678:	83 ec 04             	sub    $0x4,%esp
f010867b:	68 00 10 00 00       	push   $0x1000
f0108680:	6a 00                	push   $0x0
f0108682:	50                   	push   %eax
f0108683:	e8 a3 7f 02 00       	call   f013062b <memset>
f0108688:	83 c4 10             	add    $0x10,%esp
		uint8 *src_ptr =  (uint8*) dataSrc_va;
f010868b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010868e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
f0108691:	8b 15 e0 84 6e f0    	mov    0xf06e84e0,%edx
f0108697:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f010869d:	01 d0                	add    %edx,%eax
f010869f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f01086a2:	8b 45 90             	mov    -0x70(%ebp),%eax
f01086a5:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01086a8:	eb 13                	jmp    f01086bd <env_create+0x339>
		{
			*dst_ptr = *src_ptr ;
f01086aa:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01086ad:	8a 10                	mov    (%eax),%dl
f01086af:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01086b2:	88 10                	mov    %dl,(%eax)

		memset(ptr_temp_page , 0, PAGE_SIZE);
		uint8 *src_ptr =  (uint8*) dataSrc_va;
		uint8 *dst_ptr =  (uint8*) (ptr_temp_page + offset_first_page);
		int i;
		for (i = seg_va ; i < end_first_page ; i++, src_ptr++,dst_ptr++ )
f01086b4:	ff 45 cc             	incl   -0x34(%ebp)
f01086b7:	ff 45 d4             	incl   -0x2c(%ebp)
f01086ba:	ff 45 d0             	incl   -0x30(%ebp)
f01086bd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01086c0:	3b 85 7c ff ff ff    	cmp    -0x84(%ebp),%eax
f01086c6:	72 e2                	jb     f01086aa <env_create+0x326>
		{
			*dst_ptr = *src_ptr ;
		}

		if (pf_add_env_page(e, start_first_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01086c8:	8b 15 e0 84 6e f0    	mov    0xf06e84e0,%edx
f01086ce:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01086d4:	83 ec 04             	sub    $0x4,%esp
f01086d7:	52                   	push   %edx
f01086d8:	ff 75 88             	pushl  -0x78(%ebp)
f01086db:	50                   	push   %eax
f01086dc:	e8 43 ae ff ff       	call   f0103524 <pf_add_env_page>
f01086e1:	83 c4 10             	add    $0x10,%esp
f01086e4:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01086e7:	75 17                	jne    f0108700 <env_create+0x37c>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01086e9:	83 ec 04             	sub    $0x4,%esp
f01086ec:	68 10 59 13 f0       	push   $0xf0135910
f01086f1:	68 e1 00 00 00       	push   $0xe1
f01086f6:	68 f3 58 13 f0       	push   $0xf01358f3
f01086fb:	e8 a6 7a ff ff       	call   f01001a6 <_panic>
		//LOG_STRING(" -------------------- PAGE FILE: 1st page is written");


		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
f0108700:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108703:	8b 50 04             	mov    0x4(%eax),%edx
f0108706:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108709:	01 d0                	add    %edx,%eax
f010870b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0108711:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0108717:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010871c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
		uint32 end_last_page = seg_va  + seg->size_in_file;
f0108722:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108725:	8b 50 04             	mov    0x4(%eax),%edx
f0108728:	8b 45 90             	mov    -0x70(%ebp),%eax
f010872b:	01 d0                	add    %edx,%eax
f010872d:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108733:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0108739:	89 45 cc             	mov    %eax,-0x34(%ebp)
f010873c:	eb 43                	jmp    f0108781 <env_create+0x3fd>
		{
			if (pf_add_env_page(e, i, src_ptr) == E_NO_PAGE_FILE_SPACE)
f010873e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0108741:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108747:	83 ec 04             	sub    $0x4,%esp
f010874a:	ff 75 d4             	pushl  -0x2c(%ebp)
f010874d:	52                   	push   %edx
f010874e:	50                   	push   %eax
f010874f:	e8 d0 ad ff ff       	call   f0103524 <pf_add_env_page>
f0108754:	83 c4 10             	add    $0x10,%esp
f0108757:	83 f8 f8             	cmp    $0xfffffff8,%eax
f010875a:	75 17                	jne    f0108773 <env_create+0x3ef>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f010875c:	83 ec 04             	sub    $0x4,%esp
f010875f:	68 10 59 13 f0       	push   $0xf0135910
f0108764:	68 ee 00 00 00       	push   $0xee
f0108769:	68 f3 58 13 f0       	push   $0xf01358f3
f010876e:	e8 33 7a ff ff       	call   f01001a6 <_panic>
		///[2] Start writing the segment ,from 2nd page until before last page, to page file ...

		uint32 start_last_page = ROUNDDOWN(seg_va  + seg->size_in_file, PAGE_SIZE) ;
		uint32 end_last_page = seg_va  + seg->size_in_file;

		for (i = end_first_page ; i < start_last_page ; i+= PAGE_SIZE, src_ptr+= PAGE_SIZE)
f0108773:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f010877a:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f0108781:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0108784:	3b 85 70 ff ff ff    	cmp    -0x90(%ebp),%eax
f010878a:	72 b2                	jb     f010873e <env_create+0x3ba>
		}
		//LOG_STRING(" -------------------- PAGE FILE: 2nd page --> before last page are written");

		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
f010878c:	a1 e0 84 6e f0       	mov    0xf06e84e0,%eax
f0108791:	89 45 d0             	mov    %eax,-0x30(%ebp)
		memset(dst_ptr, 0, PAGE_SIZE);
f0108794:	83 ec 04             	sub    $0x4,%esp
f0108797:	68 00 10 00 00       	push   $0x1000
f010879c:	6a 00                	push   $0x0
f010879e:	ff 75 d0             	pushl  -0x30(%ebp)
f01087a1:	e8 85 7e 02 00       	call   f013062b <memset>
f01087a6:	83 c4 10             	add    $0x10,%esp

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01087a9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01087af:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01087b2:	eb 13                	jmp    f01087c7 <env_create+0x443>
		{
			*dst_ptr = *src_ptr;
f01087b4:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01087b7:	8a 10                	mov    (%eax),%dl
f01087b9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01087bc:	88 10                	mov    %dl,(%eax)
		///[3] temporary initialize last page in memory then writing it on page file

		dst_ptr =  (uint8*) ptr_temp_page;
		memset(dst_ptr, 0, PAGE_SIZE);

		for (i = start_last_page ; i < end_last_page ; i++, src_ptr++,dst_ptr++ )
f01087be:	ff 45 cc             	incl   -0x34(%ebp)
f01087c1:	ff 45 d4             	incl   -0x2c(%ebp)
f01087c4:	ff 45 d0             	incl   -0x30(%ebp)
f01087c7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01087ca:	3b 85 6c ff ff ff    	cmp    -0x94(%ebp),%eax
f01087d0:	72 e2                	jb     f01087b4 <env_create+0x430>
		{
			*dst_ptr = *src_ptr;
		}
		if (pf_add_env_page(e, start_last_page, ptr_temp_page) == E_NO_PAGE_FILE_SPACE)
f01087d2:	8b 15 e0 84 6e f0    	mov    0xf06e84e0,%edx
f01087d8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01087de:	83 ec 04             	sub    $0x4,%esp
f01087e1:	52                   	push   %edx
f01087e2:	ff b5 70 ff ff ff    	pushl  -0x90(%ebp)
f01087e8:	50                   	push   %eax
f01087e9:	e8 36 ad ff ff       	call   f0103524 <pf_add_env_page>
f01087ee:	83 c4 10             	add    $0x10,%esp
f01087f1:	83 f8 f8             	cmp    $0xfffffff8,%eax
f01087f4:	75 17                	jne    f010880d <env_create+0x489>
			panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f01087f6:	83 ec 04             	sub    $0x4,%esp
f01087f9:	68 10 59 13 f0       	push   $0xf0135910
f01087fe:	68 fd 00 00 00       	push   $0xfd
f0108803:	68 f3 58 13 f0       	push   $0xf01358f3
f0108808:	e8 99 79 ff ff       	call   f01001a6 <_panic>

		//LOG_STRING(" -------------------- PAGE FILE: last page is written");

		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
f010880d:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0108814:	10 00 00 
f0108817:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010881a:	8b 50 04             	mov    0x4(%eax),%edx
f010881d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108820:	01 c2                	add    %eax,%edx
f0108822:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0108828:	01 d0                	add    %edx,%eax
f010882a:	48                   	dec    %eax
f010882b:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0108831:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0108837:	ba 00 00 00 00       	mov    $0x0,%edx
f010883c:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0108842:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0108848:	29 d0                	sub    %edx,%eax
f010884a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;
f010884d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0108850:	8b 50 08             	mov    0x8(%eax),%edx
f0108853:	8b 45 90             	mov    -0x70(%ebp),%eax
f0108856:	01 d0                	add    %edx,%eax
f0108858:	2b 45 c8             	sub    -0x38(%ebp),%eax
f010885b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f0108861:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f0108868:	eb 41                	jmp    f01088ab <env_create+0x527>
		{
			if (pf_add_empty_env_page(e, start_remaining_area, 1) == E_NO_PAGE_FILE_SPACE)
f010886a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108870:	83 ec 04             	sub    $0x4,%esp
f0108873:	6a 01                	push   $0x1
f0108875:	ff 75 c8             	pushl  -0x38(%ebp)
f0108878:	50                   	push   %eax
f0108879:	e8 75 ab ff ff       	call   f01033f3 <pf_add_empty_env_page>
f010887e:	83 c4 10             	add    $0x10,%esp
f0108881:	83 f8 f8             	cmp    $0xfffffff8,%eax
f0108884:	75 17                	jne    f010889d <env_create+0x519>
				panic("ERROR: Page File OUT OF SPACE. can't load the program in Page file!!");
f0108886:	83 ec 04             	sub    $0x4,%esp
f0108889:	68 10 59 13 f0       	push   $0xf0135910
f010888e:	68 0a 01 00 00       	push   $0x10a
f0108893:	68 f3 58 13 f0       	push   $0xf01358f3
f0108898:	e8 09 79 ff ff       	call   f01001a6 <_panic>
		///[4] writing the remaining seg->size_in_memory pages to disk

		uint32 start_remaining_area = ROUNDUP(seg_va + seg->size_in_file,PAGE_SIZE) ;
		uint32 remainingLength = (seg_va + seg->size_in_memory) - start_remaining_area ;

		for (i=0 ; i < ROUNDUP(remainingLength,PAGE_SIZE) ;i+= PAGE_SIZE, start_remaining_area += PAGE_SIZE)
f010889d:	81 45 cc 00 10 00 00 	addl   $0x1000,-0x34(%ebp)
f01088a4:	81 45 c8 00 10 00 00 	addl   $0x1000,-0x38(%ebp)
f01088ab:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01088b2:	10 00 00 
f01088b5:	8b 95 60 ff ff ff    	mov    -0xa0(%ebp),%edx
f01088bb:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01088c1:	01 d0                	add    %edx,%eax
f01088c3:	48                   	dec    %eax
f01088c4:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01088ca:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01088d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01088d5:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01088db:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01088e1:	29 d0                	sub    %edx,%eax
f01088e3:	89 c2                	mov    %eax,%edx
f01088e5:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01088e8:	39 c2                	cmp    %eax,%edx
f01088ea:	0f 87 7a ff ff ff    	ja     f010886a <env_create+0x4e6>
	struct ProgramSegment* seg = NULL;  //use inside PROGRAM_SEGMENT_FOREACH as current segment information
	int segment_counter=0;
	uint32 remaining_ws_pages = (e->page_WS_max_size)-1; // we are reserving 1 page of WS for the stack that will be allocated just before the end of this function
	uint32 lastTableNumber=0xffffffff;

	PROGRAM_SEGMENT_FOREACH(seg, ptr_program_start)
f01088f0:	83 ec 08             	sub    $0x8,%esp
f01088f3:	ff 75 b8             	pushl  -0x48(%ebp)
f01088f6:	ff 75 e4             	pushl  -0x1c(%ebp)
f01088f9:	e8 96 19 00 00       	call   f010a294 <PROGRAM_SEGMENT_NEXT>
f01088fe:	83 c4 10             	add    $0x10,%esp
f0108901:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0108904:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f0108908:	0f 85 d2 fc ff ff    	jne    f01085e0 <env_create+0x25c>
		}
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
f010890e:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
	for(;i<(e->page_WS_max_size); i++)
f0108915:	e9 9c 00 00 00       	jmp    f01089b6 <env_create+0x632>
	{
		if(e->ptr_pageWorkingSet[i].empty == 0)
f010891a:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108920:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0108923:	89 d0                	mov    %edx,%eax
f0108925:	01 c0                	add    %eax,%eax
f0108927:	01 d0                	add    %edx,%eax
f0108929:	c1 e0 03             	shl    $0x3,%eax
f010892c:	01 c8                	add    %ecx,%eax
f010892e:	83 c0 7c             	add    $0x7c,%eax
f0108931:	8a 00                	mov    (%eax),%al
f0108933:	84 c0                	test   %al,%al
f0108935:	75 7c                	jne    f01089b3 <env_create+0x62f>
		{
			uint32 virtual_address = e->ptr_pageWorkingSet[i].virtual_address;
f0108937:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f010893d:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0108940:	89 d0                	mov    %edx,%eax
f0108942:	01 c0                	add    %eax,%eax
f0108944:	01 d0                	add    %edx,%eax
f0108946:	c1 e0 03             	shl    $0x3,%eax
f0108949:	01 c8                	add    %ecx,%eax
f010894b:	83 c0 78             	add    $0x78,%eax
f010894e:	8b 00                	mov    (%eax),%eax
f0108950:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
			uint32* ptr_page_table;

			//Here, page tables of all working set pages should be exist in memory
			//So, get_page_table should return the existing table
			get_page_table(e->env_page_directory, virtual_address, &ptr_page_table);
f0108956:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010895c:	8b 40 5c             	mov    0x5c(%eax),%eax
f010895f:	83 ec 04             	sub    $0x4,%esp
f0108962:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f0108968:	52                   	push   %edx
f0108969:	ff b5 54 ff ff ff    	pushl  -0xac(%ebp)
f010896f:	50                   	push   %eax
f0108970:	e8 fc df ff ff       	call   f0106971 <get_page_table>
f0108975:	83 c4 10             	add    $0x10,%esp
			ptr_page_table[PTX(virtual_address)] &= (~PERM_MODIFIED);
f0108978:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f010897e:	8b 95 54 ff ff ff    	mov    -0xac(%ebp),%edx
f0108984:	c1 ea 0c             	shr    $0xc,%edx
f0108987:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f010898d:	c1 e2 02             	shl    $0x2,%edx
f0108990:	01 d0                	add    %edx,%eax
f0108992:	8b 95 20 ff ff ff    	mov    -0xe0(%ebp),%edx
f0108998:	8b 8d 54 ff ff ff    	mov    -0xac(%ebp),%ecx
f010899e:	c1 e9 0c             	shr    $0xc,%ecx
f01089a1:	81 e1 ff 03 00 00    	and    $0x3ff,%ecx
f01089a7:	c1 e1 02             	shl    $0x2,%ecx
f01089aa:	01 ca                	add    %ecx,%edx
f01089ac:	8b 12                	mov    (%edx),%edx
f01089ae:	83 e2 bf             	and    $0xffffffbf,%edx
f01089b1:	89 10                	mov    %edx,(%eax)
		//LOG_STRING(" -------------------- PAGE FILE: segment remaining area is written (the zeros) ");
	}

	/// set the modified bit of each page in the ptr_pageWorkingSet to 0
	int i=0;
	for(;i<(e->page_WS_max_size); i++)
f01089b3:	ff 45 c4             	incl   -0x3c(%ebp)
f01089b6:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01089bc:	8b 50 74             	mov    0x74(%eax),%edx
f01089bf:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01089c2:	39 c2                	cmp    %eax,%edx
f01089c4:	0f 87 50 ff ff ff    	ja     f010891a <env_create+0x596>
	//unsigned int * ptr = (unsigned int * )0x801084;
	//LOG_STATMENT(cprintf("contents at address %x=%x",0x801084, *ptr));

	//[8] now set the entry point of the environment
	//Hint: use set_environment_entry_point()
	set_environment_entry_point(e, ptr_user_program_info->ptr_start);
f01089ca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01089cd:	8b 50 08             	mov    0x8(%eax),%edx
f01089d0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01089d6:	83 ec 08             	sub    $0x8,%esp
f01089d9:	52                   	push   %edx
f01089da:	50                   	push   %eax
f01089db:	e8 3a 18 00 00       	call   f010a21a <set_environment_entry_point>
f01089e0:	83 c4 10             	add    $0x10,%esp

	//[9] Allocate and map one page for the program's initial stack
	// at virtual address USTACKTOP - PAGE_SIZE.
	// we assume that the stack is counted in the environment working set

	e->initNumStackPages = 1;
f01089e3:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01089e9:	c7 80 14 da 01 00 01 	movl   $0x1,0x1da14(%eax)
f01089f0:	00 00 00 

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);
f01089f3:	c7 85 50 ff ff ff 00 	movl   $0xeebfd000,-0xb0(%ebp)
f01089fa:	d0 bf ee 

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
f01089fd:	c7 45 c0 00 d0 bf ee 	movl   $0xeebfd000,-0x40(%ebp)
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0108a04:	e9 9a 05 00 00       	jmp    f0108fa3 <env_create+0xc1f>
	{
		struct FrameInfo *pp = NULL;
f0108a09:	c7 85 1c ff ff ff 00 	movl   $0x0,-0xe4(%ebp)
f0108a10:	00 00 00 
		allocate_frame(&pp);
f0108a13:	83 ec 0c             	sub    $0xc,%esp
f0108a16:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f0108a1c:	50                   	push   %eax
f0108a1d:	e8 90 dd ff ff       	call   f01067b2 <allocate_frame>
f0108a22:	83 c4 10             	add    $0x10,%esp

		loadtime_map_frame(e->env_page_directory, pp, stackVa, PERM_USER | PERM_WRITEABLE);
f0108a25:	8b 95 1c ff ff ff    	mov    -0xe4(%ebp),%edx
f0108a2b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a31:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108a34:	6a 06                	push   $0x6
f0108a36:	ff 75 c0             	pushl  -0x40(%ebp)
f0108a39:	52                   	push   %edx
f0108a3a:	50                   	push   %eax
f0108a3b:	e8 c0 e2 ff ff       	call   f0106d00 <loadtime_map_frame>
f0108a40:	83 c4 10             	add    $0x10,%esp

		//initialize new page by 0's
		memset((void*)stackVa, 0, PAGE_SIZE);
f0108a43:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108a46:	83 ec 04             	sub    $0x4,%esp
f0108a49:	68 00 10 00 00       	push   $0x1000
f0108a4e:	6a 00                	push   $0x0
f0108a50:	50                   	push   %eax
f0108a51:	e8 d5 7b 02 00       	call   f013062b <memset>
f0108a56:	83 c4 10             	add    $0x10,%esp

		//now add it to the working set and the page table
		{
			env_page_ws_set_entry(e, e->page_last_WS_index, (uint32) stackVa) ;
f0108a59:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a5f:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108a65:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a6b:	83 ec 04             	sub    $0x4,%esp
f0108a6e:	ff 75 c0             	pushl  -0x40(%ebp)
f0108a71:	52                   	push   %edx
f0108a72:	50                   	push   %eax
f0108a73:	e8 5f ed ff ff       	call   f01077d7 <env_page_ws_set_entry>
f0108a78:	83 c4 10             	add    $0x10,%esp

			//2020
			if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108a7b:	83 ec 0c             	sub    $0xc,%esp
f0108a7e:	6a 02                	push   $0x2
f0108a80:	e8 fa 47 00 00       	call   f010d27f <isPageReplacmentAlgorithmLRU>
f0108a85:	83 c4 10             	add    $0x10,%esp
f0108a88:	85 c0                	test   %eax,%eax
f0108a8a:	0f 84 b2 04 00 00    	je     f0108f42 <env_create+0xbbe>
			{
				LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108a90:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108a96:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108a9c:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108aa2:	89 d0                	mov    %edx,%eax
f0108aa4:	01 c0                	add    %eax,%eax
f0108aa6:	01 d0                	add    %edx,%eax
f0108aa8:	c1 e0 03             	shl    $0x3,%eax
f0108aab:	83 c0 70             	add    $0x70,%eax
f0108aae:	01 c8                	add    %ecx,%eax
f0108ab0:	83 c0 08             	add    $0x8,%eax
f0108ab3:	85 c0                	test   %eax,%eax
f0108ab5:	75 17                	jne    f0108ace <env_create+0x74a>
f0108ab7:	83 ec 04             	sub    $0x4,%esp
f0108aba:	68 55 59 13 f0       	push   $0xf0135955
f0108abf:	68 41 01 00 00       	push   $0x141
f0108ac4:	68 f3 58 13 f0       	push   $0xf01358f3
f0108ac9:	e8 d8 76 ff ff       	call   f01001a6 <_panic>
f0108ace:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108ad4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ada:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108ae0:	89 d0                	mov    %edx,%eax
f0108ae2:	01 c0                	add    %eax,%eax
f0108ae4:	01 d0                	add    %edx,%eax
f0108ae6:	c1 e0 03             	shl    $0x3,%eax
f0108ae9:	01 c8                	add    %ecx,%eax
f0108aeb:	05 88 00 00 00       	add    $0x88,%eax
f0108af0:	8b 00                	mov    (%eax),%eax
f0108af2:	85 c0                	test   %eax,%eax
f0108af4:	74 4d                	je     f0108b43 <env_create+0x7bf>
f0108af6:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108afc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b02:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108b08:	89 d0                	mov    %edx,%eax
f0108b0a:	01 c0                	add    %eax,%eax
f0108b0c:	01 d0                	add    %edx,%eax
f0108b0e:	c1 e0 03             	shl    $0x3,%eax
f0108b11:	01 c8                	add    %ecx,%eax
f0108b13:	05 88 00 00 00       	add    $0x88,%eax
f0108b18:	8b 10                	mov    (%eax),%edx
f0108b1a:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108b20:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b26:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108b2c:	89 c8                	mov    %ecx,%eax
f0108b2e:	01 c0                	add    %eax,%eax
f0108b30:	01 c8                	add    %ecx,%eax
f0108b32:	c1 e0 03             	shl    $0x3,%eax
f0108b35:	01 d8                	add    %ebx,%eax
f0108b37:	05 8c 00 00 00       	add    $0x8c,%eax
f0108b3c:	8b 00                	mov    (%eax),%eax
f0108b3e:	89 42 14             	mov    %eax,0x14(%edx)
f0108b41:	eb 30                	jmp    f0108b73 <env_create+0x7ef>
f0108b43:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108b49:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108b4f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b55:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108b5b:	89 c8                	mov    %ecx,%eax
f0108b5d:	01 c0                	add    %eax,%eax
f0108b5f:	01 c8                	add    %ecx,%eax
f0108b61:	c1 e0 03             	shl    $0x3,%eax
f0108b64:	01 d8                	add    %ebx,%eax
f0108b66:	05 8c 00 00 00       	add    $0x8c,%eax
f0108b6b:	8b 00                	mov    (%eax),%eax
f0108b6d:	89 82 74 ea 01 00    	mov    %eax,0x1ea74(%edx)
f0108b73:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108b79:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108b7f:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108b85:	89 d0                	mov    %edx,%eax
f0108b87:	01 c0                	add    %eax,%eax
f0108b89:	01 d0                	add    %edx,%eax
f0108b8b:	c1 e0 03             	shl    $0x3,%eax
f0108b8e:	01 c8                	add    %ecx,%eax
f0108b90:	05 8c 00 00 00       	add    $0x8c,%eax
f0108b95:	8b 00                	mov    (%eax),%eax
f0108b97:	85 c0                	test   %eax,%eax
f0108b99:	74 4d                	je     f0108be8 <env_create+0x864>
f0108b9b:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108ba1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ba7:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108bad:	89 d0                	mov    %edx,%eax
f0108baf:	01 c0                	add    %eax,%eax
f0108bb1:	01 d0                	add    %edx,%eax
f0108bb3:	c1 e0 03             	shl    $0x3,%eax
f0108bb6:	01 c8                	add    %ecx,%eax
f0108bb8:	05 8c 00 00 00       	add    $0x8c,%eax
f0108bbd:	8b 10                	mov    (%eax),%edx
f0108bbf:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108bc5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108bcb:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108bd1:	89 c8                	mov    %ecx,%eax
f0108bd3:	01 c0                	add    %eax,%eax
f0108bd5:	01 c8                	add    %ecx,%eax
f0108bd7:	c1 e0 03             	shl    $0x3,%eax
f0108bda:	01 d8                	add    %ebx,%eax
f0108bdc:	05 88 00 00 00       	add    $0x88,%eax
f0108be1:	8b 00                	mov    (%eax),%eax
f0108be3:	89 42 10             	mov    %eax,0x10(%edx)
f0108be6:	eb 30                	jmp    f0108c18 <env_create+0x894>
f0108be8:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108bee:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108bf4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108bfa:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108c00:	89 c8                	mov    %ecx,%eax
f0108c02:	01 c0                	add    %eax,%eax
f0108c04:	01 c8                	add    %ecx,%eax
f0108c06:	c1 e0 03             	shl    $0x3,%eax
f0108c09:	01 d8                	add    %ebx,%eax
f0108c0b:	05 88 00 00 00       	add    $0x88,%eax
f0108c10:	8b 00                	mov    (%eax),%eax
f0108c12:	89 82 70 ea 01 00    	mov    %eax,0x1ea70(%edx)
f0108c18:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108c1e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c24:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108c2a:	89 d0                	mov    %edx,%eax
f0108c2c:	01 c0                	add    %eax,%eax
f0108c2e:	01 d0                	add    %edx,%eax
f0108c30:	c1 e0 03             	shl    $0x3,%eax
f0108c33:	01 c8                	add    %ecx,%eax
f0108c35:	05 88 00 00 00       	add    $0x88,%eax
f0108c3a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108c40:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108c46:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c4c:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108c52:	89 d0                	mov    %edx,%eax
f0108c54:	01 c0                	add    %eax,%eax
f0108c56:	01 d0                	add    %edx,%eax
f0108c58:	c1 e0 03             	shl    $0x3,%eax
f0108c5b:	01 c8                	add    %ecx,%eax
f0108c5d:	05 8c 00 00 00       	add    $0x8c,%eax
f0108c62:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108c68:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c6e:	8b 90 7c ea 01 00    	mov    0x1ea7c(%eax),%edx
f0108c74:	4a                   	dec    %edx
f0108c75:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)
				//Now: we are sure that at least the top page in the stack will be added to Active list
				//Since we left 1 empty location in the Active list when we loaded the program segments
				if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize)
f0108c7b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c81:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f0108c87:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108c8d:	8b 80 a0 ea 01 00    	mov    0x1eaa0(%eax),%eax
f0108c93:	39 c2                	cmp    %eax,%edx
f0108c95:	0f 83 56 01 00 00    	jae    f0108df1 <env_create+0xa6d>
				{
					LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108c9b:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108ca1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ca7:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108cad:	89 d0                	mov    %edx,%eax
f0108caf:	01 c0                	add    %eax,%eax
f0108cb1:	01 d0                	add    %edx,%eax
f0108cb3:	c1 e0 03             	shl    $0x3,%eax
f0108cb6:	83 c0 70             	add    $0x70,%eax
f0108cb9:	01 c8                	add    %ecx,%eax
f0108cbb:	83 c0 08             	add    $0x8,%eax
f0108cbe:	85 c0                	test   %eax,%eax
f0108cc0:	75 17                	jne    f0108cd9 <env_create+0x955>
f0108cc2:	83 ec 04             	sub    $0x4,%esp
f0108cc5:	68 74 59 13 f0       	push   $0xf0135974
f0108cca:	68 46 01 00 00       	push   $0x146
f0108ccf:	68 f3 58 13 f0       	push   $0xf01358f3
f0108cd4:	e8 cd 74 ff ff       	call   f01001a6 <_panic>
f0108cd9:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108cdf:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ce5:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108ceb:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108cf1:	8b 98 80 ea 01 00    	mov    0x1ea80(%eax),%ebx
f0108cf7:	89 d0                	mov    %edx,%eax
f0108cf9:	01 c0                	add    %eax,%eax
f0108cfb:	01 d0                	add    %edx,%eax
f0108cfd:	c1 e0 03             	shl    $0x3,%eax
f0108d00:	01 c8                	add    %ecx,%eax
f0108d02:	05 88 00 00 00       	add    $0x88,%eax
f0108d07:	89 18                	mov    %ebx,(%eax)
f0108d09:	89 d0                	mov    %edx,%eax
f0108d0b:	01 c0                	add    %eax,%eax
f0108d0d:	01 d0                	add    %edx,%eax
f0108d0f:	c1 e0 03             	shl    $0x3,%eax
f0108d12:	01 c8                	add    %ecx,%eax
f0108d14:	05 88 00 00 00       	add    $0x88,%eax
f0108d19:	8b 00                	mov    (%eax),%eax
f0108d1b:	85 c0                	test   %eax,%eax
f0108d1d:	74 34                	je     f0108d53 <env_create+0x9cf>
f0108d1f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d25:	8b 90 80 ea 01 00    	mov    0x1ea80(%eax),%edx
f0108d2b:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108d31:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d37:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108d3d:	89 c8                	mov    %ecx,%eax
f0108d3f:	01 c0                	add    %eax,%eax
f0108d41:	01 c8                	add    %ecx,%eax
f0108d43:	c1 e0 03             	shl    $0x3,%eax
f0108d46:	83 c0 70             	add    $0x70,%eax
f0108d49:	01 d8                	add    %ebx,%eax
f0108d4b:	83 c0 08             	add    $0x8,%eax
f0108d4e:	89 42 14             	mov    %eax,0x14(%edx)
f0108d51:	eb 2f                	jmp    f0108d82 <env_create+0x9fe>
f0108d53:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108d59:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108d5f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d65:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108d6b:	89 c8                	mov    %ecx,%eax
f0108d6d:	01 c0                	add    %eax,%eax
f0108d6f:	01 c8                	add    %ecx,%eax
f0108d71:	c1 e0 03             	shl    $0x3,%eax
f0108d74:	83 c0 70             	add    $0x70,%eax
f0108d77:	01 d8                	add    %ebx,%eax
f0108d79:	83 c0 08             	add    $0x8,%eax
f0108d7c:	89 82 84 ea 01 00    	mov    %eax,0x1ea84(%edx)
f0108d82:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108d88:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108d8e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108d94:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108d9a:	89 c8                	mov    %ecx,%eax
f0108d9c:	01 c0                	add    %eax,%eax
f0108d9e:	01 c8                	add    %ecx,%eax
f0108da0:	c1 e0 03             	shl    $0x3,%eax
f0108da3:	83 c0 70             	add    $0x70,%eax
f0108da6:	01 d8                	add    %ebx,%eax
f0108da8:	83 c0 08             	add    $0x8,%eax
f0108dab:	89 82 80 ea 01 00    	mov    %eax,0x1ea80(%edx)
f0108db1:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108db7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108dbd:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108dc3:	89 d0                	mov    %edx,%eax
f0108dc5:	01 c0                	add    %eax,%eax
f0108dc7:	01 d0                	add    %edx,%eax
f0108dc9:	c1 e0 03             	shl    $0x3,%eax
f0108dcc:	01 c8                	add    %ecx,%eax
f0108dce:	05 8c 00 00 00       	add    $0x8c,%eax
f0108dd3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108dd9:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ddf:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f0108de5:	42                   	inc    %edx
f0108de6:	89 90 8c ea 01 00    	mov    %edx,0x1ea8c(%eax)
f0108dec:	e9 51 01 00 00       	jmp    f0108f42 <env_create+0xbbe>
				}
				else
				{
					LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0108df1:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108df7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108dfd:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108e03:	89 d0                	mov    %edx,%eax
f0108e05:	01 c0                	add    %eax,%eax
f0108e07:	01 d0                	add    %edx,%eax
f0108e09:	c1 e0 03             	shl    $0x3,%eax
f0108e0c:	83 c0 70             	add    $0x70,%eax
f0108e0f:	01 c8                	add    %ecx,%eax
f0108e11:	83 c0 08             	add    $0x8,%eax
f0108e14:	85 c0                	test   %eax,%eax
f0108e16:	75 17                	jne    f0108e2f <env_create+0xaab>
f0108e18:	83 ec 04             	sub    $0x4,%esp
f0108e1b:	68 74 59 13 f0       	push   $0xf0135974
f0108e20:	68 4a 01 00 00       	push   $0x14a
f0108e25:	68 f3 58 13 f0       	push   $0xf01358f3
f0108e2a:	e8 77 73 ff ff       	call   f01001a6 <_panic>
f0108e2f:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108e35:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e3b:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108e41:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e47:	8b 98 90 ea 01 00    	mov    0x1ea90(%eax),%ebx
f0108e4d:	89 d0                	mov    %edx,%eax
f0108e4f:	01 c0                	add    %eax,%eax
f0108e51:	01 d0                	add    %edx,%eax
f0108e53:	c1 e0 03             	shl    $0x3,%eax
f0108e56:	01 c8                	add    %ecx,%eax
f0108e58:	05 88 00 00 00       	add    $0x88,%eax
f0108e5d:	89 18                	mov    %ebx,(%eax)
f0108e5f:	89 d0                	mov    %edx,%eax
f0108e61:	01 c0                	add    %eax,%eax
f0108e63:	01 d0                	add    %edx,%eax
f0108e65:	c1 e0 03             	shl    $0x3,%eax
f0108e68:	01 c8                	add    %ecx,%eax
f0108e6a:	05 88 00 00 00       	add    $0x88,%eax
f0108e6f:	8b 00                	mov    (%eax),%eax
f0108e71:	85 c0                	test   %eax,%eax
f0108e73:	74 34                	je     f0108ea9 <env_create+0xb25>
f0108e75:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e7b:	8b 90 90 ea 01 00    	mov    0x1ea90(%eax),%edx
f0108e81:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108e87:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108e8d:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108e93:	89 c8                	mov    %ecx,%eax
f0108e95:	01 c0                	add    %eax,%eax
f0108e97:	01 c8                	add    %ecx,%eax
f0108e99:	c1 e0 03             	shl    $0x3,%eax
f0108e9c:	83 c0 70             	add    $0x70,%eax
f0108e9f:	01 d8                	add    %ebx,%eax
f0108ea1:	83 c0 08             	add    $0x8,%eax
f0108ea4:	89 42 14             	mov    %eax,0x14(%edx)
f0108ea7:	eb 2f                	jmp    f0108ed8 <env_create+0xb54>
f0108ea9:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108eaf:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108eb5:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ebb:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108ec1:	89 c8                	mov    %ecx,%eax
f0108ec3:	01 c0                	add    %eax,%eax
f0108ec5:	01 c8                	add    %ecx,%eax
f0108ec7:	c1 e0 03             	shl    $0x3,%eax
f0108eca:	83 c0 70             	add    $0x70,%eax
f0108ecd:	01 d8                	add    %ebx,%eax
f0108ecf:	83 c0 08             	add    $0x8,%eax
f0108ed2:	89 82 94 ea 01 00    	mov    %eax,0x1ea94(%edx)
f0108ed8:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108ede:	8b 9d 44 ff ff ff    	mov    -0xbc(%ebp),%ebx
f0108ee4:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108eea:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0108ef0:	89 c8                	mov    %ecx,%eax
f0108ef2:	01 c0                	add    %eax,%eax
f0108ef4:	01 c8                	add    %ecx,%eax
f0108ef6:	c1 e0 03             	shl    $0x3,%eax
f0108ef9:	83 c0 70             	add    $0x70,%eax
f0108efc:	01 d8                	add    %ebx,%eax
f0108efe:	83 c0 08             	add    $0x8,%eax
f0108f01:	89 82 90 ea 01 00    	mov    %eax,0x1ea90(%edx)
f0108f07:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108f0d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f13:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108f19:	89 d0                	mov    %edx,%eax
f0108f1b:	01 c0                	add    %eax,%eax
f0108f1d:	01 d0                	add    %edx,%eax
f0108f1f:	c1 e0 03             	shl    $0x3,%eax
f0108f22:	01 c8                	add    %ecx,%eax
f0108f24:	05 8c 00 00 00       	add    $0x8c,%eax
f0108f29:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0108f2f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f35:	8b 90 9c ea 01 00    	mov    0x1ea9c(%eax),%edx
f0108f3b:	42                   	inc    %edx
f0108f3c:	89 90 9c ea 01 00    	mov    %edx,0x1ea9c(%eax)
				}
			}
			e->page_last_WS_index ++;
f0108f42:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f48:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0108f4e:	42                   	inc    %edx
f0108f4f:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)
			e->page_last_WS_index %= (e->page_WS_max_size);
f0108f55:	8b 8d 44 ff ff ff    	mov    -0xbc(%ebp),%ecx
f0108f5b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f61:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0108f67:	8b 95 44 ff ff ff    	mov    -0xbc(%ebp),%edx
f0108f6d:	8b 5a 74             	mov    0x74(%edx),%ebx
f0108f70:	ba 00 00 00 00       	mov    $0x0,%edx
f0108f75:	f7 f3                	div    %ebx
f0108f77:	89 d0                	mov    %edx,%eax
f0108f79:	89 81 e8 d9 01 00    	mov    %eax,0x1d9e8(%ecx)

			//addTableToTableWorkingSet(e, ROUNDDOWN((uint32)stackVa, PAGE_SIZE*1024));

			int success = pf_add_empty_env_page(e, (uint32)stackVa, 1);
f0108f7f:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108f85:	83 ec 04             	sub    $0x4,%esp
f0108f88:	6a 01                	push   $0x1
f0108f8a:	ff 75 c0             	pushl  -0x40(%ebp)
f0108f8d:	50                   	push   %eax
f0108f8e:	e8 60 a4 ff ff       	call   f01033f3 <pf_add_empty_env_page>
f0108f93:	83 c4 10             	add    $0x10,%esp
f0108f96:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)

	// map the allocated page
	uint32 ptr_user_stack_bottom = (USTACKTOP - 1*PAGE_SIZE);

	uint32 stackVa = USTACKTOP - PAGE_SIZE;
	for(;stackVa >= ptr_user_stack_bottom; stackVa -= PAGE_SIZE)
f0108f9c:	81 6d c0 00 10 00 00 	subl   $0x1000,-0x40(%ebp)
f0108fa3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0108fa6:	3b 85 50 ff ff ff    	cmp    -0xb0(%ebp),%eax
f0108fac:	0f 83 57 fa ff ff    	jae    f0108a09 <env_create+0x685>

	}

	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0108fb2:	83 ec 0c             	sub    $0xc,%esp
f0108fb5:	6a 02                	push   $0x2
f0108fb7:	e8 c3 42 00 00       	call   f010d27f <isPageReplacmentAlgorithmLRU>
f0108fbc:	83 c4 10             	add    $0x10,%esp
f0108fbf:	85 c0                	test   %eax,%eax
f0108fc1:	74 72                	je     f0109035 <env_create+0xcb1>
	{
		struct WorkingSetElement * elm = NULL;
f0108fc3:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
		LIST_FOREACH(elm, &(e->SecondList))
f0108fca:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108fd0:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f0108fd6:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0108fd9:	eb 2b                	jmp    f0109006 <env_create+0xc82>
		{
			//set it's PRESENT bit to 0
			pt_set_page_permissions(e->env_page_directory, elm->virtual_address, 0, PERM_PRESENT);
f0108fdb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0108fde:	8b 10                	mov    (%eax),%edx
f0108fe0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108fe6:	8b 40 5c             	mov    0x5c(%eax),%eax
f0108fe9:	6a 01                	push   $0x1
f0108feb:	6a 00                	push   $0x0
f0108fed:	52                   	push   %edx
f0108fee:	50                   	push   %eax
f0108fef:	e8 c0 e4 ff ff       	call   f01074b4 <pt_set_page_permissions>
f0108ff4:	83 c4 10             	add    $0x10,%esp
	//2020
	//LRU Lists: Reset PRESENT bit of all pages in Second List
	if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		struct WorkingSetElement * elm = NULL;
		LIST_FOREACH(elm, &(e->SecondList))
f0108ff7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0108ffd:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f0109003:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0109006:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f010900c:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109010:	74 08                	je     f010901a <env_create+0xc96>
f0109012:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0109015:	8b 52 10             	mov    0x10(%edx),%edx
f0109018:	eb 05                	jmp    f010901f <env_create+0xc9b>
f010901a:	ba 00 00 00 00       	mov    $0x0,%edx
f010901f:	89 90 98 ea 01 00    	mov    %edx,0x1ea98(%eax)
f0109025:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010902b:	85 c0                	test   %eax,%eax
f010902d:	75 ac                	jne    f0108fdb <env_create+0xc57>
f010902f:	83 7d bc 00          	cmpl   $0x0,-0x44(%ebp)
f0109033:	75 a6                	jne    f0108fdb <env_create+0xc57>
f0109035:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0109038:	89 45 a0             	mov    %eax,-0x60(%ebp)
f010903b:	8b 45 a0             	mov    -0x60(%ebp),%eax
f010903e:	0f 22 d8             	mov    %eax,%cr3
	lcr3(kern_phys_pgdir) ;

	//[11] 2012, add the new env we have just created to the scheduler NEW queue
	//	   2015: moved to the scheduler! since env_create() is responsible for creating the env only

	return e;
f0109041:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
}
f0109047:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010904a:	5b                   	pop    %ebx
f010904b:	5e                   	pop    %esi
f010904c:	5f                   	pop    %edi
f010904d:	5d                   	pop    %ebp
f010904e:	c3                   	ret    

f010904f <env_run>:
// Used to run the given environment "e", simply by
// context switch from curenv to env e.
//  (This function does not return.)
//
void env_run(struct Env *e)
{
f010904f:	55                   	push   %ebp
f0109050:	89 e5                	mov    %esp,%ebp
f0109052:	83 ec 18             	sub    $0x18,%esp
	if(curenv != e)
f0109055:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010905a:	3b 45 08             	cmp    0x8(%ebp),%eax
f010905d:	74 25                	je     f0109084 <env_run+0x35>
	{
		curenv = e ;
f010905f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109062:	a3 34 87 65 f0       	mov    %eax,0xf0658734
		curenv->env_runs++ ;
f0109067:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010906c:	8b 50 58             	mov    0x58(%eax),%edx
f010906f:	42                   	inc    %edx
f0109070:	89 50 58             	mov    %edx,0x58(%eax)
		lcr3(curenv->env_cr3) ;
f0109073:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f0109078:	8b 40 60             	mov    0x60(%eax),%eax
f010907b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010907e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109081:	0f 22 d8             	mov    %eax,%cr3
	}
	curenv->env_status = ENV_RUNNABLE;
f0109084:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f0109089:	c7 40 54 02 00 00 00 	movl   $0x2,0x54(%eax)
	//uint16 cnt0 = kclock_read_cnt0();
	//cprintf("env_run %s [%d]: Cnt BEFORE RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	//kclock_start();

	kclock_resume();
f0109090:	e8 4c b0 ff ff       	call   f01040e1 <kclock_resume>

	//cprintf("env_run %s [%d]: Cnt AFTER RESUME = %d\n", curenv->prog_name,curenv->env_id, cnt0);
	env_pop_tf(&(curenv->env_tf));
f0109095:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010909a:	83 ec 0c             	sub    $0xc,%esp
f010909d:	50                   	push   %eax
f010909e:	e8 11 01 00 00       	call   f01091b4 <env_pop_tf>

f01090a3 <env_free>:
// 3) FREE ENV FROM THE SYSTEM:
//===============================
// Frees environment "e" and all memory it uses.
//
void env_free(struct Env *e)
{
f01090a3:	55                   	push   %ebp
f01090a4:	89 e5                	mov    %esp,%ebp
f01090a6:	83 ec 08             	sub    $0x8,%esp
	unshare_pws_at_user_space(e);
#endif
	/*****************************************/
	//TODO: [PROJECT MS3 - BONUS] [EXIT ENV] env_free
	// your code is here, remove the panic and write your code
	panic("env_free() is not implemented yet...!!");
f01090a9:	83 ec 04             	sub    $0x4,%esp
f01090ac:	68 98 59 13 f0       	push   $0xf0135998
f01090b1:	68 9d 01 00 00       	push   $0x19d
f01090b6:	68 f3 58 13 f0       	push   $0xf01358f3
f01090bb:	e8 e6 70 ff ff       	call   f01001a6 <_panic>

f01090c0 <env_exit>:
//============================
// 4) PLACE ENV IN EXIT QUEUE:
//============================
/*2015*///Just add the "curenv" to the EXIT list, then reinvoke the scheduler
void env_exit()
{
f01090c0:	55                   	push   %ebp
f01090c1:	89 e5                	mov    %esp,%ebp
f01090c3:	83 ec 08             	sub    $0x8,%esp
	sched_exit_env(curenv->env_id);
f01090c6:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f01090cb:	8b 40 4c             	mov    0x4c(%eax),%eax
f01090ce:	83 ec 0c             	sub    $0xc,%esp
f01090d1:	50                   	push   %eax
f01090d2:	e8 46 c0 ff ff       	call   f010511d <sched_exit_env>
f01090d7:	83 c4 10             	add    $0x10,%esp
	fos_scheduler();
f01090da:	e8 14 b5 ff ff       	call   f01045f3 <fos_scheduler>

f01090df <envid2env>:
//   0 on success, -E_BAD_ENV on error.
//   On success, sets *penv to the environment.
//   On error, sets *penv to NULL.
//
int envid2env(int32  envid, struct Env **env_store, bool checkperm)
{
f01090df:	55                   	push   %ebp
f01090e0:	89 e5                	mov    %esp,%ebp
f01090e2:	53                   	push   %ebx
f01090e3:	83 ec 14             	sub    $0x14,%esp
	struct Env *e;

	// If envid is zero, return the current environment.
	if (envid == 0) {
f01090e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01090ea:	75 15                	jne    f0109101 <envid2env+0x22>
		*env_store = curenv;
f01090ec:	8b 15 34 87 65 f0    	mov    0xf0658734,%edx
f01090f2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01090f5:	89 10                	mov    %edx,(%eax)
		return 0;
f01090f7:	b8 00 00 00 00       	mov    $0x0,%eax
f01090fc:	e9 ae 00 00 00       	jmp    f01091af <envid2env+0xd0>
	// Look up the Env structure via the index part of the envid,
	// then check the env_id field in that struct Env
	// to ensure that the envid is not stale
	// (i.e., does not refer to a _previous_ environment
	// that used the same slot in the envs[] array).
	e = &envs[ENVX(envid)];
f0109101:	8b 1d 30 87 65 f0    	mov    0xf0658730,%ebx
f0109107:	83 ec 0c             	sub    $0xc,%esp
f010910a:	6a 08                	push   $0x8
f010910c:	e8 b7 60 02 00       	call   f012f1c8 <nearest_pow2_ceil>
f0109111:	83 c4 10             	add    $0x10,%esp
f0109114:	8d 50 ff             	lea    -0x1(%eax),%edx
f0109117:	8b 45 08             	mov    0x8(%ebp),%eax
f010911a:	21 c2                	and    %eax,%edx
f010911c:	89 d0                	mov    %edx,%eax
f010911e:	01 c0                	add    %eax,%eax
f0109120:	01 d0                	add    %edx,%eax
f0109122:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0109129:	01 c8                	add    %ecx,%eax
f010912b:	c1 e0 02             	shl    $0x2,%eax
f010912e:	01 d0                	add    %edx,%eax
f0109130:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0109137:	01 c8                	add    %ecx,%eax
f0109139:	c1 e0 02             	shl    $0x2,%eax
f010913c:	01 d0                	add    %edx,%eax
f010913e:	c1 e0 02             	shl    $0x2,%eax
f0109141:	01 d0                	add    %edx,%eax
f0109143:	c1 e0 03             	shl    $0x3,%eax
f0109146:	01 d8                	add    %ebx,%eax
f0109148:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (e->env_status == ENV_FREE || e->env_id != envid) {
f010914b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010914e:	8b 40 54             	mov    0x54(%eax),%eax
f0109151:	85 c0                	test   %eax,%eax
f0109153:	74 0b                	je     f0109160 <envid2env+0x81>
f0109155:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109158:	8b 40 4c             	mov    0x4c(%eax),%eax
f010915b:	3b 45 08             	cmp    0x8(%ebp),%eax
f010915e:	74 10                	je     f0109170 <envid2env+0x91>
		*env_store = 0;
f0109160:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109163:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f0109169:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f010916e:	eb 3f                	jmp    f01091af <envid2env+0xd0>
	// Check that the calling environment has legitimate permission
	// to manipulate the specified environment.
	// If checkperm is set, the specified environment
	// must be either the current environment
	// or an immediate child of the current environment.
	if (checkperm && e != curenv && e->env_parent_id != curenv->env_id) {
f0109170:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0109174:	74 2c                	je     f01091a2 <envid2env+0xc3>
f0109176:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010917b:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010917e:	74 22                	je     f01091a2 <envid2env+0xc3>
f0109180:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109183:	8b 50 50             	mov    0x50(%eax),%edx
f0109186:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010918b:	8b 40 4c             	mov    0x4c(%eax),%eax
f010918e:	39 c2                	cmp    %eax,%edx
f0109190:	74 10                	je     f01091a2 <envid2env+0xc3>
		*env_store = 0;
f0109192:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109195:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		return E_BAD_ENV;
f010919b:	b8 fe ff ff ff       	mov    $0xfffffffe,%eax
f01091a0:	eb 0d                	jmp    f01091af <envid2env+0xd0>
	}

	*env_store = e;
f01091a2:	8b 45 0c             	mov    0xc(%ebp),%eax
f01091a5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01091a8:	89 10                	mov    %edx,(%eax)
	return 0;
f01091aa:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01091af:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f01091b2:	c9                   	leave  
f01091b3:	c3                   	ret    

f01091b4 <env_pop_tf>:
// This exits the kernel and starts executing some environment's code.
// This function does not return.
//
void
env_pop_tf(struct Trapframe *tf)
{
f01091b4:	55                   	push   %ebp
f01091b5:	89 e5                	mov    %esp,%ebp
f01091b7:	83 ec 08             	sub    $0x8,%esp
	__asm __volatile("movl %0,%%esp\n"
f01091ba:	8b 65 08             	mov    0x8(%ebp),%esp
f01091bd:	61                   	popa   
f01091be:	07                   	pop    %es
f01091bf:	1f                   	pop    %ds
f01091c0:	83 c4 08             	add    $0x8,%esp
f01091c3:	cf                   	iret   
			"\tpopl %%es\n"
			"\tpopl %%ds\n"
			"\taddl $0x8,%%esp\n" /* skip tf_trapno and tf_errcode */
			"\tiret"
			: : "g" (tf) : "memory");
	panic("iret failed");  /* mostly to placate the compiler */
f01091c4:	83 ec 04             	sub    $0x4,%esp
f01091c7:	68 bf 59 13 f0       	push   $0xf01359bf
f01091cc:	68 fc 01 00 00       	push   $0x1fc
f01091d1:	68 f3 58 13 f0       	push   $0xf01358f3
f01091d6:	e8 cb 6f ff ff       	call   f01001a6 <_panic>

f01091db <env_init>:
// Insert in reverse order, so that the first call to allocate_environment()
// returns envs[0].
//

void env_init(void)
{
f01091db:	55                   	push   %ebp
f01091dc:	89 e5                	mov    %esp,%ebp
f01091de:	56                   	push   %esi
f01091df:	53                   	push   %ebx
f01091e0:	83 ec 10             	sub    $0x10,%esp
	int iEnv = NENV-1;
f01091e3:	c7 45 f4 07 00 00 00 	movl   $0x7,-0xc(%ebp)
	for(; iEnv >= 0; iEnv--)
f01091ea:	e9 0b 02 00 00       	jmp    f01093fa <env_init+0x21f>
	{
		envs[iEnv].env_status = ENV_FREE;
f01091ef:	8b 0d 30 87 65 f0    	mov    0xf0658730,%ecx
f01091f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01091f8:	89 d0                	mov    %edx,%eax
f01091fa:	01 c0                	add    %eax,%eax
f01091fc:	01 d0                	add    %edx,%eax
f01091fe:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109205:	01 d8                	add    %ebx,%eax
f0109207:	c1 e0 02             	shl    $0x2,%eax
f010920a:	01 d0                	add    %edx,%eax
f010920c:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109213:	01 d8                	add    %ebx,%eax
f0109215:	c1 e0 02             	shl    $0x2,%eax
f0109218:	01 d0                	add    %edx,%eax
f010921a:	c1 e0 02             	shl    $0x2,%eax
f010921d:	01 d0                	add    %edx,%eax
f010921f:	c1 e0 03             	shl    $0x3,%eax
f0109222:	01 c8                	add    %ecx,%eax
f0109224:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
		envs[iEnv].env_id = 0;
f010922b:	8b 0d 30 87 65 f0    	mov    0xf0658730,%ecx
f0109231:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109234:	89 d0                	mov    %edx,%eax
f0109236:	01 c0                	add    %eax,%eax
f0109238:	01 d0                	add    %edx,%eax
f010923a:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109241:	01 d8                	add    %ebx,%eax
f0109243:	c1 e0 02             	shl    $0x2,%eax
f0109246:	01 d0                	add    %edx,%eax
f0109248:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010924f:	01 d8                	add    %ebx,%eax
f0109251:	c1 e0 02             	shl    $0x2,%eax
f0109254:	01 d0                	add    %edx,%eax
f0109256:	c1 e0 02             	shl    $0x2,%eax
f0109259:	01 d0                	add    %edx,%eax
f010925b:	c1 e0 03             	shl    $0x3,%eax
f010925e:	01 c8                	add    %ecx,%eax
f0109260:	c7 40 4c 00 00 00 00 	movl   $0x0,0x4c(%eax)
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
f0109267:	8b 0d 30 87 65 f0    	mov    0xf0658730,%ecx
f010926d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109270:	89 d0                	mov    %edx,%eax
f0109272:	01 c0                	add    %eax,%eax
f0109274:	01 d0                	add    %edx,%eax
f0109276:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010927d:	01 d8                	add    %ebx,%eax
f010927f:	c1 e0 02             	shl    $0x2,%eax
f0109282:	01 d0                	add    %edx,%eax
f0109284:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010928b:	01 d8                	add    %ebx,%eax
f010928d:	c1 e0 02             	shl    $0x2,%eax
f0109290:	01 d0                	add    %edx,%eax
f0109292:	c1 e0 02             	shl    $0x2,%eax
f0109295:	01 d0                	add    %edx,%eax
f0109297:	c1 e0 03             	shl    $0x3,%eax
f010929a:	01 c8                	add    %ecx,%eax
f010929c:	85 c0                	test   %eax,%eax
f010929e:	75 17                	jne    f01092b7 <env_init+0xdc>
f01092a0:	83 ec 04             	sub    $0x4,%esp
f01092a3:	68 74 59 13 f0       	push   $0xf0135974
f01092a8:	68 18 02 00 00       	push   $0x218
f01092ad:	68 f3 58 13 f0       	push   $0xf01358f3
f01092b2:	e8 ef 6e ff ff       	call   f01001a6 <_panic>
f01092b7:	8b 0d 30 87 65 f0    	mov    0xf0658730,%ecx
f01092bd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01092c0:	89 d0                	mov    %edx,%eax
f01092c2:	01 c0                	add    %eax,%eax
f01092c4:	01 d0                	add    %edx,%eax
f01092c6:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01092cd:	01 d8                	add    %ebx,%eax
f01092cf:	c1 e0 02             	shl    $0x2,%eax
f01092d2:	01 d0                	add    %edx,%eax
f01092d4:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01092db:	01 d8                	add    %ebx,%eax
f01092dd:	c1 e0 02             	shl    $0x2,%eax
f01092e0:	01 d0                	add    %edx,%eax
f01092e2:	c1 e0 02             	shl    $0x2,%eax
f01092e5:	01 d0                	add    %edx,%eax
f01092e7:	c1 e0 03             	shl    $0x3,%eax
f01092ea:	01 c8                	add    %ecx,%eax
f01092ec:	8b 15 38 87 65 f0    	mov    0xf0658738,%edx
f01092f2:	89 50 44             	mov    %edx,0x44(%eax)
f01092f5:	8b 40 44             	mov    0x44(%eax),%eax
f01092f8:	85 c0                	test   %eax,%eax
f01092fa:	74 40                	je     f010933c <env_init+0x161>
f01092fc:	8b 0d 38 87 65 f0    	mov    0xf0658738,%ecx
f0109302:	8b 1d 30 87 65 f0    	mov    0xf0658730,%ebx
f0109308:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010930b:	89 d0                	mov    %edx,%eax
f010930d:	01 c0                	add    %eax,%eax
f010930f:	01 d0                	add    %edx,%eax
f0109311:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0109318:	01 f0                	add    %esi,%eax
f010931a:	c1 e0 02             	shl    $0x2,%eax
f010931d:	01 d0                	add    %edx,%eax
f010931f:	8d 34 c5 00 00 00 00 	lea    0x0(,%eax,8),%esi
f0109326:	01 f0                	add    %esi,%eax
f0109328:	c1 e0 02             	shl    $0x2,%eax
f010932b:	01 d0                	add    %edx,%eax
f010932d:	c1 e0 02             	shl    $0x2,%eax
f0109330:	01 d0                	add    %edx,%eax
f0109332:	c1 e0 03             	shl    $0x3,%eax
f0109335:	01 d8                	add    %ebx,%eax
f0109337:	89 41 48             	mov    %eax,0x48(%ecx)
f010933a:	eb 3a                	jmp    f0109376 <env_init+0x19b>
f010933c:	8b 0d 30 87 65 f0    	mov    0xf0658730,%ecx
f0109342:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109345:	89 d0                	mov    %edx,%eax
f0109347:	01 c0                	add    %eax,%eax
f0109349:	01 d0                	add    %edx,%eax
f010934b:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109352:	01 d8                	add    %ebx,%eax
f0109354:	c1 e0 02             	shl    $0x2,%eax
f0109357:	01 d0                	add    %edx,%eax
f0109359:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f0109360:	01 d8                	add    %ebx,%eax
f0109362:	c1 e0 02             	shl    $0x2,%eax
f0109365:	01 d0                	add    %edx,%eax
f0109367:	c1 e0 02             	shl    $0x2,%eax
f010936a:	01 d0                	add    %edx,%eax
f010936c:	c1 e0 03             	shl    $0x3,%eax
f010936f:	01 c8                	add    %ecx,%eax
f0109371:	a3 3c 87 65 f0       	mov    %eax,0xf065873c
f0109376:	8b 0d 30 87 65 f0    	mov    0xf0658730,%ecx
f010937c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010937f:	89 d0                	mov    %edx,%eax
f0109381:	01 c0                	add    %eax,%eax
f0109383:	01 d0                	add    %edx,%eax
f0109385:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010938c:	01 d8                	add    %ebx,%eax
f010938e:	c1 e0 02             	shl    $0x2,%eax
f0109391:	01 d0                	add    %edx,%eax
f0109393:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f010939a:	01 d8                	add    %ebx,%eax
f010939c:	c1 e0 02             	shl    $0x2,%eax
f010939f:	01 d0                	add    %edx,%eax
f01093a1:	c1 e0 02             	shl    $0x2,%eax
f01093a4:	01 d0                	add    %edx,%eax
f01093a6:	c1 e0 03             	shl    $0x3,%eax
f01093a9:	01 c8                	add    %ecx,%eax
f01093ab:	a3 38 87 65 f0       	mov    %eax,0xf0658738
f01093b0:	8b 0d 30 87 65 f0    	mov    0xf0658730,%ecx
f01093b6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01093b9:	89 d0                	mov    %edx,%eax
f01093bb:	01 c0                	add    %eax,%eax
f01093bd:	01 d0                	add    %edx,%eax
f01093bf:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01093c6:	01 d8                	add    %ebx,%eax
f01093c8:	c1 e0 02             	shl    $0x2,%eax
f01093cb:	01 d0                	add    %edx,%eax
f01093cd:	8d 1c c5 00 00 00 00 	lea    0x0(,%eax,8),%ebx
f01093d4:	01 d8                	add    %ebx,%eax
f01093d6:	c1 e0 02             	shl    $0x2,%eax
f01093d9:	01 d0                	add    %edx,%eax
f01093db:	c1 e0 02             	shl    $0x2,%eax
f01093de:	01 d0                	add    %edx,%eax
f01093e0:	c1 e0 03             	shl    $0x3,%eax
f01093e3:	01 c8                	add    %ecx,%eax
f01093e5:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01093ec:	a1 44 87 65 f0       	mov    0xf0658744,%eax
f01093f1:	40                   	inc    %eax
f01093f2:	a3 44 87 65 f0       	mov    %eax,0xf0658744
//

void env_init(void)
{
	int iEnv = NENV-1;
	for(; iEnv >= 0; iEnv--)
f01093f7:	ff 4d f4             	decl   -0xc(%ebp)
f01093fa:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01093fe:	0f 89 eb fd ff ff    	jns    f01091ef <env_init+0x14>
	{
		envs[iEnv].env_status = ENV_FREE;
		envs[iEnv].env_id = 0;
		LIST_INSERT_HEAD(&env_free_list, &envs[iEnv]);
	}
}
f0109404:	90                   	nop
f0109405:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0109408:	5b                   	pop    %ebx
f0109409:	5e                   	pop    %esi
f010940a:	5d                   	pop    %ebp
f010940b:	c3                   	ret    

f010940c <allocate_environment>:
//
// Returns 0 on success, < 0 on failure.  Errors include:
//	E_NO_FREE_ENV if all NENVS environments are allocated
//
int allocate_environment(struct Env** e)
{
f010940c:	55                   	push   %ebp
f010940d:	89 e5                	mov    %esp,%ebp
	if (!(*e = LIST_FIRST(&env_free_list)))
f010940f:	8b 15 38 87 65 f0    	mov    0xf0658738,%edx
f0109415:	8b 45 08             	mov    0x8(%ebp),%eax
f0109418:	89 10                	mov    %edx,(%eax)
f010941a:	8b 45 08             	mov    0x8(%ebp),%eax
f010941d:	8b 00                	mov    (%eax),%eax
f010941f:	85 c0                	test   %eax,%eax
f0109421:	75 07                	jne    f010942a <allocate_environment+0x1e>
		return E_NO_FREE_ENV;
f0109423:	b8 fb ff ff ff       	mov    $0xfffffffb,%eax
f0109428:	eb 11                	jmp    f010943b <allocate_environment+0x2f>
	(*e)->env_status = ENV_UNKNOWN;
f010942a:	8b 45 08             	mov    0x8(%ebp),%eax
f010942d:	8b 00                	mov    (%eax),%eax
f010942f:	c7 40 54 06 00 00 00 	movl   $0x6,0x54(%eax)
	return 0;
f0109436:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010943b:	5d                   	pop    %ebp
f010943c:	c3                   	ret    

f010943d <free_environment>:
//===============================
// 3) FREE ENV STRUCT:
//===============================
// Free the given environment "e", simply by adding it to the free environment list.
void free_environment(struct Env* e)
{
f010943d:	55                   	push   %ebp
f010943e:	89 e5                	mov    %esp,%ebp
f0109440:	83 ec 08             	sub    $0x8,%esp
	memset(e, 0, sizeof(*e));
f0109443:	83 ec 04             	sub    $0x4,%esp
f0109446:	68 a8 ea 01 00       	push   $0x1eaa8
f010944b:	6a 00                	push   $0x0
f010944d:	ff 75 08             	pushl  0x8(%ebp)
f0109450:	e8 d6 71 02 00       	call   f013062b <memset>
f0109455:	83 c4 10             	add    $0x10,%esp
	e->env_status = ENV_FREE;
f0109458:	8b 45 08             	mov    0x8(%ebp),%eax
f010945b:	c7 40 54 00 00 00 00 	movl   $0x0,0x54(%eax)
	LIST_INSERT_HEAD(&env_free_list, e);
f0109462:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0109466:	75 17                	jne    f010947f <free_environment+0x42>
f0109468:	83 ec 04             	sub    $0x4,%esp
f010946b:	68 74 59 13 f0       	push   $0xf0135974
f0109470:	68 35 02 00 00       	push   $0x235
f0109475:	68 f3 58 13 f0       	push   $0xf01358f3
f010947a:	e8 27 6d ff ff       	call   f01001a6 <_panic>
f010947f:	8b 15 38 87 65 f0    	mov    0xf0658738,%edx
f0109485:	8b 45 08             	mov    0x8(%ebp),%eax
f0109488:	89 50 44             	mov    %edx,0x44(%eax)
f010948b:	8b 45 08             	mov    0x8(%ebp),%eax
f010948e:	8b 40 44             	mov    0x44(%eax),%eax
f0109491:	85 c0                	test   %eax,%eax
f0109493:	74 0d                	je     f01094a2 <free_environment+0x65>
f0109495:	a1 38 87 65 f0       	mov    0xf0658738,%eax
f010949a:	8b 55 08             	mov    0x8(%ebp),%edx
f010949d:	89 50 48             	mov    %edx,0x48(%eax)
f01094a0:	eb 08                	jmp    f01094aa <free_environment+0x6d>
f01094a2:	8b 45 08             	mov    0x8(%ebp),%eax
f01094a5:	a3 3c 87 65 f0       	mov    %eax,0xf065873c
f01094aa:	8b 45 08             	mov    0x8(%ebp),%eax
f01094ad:	a3 38 87 65 f0       	mov    %eax,0xf0658738
f01094b2:	8b 45 08             	mov    0x8(%ebp),%eax
f01094b5:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f01094bc:	a1 44 87 65 f0       	mov    0xf0658744,%eax
f01094c1:	40                   	inc    %eax
f01094c2:	a3 44 87 65 f0       	mov    %eax,0xf0658744
}
f01094c7:	90                   	nop
f01094c8:	c9                   	leave  
f01094c9:	c3                   	ret    

f01094ca <create_user_page_WS>:

//===============================================
// 4) DYNAMICALLY ALLOCATE SPACE FOR WORKING SET:
//===============================================
void * create_user_page_WS(struct Env * e, unsigned int numOfElements)
{
f01094ca:	55                   	push   %ebp
f01094cb:	89 e5                	mov    %esp,%ebp
f01094cd:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_page_WS()
	// Write your code here, remove the panic and write your code
	panic("create_user_page_WS() is not implemented yet...!!");
f01094d0:	83 ec 04             	sub    $0x4,%esp
f01094d3:	68 cc 59 13 f0       	push   $0xf01359cc
f01094d8:	68 3f 02 00 00       	push   $0x23f
f01094dd:	68 f3 58 13 f0       	push   $0xf01358f3
f01094e2:	e8 bf 6c ff ff       	call   f01001a6 <_panic>

f01094e7 <create_user_directory>:

//==================================================
// 5) DYNAMICALLY ALLOCATE SPACE FOR USER DIRECTORY:
//==================================================
void * create_user_directory()
{
f01094e7:	55                   	push   %ebp
f01094e8:	89 e5                	mov    %esp,%ebp
f01094ea:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [KERNEL DYNAMIC ALLOC] create_user_directory()
	// Write your code here, remove the panic and write your code
	panic("create_user_directory() is not implemented yet...!!");
f01094ed:	83 ec 04             	sub    $0x4,%esp
f01094f0:	68 00 5a 13 f0       	push   $0xf0135a00
f01094f5:	68 4b 02 00 00       	push   $0x24b
f01094fa:	68 f3 58 13 f0       	push   $0xf01358f3
f01094ff:	e8 a2 6c ff ff       	call   f01001a6 <_panic>

f0109504 <program_segment_alloc_map_copy_workingset>:
//
// The allocation shouldn't failed
// return 0
//
static int program_segment_alloc_map_copy_workingset(struct Env *e, struct ProgramSegment* seg, uint32* allocated_pages, uint32 remaining_ws_pages, uint32* lastTableNumber)
{
f0109504:	55                   	push   %ebp
f0109505:	89 e5                	mov    %esp,%ebp
f0109507:	53                   	push   %ebx
f0109508:	83 ec 44             	sub    $0x44,%esp
	void *vaddr = seg->virtual_address;
f010950b:	8b 45 0c             	mov    0xc(%ebp),%eax
f010950e:	8b 40 0c             	mov    0xc(%eax),%eax
f0109511:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	uint32 length = seg->size_in_memory;
f0109514:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109517:	8b 40 08             	mov    0x8(%eax),%eax
f010951a:	89 45 e0             	mov    %eax,-0x20(%ebp)

	uint32 end_vaddr = ROUNDUP((uint32)vaddr + length,PAGE_SIZE) ;
f010951d:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f0109524:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0109527:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010952a:	01 c2                	add    %eax,%edx
f010952c:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010952f:	01 d0                	add    %edx,%eax
f0109531:	48                   	dec    %eax
f0109532:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0109535:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109538:	ba 00 00 00 00       	mov    $0x0,%edx
f010953d:	f7 75 dc             	divl   -0x24(%ebp)
f0109540:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0109543:	29 d0                	sub    %edx,%eax
f0109545:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 iVA = ROUNDDOWN((uint32)vaddr,PAGE_SIZE) ;
f0109548:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010954b:	89 45 d0             	mov    %eax,-0x30(%ebp)
f010954e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0109551:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109556:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int r ;
	uint32 i = 0 ;
f0109559:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo *p = NULL;
f0109560:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)

	*allocated_pages = 0;
f0109567:	8b 45 10             	mov    0x10(%ebp),%eax
f010956a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
f0109570:	81 7d f4 00 00 20 00 	cmpl   $0x200000,-0xc(%ebp)
f0109577:	0f 85 12 06 00 00    	jne    f0109b8f <program_segment_alloc_map_copy_workingset+0x68b>
f010957d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109580:	05 18 da 01 00       	add    $0x1da18,%eax
f0109585:	83 ec 08             	sub    $0x8,%esp
f0109588:	68 34 5a 13 f0       	push   $0xf0135a34
f010958d:	50                   	push   %eax
f010958e:	e8 b6 6f 02 00       	call   f0130549 <strcmp>
f0109593:	83 c4 10             	add    $0x10,%esp
f0109596:	85 c0                	test   %eax,%eax
f0109598:	0f 84 f1 05 00 00    	je     f0109b8f <program_segment_alloc_map_copy_workingset+0x68b>
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
f010959e:	8b 45 14             	mov    0x14(%ebp),%eax
f01095a1:	83 f8 06             	cmp    $0x6,%eax
f01095a4:	76 05                	jbe    f01095ab <program_segment_alloc_map_copy_workingset+0xa7>
f01095a6:	b8 06 00 00 00       	mov    $0x6,%eax
f01095ab:	89 45 14             	mov    %eax,0x14(%ebp)
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f01095ae:	e9 dc 05 00 00       	jmp    f0109b8f <program_segment_alloc_map_copy_workingset+0x68b>
	{
		// Allocate a page
		allocate_frame(&p) ;
f01095b3:	83 ec 0c             	sub    $0xc,%esp
f01095b6:	8d 45 c0             	lea    -0x40(%ebp),%eax
f01095b9:	50                   	push   %eax
f01095ba:	e8 f3 d1 ff ff       	call   f01067b2 <allocate_frame>
f01095bf:	83 c4 10             	add    $0x10,%esp

		LOG_STRING("segment page allocated");
		loadtime_map_frame(e->env_page_directory, p, iVA, PERM_USER | PERM_WRITEABLE);
f01095c2:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01095c5:	8b 45 08             	mov    0x8(%ebp),%eax
f01095c8:	8b 40 5c             	mov    0x5c(%eax),%eax
f01095cb:	6a 06                	push   $0x6
f01095cd:	ff 75 f4             	pushl  -0xc(%ebp)
f01095d0:	52                   	push   %edx
f01095d1:	50                   	push   %eax
f01095d2:	e8 29 d7 ff ff       	call   f0106d00 <loadtime_map_frame>
f01095d7:	83 c4 10             	add    $0x10,%esp
		LOG_STRING("segment page mapped");

		LOG_STATMENT(cprintf("Updating working set entry # %d",e->page_last_WS_index));

		e->ptr_pageWorkingSet[e->page_last_WS_index].virtual_address = iVA;
f01095da:	8b 45 08             	mov    0x8(%ebp),%eax
f01095dd:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01095e3:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01095e6:	89 d0                	mov    %edx,%eax
f01095e8:	01 c0                	add    %eax,%eax
f01095ea:	01 d0                	add    %edx,%eax
f01095ec:	c1 e0 03             	shl    $0x3,%eax
f01095ef:	01 c8                	add    %ecx,%eax
f01095f1:	8d 50 78             	lea    0x78(%eax),%edx
f01095f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01095f7:	89 02                	mov    %eax,(%edx)
		e->ptr_pageWorkingSet[e->page_last_WS_index].empty = 0;
f01095f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01095fc:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109602:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109605:	89 d0                	mov    %edx,%eax
f0109607:	01 c0                	add    %eax,%eax
f0109609:	01 d0                	add    %edx,%eax
f010960b:	c1 e0 03             	shl    $0x3,%eax
f010960e:	01 c8                	add    %ecx,%eax
f0109610:	83 c0 7c             	add    $0x7c,%eax
f0109613:	c6 00 00             	movb   $0x0,(%eax)
		e->ptr_pageWorkingSet[e->page_last_WS_index].time_stamp = 0;
f0109616:	8b 45 08             	mov    0x8(%ebp),%eax
f0109619:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010961f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109622:	89 d0                	mov    %edx,%eax
f0109624:	01 c0                	add    %eax,%eax
f0109626:	01 d0                	add    %edx,%eax
f0109628:	c1 e0 03             	shl    $0x3,%eax
f010962b:	01 c8                	add    %ecx,%eax
f010962d:	83 e8 80             	sub    $0xffffff80,%eax
f0109630:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

		//2020
		if (isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109636:	83 ec 0c             	sub    $0xc,%esp
f0109639:	6a 02                	push   $0x2
f010963b:	e8 3f 3c 00 00       	call   f010d27f <isPageReplacmentAlgorithmLRU>
f0109640:	83 c4 10             	add    $0x10,%esp
f0109643:	85 c0                	test   %eax,%eax
f0109645:	0f 84 11 04 00 00    	je     f0109a5c <program_segment_alloc_map_copy_workingset+0x558>
		{
			LIST_REMOVE(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010964b:	8b 45 08             	mov    0x8(%ebp),%eax
f010964e:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109654:	89 d0                	mov    %edx,%eax
f0109656:	01 c0                	add    %eax,%eax
f0109658:	01 d0                	add    %edx,%eax
f010965a:	c1 e0 03             	shl    $0x3,%eax
f010965d:	8d 50 70             	lea    0x70(%eax),%edx
f0109660:	8b 45 08             	mov    0x8(%ebp),%eax
f0109663:	01 d0                	add    %edx,%eax
f0109665:	83 c0 08             	add    $0x8,%eax
f0109668:	85 c0                	test   %eax,%eax
f010966a:	75 17                	jne    f0109683 <program_segment_alloc_map_copy_workingset+0x17f>
f010966c:	83 ec 04             	sub    $0x4,%esp
f010966f:	68 55 59 13 f0       	push   $0xf0135955
f0109674:	68 7d 02 00 00       	push   $0x27d
f0109679:	68 f3 58 13 f0       	push   $0xf01358f3
f010967e:	e8 23 6b ff ff       	call   f01001a6 <_panic>
f0109683:	8b 45 08             	mov    0x8(%ebp),%eax
f0109686:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010968c:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010968f:	89 d0                	mov    %edx,%eax
f0109691:	01 c0                	add    %eax,%eax
f0109693:	01 d0                	add    %edx,%eax
f0109695:	c1 e0 03             	shl    $0x3,%eax
f0109698:	01 c8                	add    %ecx,%eax
f010969a:	05 88 00 00 00       	add    $0x88,%eax
f010969f:	8b 00                	mov    (%eax),%eax
f01096a1:	85 c0                	test   %eax,%eax
f01096a3:	74 41                	je     f01096e6 <program_segment_alloc_map_copy_workingset+0x1e2>
f01096a5:	8b 45 08             	mov    0x8(%ebp),%eax
f01096a8:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01096ae:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01096b1:	89 d0                	mov    %edx,%eax
f01096b3:	01 c0                	add    %eax,%eax
f01096b5:	01 d0                	add    %edx,%eax
f01096b7:	c1 e0 03             	shl    $0x3,%eax
f01096ba:	01 c8                	add    %ecx,%eax
f01096bc:	05 88 00 00 00       	add    $0x88,%eax
f01096c1:	8b 10                	mov    (%eax),%edx
f01096c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01096c6:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01096cc:	8b 5d 08             	mov    0x8(%ebp),%ebx
f01096cf:	89 c8                	mov    %ecx,%eax
f01096d1:	01 c0                	add    %eax,%eax
f01096d3:	01 c8                	add    %ecx,%eax
f01096d5:	c1 e0 03             	shl    $0x3,%eax
f01096d8:	01 d8                	add    %ebx,%eax
f01096da:	05 8c 00 00 00       	add    $0x8c,%eax
f01096df:	8b 00                	mov    (%eax),%eax
f01096e1:	89 42 14             	mov    %eax,0x14(%edx)
f01096e4:	eb 27                	jmp    f010970d <program_segment_alloc_map_copy_workingset+0x209>
f01096e6:	8b 45 08             	mov    0x8(%ebp),%eax
f01096e9:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01096ef:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01096f2:	89 d0                	mov    %edx,%eax
f01096f4:	01 c0                	add    %eax,%eax
f01096f6:	01 d0                	add    %edx,%eax
f01096f8:	c1 e0 03             	shl    $0x3,%eax
f01096fb:	01 c8                	add    %ecx,%eax
f01096fd:	05 8c 00 00 00       	add    $0x8c,%eax
f0109702:	8b 10                	mov    (%eax),%edx
f0109704:	8b 45 08             	mov    0x8(%ebp),%eax
f0109707:	89 90 74 ea 01 00    	mov    %edx,0x1ea74(%eax)
f010970d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109710:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109716:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109719:	89 d0                	mov    %edx,%eax
f010971b:	01 c0                	add    %eax,%eax
f010971d:	01 d0                	add    %edx,%eax
f010971f:	c1 e0 03             	shl    $0x3,%eax
f0109722:	01 c8                	add    %ecx,%eax
f0109724:	05 8c 00 00 00       	add    $0x8c,%eax
f0109729:	8b 00                	mov    (%eax),%eax
f010972b:	85 c0                	test   %eax,%eax
f010972d:	74 41                	je     f0109770 <program_segment_alloc_map_copy_workingset+0x26c>
f010972f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109732:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109738:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010973b:	89 d0                	mov    %edx,%eax
f010973d:	01 c0                	add    %eax,%eax
f010973f:	01 d0                	add    %edx,%eax
f0109741:	c1 e0 03             	shl    $0x3,%eax
f0109744:	01 c8                	add    %ecx,%eax
f0109746:	05 8c 00 00 00       	add    $0x8c,%eax
f010974b:	8b 10                	mov    (%eax),%edx
f010974d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109750:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109756:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109759:	89 c8                	mov    %ecx,%eax
f010975b:	01 c0                	add    %eax,%eax
f010975d:	01 c8                	add    %ecx,%eax
f010975f:	c1 e0 03             	shl    $0x3,%eax
f0109762:	01 d8                	add    %ebx,%eax
f0109764:	05 88 00 00 00       	add    $0x88,%eax
f0109769:	8b 00                	mov    (%eax),%eax
f010976b:	89 42 10             	mov    %eax,0x10(%edx)
f010976e:	eb 27                	jmp    f0109797 <program_segment_alloc_map_copy_workingset+0x293>
f0109770:	8b 45 08             	mov    0x8(%ebp),%eax
f0109773:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109779:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010977c:	89 d0                	mov    %edx,%eax
f010977e:	01 c0                	add    %eax,%eax
f0109780:	01 d0                	add    %edx,%eax
f0109782:	c1 e0 03             	shl    $0x3,%eax
f0109785:	01 c8                	add    %ecx,%eax
f0109787:	05 88 00 00 00       	add    $0x88,%eax
f010978c:	8b 10                	mov    (%eax),%edx
f010978e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109791:	89 90 70 ea 01 00    	mov    %edx,0x1ea70(%eax)
f0109797:	8b 45 08             	mov    0x8(%ebp),%eax
f010979a:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01097a0:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01097a3:	89 d0                	mov    %edx,%eax
f01097a5:	01 c0                	add    %eax,%eax
f01097a7:	01 d0                	add    %edx,%eax
f01097a9:	c1 e0 03             	shl    $0x3,%eax
f01097ac:	01 c8                	add    %ecx,%eax
f01097ae:	05 88 00 00 00       	add    $0x88,%eax
f01097b3:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01097b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01097bc:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01097c2:	8b 4d 08             	mov    0x8(%ebp),%ecx
f01097c5:	89 d0                	mov    %edx,%eax
f01097c7:	01 c0                	add    %eax,%eax
f01097c9:	01 d0                	add    %edx,%eax
f01097cb:	c1 e0 03             	shl    $0x3,%eax
f01097ce:	01 c8                	add    %ecx,%eax
f01097d0:	05 8c 00 00 00       	add    $0x8c,%eax
f01097d5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01097db:	8b 45 08             	mov    0x8(%ebp),%eax
f01097de:	8b 80 7c ea 01 00    	mov    0x1ea7c(%eax),%eax
f01097e4:	8d 50 ff             	lea    -0x1(%eax),%edx
f01097e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01097ea:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)
			//Always leave 1 page in Active list for the stack
			if (LIST_SIZE(&(e->ActiveList)) < e->ActiveListSize - 1)
f01097f0:	8b 45 08             	mov    0x8(%ebp),%eax
f01097f3:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f01097f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01097fc:	8b 80 a0 ea 01 00    	mov    0x1eaa0(%eax),%eax
f0109802:	48                   	dec    %eax
f0109803:	39 c2                	cmp    %eax,%edx
f0109805:	0f 83 2b 01 00 00    	jae    f0109936 <program_segment_alloc_map_copy_workingset+0x432>
			{
				LIST_INSERT_HEAD(&(e->ActiveList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f010980b:	8b 45 08             	mov    0x8(%ebp),%eax
f010980e:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109814:	89 d0                	mov    %edx,%eax
f0109816:	01 c0                	add    %eax,%eax
f0109818:	01 d0                	add    %edx,%eax
f010981a:	c1 e0 03             	shl    $0x3,%eax
f010981d:	8d 50 70             	lea    0x70(%eax),%edx
f0109820:	8b 45 08             	mov    0x8(%ebp),%eax
f0109823:	01 d0                	add    %edx,%eax
f0109825:	83 c0 08             	add    $0x8,%eax
f0109828:	85 c0                	test   %eax,%eax
f010982a:	75 17                	jne    f0109843 <program_segment_alloc_map_copy_workingset+0x33f>
f010982c:	83 ec 04             	sub    $0x4,%esp
f010982f:	68 74 59 13 f0       	push   $0xf0135974
f0109834:	68 81 02 00 00       	push   $0x281
f0109839:	68 f3 58 13 f0       	push   $0xf01358f3
f010983e:	e8 63 69 ff ff       	call   f01001a6 <_panic>
f0109843:	8b 45 08             	mov    0x8(%ebp),%eax
f0109846:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010984c:	8b 45 08             	mov    0x8(%ebp),%eax
f010984f:	8b 88 80 ea 01 00    	mov    0x1ea80(%eax),%ecx
f0109855:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109858:	89 d0                	mov    %edx,%eax
f010985a:	01 c0                	add    %eax,%eax
f010985c:	01 d0                	add    %edx,%eax
f010985e:	c1 e0 03             	shl    $0x3,%eax
f0109861:	01 d8                	add    %ebx,%eax
f0109863:	05 88 00 00 00       	add    $0x88,%eax
f0109868:	89 08                	mov    %ecx,(%eax)
f010986a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010986d:	89 d0                	mov    %edx,%eax
f010986f:	01 c0                	add    %eax,%eax
f0109871:	01 d0                	add    %edx,%eax
f0109873:	c1 e0 03             	shl    $0x3,%eax
f0109876:	01 c8                	add    %ecx,%eax
f0109878:	05 88 00 00 00       	add    $0x88,%eax
f010987d:	8b 00                	mov    (%eax),%eax
f010987f:	85 c0                	test   %eax,%eax
f0109881:	74 2b                	je     f01098ae <program_segment_alloc_map_copy_workingset+0x3aa>
f0109883:	8b 45 08             	mov    0x8(%ebp),%eax
f0109886:	8b 90 80 ea 01 00    	mov    0x1ea80(%eax),%edx
f010988c:	8b 45 08             	mov    0x8(%ebp),%eax
f010988f:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f0109895:	89 c8                	mov    %ecx,%eax
f0109897:	01 c0                	add    %eax,%eax
f0109899:	01 c8                	add    %ecx,%eax
f010989b:	c1 e0 03             	shl    $0x3,%eax
f010989e:	8d 48 70             	lea    0x70(%eax),%ecx
f01098a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01098a4:	01 c8                	add    %ecx,%eax
f01098a6:	83 c0 08             	add    $0x8,%eax
f01098a9:	89 42 14             	mov    %eax,0x14(%edx)
f01098ac:	eb 26                	jmp    f01098d4 <program_segment_alloc_map_copy_workingset+0x3d0>
f01098ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01098b1:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01098b7:	89 d0                	mov    %edx,%eax
f01098b9:	01 c0                	add    %eax,%eax
f01098bb:	01 d0                	add    %edx,%eax
f01098bd:	c1 e0 03             	shl    $0x3,%eax
f01098c0:	8d 50 70             	lea    0x70(%eax),%edx
f01098c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01098c6:	01 d0                	add    %edx,%eax
f01098c8:	8d 50 08             	lea    0x8(%eax),%edx
f01098cb:	8b 45 08             	mov    0x8(%ebp),%eax
f01098ce:	89 90 84 ea 01 00    	mov    %edx,0x1ea84(%eax)
f01098d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01098d7:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01098dd:	89 d0                	mov    %edx,%eax
f01098df:	01 c0                	add    %eax,%eax
f01098e1:	01 d0                	add    %edx,%eax
f01098e3:	c1 e0 03             	shl    $0x3,%eax
f01098e6:	8d 50 70             	lea    0x70(%eax),%edx
f01098e9:	8b 45 08             	mov    0x8(%ebp),%eax
f01098ec:	01 d0                	add    %edx,%eax
f01098ee:	8d 50 08             	lea    0x8(%eax),%edx
f01098f1:	8b 45 08             	mov    0x8(%ebp),%eax
f01098f4:	89 90 80 ea 01 00    	mov    %edx,0x1ea80(%eax)
f01098fa:	8b 45 08             	mov    0x8(%ebp),%eax
f01098fd:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109903:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109906:	89 d0                	mov    %edx,%eax
f0109908:	01 c0                	add    %eax,%eax
f010990a:	01 d0                	add    %edx,%eax
f010990c:	c1 e0 03             	shl    $0x3,%eax
f010990f:	01 c8                	add    %ecx,%eax
f0109911:	05 8c 00 00 00       	add    $0x8c,%eax
f0109916:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010991c:	8b 45 08             	mov    0x8(%ebp),%eax
f010991f:	8b 80 8c ea 01 00    	mov    0x1ea8c(%eax),%eax
f0109925:	8d 50 01             	lea    0x1(%eax),%edx
f0109928:	8b 45 08             	mov    0x8(%ebp),%eax
f010992b:	89 90 8c ea 01 00    	mov    %edx,0x1ea8c(%eax)
f0109931:	e9 26 01 00 00       	jmp    f0109a5c <program_segment_alloc_map_copy_workingset+0x558>
			}
			else
			{
				//Add to LRU Second list
				LIST_INSERT_HEAD(&(e->SecondList), &(e->ptr_pageWorkingSet[e->page_last_WS_index]));
f0109936:	8b 45 08             	mov    0x8(%ebp),%eax
f0109939:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f010993f:	89 d0                	mov    %edx,%eax
f0109941:	01 c0                	add    %eax,%eax
f0109943:	01 d0                	add    %edx,%eax
f0109945:	c1 e0 03             	shl    $0x3,%eax
f0109948:	8d 50 70             	lea    0x70(%eax),%edx
f010994b:	8b 45 08             	mov    0x8(%ebp),%eax
f010994e:	01 d0                	add    %edx,%eax
f0109950:	83 c0 08             	add    $0x8,%eax
f0109953:	85 c0                	test   %eax,%eax
f0109955:	75 17                	jne    f010996e <program_segment_alloc_map_copy_workingset+0x46a>
f0109957:	83 ec 04             	sub    $0x4,%esp
f010995a:	68 74 59 13 f0       	push   $0xf0135974
f010995f:	68 86 02 00 00       	push   $0x286
f0109964:	68 f3 58 13 f0       	push   $0xf01358f3
f0109969:	e8 38 68 ff ff       	call   f01001a6 <_panic>
f010996e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109971:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109977:	8b 45 08             	mov    0x8(%ebp),%eax
f010997a:	8b 88 90 ea 01 00    	mov    0x1ea90(%eax),%ecx
f0109980:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109983:	89 d0                	mov    %edx,%eax
f0109985:	01 c0                	add    %eax,%eax
f0109987:	01 d0                	add    %edx,%eax
f0109989:	c1 e0 03             	shl    $0x3,%eax
f010998c:	01 d8                	add    %ebx,%eax
f010998e:	05 88 00 00 00       	add    $0x88,%eax
f0109993:	89 08                	mov    %ecx,(%eax)
f0109995:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109998:	89 d0                	mov    %edx,%eax
f010999a:	01 c0                	add    %eax,%eax
f010999c:	01 d0                	add    %edx,%eax
f010999e:	c1 e0 03             	shl    $0x3,%eax
f01099a1:	01 c8                	add    %ecx,%eax
f01099a3:	05 88 00 00 00       	add    $0x88,%eax
f01099a8:	8b 00                	mov    (%eax),%eax
f01099aa:	85 c0                	test   %eax,%eax
f01099ac:	74 2b                	je     f01099d9 <program_segment_alloc_map_copy_workingset+0x4d5>
f01099ae:	8b 45 08             	mov    0x8(%ebp),%eax
f01099b1:	8b 90 90 ea 01 00    	mov    0x1ea90(%eax),%edx
f01099b7:	8b 45 08             	mov    0x8(%ebp),%eax
f01099ba:	8b 88 e8 d9 01 00    	mov    0x1d9e8(%eax),%ecx
f01099c0:	89 c8                	mov    %ecx,%eax
f01099c2:	01 c0                	add    %eax,%eax
f01099c4:	01 c8                	add    %ecx,%eax
f01099c6:	c1 e0 03             	shl    $0x3,%eax
f01099c9:	8d 48 70             	lea    0x70(%eax),%ecx
f01099cc:	8b 45 08             	mov    0x8(%ebp),%eax
f01099cf:	01 c8                	add    %ecx,%eax
f01099d1:	83 c0 08             	add    $0x8,%eax
f01099d4:	89 42 14             	mov    %eax,0x14(%edx)
f01099d7:	eb 26                	jmp    f01099ff <program_segment_alloc_map_copy_workingset+0x4fb>
f01099d9:	8b 45 08             	mov    0x8(%ebp),%eax
f01099dc:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f01099e2:	89 d0                	mov    %edx,%eax
f01099e4:	01 c0                	add    %eax,%eax
f01099e6:	01 d0                	add    %edx,%eax
f01099e8:	c1 e0 03             	shl    $0x3,%eax
f01099eb:	8d 50 70             	lea    0x70(%eax),%edx
f01099ee:	8b 45 08             	mov    0x8(%ebp),%eax
f01099f1:	01 d0                	add    %edx,%eax
f01099f3:	8d 50 08             	lea    0x8(%eax),%edx
f01099f6:	8b 45 08             	mov    0x8(%ebp),%eax
f01099f9:	89 90 94 ea 01 00    	mov    %edx,0x1ea94(%eax)
f01099ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a02:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109a08:	89 d0                	mov    %edx,%eax
f0109a0a:	01 c0                	add    %eax,%eax
f0109a0c:	01 d0                	add    %edx,%eax
f0109a0e:	c1 e0 03             	shl    $0x3,%eax
f0109a11:	8d 50 70             	lea    0x70(%eax),%edx
f0109a14:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a17:	01 d0                	add    %edx,%eax
f0109a19:	8d 50 08             	lea    0x8(%eax),%edx
f0109a1c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a1f:	89 90 90 ea 01 00    	mov    %edx,0x1ea90(%eax)
f0109a25:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a28:	8b 90 e8 d9 01 00    	mov    0x1d9e8(%eax),%edx
f0109a2e:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109a31:	89 d0                	mov    %edx,%eax
f0109a33:	01 c0                	add    %eax,%eax
f0109a35:	01 d0                	add    %edx,%eax
f0109a37:	c1 e0 03             	shl    $0x3,%eax
f0109a3a:	01 c8                	add    %ecx,%eax
f0109a3c:	05 8c 00 00 00       	add    $0x8c,%eax
f0109a41:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109a47:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a4a:	8b 80 9c ea 01 00    	mov    0x1ea9c(%eax),%eax
f0109a50:	8d 50 01             	lea    0x1(%eax),%edx
f0109a53:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a56:	89 90 9c ea 01 00    	mov    %edx,0x1ea9c(%eax)
			}
		}
		//=======================
		e->page_last_WS_index ++;
f0109a5c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a5f:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0109a65:	8d 50 01             	lea    0x1(%eax),%edx
f0109a68:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a6b:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)
		e->page_last_WS_index %= (e->page_WS_max_size);
f0109a71:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a74:	8b 80 e8 d9 01 00    	mov    0x1d9e8(%eax),%eax
f0109a7a:	8b 55 08             	mov    0x8(%ebp),%edx
f0109a7d:	8b 4a 74             	mov    0x74(%edx),%ecx
f0109a80:	ba 00 00 00 00       	mov    $0x0,%edx
f0109a85:	f7 f1                	div    %ecx
f0109a87:	8b 45 08             	mov    0x8(%ebp),%eax
f0109a8a:	89 90 e8 d9 01 00    	mov    %edx,0x1d9e8(%eax)

		//if a new table is created during the mapping, add it to the table working set
		if(PDX(iVA) != (*lastTableNumber))
f0109a90:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109a93:	c1 e8 16             	shr    $0x16,%eax
f0109a96:	89 c2                	mov    %eax,%edx
f0109a98:	8b 45 18             	mov    0x18(%ebp),%eax
f0109a9b:	8b 00                	mov    (%eax),%eax
f0109a9d:	39 c2                	cmp    %eax,%edx
f0109a9f:	0f 84 d3 00 00 00    	je     f0109b78 <program_segment_alloc_map_copy_workingset+0x674>
		{
			e->__ptr_tws[e->table_last_WS_index].virtual_address = ROUNDDOWN(iVA, PAGE_SIZE*1024);;
f0109aa5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109aa8:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0109aae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ab1:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0109ab4:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0109ab7:	25 00 00 c0 ff       	and    $0xffc00000,%eax
f0109abc:	89 c1                	mov    %eax,%ecx
f0109abe:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109ac1:	89 d0                	mov    %edx,%eax
f0109ac3:	01 c0                	add    %eax,%eax
f0109ac5:	01 d0                	add    %edx,%eax
f0109ac7:	c1 e0 03             	shl    $0x3,%eax
f0109aca:	01 d8                	add    %ebx,%eax
f0109acc:	05 38 d5 01 00       	add    $0x1d538,%eax
f0109ad1:	89 08                	mov    %ecx,(%eax)
			e->__ptr_tws[e->table_last_WS_index].empty = 0;
f0109ad3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ad6:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0109adc:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109adf:	89 d0                	mov    %edx,%eax
f0109ae1:	01 c0                	add    %eax,%eax
f0109ae3:	01 d0                	add    %edx,%eax
f0109ae5:	c1 e0 03             	shl    $0x3,%eax
f0109ae8:	01 c8                	add    %ecx,%eax
f0109aea:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0109aef:	c6 00 00             	movb   $0x0,(%eax)
			e->__ptr_tws[e->table_last_WS_index].time_stamp = 0x00000000;
f0109af2:	8b 45 08             	mov    0x8(%ebp),%eax
f0109af5:	8b 90 ec d9 01 00    	mov    0x1d9ec(%eax),%edx
f0109afb:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109afe:	89 d0                	mov    %edx,%eax
f0109b00:	01 c0                	add    %eax,%eax
f0109b02:	01 d0                	add    %edx,%eax
f0109b04:	c1 e0 03             	shl    $0x3,%eax
f0109b07:	01 c8                	add    %ecx,%eax
f0109b09:	05 40 d5 01 00       	add    $0x1d540,%eax
f0109b0e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			e->table_last_WS_index ++;
f0109b14:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b17:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109b1d:	8d 50 01             	lea    0x1(%eax),%edx
f0109b20:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b23:	89 90 ec d9 01 00    	mov    %edx,0x1d9ec(%eax)
			e->table_last_WS_index %= __TWS_MAX_SIZE;
f0109b29:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b2c:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109b32:	b9 32 00 00 00       	mov    $0x32,%ecx
f0109b37:	ba 00 00 00 00       	mov    $0x0,%edx
f0109b3c:	f7 f1                	div    %ecx
f0109b3e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b41:	89 90 ec d9 01 00    	mov    %edx,0x1d9ec(%eax)
			if (e->table_last_WS_index == 0)
f0109b47:	8b 45 08             	mov    0x8(%ebp),%eax
f0109b4a:	8b 80 ec d9 01 00    	mov    0x1d9ec(%eax),%eax
f0109b50:	85 c0                	test   %eax,%eax
f0109b52:	75 17                	jne    f0109b6b <program_segment_alloc_map_copy_workingset+0x667>
				panic("\nenv_create: Table working set become FULL during the application loading. Please increase the table working set size to be able to load the program successfully\n");
f0109b54:	83 ec 04             	sub    $0x4,%esp
f0109b57:	68 38 5a 13 f0       	push   $0xf0135a38
f0109b5c:	68 96 02 00 00       	push   $0x296
f0109b61:	68 f3 58 13 f0       	push   $0xf01358f3
f0109b66:	e8 3b 66 ff ff       	call   f01001a6 <_panic>
			(*lastTableNumber) = PDX(iVA);
f0109b6b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b6e:	c1 e8 16             	shr    $0x16,%eax
f0109b71:	89 c2                	mov    %eax,%edx
f0109b73:	8b 45 18             	mov    0x18(%ebp),%eax
f0109b76:	89 10                	mov    %edx,(%eax)
		}

		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
f0109b78:	8b 45 10             	mov    0x10(%ebp),%eax
f0109b7b:	8b 00                	mov    (%eax),%eax
f0109b7d:	8d 50 01             	lea    0x1(%eax),%edx
f0109b80:	8b 45 10             	mov    0x10(%ebp),%eax
f0109b83:	89 10                	mov    %edx,(%eax)
	*allocated_pages = 0;
	/*2015*/// Load max of 6 pages only for the segment that start with va = 200000 [EXCEPT tpp]
	if (iVA == 0x200000 && strcmp(e->prog_name, "tpp")!=0)
		remaining_ws_pages = remaining_ws_pages < 6 ? remaining_ws_pages:6 ;
	/*==========================================================================================*/
	for (; iVA < end_vaddr && i<remaining_ws_pages; i++, iVA += PAGE_SIZE)
f0109b85:	ff 45 f0             	incl   -0x10(%ebp)
f0109b88:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0109b8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109b92:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
f0109b95:	73 0c                	jae    f0109ba3 <program_segment_alloc_map_copy_workingset+0x69f>
f0109b97:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109b9a:	3b 45 14             	cmp    0x14(%ebp),%eax
f0109b9d:	0f 82 10 fa ff ff    	jb     f01095b3 <program_segment_alloc_map_copy_workingset+0xaf>
		/// TAKE CARE !!!! this was an destructive error
		/// DON'T MAKE IT " *allocated_pages ++ " EVER !
		(*allocated_pages) ++;
	}

	uint8 *src_ptr = (uint8 *)(seg->ptr_start) ;
f0109ba3:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109ba6:	8b 00                	mov    (%eax),%eax
f0109ba8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;
f0109bab:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109bae:	8b 40 0c             	mov    0xc(%eax),%eax
f0109bb1:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0109bb4:	eb 10                	jmp    f0109bc6 <program_segment_alloc_map_copy_workingset+0x6c2>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
	{
		*dst_ptr = *src_ptr ;
f0109bb6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0109bb9:	8a 10                	mov    (%eax),%dl
f0109bbb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109bbe:	88 10                	mov    %dl,(%eax)
		dst_ptr++ ;
f0109bc0:	ff 45 e8             	incl   -0x18(%ebp)
		src_ptr++ ;
f0109bc3:	ff 45 ec             	incl   -0x14(%ebp)
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0109bc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109bc9:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0109bcc:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0109bcf:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109bd4:	89 c2                	mov    %eax,%edx
f0109bd6:	8b 45 10             	mov    0x10(%ebp),%eax
f0109bd9:	8b 00                	mov    (%eax),%eax
f0109bdb:	c1 e0 0c             	shl    $0xc,%eax
f0109bde:	01 c2                	add    %eax,%edx
f0109be0:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109be3:	39 c2                	cmp    %eax,%edx
f0109be5:	76 1d                	jbe    f0109c04 <program_segment_alloc_map_copy_workingset+0x700>
			((uint32)dst_ptr< ((uint32)vaddr+ seg->size_in_file)) )
f0109be7:	8b 45 0c             	mov    0xc(%ebp),%eax
f0109bea:	8b 50 04             	mov    0x4(%eax),%edx
f0109bed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109bf0:	01 c2                	add    %eax,%edx
f0109bf2:	8b 45 e8             	mov    -0x18(%ebp),%eax
	uint8 *dst_ptr = (uint8 *) seg->virtual_address;

	//copy program segment page from (seg->ptr_start) to (seg->virtual_address)

	LOG_STATMENT(cprintf("copying data to allocated area VA %x from source %x",dst_ptr,src_ptr));
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) &&
f0109bf5:	39 c2                	cmp    %eax,%edx
f0109bf7:	77 bd                	ja     f0109bb6 <program_segment_alloc_map_copy_workingset+0x6b2>
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f0109bf9:	eb 09                	jmp    f0109c04 <program_segment_alloc_map_copy_workingset+0x700>
	{
		*dst_ptr = 0;
f0109bfb:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109bfe:	c6 00 00             	movb   $0x0,(%eax)
		dst_ptr++ ;
f0109c01:	ff 45 e8             	incl   -0x18(%ebp)
		*dst_ptr = *src_ptr ;
		dst_ptr++ ;
		src_ptr++ ;
	}
	LOG_STRING("zeroing remaining page space");
	while((uint32)dst_ptr < (ROUNDDOWN((uint32)vaddr,PAGE_SIZE) + (*allocated_pages)*PAGE_SIZE) )
f0109c04:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0109c07:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0109c0a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0109c0d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0109c12:	89 c2                	mov    %eax,%edx
f0109c14:	8b 45 10             	mov    0x10(%ebp),%eax
f0109c17:	8b 00                	mov    (%eax),%eax
f0109c19:	c1 e0 0c             	shl    $0xc,%eax
f0109c1c:	01 c2                	add    %eax,%edx
f0109c1e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0109c21:	39 c2                	cmp    %eax,%edx
f0109c23:	77 d6                	ja     f0109bfb <program_segment_alloc_map_copy_workingset+0x6f7>
	//	{
	//		uint32 *ptr_page_table;
	//		get_page_table(e->env_pgdir, iVA, 1, &ptr_page_table);
	//	}
	//	LOG_STRING("page tables created successfully");
	return 0;
f0109c25:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0109c2a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109c2d:	c9                   	leave  
f0109c2e:	c3                   	ret    

f0109c2f <initialize_environment>:
// and initialize the kernel portion of the new environment's address space.
// Do NOT (yet) map anything into the user portion
// of the environment's virtual address space.
//
void initialize_environment(struct Env* e, uint32* ptr_user_page_directory, unsigned int phys_user_page_directory)
{
f0109c2f:	55                   	push   %ebp
f0109c30:	89 e5                	mov    %esp,%ebp
f0109c32:	53                   	push   %ebx
f0109c33:	83 ec 14             	sub    $0x14,%esp
	//panic("initialize_environment function is not completed yet") ;
	// [1] initialize the kernel portion of the new environment's address space.
	// [2] set e->env_pgdir and e->env_cr3 accordingly,
	int i;
	e->env_page_directory = ptr_user_page_directory;
f0109c36:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c39:	8b 55 0c             	mov    0xc(%ebp),%edx
f0109c3c:	89 50 5c             	mov    %edx,0x5c(%eax)
	e->env_cr3 = phys_user_page_directory;
f0109c3f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c42:	8b 55 10             	mov    0x10(%ebp),%edx
f0109c45:	89 50 60             	mov    %edx,0x60(%eax)

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0109c48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109c4f:	eb 17                	jmp    f0109c68 <initialize_environment+0x39>
	{
		e->env_page_directory[i] = 0 ;
f0109c51:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c54:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109c57:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c5a:	c1 e2 02             	shl    $0x2,%edx
f0109c5d:	01 d0                	add    %edx,%eax
f0109c5f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i;
	e->env_page_directory = ptr_user_page_directory;
	e->env_cr3 = phys_user_page_directory;

	//[TODODONE]: copy the kernel area only (to avoid copying the currently shared objects)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
f0109c65:	ff 45 f4             	incl   -0xc(%ebp)
f0109c68:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109c6b:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f0109c70:	76 df                	jbe    f0109c51 <initialize_environment+0x22>
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0109c72:	c7 45 f4 bb 03 00 00 	movl   $0x3bb,-0xc(%ebp)
f0109c79:	eb 22                	jmp    f0109c9d <initialize_environment+0x6e>
	{
		e->env_page_directory[i] = ptr_page_directory[i] ;
f0109c7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109c7e:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109c81:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109c84:	c1 e2 02             	shl    $0x2,%edx
f0109c87:	01 c2                	add    %eax,%edx
f0109c89:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0109c8e:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0109c91:	c1 e1 02             	shl    $0x2,%ecx
f0109c94:	01 c8                	add    %ecx,%eax
f0109c96:	8b 00                	mov    (%eax),%eax
f0109c98:	89 02                	mov    %eax,(%edx)
	for (i = 0 ; i < PDX(USER_TOP) ; i++)
	{
		e->env_page_directory[i] = 0 ;
	}

	for (i = PDX(USER_TOP) ; i < 1024 ; i++)
f0109c9a:	ff 45 f4             	incl   -0xc(%ebp)
f0109c9d:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f0109ca4:	7e d5                	jle    f0109c7b <initialize_environment+0x4c>
		e->ptr_pageWorkingSet = create_user_page_WS(e, e->page_WS_max_size);
		share_pws_at_user_space(e);
	}
#else
	{
		uint32 env_index = (uint32)(e-envs);
f0109ca6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ca9:	8b 15 30 87 65 f0    	mov    0xf0658730,%edx
f0109caf:	29 d0                	sub    %edx,%eax
f0109cb1:	c1 f8 03             	sar    $0x3,%eax
f0109cb4:	89 c2                	mov    %eax,%edx
f0109cb6:	89 d0                	mov    %edx,%eax
f0109cb8:	c1 e0 03             	shl    $0x3,%eax
f0109cbb:	01 d0                	add    %edx,%eax
f0109cbd:	c1 e0 03             	shl    $0x3,%eax
f0109cc0:	01 d0                	add    %edx,%eax
f0109cc2:	01 c0                	add    %eax,%eax
f0109cc4:	01 d0                	add    %edx,%eax
f0109cc6:	01 c0                	add    %eax,%eax
f0109cc8:	01 d0                	add    %edx,%eax
f0109cca:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0109cd1:	01 c8                	add    %ecx,%eax
f0109cd3:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f0109cda:	01 c8                	add    %ecx,%eax
f0109cdc:	c1 e0 02             	shl    $0x2,%eax
f0109cdf:	01 d0                	add    %edx,%eax
f0109ce1:	01 c0                	add    %eax,%eax
f0109ce3:	01 d0                	add    %edx,%eax
f0109ce5:	01 c0                	add    %eax,%eax
f0109ce7:	01 d0                	add    %edx,%eax
f0109ce9:	c1 e0 02             	shl    $0x2,%eax
f0109cec:	01 d0                	add    %edx,%eax
f0109cee:	01 c0                	add    %eax,%eax
f0109cf0:	01 d0                	add    %edx,%eax
f0109cf2:	c1 e0 09             	shl    $0x9,%eax
f0109cf5:	29 d0                	sub    %edx,%eax
f0109cf7:	c1 e0 02             	shl    $0x2,%eax
f0109cfa:	01 d0                	add    %edx,%eax
f0109cfc:	89 45 ec             	mov    %eax,-0x14(%ebp)
		e->__uptr_pws = (struct WorkingSetElement*) ( ((struct Env*)(UENVS+sizeof(struct Env)*env_index))->ptr_pageWorkingSet );
f0109cff:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0109d02:	89 d0                	mov    %edx,%eax
f0109d04:	01 c0                	add    %eax,%eax
f0109d06:	01 d0                	add    %edx,%eax
f0109d08:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0109d0f:	01 c8                	add    %ecx,%eax
f0109d11:	c1 e0 02             	shl    $0x2,%eax
f0109d14:	01 d0                	add    %edx,%eax
f0109d16:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f0109d1d:	01 c8                	add    %ecx,%eax
f0109d1f:	c1 e0 02             	shl    $0x2,%eax
f0109d22:	01 d0                	add    %edx,%eax
f0109d24:	c1 e0 02             	shl    $0x2,%eax
f0109d27:	01 d0                	add    %edx,%eax
f0109d29:	c1 e0 03             	shl    $0x3,%eax
f0109d2c:	2d 00 00 40 11       	sub    $0x11400000,%eax
f0109d31:	8d 50 78             	lea    0x78(%eax),%edx
f0109d34:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d37:	89 90 58 da 01 00    	mov    %edx,0x1da58(%eax)
#endif


	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
f0109d3d:	83 ec 0c             	sub    $0xc,%esp
f0109d40:	6a 02                	push   $0x2
f0109d42:	e8 38 35 00 00       	call   f010d27f <isPageReplacmentAlgorithmLRU>
f0109d47:	83 c4 10             	add    $0x10,%esp
f0109d4a:	85 c0                	test   %eax,%eax
f0109d4c:	0f 84 25 01 00 00    	je     f0109e77 <initialize_environment+0x248>
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f0109d52:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f0109d59:	e9 08 01 00 00       	jmp    f0109e66 <initialize_environment+0x237>
		{
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
f0109d5e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109d61:	89 d0                	mov    %edx,%eax
f0109d63:	01 c0                	add    %eax,%eax
f0109d65:	01 d0                	add    %edx,%eax
f0109d67:	c1 e0 03             	shl    $0x3,%eax
f0109d6a:	8d 50 70             	lea    0x70(%eax),%edx
f0109d6d:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d70:	01 d0                	add    %edx,%eax
f0109d72:	83 c0 08             	add    $0x8,%eax
f0109d75:	85 c0                	test   %eax,%eax
f0109d77:	75 17                	jne    f0109d90 <initialize_environment+0x161>
f0109d79:	83 ec 04             	sub    $0x4,%esp
f0109d7c:	68 74 59 13 f0       	push   $0xf0135974
f0109d81:	68 f4 02 00 00       	push   $0x2f4
f0109d86:	68 f3 58 13 f0       	push   $0xf01358f3
f0109d8b:	e8 16 64 ff ff       	call   f01001a6 <_panic>
f0109d90:	8b 45 08             	mov    0x8(%ebp),%eax
f0109d93:	8b 90 70 ea 01 00    	mov    0x1ea70(%eax),%edx
f0109d99:	8b 5d 08             	mov    0x8(%ebp),%ebx
f0109d9c:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0109d9f:	89 c8                	mov    %ecx,%eax
f0109da1:	01 c0                	add    %eax,%eax
f0109da3:	01 c8                	add    %ecx,%eax
f0109da5:	c1 e0 03             	shl    $0x3,%eax
f0109da8:	01 d8                	add    %ebx,%eax
f0109daa:	05 88 00 00 00       	add    $0x88,%eax
f0109daf:	89 10                	mov    %edx,(%eax)
f0109db1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109db4:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109db7:	89 d0                	mov    %edx,%eax
f0109db9:	01 c0                	add    %eax,%eax
f0109dbb:	01 d0                	add    %edx,%eax
f0109dbd:	c1 e0 03             	shl    $0x3,%eax
f0109dc0:	01 c8                	add    %ecx,%eax
f0109dc2:	05 88 00 00 00       	add    $0x88,%eax
f0109dc7:	8b 00                	mov    (%eax),%eax
f0109dc9:	85 c0                	test   %eax,%eax
f0109dcb:	74 25                	je     f0109df2 <initialize_environment+0x1c3>
f0109dcd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109dd0:	8b 90 70 ea 01 00    	mov    0x1ea70(%eax),%edx
f0109dd6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f0109dd9:	89 c8                	mov    %ecx,%eax
f0109ddb:	01 c0                	add    %eax,%eax
f0109ddd:	01 c8                	add    %ecx,%eax
f0109ddf:	c1 e0 03             	shl    $0x3,%eax
f0109de2:	8d 48 70             	lea    0x70(%eax),%ecx
f0109de5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109de8:	01 c8                	add    %ecx,%eax
f0109dea:	83 c0 08             	add    $0x8,%eax
f0109ded:	89 42 14             	mov    %eax,0x14(%edx)
f0109df0:	eb 20                	jmp    f0109e12 <initialize_environment+0x1e3>
f0109df2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109df5:	89 d0                	mov    %edx,%eax
f0109df7:	01 c0                	add    %eax,%eax
f0109df9:	01 d0                	add    %edx,%eax
f0109dfb:	c1 e0 03             	shl    $0x3,%eax
f0109dfe:	8d 50 70             	lea    0x70(%eax),%edx
f0109e01:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e04:	01 d0                	add    %edx,%eax
f0109e06:	8d 50 08             	lea    0x8(%eax),%edx
f0109e09:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e0c:	89 90 74 ea 01 00    	mov    %edx,0x1ea74(%eax)
f0109e12:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109e15:	89 d0                	mov    %edx,%eax
f0109e17:	01 c0                	add    %eax,%eax
f0109e19:	01 d0                	add    %edx,%eax
f0109e1b:	c1 e0 03             	shl    $0x3,%eax
f0109e1e:	8d 50 70             	lea    0x70(%eax),%edx
f0109e21:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e24:	01 d0                	add    %edx,%eax
f0109e26:	8d 50 08             	lea    0x8(%eax),%edx
f0109e29:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e2c:	89 90 70 ea 01 00    	mov    %edx,0x1ea70(%eax)
f0109e32:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e35:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0109e38:	89 d0                	mov    %edx,%eax
f0109e3a:	01 c0                	add    %eax,%eax
f0109e3c:	01 d0                	add    %edx,%eax
f0109e3e:	c1 e0 03             	shl    $0x3,%eax
f0109e41:	01 c8                	add    %ecx,%eax
f0109e43:	05 8c 00 00 00       	add    $0x8c,%eax
f0109e48:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0109e4e:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e51:	8b 80 7c ea 01 00    	mov    0x1ea7c(%eax),%eax
f0109e57:	8d 50 01             	lea    0x1(%eax),%edx
f0109e5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e5d:	89 90 7c ea 01 00    	mov    %edx,0x1ea7c(%eax)

	//2020
	// Add its elements to the "e->PageWorkingSetList"
	if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_LISTS_APPROX))
	{
		for (int i = 0; i < e->page_WS_max_size; ++i)
f0109e63:	ff 45 f0             	incl   -0x10(%ebp)
f0109e66:	8b 45 08             	mov    0x8(%ebp),%eax
f0109e69:	8b 50 74             	mov    0x74(%eax),%edx
f0109e6c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0109e6f:	39 c2                	cmp    %eax,%edx
f0109e71:	0f 87 e7 fe ff ff    	ja     f0109d5e <initialize_environment+0x12f>
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f0109e77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109e7e:	eb 4e                	jmp    f0109ece <initialize_environment+0x29f>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
f0109e80:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e83:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109e86:	89 d0                	mov    %edx,%eax
f0109e88:	01 c0                	add    %eax,%eax
f0109e8a:	01 d0                	add    %edx,%eax
f0109e8c:	c1 e0 03             	shl    $0x3,%eax
f0109e8f:	01 c8                	add    %ecx,%eax
f0109e91:	83 c0 78             	add    $0x78,%eax
f0109e94:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
f0109e9a:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109e9d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ea0:	89 d0                	mov    %edx,%eax
f0109ea2:	01 c0                	add    %eax,%eax
f0109ea4:	01 d0                	add    %edx,%eax
f0109ea6:	c1 e0 03             	shl    $0x3,%eax
f0109ea9:	01 c8                	add    %ecx,%eax
f0109eab:	83 c0 7c             	add    $0x7c,%eax
f0109eae:	c6 00 01             	movb   $0x1,(%eax)
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
f0109eb1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109eb4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109eb7:	89 d0                	mov    %edx,%eax
f0109eb9:	01 c0                	add    %eax,%eax
f0109ebb:	01 d0                	add    %edx,%eax
f0109ebd:	c1 e0 03             	shl    $0x3,%eax
f0109ec0:	01 c8                	add    %ecx,%eax
f0109ec2:	83 e8 80             	sub    $0xffffff80,%eax
f0109ec5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			LIST_INSERT_HEAD(&(e->PageWorkingSetList), &(e->ptr_pageWorkingSet[i]));
		}
	}

	//initialize environment working set
	for(i=0; i< (e->page_WS_max_size); i++)
f0109ecb:	ff 45 f4             	incl   -0xc(%ebp)
f0109ece:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ed1:	8b 50 74             	mov    0x74(%eax),%edx
f0109ed4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0109ed7:	39 c2                	cmp    %eax,%edx
f0109ed9:	77 a5                	ja     f0109e80 <initialize_environment+0x251>
	{
		e->ptr_pageWorkingSet[i].virtual_address = 0;
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;
f0109edb:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ede:	c7 80 e8 d9 01 00 00 	movl   $0x0,0x1d9e8(%eax)
f0109ee5:	00 00 00 

	for(i=0; i< __TWS_MAX_SIZE; i++)
f0109ee8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0109eef:	eb 54                	jmp    f0109f45 <initialize_environment+0x316>
	{
		e->__ptr_tws[i].virtual_address = 0;
f0109ef1:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109ef4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109ef7:	89 d0                	mov    %edx,%eax
f0109ef9:	01 c0                	add    %eax,%eax
f0109efb:	01 d0                	add    %edx,%eax
f0109efd:	c1 e0 03             	shl    $0x3,%eax
f0109f00:	01 c8                	add    %ecx,%eax
f0109f02:	05 38 d5 01 00       	add    $0x1d538,%eax
f0109f07:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->__ptr_tws[i].empty = 1;
f0109f0d:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f10:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f13:	89 d0                	mov    %edx,%eax
f0109f15:	01 c0                	add    %eax,%eax
f0109f17:	01 d0                	add    %edx,%eax
f0109f19:	c1 e0 03             	shl    $0x3,%eax
f0109f1c:	01 c8                	add    %ecx,%eax
f0109f1e:	05 3c d5 01 00       	add    $0x1d53c,%eax
f0109f23:	c6 00 01             	movb   $0x1,(%eax)
		e->__ptr_tws[i].time_stamp = 0 ;
f0109f26:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0109f29:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0109f2c:	89 d0                	mov    %edx,%eax
f0109f2e:	01 c0                	add    %eax,%eax
f0109f30:	01 d0                	add    %edx,%eax
f0109f32:	c1 e0 03             	shl    $0x3,%eax
f0109f35:	01 c8                	add    %ecx,%eax
f0109f37:	05 40 d5 01 00       	add    $0x1d540,%eax
f0109f3c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
		e->ptr_pageWorkingSet[i].empty = 1;
		e->ptr_pageWorkingSet[i].time_stamp = 0 ;
	}
	e->page_last_WS_index = 0;

	for(i=0; i< __TWS_MAX_SIZE; i++)
f0109f42:	ff 45 f4             	incl   -0xc(%ebp)
f0109f45:	83 7d f4 31          	cmpl   $0x31,-0xc(%ebp)
f0109f49:	7e a6                	jle    f0109ef1 <initialize_environment+0x2c2>
		e->__ptr_tws[i].virtual_address = 0;
		e->__ptr_tws[i].empty = 1;
		e->__ptr_tws[i].time_stamp = 0 ;
	}

	e->table_last_WS_index = 0;
f0109f4b:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f4e:	c7 80 ec d9 01 00 00 	movl   $0x0,0x1d9ec(%eax)
f0109f55:	00 00 00 

	e->pageFaultsCounter=0;
f0109f58:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f5b:	c7 80 f0 d9 01 00 00 	movl   $0x0,0x1d9f0(%eax)
f0109f62:	00 00 00 
	e->tableFaultsCounter=0;
f0109f65:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f68:	c7 80 f4 d9 01 00 00 	movl   $0x0,0x1d9f4(%eax)
f0109f6f:	00 00 00 

	e->freeingFullWSCounter = 0;
f0109f72:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f75:	c7 80 f8 d9 01 00 00 	movl   $0x0,0x1d9f8(%eax)
f0109f7c:	00 00 00 
	e->freeingScarceMemCounter = 0;
f0109f7f:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f82:	c7 80 fc d9 01 00 00 	movl   $0x0,0x1d9fc(%eax)
f0109f89:	00 00 00 

	e->nModifiedPages=0;
f0109f8c:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f8f:	c7 80 00 da 01 00 00 	movl   $0x0,0x1da00(%eax)
f0109f96:	00 00 00 
	e->nNotModifiedPages=0;
f0109f99:	8b 45 08             	mov    0x8(%ebp),%eax
f0109f9c:	c7 80 04 da 01 00 00 	movl   $0x0,0x1da04(%eax)
f0109fa3:	00 00 00 
	e->nClocks = 0;
f0109fa6:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fa9:	c7 80 60 da 01 00 00 	movl   $0x0,0x1da60(%eax)
f0109fb0:	00 00 00 

	//2020
	e->nPageIn = 0;
f0109fb3:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fb6:	c7 80 08 da 01 00 00 	movl   $0x0,0x1da08(%eax)
f0109fbd:	00 00 00 
	e->nPageOut = 0;
f0109fc0:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fc3:	c7 80 0c da 01 00 00 	movl   $0x0,0x1da0c(%eax)
f0109fca:	00 00 00 
	e->nNewPageAdded = 0;
f0109fcd:	8b 45 08             	mov    0x8(%ebp),%eax
f0109fd0:	c7 80 10 da 01 00 00 	movl   $0x0,0x1da10(%eax)
f0109fd7:	00 00 00 

	//e->shared_free_address = USER_SHARED_MEM_START;

	//Completes other environment initializations, (envID, status and most of registers)
	complete_environment_initialization(e);
f0109fda:	83 ec 0c             	sub    $0xc,%esp
f0109fdd:	ff 75 08             	pushl  0x8(%ebp)
f0109fe0:	e8 09 00 00 00       	call   f0109fee <complete_environment_initialization>
f0109fe5:	83 c4 10             	add    $0x10,%esp
}
f0109fe8:	90                   	nop
f0109fe9:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f0109fec:	c9                   	leave  
f0109fed:	c3                   	ret    

f0109fee <complete_environment_initialization>:

//========================================================
// 8) COMPLETE INITIALIZATION [OTHERS: ID, REGS, STATUS...):
//========================================================
void complete_environment_initialization(struct Env* e)
{
f0109fee:	55                   	push   %ebp
f0109fef:	89 e5                	mov    %esp,%ebp
f0109ff1:	53                   	push   %ebx
f0109ff2:	83 ec 14             	sub    $0x14,%esp
	//VPT and UVPT map the env's own page table, with
	//different permissions.
	e->env_page_directory[PDX(VPT)]  = e->env_cr3 | PERM_PRESENT | PERM_WRITEABLE;
f0109ff5:	8b 45 08             	mov    0x8(%ebp),%eax
f0109ff8:	8b 40 5c             	mov    0x5c(%eax),%eax
f0109ffb:	8d 90 fc 0e 00 00    	lea    0xefc(%eax),%edx
f010a001:	8b 45 08             	mov    0x8(%ebp),%eax
f010a004:	8b 40 60             	mov    0x60(%eax),%eax
f010a007:	83 c8 03             	or     $0x3,%eax
f010a00a:	89 02                	mov    %eax,(%edx)
	e->env_page_directory[PDX(UVPT)] = e->env_cr3 | PERM_PRESENT | PERM_USER;
f010a00c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a00f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a012:	8d 90 f4 0e 00 00    	lea    0xef4(%eax),%edx
f010a018:	8b 45 08             	mov    0x8(%ebp),%eax
f010a01b:	8b 40 60             	mov    0x60(%eax),%eax
f010a01e:	83 c8 05             	or     $0x5,%eax
f010a021:	89 02                	mov    %eax,(%edx)

	// page file directory initialization
	e->disk_env_pgdir= 0;
f010a023:	8b 45 08             	mov    0x8(%ebp),%eax
f010a026:	c7 40 64 00 00 00 00 	movl   $0x0,0x64(%eax)
	e->disk_env_pgdir_PA= 0;
f010a02d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a030:	c7 40 68 00 00 00 00 	movl   $0x0,0x68(%eax)
	e->disk_env_tabledir = 0;
f010a037:	8b 45 08             	mov    0x8(%ebp),%eax
f010a03a:	c7 40 6c 00 00 00 00 	movl   $0x0,0x6c(%eax)
	e->disk_env_tabledir_PA = 0;
f010a041:	8b 45 08             	mov    0x8(%ebp),%eax
f010a044:	c7 40 70 00 00 00 00 	movl   $0x0,0x70(%eax)

	int32 generation;
	// Generate an env_id for this environment.
	/*2022: UPDATED*/generation = (e->env_id + (1 << ENVGENSHIFT)) & ~(NEARPOW2NENV - 1);
f010a04b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a04e:	8b 58 4c             	mov    0x4c(%eax),%ebx
f010a051:	83 ec 0c             	sub    $0xc,%esp
f010a054:	6a 08                	push   $0x8
f010a056:	e8 a2 51 02 00       	call   f012f1fd <log2_ceil>
f010a05b:	83 c4 10             	add    $0x10,%esp
f010a05e:	ba 01 00 00 00       	mov    $0x1,%edx
f010a063:	88 c1                	mov    %al,%cl
f010a065:	d3 e2                	shl    %cl,%edx
f010a067:	89 d0                	mov    %edx,%eax
f010a069:	01 d8                	add    %ebx,%eax
f010a06b:	89 c3                	mov    %eax,%ebx
f010a06d:	83 ec 0c             	sub    $0xc,%esp
f010a070:	6a 08                	push   $0x8
f010a072:	e8 51 51 02 00       	call   f012f1c8 <nearest_pow2_ceil>
f010a077:	83 c4 10             	add    $0x10,%esp
f010a07a:	f7 d8                	neg    %eax
f010a07c:	21 d8                	and    %ebx,%eax
f010a07e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (generation <= 0)	// Don't create a negative env_id.
f010a081:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a085:	7f 1b                	jg     f010a0a2 <complete_environment_initialization+0xb4>
		generation = 1 << ENVGENSHIFT;
f010a087:	83 ec 0c             	sub    $0xc,%esp
f010a08a:	6a 08                	push   $0x8
f010a08c:	e8 6c 51 02 00       	call   f012f1fd <log2_ceil>
f010a091:	83 c4 10             	add    $0x10,%esp
f010a094:	ba 01 00 00 00       	mov    $0x1,%edx
f010a099:	88 c1                	mov    %al,%cl
f010a09b:	d3 e2                	shl    %cl,%edx
f010a09d:	89 d0                	mov    %edx,%eax
f010a09f:	89 45 f4             	mov    %eax,-0xc(%ebp)
	e->env_id = generation | (e - envs);
f010a0a2:	8b 45 08             	mov    0x8(%ebp),%eax
f010a0a5:	8b 15 30 87 65 f0    	mov    0xf0658730,%edx
f010a0ab:	29 d0                	sub    %edx,%eax
f010a0ad:	c1 f8 03             	sar    $0x3,%eax
f010a0b0:	89 c2                	mov    %eax,%edx
f010a0b2:	89 d0                	mov    %edx,%eax
f010a0b4:	c1 e0 03             	shl    $0x3,%eax
f010a0b7:	01 d0                	add    %edx,%eax
f010a0b9:	c1 e0 03             	shl    $0x3,%eax
f010a0bc:	01 d0                	add    %edx,%eax
f010a0be:	01 c0                	add    %eax,%eax
f010a0c0:	01 d0                	add    %edx,%eax
f010a0c2:	01 c0                	add    %eax,%eax
f010a0c4:	01 d0                	add    %edx,%eax
f010a0c6:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a0cd:	01 c8                	add    %ecx,%eax
f010a0cf:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010a0d6:	01 c8                	add    %ecx,%eax
f010a0d8:	c1 e0 02             	shl    $0x2,%eax
f010a0db:	01 d0                	add    %edx,%eax
f010a0dd:	01 c0                	add    %eax,%eax
f010a0df:	01 d0                	add    %edx,%eax
f010a0e1:	01 c0                	add    %eax,%eax
f010a0e3:	01 d0                	add    %edx,%eax
f010a0e5:	c1 e0 02             	shl    $0x2,%eax
f010a0e8:	01 d0                	add    %edx,%eax
f010a0ea:	01 c0                	add    %eax,%eax
f010a0ec:	01 d0                	add    %edx,%eax
f010a0ee:	c1 e0 09             	shl    $0x9,%eax
f010a0f1:	29 d0                	sub    %edx,%eax
f010a0f3:	c1 e0 02             	shl    $0x2,%eax
f010a0f6:	01 d0                	add    %edx,%eax
f010a0f8:	0b 45 f4             	or     -0xc(%ebp),%eax
f010a0fb:	89 c2                	mov    %eax,%edx
f010a0fd:	8b 45 08             	mov    0x8(%ebp),%eax
f010a100:	89 50 4c             	mov    %edx,0x4c(%eax)

	//cprintf("ENV_CREATE: envID = %d, orig index in envs = %d, calc index using ENVX = %d\n", e->env_id, (e - envs), ENVX(e->env_id));

	// Set the basic status variables.
	//2017====================================================
	if (curenv == NULL)
f010a103:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010a108:	85 c0                	test   %eax,%eax
f010a10a:	75 0c                	jne    f010a118 <complete_environment_initialization+0x12a>
		e->env_parent_id = 0;//no parent;
f010a10c:	8b 45 08             	mov    0x8(%ebp),%eax
f010a10f:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
f010a116:	eb 0e                	jmp    f010a126 <complete_environment_initialization+0x138>
	else
		e->env_parent_id = curenv->env_id;//curenv is the parent;
f010a118:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010a11d:	8b 50 4c             	mov    0x4c(%eax),%edx
f010a120:	8b 45 08             	mov    0x8(%ebp),%eax
f010a123:	89 50 50             	mov    %edx,0x50(%eax)
	//========================================================
	e->env_status = ENV_NEW;
f010a126:	8b 45 08             	mov    0x8(%ebp),%eax
f010a129:	c7 40 54 04 00 00 00 	movl   $0x4,0x54(%eax)
	e->env_runs = 0;
f010a130:	8b 45 08             	mov    0x8(%ebp),%eax
f010a133:	c7 40 58 00 00 00 00 	movl   $0x0,0x58(%eax)

	// Clear out all the saved register state,
	// to prevent the register values
	// of a prior environment inhabiting this Env structure
	// from "leaking" into our new environment.
	memset(&e->env_tf, 0, sizeof(e->env_tf));
f010a13a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a13d:	83 ec 04             	sub    $0x4,%esp
f010a140:	6a 44                	push   $0x44
f010a142:	6a 00                	push   $0x0
f010a144:	50                   	push   %eax
f010a145:	e8 e1 64 02 00       	call   f013062b <memset>
f010a14a:	83 c4 10             	add    $0x10,%esp
	// GD_UD is the user data segment selector in the GDT, and
	// GD_UT is the user text segment selector (see inc/memlayout.h).
	// The low 2 bits of each segment register contains the
	// Requester Privilege Level (RPL); 3 means user mode.

	e->env_tf.tf_ds = GD_UD | 3;
f010a14d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a150:	66 c7 40 24 23 00    	movw   $0x23,0x24(%eax)
	e->env_tf.tf_es = GD_UD | 3;
f010a156:	8b 45 08             	mov    0x8(%ebp),%eax
f010a159:	66 c7 40 20 23 00    	movw   $0x23,0x20(%eax)
	e->env_tf.tf_ss = GD_UD | 3;
f010a15f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a162:	66 c7 40 40 23 00    	movw   $0x23,0x40(%eax)
	e->env_tf.tf_esp = (uint32*)USTACKTOP;
f010a168:	8b 45 08             	mov    0x8(%ebp),%eax
f010a16b:	c7 40 3c 00 e0 bf ee 	movl   $0xeebfe000,0x3c(%eax)
	e->env_tf.tf_cs = GD_UT | 3;
f010a172:	8b 45 08             	mov    0x8(%ebp),%eax
f010a175:	66 c7 40 34 1b 00    	movw   $0x1b,0x34(%eax)
	e->env_tf.tf_eflags |= FL_IF;
f010a17b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a17e:	8b 40 38             	mov    0x38(%eax),%eax
f010a181:	80 cc 02             	or     $0x2,%ah
f010a184:	89 c2                	mov    %eax,%edx
f010a186:	8b 45 08             	mov    0x8(%ebp),%eax
f010a189:	89 50 38             	mov    %edx,0x38(%eax)

	// You will set e->env_tf.tf_eip later.

	// commit the allocation
	LIST_REMOVE(&env_free_list ,e);
f010a18c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a190:	75 17                	jne    f010a1a9 <complete_environment_initialization+0x1bb>
f010a192:	83 ec 04             	sub    $0x4,%esp
f010a195:	68 55 59 13 f0       	push   $0xf0135955
f010a19a:	68 58 03 00 00       	push   $0x358
f010a19f:	68 f3 58 13 f0       	push   $0xf01358f3
f010a1a4:	e8 fd 5f ff ff       	call   f01001a6 <_panic>
f010a1a9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ac:	8b 40 44             	mov    0x44(%eax),%eax
f010a1af:	85 c0                	test   %eax,%eax
f010a1b1:	74 11                	je     f010a1c4 <complete_environment_initialization+0x1d6>
f010a1b3:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1b6:	8b 40 44             	mov    0x44(%eax),%eax
f010a1b9:	8b 55 08             	mov    0x8(%ebp),%edx
f010a1bc:	8b 52 48             	mov    0x48(%edx),%edx
f010a1bf:	89 50 48             	mov    %edx,0x48(%eax)
f010a1c2:	eb 0b                	jmp    f010a1cf <complete_environment_initialization+0x1e1>
f010a1c4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1c7:	8b 40 48             	mov    0x48(%eax),%eax
f010a1ca:	a3 3c 87 65 f0       	mov    %eax,0xf065873c
f010a1cf:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1d2:	8b 40 48             	mov    0x48(%eax),%eax
f010a1d5:	85 c0                	test   %eax,%eax
f010a1d7:	74 11                	je     f010a1ea <complete_environment_initialization+0x1fc>
f010a1d9:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1dc:	8b 40 48             	mov    0x48(%eax),%eax
f010a1df:	8b 55 08             	mov    0x8(%ebp),%edx
f010a1e2:	8b 52 44             	mov    0x44(%edx),%edx
f010a1e5:	89 50 44             	mov    %edx,0x44(%eax)
f010a1e8:	eb 0b                	jmp    f010a1f5 <complete_environment_initialization+0x207>
f010a1ea:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1ed:	8b 40 44             	mov    0x44(%eax),%eax
f010a1f0:	a3 38 87 65 f0       	mov    %eax,0xf0658738
f010a1f5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a1f8:	c7 40 44 00 00 00 00 	movl   $0x0,0x44(%eax)
f010a1ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010a202:	c7 40 48 00 00 00 00 	movl   $0x0,0x48(%eax)
f010a209:	a1 44 87 65 f0       	mov    0xf0658744,%eax
f010a20e:	48                   	dec    %eax
f010a20f:	a3 44 87 65 f0       	mov    %eax,0xf0658744
	return ;
f010a214:	90                   	nop
}
f010a215:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010a218:	c9                   	leave  
f010a219:	c3                   	ret    

f010a21a <set_environment_entry_point>:

//===============================================
// 9) SET EIP REG VALUE BY ENV ENTRY POINT:
//===============================================
void set_environment_entry_point(struct Env* e, uint8* ptr_program_start)
{
f010a21a:	55                   	push   %ebp
f010a21b:	89 e5                	mov    %esp,%ebp
f010a21d:	83 ec 18             	sub    $0x18,%esp
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a220:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a223:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a226:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a229:	8b 00                	mov    (%eax),%eax
f010a22b:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a230:	74 17                	je     f010a249 <set_environment_entry_point+0x2f>
		panic("Matafa2nash 3ala Keda");
f010a232:	83 ec 04             	sub    $0x4,%esp
f010a235:	68 db 5a 13 f0       	push   $0xf0135adb
f010a23a:	68 64 03 00 00       	push   $0x364
f010a23f:	68 f3 58 13 f0       	push   $0xf01358f3
f010a244:	e8 5d 5f ff ff       	call   f01001a6 <_panic>
	e->env_tf.tf_eip = (uint32*)pELFHDR->e_entry ;
f010a249:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a24c:	8b 40 18             	mov    0x18(%eax),%eax
f010a24f:	89 c2                	mov    %eax,%edx
f010a251:	8b 45 08             	mov    0x8(%ebp),%eax
f010a254:	89 50 30             	mov    %edx,0x30(%eax)
}
f010a257:	90                   	nop
f010a258:	c9                   	leave  
f010a259:	c3                   	ret    

f010a25a <share_pws_at_user_space>:

//===============================================
// 10) SHARE WS AT USER SPACE (READ ONLY):
//===============================================
void share_pws_at_user_space(struct Env* e)
{
f010a25a:	55                   	push   %ebp
f010a25b:	89 e5                	mov    %esp,%ebp
f010a25d:	83 ec 08             	sub    $0x8,%esp
			ptr_page_table = create_page_table(e->env_page_directory, (uint32) dva);
		}
		ptr_page_table[PTX(dva)] = CONSTRUCT_ENTRY(pa, PERM_USER | PERM_PRESENT);
	}
#else
	panic("share_pws_at_user_space(): should not be called when kernel heap is disabled.");
f010a260:	83 ec 04             	sub    $0x4,%esp
f010a263:	68 f4 5a 13 f0       	push   $0xf0135af4
f010a268:	68 81 03 00 00       	push   $0x381
f010a26d:	68 f3 58 13 f0       	push   $0xf01358f3
f010a272:	e8 2f 5f ff ff       	call   f01001a6 <_panic>

f010a277 <unshare_pws_at_user_space>:

//===============================================
// 11) REMOVE THE SHARED WS FROM USER SPACE:
//===============================================
void unshare_pws_at_user_space(struct Env *e)
{
f010a277:	55                   	push   %ebp
f010a278:	89 e5                	mov    %esp,%ebp
f010a27a:	83 ec 08             	sub    $0x8,%esp
			e->env_page_directory[PDX(tsva)] = 0;
		}
		tlbflush();
	}
#else
	panic("__remove_pws_user_pages(): should not be called when kernel heap is disabled.");
f010a27d:	83 ec 04             	sub    $0x4,%esp
f010a280:	68 44 5b 13 f0       	push   $0xf0135b44
f010a285:	68 a0 03 00 00       	push   $0x3a0
f010a28a:	68 f3 58 13 f0       	push   $0xf01358f3
f010a28f:	e8 12 5f ff ff       	call   f01001a6 <_panic>

f010a294 <PROGRAM_SEGMENT_NEXT>:

//===============================================
// 12) SEG NEXT [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment* PROGRAM_SEGMENT_NEXT(struct ProgramSegment* seg, uint8* ptr_program_start)
{
f010a294:	55                   	push   %ebp
f010a295:	89 e5                	mov    %esp,%ebp
f010a297:	83 ec 18             	sub    $0x18,%esp
	int index = (*seg).segment_id++;
f010a29a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a29d:	8b 40 10             	mov    0x10(%eax),%eax
f010a2a0:	8d 48 01             	lea    0x1(%eax),%ecx
f010a2a3:	8b 55 08             	mov    0x8(%ebp),%edx
f010a2a6:	89 4a 10             	mov    %ecx,0x10(%edx)
f010a2a9:	89 45 f4             	mov    %eax,-0xc(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a2ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a2af:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a2b2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a2b5:	8b 00                	mov    (%eax),%eax
f010a2b7:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a2bc:	74 17                	je     f010a2d5 <PROGRAM_SEGMENT_NEXT+0x41>
		panic("Matafa2nash 3ala Keda");
f010a2be:	83 ec 04             	sub    $0x4,%esp
f010a2c1:	68 db 5a 13 f0       	push   $0xf0135adb
f010a2c6:	68 ae 03 00 00       	push   $0x3ae
f010a2cb:	68 f3 58 13 f0       	push   $0xf01358f3
f010a2d0:	e8 d1 5e ff ff       	call   f01001a6 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010a2d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a2d8:	8b 50 1c             	mov    0x1c(%eax),%edx
f010a2db:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a2de:	01 d0                	add    %edx,%eax
f010a2e0:	89 45 ec             	mov    %eax,-0x14(%ebp)

	while (ph[(*seg).segment_id].p_type != ELF_PROG_LOAD && ((*seg).segment_id < pELFHDR->e_phnum)) (*seg).segment_id++;
f010a2e3:	eb 0f                	jmp    f010a2f4 <PROGRAM_SEGMENT_NEXT+0x60>
f010a2e5:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2e8:	8b 40 10             	mov    0x10(%eax),%eax
f010a2eb:	8d 50 01             	lea    0x1(%eax),%edx
f010a2ee:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f1:	89 50 10             	mov    %edx,0x10(%eax)
f010a2f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010a2f7:	8b 40 10             	mov    0x10(%eax),%eax
f010a2fa:	c1 e0 05             	shl    $0x5,%eax
f010a2fd:	89 c2                	mov    %eax,%edx
f010a2ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a302:	01 d0                	add    %edx,%eax
f010a304:	8b 00                	mov    (%eax),%eax
f010a306:	83 f8 01             	cmp    $0x1,%eax
f010a309:	74 13                	je     f010a31e <PROGRAM_SEGMENT_NEXT+0x8a>
f010a30b:	8b 45 08             	mov    0x8(%ebp),%eax
f010a30e:	8b 50 10             	mov    0x10(%eax),%edx
f010a311:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a314:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a317:	0f b7 c0             	movzwl %ax,%eax
f010a31a:	39 c2                	cmp    %eax,%edx
f010a31c:	72 c7                	jb     f010a2e5 <PROGRAM_SEGMENT_NEXT+0x51>
	index = (*seg).segment_id;
f010a31e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a321:	8b 40 10             	mov    0x10(%eax),%eax
f010a324:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if(index < pELFHDR->e_phnum)
f010a327:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010a32a:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a32d:	0f b7 c0             	movzwl %ax,%eax
f010a330:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010a333:	7e 63                	jle    f010a398 <PROGRAM_SEGMENT_NEXT+0x104>
	{
		(*seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a335:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a338:	c1 e0 05             	shl    $0x5,%eax
f010a33b:	89 c2                	mov    %eax,%edx
f010a33d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a340:	01 d0                	add    %edx,%eax
f010a342:	8b 50 04             	mov    0x4(%eax),%edx
f010a345:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a348:	01 c2                	add    %eax,%edx
f010a34a:	8b 45 08             	mov    0x8(%ebp),%eax
f010a34d:	89 10                	mov    %edx,(%eax)
		(*seg).size_in_memory =  ph[index].p_memsz;
f010a34f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a352:	c1 e0 05             	shl    $0x5,%eax
f010a355:	89 c2                	mov    %eax,%edx
f010a357:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a35a:	01 d0                	add    %edx,%eax
f010a35c:	8b 50 14             	mov    0x14(%eax),%edx
f010a35f:	8b 45 08             	mov    0x8(%ebp),%eax
f010a362:	89 50 08             	mov    %edx,0x8(%eax)
		(*seg).size_in_file = ph[index].p_filesz;
f010a365:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a368:	c1 e0 05             	shl    $0x5,%eax
f010a36b:	89 c2                	mov    %eax,%edx
f010a36d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a370:	01 d0                	add    %edx,%eax
f010a372:	8b 50 10             	mov    0x10(%eax),%edx
f010a375:	8b 45 08             	mov    0x8(%ebp),%eax
f010a378:	89 50 04             	mov    %edx,0x4(%eax)
		(*seg).virtual_address = (uint8*)ph[index].p_va;
f010a37b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a37e:	c1 e0 05             	shl    $0x5,%eax
f010a381:	89 c2                	mov    %eax,%edx
f010a383:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010a386:	01 d0                	add    %edx,%eax
f010a388:	8b 40 08             	mov    0x8(%eax),%eax
f010a38b:	89 c2                	mov    %eax,%edx
f010a38d:	8b 45 08             	mov    0x8(%ebp),%eax
f010a390:	89 50 0c             	mov    %edx,0xc(%eax)
		return seg;
f010a393:	8b 45 08             	mov    0x8(%ebp),%eax
f010a396:	eb 05                	jmp    f010a39d <PROGRAM_SEGMENT_NEXT+0x109>
	}
	return 0;
f010a398:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010a39d:	c9                   	leave  
f010a39e:	c3                   	ret    

f010a39f <PROGRAM_SEGMENT_FIRST>:

//===============================================
// 13) SEG FIRST [TO BE USED IN PROG_SEG_FOREACH]:
//===============================================
struct ProgramSegment PROGRAM_SEGMENT_FIRST( uint8* ptr_program_start)
{
f010a39f:	55                   	push   %ebp
f010a3a0:	89 e5                	mov    %esp,%ebp
f010a3a2:	57                   	push   %edi
f010a3a3:	56                   	push   %esi
f010a3a4:	53                   	push   %ebx
f010a3a5:	83 ec 2c             	sub    $0x2c,%esp
	struct ProgramSegment seg;
	seg.segment_id = 0;
f010a3a8:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)

	struct Proghdr *ph, *eph;
	struct Elf * pELFHDR = (struct Elf *)ptr_program_start ;
f010a3af:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a3b2:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	if (pELFHDR->e_magic != ELF_MAGIC)
f010a3b5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a3b8:	8b 00                	mov    (%eax),%eax
f010a3ba:	3d 7f 45 4c 46       	cmp    $0x464c457f,%eax
f010a3bf:	74 17                	je     f010a3d8 <PROGRAM_SEGMENT_FIRST+0x39>
		panic("Matafa2nash 3ala Keda");
f010a3c1:	83 ec 04             	sub    $0x4,%esp
f010a3c4:	68 db 5a 13 f0       	push   $0xf0135adb
f010a3c9:	68 ca 03 00 00       	push   $0x3ca
f010a3ce:	68 f3 58 13 f0       	push   $0xf01358f3
f010a3d3:	e8 ce 5d ff ff       	call   f01001a6 <_panic>
	ph = (struct Proghdr *) ( ((uint8 *) ptr_program_start) + pELFHDR->e_phoff);
f010a3d8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a3db:	8b 50 1c             	mov    0x1c(%eax),%edx
f010a3de:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a3e1:	01 d0                	add    %edx,%eax
f010a3e3:	89 45 e0             	mov    %eax,-0x20(%ebp)
	while (ph[(seg).segment_id].p_type != ELF_PROG_LOAD && ((seg).segment_id < pELFHDR->e_phnum)) (seg).segment_id++;
f010a3e6:	eb 07                	jmp    f010a3ef <PROGRAM_SEGMENT_FIRST+0x50>
f010a3e8:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a3eb:	40                   	inc    %eax
f010a3ec:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010a3ef:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a3f2:	c1 e0 05             	shl    $0x5,%eax
f010a3f5:	89 c2                	mov    %eax,%edx
f010a3f7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a3fa:	01 d0                	add    %edx,%eax
f010a3fc:	8b 00                	mov    (%eax),%eax
f010a3fe:	83 f8 01             	cmp    $0x1,%eax
f010a401:	74 10                	je     f010a413 <PROGRAM_SEGMENT_FIRST+0x74>
f010a403:	8b 55 d8             	mov    -0x28(%ebp),%edx
f010a406:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a409:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a40c:	0f b7 c0             	movzwl %ax,%eax
f010a40f:	39 c2                	cmp    %eax,%edx
f010a411:	72 d5                	jb     f010a3e8 <PROGRAM_SEGMENT_FIRST+0x49>
	int index = (seg).segment_id;
f010a413:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010a416:	89 45 dc             	mov    %eax,-0x24(%ebp)

	if(index < pELFHDR->e_phnum)
f010a419:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010a41c:	8b 40 2c             	mov    0x2c(%eax),%eax
f010a41f:	0f b7 c0             	movzwl %ax,%eax
f010a422:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f010a425:	7e 68                	jle    f010a48f <PROGRAM_SEGMENT_FIRST+0xf0>
	{
		(seg).ptr_start = (uint8 *) ptr_program_start + ph[index].p_offset;
f010a427:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a42a:	c1 e0 05             	shl    $0x5,%eax
f010a42d:	89 c2                	mov    %eax,%edx
f010a42f:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a432:	01 d0                	add    %edx,%eax
f010a434:	8b 50 04             	mov    0x4(%eax),%edx
f010a437:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a43a:	01 d0                	add    %edx,%eax
f010a43c:	89 45 c8             	mov    %eax,-0x38(%ebp)
		(seg).size_in_memory =  ph[index].p_memsz;
f010a43f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a442:	c1 e0 05             	shl    $0x5,%eax
f010a445:	89 c2                	mov    %eax,%edx
f010a447:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a44a:	01 d0                	add    %edx,%eax
f010a44c:	8b 40 14             	mov    0x14(%eax),%eax
f010a44f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		(seg).size_in_file = ph[index].p_filesz;
f010a452:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a455:	c1 e0 05             	shl    $0x5,%eax
f010a458:	89 c2                	mov    %eax,%edx
f010a45a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a45d:	01 d0                	add    %edx,%eax
f010a45f:	8b 40 10             	mov    0x10(%eax),%eax
f010a462:	89 45 cc             	mov    %eax,-0x34(%ebp)
		(seg).virtual_address = (uint8*)ph[index].p_va;
f010a465:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010a468:	c1 e0 05             	shl    $0x5,%eax
f010a46b:	89 c2                	mov    %eax,%edx
f010a46d:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010a470:	01 d0                	add    %edx,%eax
f010a472:	8b 40 08             	mov    0x8(%eax),%eax
f010a475:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		return seg;
f010a478:	8b 45 08             	mov    0x8(%ebp),%eax
f010a47b:	89 c3                	mov    %eax,%ebx
f010a47d:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a480:	ba 05 00 00 00       	mov    $0x5,%edx
f010a485:	89 df                	mov    %ebx,%edi
f010a487:	89 c6                	mov    %eax,%esi
f010a489:	89 d1                	mov    %edx,%ecx
f010a48b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f010a48d:	eb 1c                	jmp    f010a4ab <PROGRAM_SEGMENT_FIRST+0x10c>
	}
	seg.segment_id = -1;
f010a48f:	c7 45 d8 ff ff ff ff 	movl   $0xffffffff,-0x28(%ebp)
	return seg;
f010a496:	8b 45 08             	mov    0x8(%ebp),%eax
f010a499:	89 c3                	mov    %eax,%ebx
f010a49b:	8d 45 c8             	lea    -0x38(%ebp),%eax
f010a49e:	ba 05 00 00 00       	mov    $0x5,%edx
f010a4a3:	89 df                	mov    %ebx,%edi
f010a4a5:	89 c6                	mov    %eax,%esi
f010a4a7:	89 d1                	mov    %edx,%ecx
f010a4a9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
}
f010a4ab:	8b 45 08             	mov    0x8(%ebp),%eax
f010a4ae:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010a4b1:	5b                   	pop    %ebx
f010a4b2:	5e                   	pop    %esi
f010a4b3:	5f                   	pop    %edi
f010a4b4:	5d                   	pop    %ebp
f010a4b5:	c2 04 00             	ret    $0x4

f010a4b8 <cleanup_buffers>:

//===============================================
// 14) CLEANUP MODIFIED BUFFER [TO BE USED AS LAST STEP WHEN ADD ENV TO EXIT Q]:
//===============================================
void cleanup_buffers(struct Env* e)
{
f010a4b8:	55                   	push   %ebp
f010a4b9:	89 e5                	mov    %esp,%ebp
f010a4bb:	83 ec 18             	sub    $0x18,%esp
	//NEW !! 2016, remove remaining pages in the modified list
	struct FrameInfo *ptr_fi=NULL ;
f010a4be:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010a4c5:	a1 e0 8f 65 f0       	mov    0xf0658fe0,%eax
f010a4ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a4cd:	e9 c3 00 00 00       	jmp    f010a595 <cleanup_buffers+0xdd>
	{
		if(ptr_fi->environment == e)
f010a4d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4d5:	8b 40 10             	mov    0x10(%eax),%eax
f010a4d8:	3b 45 08             	cmp    0x8(%ebp),%eax
f010a4db:	0f 85 ac 00 00 00    	jne    f010a58d <cleanup_buffers+0xd5>
		{
			pt_clear_page_table_entry(ptr_fi->environment->env_page_directory,ptr_fi->va);
f010a4e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4e4:	8b 50 0c             	mov    0xc(%eax),%edx
f010a4e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a4ea:	8b 40 10             	mov    0x10(%eax),%eax
f010a4ed:	8b 40 5c             	mov    0x5c(%eax),%eax
f010a4f0:	83 ec 08             	sub    $0x8,%esp
f010a4f3:	52                   	push   %edx
f010a4f4:	50                   	push   %eax
f010a4f5:	e8 cd d0 ff ff       	call   f01075c7 <pt_clear_page_table_entry>
f010a4fa:	83 c4 10             	add    $0x10,%esp

			//cprintf("==================\n");
			//cprintf("[%s] ptr_fi = %x, ptr_fi next = %x \n",curenv->prog_name, ptr_fi, LIST_NEXT(ptr_fi));
			LIST_REMOVE(&modified_frame_list, ptr_fi);
f010a4fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a501:	75 17                	jne    f010a51a <cleanup_buffers+0x62>
f010a503:	83 ec 04             	sub    $0x4,%esp
f010a506:	68 55 59 13 f0       	push   $0xf0135955
f010a50b:	68 f1 03 00 00       	push   $0x3f1
f010a510:	68 f3 58 13 f0       	push   $0xf01358f3
f010a515:	e8 8c 5c ff ff       	call   f01001a6 <_panic>
f010a51a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a51d:	8b 00                	mov    (%eax),%eax
f010a51f:	85 c0                	test   %eax,%eax
f010a521:	74 10                	je     f010a533 <cleanup_buffers+0x7b>
f010a523:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a526:	8b 00                	mov    (%eax),%eax
f010a528:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a52b:	8b 52 04             	mov    0x4(%edx),%edx
f010a52e:	89 50 04             	mov    %edx,0x4(%eax)
f010a531:	eb 0b                	jmp    f010a53e <cleanup_buffers+0x86>
f010a533:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a536:	8b 40 04             	mov    0x4(%eax),%eax
f010a539:	a3 e4 8f 65 f0       	mov    %eax,0xf0658fe4
f010a53e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a541:	8b 40 04             	mov    0x4(%eax),%eax
f010a544:	85 c0                	test   %eax,%eax
f010a546:	74 0f                	je     f010a557 <cleanup_buffers+0x9f>
f010a548:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a54b:	8b 40 04             	mov    0x4(%eax),%eax
f010a54e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a551:	8b 12                	mov    (%edx),%edx
f010a553:	89 10                	mov    %edx,(%eax)
f010a555:	eb 0a                	jmp    f010a561 <cleanup_buffers+0xa9>
f010a557:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a55a:	8b 00                	mov    (%eax),%eax
f010a55c:	a3 e0 8f 65 f0       	mov    %eax,0xf0658fe0
f010a561:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a564:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010a56a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a56d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f010a574:	a1 ec 8f 65 f0       	mov    0xf0658fec,%eax
f010a579:	48                   	dec    %eax
f010a57a:	a3 ec 8f 65 f0       	mov    %eax,0xf0658fec

			free_frame(ptr_fi);
f010a57f:	83 ec 0c             	sub    $0xc,%esp
f010a582:	ff 75 f4             	pushl  -0xc(%ebp)
f010a585:	e8 3d c3 ff ff       	call   f01068c7 <free_frame>
f010a58a:	83 c4 10             	add    $0x10,%esp

	//	cprintf("[%s] deleting modified at end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc = calculate_available_frames();
	//	cprintf("[%s] bef, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc.modified, ffc.freeBuffered, ffc.freeNotBuffered);

	LIST_FOREACH(ptr_fi, &modified_frame_list)
f010a58d:	a1 e8 8f 65 f0       	mov    0xf0658fe8,%eax
f010a592:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010a595:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a599:	74 07                	je     f010a5a2 <cleanup_buffers+0xea>
f010a59b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010a59e:	8b 00                	mov    (%eax),%eax
f010a5a0:	eb 05                	jmp    f010a5a7 <cleanup_buffers+0xef>
f010a5a2:	b8 00 00 00 00       	mov    $0x0,%eax
f010a5a7:	a3 e8 8f 65 f0       	mov    %eax,0xf0658fe8
f010a5ac:	a1 e8 8f 65 f0       	mov    0xf0658fe8,%eax
f010a5b1:	85 c0                	test   %eax,%eax
f010a5b3:	0f 85 19 ff ff ff    	jne    f010a4d2 <cleanup_buffers+0x1a>
f010a5b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010a5bd:	0f 85 0f ff ff ff    	jne    f010a4d2 <cleanup_buffers+0x1a>
	}

	//	cprintf("[%s] finished deleting modified frames at the end of env\n", curenv->prog_name);
	//	struct freeFramesCounters ffc2 = calculate_available_frames();
	//	cprintf("[%s] aft, mod = %d, fb = %d, fnb = %d\n",curenv->prog_name, ffc2.modified, ffc2.freeBuffered, ffc2.freeNotBuffered);
}
f010a5c3:	90                   	nop
f010a5c4:	c9                   	leave  
f010a5c5:	c3                   	ret    

f010a5c6 <set_program_priority>:
#include "../disk/pagefile_manager.h"
#include "../mem/kheap.h"
#include "../mem/memory_manager.h"

void set_program_priority(struct Env* env, int priority)
{
f010a5c6:	55                   	push   %ebp
f010a5c7:	89 e5                	mov    %esp,%ebp
f010a5c9:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3 - BONUS] [PROGRAM PRIORITY] set_program_priority
	//[ALREADY IMPLEMENTED]

	if(priority < 1 || priority > 5)
f010a5cc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010a5d0:	7e 06                	jle    f010a5d8 <set_program_priority+0x12>
f010a5d2:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010a5d6:	7e 14                	jle    f010a5ec <set_program_priority+0x26>
	{
		panic("Please enter valid priority (1->5)\n");
f010a5d8:	83 ec 04             	sub    $0x4,%esp
f010a5db:	68 94 5b 13 f0       	push   $0xf0135b94
f010a5e0:	6a 10                	push   $0x10
f010a5e2:	68 b8 5b 13 f0       	push   $0xf0135bb8
f010a5e7:	e8 ba 5b ff ff       	call   f01001a6 <_panic>
		return;
	}
	if(env == NULL)
f010a5ec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010a5f0:	74 75                	je     f010a667 <set_program_priority+0xa1>
		return;
	switch(priority)
f010a5f2:	83 7d 0c 05          	cmpl   $0x5,0xc(%ebp)
f010a5f6:	77 56                	ja     f010a64e <set_program_priority+0x88>
f010a5f8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010a5fb:	c1 e0 02             	shl    $0x2,%eax
f010a5fe:	05 f4 5b 13 f0       	add    $0xf0135bf4,%eax
f010a603:	8b 00                	mov    (%eax),%eax
f010a605:	ff e0                	jmp    *%eax
	{
		case PRIORITY_LOW:
			half_WS_Size(env, 1);
f010a607:	83 ec 08             	sub    $0x8,%esp
f010a60a:	6a 01                	push   $0x1
f010a60c:	ff 75 08             	pushl  0x8(%ebp)
f010a60f:	e8 40 da ff ff       	call   f0108054 <half_WS_Size>
f010a614:	83 c4 10             	add    $0x10,%esp
			break;
f010a617:	eb 35                	jmp    f010a64e <set_program_priority+0x88>
		case PRIORITY_BELOWNORMAL:
			half_WS_Size(env, 0);
f010a619:	83 ec 08             	sub    $0x8,%esp
f010a61c:	6a 00                	push   $0x0
f010a61e:	ff 75 08             	pushl  0x8(%ebp)
f010a621:	e8 2e da ff ff       	call   f0108054 <half_WS_Size>
f010a626:	83 c4 10             	add    $0x10,%esp
			break;
f010a629:	eb 23                	jmp    f010a64e <set_program_priority+0x88>
		case PRIORITY_NORMAL:
			// Do Nothing
			break;
		case PRIORITY_ABOVENORMAL:
			double_WS_Size(env, 1);
f010a62b:	83 ec 08             	sub    $0x8,%esp
f010a62e:	6a 01                	push   $0x1
f010a630:	ff 75 08             	pushl  0x8(%ebp)
f010a633:	e8 ff d9 ff ff       	call   f0108037 <double_WS_Size>
f010a638:	83 c4 10             	add    $0x10,%esp
			break;
f010a63b:	eb 11                	jmp    f010a64e <set_program_priority+0x88>
		case PRIORITY_HIGH:
			double_WS_Size(env, 0);
f010a63d:	83 ec 08             	sub    $0x8,%esp
f010a640:	6a 00                	push   $0x0
f010a642:	ff 75 08             	pushl  0x8(%ebp)
f010a645:	e8 ed d9 ff ff       	call   f0108037 <double_WS_Size>
f010a64a:	83 c4 10             	add    $0x10,%esp
			break;
f010a64d:	90                   	nop
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
f010a64e:	8b 45 08             	mov    0x8(%ebp),%eax
f010a651:	8b 40 74             	mov    0x74(%eax),%eax
f010a654:	83 ec 08             	sub    $0x8,%esp
f010a657:	50                   	push   %eax
f010a658:	68 d5 5b 13 f0       	push   $0xf0135bd5
f010a65d:	e8 cb 65 ff ff       	call   f0100c2d <cprintf>
f010a662:	83 c4 10             	add    $0x10,%esp
f010a665:	eb 01                	jmp    f010a668 <set_program_priority+0xa2>
	{
		panic("Please enter valid priority (1->5)\n");
		return;
	}
	if(env == NULL)
		return;
f010a667:	90                   	nop
			double_WS_Size(env, 0);
			break;
	}

	cprintf("The new size of the ws is %d\n", env->page_WS_max_size);
}
f010a668:	c9                   	leave  
f010a669:	c3                   	ret    

f010a66a <get_user_program_info>:

// Number of user programs in the program table
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
f010a66a:	55                   	push   %ebp
f010a66b:	89 e5                	mov    %esp,%ebp
f010a66d:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a670:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a677:	eb 29                	jmp    f010a6a2 <get_user_program_info+0x38>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
f010a679:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a67c:	89 d0                	mov    %edx,%eax
f010a67e:	01 c0                	add    %eax,%eax
f010a680:	01 d0                	add    %edx,%eax
f010a682:	c1 e0 02             	shl    $0x2,%eax
f010a685:	05 00 09 19 f0       	add    $0xf0190900,%eax
f010a68a:	8b 00                	mov    (%eax),%eax
f010a68c:	83 ec 08             	sub    $0x8,%esp
f010a68f:	50                   	push   %eax
f010a690:	ff 75 08             	pushl  0x8(%ebp)
f010a693:	e8 b1 5e 02 00       	call   f0130549 <strcmp>
f010a698:	83 c4 10             	add    $0x10,%esp
f010a69b:	85 c0                	test   %eax,%eax
f010a69d:	74 0f                	je     f010a6ae <get_user_program_info+0x44>
int NUM_USER_PROGS = (sizeof(userPrograms)/sizeof(userPrograms[0]));

struct UserProgramInfo* get_user_program_info(char* user_program_name)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a69f:	ff 45 f4             	incl   -0xc(%ebp)
f010a6a2:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f010a6a7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a6aa:	7c cd                	jl     f010a679 <get_user_program_info+0xf>
f010a6ac:	eb 01                	jmp    f010a6af <get_user_program_info+0x45>
		if (strcmp(user_program_name, userPrograms[i].name) == 0)
			break;
f010a6ae:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010a6af:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f010a6b4:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a6b7:	75 1a                	jne    f010a6d3 <get_user_program_info+0x69>
	{
		cprintf("Unknown user program '%s'\n", user_program_name);
f010a6b9:	83 ec 08             	sub    $0x8,%esp
f010a6bc:	ff 75 08             	pushl  0x8(%ebp)
f010a6bf:	68 21 66 13 f0       	push   $0xf0136621
f010a6c4:	e8 64 65 ff ff       	call   f0100c2d <cprintf>
f010a6c9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a6cc:	b8 00 00 00 00       	mov    $0x0,%eax
f010a6d1:	eb 11                	jmp    f010a6e4 <get_user_program_info+0x7a>
	}

	return &userPrograms[i];
f010a6d3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a6d6:	89 d0                	mov    %edx,%eax
f010a6d8:	01 c0                	add    %eax,%eax
f010a6da:	01 d0                	add    %edx,%eax
f010a6dc:	c1 e0 02             	shl    $0x2,%eax
f010a6df:	05 00 09 19 f0       	add    $0xf0190900,%eax
}
f010a6e4:	c9                   	leave  
f010a6e5:	c3                   	ret    

f010a6e6 <get_user_program_info_by_env>:

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
f010a6e6:	55                   	push   %ebp
f010a6e7:	89 e5                	mov    %esp,%ebp
f010a6e9:	83 ec 18             	sub    $0x18,%esp
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a6ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010a6f3:	eb 30                	jmp    f010a725 <get_user_program_info_by_env+0x3f>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
f010a6f5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a6f8:	89 d0                	mov    %edx,%eax
f010a6fa:	01 c0                	add    %eax,%eax
f010a6fc:	01 d0                	add    %edx,%eax
f010a6fe:	c1 e0 02             	shl    $0x2,%eax
f010a701:	05 00 09 19 f0       	add    $0xf0190900,%eax
f010a706:	8b 00                	mov    (%eax),%eax
f010a708:	8b 55 08             	mov    0x8(%ebp),%edx
f010a70b:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010a711:	83 ec 08             	sub    $0x8,%esp
f010a714:	50                   	push   %eax
f010a715:	52                   	push   %edx
f010a716:	e8 2e 5e 02 00       	call   f0130549 <strcmp>
f010a71b:	83 c4 10             	add    $0x10,%esp
f010a71e:	85 c0                	test   %eax,%eax
f010a720:	74 0f                	je     f010a731 <get_user_program_info_by_env+0x4b>
}

struct UserProgramInfo* get_user_program_info_by_env(struct Env* e)
{
	int i;
	for (i = 0; i < NUM_USER_PROGS; i++) {
f010a722:	ff 45 f4             	incl   -0xc(%ebp)
f010a725:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f010a72a:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a72d:	7c c6                	jl     f010a6f5 <get_user_program_info_by_env+0xf>
f010a72f:	eb 01                	jmp    f010a732 <get_user_program_info_by_env+0x4c>
		if ( strcmp( e->prog_name , userPrograms[i].name) ==0)
			break;
f010a731:	90                   	nop
	}
	if(i==NUM_USER_PROGS)
f010a732:	a1 c4 0c 19 f0       	mov    0xf0190cc4,%eax
f010a737:	39 45 f4             	cmp    %eax,-0xc(%ebp)
f010a73a:	75 17                	jne    f010a753 <get_user_program_info_by_env+0x6d>
	{
		cprintf("Unknown user program \n");
f010a73c:	83 ec 0c             	sub    $0xc,%esp
f010a73f:	68 3c 66 13 f0       	push   $0xf013663c
f010a744:	e8 e4 64 ff ff       	call   f0100c2d <cprintf>
f010a749:	83 c4 10             	add    $0x10,%esp
		return 0;
f010a74c:	b8 00 00 00 00       	mov    $0x0,%eax
f010a751:	eb 11                	jmp    f010a764 <get_user_program_info_by_env+0x7e>
	}

	return &userPrograms[i];
f010a753:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010a756:	89 d0                	mov    %edx,%eax
f010a758:	01 c0                	add    %eax,%eax
f010a75a:	01 d0                	add    %edx,%eax
f010a75c:	c1 e0 02             	shl    $0x2,%eax
f010a75f:	05 00 09 19 f0       	add    $0xf0190900,%eax
}
f010a764:	c9                   	leave  
f010a765:	c3                   	ret    

f010a766 <trapname>:
extern  void (*ALL_FAULTS47)();



static const char *trapname(int trapno)
{
f010a766:	55                   	push   %ebp
f010a767:	89 e5                	mov    %esp,%ebp
			"Alignment Check",
			"Machine-Check",
			"SIMD Floating-Point Exception"
	};

	if (trapno < sizeof(excnames)/sizeof(excnames[0]))
f010a769:	8b 45 08             	mov    0x8(%ebp),%eax
f010a76c:	83 f8 13             	cmp    $0x13,%eax
f010a76f:	77 0c                	ja     f010a77d <trapname+0x17>
		return excnames[trapno];
f010a771:	8b 45 08             	mov    0x8(%ebp),%eax
f010a774:	8b 04 85 c0 69 13 f0 	mov    -0xfec9640(,%eax,4),%eax
f010a77b:	eb 12                	jmp    f010a78f <trapname+0x29>
	if (trapno == T_SYSCALL)
f010a77d:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010a781:	75 07                	jne    f010a78a <trapname+0x24>
		return "System call";
f010a783:	b8 60 66 13 f0       	mov    $0xf0136660,%eax
f010a788:	eb 05                	jmp    f010a78f <trapname+0x29>
	return "(unknown trap)";
f010a78a:	b8 6c 66 13 f0       	mov    $0xf013666c,%eax
}
f010a78f:	5d                   	pop    %ebp
f010a790:	c3                   	ret    

f010a791 <idt_init>:


void
idt_init(void)
{
f010a791:	55                   	push   %ebp
f010a792:	89 e5                	mov    %esp,%ebp
f010a794:	83 ec 10             	sub    $0x10,%esp
	extern struct Segdesc gdt[];

	// LAB 3: Your code here.
	//initialize idt
	SETGATE(idt[T_PGFLT], 0, GD_KT , &PAGE_FAULT, 0) ;
f010a797:	b8 94 bd 10 f0       	mov    $0xf010bd94,%eax
f010a79c:	66 a3 d0 87 65 f0    	mov    %ax,0xf06587d0
f010a7a2:	66 c7 05 d2 87 65 f0 	movw   $0x8,0xf06587d2
f010a7a9:	08 00 
f010a7ab:	a0 d4 87 65 f0       	mov    0xf06587d4,%al
f010a7b0:	83 e0 e0             	and    $0xffffffe0,%eax
f010a7b3:	a2 d4 87 65 f0       	mov    %al,0xf06587d4
f010a7b8:	a0 d4 87 65 f0       	mov    0xf06587d4,%al
f010a7bd:	83 e0 1f             	and    $0x1f,%eax
f010a7c0:	a2 d4 87 65 f0       	mov    %al,0xf06587d4
f010a7c5:	a0 d5 87 65 f0       	mov    0xf06587d5,%al
f010a7ca:	83 e0 f0             	and    $0xfffffff0,%eax
f010a7cd:	83 c8 0e             	or     $0xe,%eax
f010a7d0:	a2 d5 87 65 f0       	mov    %al,0xf06587d5
f010a7d5:	a0 d5 87 65 f0       	mov    0xf06587d5,%al
f010a7da:	83 e0 ef             	and    $0xffffffef,%eax
f010a7dd:	a2 d5 87 65 f0       	mov    %al,0xf06587d5
f010a7e2:	a0 d5 87 65 f0       	mov    0xf06587d5,%al
f010a7e7:	83 e0 9f             	and    $0xffffff9f,%eax
f010a7ea:	a2 d5 87 65 f0       	mov    %al,0xf06587d5
f010a7ef:	a0 d5 87 65 f0       	mov    0xf06587d5,%al
f010a7f4:	83 c8 80             	or     $0xffffff80,%eax
f010a7f7:	a2 d5 87 65 f0       	mov    %al,0xf06587d5
f010a7fc:	b8 94 bd 10 f0       	mov    $0xf010bd94,%eax
f010a801:	c1 e8 10             	shr    $0x10,%eax
f010a804:	66 a3 d6 87 65 f0    	mov    %ax,0xf06587d6
	SETGATE(idt[T_SYSCALL], 0, GD_KT , &SYSCALL_HANDLER, 3) ;
f010a80a:	b8 9c bd 10 f0       	mov    $0xf010bd9c,%eax
f010a80f:	66 a3 e0 88 65 f0    	mov    %ax,0xf06588e0
f010a815:	66 c7 05 e2 88 65 f0 	movw   $0x8,0xf06588e2
f010a81c:	08 00 
f010a81e:	a0 e4 88 65 f0       	mov    0xf06588e4,%al
f010a823:	83 e0 e0             	and    $0xffffffe0,%eax
f010a826:	a2 e4 88 65 f0       	mov    %al,0xf06588e4
f010a82b:	a0 e4 88 65 f0       	mov    0xf06588e4,%al
f010a830:	83 e0 1f             	and    $0x1f,%eax
f010a833:	a2 e4 88 65 f0       	mov    %al,0xf06588e4
f010a838:	a0 e5 88 65 f0       	mov    0xf06588e5,%al
f010a83d:	83 e0 f0             	and    $0xfffffff0,%eax
f010a840:	83 c8 0e             	or     $0xe,%eax
f010a843:	a2 e5 88 65 f0       	mov    %al,0xf06588e5
f010a848:	a0 e5 88 65 f0       	mov    0xf06588e5,%al
f010a84d:	83 e0 ef             	and    $0xffffffef,%eax
f010a850:	a2 e5 88 65 f0       	mov    %al,0xf06588e5
f010a855:	a0 e5 88 65 f0       	mov    0xf06588e5,%al
f010a85a:	83 c8 60             	or     $0x60,%eax
f010a85d:	a2 e5 88 65 f0       	mov    %al,0xf06588e5
f010a862:	a0 e5 88 65 f0       	mov    0xf06588e5,%al
f010a867:	83 c8 80             	or     $0xffffff80,%eax
f010a86a:	a2 e5 88 65 f0       	mov    %al,0xf06588e5
f010a86f:	b8 9c bd 10 f0       	mov    $0xf010bd9c,%eax
f010a874:	c1 e8 10             	shr    $0x10,%eax
f010a877:	66 a3 e6 88 65 f0    	mov    %ax,0xf06588e6
	SETGATE(idt[T_DBLFLT], 0, GD_KT , &DBL_FAULT, 0) ;
f010a87d:	b8 a6 bd 10 f0       	mov    $0xf010bda6,%eax
f010a882:	66 a3 a0 87 65 f0    	mov    %ax,0xf06587a0
f010a888:	66 c7 05 a2 87 65 f0 	movw   $0x8,0xf06587a2
f010a88f:	08 00 
f010a891:	a0 a4 87 65 f0       	mov    0xf06587a4,%al
f010a896:	83 e0 e0             	and    $0xffffffe0,%eax
f010a899:	a2 a4 87 65 f0       	mov    %al,0xf06587a4
f010a89e:	a0 a4 87 65 f0       	mov    0xf06587a4,%al
f010a8a3:	83 e0 1f             	and    $0x1f,%eax
f010a8a6:	a2 a4 87 65 f0       	mov    %al,0xf06587a4
f010a8ab:	a0 a5 87 65 f0       	mov    0xf06587a5,%al
f010a8b0:	83 e0 f0             	and    $0xfffffff0,%eax
f010a8b3:	83 c8 0e             	or     $0xe,%eax
f010a8b6:	a2 a5 87 65 f0       	mov    %al,0xf06587a5
f010a8bb:	a0 a5 87 65 f0       	mov    0xf06587a5,%al
f010a8c0:	83 e0 ef             	and    $0xffffffef,%eax
f010a8c3:	a2 a5 87 65 f0       	mov    %al,0xf06587a5
f010a8c8:	a0 a5 87 65 f0       	mov    0xf06587a5,%al
f010a8cd:	83 e0 9f             	and    $0xffffff9f,%eax
f010a8d0:	a2 a5 87 65 f0       	mov    %al,0xf06587a5
f010a8d5:	a0 a5 87 65 f0       	mov    0xf06587a5,%al
f010a8da:	83 c8 80             	or     $0xffffff80,%eax
f010a8dd:	a2 a5 87 65 f0       	mov    %al,0xf06587a5
f010a8e2:	b8 a6 bd 10 f0       	mov    $0xf010bda6,%eax
f010a8e7:	c1 e8 10             	shr    $0x10,%eax
f010a8ea:	66 a3 a6 87 65 f0    	mov    %ax,0xf06587a6


	SETGATE(idt[T_DIVIDE   ], 0, GD_KT , &ALL_FAULTS0, 3) ;
f010a8f0:	b8 ae bd 10 f0       	mov    $0xf010bdae,%eax
f010a8f5:	66 a3 60 87 65 f0    	mov    %ax,0xf0658760
f010a8fb:	66 c7 05 62 87 65 f0 	movw   $0x8,0xf0658762
f010a902:	08 00 
f010a904:	a0 64 87 65 f0       	mov    0xf0658764,%al
f010a909:	83 e0 e0             	and    $0xffffffe0,%eax
f010a90c:	a2 64 87 65 f0       	mov    %al,0xf0658764
f010a911:	a0 64 87 65 f0       	mov    0xf0658764,%al
f010a916:	83 e0 1f             	and    $0x1f,%eax
f010a919:	a2 64 87 65 f0       	mov    %al,0xf0658764
f010a91e:	a0 65 87 65 f0       	mov    0xf0658765,%al
f010a923:	83 e0 f0             	and    $0xfffffff0,%eax
f010a926:	83 c8 0e             	or     $0xe,%eax
f010a929:	a2 65 87 65 f0       	mov    %al,0xf0658765
f010a92e:	a0 65 87 65 f0       	mov    0xf0658765,%al
f010a933:	83 e0 ef             	and    $0xffffffef,%eax
f010a936:	a2 65 87 65 f0       	mov    %al,0xf0658765
f010a93b:	a0 65 87 65 f0       	mov    0xf0658765,%al
f010a940:	83 c8 60             	or     $0x60,%eax
f010a943:	a2 65 87 65 f0       	mov    %al,0xf0658765
f010a948:	a0 65 87 65 f0       	mov    0xf0658765,%al
f010a94d:	83 c8 80             	or     $0xffffff80,%eax
f010a950:	a2 65 87 65 f0       	mov    %al,0xf0658765
f010a955:	b8 ae bd 10 f0       	mov    $0xf010bdae,%eax
f010a95a:	c1 e8 10             	shr    $0x10,%eax
f010a95d:	66 a3 66 87 65 f0    	mov    %ax,0xf0658766
	SETGATE(idt[T_DEBUG    ], 1, GD_KT , &ALL_FAULTS1, 3) ;
f010a963:	b8 b8 bd 10 f0       	mov    $0xf010bdb8,%eax
f010a968:	66 a3 68 87 65 f0    	mov    %ax,0xf0658768
f010a96e:	66 c7 05 6a 87 65 f0 	movw   $0x8,0xf065876a
f010a975:	08 00 
f010a977:	a0 6c 87 65 f0       	mov    0xf065876c,%al
f010a97c:	83 e0 e0             	and    $0xffffffe0,%eax
f010a97f:	a2 6c 87 65 f0       	mov    %al,0xf065876c
f010a984:	a0 6c 87 65 f0       	mov    0xf065876c,%al
f010a989:	83 e0 1f             	and    $0x1f,%eax
f010a98c:	a2 6c 87 65 f0       	mov    %al,0xf065876c
f010a991:	a0 6d 87 65 f0       	mov    0xf065876d,%al
f010a996:	83 c8 0f             	or     $0xf,%eax
f010a999:	a2 6d 87 65 f0       	mov    %al,0xf065876d
f010a99e:	a0 6d 87 65 f0       	mov    0xf065876d,%al
f010a9a3:	83 e0 ef             	and    $0xffffffef,%eax
f010a9a6:	a2 6d 87 65 f0       	mov    %al,0xf065876d
f010a9ab:	a0 6d 87 65 f0       	mov    0xf065876d,%al
f010a9b0:	83 c8 60             	or     $0x60,%eax
f010a9b3:	a2 6d 87 65 f0       	mov    %al,0xf065876d
f010a9b8:	a0 6d 87 65 f0       	mov    0xf065876d,%al
f010a9bd:	83 c8 80             	or     $0xffffff80,%eax
f010a9c0:	a2 6d 87 65 f0       	mov    %al,0xf065876d
f010a9c5:	b8 b8 bd 10 f0       	mov    $0xf010bdb8,%eax
f010a9ca:	c1 e8 10             	shr    $0x10,%eax
f010a9cd:	66 a3 6e 87 65 f0    	mov    %ax,0xf065876e
	SETGATE(idt[T_NMI      ], 0, GD_KT , &ALL_FAULTS2, 3) ;
f010a9d3:	b8 c2 bd 10 f0       	mov    $0xf010bdc2,%eax
f010a9d8:	66 a3 70 87 65 f0    	mov    %ax,0xf0658770
f010a9de:	66 c7 05 72 87 65 f0 	movw   $0x8,0xf0658772
f010a9e5:	08 00 
f010a9e7:	a0 74 87 65 f0       	mov    0xf0658774,%al
f010a9ec:	83 e0 e0             	and    $0xffffffe0,%eax
f010a9ef:	a2 74 87 65 f0       	mov    %al,0xf0658774
f010a9f4:	a0 74 87 65 f0       	mov    0xf0658774,%al
f010a9f9:	83 e0 1f             	and    $0x1f,%eax
f010a9fc:	a2 74 87 65 f0       	mov    %al,0xf0658774
f010aa01:	a0 75 87 65 f0       	mov    0xf0658775,%al
f010aa06:	83 e0 f0             	and    $0xfffffff0,%eax
f010aa09:	83 c8 0e             	or     $0xe,%eax
f010aa0c:	a2 75 87 65 f0       	mov    %al,0xf0658775
f010aa11:	a0 75 87 65 f0       	mov    0xf0658775,%al
f010aa16:	83 e0 ef             	and    $0xffffffef,%eax
f010aa19:	a2 75 87 65 f0       	mov    %al,0xf0658775
f010aa1e:	a0 75 87 65 f0       	mov    0xf0658775,%al
f010aa23:	83 c8 60             	or     $0x60,%eax
f010aa26:	a2 75 87 65 f0       	mov    %al,0xf0658775
f010aa2b:	a0 75 87 65 f0       	mov    0xf0658775,%al
f010aa30:	83 c8 80             	or     $0xffffff80,%eax
f010aa33:	a2 75 87 65 f0       	mov    %al,0xf0658775
f010aa38:	b8 c2 bd 10 f0       	mov    $0xf010bdc2,%eax
f010aa3d:	c1 e8 10             	shr    $0x10,%eax
f010aa40:	66 a3 76 87 65 f0    	mov    %ax,0xf0658776
	SETGATE(idt[T_BRKPT    ], 1, GD_KT , &ALL_FAULTS3, 3) ;
f010aa46:	b8 cc bd 10 f0       	mov    $0xf010bdcc,%eax
f010aa4b:	66 a3 78 87 65 f0    	mov    %ax,0xf0658778
f010aa51:	66 c7 05 7a 87 65 f0 	movw   $0x8,0xf065877a
f010aa58:	08 00 
f010aa5a:	a0 7c 87 65 f0       	mov    0xf065877c,%al
f010aa5f:	83 e0 e0             	and    $0xffffffe0,%eax
f010aa62:	a2 7c 87 65 f0       	mov    %al,0xf065877c
f010aa67:	a0 7c 87 65 f0       	mov    0xf065877c,%al
f010aa6c:	83 e0 1f             	and    $0x1f,%eax
f010aa6f:	a2 7c 87 65 f0       	mov    %al,0xf065877c
f010aa74:	a0 7d 87 65 f0       	mov    0xf065877d,%al
f010aa79:	83 c8 0f             	or     $0xf,%eax
f010aa7c:	a2 7d 87 65 f0       	mov    %al,0xf065877d
f010aa81:	a0 7d 87 65 f0       	mov    0xf065877d,%al
f010aa86:	83 e0 ef             	and    $0xffffffef,%eax
f010aa89:	a2 7d 87 65 f0       	mov    %al,0xf065877d
f010aa8e:	a0 7d 87 65 f0       	mov    0xf065877d,%al
f010aa93:	83 c8 60             	or     $0x60,%eax
f010aa96:	a2 7d 87 65 f0       	mov    %al,0xf065877d
f010aa9b:	a0 7d 87 65 f0       	mov    0xf065877d,%al
f010aaa0:	83 c8 80             	or     $0xffffff80,%eax
f010aaa3:	a2 7d 87 65 f0       	mov    %al,0xf065877d
f010aaa8:	b8 cc bd 10 f0       	mov    $0xf010bdcc,%eax
f010aaad:	c1 e8 10             	shr    $0x10,%eax
f010aab0:	66 a3 7e 87 65 f0    	mov    %ax,0xf065877e
	SETGATE(idt[T_OFLOW    ], 1, GD_KT , &ALL_FAULTS4, 3) ;
f010aab6:	b8 d6 bd 10 f0       	mov    $0xf010bdd6,%eax
f010aabb:	66 a3 80 87 65 f0    	mov    %ax,0xf0658780
f010aac1:	66 c7 05 82 87 65 f0 	movw   $0x8,0xf0658782
f010aac8:	08 00 
f010aaca:	a0 84 87 65 f0       	mov    0xf0658784,%al
f010aacf:	83 e0 e0             	and    $0xffffffe0,%eax
f010aad2:	a2 84 87 65 f0       	mov    %al,0xf0658784
f010aad7:	a0 84 87 65 f0       	mov    0xf0658784,%al
f010aadc:	83 e0 1f             	and    $0x1f,%eax
f010aadf:	a2 84 87 65 f0       	mov    %al,0xf0658784
f010aae4:	a0 85 87 65 f0       	mov    0xf0658785,%al
f010aae9:	83 c8 0f             	or     $0xf,%eax
f010aaec:	a2 85 87 65 f0       	mov    %al,0xf0658785
f010aaf1:	a0 85 87 65 f0       	mov    0xf0658785,%al
f010aaf6:	83 e0 ef             	and    $0xffffffef,%eax
f010aaf9:	a2 85 87 65 f0       	mov    %al,0xf0658785
f010aafe:	a0 85 87 65 f0       	mov    0xf0658785,%al
f010ab03:	83 c8 60             	or     $0x60,%eax
f010ab06:	a2 85 87 65 f0       	mov    %al,0xf0658785
f010ab0b:	a0 85 87 65 f0       	mov    0xf0658785,%al
f010ab10:	83 c8 80             	or     $0xffffff80,%eax
f010ab13:	a2 85 87 65 f0       	mov    %al,0xf0658785
f010ab18:	b8 d6 bd 10 f0       	mov    $0xf010bdd6,%eax
f010ab1d:	c1 e8 10             	shr    $0x10,%eax
f010ab20:	66 a3 86 87 65 f0    	mov    %ax,0xf0658786
	SETGATE(idt[T_BOUND    ], 0, GD_KT , &ALL_FAULTS5, 3) ;
f010ab26:	b8 e0 bd 10 f0       	mov    $0xf010bde0,%eax
f010ab2b:	66 a3 88 87 65 f0    	mov    %ax,0xf0658788
f010ab31:	66 c7 05 8a 87 65 f0 	movw   $0x8,0xf065878a
f010ab38:	08 00 
f010ab3a:	a0 8c 87 65 f0       	mov    0xf065878c,%al
f010ab3f:	83 e0 e0             	and    $0xffffffe0,%eax
f010ab42:	a2 8c 87 65 f0       	mov    %al,0xf065878c
f010ab47:	a0 8c 87 65 f0       	mov    0xf065878c,%al
f010ab4c:	83 e0 1f             	and    $0x1f,%eax
f010ab4f:	a2 8c 87 65 f0       	mov    %al,0xf065878c
f010ab54:	a0 8d 87 65 f0       	mov    0xf065878d,%al
f010ab59:	83 e0 f0             	and    $0xfffffff0,%eax
f010ab5c:	83 c8 0e             	or     $0xe,%eax
f010ab5f:	a2 8d 87 65 f0       	mov    %al,0xf065878d
f010ab64:	a0 8d 87 65 f0       	mov    0xf065878d,%al
f010ab69:	83 e0 ef             	and    $0xffffffef,%eax
f010ab6c:	a2 8d 87 65 f0       	mov    %al,0xf065878d
f010ab71:	a0 8d 87 65 f0       	mov    0xf065878d,%al
f010ab76:	83 c8 60             	or     $0x60,%eax
f010ab79:	a2 8d 87 65 f0       	mov    %al,0xf065878d
f010ab7e:	a0 8d 87 65 f0       	mov    0xf065878d,%al
f010ab83:	83 c8 80             	or     $0xffffff80,%eax
f010ab86:	a2 8d 87 65 f0       	mov    %al,0xf065878d
f010ab8b:	b8 e0 bd 10 f0       	mov    $0xf010bde0,%eax
f010ab90:	c1 e8 10             	shr    $0x10,%eax
f010ab93:	66 a3 8e 87 65 f0    	mov    %ax,0xf065878e
	SETGATE(idt[T_ILLOP    ], 0, GD_KT , &ALL_FAULTS6, 3) ;
f010ab99:	b8 ea bd 10 f0       	mov    $0xf010bdea,%eax
f010ab9e:	66 a3 90 87 65 f0    	mov    %ax,0xf0658790
f010aba4:	66 c7 05 92 87 65 f0 	movw   $0x8,0xf0658792
f010abab:	08 00 
f010abad:	a0 94 87 65 f0       	mov    0xf0658794,%al
f010abb2:	83 e0 e0             	and    $0xffffffe0,%eax
f010abb5:	a2 94 87 65 f0       	mov    %al,0xf0658794
f010abba:	a0 94 87 65 f0       	mov    0xf0658794,%al
f010abbf:	83 e0 1f             	and    $0x1f,%eax
f010abc2:	a2 94 87 65 f0       	mov    %al,0xf0658794
f010abc7:	a0 95 87 65 f0       	mov    0xf0658795,%al
f010abcc:	83 e0 f0             	and    $0xfffffff0,%eax
f010abcf:	83 c8 0e             	or     $0xe,%eax
f010abd2:	a2 95 87 65 f0       	mov    %al,0xf0658795
f010abd7:	a0 95 87 65 f0       	mov    0xf0658795,%al
f010abdc:	83 e0 ef             	and    $0xffffffef,%eax
f010abdf:	a2 95 87 65 f0       	mov    %al,0xf0658795
f010abe4:	a0 95 87 65 f0       	mov    0xf0658795,%al
f010abe9:	83 c8 60             	or     $0x60,%eax
f010abec:	a2 95 87 65 f0       	mov    %al,0xf0658795
f010abf1:	a0 95 87 65 f0       	mov    0xf0658795,%al
f010abf6:	83 c8 80             	or     $0xffffff80,%eax
f010abf9:	a2 95 87 65 f0       	mov    %al,0xf0658795
f010abfe:	b8 ea bd 10 f0       	mov    $0xf010bdea,%eax
f010ac03:	c1 e8 10             	shr    $0x10,%eax
f010ac06:	66 a3 96 87 65 f0    	mov    %ax,0xf0658796
	SETGATE(idt[T_DEVICE   ], 0, GD_KT , &ALL_FAULTS7, 3) ;
f010ac0c:	b8 f4 bd 10 f0       	mov    $0xf010bdf4,%eax
f010ac11:	66 a3 98 87 65 f0    	mov    %ax,0xf0658798
f010ac17:	66 c7 05 9a 87 65 f0 	movw   $0x8,0xf065879a
f010ac1e:	08 00 
f010ac20:	a0 9c 87 65 f0       	mov    0xf065879c,%al
f010ac25:	83 e0 e0             	and    $0xffffffe0,%eax
f010ac28:	a2 9c 87 65 f0       	mov    %al,0xf065879c
f010ac2d:	a0 9c 87 65 f0       	mov    0xf065879c,%al
f010ac32:	83 e0 1f             	and    $0x1f,%eax
f010ac35:	a2 9c 87 65 f0       	mov    %al,0xf065879c
f010ac3a:	a0 9d 87 65 f0       	mov    0xf065879d,%al
f010ac3f:	83 e0 f0             	and    $0xfffffff0,%eax
f010ac42:	83 c8 0e             	or     $0xe,%eax
f010ac45:	a2 9d 87 65 f0       	mov    %al,0xf065879d
f010ac4a:	a0 9d 87 65 f0       	mov    0xf065879d,%al
f010ac4f:	83 e0 ef             	and    $0xffffffef,%eax
f010ac52:	a2 9d 87 65 f0       	mov    %al,0xf065879d
f010ac57:	a0 9d 87 65 f0       	mov    0xf065879d,%al
f010ac5c:	83 c8 60             	or     $0x60,%eax
f010ac5f:	a2 9d 87 65 f0       	mov    %al,0xf065879d
f010ac64:	a0 9d 87 65 f0       	mov    0xf065879d,%al
f010ac69:	83 c8 80             	or     $0xffffff80,%eax
f010ac6c:	a2 9d 87 65 f0       	mov    %al,0xf065879d
f010ac71:	b8 f4 bd 10 f0       	mov    $0xf010bdf4,%eax
f010ac76:	c1 e8 10             	shr    $0x10,%eax
f010ac79:	66 a3 9e 87 65 f0    	mov    %ax,0xf065879e
	//SETGATE(idt[T_DBLFLT   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_TSS      ], 0, GD_KT , &ALL_FAULTS10, 3) ;
f010ac7f:	b8 fe bd 10 f0       	mov    $0xf010bdfe,%eax
f010ac84:	66 a3 b0 87 65 f0    	mov    %ax,0xf06587b0
f010ac8a:	66 c7 05 b2 87 65 f0 	movw   $0x8,0xf06587b2
f010ac91:	08 00 
f010ac93:	a0 b4 87 65 f0       	mov    0xf06587b4,%al
f010ac98:	83 e0 e0             	and    $0xffffffe0,%eax
f010ac9b:	a2 b4 87 65 f0       	mov    %al,0xf06587b4
f010aca0:	a0 b4 87 65 f0       	mov    0xf06587b4,%al
f010aca5:	83 e0 1f             	and    $0x1f,%eax
f010aca8:	a2 b4 87 65 f0       	mov    %al,0xf06587b4
f010acad:	a0 b5 87 65 f0       	mov    0xf06587b5,%al
f010acb2:	83 e0 f0             	and    $0xfffffff0,%eax
f010acb5:	83 c8 0e             	or     $0xe,%eax
f010acb8:	a2 b5 87 65 f0       	mov    %al,0xf06587b5
f010acbd:	a0 b5 87 65 f0       	mov    0xf06587b5,%al
f010acc2:	83 e0 ef             	and    $0xffffffef,%eax
f010acc5:	a2 b5 87 65 f0       	mov    %al,0xf06587b5
f010acca:	a0 b5 87 65 f0       	mov    0xf06587b5,%al
f010accf:	83 c8 60             	or     $0x60,%eax
f010acd2:	a2 b5 87 65 f0       	mov    %al,0xf06587b5
f010acd7:	a0 b5 87 65 f0       	mov    0xf06587b5,%al
f010acdc:	83 c8 80             	or     $0xffffff80,%eax
f010acdf:	a2 b5 87 65 f0       	mov    %al,0xf06587b5
f010ace4:	b8 fe bd 10 f0       	mov    $0xf010bdfe,%eax
f010ace9:	c1 e8 10             	shr    $0x10,%eax
f010acec:	66 a3 b6 87 65 f0    	mov    %ax,0xf06587b6
	SETGATE(idt[T_SEGNP    ], 0, GD_KT , &ALL_FAULTS11, 3) ;
f010acf2:	b8 06 be 10 f0       	mov    $0xf010be06,%eax
f010acf7:	66 a3 b8 87 65 f0    	mov    %ax,0xf06587b8
f010acfd:	66 c7 05 ba 87 65 f0 	movw   $0x8,0xf06587ba
f010ad04:	08 00 
f010ad06:	a0 bc 87 65 f0       	mov    0xf06587bc,%al
f010ad0b:	83 e0 e0             	and    $0xffffffe0,%eax
f010ad0e:	a2 bc 87 65 f0       	mov    %al,0xf06587bc
f010ad13:	a0 bc 87 65 f0       	mov    0xf06587bc,%al
f010ad18:	83 e0 1f             	and    $0x1f,%eax
f010ad1b:	a2 bc 87 65 f0       	mov    %al,0xf06587bc
f010ad20:	a0 bd 87 65 f0       	mov    0xf06587bd,%al
f010ad25:	83 e0 f0             	and    $0xfffffff0,%eax
f010ad28:	83 c8 0e             	or     $0xe,%eax
f010ad2b:	a2 bd 87 65 f0       	mov    %al,0xf06587bd
f010ad30:	a0 bd 87 65 f0       	mov    0xf06587bd,%al
f010ad35:	83 e0 ef             	and    $0xffffffef,%eax
f010ad38:	a2 bd 87 65 f0       	mov    %al,0xf06587bd
f010ad3d:	a0 bd 87 65 f0       	mov    0xf06587bd,%al
f010ad42:	83 c8 60             	or     $0x60,%eax
f010ad45:	a2 bd 87 65 f0       	mov    %al,0xf06587bd
f010ad4a:	a0 bd 87 65 f0       	mov    0xf06587bd,%al
f010ad4f:	83 c8 80             	or     $0xffffff80,%eax
f010ad52:	a2 bd 87 65 f0       	mov    %al,0xf06587bd
f010ad57:	b8 06 be 10 f0       	mov    $0xf010be06,%eax
f010ad5c:	c1 e8 10             	shr    $0x10,%eax
f010ad5f:	66 a3 be 87 65 f0    	mov    %ax,0xf06587be
	SETGATE(idt[T_STACK    ], 0, GD_KT , &ALL_FAULTS12, 3) ;
f010ad65:	b8 0a be 10 f0       	mov    $0xf010be0a,%eax
f010ad6a:	66 a3 c0 87 65 f0    	mov    %ax,0xf06587c0
f010ad70:	66 c7 05 c2 87 65 f0 	movw   $0x8,0xf06587c2
f010ad77:	08 00 
f010ad79:	a0 c4 87 65 f0       	mov    0xf06587c4,%al
f010ad7e:	83 e0 e0             	and    $0xffffffe0,%eax
f010ad81:	a2 c4 87 65 f0       	mov    %al,0xf06587c4
f010ad86:	a0 c4 87 65 f0       	mov    0xf06587c4,%al
f010ad8b:	83 e0 1f             	and    $0x1f,%eax
f010ad8e:	a2 c4 87 65 f0       	mov    %al,0xf06587c4
f010ad93:	a0 c5 87 65 f0       	mov    0xf06587c5,%al
f010ad98:	83 e0 f0             	and    $0xfffffff0,%eax
f010ad9b:	83 c8 0e             	or     $0xe,%eax
f010ad9e:	a2 c5 87 65 f0       	mov    %al,0xf06587c5
f010ada3:	a0 c5 87 65 f0       	mov    0xf06587c5,%al
f010ada8:	83 e0 ef             	and    $0xffffffef,%eax
f010adab:	a2 c5 87 65 f0       	mov    %al,0xf06587c5
f010adb0:	a0 c5 87 65 f0       	mov    0xf06587c5,%al
f010adb5:	83 c8 60             	or     $0x60,%eax
f010adb8:	a2 c5 87 65 f0       	mov    %al,0xf06587c5
f010adbd:	a0 c5 87 65 f0       	mov    0xf06587c5,%al
f010adc2:	83 c8 80             	or     $0xffffff80,%eax
f010adc5:	a2 c5 87 65 f0       	mov    %al,0xf06587c5
f010adca:	b8 0a be 10 f0       	mov    $0xf010be0a,%eax
f010adcf:	c1 e8 10             	shr    $0x10,%eax
f010add2:	66 a3 c6 87 65 f0    	mov    %ax,0xf06587c6
	SETGATE(idt[T_GPFLT    ], 0, GD_KT , &ALL_FAULTS13, 3) ;
f010add8:	b8 0e be 10 f0       	mov    $0xf010be0e,%eax
f010addd:	66 a3 c8 87 65 f0    	mov    %ax,0xf06587c8
f010ade3:	66 c7 05 ca 87 65 f0 	movw   $0x8,0xf06587ca
f010adea:	08 00 
f010adec:	a0 cc 87 65 f0       	mov    0xf06587cc,%al
f010adf1:	83 e0 e0             	and    $0xffffffe0,%eax
f010adf4:	a2 cc 87 65 f0       	mov    %al,0xf06587cc
f010adf9:	a0 cc 87 65 f0       	mov    0xf06587cc,%al
f010adfe:	83 e0 1f             	and    $0x1f,%eax
f010ae01:	a2 cc 87 65 f0       	mov    %al,0xf06587cc
f010ae06:	a0 cd 87 65 f0       	mov    0xf06587cd,%al
f010ae0b:	83 e0 f0             	and    $0xfffffff0,%eax
f010ae0e:	83 c8 0e             	or     $0xe,%eax
f010ae11:	a2 cd 87 65 f0       	mov    %al,0xf06587cd
f010ae16:	a0 cd 87 65 f0       	mov    0xf06587cd,%al
f010ae1b:	83 e0 ef             	and    $0xffffffef,%eax
f010ae1e:	a2 cd 87 65 f0       	mov    %al,0xf06587cd
f010ae23:	a0 cd 87 65 f0       	mov    0xf06587cd,%al
f010ae28:	83 c8 60             	or     $0x60,%eax
f010ae2b:	a2 cd 87 65 f0       	mov    %al,0xf06587cd
f010ae30:	a0 cd 87 65 f0       	mov    0xf06587cd,%al
f010ae35:	83 c8 80             	or     $0xffffff80,%eax
f010ae38:	a2 cd 87 65 f0       	mov    %al,0xf06587cd
f010ae3d:	b8 0e be 10 f0       	mov    $0xf010be0e,%eax
f010ae42:	c1 e8 10             	shr    $0x10,%eax
f010ae45:	66 a3 ce 87 65 f0    	mov    %ax,0xf06587ce
	//SETGATE(idt[T_PGFLT    ], 0, GD_KT , &ALL_FAULTS, 3) ;
	//SETGATE(idt[ne T_RES   ], 0, GD_KT , &ALL_FAULTS, 3) ;
	SETGATE(idt[T_FPERR    ], 0, GD_KT , &ALL_FAULTS16, 3) ;
f010ae4b:	b8 12 be 10 f0       	mov    $0xf010be12,%eax
f010ae50:	66 a3 e0 87 65 f0    	mov    %ax,0xf06587e0
f010ae56:	66 c7 05 e2 87 65 f0 	movw   $0x8,0xf06587e2
f010ae5d:	08 00 
f010ae5f:	a0 e4 87 65 f0       	mov    0xf06587e4,%al
f010ae64:	83 e0 e0             	and    $0xffffffe0,%eax
f010ae67:	a2 e4 87 65 f0       	mov    %al,0xf06587e4
f010ae6c:	a0 e4 87 65 f0       	mov    0xf06587e4,%al
f010ae71:	83 e0 1f             	and    $0x1f,%eax
f010ae74:	a2 e4 87 65 f0       	mov    %al,0xf06587e4
f010ae79:	a0 e5 87 65 f0       	mov    0xf06587e5,%al
f010ae7e:	83 e0 f0             	and    $0xfffffff0,%eax
f010ae81:	83 c8 0e             	or     $0xe,%eax
f010ae84:	a2 e5 87 65 f0       	mov    %al,0xf06587e5
f010ae89:	a0 e5 87 65 f0       	mov    0xf06587e5,%al
f010ae8e:	83 e0 ef             	and    $0xffffffef,%eax
f010ae91:	a2 e5 87 65 f0       	mov    %al,0xf06587e5
f010ae96:	a0 e5 87 65 f0       	mov    0xf06587e5,%al
f010ae9b:	83 c8 60             	or     $0x60,%eax
f010ae9e:	a2 e5 87 65 f0       	mov    %al,0xf06587e5
f010aea3:	a0 e5 87 65 f0       	mov    0xf06587e5,%al
f010aea8:	83 c8 80             	or     $0xffffff80,%eax
f010aeab:	a2 e5 87 65 f0       	mov    %al,0xf06587e5
f010aeb0:	b8 12 be 10 f0       	mov    $0xf010be12,%eax
f010aeb5:	c1 e8 10             	shr    $0x10,%eax
f010aeb8:	66 a3 e6 87 65 f0    	mov    %ax,0xf06587e6
	SETGATE(idt[T_ALIGN    ], 0, GD_KT , &ALL_FAULTS17, 3) ;
f010aebe:	b8 18 be 10 f0       	mov    $0xf010be18,%eax
f010aec3:	66 a3 e8 87 65 f0    	mov    %ax,0xf06587e8
f010aec9:	66 c7 05 ea 87 65 f0 	movw   $0x8,0xf06587ea
f010aed0:	08 00 
f010aed2:	a0 ec 87 65 f0       	mov    0xf06587ec,%al
f010aed7:	83 e0 e0             	and    $0xffffffe0,%eax
f010aeda:	a2 ec 87 65 f0       	mov    %al,0xf06587ec
f010aedf:	a0 ec 87 65 f0       	mov    0xf06587ec,%al
f010aee4:	83 e0 1f             	and    $0x1f,%eax
f010aee7:	a2 ec 87 65 f0       	mov    %al,0xf06587ec
f010aeec:	a0 ed 87 65 f0       	mov    0xf06587ed,%al
f010aef1:	83 e0 f0             	and    $0xfffffff0,%eax
f010aef4:	83 c8 0e             	or     $0xe,%eax
f010aef7:	a2 ed 87 65 f0       	mov    %al,0xf06587ed
f010aefc:	a0 ed 87 65 f0       	mov    0xf06587ed,%al
f010af01:	83 e0 ef             	and    $0xffffffef,%eax
f010af04:	a2 ed 87 65 f0       	mov    %al,0xf06587ed
f010af09:	a0 ed 87 65 f0       	mov    0xf06587ed,%al
f010af0e:	83 c8 60             	or     $0x60,%eax
f010af11:	a2 ed 87 65 f0       	mov    %al,0xf06587ed
f010af16:	a0 ed 87 65 f0       	mov    0xf06587ed,%al
f010af1b:	83 c8 80             	or     $0xffffff80,%eax
f010af1e:	a2 ed 87 65 f0       	mov    %al,0xf06587ed
f010af23:	b8 18 be 10 f0       	mov    $0xf010be18,%eax
f010af28:	c1 e8 10             	shr    $0x10,%eax
f010af2b:	66 a3 ee 87 65 f0    	mov    %ax,0xf06587ee
	SETGATE(idt[T_MCHK     ], 0, GD_KT , &ALL_FAULTS18, 3) ;
f010af31:	b8 1c be 10 f0       	mov    $0xf010be1c,%eax
f010af36:	66 a3 f0 87 65 f0    	mov    %ax,0xf06587f0
f010af3c:	66 c7 05 f2 87 65 f0 	movw   $0x8,0xf06587f2
f010af43:	08 00 
f010af45:	a0 f4 87 65 f0       	mov    0xf06587f4,%al
f010af4a:	83 e0 e0             	and    $0xffffffe0,%eax
f010af4d:	a2 f4 87 65 f0       	mov    %al,0xf06587f4
f010af52:	a0 f4 87 65 f0       	mov    0xf06587f4,%al
f010af57:	83 e0 1f             	and    $0x1f,%eax
f010af5a:	a2 f4 87 65 f0       	mov    %al,0xf06587f4
f010af5f:	a0 f5 87 65 f0       	mov    0xf06587f5,%al
f010af64:	83 e0 f0             	and    $0xfffffff0,%eax
f010af67:	83 c8 0e             	or     $0xe,%eax
f010af6a:	a2 f5 87 65 f0       	mov    %al,0xf06587f5
f010af6f:	a0 f5 87 65 f0       	mov    0xf06587f5,%al
f010af74:	83 e0 ef             	and    $0xffffffef,%eax
f010af77:	a2 f5 87 65 f0       	mov    %al,0xf06587f5
f010af7c:	a0 f5 87 65 f0       	mov    0xf06587f5,%al
f010af81:	83 c8 60             	or     $0x60,%eax
f010af84:	a2 f5 87 65 f0       	mov    %al,0xf06587f5
f010af89:	a0 f5 87 65 f0       	mov    0xf06587f5,%al
f010af8e:	83 c8 80             	or     $0xffffff80,%eax
f010af91:	a2 f5 87 65 f0       	mov    %al,0xf06587f5
f010af96:	b8 1c be 10 f0       	mov    $0xf010be1c,%eax
f010af9b:	c1 e8 10             	shr    $0x10,%eax
f010af9e:	66 a3 f6 87 65 f0    	mov    %ax,0xf06587f6
	SETGATE(idt[T_SIMDERR  ], 0, GD_KT , &ALL_FAULTS19, 3) ;
f010afa4:	b8 22 be 10 f0       	mov    $0xf010be22,%eax
f010afa9:	66 a3 f8 87 65 f0    	mov    %ax,0xf06587f8
f010afaf:	66 c7 05 fa 87 65 f0 	movw   $0x8,0xf06587fa
f010afb6:	08 00 
f010afb8:	a0 fc 87 65 f0       	mov    0xf06587fc,%al
f010afbd:	83 e0 e0             	and    $0xffffffe0,%eax
f010afc0:	a2 fc 87 65 f0       	mov    %al,0xf06587fc
f010afc5:	a0 fc 87 65 f0       	mov    0xf06587fc,%al
f010afca:	83 e0 1f             	and    $0x1f,%eax
f010afcd:	a2 fc 87 65 f0       	mov    %al,0xf06587fc
f010afd2:	a0 fd 87 65 f0       	mov    0xf06587fd,%al
f010afd7:	83 e0 f0             	and    $0xfffffff0,%eax
f010afda:	83 c8 0e             	or     $0xe,%eax
f010afdd:	a2 fd 87 65 f0       	mov    %al,0xf06587fd
f010afe2:	a0 fd 87 65 f0       	mov    0xf06587fd,%al
f010afe7:	83 e0 ef             	and    $0xffffffef,%eax
f010afea:	a2 fd 87 65 f0       	mov    %al,0xf06587fd
f010afef:	a0 fd 87 65 f0       	mov    0xf06587fd,%al
f010aff4:	83 c8 60             	or     $0x60,%eax
f010aff7:	a2 fd 87 65 f0       	mov    %al,0xf06587fd
f010affc:	a0 fd 87 65 f0       	mov    0xf06587fd,%al
f010b001:	83 c8 80             	or     $0xffffff80,%eax
f010b004:	a2 fd 87 65 f0       	mov    %al,0xf06587fd
f010b009:	b8 22 be 10 f0       	mov    $0xf010be22,%eax
f010b00e:	c1 e8 10             	shr    $0x10,%eax
f010b011:	66 a3 fe 87 65 f0    	mov    %ax,0xf06587fe


	SETGATE(idt[IRQ0_Clock], 0, GD_KT , &ALL_FAULTS32, 3) ;
f010b017:	b8 28 be 10 f0       	mov    $0xf010be28,%eax
f010b01c:	66 a3 60 88 65 f0    	mov    %ax,0xf0658860
f010b022:	66 c7 05 62 88 65 f0 	movw   $0x8,0xf0658862
f010b029:	08 00 
f010b02b:	a0 64 88 65 f0       	mov    0xf0658864,%al
f010b030:	83 e0 e0             	and    $0xffffffe0,%eax
f010b033:	a2 64 88 65 f0       	mov    %al,0xf0658864
f010b038:	a0 64 88 65 f0       	mov    0xf0658864,%al
f010b03d:	83 e0 1f             	and    $0x1f,%eax
f010b040:	a2 64 88 65 f0       	mov    %al,0xf0658864
f010b045:	a0 65 88 65 f0       	mov    0xf0658865,%al
f010b04a:	83 e0 f0             	and    $0xfffffff0,%eax
f010b04d:	83 c8 0e             	or     $0xe,%eax
f010b050:	a2 65 88 65 f0       	mov    %al,0xf0658865
f010b055:	a0 65 88 65 f0       	mov    0xf0658865,%al
f010b05a:	83 e0 ef             	and    $0xffffffef,%eax
f010b05d:	a2 65 88 65 f0       	mov    %al,0xf0658865
f010b062:	a0 65 88 65 f0       	mov    0xf0658865,%al
f010b067:	83 c8 60             	or     $0x60,%eax
f010b06a:	a2 65 88 65 f0       	mov    %al,0xf0658865
f010b06f:	a0 65 88 65 f0       	mov    0xf0658865,%al
f010b074:	83 c8 80             	or     $0xffffff80,%eax
f010b077:	a2 65 88 65 f0       	mov    %al,0xf0658865
f010b07c:	b8 28 be 10 f0       	mov    $0xf010be28,%eax
f010b081:	c1 e8 10             	shr    $0x10,%eax
f010b084:	66 a3 66 88 65 f0    	mov    %ax,0xf0658866
	SETGATE(idt[33], 0, GD_KT , &ALL_FAULTS33, 3) ;
f010b08a:	b8 2e be 10 f0       	mov    $0xf010be2e,%eax
f010b08f:	66 a3 68 88 65 f0    	mov    %ax,0xf0658868
f010b095:	66 c7 05 6a 88 65 f0 	movw   $0x8,0xf065886a
f010b09c:	08 00 
f010b09e:	a0 6c 88 65 f0       	mov    0xf065886c,%al
f010b0a3:	83 e0 e0             	and    $0xffffffe0,%eax
f010b0a6:	a2 6c 88 65 f0       	mov    %al,0xf065886c
f010b0ab:	a0 6c 88 65 f0       	mov    0xf065886c,%al
f010b0b0:	83 e0 1f             	and    $0x1f,%eax
f010b0b3:	a2 6c 88 65 f0       	mov    %al,0xf065886c
f010b0b8:	a0 6d 88 65 f0       	mov    0xf065886d,%al
f010b0bd:	83 e0 f0             	and    $0xfffffff0,%eax
f010b0c0:	83 c8 0e             	or     $0xe,%eax
f010b0c3:	a2 6d 88 65 f0       	mov    %al,0xf065886d
f010b0c8:	a0 6d 88 65 f0       	mov    0xf065886d,%al
f010b0cd:	83 e0 ef             	and    $0xffffffef,%eax
f010b0d0:	a2 6d 88 65 f0       	mov    %al,0xf065886d
f010b0d5:	a0 6d 88 65 f0       	mov    0xf065886d,%al
f010b0da:	83 c8 60             	or     $0x60,%eax
f010b0dd:	a2 6d 88 65 f0       	mov    %al,0xf065886d
f010b0e2:	a0 6d 88 65 f0       	mov    0xf065886d,%al
f010b0e7:	83 c8 80             	or     $0xffffff80,%eax
f010b0ea:	a2 6d 88 65 f0       	mov    %al,0xf065886d
f010b0ef:	b8 2e be 10 f0       	mov    $0xf010be2e,%eax
f010b0f4:	c1 e8 10             	shr    $0x10,%eax
f010b0f7:	66 a3 6e 88 65 f0    	mov    %ax,0xf065886e
	SETGATE(idt[34], 0, GD_KT , &ALL_FAULTS34, 3) ;
f010b0fd:	b8 34 be 10 f0       	mov    $0xf010be34,%eax
f010b102:	66 a3 70 88 65 f0    	mov    %ax,0xf0658870
f010b108:	66 c7 05 72 88 65 f0 	movw   $0x8,0xf0658872
f010b10f:	08 00 
f010b111:	a0 74 88 65 f0       	mov    0xf0658874,%al
f010b116:	83 e0 e0             	and    $0xffffffe0,%eax
f010b119:	a2 74 88 65 f0       	mov    %al,0xf0658874
f010b11e:	a0 74 88 65 f0       	mov    0xf0658874,%al
f010b123:	83 e0 1f             	and    $0x1f,%eax
f010b126:	a2 74 88 65 f0       	mov    %al,0xf0658874
f010b12b:	a0 75 88 65 f0       	mov    0xf0658875,%al
f010b130:	83 e0 f0             	and    $0xfffffff0,%eax
f010b133:	83 c8 0e             	or     $0xe,%eax
f010b136:	a2 75 88 65 f0       	mov    %al,0xf0658875
f010b13b:	a0 75 88 65 f0       	mov    0xf0658875,%al
f010b140:	83 e0 ef             	and    $0xffffffef,%eax
f010b143:	a2 75 88 65 f0       	mov    %al,0xf0658875
f010b148:	a0 75 88 65 f0       	mov    0xf0658875,%al
f010b14d:	83 c8 60             	or     $0x60,%eax
f010b150:	a2 75 88 65 f0       	mov    %al,0xf0658875
f010b155:	a0 75 88 65 f0       	mov    0xf0658875,%al
f010b15a:	83 c8 80             	or     $0xffffff80,%eax
f010b15d:	a2 75 88 65 f0       	mov    %al,0xf0658875
f010b162:	b8 34 be 10 f0       	mov    $0xf010be34,%eax
f010b167:	c1 e8 10             	shr    $0x10,%eax
f010b16a:	66 a3 76 88 65 f0    	mov    %ax,0xf0658876
	SETGATE(idt[35], 0, GD_KT , &ALL_FAULTS35, 3) ;
f010b170:	b8 3a be 10 f0       	mov    $0xf010be3a,%eax
f010b175:	66 a3 78 88 65 f0    	mov    %ax,0xf0658878
f010b17b:	66 c7 05 7a 88 65 f0 	movw   $0x8,0xf065887a
f010b182:	08 00 
f010b184:	a0 7c 88 65 f0       	mov    0xf065887c,%al
f010b189:	83 e0 e0             	and    $0xffffffe0,%eax
f010b18c:	a2 7c 88 65 f0       	mov    %al,0xf065887c
f010b191:	a0 7c 88 65 f0       	mov    0xf065887c,%al
f010b196:	83 e0 1f             	and    $0x1f,%eax
f010b199:	a2 7c 88 65 f0       	mov    %al,0xf065887c
f010b19e:	a0 7d 88 65 f0       	mov    0xf065887d,%al
f010b1a3:	83 e0 f0             	and    $0xfffffff0,%eax
f010b1a6:	83 c8 0e             	or     $0xe,%eax
f010b1a9:	a2 7d 88 65 f0       	mov    %al,0xf065887d
f010b1ae:	a0 7d 88 65 f0       	mov    0xf065887d,%al
f010b1b3:	83 e0 ef             	and    $0xffffffef,%eax
f010b1b6:	a2 7d 88 65 f0       	mov    %al,0xf065887d
f010b1bb:	a0 7d 88 65 f0       	mov    0xf065887d,%al
f010b1c0:	83 c8 60             	or     $0x60,%eax
f010b1c3:	a2 7d 88 65 f0       	mov    %al,0xf065887d
f010b1c8:	a0 7d 88 65 f0       	mov    0xf065887d,%al
f010b1cd:	83 c8 80             	or     $0xffffff80,%eax
f010b1d0:	a2 7d 88 65 f0       	mov    %al,0xf065887d
f010b1d5:	b8 3a be 10 f0       	mov    $0xf010be3a,%eax
f010b1da:	c1 e8 10             	shr    $0x10,%eax
f010b1dd:	66 a3 7e 88 65 f0    	mov    %ax,0xf065887e
	SETGATE(idt[36], 0, GD_KT , &ALL_FAULTS36, 3) ;
f010b1e3:	b8 40 be 10 f0       	mov    $0xf010be40,%eax
f010b1e8:	66 a3 80 88 65 f0    	mov    %ax,0xf0658880
f010b1ee:	66 c7 05 82 88 65 f0 	movw   $0x8,0xf0658882
f010b1f5:	08 00 
f010b1f7:	a0 84 88 65 f0       	mov    0xf0658884,%al
f010b1fc:	83 e0 e0             	and    $0xffffffe0,%eax
f010b1ff:	a2 84 88 65 f0       	mov    %al,0xf0658884
f010b204:	a0 84 88 65 f0       	mov    0xf0658884,%al
f010b209:	83 e0 1f             	and    $0x1f,%eax
f010b20c:	a2 84 88 65 f0       	mov    %al,0xf0658884
f010b211:	a0 85 88 65 f0       	mov    0xf0658885,%al
f010b216:	83 e0 f0             	and    $0xfffffff0,%eax
f010b219:	83 c8 0e             	or     $0xe,%eax
f010b21c:	a2 85 88 65 f0       	mov    %al,0xf0658885
f010b221:	a0 85 88 65 f0       	mov    0xf0658885,%al
f010b226:	83 e0 ef             	and    $0xffffffef,%eax
f010b229:	a2 85 88 65 f0       	mov    %al,0xf0658885
f010b22e:	a0 85 88 65 f0       	mov    0xf0658885,%al
f010b233:	83 c8 60             	or     $0x60,%eax
f010b236:	a2 85 88 65 f0       	mov    %al,0xf0658885
f010b23b:	a0 85 88 65 f0       	mov    0xf0658885,%al
f010b240:	83 c8 80             	or     $0xffffff80,%eax
f010b243:	a2 85 88 65 f0       	mov    %al,0xf0658885
f010b248:	b8 40 be 10 f0       	mov    $0xf010be40,%eax
f010b24d:	c1 e8 10             	shr    $0x10,%eax
f010b250:	66 a3 86 88 65 f0    	mov    %ax,0xf0658886
	SETGATE(idt[37], 0, GD_KT , &ALL_FAULTS37, 3) ;
f010b256:	b8 46 be 10 f0       	mov    $0xf010be46,%eax
f010b25b:	66 a3 88 88 65 f0    	mov    %ax,0xf0658888
f010b261:	66 c7 05 8a 88 65 f0 	movw   $0x8,0xf065888a
f010b268:	08 00 
f010b26a:	a0 8c 88 65 f0       	mov    0xf065888c,%al
f010b26f:	83 e0 e0             	and    $0xffffffe0,%eax
f010b272:	a2 8c 88 65 f0       	mov    %al,0xf065888c
f010b277:	a0 8c 88 65 f0       	mov    0xf065888c,%al
f010b27c:	83 e0 1f             	and    $0x1f,%eax
f010b27f:	a2 8c 88 65 f0       	mov    %al,0xf065888c
f010b284:	a0 8d 88 65 f0       	mov    0xf065888d,%al
f010b289:	83 e0 f0             	and    $0xfffffff0,%eax
f010b28c:	83 c8 0e             	or     $0xe,%eax
f010b28f:	a2 8d 88 65 f0       	mov    %al,0xf065888d
f010b294:	a0 8d 88 65 f0       	mov    0xf065888d,%al
f010b299:	83 e0 ef             	and    $0xffffffef,%eax
f010b29c:	a2 8d 88 65 f0       	mov    %al,0xf065888d
f010b2a1:	a0 8d 88 65 f0       	mov    0xf065888d,%al
f010b2a6:	83 c8 60             	or     $0x60,%eax
f010b2a9:	a2 8d 88 65 f0       	mov    %al,0xf065888d
f010b2ae:	a0 8d 88 65 f0       	mov    0xf065888d,%al
f010b2b3:	83 c8 80             	or     $0xffffff80,%eax
f010b2b6:	a2 8d 88 65 f0       	mov    %al,0xf065888d
f010b2bb:	b8 46 be 10 f0       	mov    $0xf010be46,%eax
f010b2c0:	c1 e8 10             	shr    $0x10,%eax
f010b2c3:	66 a3 8e 88 65 f0    	mov    %ax,0xf065888e
	SETGATE(idt[38], 0, GD_KT , &ALL_FAULTS38, 3) ;
f010b2c9:	b8 4c be 10 f0       	mov    $0xf010be4c,%eax
f010b2ce:	66 a3 90 88 65 f0    	mov    %ax,0xf0658890
f010b2d4:	66 c7 05 92 88 65 f0 	movw   $0x8,0xf0658892
f010b2db:	08 00 
f010b2dd:	a0 94 88 65 f0       	mov    0xf0658894,%al
f010b2e2:	83 e0 e0             	and    $0xffffffe0,%eax
f010b2e5:	a2 94 88 65 f0       	mov    %al,0xf0658894
f010b2ea:	a0 94 88 65 f0       	mov    0xf0658894,%al
f010b2ef:	83 e0 1f             	and    $0x1f,%eax
f010b2f2:	a2 94 88 65 f0       	mov    %al,0xf0658894
f010b2f7:	a0 95 88 65 f0       	mov    0xf0658895,%al
f010b2fc:	83 e0 f0             	and    $0xfffffff0,%eax
f010b2ff:	83 c8 0e             	or     $0xe,%eax
f010b302:	a2 95 88 65 f0       	mov    %al,0xf0658895
f010b307:	a0 95 88 65 f0       	mov    0xf0658895,%al
f010b30c:	83 e0 ef             	and    $0xffffffef,%eax
f010b30f:	a2 95 88 65 f0       	mov    %al,0xf0658895
f010b314:	a0 95 88 65 f0       	mov    0xf0658895,%al
f010b319:	83 c8 60             	or     $0x60,%eax
f010b31c:	a2 95 88 65 f0       	mov    %al,0xf0658895
f010b321:	a0 95 88 65 f0       	mov    0xf0658895,%al
f010b326:	83 c8 80             	or     $0xffffff80,%eax
f010b329:	a2 95 88 65 f0       	mov    %al,0xf0658895
f010b32e:	b8 4c be 10 f0       	mov    $0xf010be4c,%eax
f010b333:	c1 e8 10             	shr    $0x10,%eax
f010b336:	66 a3 96 88 65 f0    	mov    %ax,0xf0658896
	SETGATE(idt[39], 0, GD_KT , &ALL_FAULTS39, 3) ;
f010b33c:	b8 52 be 10 f0       	mov    $0xf010be52,%eax
f010b341:	66 a3 98 88 65 f0    	mov    %ax,0xf0658898
f010b347:	66 c7 05 9a 88 65 f0 	movw   $0x8,0xf065889a
f010b34e:	08 00 
f010b350:	a0 9c 88 65 f0       	mov    0xf065889c,%al
f010b355:	83 e0 e0             	and    $0xffffffe0,%eax
f010b358:	a2 9c 88 65 f0       	mov    %al,0xf065889c
f010b35d:	a0 9c 88 65 f0       	mov    0xf065889c,%al
f010b362:	83 e0 1f             	and    $0x1f,%eax
f010b365:	a2 9c 88 65 f0       	mov    %al,0xf065889c
f010b36a:	a0 9d 88 65 f0       	mov    0xf065889d,%al
f010b36f:	83 e0 f0             	and    $0xfffffff0,%eax
f010b372:	83 c8 0e             	or     $0xe,%eax
f010b375:	a2 9d 88 65 f0       	mov    %al,0xf065889d
f010b37a:	a0 9d 88 65 f0       	mov    0xf065889d,%al
f010b37f:	83 e0 ef             	and    $0xffffffef,%eax
f010b382:	a2 9d 88 65 f0       	mov    %al,0xf065889d
f010b387:	a0 9d 88 65 f0       	mov    0xf065889d,%al
f010b38c:	83 c8 60             	or     $0x60,%eax
f010b38f:	a2 9d 88 65 f0       	mov    %al,0xf065889d
f010b394:	a0 9d 88 65 f0       	mov    0xf065889d,%al
f010b399:	83 c8 80             	or     $0xffffff80,%eax
f010b39c:	a2 9d 88 65 f0       	mov    %al,0xf065889d
f010b3a1:	b8 52 be 10 f0       	mov    $0xf010be52,%eax
f010b3a6:	c1 e8 10             	shr    $0x10,%eax
f010b3a9:	66 a3 9e 88 65 f0    	mov    %ax,0xf065889e
	SETGATE(idt[40], 0, GD_KT , &ALL_FAULTS40, 3) ;
f010b3af:	b8 58 be 10 f0       	mov    $0xf010be58,%eax
f010b3b4:	66 a3 a0 88 65 f0    	mov    %ax,0xf06588a0
f010b3ba:	66 c7 05 a2 88 65 f0 	movw   $0x8,0xf06588a2
f010b3c1:	08 00 
f010b3c3:	a0 a4 88 65 f0       	mov    0xf06588a4,%al
f010b3c8:	83 e0 e0             	and    $0xffffffe0,%eax
f010b3cb:	a2 a4 88 65 f0       	mov    %al,0xf06588a4
f010b3d0:	a0 a4 88 65 f0       	mov    0xf06588a4,%al
f010b3d5:	83 e0 1f             	and    $0x1f,%eax
f010b3d8:	a2 a4 88 65 f0       	mov    %al,0xf06588a4
f010b3dd:	a0 a5 88 65 f0       	mov    0xf06588a5,%al
f010b3e2:	83 e0 f0             	and    $0xfffffff0,%eax
f010b3e5:	83 c8 0e             	or     $0xe,%eax
f010b3e8:	a2 a5 88 65 f0       	mov    %al,0xf06588a5
f010b3ed:	a0 a5 88 65 f0       	mov    0xf06588a5,%al
f010b3f2:	83 e0 ef             	and    $0xffffffef,%eax
f010b3f5:	a2 a5 88 65 f0       	mov    %al,0xf06588a5
f010b3fa:	a0 a5 88 65 f0       	mov    0xf06588a5,%al
f010b3ff:	83 c8 60             	or     $0x60,%eax
f010b402:	a2 a5 88 65 f0       	mov    %al,0xf06588a5
f010b407:	a0 a5 88 65 f0       	mov    0xf06588a5,%al
f010b40c:	83 c8 80             	or     $0xffffff80,%eax
f010b40f:	a2 a5 88 65 f0       	mov    %al,0xf06588a5
f010b414:	b8 58 be 10 f0       	mov    $0xf010be58,%eax
f010b419:	c1 e8 10             	shr    $0x10,%eax
f010b41c:	66 a3 a6 88 65 f0    	mov    %ax,0xf06588a6
	SETGATE(idt[41], 0, GD_KT , &ALL_FAULTS41, 3) ;
f010b422:	b8 5e be 10 f0       	mov    $0xf010be5e,%eax
f010b427:	66 a3 a8 88 65 f0    	mov    %ax,0xf06588a8
f010b42d:	66 c7 05 aa 88 65 f0 	movw   $0x8,0xf06588aa
f010b434:	08 00 
f010b436:	a0 ac 88 65 f0       	mov    0xf06588ac,%al
f010b43b:	83 e0 e0             	and    $0xffffffe0,%eax
f010b43e:	a2 ac 88 65 f0       	mov    %al,0xf06588ac
f010b443:	a0 ac 88 65 f0       	mov    0xf06588ac,%al
f010b448:	83 e0 1f             	and    $0x1f,%eax
f010b44b:	a2 ac 88 65 f0       	mov    %al,0xf06588ac
f010b450:	a0 ad 88 65 f0       	mov    0xf06588ad,%al
f010b455:	83 e0 f0             	and    $0xfffffff0,%eax
f010b458:	83 c8 0e             	or     $0xe,%eax
f010b45b:	a2 ad 88 65 f0       	mov    %al,0xf06588ad
f010b460:	a0 ad 88 65 f0       	mov    0xf06588ad,%al
f010b465:	83 e0 ef             	and    $0xffffffef,%eax
f010b468:	a2 ad 88 65 f0       	mov    %al,0xf06588ad
f010b46d:	a0 ad 88 65 f0       	mov    0xf06588ad,%al
f010b472:	83 c8 60             	or     $0x60,%eax
f010b475:	a2 ad 88 65 f0       	mov    %al,0xf06588ad
f010b47a:	a0 ad 88 65 f0       	mov    0xf06588ad,%al
f010b47f:	83 c8 80             	or     $0xffffff80,%eax
f010b482:	a2 ad 88 65 f0       	mov    %al,0xf06588ad
f010b487:	b8 5e be 10 f0       	mov    $0xf010be5e,%eax
f010b48c:	c1 e8 10             	shr    $0x10,%eax
f010b48f:	66 a3 ae 88 65 f0    	mov    %ax,0xf06588ae
	SETGATE(idt[42], 0, GD_KT , &ALL_FAULTS42, 3) ;
f010b495:	b8 64 be 10 f0       	mov    $0xf010be64,%eax
f010b49a:	66 a3 b0 88 65 f0    	mov    %ax,0xf06588b0
f010b4a0:	66 c7 05 b2 88 65 f0 	movw   $0x8,0xf06588b2
f010b4a7:	08 00 
f010b4a9:	a0 b4 88 65 f0       	mov    0xf06588b4,%al
f010b4ae:	83 e0 e0             	and    $0xffffffe0,%eax
f010b4b1:	a2 b4 88 65 f0       	mov    %al,0xf06588b4
f010b4b6:	a0 b4 88 65 f0       	mov    0xf06588b4,%al
f010b4bb:	83 e0 1f             	and    $0x1f,%eax
f010b4be:	a2 b4 88 65 f0       	mov    %al,0xf06588b4
f010b4c3:	a0 b5 88 65 f0       	mov    0xf06588b5,%al
f010b4c8:	83 e0 f0             	and    $0xfffffff0,%eax
f010b4cb:	83 c8 0e             	or     $0xe,%eax
f010b4ce:	a2 b5 88 65 f0       	mov    %al,0xf06588b5
f010b4d3:	a0 b5 88 65 f0       	mov    0xf06588b5,%al
f010b4d8:	83 e0 ef             	and    $0xffffffef,%eax
f010b4db:	a2 b5 88 65 f0       	mov    %al,0xf06588b5
f010b4e0:	a0 b5 88 65 f0       	mov    0xf06588b5,%al
f010b4e5:	83 c8 60             	or     $0x60,%eax
f010b4e8:	a2 b5 88 65 f0       	mov    %al,0xf06588b5
f010b4ed:	a0 b5 88 65 f0       	mov    0xf06588b5,%al
f010b4f2:	83 c8 80             	or     $0xffffff80,%eax
f010b4f5:	a2 b5 88 65 f0       	mov    %al,0xf06588b5
f010b4fa:	b8 64 be 10 f0       	mov    $0xf010be64,%eax
f010b4ff:	c1 e8 10             	shr    $0x10,%eax
f010b502:	66 a3 b6 88 65 f0    	mov    %ax,0xf06588b6
	SETGATE(idt[43], 0, GD_KT , &ALL_FAULTS43, 3) ;
f010b508:	b8 6a be 10 f0       	mov    $0xf010be6a,%eax
f010b50d:	66 a3 b8 88 65 f0    	mov    %ax,0xf06588b8
f010b513:	66 c7 05 ba 88 65 f0 	movw   $0x8,0xf06588ba
f010b51a:	08 00 
f010b51c:	a0 bc 88 65 f0       	mov    0xf06588bc,%al
f010b521:	83 e0 e0             	and    $0xffffffe0,%eax
f010b524:	a2 bc 88 65 f0       	mov    %al,0xf06588bc
f010b529:	a0 bc 88 65 f0       	mov    0xf06588bc,%al
f010b52e:	83 e0 1f             	and    $0x1f,%eax
f010b531:	a2 bc 88 65 f0       	mov    %al,0xf06588bc
f010b536:	a0 bd 88 65 f0       	mov    0xf06588bd,%al
f010b53b:	83 e0 f0             	and    $0xfffffff0,%eax
f010b53e:	83 c8 0e             	or     $0xe,%eax
f010b541:	a2 bd 88 65 f0       	mov    %al,0xf06588bd
f010b546:	a0 bd 88 65 f0       	mov    0xf06588bd,%al
f010b54b:	83 e0 ef             	and    $0xffffffef,%eax
f010b54e:	a2 bd 88 65 f0       	mov    %al,0xf06588bd
f010b553:	a0 bd 88 65 f0       	mov    0xf06588bd,%al
f010b558:	83 c8 60             	or     $0x60,%eax
f010b55b:	a2 bd 88 65 f0       	mov    %al,0xf06588bd
f010b560:	a0 bd 88 65 f0       	mov    0xf06588bd,%al
f010b565:	83 c8 80             	or     $0xffffff80,%eax
f010b568:	a2 bd 88 65 f0       	mov    %al,0xf06588bd
f010b56d:	b8 6a be 10 f0       	mov    $0xf010be6a,%eax
f010b572:	c1 e8 10             	shr    $0x10,%eax
f010b575:	66 a3 be 88 65 f0    	mov    %ax,0xf06588be
	SETGATE(idt[44], 0, GD_KT , &ALL_FAULTS44, 3) ;
f010b57b:	b8 70 be 10 f0       	mov    $0xf010be70,%eax
f010b580:	66 a3 c0 88 65 f0    	mov    %ax,0xf06588c0
f010b586:	66 c7 05 c2 88 65 f0 	movw   $0x8,0xf06588c2
f010b58d:	08 00 
f010b58f:	a0 c4 88 65 f0       	mov    0xf06588c4,%al
f010b594:	83 e0 e0             	and    $0xffffffe0,%eax
f010b597:	a2 c4 88 65 f0       	mov    %al,0xf06588c4
f010b59c:	a0 c4 88 65 f0       	mov    0xf06588c4,%al
f010b5a1:	83 e0 1f             	and    $0x1f,%eax
f010b5a4:	a2 c4 88 65 f0       	mov    %al,0xf06588c4
f010b5a9:	a0 c5 88 65 f0       	mov    0xf06588c5,%al
f010b5ae:	83 e0 f0             	and    $0xfffffff0,%eax
f010b5b1:	83 c8 0e             	or     $0xe,%eax
f010b5b4:	a2 c5 88 65 f0       	mov    %al,0xf06588c5
f010b5b9:	a0 c5 88 65 f0       	mov    0xf06588c5,%al
f010b5be:	83 e0 ef             	and    $0xffffffef,%eax
f010b5c1:	a2 c5 88 65 f0       	mov    %al,0xf06588c5
f010b5c6:	a0 c5 88 65 f0       	mov    0xf06588c5,%al
f010b5cb:	83 c8 60             	or     $0x60,%eax
f010b5ce:	a2 c5 88 65 f0       	mov    %al,0xf06588c5
f010b5d3:	a0 c5 88 65 f0       	mov    0xf06588c5,%al
f010b5d8:	83 c8 80             	or     $0xffffff80,%eax
f010b5db:	a2 c5 88 65 f0       	mov    %al,0xf06588c5
f010b5e0:	b8 70 be 10 f0       	mov    $0xf010be70,%eax
f010b5e5:	c1 e8 10             	shr    $0x10,%eax
f010b5e8:	66 a3 c6 88 65 f0    	mov    %ax,0xf06588c6
	SETGATE(idt[45], 0, GD_KT , &ALL_FAULTS45, 3) ;
f010b5ee:	b8 76 be 10 f0       	mov    $0xf010be76,%eax
f010b5f3:	66 a3 c8 88 65 f0    	mov    %ax,0xf06588c8
f010b5f9:	66 c7 05 ca 88 65 f0 	movw   $0x8,0xf06588ca
f010b600:	08 00 
f010b602:	a0 cc 88 65 f0       	mov    0xf06588cc,%al
f010b607:	83 e0 e0             	and    $0xffffffe0,%eax
f010b60a:	a2 cc 88 65 f0       	mov    %al,0xf06588cc
f010b60f:	a0 cc 88 65 f0       	mov    0xf06588cc,%al
f010b614:	83 e0 1f             	and    $0x1f,%eax
f010b617:	a2 cc 88 65 f0       	mov    %al,0xf06588cc
f010b61c:	a0 cd 88 65 f0       	mov    0xf06588cd,%al
f010b621:	83 e0 f0             	and    $0xfffffff0,%eax
f010b624:	83 c8 0e             	or     $0xe,%eax
f010b627:	a2 cd 88 65 f0       	mov    %al,0xf06588cd
f010b62c:	a0 cd 88 65 f0       	mov    0xf06588cd,%al
f010b631:	83 e0 ef             	and    $0xffffffef,%eax
f010b634:	a2 cd 88 65 f0       	mov    %al,0xf06588cd
f010b639:	a0 cd 88 65 f0       	mov    0xf06588cd,%al
f010b63e:	83 c8 60             	or     $0x60,%eax
f010b641:	a2 cd 88 65 f0       	mov    %al,0xf06588cd
f010b646:	a0 cd 88 65 f0       	mov    0xf06588cd,%al
f010b64b:	83 c8 80             	or     $0xffffff80,%eax
f010b64e:	a2 cd 88 65 f0       	mov    %al,0xf06588cd
f010b653:	b8 76 be 10 f0       	mov    $0xf010be76,%eax
f010b658:	c1 e8 10             	shr    $0x10,%eax
f010b65b:	66 a3 ce 88 65 f0    	mov    %ax,0xf06588ce
	SETGATE(idt[46], 0, GD_KT , &ALL_FAULTS46, 3) ;
f010b661:	b8 7c be 10 f0       	mov    $0xf010be7c,%eax
f010b666:	66 a3 d0 88 65 f0    	mov    %ax,0xf06588d0
f010b66c:	66 c7 05 d2 88 65 f0 	movw   $0x8,0xf06588d2
f010b673:	08 00 
f010b675:	a0 d4 88 65 f0       	mov    0xf06588d4,%al
f010b67a:	83 e0 e0             	and    $0xffffffe0,%eax
f010b67d:	a2 d4 88 65 f0       	mov    %al,0xf06588d4
f010b682:	a0 d4 88 65 f0       	mov    0xf06588d4,%al
f010b687:	83 e0 1f             	and    $0x1f,%eax
f010b68a:	a2 d4 88 65 f0       	mov    %al,0xf06588d4
f010b68f:	a0 d5 88 65 f0       	mov    0xf06588d5,%al
f010b694:	83 e0 f0             	and    $0xfffffff0,%eax
f010b697:	83 c8 0e             	or     $0xe,%eax
f010b69a:	a2 d5 88 65 f0       	mov    %al,0xf06588d5
f010b69f:	a0 d5 88 65 f0       	mov    0xf06588d5,%al
f010b6a4:	83 e0 ef             	and    $0xffffffef,%eax
f010b6a7:	a2 d5 88 65 f0       	mov    %al,0xf06588d5
f010b6ac:	a0 d5 88 65 f0       	mov    0xf06588d5,%al
f010b6b1:	83 c8 60             	or     $0x60,%eax
f010b6b4:	a2 d5 88 65 f0       	mov    %al,0xf06588d5
f010b6b9:	a0 d5 88 65 f0       	mov    0xf06588d5,%al
f010b6be:	83 c8 80             	or     $0xffffff80,%eax
f010b6c1:	a2 d5 88 65 f0       	mov    %al,0xf06588d5
f010b6c6:	b8 7c be 10 f0       	mov    $0xf010be7c,%eax
f010b6cb:	c1 e8 10             	shr    $0x10,%eax
f010b6ce:	66 a3 d6 88 65 f0    	mov    %ax,0xf06588d6
	SETGATE(idt[47], 0, GD_KT , &ALL_FAULTS47, 3) ;
f010b6d4:	b8 82 be 10 f0       	mov    $0xf010be82,%eax
f010b6d9:	66 a3 d8 88 65 f0    	mov    %ax,0xf06588d8
f010b6df:	66 c7 05 da 88 65 f0 	movw   $0x8,0xf06588da
f010b6e6:	08 00 
f010b6e8:	a0 dc 88 65 f0       	mov    0xf06588dc,%al
f010b6ed:	83 e0 e0             	and    $0xffffffe0,%eax
f010b6f0:	a2 dc 88 65 f0       	mov    %al,0xf06588dc
f010b6f5:	a0 dc 88 65 f0       	mov    0xf06588dc,%al
f010b6fa:	83 e0 1f             	and    $0x1f,%eax
f010b6fd:	a2 dc 88 65 f0       	mov    %al,0xf06588dc
f010b702:	a0 dd 88 65 f0       	mov    0xf06588dd,%al
f010b707:	83 e0 f0             	and    $0xfffffff0,%eax
f010b70a:	83 c8 0e             	or     $0xe,%eax
f010b70d:	a2 dd 88 65 f0       	mov    %al,0xf06588dd
f010b712:	a0 dd 88 65 f0       	mov    0xf06588dd,%al
f010b717:	83 e0 ef             	and    $0xffffffef,%eax
f010b71a:	a2 dd 88 65 f0       	mov    %al,0xf06588dd
f010b71f:	a0 dd 88 65 f0       	mov    0xf06588dd,%al
f010b724:	83 c8 60             	or     $0x60,%eax
f010b727:	a2 dd 88 65 f0       	mov    %al,0xf06588dd
f010b72c:	a0 dd 88 65 f0       	mov    0xf06588dd,%al
f010b731:	83 c8 80             	or     $0xffffff80,%eax
f010b734:	a2 dd 88 65 f0       	mov    %al,0xf06588dd
f010b739:	b8 82 be 10 f0       	mov    $0xf010be82,%eax
f010b73e:	c1 e8 10             	shr    $0x10,%eax
f010b741:	66 a3 de 88 65 f0    	mov    %ax,0xf06588de



	// Setup a TSS so that we get the right stack
	// when we trap to the kernel.
	ts.ts_esp0 = KERNEL_STACK_TOP;
f010b747:	c7 05 64 8f 65 f0 00 	movl   $0xefc00000,0xf0658f64
f010b74e:	00 c0 ef 
	ts.ts_ss0 = GD_KD;
f010b751:	66 c7 05 68 8f 65 f0 	movw   $0x10,0xf0658f68
f010b758:	10 00 

	// Initialize the TSS field of the gdt.
	gdt[GD_TSS >> 3] = SEG16(STS_T32A, (uint32) (&ts),
f010b75a:	66 c7 05 e8 08 19 f0 	movw   $0x68,0xf01908e8
f010b761:	68 00 
f010b763:	b8 60 8f 65 f0       	mov    $0xf0658f60,%eax
f010b768:	66 a3 ea 08 19 f0    	mov    %ax,0xf01908ea
f010b76e:	b8 60 8f 65 f0       	mov    $0xf0658f60,%eax
f010b773:	c1 e8 10             	shr    $0x10,%eax
f010b776:	a2 ec 08 19 f0       	mov    %al,0xf01908ec
f010b77b:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010b780:	83 e0 f0             	and    $0xfffffff0,%eax
f010b783:	83 c8 09             	or     $0x9,%eax
f010b786:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010b78b:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010b790:	83 c8 10             	or     $0x10,%eax
f010b793:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010b798:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010b79d:	83 e0 9f             	and    $0xffffff9f,%eax
f010b7a0:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010b7a5:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010b7aa:	83 c8 80             	or     $0xffffff80,%eax
f010b7ad:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010b7b2:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010b7b7:	83 e0 f0             	and    $0xfffffff0,%eax
f010b7ba:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010b7bf:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010b7c4:	83 e0 ef             	and    $0xffffffef,%eax
f010b7c7:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010b7cc:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010b7d1:	83 e0 df             	and    $0xffffffdf,%eax
f010b7d4:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010b7d9:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010b7de:	83 c8 40             	or     $0x40,%eax
f010b7e1:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010b7e6:	a0 ee 08 19 f0       	mov    0xf01908ee,%al
f010b7eb:	83 e0 7f             	and    $0x7f,%eax
f010b7ee:	a2 ee 08 19 f0       	mov    %al,0xf01908ee
f010b7f3:	b8 60 8f 65 f0       	mov    $0xf0658f60,%eax
f010b7f8:	c1 e8 18             	shr    $0x18,%eax
f010b7fb:	a2 ef 08 19 f0       	mov    %al,0xf01908ef
			sizeof(struct Taskstate), 0);
	gdt[GD_TSS >> 3].sd_s = 0;
f010b800:	a0 ed 08 19 f0       	mov    0xf01908ed,%al
f010b805:	83 e0 ef             	and    $0xffffffef,%eax
f010b808:	a2 ed 08 19 f0       	mov    %al,0xf01908ed
f010b80d:	66 c7 45 fe 28 00    	movw   $0x28,-0x2(%ebp)
}

static __inline void
ltr(uint16 sel)
{
	__asm __volatile("ltr %0" : : "r" (sel));
f010b813:	66 8b 45 fe          	mov    -0x2(%ebp),%ax
f010b817:	0f 00 d8             	ltr    %ax

	// Load the TSS
	ltr(GD_TSS);

	// Load the IDT
	asm volatile("lidt idt_pd");
f010b81a:	0f 01 1d c8 0c 19 f0 	lidtl  0xf0190cc8
}
f010b821:	90                   	nop
f010b822:	c9                   	leave  
f010b823:	c3                   	ret    

f010b824 <print_trapframe>:

void print_trapframe(struct Trapframe *tf)
{
f010b824:	55                   	push   %ebp
f010b825:	89 e5                	mov    %esp,%ebp
f010b827:	53                   	push   %ebx
f010b828:	83 ec 04             	sub    $0x4,%esp
	cprintf("TRAP frame at %p\n", tf);
f010b82b:	83 ec 08             	sub    $0x8,%esp
f010b82e:	ff 75 08             	pushl  0x8(%ebp)
f010b831:	68 7b 66 13 f0       	push   $0xf013667b
f010b836:	e8 f2 53 ff ff       	call   f0100c2d <cprintf>
f010b83b:	83 c4 10             	add    $0x10,%esp
	print_regs(&tf->tf_regs);
f010b83e:	8b 45 08             	mov    0x8(%ebp),%eax
f010b841:	83 ec 0c             	sub    $0xc,%esp
f010b844:	50                   	push   %eax
f010b845:	e8 fd 00 00 00       	call   f010b947 <print_regs>
f010b84a:	83 c4 10             	add    $0x10,%esp
	cprintf("  es   0x----%04x\n", tf->tf_es);
f010b84d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b850:	8b 40 20             	mov    0x20(%eax),%eax
f010b853:	0f b7 c0             	movzwl %ax,%eax
f010b856:	83 ec 08             	sub    $0x8,%esp
f010b859:	50                   	push   %eax
f010b85a:	68 8d 66 13 f0       	push   $0xf013668d
f010b85f:	e8 c9 53 ff ff       	call   f0100c2d <cprintf>
f010b864:	83 c4 10             	add    $0x10,%esp
	cprintf("  ds   0x----%04x\n", tf->tf_ds);
f010b867:	8b 45 08             	mov    0x8(%ebp),%eax
f010b86a:	8b 40 24             	mov    0x24(%eax),%eax
f010b86d:	0f b7 c0             	movzwl %ax,%eax
f010b870:	83 ec 08             	sub    $0x8,%esp
f010b873:	50                   	push   %eax
f010b874:	68 a0 66 13 f0       	push   $0xf01366a0
f010b879:	e8 af 53 ff ff       	call   f0100c2d <cprintf>
f010b87e:	83 c4 10             	add    $0x10,%esp
	cprintf("  trap 0x%08x %s - %d\n", tf->tf_trapno, trapname(tf->tf_trapno), tf->tf_trapno);
f010b881:	8b 45 08             	mov    0x8(%ebp),%eax
f010b884:	8b 58 28             	mov    0x28(%eax),%ebx
f010b887:	8b 45 08             	mov    0x8(%ebp),%eax
f010b88a:	8b 40 28             	mov    0x28(%eax),%eax
f010b88d:	83 ec 0c             	sub    $0xc,%esp
f010b890:	50                   	push   %eax
f010b891:	e8 d0 ee ff ff       	call   f010a766 <trapname>
f010b896:	83 c4 10             	add    $0x10,%esp
f010b899:	89 c2                	mov    %eax,%edx
f010b89b:	8b 45 08             	mov    0x8(%ebp),%eax
f010b89e:	8b 40 28             	mov    0x28(%eax),%eax
f010b8a1:	53                   	push   %ebx
f010b8a2:	52                   	push   %edx
f010b8a3:	50                   	push   %eax
f010b8a4:	68 b3 66 13 f0       	push   $0xf01366b3
f010b8a9:	e8 7f 53 ff ff       	call   f0100c2d <cprintf>
f010b8ae:	83 c4 10             	add    $0x10,%esp
	cprintf("  err  0x%08x\n", tf->tf_err);
f010b8b1:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8b4:	8b 40 2c             	mov    0x2c(%eax),%eax
f010b8b7:	83 ec 08             	sub    $0x8,%esp
f010b8ba:	50                   	push   %eax
f010b8bb:	68 ca 66 13 f0       	push   $0xf01366ca
f010b8c0:	e8 68 53 ff ff       	call   f0100c2d <cprintf>
f010b8c5:	83 c4 10             	add    $0x10,%esp
	cprintf("  eip  0x%08x\n", tf->tf_eip);
f010b8c8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8cb:	8b 40 30             	mov    0x30(%eax),%eax
f010b8ce:	83 ec 08             	sub    $0x8,%esp
f010b8d1:	50                   	push   %eax
f010b8d2:	68 d9 66 13 f0       	push   $0xf01366d9
f010b8d7:	e8 51 53 ff ff       	call   f0100c2d <cprintf>
f010b8dc:	83 c4 10             	add    $0x10,%esp
	cprintf("  cs   0x----%04x\n", tf->tf_cs);
f010b8df:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8e2:	8b 40 34             	mov    0x34(%eax),%eax
f010b8e5:	0f b7 c0             	movzwl %ax,%eax
f010b8e8:	83 ec 08             	sub    $0x8,%esp
f010b8eb:	50                   	push   %eax
f010b8ec:	68 e8 66 13 f0       	push   $0xf01366e8
f010b8f1:	e8 37 53 ff ff       	call   f0100c2d <cprintf>
f010b8f6:	83 c4 10             	add    $0x10,%esp
	cprintf("  flag 0x%08x\n", tf->tf_eflags);
f010b8f9:	8b 45 08             	mov    0x8(%ebp),%eax
f010b8fc:	8b 40 38             	mov    0x38(%eax),%eax
f010b8ff:	83 ec 08             	sub    $0x8,%esp
f010b902:	50                   	push   %eax
f010b903:	68 fb 66 13 f0       	push   $0xf01366fb
f010b908:	e8 20 53 ff ff       	call   f0100c2d <cprintf>
f010b90d:	83 c4 10             	add    $0x10,%esp
	cprintf("  esp  0x%08x\n", tf->tf_esp);
f010b910:	8b 45 08             	mov    0x8(%ebp),%eax
f010b913:	8b 40 3c             	mov    0x3c(%eax),%eax
f010b916:	83 ec 08             	sub    $0x8,%esp
f010b919:	50                   	push   %eax
f010b91a:	68 0a 67 13 f0       	push   $0xf013670a
f010b91f:	e8 09 53 ff ff       	call   f0100c2d <cprintf>
f010b924:	83 c4 10             	add    $0x10,%esp
	cprintf("  ss   0x----%04x\n", tf->tf_ss);
f010b927:	8b 45 08             	mov    0x8(%ebp),%eax
f010b92a:	8b 40 40             	mov    0x40(%eax),%eax
f010b92d:	0f b7 c0             	movzwl %ax,%eax
f010b930:	83 ec 08             	sub    $0x8,%esp
f010b933:	50                   	push   %eax
f010b934:	68 19 67 13 f0       	push   $0xf0136719
f010b939:	e8 ef 52 ff ff       	call   f0100c2d <cprintf>
f010b93e:	83 c4 10             	add    $0x10,%esp
}
f010b941:	90                   	nop
f010b942:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f010b945:	c9                   	leave  
f010b946:	c3                   	ret    

f010b947 <print_regs>:

void print_regs(struct PushRegs *regs)
{
f010b947:	55                   	push   %ebp
f010b948:	89 e5                	mov    %esp,%ebp
f010b94a:	83 ec 08             	sub    $0x8,%esp
	cprintf("  edi  0x%08x\n", regs->reg_edi);
f010b94d:	8b 45 08             	mov    0x8(%ebp),%eax
f010b950:	8b 00                	mov    (%eax),%eax
f010b952:	83 ec 08             	sub    $0x8,%esp
f010b955:	50                   	push   %eax
f010b956:	68 2c 67 13 f0       	push   $0xf013672c
f010b95b:	e8 cd 52 ff ff       	call   f0100c2d <cprintf>
f010b960:	83 c4 10             	add    $0x10,%esp
	cprintf("  esi  0x%08x\n", regs->reg_esi);
f010b963:	8b 45 08             	mov    0x8(%ebp),%eax
f010b966:	8b 40 04             	mov    0x4(%eax),%eax
f010b969:	83 ec 08             	sub    $0x8,%esp
f010b96c:	50                   	push   %eax
f010b96d:	68 3b 67 13 f0       	push   $0xf013673b
f010b972:	e8 b6 52 ff ff       	call   f0100c2d <cprintf>
f010b977:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebp  0x%08x\n", regs->reg_ebp);
f010b97a:	8b 45 08             	mov    0x8(%ebp),%eax
f010b97d:	8b 40 08             	mov    0x8(%eax),%eax
f010b980:	83 ec 08             	sub    $0x8,%esp
f010b983:	50                   	push   %eax
f010b984:	68 4a 67 13 f0       	push   $0xf013674a
f010b989:	e8 9f 52 ff ff       	call   f0100c2d <cprintf>
f010b98e:	83 c4 10             	add    $0x10,%esp
	cprintf("  oesp 0x%08x\n", regs->reg_oesp);
f010b991:	8b 45 08             	mov    0x8(%ebp),%eax
f010b994:	8b 40 0c             	mov    0xc(%eax),%eax
f010b997:	83 ec 08             	sub    $0x8,%esp
f010b99a:	50                   	push   %eax
f010b99b:	68 59 67 13 f0       	push   $0xf0136759
f010b9a0:	e8 88 52 ff ff       	call   f0100c2d <cprintf>
f010b9a5:	83 c4 10             	add    $0x10,%esp
	cprintf("  ebx  0x%08x\n", regs->reg_ebx);
f010b9a8:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9ab:	8b 40 10             	mov    0x10(%eax),%eax
f010b9ae:	83 ec 08             	sub    $0x8,%esp
f010b9b1:	50                   	push   %eax
f010b9b2:	68 68 67 13 f0       	push   $0xf0136768
f010b9b7:	e8 71 52 ff ff       	call   f0100c2d <cprintf>
f010b9bc:	83 c4 10             	add    $0x10,%esp
	cprintf("  edx  0x%08x\n", regs->reg_edx);
f010b9bf:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9c2:	8b 40 14             	mov    0x14(%eax),%eax
f010b9c5:	83 ec 08             	sub    $0x8,%esp
f010b9c8:	50                   	push   %eax
f010b9c9:	68 77 67 13 f0       	push   $0xf0136777
f010b9ce:	e8 5a 52 ff ff       	call   f0100c2d <cprintf>
f010b9d3:	83 c4 10             	add    $0x10,%esp
	cprintf("  ecx  0x%08x\n", regs->reg_ecx);
f010b9d6:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9d9:	8b 40 18             	mov    0x18(%eax),%eax
f010b9dc:	83 ec 08             	sub    $0x8,%esp
f010b9df:	50                   	push   %eax
f010b9e0:	68 86 67 13 f0       	push   $0xf0136786
f010b9e5:	e8 43 52 ff ff       	call   f0100c2d <cprintf>
f010b9ea:	83 c4 10             	add    $0x10,%esp
	cprintf("  eax  0x%08x\n", regs->reg_eax);
f010b9ed:	8b 45 08             	mov    0x8(%ebp),%eax
f010b9f0:	8b 40 1c             	mov    0x1c(%eax),%eax
f010b9f3:	83 ec 08             	sub    $0x8,%esp
f010b9f6:	50                   	push   %eax
f010b9f7:	68 95 67 13 f0       	push   $0xf0136795
f010b9fc:	e8 2c 52 ff ff       	call   f0100c2d <cprintf>
f010ba01:	83 c4 10             	add    $0x10,%esp
}
f010ba04:	90                   	nop
f010ba05:	c9                   	leave  
f010ba06:	c3                   	ret    

f010ba07 <trap_dispatch>:

static void trap_dispatch(struct Trapframe *tf)
{
f010ba07:	55                   	push   %ebp
f010ba08:	89 e5                	mov    %esp,%ebp
f010ba0a:	57                   	push   %edi
f010ba0b:	56                   	push   %esi
f010ba0c:	53                   	push   %ebx
f010ba0d:	83 ec 1c             	sub    $0x1c,%esp
	// Handle processor exceptions.
	// LAB 3: Your code here.

	if(tf->tf_trapno == T_PGFLT)
f010ba10:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba13:	8b 40 28             	mov    0x28(%eax),%eax
f010ba16:	83 f8 0e             	cmp    $0xe,%eax
f010ba19:	75 29                	jne    f010ba44 <trap_dispatch+0x3d>
	{
		//print_trapframe(tf);
		if(isPageReplacmentAlgorithmLRU(PG_REP_LRU_TIME_APPROX))
f010ba1b:	83 ec 0c             	sub    $0xc,%esp
f010ba1e:	6a 01                	push   $0x1
f010ba20:	e8 5a 18 00 00       	call   f010d27f <isPageReplacmentAlgorithmLRU>
f010ba25:	83 c4 10             	add    $0x10,%esp
f010ba28:	85 c0                	test   %eax,%eax
f010ba2a:	74 05                	je     f010ba31 <trap_dispatch+0x2a>
		{
			//cprintf("===========Table WS before updating time stamp========\n");
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
f010ba2c:	e8 8b 9e ff ff       	call   f01058bc <update_WS_time_stamps>
		}
		fault_handler(tf);
f010ba31:	83 ec 0c             	sub    $0xc,%esp
f010ba34:	ff 75 08             	pushl  0x8(%ebp)
f010ba37:	e8 3b 02 00 00       	call   f010bc77 <fault_handler>
f010ba3c:	83 c4 10             	add    $0x10,%esp
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010ba3f:	e9 a5 00 00 00       	jmp    f010bae9 <trap_dispatch+0xe2>
			//env_table_ws_print(curenv) ;
			update_WS_time_stamps();
		}
		fault_handler(tf);
	}
	else if (tf->tf_trapno == T_SYSCALL)
f010ba44:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba47:	8b 40 28             	mov    0x28(%eax),%eax
f010ba4a:	83 f8 30             	cmp    $0x30,%eax
f010ba4d:	75 42                	jne    f010ba91 <trap_dispatch+0x8a>
	{
		uint32 ret = syscall(tf->tf_regs.reg_eax
f010ba4f:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba52:	8b 78 04             	mov    0x4(%eax),%edi
f010ba55:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba58:	8b 30                	mov    (%eax),%esi
f010ba5a:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba5d:	8b 58 10             	mov    0x10(%eax),%ebx
f010ba60:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba63:	8b 48 18             	mov    0x18(%eax),%ecx
f010ba66:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba69:	8b 50 14             	mov    0x14(%eax),%edx
f010ba6c:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba6f:	8b 40 1c             	mov    0x1c(%eax),%eax
f010ba72:	83 ec 08             	sub    $0x8,%esp
f010ba75:	57                   	push   %edi
f010ba76:	56                   	push   %esi
f010ba77:	53                   	push   %ebx
f010ba78:	51                   	push   %ecx
f010ba79:	52                   	push   %edx
f010ba7a:	50                   	push   %eax
f010ba7b:	e8 4a 0f 00 00       	call   f010c9ca <syscall>
f010ba80:	83 c4 20             	add    $0x20,%esp
f010ba83:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				,tf->tf_regs.reg_edx
				,tf->tf_regs.reg_ecx
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
f010ba86:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba89:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ba8c:	89 50 1c             	mov    %edx,0x1c(%eax)
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010ba8f:	eb 58                	jmp    f010bae9 <trap_dispatch+0xe2>
				,tf->tf_regs.reg_ebx
				,tf->tf_regs.reg_edi
				,tf->tf_regs.reg_esi);
		tf->tf_regs.reg_eax = ret;
	}
	else if(tf->tf_trapno == T_DBLFLT)
f010ba91:	8b 45 08             	mov    0x8(%ebp),%eax
f010ba94:	8b 40 28             	mov    0x28(%eax),%eax
f010ba97:	83 f8 08             	cmp    $0x8,%eax
f010ba9a:	75 17                	jne    f010bab3 <trap_dispatch+0xac>
	{
		panic("double fault!!");
f010ba9c:	83 ec 04             	sub    $0x4,%esp
f010ba9f:	68 a4 67 13 f0       	push   $0xf01367a4
f010baa4:	68 e7 00 00 00       	push   $0xe7
f010baa9:	68 b3 67 13 f0       	push   $0xf01367b3
f010baae:	e8 f3 46 ff ff       	call   f01001a6 <_panic>
	}
	else if (tf->tf_trapno == IRQ0_Clock)
f010bab3:	8b 45 08             	mov    0x8(%ebp),%eax
f010bab6:	8b 40 28             	mov    0x28(%eax),%eax
f010bab9:	83 f8 20             	cmp    $0x20,%eax
f010babc:	75 07                	jne    f010bac5 <trap_dispatch+0xbe>
	{
		clock_interrupt_handler() ;
f010babe:	e8 d8 9d ff ff       	call   f010589b <clock_interrupt_handler>
		else {
			//env_destroy(curenv);
			return;
		}
	}
	return;
f010bac3:	eb 24                	jmp    f010bae9 <trap_dispatch+0xe2>

	else
	{
		// Unexpected trap: The user process or the kernel has a bug.
		//print_trapframe(tf);
		if (tf->tf_cs == GD_KT)
f010bac5:	8b 45 08             	mov    0x8(%ebp),%eax
f010bac8:	8b 40 34             	mov    0x34(%eax),%eax
f010bacb:	66 83 f8 08          	cmp    $0x8,%ax
f010bacf:	75 17                	jne    f010bae8 <trap_dispatch+0xe1>
		{
			panic("unhandled trap in kernel");
f010bad1:	83 ec 04             	sub    $0x4,%esp
f010bad4:	68 c4 67 13 f0       	push   $0xf01367c4
f010bad9:	68 f4 00 00 00       	push   $0xf4
f010bade:	68 b3 67 13 f0       	push   $0xf01367b3
f010bae3:	e8 be 46 ff ff       	call   f01001a6 <_panic>
		}
		else {
			//env_destroy(curenv);
			return;
f010bae8:	90                   	nop
		}
	}
	return;
}
f010bae9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010baec:	5b                   	pop    %ebx
f010baed:	5e                   	pop    %esi
f010baee:	5f                   	pop    %edi
f010baef:	5d                   	pop    %ebp
f010baf0:	c3                   	ret    

f010baf1 <trap>:

void trap(struct Trapframe *tf)
{
f010baf1:	55                   	push   %ebp
f010baf2:	89 e5                	mov    %esp,%ebp
f010baf4:	57                   	push   %edi
f010baf5:	56                   	push   %esi
f010baf6:	53                   	push   %ebx
f010baf7:	83 ec 1c             	sub    $0x1c,%esp
	kclock_stop();
f010bafa:	e8 b7 85 ff ff       	call   f01040b6 <kclock_stop>

	int userTrap = 0;
f010baff:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010bb06:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb09:	8b 40 34             	mov    0x34(%eax),%eax
f010bb0c:	0f b7 c0             	movzwl %ax,%eax
f010bb0f:	83 e0 03             	and    $0x3,%eax
f010bb12:	83 f8 03             	cmp    $0x3,%eax
f010bb15:	75 49                	jne    f010bb60 <trap+0x6f>
		assert(curenv);
f010bb17:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bb1c:	85 c0                	test   %eax,%eax
f010bb1e:	75 19                	jne    f010bb39 <trap+0x48>
f010bb20:	68 dd 67 13 f0       	push   $0xf01367dd
f010bb25:	68 e4 67 13 f0       	push   $0xf01367e4
f010bb2a:	68 04 01 00 00       	push   $0x104
f010bb2f:	68 b3 67 13 f0       	push   $0xf01367b3
f010bb34:	e8 6d 46 ff ff       	call   f01001a6 <_panic>
		curenv->env_tf = *tf;
f010bb39:	8b 15 34 87 65 f0    	mov    0xf0658734,%edx
f010bb3f:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb42:	89 c3                	mov    %eax,%ebx
f010bb44:	b8 11 00 00 00       	mov    $0x11,%eax
f010bb49:	89 d7                	mov    %edx,%edi
f010bb4b:	89 de                	mov    %ebx,%esi
f010bb4d:	89 c1                	mov    %eax,%ecx
f010bb4f:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
		tf = &(curenv->env_tf);
f010bb51:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bb56:	89 45 08             	mov    %eax,0x8(%ebp)
		userTrap = 1;
f010bb59:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
	}
	if(tf->tf_trapno == IRQ0_Clock)
f010bb60:	8b 45 08             	mov    0x8(%ebp),%eax
f010bb63:	8b 40 28             	mov    0x28(%eax),%eax
f010bb66:	83 f8 20             	cmp    $0x20,%eax
f010bb69:	75 40                	jne    f010bbab <trap+0xba>
	{
		//		uint16 cnt0 = kclock_read_cnt0() ;
		//		cprintf("CLOCK INTERRUPT: Counter0 Value = %d\n", cnt0 );

		if (userTrap)
f010bb6b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010bb6f:	0f 84 a6 00 00 00    	je     f010bc1b <trap+0x12a>
		{
			assert(curenv);
f010bb75:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bb7a:	85 c0                	test   %eax,%eax
f010bb7c:	75 19                	jne    f010bb97 <trap+0xa6>
f010bb7e:	68 dd 67 13 f0       	push   $0xf01367dd
f010bb83:	68 e4 67 13 f0       	push   $0xf01367e4
f010bb88:	68 10 01 00 00       	push   $0x110
f010bb8d:	68 b3 67 13 f0       	push   $0xf01367b3
f010bb92:	e8 0f 46 ff ff       	call   f01001a6 <_panic>
			curenv->nClocks++ ;
f010bb97:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bb9c:	8b 90 60 da 01 00    	mov    0x1da60(%eax),%edx
f010bba2:	42                   	inc    %edx
f010bba3:	89 90 60 da 01 00    	mov    %edx,0x1da60(%eax)
f010bba9:	eb 70                	jmp    f010bc1b <trap+0x12a>
		}
	}
	else if (tf->tf_trapno == T_PGFLT){
f010bbab:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbae:	8b 40 28             	mov    0x28(%eax),%eax
f010bbb1:	83 f8 0e             	cmp    $0xe,%eax
f010bbb4:	75 65                	jne    f010bc1b <trap+0x12a>
		//2016: Bypass the faulted instruction
		if (bypassInstrLength != 0){
f010bbb6:	a0 c8 8f 65 f0       	mov    0xf0658fc8,%al
f010bbbb:	84 c0                	test   %al,%al
f010bbbd:	74 5c                	je     f010bc1b <trap+0x12a>
			if (userTrap){
f010bbbf:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010bbc3:	74 2c                	je     f010bbf1 <trap+0x100>
				curenv->env_tf.tf_eip = (uint32*)((uint32)(curenv->env_tf.tf_eip) + bypassInstrLength);
f010bbc5:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bbca:	8b 15 34 87 65 f0    	mov    0xf0658734,%edx
f010bbd0:	8b 52 30             	mov    0x30(%edx),%edx
f010bbd3:	89 d1                	mov    %edx,%ecx
f010bbd5:	8a 15 c8 8f 65 f0    	mov    0xf0658fc8,%dl
f010bbdb:	0f b6 d2             	movzbl %dl,%edx
f010bbde:	01 ca                	add    %ecx,%edx
f010bbe0:	89 50 30             	mov    %edx,0x30(%eax)
				env_run(curenv);
f010bbe3:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bbe8:	83 ec 0c             	sub    $0xc,%esp
f010bbeb:	50                   	push   %eax
f010bbec:	e8 5e d4 ff ff       	call   f010904f <env_run>
			}
			else{
				tf->tf_eip = (uint32*)((uint32)(tf->tf_eip) + bypassInstrLength);
f010bbf1:	8b 45 08             	mov    0x8(%ebp),%eax
f010bbf4:	8b 40 30             	mov    0x30(%eax),%eax
f010bbf7:	89 c2                	mov    %eax,%edx
f010bbf9:	a0 c8 8f 65 f0       	mov    0xf0658fc8,%al
f010bbfe:	0f b6 c0             	movzbl %al,%eax
f010bc01:	01 d0                	add    %edx,%eax
f010bc03:	89 c2                	mov    %eax,%edx
f010bc05:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc08:	89 50 30             	mov    %edx,0x30(%eax)
				kclock_resume();
f010bc0b:	e8 d1 84 ff ff       	call   f01040e1 <kclock_resume>
				env_pop_tf(tf);
f010bc10:	83 ec 0c             	sub    $0xc,%esp
f010bc13:	ff 75 08             	pushl  0x8(%ebp)
f010bc16:	e8 99 d5 ff ff       	call   f01091b4 <env_pop_tf>
			}
		}
	}
	trap_dispatch(tf);
f010bc1b:	83 ec 0c             	sub    $0xc,%esp
f010bc1e:	ff 75 08             	pushl  0x8(%ebp)
f010bc21:	e8 e1 fd ff ff       	call   f010ba07 <trap_dispatch>
f010bc26:	83 c4 10             	add    $0x10,%esp
	if (userTrap)
f010bc29:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010bc2d:	74 3d                	je     f010bc6c <trap+0x17b>
	{
		assert(curenv && curenv->env_status == ENV_RUNNABLE);
f010bc2f:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bc34:	85 c0                	test   %eax,%eax
f010bc36:	74 0d                	je     f010bc45 <trap+0x154>
f010bc38:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bc3d:	8b 40 54             	mov    0x54(%eax),%eax
f010bc40:	83 f8 02             	cmp    $0x2,%eax
f010bc43:	74 19                	je     f010bc5e <trap+0x16d>
f010bc45:	68 fc 67 13 f0       	push   $0xf01367fc
f010bc4a:	68 e4 67 13 f0       	push   $0xf01367e4
f010bc4f:	68 25 01 00 00       	push   $0x125
f010bc54:	68 b3 67 13 f0       	push   $0xf01367b3
f010bc59:	e8 48 45 ff ff       	call   f01001a6 <_panic>
		env_run(curenv);
f010bc5e:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bc63:	83 ec 0c             	sub    $0xc,%esp
f010bc66:	50                   	push   %eax
f010bc67:	e8 e3 d3 ff ff       	call   f010904f <env_run>
	/* 2019
	 * If trap from kernel, then return to the called kernel function using the passed param "tf" not the user one that's stored in curenv
	 */
	else
	{
		env_pop_tf((tf));
f010bc6c:	83 ec 0c             	sub    $0xc,%esp
f010bc6f:	ff 75 08             	pushl  0x8(%ebp)
f010bc72:	e8 3d d5 ff ff       	call   f01091b4 <env_pop_tf>

f010bc77 <fault_handler>:
	}
}


void fault_handler(struct Trapframe *tf)
{
f010bc77:	55                   	push   %ebp
f010bc78:	89 e5                	mov    %esp,%ebp
f010bc7a:	83 ec 28             	sub    $0x28,%esp
	int userTrap = 0;
f010bc7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	if ((tf->tf_cs & 3) == 3) {
f010bc84:	8b 45 08             	mov    0x8(%ebp),%eax
f010bc87:	8b 40 34             	mov    0x34(%eax),%eax
f010bc8a:	0f b7 c0             	movzwl %ax,%eax
f010bc8d:	83 e0 03             	and    $0x3,%eax
f010bc90:	83 f8 03             	cmp    $0x3,%eax
f010bc93:	75 07                	jne    f010bc9c <fault_handler+0x25>
		userTrap = 1;
f010bc95:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010bc9c:	0f 20 d0             	mov    %cr2,%eax
f010bc9f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
	return val;
f010bca2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
	}
	//print_trapframe(tf);
	uint32 fault_va;

	// Read processor's CR2 register to find the faulting address
	fault_va = rcr2();
f010bca5:	89 45 ec             	mov    %eax,-0x14(%ebp)

	//2017: Check stack overflow for Kernel
	if (!userTrap)
f010bca8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010bcac:	75 29                	jne    f010bcd7 <fault_handler+0x60>
	{
		if (fault_va < KERNEL_STACK_TOP - KERNEL_STACK_SIZE && fault_va >= USER_LIMIT)
f010bcae:	81 7d ec ff 7f bf ef 	cmpl   $0xefbf7fff,-0x14(%ebp)
f010bcb5:	77 40                	ja     f010bcf7 <fault_handler+0x80>
f010bcb7:	81 7d ec ff ff 7f ef 	cmpl   $0xef7fffff,-0x14(%ebp)
f010bcbe:	76 37                	jbe    f010bcf7 <fault_handler+0x80>
			panic("Kernel: stack overflow exception!");
f010bcc0:	83 ec 04             	sub    $0x4,%esp
f010bcc3:	68 2c 68 13 f0       	push   $0xf013682c
f010bcc8:	68 42 01 00 00       	push   $0x142
f010bccd:	68 b3 67 13 f0       	push   $0xf01367b3
f010bcd2:	e8 cf 44 ff ff       	call   f01001a6 <_panic>
	}
	//2017: Check stack underflow for User
	else
	{
		if (fault_va >= USTACKTOP)
f010bcd7:	81 7d ec ff df bf ee 	cmpl   $0xeebfdfff,-0x14(%ebp)
f010bcde:	76 17                	jbe    f010bcf7 <fault_handler+0x80>
			panic("User: stack underflow exception!");
f010bce0:	83 ec 04             	sub    $0x4,%esp
f010bce3:	68 50 68 13 f0       	push   $0xf0136850
f010bce8:	68 48 01 00 00       	push   $0x148
f010bced:	68 b3 67 13 f0       	push   $0xf01367b3
f010bcf2:	e8 af 44 ff ff       	call   f01001a6 <_panic>
	}

	//get a pointer to the environment that caused the fault at runtime
	struct Env* faulted_env = curenv;
f010bcf7:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bcfc:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//check the faulted address, is it a table or not ?
	//If the directory entry of the faulted address is NOT PRESENT then
	if ( (curenv->env_page_directory[PDX(fault_va)] & PERM_PRESENT) != PERM_PRESENT)
f010bcff:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bd04:	8b 40 5c             	mov    0x5c(%eax),%eax
f010bd07:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010bd0a:	c1 ea 16             	shr    $0x16,%edx
f010bd0d:	c1 e2 02             	shl    $0x2,%edx
f010bd10:	01 d0                	add    %edx,%eax
f010bd12:	8b 00                	mov    (%eax),%eax
f010bd14:	83 e0 01             	and    $0x1,%eax
f010bd17:	85 c0                	test   %eax,%eax
f010bd19:	75 28                	jne    f010bd43 <fault_handler+0xcc>
	{
		// we have a table fault =============================================================
		//cprintf("[%s] user TABLE fault va %08x\n", curenv->prog_name, fault_va);
		faulted_env->tableFaultsCounter ++ ;
f010bd1b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bd1e:	8b 80 f4 d9 01 00    	mov    0x1d9f4(%eax),%eax
f010bd24:	8d 50 01             	lea    0x1(%eax),%edx
f010bd27:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bd2a:	89 90 f4 d9 01 00    	mov    %edx,0x1d9f4(%eax)

		table_fault_handler(faulted_env, fault_va);
f010bd30:	83 ec 08             	sub    $0x8,%esp
f010bd33:	ff 75 ec             	pushl  -0x14(%ebp)
f010bd36:	ff 75 e8             	pushl  -0x18(%ebp)
f010bd39:	e8 26 16 00 00       	call   f010d364 <table_fault_handler>
f010bd3e:	83 c4 10             	add    $0x10,%esp
f010bd41:	eb 42                	jmp    f010bd85 <fault_handler+0x10e>
	}
	else
	{
		// we have normal page fault =============================================================
		faulted_env->pageFaultsCounter ++ ;
f010bd43:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bd46:	8b 80 f0 d9 01 00    	mov    0x1d9f0(%eax),%eax
f010bd4c:	8d 50 01             	lea    0x1(%eax),%edx
f010bd4f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bd52:	89 90 f0 d9 01 00    	mov    %edx,0x1d9f0(%eax)

		//cprintf("[%08s] user PAGE fault va %08x\n", curenv->prog_name, fault_va);
		//cprintf("\nPage working set BEFORE fault handler...\n");
		//env_page_ws_print(curenv);

		if(isBufferingEnabled())
f010bd58:	e8 e5 15 00 00       	call   f010d342 <isBufferingEnabled>
f010bd5d:	84 c0                	test   %al,%al
f010bd5f:	74 13                	je     f010bd74 <fault_handler+0xfd>
		{
			__page_fault_handler_with_buffering(faulted_env, fault_va);
f010bd61:	83 ec 08             	sub    $0x8,%esp
f010bd64:	ff 75 ec             	pushl  -0x14(%ebp)
f010bd67:	ff 75 e8             	pushl  -0x18(%ebp)
f010bd6a:	e8 31 16 00 00       	call   f010d3a0 <__page_fault_handler_with_buffering>
f010bd6f:	83 c4 10             	add    $0x10,%esp
f010bd72:	eb 11                	jmp    f010bd85 <fault_handler+0x10e>
		}
		else
		{
			//page_fault_handler(faulted_env, fault_va);
			page_fault_handler(faulted_env, fault_va);
f010bd74:	83 ec 08             	sub    $0x8,%esp
f010bd77:	ff 75 ec             	pushl  -0x14(%ebp)
f010bd7a:	ff 75 e8             	pushl  -0x18(%ebp)
f010bd7d:	e8 04 16 00 00       	call   f010d386 <page_fault_handler>
f010bd82:	83 c4 10             	add    $0x10,%esp

static __inline void
tlbflush(void)
{
	uint32 cr3;
	__asm __volatile("movl %%cr3,%0" : "=r" (cr3));
f010bd85:	0f 20 d8             	mov    %cr3,%eax
f010bd88:	89 45 f0             	mov    %eax,-0x10(%ebp)
	__asm __volatile("movl %0,%%cr3" : : "r" (cr3));
f010bd8b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bd8e:	0f 22 d8             	mov    %eax,%cr3
	/*************************************************************/
	//Refresh the TLB cache
	tlbflush();
	/*************************************************************/

}
f010bd91:	90                   	nop
f010bd92:	c9                   	leave  
f010bd93:	c3                   	ret    

f010bd94 <PAGE_FAULT>:

/*
 * Lab 3: Your code here for generating entry points for the different traps.
 */

TRAPHANDLER(PAGE_FAULT, T_PGFLT)
f010bd94:	6a 0e                	push   $0xe
f010bd96:	e9 ed 00 00 00       	jmp    f010be88 <_alltraps>
f010bd9b:	90                   	nop

f010bd9c <SYSCALL_HANDLER>:

TRAPHANDLER_NOEC(SYSCALL_HANDLER, T_SYSCALL)
f010bd9c:	6a 00                	push   $0x0
f010bd9e:	6a 30                	push   $0x30
f010bda0:	e9 e3 00 00 00       	jmp    f010be88 <_alltraps>
f010bda5:	90                   	nop

f010bda6 <DBL_FAULT>:

// FOS 2010
//TRAPHANDLER(GP_FAULT, T_GPFLT)
TRAPHANDLER(DBL_FAULT, T_DBLFLT)
f010bda6:	6a 08                	push   $0x8
f010bda8:	e9 db 00 00 00       	jmp    f010be88 <_alltraps>
f010bdad:	90                   	nop

f010bdae <ALL_FAULTS0>:

TRAPHANDLER_NOEC(ALL_FAULTS0, T_DIVIDE)//     0		// divide error
f010bdae:	6a 00                	push   $0x0
f010bdb0:	6a 00                	push   $0x0
f010bdb2:	e9 d1 00 00 00       	jmp    f010be88 <_alltraps>
f010bdb7:	90                   	nop

f010bdb8 <ALL_FAULTS1>:
TRAPHANDLER_NOEC(ALL_FAULTS1, T_DEBUG   )//   1		// debug exception
f010bdb8:	6a 00                	push   $0x0
f010bdba:	6a 01                	push   $0x1
f010bdbc:	e9 c7 00 00 00       	jmp    f010be88 <_alltraps>
f010bdc1:	90                   	nop

f010bdc2 <ALL_FAULTS2>:
TRAPHANDLER_NOEC(ALL_FAULTS2,  T_NMI       )// 2		// non-maskable interrupt
f010bdc2:	6a 00                	push   $0x0
f010bdc4:	6a 02                	push   $0x2
f010bdc6:	e9 bd 00 00 00       	jmp    f010be88 <_alltraps>
f010bdcb:	90                   	nop

f010bdcc <ALL_FAULTS3>:
TRAPHANDLER_NOEC(ALL_FAULTS3,  T_BRKPT      )//3		// breakpoint
f010bdcc:	6a 00                	push   $0x0
f010bdce:	6a 03                	push   $0x3
f010bdd0:	e9 b3 00 00 00       	jmp    f010be88 <_alltraps>
f010bdd5:	90                   	nop

f010bdd6 <ALL_FAULTS4>:
TRAPHANDLER_NOEC(ALL_FAULTS4,  T_OFLOW      )//4		// overflow
f010bdd6:	6a 00                	push   $0x0
f010bdd8:	6a 04                	push   $0x4
f010bdda:	e9 a9 00 00 00       	jmp    f010be88 <_alltraps>
f010bddf:	90                   	nop

f010bde0 <ALL_FAULTS5>:
TRAPHANDLER_NOEC(ALL_FAULTS5,  T_BOUND      )//5		// bounds check
f010bde0:	6a 00                	push   $0x0
f010bde2:	6a 05                	push   $0x5
f010bde4:	e9 9f 00 00 00       	jmp    f010be88 <_alltraps>
f010bde9:	90                   	nop

f010bdea <ALL_FAULTS6>:
TRAPHANDLER_NOEC(ALL_FAULTS6,  T_ILLOP      )//6		// illegal opcode
f010bdea:	6a 00                	push   $0x0
f010bdec:	6a 06                	push   $0x6
f010bdee:	e9 95 00 00 00       	jmp    f010be88 <_alltraps>
f010bdf3:	90                   	nop

f010bdf4 <ALL_FAULTS7>:
TRAPHANDLER_NOEC(ALL_FAULTS7,  T_DEVICE     )//7		// device not available
f010bdf4:	6a 00                	push   $0x0
f010bdf6:	6a 07                	push   $0x7
f010bdf8:	e9 8b 00 00 00       	jmp    f010be88 <_alltraps>
f010bdfd:	90                   	nop

f010bdfe <ALL_FAULTS10>:
//TRAPHANDLER(ALL_FAULTS,  T_DBLFLT     8		// double fault
//TRAPHANDLER_NOEC(ALL_FAULTS,  9   )//9	// reserved (not generated by recent processors)
TRAPHANDLER(ALL_FAULTS10,  T_TSS       )//10		// invalid task switch segment
f010bdfe:	6a 0a                	push   $0xa
f010be00:	e9 83 00 00 00       	jmp    f010be88 <_alltraps>
f010be05:	90                   	nop

f010be06 <ALL_FAULTS11>:
TRAPHANDLER(ALL_FAULTS11,  T_SEGNP     )//11		// segment not present
f010be06:	6a 0b                	push   $0xb
f010be08:	eb 7e                	jmp    f010be88 <_alltraps>

f010be0a <ALL_FAULTS12>:
TRAPHANDLER(ALL_FAULTS12,  T_STACK     )//12		// stack exception
f010be0a:	6a 0c                	push   $0xc
f010be0c:	eb 7a                	jmp    f010be88 <_alltraps>

f010be0e <ALL_FAULTS13>:
TRAPHANDLER(ALL_FAULTS13,  T_GPFLT     )//13		// General protection fault
f010be0e:	6a 0d                	push   $0xd
f010be10:	eb 76                	jmp    f010be88 <_alltraps>

f010be12 <ALL_FAULTS16>:
//TRAPHANDLER(ALL_FAULTS,  T_PGFLT     14		// page fault
//TRAPHANDLER(ALL_FAULTS,  15    )	//15 	// reserved
TRAPHANDLER_NOEC(ALL_FAULTS16,  T_FPERR     )//16		// floating point error
f010be12:	6a 00                	push   $0x0
f010be14:	6a 10                	push   $0x10
f010be16:	eb 70                	jmp    f010be88 <_alltraps>

f010be18 <ALL_FAULTS17>:
TRAPHANDLER(ALL_FAULTS17,  T_ALIGN     )//17		// Alignment check
f010be18:	6a 11                	push   $0x11
f010be1a:	eb 6c                	jmp    f010be88 <_alltraps>

f010be1c <ALL_FAULTS18>:
TRAPHANDLER_NOEC(ALL_FAULTS18,  T_MCHK      )//18		// machine check
f010be1c:	6a 00                	push   $0x0
f010be1e:	6a 12                	push   $0x12
f010be20:	eb 66                	jmp    f010be88 <_alltraps>

f010be22 <ALL_FAULTS19>:
TRAPHANDLER_NOEC(ALL_FAULTS19,  19      )//19		// the last one
f010be22:	6a 00                	push   $0x0
f010be24:	6a 13                	push   $0x13
f010be26:	eb 60                	jmp    f010be88 <_alltraps>

f010be28 <ALL_FAULTS32>:

TRAPHANDLER_NOEC(ALL_FAULTS32,		IRQ0_Clock      )//32 the first IRQ
f010be28:	6a 00                	push   $0x0
f010be2a:	6a 20                	push   $0x20
f010be2c:	eb 5a                	jmp    f010be88 <_alltraps>

f010be2e <ALL_FAULTS33>:
TRAPHANDLER_NOEC(ALL_FAULTS33,		33		)//33
f010be2e:	6a 00                	push   $0x0
f010be30:	6a 21                	push   $0x21
f010be32:	eb 54                	jmp    f010be88 <_alltraps>

f010be34 <ALL_FAULTS34>:
TRAPHANDLER_NOEC(ALL_FAULTS34,      34		)//34
f010be34:	6a 00                	push   $0x0
f010be36:	6a 22                	push   $0x22
f010be38:	eb 4e                	jmp    f010be88 <_alltraps>

f010be3a <ALL_FAULTS35>:
TRAPHANDLER_NOEC(ALL_FAULTS35,		35		)//35
f010be3a:	6a 00                	push   $0x0
f010be3c:	6a 23                	push   $0x23
f010be3e:	eb 48                	jmp    f010be88 <_alltraps>

f010be40 <ALL_FAULTS36>:
TRAPHANDLER_NOEC(ALL_FAULTS36,      36      )//36
f010be40:	6a 00                	push   $0x0
f010be42:	6a 24                	push   $0x24
f010be44:	eb 42                	jmp    f010be88 <_alltraps>

f010be46 <ALL_FAULTS37>:
TRAPHANDLER_NOEC(ALL_FAULTS37,      37      )//37
f010be46:	6a 00                	push   $0x0
f010be48:	6a 25                	push   $0x25
f010be4a:	eb 3c                	jmp    f010be88 <_alltraps>

f010be4c <ALL_FAULTS38>:
TRAPHANDLER_NOEC(ALL_FAULTS38,      38		)//38
f010be4c:	6a 00                	push   $0x0
f010be4e:	6a 26                	push   $0x26
f010be50:	eb 36                	jmp    f010be88 <_alltraps>

f010be52 <ALL_FAULTS39>:
TRAPHANDLER_NOEC(ALL_FAULTS39,      39		)//39
f010be52:	6a 00                	push   $0x0
f010be54:	6a 27                	push   $0x27
f010be56:	eb 30                	jmp    f010be88 <_alltraps>

f010be58 <ALL_FAULTS40>:
TRAPHANDLER_NOEC(ALL_FAULTS40,      40		)//40
f010be58:	6a 00                	push   $0x0
f010be5a:	6a 28                	push   $0x28
f010be5c:	eb 2a                	jmp    f010be88 <_alltraps>

f010be5e <ALL_FAULTS41>:
TRAPHANDLER_NOEC(ALL_FAULTS41,      41		)//41
f010be5e:	6a 00                	push   $0x0
f010be60:	6a 29                	push   $0x29
f010be62:	eb 24                	jmp    f010be88 <_alltraps>

f010be64 <ALL_FAULTS42>:
TRAPHANDLER_NOEC(ALL_FAULTS42,      42		)//42
f010be64:	6a 00                	push   $0x0
f010be66:	6a 2a                	push   $0x2a
f010be68:	eb 1e                	jmp    f010be88 <_alltraps>

f010be6a <ALL_FAULTS43>:
TRAPHANDLER_NOEC(ALL_FAULTS43,      43		)//43
f010be6a:	6a 00                	push   $0x0
f010be6c:	6a 2b                	push   $0x2b
f010be6e:	eb 18                	jmp    f010be88 <_alltraps>

f010be70 <ALL_FAULTS44>:
TRAPHANDLER_NOEC(ALL_FAULTS44,      44		)//44
f010be70:	6a 00                	push   $0x0
f010be72:	6a 2c                	push   $0x2c
f010be74:	eb 12                	jmp    f010be88 <_alltraps>

f010be76 <ALL_FAULTS45>:
TRAPHANDLER_NOEC(ALL_FAULTS45,      45		)//45
f010be76:	6a 00                	push   $0x0
f010be78:	6a 2d                	push   $0x2d
f010be7a:	eb 0c                	jmp    f010be88 <_alltraps>

f010be7c <ALL_FAULTS46>:
TRAPHANDLER_NOEC(ALL_FAULTS46,      46		)//46
f010be7c:	6a 00                	push   $0x0
f010be7e:	6a 2e                	push   $0x2e
f010be80:	eb 06                	jmp    f010be88 <_alltraps>

f010be82 <ALL_FAULTS47>:
TRAPHANDLER_NOEC(ALL_FAULTS47,      47		)//47 the last IRQ
f010be82:	6a 00                	push   $0x0
f010be84:	6a 2f                	push   $0x2f
f010be86:	eb 00                	jmp    f010be88 <_alltraps>

f010be88 <_alltraps>:
/*
 * Lab 3: Your code here for _alltraps
 */
_alltraps:

push %ds
f010be88:	1e                   	push   %ds
push %es
f010be89:	06                   	push   %es
pushal
f010be8a:	60                   	pusha  

mov $(GD_KD), %ax
f010be8b:	66 b8 10 00          	mov    $0x10,%ax
mov %ax,%ds
f010be8f:	8e d8                	mov    %eax,%ds
mov %ax,%es
f010be91:	8e c0                	mov    %eax,%es

push %esp
f010be93:	54                   	push   %esp

call trap
f010be94:	e8 58 fc ff ff       	call   f010baf1 <trap>

pop %ecx /* poping the pointer to the tf from the stack so that the stack top is at
f010be99:	59                   	pop    %ecx
			# the beginning values of the registers pushed by pusha*/
popal
f010be9a:	61                   	popa   
pop %es
f010be9b:	07                   	pop    %es
pop %ds
f010be9c:	1f                   	pop    %ds

/*skipping the trap_no and the error code so that the stack top is at the old eip value*/
add $(8),%esp
f010be9d:	83 c4 08             	add    $0x8,%esp

iret
f010bea0:	cf                   	iret   

f010bea1 <to_frame_number>:
struct FrameInfo *get_frame_info(uint32 *ptr_page_directory, uint32 virtual_address, uint32 **ptr_page_table);
void decrement_references(struct FrameInfo* ptr_frame_info);
void initialize_frame_info(struct FrameInfo *ptr_frame_info);

static inline uint32 to_frame_number(struct FrameInfo *ptr_frame_info)
{
f010bea1:	55                   	push   %ebp
f010bea2:	89 e5                	mov    %esp,%ebp
	return ptr_frame_info - frames_info;
f010bea4:	8b 45 08             	mov    0x8(%ebp),%eax
f010bea7:	8b 15 b0 84 6e f0    	mov    0xf06e84b0,%edx
f010bead:	29 d0                	sub    %edx,%eax
f010beaf:	c1 f8 03             	sar    $0x3,%eax
f010beb2:	89 c2                	mov    %eax,%edx
f010beb4:	89 d0                	mov    %edx,%eax
f010beb6:	c1 e0 02             	shl    $0x2,%eax
f010beb9:	01 d0                	add    %edx,%eax
f010bebb:	c1 e0 02             	shl    $0x2,%eax
f010bebe:	01 d0                	add    %edx,%eax
f010bec0:	c1 e0 02             	shl    $0x2,%eax
f010bec3:	01 d0                	add    %edx,%eax
f010bec5:	89 c1                	mov    %eax,%ecx
f010bec7:	c1 e1 08             	shl    $0x8,%ecx
f010beca:	01 c8                	add    %ecx,%eax
f010becc:	89 c1                	mov    %eax,%ecx
f010bece:	c1 e1 10             	shl    $0x10,%ecx
f010bed1:	01 c8                	add    %ecx,%eax
f010bed3:	01 c0                	add    %eax,%eax
f010bed5:	01 d0                	add    %edx,%eax
}
f010bed7:	5d                   	pop    %ebp
f010bed8:	c3                   	ret    

f010bed9 <to_physical_address>:

static inline uint32 to_physical_address(struct FrameInfo *ptr_frame_info)
{
f010bed9:	55                   	push   %ebp
f010beda:	89 e5                	mov    %esp,%ebp
	return to_frame_number(ptr_frame_info) << PGSHIFT;
f010bedc:	ff 75 08             	pushl  0x8(%ebp)
f010bedf:	e8 bd ff ff ff       	call   f010bea1 <to_frame_number>
f010bee4:	83 c4 04             	add    $0x4,%esp
f010bee7:	c1 e0 0c             	shl    $0xc,%eax
}
f010beea:	c9                   	leave  
f010beeb:	c3                   	ret    

f010beec <sys_cputs>:

// Print a string to the system console.
// The string is exactly 'len' characters long.
// Destroys the environment on memory errors.
static void sys_cputs(const char *s, uint32 len, uint8 printProgName)
{
f010beec:	55                   	push   %ebp
f010beed:	89 e5                	mov    %esp,%ebp
f010beef:	83 ec 18             	sub    $0x18,%esp
f010bef2:	8b 45 10             	mov    0x10(%ebp),%eax
f010bef5:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Destroy the environment if not.

	// LAB 3: Your code here.

	// Print the string supplied by the user.
	if (printProgName)
f010bef8:	80 7d f4 00          	cmpb   $0x0,-0xc(%ebp)
f010befc:	74 26                	je     f010bf24 <sys_cputs+0x38>
		cprintf("[%s %d] ",curenv->prog_name, curenv->env_id);
f010befe:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bf03:	8b 40 4c             	mov    0x4c(%eax),%eax
f010bf06:	8b 15 34 87 65 f0    	mov    0xf0658734,%edx
f010bf0c:	81 c2 18 da 01 00    	add    $0x1da18,%edx
f010bf12:	83 ec 04             	sub    $0x4,%esp
f010bf15:	50                   	push   %eax
f010bf16:	52                   	push   %edx
f010bf17:	68 10 6a 13 f0       	push   $0xf0136a10
f010bf1c:	e8 0c 4d ff ff       	call   f0100c2d <cprintf>
f010bf21:	83 c4 10             	add    $0x10,%esp
	cprintf("%.*s",len, s);
f010bf24:	83 ec 04             	sub    $0x4,%esp
f010bf27:	ff 75 08             	pushl  0x8(%ebp)
f010bf2a:	ff 75 0c             	pushl  0xc(%ebp)
f010bf2d:	68 19 6a 13 f0       	push   $0xf0136a19
f010bf32:	e8 f6 4c ff ff       	call   f0100c2d <cprintf>
f010bf37:	83 c4 10             	add    $0x10,%esp
	//cprintf("%.*s", len, s);
}
f010bf3a:	90                   	nop
f010bf3b:	c9                   	leave  
f010bf3c:	c3                   	ret    

f010bf3d <sys_cputc>:


// Print a char to the system console.
static void sys_cputc(const char c)
{
f010bf3d:	55                   	push   %ebp
f010bf3e:	89 e5                	mov    %esp,%ebp
f010bf40:	83 ec 18             	sub    $0x18,%esp
f010bf43:	8b 45 08             	mov    0x8(%ebp),%eax
f010bf46:	88 45 f4             	mov    %al,-0xc(%ebp)
	// Print the char supplied by the user.
	cprintf("%c",c);
f010bf49:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
f010bf4d:	83 ec 08             	sub    $0x8,%esp
f010bf50:	50                   	push   %eax
f010bf51:	68 1e 6a 13 f0       	push   $0xf0136a1e
f010bf56:	e8 d2 4c ff ff       	call   f0100c2d <cprintf>
f010bf5b:	83 c4 10             	add    $0x10,%esp
}
f010bf5e:	90                   	nop
f010bf5f:	c9                   	leave  
f010bf60:	c3                   	ret    

f010bf61 <sys_cgetc>:

// Read a character from the system console.
// Returns the character.
static int
sys_cgetc(void)
{
f010bf61:	55                   	push   %ebp
f010bf62:	89 e5                	mov    %esp,%ebp
f010bf64:	83 ec 18             	sub    $0x18,%esp
	//while ((c = cons_getc()) == 0)
	//2013: instead of busywaiting inside kernel code , we moved the waiting to user code,
	// this allows any other running user programs to run beacause the clock interrupt works in user mode
	// (the kernel system call by default disables the interrupts, so any loops inside the kernel while
	// handling an interrupt will cause the clock interrupt to be disabled)
	c = cons_getc2();
f010bf67:	e8 fb 4a ff ff       	call   f0100a67 <cons_getc2>
f010bf6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	/* do nothing */;

	return c;
f010bf6f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010bf72:	c9                   	leave  
f010bf73:	c3                   	ret    

f010bf74 <__sys_allocate_page>:
//	E_INVAL if va >= UTOP, or va is not page-aligned.
//	E_INVAL if perm is inappropriate (see above).
//	E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_allocate_page(void *va, int perm)
{
f010bf74:	55                   	push   %ebp
f010bf75:	89 e5                	mov    %esp,%ebp
f010bf77:	83 ec 28             	sub    $0x28,%esp
	//   parameters for correctness.
	//   If page_insert() fails, remember to free the page you
	//   allocated!

	int r;
	struct Env *e = curenv;
f010bf7a:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010bf7f:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//if ((r = envid2env(envid, &e, 1)) < 0)
	//return r;

	struct FrameInfo *ptr_frame_info ;
	r = allocate_frame(&ptr_frame_info) ;
f010bf82:	83 ec 0c             	sub    $0xc,%esp
f010bf85:	8d 45 e0             	lea    -0x20(%ebp),%eax
f010bf88:	50                   	push   %eax
f010bf89:	e8 24 a8 ff ff       	call   f01067b2 <allocate_frame>
f010bf8e:	83 c4 10             	add    $0x10,%esp
f010bf91:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010bf94:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010bf98:	75 08                	jne    f010bfa2 <__sys_allocate_page+0x2e>
		return r ;
f010bf9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010bf9d:	e9 d0 00 00 00       	jmp    f010c072 <__sys_allocate_page+0xfe>

	//check virtual address to be paged_aligned and < USER_TOP
	if ((uint32)va >= USER_TOP || (uint32)va % PAGE_SIZE != 0)
f010bfa2:	8b 45 08             	mov    0x8(%ebp),%eax
f010bfa5:	3d ff ff bf ee       	cmp    $0xeebfffff,%eax
f010bfaa:	77 0c                	ja     f010bfb8 <__sys_allocate_page+0x44>
f010bfac:	8b 45 08             	mov    0x8(%ebp),%eax
f010bfaf:	25 ff 0f 00 00       	and    $0xfff,%eax
f010bfb4:	85 c0                	test   %eax,%eax
f010bfb6:	74 0a                	je     f010bfc2 <__sys_allocate_page+0x4e>
		return E_INVAL;
f010bfb8:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010bfbd:	e9 b0 00 00 00       	jmp    f010c072 <__sys_allocate_page+0xfe>

	//check permissions to be appropriate
	if ((perm & (~PERM_AVAILABLE & ~PERM_WRITEABLE)) != (PERM_USER))
f010bfc2:	8b 45 0c             	mov    0xc(%ebp),%eax
f010bfc5:	25 fd f1 ff ff       	and    $0xfffff1fd,%eax
f010bfca:	83 f8 04             	cmp    $0x4,%eax
f010bfcd:	74 0a                	je     f010bfd9 <__sys_allocate_page+0x65>
		return E_INVAL;
f010bfcf:	b8 fd ff ff ff       	mov    $0xfffffffd,%eax
f010bfd4:	e9 99 00 00 00       	jmp    f010c072 <__sys_allocate_page+0xfe>


	uint32 physical_address = to_physical_address(ptr_frame_info) ;
f010bfd9:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010bfdc:	83 ec 0c             	sub    $0xc,%esp
f010bfdf:	50                   	push   %eax
f010bfe0:	e8 f4 fe ff ff       	call   f010bed9 <to_physical_address>
f010bfe5:	83 c4 10             	add    $0x10,%esp
f010bfe8:	89 45 ec             	mov    %eax,-0x14(%ebp)
		//return it to the original status
		ptr_frame_info->references -= 1;
	}
#else
	{
		memset(STATIC_KERNEL_VIRTUAL_ADDRESS(physical_address), 0, PAGE_SIZE);
f010bfeb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010bfee:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010bff1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010bff4:	c1 e8 0c             	shr    $0xc,%eax
f010bff7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010bffa:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f010bfff:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010c002:	72 17                	jb     f010c01b <__sys_allocate_page+0xa7>
f010c004:	ff 75 e8             	pushl  -0x18(%ebp)
f010c007:	68 24 6a 13 f0       	push   $0xf0136a24
f010c00c:	68 8c 00 00 00       	push   $0x8c
f010c011:	68 53 6a 13 f0       	push   $0xf0136a53
f010c016:	e8 8b 41 ff ff       	call   f01001a6 <_panic>
f010c01b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c01e:	2d 00 00 00 10       	sub    $0x10000000,%eax
f010c023:	83 ec 04             	sub    $0x4,%esp
f010c026:	68 00 10 00 00       	push   $0x1000
f010c02b:	6a 00                	push   $0x0
f010c02d:	50                   	push   %eax
f010c02e:	e8 f8 45 02 00       	call   f013062b <memset>
f010c033:	83 c4 10             	add    $0x10,%esp
	}
#endif
	r = map_frame(e->env_page_directory, ptr_frame_info, (uint32)va, perm) ;
f010c036:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c039:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010c03c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c03f:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c042:	ff 75 0c             	pushl  0xc(%ebp)
f010c045:	51                   	push   %ecx
f010c046:	52                   	push   %edx
f010c047:	50                   	push   %eax
f010c048:	e8 fd aa ff ff       	call   f0106b4a <map_frame>
f010c04d:	83 c4 10             	add    $0x10,%esp
f010c050:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (r == E_NO_MEM)
f010c053:	83 7d f0 fc          	cmpl   $0xfffffffc,-0x10(%ebp)
f010c057:	75 14                	jne    f010c06d <__sys_allocate_page+0xf9>
	{
		decrement_references(ptr_frame_info);
f010c059:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c05c:	83 ec 0c             	sub    $0xc,%esp
f010c05f:	50                   	push   %eax
f010c060:	e8 dc a8 ff ff       	call   f0106941 <decrement_references>
f010c065:	83 c4 10             	add    $0x10,%esp
		return r;
f010c068:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c06b:	eb 05                	jmp    f010c072 <__sys_allocate_page+0xfe>
	}
	return 0 ;
f010c06d:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c072:	c9                   	leave  
f010c073:	c3                   	ret    

f010c074 <__sys_map_frame>:
//	-E_INVAL if (perm & PTE_W), but srcva is read-only in srcenvid's
//		address space.
//	-E_NO_MEM if there's no memory to allocate the new page,
//		or to allocate any necessary page tables.
static int __sys_map_frame(int32 srcenvid, void *srcva, int32 dstenvid, void *dstva, int perm)
{
f010c074:	55                   	push   %ebp
f010c075:	89 e5                	mov    %esp,%ebp
f010c077:	83 ec 08             	sub    $0x8,%esp
	//   parameters for correctness.
	//   Use the third argument to page_lookup() to
	//   check the current permissions on the page.

	// LAB 4: Your code here.
	panic("sys_map_frame not implemented");
f010c07a:	83 ec 04             	sub    $0x4,%esp
f010c07d:	68 67 6a 13 f0       	push   $0xf0136a67
f010c082:	68 b3 00 00 00       	push   $0xb3
f010c087:	68 53 6a 13 f0       	push   $0xf0136a53
f010c08c:	e8 15 41 ff ff       	call   f01001a6 <_panic>

f010c091 <__sys_unmap_frame>:
// Return 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
//	-E_INVAL if va >= UTOP, or va is not page-aligned.
static int __sys_unmap_frame(int32 envid, void *va)
{
f010c091:	55                   	push   %ebp
f010c092:	89 e5                	mov    %esp,%ebp
f010c094:	83 ec 08             	sub    $0x8,%esp
	// Hint: This function is a wrapper around page_remove().

	// LAB 4: Your code here.
	panic("sys_page_unmap not implemented");
f010c097:	83 ec 04             	sub    $0x4,%esp
f010c09a:	68 88 6a 13 f0       	push   $0xf0136a88
f010c09f:	68 c3 00 00 00       	push   $0xc3
f010c0a4:	68 53 6a 13 f0       	push   $0xf0136a53
f010c0a9:	e8 f8 40 ff ff       	call   f01001a6 <_panic>

f010c0ae <sys_calculate_required_frames>:
}

uint32 sys_calculate_required_frames(uint32 start_virtual_address, uint32 size)
{
f010c0ae:	55                   	push   %ebp
f010c0af:	89 e5                	mov    %esp,%ebp
f010c0b1:	83 ec 08             	sub    $0x8,%esp
	return calculate_required_frames(curenv->env_page_directory, start_virtual_address, size);
f010c0b4:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c0b9:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c0bc:	83 ec 04             	sub    $0x4,%esp
f010c0bf:	ff 75 0c             	pushl  0xc(%ebp)
f010c0c2:	ff 75 08             	pushl  0x8(%ebp)
f010c0c5:	50                   	push   %eax
f010c0c6:	e8 dd c1 ff ff       	call   f01082a8 <calculate_required_frames>
f010c0cb:	83 c4 10             	add    $0x10,%esp
}
f010c0ce:	c9                   	leave  
f010c0cf:	c3                   	ret    

f010c0d0 <sys_calculate_free_frames>:

uint32 sys_calculate_free_frames()
{
f010c0d0:	55                   	push   %ebp
f010c0d1:	89 e5                	mov    %esp,%ebp
f010c0d3:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c0d6:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c0d9:	83 ec 0c             	sub    $0xc,%esp
f010c0dc:	50                   	push   %eax
f010c0dd:	e8 d8 ac ff ff       	call   f0106dba <calculate_available_frames>
f010c0e2:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("Free Frames = %d : Buffered = %d, Not Buffered = %d\n", counters.freeBuffered + counters.freeNotBuffered, counters.freeBuffered ,counters.freeNotBuffered);
	return counters.freeBuffered + counters.freeNotBuffered;
f010c0e5:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c0e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c0eb:	01 d0                	add    %edx,%eax
}
f010c0ed:	c9                   	leave  
f010c0ee:	c3                   	ret    

f010c0ef <sys_calculate_modified_frames>:
uint32 sys_calculate_modified_frames()
{
f010c0ef:	55                   	push   %ebp
f010c0f0:	89 e5                	mov    %esp,%ebp
f010c0f2:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c0f5:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c0f8:	83 ec 0c             	sub    $0xc,%esp
f010c0fb:	50                   	push   %eax
f010c0fc:	e8 b9 ac ff ff       	call   f0106dba <calculate_available_frames>
f010c101:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Modified Frames = %d\n", counters.modified) ;
	return counters.modified;
f010c104:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010c107:	c9                   	leave  
f010c108:	c3                   	ret    

f010c109 <sys_calculate_notmod_frames>:

uint32 sys_calculate_notmod_frames()
{
f010c109:	55                   	push   %ebp
f010c10a:	89 e5                	mov    %esp,%ebp
f010c10c:	83 ec 18             	sub    $0x18,%esp
	struct freeFramesCounters counters = calculate_available_frames();
f010c10f:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c112:	83 ec 0c             	sub    $0xc,%esp
f010c115:	50                   	push   %eax
f010c116:	e8 9f ac ff ff       	call   f0106dba <calculate_available_frames>
f010c11b:	83 c4 0c             	add    $0xc,%esp
	//	cprintf("================ Not Modified Frames = %d\n", counters.freeBuffered) ;
	return counters.freeBuffered;
f010c11e:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
f010c121:	c9                   	leave  
f010c122:	c3                   	ret    

f010c123 <sys_calculate_pages_tobe_removed_ready_exit>:

int sys_calculate_pages_tobe_removed_ready_exit(uint32 WS_or_MEMORY_flag)
{
f010c123:	55                   	push   %ebp
f010c124:	89 e5                	mov    %esp,%ebp
f010c126:	83 ec 08             	sub    $0x8,%esp
	return calc_no_pages_tobe_removed_from_ready_exit_queues(WS_or_MEMORY_flag);
f010c129:	83 ec 0c             	sub    $0xc,%esp
f010c12c:	ff 75 08             	pushl  0x8(%ebp)
f010c12f:	e8 2d 32 02 00       	call   f012f361 <calc_no_pages_tobe_removed_from_ready_exit_queues>
f010c134:	83 c4 10             	add    $0x10,%esp
}
f010c137:	c9                   	leave  
f010c138:	c3                   	ret    

f010c139 <sys_scarce_memory>:

void sys_scarce_memory(void)
{
f010c139:	55                   	push   %ebp
f010c13a:	89 e5                	mov    %esp,%ebp
f010c13c:	83 ec 08             	sub    $0x8,%esp
	scarce_memory();
f010c13f:	e8 75 31 02 00       	call   f012f2b9 <scarce_memory>
}
f010c144:	90                   	nop
f010c145:	c9                   	leave  
f010c146:	c3                   	ret    

f010c147 <sys_clearFFL>:

void sys_clearFFL()
{
f010c147:	55                   	push   %ebp
f010c148:	89 e5                	mov    %esp,%ebp
f010c14a:	83 ec 18             	sub    $0x18,%esp
	int size = LIST_SIZE(&free_frame_list) ;
f010c14d:	a1 84 84 6e f0       	mov    0xf06e8484,%eax
f010c152:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int i = 0 ;
f010c155:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c15c:	eb 12                	jmp    f010c170 <sys_clearFFL+0x29>
	{
		allocate_frame(&ptr_tmp_FI) ;
f010c15e:	83 ec 0c             	sub    $0xc,%esp
f010c161:	8d 45 ec             	lea    -0x14(%ebp),%eax
f010c164:	50                   	push   %eax
f010c165:	e8 48 a6 ff ff       	call   f01067b2 <allocate_frame>
f010c16a:	83 c4 10             	add    $0x10,%esp
void sys_clearFFL()
{
	int size = LIST_SIZE(&free_frame_list) ;
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i < size ; i++)
f010c16d:	ff 45 f4             	incl   -0xc(%ebp)
f010c170:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c173:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010c176:	7c e6                	jl     f010c15e <sys_clearFFL+0x17>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f010c178:	90                   	nop
f010c179:	c9                   	leave  
f010c17a:	c3                   	ret    

f010c17b <sys_pf_calculate_allocated_pages>:

/*******************************/
/* PAGE FILE SYSTEM CALLS */
/*******************************/
int sys_pf_calculate_allocated_pages(void)
{
f010c17b:	55                   	push   %ebp
f010c17c:	89 e5                	mov    %esp,%ebp
f010c17e:	83 ec 08             	sub    $0x8,%esp
	return pf_calculate_allocated_pages(curenv);
f010c181:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c186:	83 ec 0c             	sub    $0xc,%esp
f010c189:	50                   	push   %eax
f010c18a:	e8 34 7a ff ff       	call   f0103bc3 <pf_calculate_allocated_pages>
f010c18f:	83 c4 10             	add    $0x10,%esp
}
f010c192:	c9                   	leave  
f010c193:	c3                   	ret    

f010c194 <sys_free_user_mem>:

/*******************************/
/* USER HEAP SYSTEM CALLS */
/*******************************/
void sys_free_user_mem(uint32 virtual_address, uint32 size)
{
f010c194:	55                   	push   %ebp
f010c195:	89 e5                	mov    %esp,%ebp
f010c197:	83 ec 08             	sub    $0x8,%esp
	if(isBufferingEnabled())
f010c19a:	e8 a3 11 00 00       	call   f010d342 <isBufferingEnabled>
f010c19f:	84 c0                	test   %al,%al
f010c1a1:	74 19                	je     f010c1bc <sys_free_user_mem+0x28>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
f010c1a3:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c1a8:	83 ec 04             	sub    $0x4,%esp
f010c1ab:	ff 75 0c             	pushl  0xc(%ebp)
f010c1ae:	ff 75 08             	pushl  0x8(%ebp)
f010c1b1:	50                   	push   %eax
f010c1b2:	e8 48 c1 ff ff       	call   f01082ff <__free_user_mem_with_buffering>
f010c1b7:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
	}
	return;
f010c1ba:	eb 18                	jmp    f010c1d4 <sys_free_user_mem+0x40>
	{
		__free_user_mem_with_buffering(curenv, virtual_address, size);
	}
	else
	{
		free_user_mem(curenv, virtual_address, size);
f010c1bc:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c1c1:	83 ec 04             	sub    $0x4,%esp
f010c1c4:	ff 75 0c             	pushl  0xc(%ebp)
f010c1c7:	ff 75 08             	pushl  0x8(%ebp)
f010c1ca:	50                   	push   %eax
f010c1cb:	e8 12 c1 ff ff       	call   f01082e2 <free_user_mem>
f010c1d0:	83 c4 10             	add    $0x10,%esp
	}
	return;
f010c1d3:	90                   	nop
}
f010c1d4:	c9                   	leave  
f010c1d5:	c3                   	ret    

f010c1d6 <sys_allocate_user_mem>:

void sys_allocate_user_mem(uint32 virtual_address, uint32 size)
{
f010c1d6:	55                   	push   %ebp
f010c1d7:	89 e5                	mov    %esp,%ebp
f010c1d9:	83 ec 08             	sub    $0x8,%esp
	allocate_user_mem(curenv, virtual_address, size);
f010c1dc:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c1e1:	83 ec 04             	sub    $0x4,%esp
f010c1e4:	ff 75 0c             	pushl  0xc(%ebp)
f010c1e7:	ff 75 08             	pushl  0x8(%ebp)
f010c1ea:	50                   	push   %eax
f010c1eb:	e8 d5 c0 ff ff       	call   f01082c5 <allocate_user_mem>
f010c1f0:	83 c4 10             	add    $0x10,%esp
	return;
f010c1f3:	90                   	nop
}
f010c1f4:	c9                   	leave  
f010c1f5:	c3                   	ret    

f010c1f6 <sys_allocate_chunk>:

void sys_allocate_chunk(uint32 virtual_address, uint32 size, uint32 perms)
{
f010c1f6:	55                   	push   %ebp
f010c1f7:	89 e5                	mov    %esp,%ebp
f010c1f9:	83 ec 08             	sub    $0x8,%esp
	allocate_chunk(curenv->env_page_directory, virtual_address, size, perms);
f010c1fc:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c201:	8b 40 5c             	mov    0x5c(%eax),%eax
f010c204:	ff 75 10             	pushl  0x10(%ebp)
f010c207:	ff 75 0c             	pushl  0xc(%ebp)
f010c20a:	ff 75 08             	pushl  0x8(%ebp)
f010c20d:	50                   	push   %eax
f010c20e:	e8 5e c0 ff ff       	call   f0108271 <allocate_chunk>
f010c213:	83 c4 10             	add    $0x10,%esp
	return;
f010c216:	90                   	nop
}
f010c217:	c9                   	leave  
f010c218:	c3                   	ret    

f010c219 <sys_move_user_mem>:

//2014
void sys_move_user_mem(uint32 src_virtual_address, uint32 dst_virtual_address, uint32 size)
{
f010c219:	55                   	push   %ebp
f010c21a:	89 e5                	mov    %esp,%ebp
f010c21c:	83 ec 08             	sub    $0x8,%esp
	move_user_mem(curenv, src_virtual_address, dst_virtual_address, size);
f010c21f:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c224:	ff 75 10             	pushl  0x10(%ebp)
f010c227:	ff 75 0c             	pushl  0xc(%ebp)
f010c22a:	ff 75 08             	pushl  0x8(%ebp)
f010c22d:	50                   	push   %eax
f010c22e:	e8 e9 c0 ff ff       	call   f010831c <move_user_mem>
f010c233:	83 c4 10             	add    $0x10,%esp
	return;
f010c236:	90                   	nop
}
f010c237:	c9                   	leave  
f010c238:	c3                   	ret    

f010c239 <sys_get_heap_strategy>:

//2015
uint32 sys_get_heap_strategy()
{
f010c239:	55                   	push   %ebp
f010c23a:	89 e5                	mov    %esp,%ebp
	return _UHeapPlacementStrategy ;
f010c23c:	a1 8c 84 6e f0       	mov    0xf06e848c,%eax
}
f010c241:	5d                   	pop    %ebp
f010c242:	c3                   	ret    

f010c243 <sys_set_uheap_strategy>:
void sys_set_uheap_strategy(uint32 heapStrategy)
{
f010c243:	55                   	push   %ebp
f010c244:	89 e5                	mov    %esp,%ebp
	_UHeapPlacementStrategy = heapStrategy;
f010c246:	8b 45 08             	mov    0x8(%ebp),%eax
f010c249:	a3 8c 84 6e f0       	mov    %eax,0xf06e848c
}
f010c24e:	90                   	nop
f010c24f:	5d                   	pop    %ebp
f010c250:	c3                   	ret    

f010c251 <sys_disable_interrupt>:
/*******************************/
/* INTERRUPTS SYSTEM CALLS */
/*******************************/
//NEW!! 2012...
void sys_disable_interrupt()
{
f010c251:	55                   	push   %ebp
f010c252:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags &= ~FL_IF ;
f010c254:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c259:	8b 15 34 87 65 f0    	mov    0xf0658734,%edx
f010c25f:	8b 52 38             	mov    0x38(%edx),%edx
f010c262:	80 e6 fd             	and    $0xfd,%dh
f010c265:	89 50 38             	mov    %edx,0x38(%eax)
}
f010c268:	90                   	nop
f010c269:	5d                   	pop    %ebp
f010c26a:	c3                   	ret    

f010c26b <sys_enable_interrupt>:
void sys_enable_interrupt()
{
f010c26b:	55                   	push   %ebp
f010c26c:	89 e5                	mov    %esp,%ebp
	curenv->env_tf.tf_eflags |= FL_IF ;
f010c26e:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c273:	8b 15 34 87 65 f0    	mov    0xf0658734,%edx
f010c279:	8b 52 38             	mov    0x38(%edx),%edx
f010c27c:	80 ce 02             	or     $0x2,%dh
f010c27f:	89 50 38             	mov    %edx,0x38(%eax)
}
f010c282:	90                   	nop
f010c283:	5d                   	pop    %ebp
f010c284:	c3                   	ret    

f010c285 <sys_createSemaphore>:

/*******************************/
/* SEMAPHORES SYSTEM CALLS */
/*******************************/
int sys_createSemaphore(char* semaphoreName, uint32 initialValue)
{
f010c285:	55                   	push   %ebp
f010c286:	89 e5                	mov    %esp,%ebp
f010c288:	83 ec 08             	sub    $0x8,%esp
	return createSemaphore(curenv->env_id, semaphoreName, initialValue);
f010c28b:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c290:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c293:	83 ec 04             	sub    $0x4,%esp
f010c296:	ff 75 0c             	pushl  0xc(%ebp)
f010c299:	ff 75 08             	pushl  0x8(%ebp)
f010c29c:	50                   	push   %eax
f010c29d:	e8 de 13 00 00       	call   f010d680 <createSemaphore>
f010c2a2:	83 c4 10             	add    $0x10,%esp
}
f010c2a5:	c9                   	leave  
f010c2a6:	c3                   	ret    

f010c2a7 <sys_waitSemaphore>:

void sys_waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c2a7:	55                   	push   %ebp
f010c2a8:	89 e5                	mov    %esp,%ebp
f010c2aa:	83 ec 08             	sub    $0x8,%esp
	waitSemaphore(ownerEnvID, semaphoreName);
f010c2ad:	83 ec 08             	sub    $0x8,%esp
f010c2b0:	ff 75 0c             	pushl  0xc(%ebp)
f010c2b3:	ff 75 08             	pushl  0x8(%ebp)
f010c2b6:	e8 e2 13 00 00       	call   f010d69d <waitSemaphore>
f010c2bb:	83 c4 10             	add    $0x10,%esp
}
f010c2be:	90                   	nop
f010c2bf:	c9                   	leave  
f010c2c0:	c3                   	ret    

f010c2c1 <sys_signalSemaphore>:

void sys_signalSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010c2c1:	55                   	push   %ebp
f010c2c2:	89 e5                	mov    %esp,%ebp
f010c2c4:	83 ec 08             	sub    $0x8,%esp
	signalSemaphore(ownerEnvID, semaphoreName);
f010c2c7:	83 ec 08             	sub    $0x8,%esp
f010c2ca:	ff 75 0c             	pushl  0xc(%ebp)
f010c2cd:	ff 75 08             	pushl  0x8(%ebp)
f010c2d0:	e8 e5 13 00 00       	call   f010d6ba <signalSemaphore>
f010c2d5:	83 c4 10             	add    $0x10,%esp
}
f010c2d8:	90                   	nop
f010c2d9:	c9                   	leave  
f010c2da:	c3                   	ret    

f010c2db <sys_getSemaphoreValue>:

int sys_getSemaphoreValue(int32 ownerEnvID, char* semaphoreName)
{
f010c2db:	55                   	push   %ebp
f010c2dc:	89 e5                	mov    %esp,%ebp
f010c2de:	83 ec 18             	sub    $0x18,%esp
	int semID = get_semaphore_object_ID(ownerEnvID, semaphoreName);
f010c2e1:	83 ec 08             	sub    $0x8,%esp
f010c2e4:	ff 75 0c             	pushl  0xc(%ebp)
f010c2e7:	ff 75 08             	pushl  0x8(%ebp)
f010c2ea:	e8 37 12 00 00       	call   f010d526 <get_semaphore_object_ID>
f010c2ef:	83 c4 10             	add    $0x10,%esp
f010c2f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
	assert(semID >= 0 && semID < MAX_SEMAPHORES) ;
f010c2f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c2f9:	78 06                	js     f010c301 <sys_getSemaphoreValue+0x26>
f010c2fb:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010c2ff:	7e 19                	jle    f010c31a <sys_getSemaphoreValue+0x3f>
f010c301:	68 a8 6a 13 f0       	push   $0xf0136aa8
f010c306:	68 cd 6a 13 f0       	push   $0xf0136acd
f010c30b:	68 4a 01 00 00       	push   $0x14a
f010c310:	68 53 6a 13 f0       	push   $0xf0136a53
f010c315:	e8 8c 3e ff ff       	call   f01001a6 <_panic>

	return semaphores[semID].value ;
f010c31a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c31d:	89 d0                	mov    %edx,%eax
f010c31f:	c1 e0 02             	shl    $0x2,%eax
f010c322:	01 d0                	add    %edx,%eax
f010c324:	01 c0                	add    %eax,%eax
f010c326:	01 d0                	add    %edx,%eax
f010c328:	01 c0                	add    %eax,%eax
f010c32a:	01 d0                	add    %edx,%eax
f010c32c:	c1 e0 02             	shl    $0x2,%eax
f010c32f:	05 d4 60 6e f0       	add    $0xf06e60d4,%eax
f010c334:	8b 00                	mov    (%eax),%eax
}
f010c336:	c9                   	leave  
f010c337:	c3                   	ret    

f010c338 <sys_createSharedObject>:

/*******************************/
/* SHARED MEMORY SYSTEM CALLS */
/*******************************/
int sys_createSharedObject(char* shareName, uint32 size, uint8 isWritable, void* virtual_address)
{
f010c338:	55                   	push   %ebp
f010c339:	89 e5                	mov    %esp,%ebp
f010c33b:	83 ec 18             	sub    $0x18,%esp
f010c33e:	8b 45 10             	mov    0x10(%ebp),%eax
f010c341:	88 45 f4             	mov    %al,-0xc(%ebp)
	return createSharedObject(curenv->env_id, shareName, size, isWritable, virtual_address);
f010c344:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
f010c348:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c34d:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c350:	83 ec 0c             	sub    $0xc,%esp
f010c353:	ff 75 14             	pushl  0x14(%ebp)
f010c356:	52                   	push   %edx
f010c357:	ff 75 0c             	pushl  0xc(%ebp)
f010c35a:	ff 75 08             	pushl  0x8(%ebp)
f010c35d:	50                   	push   %eax
f010c35e:	e8 e5 af ff ff       	call   f0107348 <createSharedObject>
f010c363:	83 c4 20             	add    $0x20,%esp
}
f010c366:	c9                   	leave  
f010c367:	c3                   	ret    

f010c368 <sys_getSizeOfSharedObject>:

int sys_getSizeOfSharedObject(int32 ownerID, char* shareName)
{
f010c368:	55                   	push   %ebp
f010c369:	89 e5                	mov    %esp,%ebp
f010c36b:	83 ec 08             	sub    $0x8,%esp
	return getSizeOfSharedObject(ownerID, shareName);
f010c36e:	83 ec 08             	sub    $0x8,%esp
f010c371:	ff 75 0c             	pushl  0xc(%ebp)
f010c374:	ff 75 08             	pushl  0x8(%ebp)
f010c377:	e8 ef af ff ff       	call   f010736b <getSizeOfSharedObject>
f010c37c:	83 c4 10             	add    $0x10,%esp
}
f010c37f:	c9                   	leave  
f010c380:	c3                   	ret    

f010c381 <sys_getSharedObject>:

int sys_getSharedObject(int32 ownerID, char* shareName, void* virtual_address)
{
f010c381:	55                   	push   %ebp
f010c382:	89 e5                	mov    %esp,%ebp
f010c384:	83 ec 08             	sub    $0x8,%esp
	return getSharedObject(ownerID, shareName, virtual_address);
f010c387:	83 ec 04             	sub    $0x4,%esp
f010c38a:	ff 75 10             	pushl  0x10(%ebp)
f010c38d:	ff 75 0c             	pushl  0xc(%ebp)
f010c390:	ff 75 08             	pushl  0x8(%ebp)
f010c393:	e8 f0 af ff ff       	call   f0107388 <getSharedObject>
f010c398:	83 c4 10             	add    $0x10,%esp
}
f010c39b:	c9                   	leave  
f010c39c:	c3                   	ret    

f010c39d <sys_freeSharedObject>:

int sys_freeSharedObject(int32 sharedObjectID, void *startVA)
{
f010c39d:	55                   	push   %ebp
f010c39e:	89 e5                	mov    %esp,%ebp
f010c3a0:	83 ec 08             	sub    $0x8,%esp
	return freeSharedObject(sharedObjectID, startVA);
f010c3a3:	83 ec 08             	sub    $0x8,%esp
f010c3a6:	ff 75 0c             	pushl  0xc(%ebp)
f010c3a9:	ff 75 08             	pushl  0x8(%ebp)
f010c3ac:	e8 f4 af ff ff       	call   f01073a5 <freeSharedObject>
f010c3b1:	83 c4 10             	add    $0x10,%esp
}
f010c3b4:	c9                   	leave  
f010c3b5:	c3                   	ret    

f010c3b6 <sys_getMaxShares>:

uint32 sys_getMaxShares()
{
f010c3b6:	55                   	push   %ebp
f010c3b7:	89 e5                	mov    %esp,%ebp
	return MAX_SHARES;
f010c3b9:	b8 64 00 00 00       	mov    $0x64,%eax
}
f010c3be:	5d                   	pop    %ebp
f010c3bf:	c3                   	ret    

f010c3c0 <sys_getenvid>:
/* USER ENVIRONMENT SYSTEM CALLS */
/*********************************/
// Returns the current environment's envid.
//2017
static int32 sys_getenvid(void)
{
f010c3c0:	55                   	push   %ebp
f010c3c1:	89 e5                	mov    %esp,%ebp
	return curenv->env_id;
f010c3c3:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c3c8:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c3cb:	5d                   	pop    %ebp
f010c3cc:	c3                   	ret    

f010c3cd <sys_getenvindex>:

//2017
static int32 sys_getenvindex(void)
{
f010c3cd:	55                   	push   %ebp
f010c3ce:	89 e5                	mov    %esp,%ebp
	//return curenv->env_id;
	return (curenv - envs) ;
f010c3d0:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c3d5:	89 c2                	mov    %eax,%edx
f010c3d7:	a1 30 87 65 f0       	mov    0xf0658730,%eax
f010c3dc:	29 c2                	sub    %eax,%edx
f010c3de:	89 d0                	mov    %edx,%eax
f010c3e0:	c1 f8 03             	sar    $0x3,%eax
f010c3e3:	89 c2                	mov    %eax,%edx
f010c3e5:	89 d0                	mov    %edx,%eax
f010c3e7:	c1 e0 03             	shl    $0x3,%eax
f010c3ea:	01 d0                	add    %edx,%eax
f010c3ec:	c1 e0 03             	shl    $0x3,%eax
f010c3ef:	01 d0                	add    %edx,%eax
f010c3f1:	01 c0                	add    %eax,%eax
f010c3f3:	01 d0                	add    %edx,%eax
f010c3f5:	01 c0                	add    %eax,%eax
f010c3f7:	01 d0                	add    %edx,%eax
f010c3f9:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c400:	01 c8                	add    %ecx,%eax
f010c402:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c409:	01 c8                	add    %ecx,%eax
f010c40b:	c1 e0 02             	shl    $0x2,%eax
f010c40e:	01 d0                	add    %edx,%eax
f010c410:	01 c0                	add    %eax,%eax
f010c412:	01 d0                	add    %edx,%eax
f010c414:	01 c0                	add    %eax,%eax
f010c416:	01 d0                	add    %edx,%eax
f010c418:	c1 e0 02             	shl    $0x2,%eax
f010c41b:	01 d0                	add    %edx,%eax
f010c41d:	01 c0                	add    %eax,%eax
f010c41f:	01 d0                	add    %edx,%eax
f010c421:	c1 e0 09             	shl    $0x9,%eax
f010c424:	29 d0                	sub    %edx,%eax
f010c426:	c1 e0 02             	shl    $0x2,%eax
f010c429:	01 d0                	add    %edx,%eax
}
f010c42b:	5d                   	pop    %ebp
f010c42c:	c3                   	ret    

f010c42d <sys_getparentenvid>:

//2017
static int32 sys_getparentenvid(void)
{
f010c42d:	55                   	push   %ebp
f010c42e:	89 e5                	mov    %esp,%ebp
	return curenv->env_parent_id;
f010c430:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c435:	8b 40 50             	mov    0x50(%eax),%eax
}
f010c438:	5d                   	pop    %ebp
f010c439:	c3                   	ret    

f010c43a <sys_destroy_env>:
//
// Returns 0 on success, < 0 on error.  Errors are:
//	-E_BAD_ENV if environment envid doesn't currently exist,
//		or the caller doesn't have permission to change envid.
static int sys_destroy_env(int32 envid)
{
f010c43a:	55                   	push   %ebp
f010c43b:	89 e5                	mov    %esp,%ebp
f010c43d:	83 ec 18             	sub    $0x18,%esp
	int r;
	struct Env *e;
	if (envid == 0)
f010c440:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010c444:	75 0a                	jne    f010c450 <sys_destroy_env+0x16>
	{
		e = curenv ;
f010c446:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c44b:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c44e:	eb 22                	jmp    f010c472 <sys_destroy_env+0x38>
	}
	else if ((r = envid2env(envid, &e, 0)) < 0)
f010c450:	83 ec 04             	sub    $0x4,%esp
f010c453:	6a 00                	push   $0x0
f010c455:	8d 45 f0             	lea    -0x10(%ebp),%eax
f010c458:	50                   	push   %eax
f010c459:	ff 75 08             	pushl  0x8(%ebp)
f010c45c:	e8 7e cc ff ff       	call   f01090df <envid2env>
f010c461:	83 c4 10             	add    $0x10,%esp
f010c464:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c467:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c46b:	79 05                	jns    f010c472 <sys_destroy_env+0x38>
	{
		return r;
f010c46d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c470:	eb 5e                	jmp    f010c4d0 <sys_destroy_env+0x96>
	}

	if (e == curenv)
f010c472:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010c475:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c47a:	39 c2                	cmp    %eax,%edx
f010c47c:	75 1b                	jne    f010c499 <sys_destroy_env+0x5f>
	{
		cprintf("[%08x] exiting gracefully\n", curenv->env_id);
f010c47e:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c483:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c486:	83 ec 08             	sub    $0x8,%esp
f010c489:	50                   	push   %eax
f010c48a:	68 e2 6a 13 f0       	push   $0xf0136ae2
f010c48f:	e8 99 47 ff ff       	call   f0100c2d <cprintf>
f010c494:	83 c4 10             	add    $0x10,%esp
f010c497:	eb 20                	jmp    f010c4b9 <sys_destroy_env+0x7f>
	}
	else
	{
		cprintf("[%08x] destroying %08x\n", curenv->env_id, e->env_id);
f010c499:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c49c:	8b 50 4c             	mov    0x4c(%eax),%edx
f010c49f:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c4a4:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c4a7:	83 ec 04             	sub    $0x4,%esp
f010c4aa:	52                   	push   %edx
f010c4ab:	50                   	push   %eax
f010c4ac:	68 fd 6a 13 f0       	push   $0xf0136afd
f010c4b1:	e8 77 47 ff ff       	call   f0100c2d <cprintf>
f010c4b6:	83 c4 10             	add    $0x10,%esp
	}
	//2015
	sched_kill_env(e->env_id);
f010c4b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c4bc:	8b 40 4c             	mov    0x4c(%eax),%eax
f010c4bf:	83 ec 0c             	sub    $0xc,%esp
f010c4c2:	50                   	push   %eax
f010c4c3:	e8 00 90 ff ff       	call   f01054c8 <sched_kill_env>
f010c4c8:	83 c4 10             	add    $0x10,%esp

	return 0;
f010c4cb:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010c4d0:	c9                   	leave  
f010c4d1:	c3                   	ret    

f010c4d2 <sys_exit_env>:

//Just place the current env into the EXIT queue & schedule the next one
static void sys_exit_env()
{
f010c4d2:	55                   	push   %ebp
f010c4d3:	89 e5                	mov    %esp,%ebp
f010c4d5:	83 ec 08             	sub    $0x8,%esp
	//2015
	env_exit();
f010c4d8:	e8 e3 cb ff ff       	call   f01090c0 <env_exit>
	//env_run_cmd_prmpt();
}
f010c4dd:	90                   	nop
f010c4de:	c9                   	leave  
f010c4df:	c3                   	ret    

f010c4e0 <sys_create_env>:

//New update in 2020
//Create a new env & add it to the NEW queue
int sys_create_env(char* programName, unsigned int page_WS_size,unsigned int LRU_second_list_size, unsigned int percent_WS_pages_to_remove)
{
f010c4e0:	55                   	push   %ebp
f010c4e1:	89 e5                	mov    %esp,%ebp
f010c4e3:	83 ec 18             	sub    $0x18,%esp
	struct Env* env =  env_create(programName, page_WS_size, LRU_second_list_size, percent_WS_pages_to_remove);
f010c4e6:	ff 75 14             	pushl  0x14(%ebp)
f010c4e9:	ff 75 10             	pushl  0x10(%ebp)
f010c4ec:	ff 75 0c             	pushl  0xc(%ebp)
f010c4ef:	ff 75 08             	pushl  0x8(%ebp)
f010c4f2:	e8 8d be ff ff       	call   f0108384 <env_create>
f010c4f7:	83 c4 10             	add    $0x10,%esp
f010c4fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if(env == NULL)
f010c4fd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c501:	75 07                	jne    f010c50a <sys_create_env+0x2a>
	{
		return E_ENV_CREATION_ERROR;
f010c503:	b8 ef ff ff ff       	mov    $0xffffffef,%eax
f010c508:	eb 14                	jmp    f010c51e <sys_create_env+0x3e>
	}

	//2015
	sched_new_env(env);
f010c50a:	83 ec 0c             	sub    $0xc,%esp
f010c50d:	ff 75 f4             	pushl  -0xc(%ebp)
f010c510:	e8 6a 8b ff ff       	call   f010507f <sched_new_env>
f010c515:	83 c4 10             	add    $0x10,%esp

	return env->env_id;
f010c518:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c51b:	8b 40 4c             	mov    0x4c(%eax),%eax
}
f010c51e:	c9                   	leave  
f010c51f:	c3                   	ret    

f010c520 <sys_run_env>:

//Place a new env into the READY queue
void sys_run_env(int32 envId)
{
f010c520:	55                   	push   %ebp
f010c521:	89 e5                	mov    %esp,%ebp
f010c523:	83 ec 08             	sub    $0x8,%esp
	sched_run_env(envId);
f010c526:	8b 45 08             	mov    0x8(%ebp),%eax
f010c529:	83 ec 0c             	sub    $0xc,%esp
f010c52c:	50                   	push   %eax
f010c52d:	e8 6a 8b ff ff       	call   f010509c <sched_run_env>
f010c532:	83 c4 10             	add    $0x10,%esp
}
f010c535:	90                   	nop
f010c536:	c9                   	leave  
f010c537:	c3                   	ret    

f010c538 <sys_get_virtual_time>:
/*******************************/
/* ETC... SYSTEM CALLS */
/*******************************/

struct uint64 sys_get_virtual_time()
{
f010c538:	55                   	push   %ebp
f010c539:	89 e5                	mov    %esp,%ebp
f010c53b:	83 ec 10             	sub    $0x10,%esp
	//	lcr4(0);


	struct uint64 result;

	__asm __volatile("rdtsc\n"
f010c53e:	0f 31                	rdtsc  
f010c540:	89 45 f0             	mov    %eax,-0x10(%ebp)
f010c543:	89 55 f4             	mov    %edx,-0xc(%ebp)
	//ptr[3]=0;
	//cprintf("as str = %s\n", ptr);
	cprintf("ax = %x, bx = %x, cx = %x, dx = %x\n", eaxp,ebxp,ecxp,edxp);
	*/

	return result;
f010c546:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c549:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010c54c:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c54f:	89 55 fc             	mov    %edx,-0x4(%ebp)
	struct uint64 t = get_virtual_time();
	return t;
f010c552:	8b 4d 08             	mov    0x8(%ebp),%ecx
f010c555:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c558:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010c55b:	89 01                	mov    %eax,(%ecx)
f010c55d:	89 51 04             	mov    %edx,0x4(%ecx)
}
f010c560:	8b 45 08             	mov    0x8(%ebp),%eax
f010c563:	c9                   	leave  
f010c564:	c2 04 00             	ret    $0x4

f010c567 <sys_rcr2>:

uint32 sys_rcr2()
{
f010c567:	55                   	push   %ebp
f010c568:	89 e5                	mov    %esp,%ebp
f010c56a:	83 ec 10             	sub    $0x10,%esp

static __inline uint32
rcr2(void)
{
	uint32 val;
	__asm __volatile("movl %%cr2,%0" : "=r" (val));
f010c56d:	0f 20 d0             	mov    %cr2,%eax
f010c570:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return val;
f010c573:	8b 45 fc             	mov    -0x4(%ebp),%eax
	return rcr2();
f010c576:	90                   	nop
}
f010c577:	c9                   	leave  
f010c578:	c3                   	ret    

f010c579 <sys_bypassPageFault>:
void sys_bypassPageFault(uint8 instrLength)
{
f010c579:	55                   	push   %ebp
f010c57a:	89 e5                	mov    %esp,%ebp
f010c57c:	83 ec 04             	sub    $0x4,%esp
f010c57f:	8b 45 08             	mov    0x8(%ebp),%eax
f010c582:	88 45 fc             	mov    %al,-0x4(%ebp)
	bypassInstrLength = instrLength;
f010c585:	8a 45 fc             	mov    -0x4(%ebp),%al
f010c588:	a2 c8 8f 65 f0       	mov    %al,0xf0658fc8
}
f010c58d:	90                   	nop
f010c58e:	c9                   	leave  
f010c58f:	c3                   	ret    

f010c590 <rsttst>:

uint32 tstcnt;
void rsttst()
{
f010c590:	55                   	push   %ebp
f010c591:	89 e5                	mov    %esp,%ebp
	tstcnt = 0;
f010c593:	c7 05 10 86 6e f0 00 	movl   $0x0,0xf06e8610
f010c59a:	00 00 00 
}
f010c59d:	90                   	nop
f010c59e:	5d                   	pop    %ebp
f010c59f:	c3                   	ret    

f010c5a0 <inctst>:
void inctst()
{
f010c5a0:	55                   	push   %ebp
f010c5a1:	89 e5                	mov    %esp,%ebp
	tstcnt++;
f010c5a3:	a1 10 86 6e f0       	mov    0xf06e8610,%eax
f010c5a8:	40                   	inc    %eax
f010c5a9:	a3 10 86 6e f0       	mov    %eax,0xf06e8610
}
f010c5ae:	90                   	nop
f010c5af:	5d                   	pop    %ebp
f010c5b0:	c3                   	ret    

f010c5b1 <gettst>:
uint32 gettst()
{
f010c5b1:	55                   	push   %ebp
f010c5b2:	89 e5                	mov    %esp,%ebp
	return tstcnt;
f010c5b4:	a1 10 86 6e f0       	mov    0xf06e8610,%eax
}
f010c5b9:	5d                   	pop    %ebp
f010c5ba:	c3                   	ret    

f010c5bb <tst>:

void tst(uint32 n, uint32 v1, uint32 v2, char c, int inv)
{
f010c5bb:	55                   	push   %ebp
f010c5bc:	89 e5                	mov    %esp,%ebp
f010c5be:	83 ec 28             	sub    $0x28,%esp
f010c5c1:	8b 45 14             	mov    0x14(%ebp),%eax
f010c5c4:	88 45 e4             	mov    %al,-0x1c(%ebp)
	int chk = 0;
f010c5c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	switch (c)
f010c5ce:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
f010c5d2:	83 f8 65             	cmp    $0x65,%eax
f010c5d5:	74 5d                	je     f010c634 <tst+0x79>
f010c5d7:	83 f8 65             	cmp    $0x65,%eax
f010c5da:	7f 0a                	jg     f010c5e6 <tst+0x2b>
f010c5dc:	83 f8 62             	cmp    $0x62,%eax
f010c5df:	74 73                	je     f010c654 <tst+0x99>
f010c5e1:	e9 91 00 00 00       	jmp    f010c677 <tst+0xbc>
f010c5e6:	83 f8 67             	cmp    $0x67,%eax
f010c5e9:	74 29                	je     f010c614 <tst+0x59>
f010c5eb:	83 f8 6c             	cmp    $0x6c,%eax
f010c5ee:	0f 85 83 00 00 00    	jne    f010c677 <tst+0xbc>
	{
	case 'l':
		if (n < v1)
f010c5f4:	8b 45 08             	mov    0x8(%ebp),%eax
f010c5f7:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c5fa:	73 09                	jae    f010c605 <tst+0x4a>
			chk = 1;
f010c5fc:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c603:	eb 68                	jmp    f010c66d <tst+0xb2>
	switch (c)
	{
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
f010c605:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c609:	74 62                	je     f010c66d <tst+0xb2>
			chk = 1;
f010c60b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c612:	eb 59                	jmp    f010c66d <tst+0xb2>
	case 'g':
		if (n > v1)
f010c614:	8b 45 08             	mov    0x8(%ebp),%eax
f010c617:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c61a:	76 09                	jbe    f010c625 <tst+0x6a>
			chk = 1;
f010c61c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c623:	eb 4b                	jmp    f010c670 <tst+0xb5>
			chk = 1;
		break;
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
f010c625:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c629:	74 45                	je     f010c670 <tst+0xb5>
			chk = 1;
f010c62b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c632:	eb 3c                	jmp    f010c670 <tst+0xb5>
	case 'e':
		if (n == v1)
f010c634:	8b 45 08             	mov    0x8(%ebp),%eax
f010c637:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c63a:	75 09                	jne    f010c645 <tst+0x8a>
			chk = 1;
f010c63c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		else if (inv)
			chk = 1;
		break;
f010c643:	eb 2e                	jmp    f010c673 <tst+0xb8>
			chk = 1;
		break;
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
f010c645:	83 7d 18 00          	cmpl   $0x0,0x18(%ebp)
f010c649:	74 28                	je     f010c673 <tst+0xb8>
			chk = 1;
f010c64b:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c652:	eb 1f                	jmp    f010c673 <tst+0xb8>
	case 'b':
		if (n >= v1 && n <= v1)
f010c654:	8b 45 08             	mov    0x8(%ebp),%eax
f010c657:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c65a:	72 1a                	jb     f010c676 <tst+0xbb>
f010c65c:	8b 45 08             	mov    0x8(%ebp),%eax
f010c65f:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c662:	77 12                	ja     f010c676 <tst+0xbb>
			chk = 1;
f010c664:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		break;
f010c66b:	eb 09                	jmp    f010c676 <tst+0xbb>
	case 'l':
		if (n < v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c66d:	90                   	nop
f010c66e:	eb 07                	jmp    f010c677 <tst+0xbc>
	case 'g':
		if (n > v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c670:	90                   	nop
f010c671:	eb 04                	jmp    f010c677 <tst+0xbc>
	case 'e':
		if (n == v1)
			chk = 1;
		else if (inv)
			chk = 1;
		break;
f010c673:	90                   	nop
f010c674:	eb 01                	jmp    f010c677 <tst+0xbc>
	case 'b':
		if (n >= v1 && n <= v1)
			chk = 1;
		break;
f010c676:	90                   	nop
	}

	if (chk == 0) panic("Error!! test fails");
f010c677:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c67b:	75 17                	jne    f010c694 <tst+0xd9>
f010c67d:	83 ec 04             	sub    $0x4,%esp
f010c680:	68 15 6b 13 f0       	push   $0xf0136b15
f010c685:	68 00 02 00 00       	push   $0x200
f010c68a:	68 53 6a 13 f0       	push   $0xf0136a53
f010c68f:	e8 12 3b ff ff       	call   f01001a6 <_panic>
	tstcnt++ ;
f010c694:	a1 10 86 6e f0       	mov    0xf06e8610,%eax
f010c699:	40                   	inc    %eax
f010c69a:	a3 10 86 6e f0       	mov    %eax,0xf06e8610
	return;
f010c69f:	90                   	nop
}
f010c6a0:	c9                   	leave  
f010c6a1:	c3                   	ret    

f010c6a2 <chktst>:

void chktst(uint32 n)
{
f010c6a2:	55                   	push   %ebp
f010c6a3:	89 e5                	mov    %esp,%ebp
f010c6a5:	83 ec 08             	sub    $0x8,%esp
	if (tstcnt == n)
f010c6a8:	a1 10 86 6e f0       	mov    0xf06e8610,%eax
f010c6ad:	3b 45 08             	cmp    0x8(%ebp),%eax
f010c6b0:	75 12                	jne    f010c6c4 <chktst+0x22>
		cprintf("\nCongratulations... test runs successfully\n");
f010c6b2:	83 ec 0c             	sub    $0xc,%esp
f010c6b5:	68 28 6b 13 f0       	push   $0xf0136b28
f010c6ba:	e8 6e 45 ff ff       	call   f0100c2d <cprintf>
f010c6bf:	83 c4 10             	add    $0x10,%esp
	else
		panic("Error!! test fails at final");
}
f010c6c2:	eb 17                	jmp    f010c6db <chktst+0x39>
void chktst(uint32 n)
{
	if (tstcnt == n)
		cprintf("\nCongratulations... test runs successfully\n");
	else
		panic("Error!! test fails at final");
f010c6c4:	83 ec 04             	sub    $0x4,%esp
f010c6c7:	68 54 6b 13 f0       	push   $0xf0136b54
f010c6cc:	68 0a 02 00 00       	push   $0x20a
f010c6d1:	68 53 6a 13 f0       	push   $0xf0136a53
f010c6d6:	e8 cb 3a ff ff       	call   f01001a6 <_panic>
}
f010c6db:	c9                   	leave  
f010c6dc:	c3                   	ret    

f010c6dd <sys_check_LRU_lists>:



//2020
int sys_check_LRU_lists(uint32* active_list_content, uint32* second_list_content, int actual_active_list_size, int actual_second_list_size)
{
f010c6dd:	55                   	push   %ebp
f010c6de:	89 e5                	mov    %esp,%ebp
f010c6e0:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010c6e3:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c6e8:	89 45 e8             	mov    %eax,-0x18(%ebp)
	int active_list_validation = 1;
f010c6eb:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
	int second_list_validation = 1;
f010c6f2:	c7 45 f8 01 00 00 00 	movl   $0x1,-0x8(%ebp)
	struct WorkingSetElement* ptr_WS_element;

	//1- Check active list content if not null
	if(active_list_content != NULL)
f010c6f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f010c6fd:	0f 84 a5 00 00 00    	je     f010c7a8 <sys_check_LRU_lists+0xcb>
	{
		int idx_active_list = 0;
f010c703:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c70a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c70d:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010c713:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c716:	eb 4a                	jmp    f010c762 <sys_check_LRU_lists+0x85>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(active_list_content[idx_active_list], PAGE_SIZE))
f010c718:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c71b:	8b 00                	mov    (%eax),%eax
f010c71d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c720:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c723:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c728:	89 c2                	mov    %eax,%edx
f010c72a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c72d:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c734:	8b 45 08             	mov    0x8(%ebp),%eax
f010c737:	01 c8                	add    %ecx,%eax
f010c739:	8b 00                	mov    (%eax),%eax
f010c73b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010c73e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c741:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c746:	39 c2                	cmp    %eax,%edx
f010c748:	74 09                	je     f010c753 <sys_check_LRU_lists+0x76>
			{
				active_list_validation = 0;
f010c74a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
				break;
f010c751:	eb 3e                	jmp    f010c791 <sys_check_LRU_lists+0xb4>
			}
			idx_active_list++;
f010c753:	ff 45 f0             	incl   -0x10(%ebp)

	//1- Check active list content if not null
	if(active_list_content != NULL)
	{
		int idx_active_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c756:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c759:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c75f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c762:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c766:	74 08                	je     f010c770 <sys_check_LRU_lists+0x93>
f010c768:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c76b:	8b 40 10             	mov    0x10(%eax),%eax
f010c76e:	eb 05                	jmp    f010c775 <sys_check_LRU_lists+0x98>
f010c770:	b8 00 00 00 00       	mov    $0x0,%eax
f010c775:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c778:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f010c77e:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c781:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c787:	85 c0                	test   %eax,%eax
f010c789:	75 8d                	jne    f010c718 <sys_check_LRU_lists+0x3b>
f010c78b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c78f:	75 87                	jne    f010c718 <sys_check_LRU_lists+0x3b>
				active_list_validation = 0;
				break;
			}
			idx_active_list++;
		}
		if(LIST_SIZE(&env->ActiveList) != actual_active_list_size)
f010c791:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c794:	8b 90 8c ea 01 00    	mov    0x1ea8c(%eax),%edx
f010c79a:	8b 45 10             	mov    0x10(%ebp),%eax
f010c79d:	39 c2                	cmp    %eax,%edx
f010c79f:	74 07                	je     f010c7a8 <sys_check_LRU_lists+0xcb>
		{
			active_list_validation = 0;
f010c7a1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

		}
	}

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
f010c7a8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f010c7ac:	0f 84 a5 00 00 00    	je     f010c857 <sys_check_LRU_lists+0x17a>
	{
		int idx_second_list = 0;
f010c7b2:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c7b9:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c7bc:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f010c7c2:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c7c5:	eb 4a                	jmp    f010c811 <sys_check_LRU_lists+0x134>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) != ROUNDDOWN(second_list_content[idx_second_list], PAGE_SIZE))
f010c7c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c7ca:	8b 00                	mov    (%eax),%eax
f010c7cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010c7cf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010c7d2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c7d7:	89 c2                	mov    %eax,%edx
f010c7d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c7dc:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c7e3:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c7e6:	01 c8                	add    %ecx,%eax
f010c7e8:	8b 00                	mov    (%eax),%eax
f010c7ea:	89 45 d8             	mov    %eax,-0x28(%ebp)
f010c7ed:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010c7f0:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c7f5:	39 c2                	cmp    %eax,%edx
f010c7f7:	74 09                	je     f010c802 <sys_check_LRU_lists+0x125>
			{
				second_list_validation = 0;
f010c7f9:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
				break;
f010c800:	eb 3e                	jmp    f010c840 <sys_check_LRU_lists+0x163>
			}
			idx_second_list++;
f010c802:	ff 45 ec             	incl   -0x14(%ebp)

	//2- Check second chance list content if not null
	if(second_list_content != NULL)
	{
		int idx_second_list = 0;
		LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c805:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c808:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c80e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010c811:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c815:	74 08                	je     f010c81f <sys_check_LRU_lists+0x142>
f010c817:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c81a:	8b 40 10             	mov    0x10(%eax),%eax
f010c81d:	eb 05                	jmp    f010c824 <sys_check_LRU_lists+0x147>
f010c81f:	b8 00 00 00 00       	mov    $0x0,%eax
f010c824:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010c827:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010c82d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c830:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c836:	85 c0                	test   %eax,%eax
f010c838:	75 8d                	jne    f010c7c7 <sys_check_LRU_lists+0xea>
f010c83a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010c83e:	75 87                	jne    f010c7c7 <sys_check_LRU_lists+0xea>
				second_list_validation = 0;
				break;
			}
			idx_second_list++;
		}
		if(LIST_SIZE(&env->SecondList) != actual_second_list_size)
f010c840:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c843:	8b 90 9c ea 01 00    	mov    0x1ea9c(%eax),%edx
f010c849:	8b 45 14             	mov    0x14(%ebp),%eax
f010c84c:	39 c2                	cmp    %eax,%edx
f010c84e:	74 07                	je     f010c857 <sys_check_LRU_lists+0x17a>
			second_list_validation = 0;
f010c850:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	}
	return active_list_validation&second_list_validation;
f010c857:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c85a:	23 45 f8             	and    -0x8(%ebp),%eax
}
f010c85d:	c9                   	leave  
f010c85e:	c3                   	ret    

f010c85f <sys_check_LRU_lists_free>:



//2020
int sys_check_LRU_lists_free(uint32* list_content, int list_size)
{
f010c85f:	55                   	push   %ebp
f010c860:	89 e5                	mov    %esp,%ebp
f010c862:	83 ec 30             	sub    $0x30,%esp
	struct Env* env = curenv;
f010c865:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f010c86a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int list_validation_count = 0;
f010c86d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c874:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c877:	8b 80 80 ea 01 00    	mov    0x1ea80(%eax),%eax
f010c87d:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c880:	eb 65                	jmp    f010c8e7 <sys_check_LRU_lists_free+0x88>
	{
		for(int var = 0; var < list_size; var++)
f010c882:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010c889:	eb 3a                	jmp    f010c8c5 <sys_check_LRU_lists_free+0x66>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010c88b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c88e:	8b 00                	mov    (%eax),%eax
f010c890:	89 45 e0             	mov    %eax,-0x20(%ebp)
f010c893:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010c896:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c89b:	89 c2                	mov    %eax,%edx
f010c89d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c8a0:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c8a7:	8b 45 08             	mov    0x8(%ebp),%eax
f010c8aa:	01 c8                	add    %ecx,%eax
f010c8ac:	8b 00                	mov    (%eax),%eax
f010c8ae:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010c8b1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010c8b4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c8b9:	39 c2                	cmp    %eax,%edx
f010c8bb:	75 05                	jne    f010c8c2 <sys_check_LRU_lists_free+0x63>
			{
				list_validation_count++;
f010c8bd:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010c8c0:	eb 0b                	jmp    f010c8cd <sys_check_LRU_lists_free+0x6e>
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
	{
		for(int var = 0; var < list_size; var++)
f010c8c2:	ff 45 f4             	incl   -0xc(%ebp)
f010c8c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010c8c8:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c8cb:	7c be                	jl     f010c88b <sys_check_LRU_lists_free+0x2c>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010c8cd:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010c8d1:	7e 08                	jle    f010c8db <sys_check_LRU_lists_free+0x7c>
			return list_validation_count;
f010c8d3:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c8d6:	e9 ed 00 00 00       	jmp    f010c9c8 <sys_check_LRU_lists_free+0x169>
	struct Env* env = curenv;
	int list_validation_count = 0;
	struct WorkingSetElement* ptr_WS_element;


	LIST_FOREACH(ptr_WS_element, &(env->ActiveList))
f010c8db:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c8de:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c8e4:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c8e7:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c8eb:	74 08                	je     f010c8f5 <sys_check_LRU_lists_free+0x96>
f010c8ed:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c8f0:	8b 40 10             	mov    0x10(%eax),%eax
f010c8f3:	eb 05                	jmp    f010c8fa <sys_check_LRU_lists_free+0x9b>
f010c8f5:	b8 00 00 00 00       	mov    $0x0,%eax
f010c8fa:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c8fd:	89 82 88 ea 01 00    	mov    %eax,0x1ea88(%edx)
f010c903:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c906:	8b 80 88 ea 01 00    	mov    0x1ea88(%eax),%eax
f010c90c:	85 c0                	test   %eax,%eax
f010c90e:	0f 85 6e ff ff ff    	jne    f010c882 <sys_check_LRU_lists_free+0x23>
f010c914:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c918:	0f 85 64 ff ff ff    	jne    f010c882 <sys_check_LRU_lists_free+0x23>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c91e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c921:	8b 80 90 ea 01 00    	mov    0x1ea90(%eax),%eax
f010c927:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c92a:	eb 62                	jmp    f010c98e <sys_check_LRU_lists_free+0x12f>
	{
		for(int var = 0; var < list_size; var++)
f010c92c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010c933:	eb 3a                	jmp    f010c96f <sys_check_LRU_lists_free+0x110>
		{
			if (ROUNDDOWN(ptr_WS_element->virtual_address, PAGE_SIZE) == ROUNDDOWN(list_content[var], PAGE_SIZE))
f010c935:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c938:	8b 00                	mov    (%eax),%eax
f010c93a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f010c93d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010c940:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c945:	89 c2                	mov    %eax,%edx
f010c947:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c94a:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010c951:	8b 45 08             	mov    0x8(%ebp),%eax
f010c954:	01 c8                	add    %ecx,%eax
f010c956:	8b 00                	mov    (%eax),%eax
f010c958:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f010c95b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010c95e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f010c963:	39 c2                	cmp    %eax,%edx
f010c965:	75 05                	jne    f010c96c <sys_check_LRU_lists_free+0x10d>
			{
				list_validation_count++;
f010c967:	ff 45 fc             	incl   -0x4(%ebp)
				break;
f010c96a:	eb 0b                	jmp    f010c977 <sys_check_LRU_lists_free+0x118>
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
	{
		for(int var = 0; var < list_size; var++)
f010c96c:	ff 45 f0             	incl   -0x10(%ebp)
f010c96f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010c972:	3b 45 0c             	cmp    0xc(%ebp),%eax
f010c975:	7c be                	jl     f010c935 <sys_check_LRU_lists_free+0xd6>
			{
				list_validation_count++;
				break;
			}
		}
		if(list_validation_count > 0)
f010c977:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f010c97b:	7e 05                	jle    f010c982 <sys_check_LRU_lists_free+0x123>
			return list_validation_count;
f010c97d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010c980:	eb 46                	jmp    f010c9c8 <sys_check_LRU_lists_free+0x169>
		if(list_validation_count > 0)
			return list_validation_count;
	}


	LIST_FOREACH(ptr_WS_element, &(env->SecondList))
f010c982:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c985:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c98b:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010c98e:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c992:	74 08                	je     f010c99c <sys_check_LRU_lists_free+0x13d>
f010c994:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010c997:	8b 40 10             	mov    0x10(%eax),%eax
f010c99a:	eb 05                	jmp    f010c9a1 <sys_check_LRU_lists_free+0x142>
f010c99c:	b8 00 00 00 00       	mov    $0x0,%eax
f010c9a1:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010c9a4:	89 82 98 ea 01 00    	mov    %eax,0x1ea98(%edx)
f010c9aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010c9ad:	8b 80 98 ea 01 00    	mov    0x1ea98(%eax),%eax
f010c9b3:	85 c0                	test   %eax,%eax
f010c9b5:	0f 85 71 ff ff ff    	jne    f010c92c <sys_check_LRU_lists_free+0xcd>
f010c9bb:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f010c9bf:	0f 85 67 ff ff ff    	jne    f010c92c <sys_check_LRU_lists_free+0xcd>
			return list_validation_count;

	}


	return list_validation_count;
f010c9c5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f010c9c8:	c9                   	leave  
f010c9c9:	c3                   	ret    

f010c9ca <syscall>:
/*****************************************************************************/
/************************* SYSTEM CALLS DISPATCHER ***************************/
/*****************************************************************************/
// Dispatches to the correct kernel function, passing the arguments.
uint32 syscall(uint32 syscallno, uint32 a1, uint32 a2, uint32 a3, uint32 a4, uint32 a5)
{
f010c9ca:	55                   	push   %ebp
f010c9cb:	89 e5                	mov    %esp,%ebp
f010c9cd:	56                   	push   %esi
f010c9ce:	53                   	push   %ebx
f010c9cf:	83 ec 10             	sub    $0x10,%esp
	// Call the function corresponding to the 'syscallno' parameter.
	// Return any appropriate return value.
	// LAB 3: Your code here.
	switch(syscallno)
f010c9d2:	83 7d 08 30          	cmpl   $0x30,0x8(%ebp)
f010c9d6:	0f 87 0e 04 00 00    	ja     f010cdea <syscall+0x420>
f010c9dc:	8b 45 08             	mov    0x8(%ebp),%eax
f010c9df:	c1 e0 02             	shl    $0x2,%eax
f010c9e2:	05 70 6b 13 f0       	add    $0xf0136b70,%eax
f010c9e7:	8b 00                	mov    (%eax),%eax
f010c9e9:	ff e0                	jmp    *%eax
	{
	case SYS_cputs:
		sys_cputs((const char*)a1,a2,(uint8)a3);
f010c9eb:	8b 45 14             	mov    0x14(%ebp),%eax
f010c9ee:	0f b6 d0             	movzbl %al,%edx
f010c9f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010c9f4:	83 ec 04             	sub    $0x4,%esp
f010c9f7:	52                   	push   %edx
f010c9f8:	ff 75 10             	pushl  0x10(%ebp)
f010c9fb:	50                   	push   %eax
f010c9fc:	e8 eb f4 ff ff       	call   f010beec <sys_cputs>
f010ca01:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ca04:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca09:	e9 e1 03 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_cgetc:
		return sys_cgetc();
f010ca0e:	e8 4e f5 ff ff       	call   f010bf61 <sys_cgetc>
f010ca13:	e9 d7 03 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_calc_req_frames:
		return sys_calculate_required_frames(a1, a2);
f010ca18:	83 ec 08             	sub    $0x8,%esp
f010ca1b:	ff 75 10             	pushl  0x10(%ebp)
f010ca1e:	ff 75 0c             	pushl  0xc(%ebp)
f010ca21:	e8 88 f6 ff ff       	call   f010c0ae <sys_calculate_required_frames>
f010ca26:	83 c4 10             	add    $0x10,%esp
f010ca29:	e9 c1 03 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_calc_free_frames:
		return sys_calculate_free_frames();
f010ca2e:	e8 9d f6 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f010ca33:	e9 b7 03 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_calc_modified_frames:
		return sys_calculate_modified_frames();
f010ca38:	e8 b2 f6 ff ff       	call   f010c0ef <sys_calculate_modified_frames>
f010ca3d:	e9 ad 03 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_calc_notmod_frames:
		return sys_calculate_notmod_frames();
f010ca42:	e8 c2 f6 ff ff       	call   f010c109 <sys_calculate_notmod_frames>
f010ca47:	e9 a3 03 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_pf_calc_allocated_pages:
		return sys_pf_calculate_allocated_pages();
f010ca4c:	e8 2a f7 ff ff       	call   f010c17b <sys_pf_calculate_allocated_pages>
f010ca51:	e9 99 03 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_calculate_pages_tobe_removed_ready_exit:
		return sys_calculate_pages_tobe_removed_ready_exit(a1);
f010ca56:	83 ec 0c             	sub    $0xc,%esp
f010ca59:	ff 75 0c             	pushl  0xc(%ebp)
f010ca5c:	e8 c2 f6 ff ff       	call   f010c123 <sys_calculate_pages_tobe_removed_ready_exit>
f010ca61:	83 c4 10             	add    $0x10,%esp
f010ca64:	e9 86 03 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_scarce_memory:
		sys_scarce_memory();
f010ca69:	e8 cb f6 ff ff       	call   f010c139 <sys_scarce_memory>
		return 0;
f010ca6e:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca73:	e9 77 03 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_free_user_mem:
		sys_free_user_mem(a1, a2);
f010ca78:	83 ec 08             	sub    $0x8,%esp
f010ca7b:	ff 75 10             	pushl  0x10(%ebp)
f010ca7e:	ff 75 0c             	pushl  0xc(%ebp)
f010ca81:	e8 0e f7 ff ff       	call   f010c194 <sys_free_user_mem>
f010ca86:	83 c4 10             	add    $0x10,%esp
		return 0;
f010ca89:	b8 00 00 00 00       	mov    $0x0,%eax
f010ca8e:	e9 5c 03 00 00       	jmp    f010cdef <syscall+0x425>
		break;
		//======================
	case SYS_allocate_page:
		__sys_allocate_page((void*)a1, a2);
f010ca93:	8b 55 10             	mov    0x10(%ebp),%edx
f010ca96:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ca99:	83 ec 08             	sub    $0x8,%esp
f010ca9c:	52                   	push   %edx
f010ca9d:	50                   	push   %eax
f010ca9e:	e8 d1 f4 ff ff       	call   f010bf74 <__sys_allocate_page>
f010caa3:	83 c4 10             	add    $0x10,%esp
		return 0;
f010caa6:	b8 00 00 00 00       	mov    $0x0,%eax
f010caab:	e9 3f 03 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_map_frame:
		__sys_map_frame(a1, (void*)a2, a3, (void*)a4, a5);
f010cab0:	8b 75 1c             	mov    0x1c(%ebp),%esi
f010cab3:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cab6:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cab9:	8b 55 10             	mov    0x10(%ebp),%edx
f010cabc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cabf:	83 ec 0c             	sub    $0xc,%esp
f010cac2:	56                   	push   %esi
f010cac3:	53                   	push   %ebx
f010cac4:	51                   	push   %ecx
f010cac5:	52                   	push   %edx
f010cac6:	50                   	push   %eax
f010cac7:	e8 a8 f5 ff ff       	call   f010c074 <__sys_map_frame>
f010cacc:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cacf:	b8 00 00 00 00       	mov    $0x0,%eax
f010cad4:	e9 16 03 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_unmap_frame:
		__sys_unmap_frame(a1, (void*)a2);
f010cad9:	8b 55 10             	mov    0x10(%ebp),%edx
f010cadc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cadf:	83 ec 08             	sub    $0x8,%esp
f010cae2:	52                   	push   %edx
f010cae3:	50                   	push   %eax
f010cae4:	e8 a8 f5 ff ff       	call   f010c091 <__sys_unmap_frame>
f010cae9:	83 c4 10             	add    $0x10,%esp
		return 0;
f010caec:	b8 00 00 00 00       	mov    $0x0,%eax
f010caf1:	e9 f9 02 00 00       	jmp    f010cdef <syscall+0x425>
		break;

		//2022
	case SYS_allocate_chunk_in_mem:
		sys_allocate_chunk(a1, (uint32)a2, a3);
f010caf6:	83 ec 04             	sub    $0x4,%esp
f010caf9:	ff 75 14             	pushl  0x14(%ebp)
f010cafc:	ff 75 10             	pushl  0x10(%ebp)
f010caff:	ff 75 0c             	pushl  0xc(%ebp)
f010cb02:	e8 ef f6 ff ff       	call   f010c1f6 <sys_allocate_chunk>
f010cb07:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cb0a:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb0f:	e9 db 02 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_disableINTR:
		sys_disable_interrupt();
f010cb14:	e8 38 f7 ff ff       	call   f010c251 <sys_disable_interrupt>
		return 0;
f010cb19:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb1e:	e9 cc 02 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_enableINTR:
		sys_enable_interrupt();
f010cb23:	e8 43 f7 ff ff       	call   f010c26b <sys_enable_interrupt>
		return 0;
f010cb28:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb2d:	e9 bd 02 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_cputc:
		sys_cputc((const char)a1);
f010cb32:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cb35:	0f be c0             	movsbl %al,%eax
f010cb38:	83 ec 0c             	sub    $0xc,%esp
f010cb3b:	50                   	push   %eax
f010cb3c:	e8 fc f3 ff ff       	call   f010bf3d <sys_cputc>
f010cb41:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cb44:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb49:	e9 a1 02 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_clearFFL:
		sys_clearFFL((const char)a1);
f010cb4e:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cb51:	0f be c0             	movsbl %al,%eax
f010cb54:	83 ec 0c             	sub    $0xc,%esp
f010cb57:	50                   	push   %eax
f010cb58:	e8 ea f5 ff ff       	call   f010c147 <sys_clearFFL>
f010cb5d:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cb60:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb65:	e9 85 02 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_create_semaphore:
		return sys_createSemaphore((char*)a1, a2);
f010cb6a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cb6d:	83 ec 08             	sub    $0x8,%esp
f010cb70:	ff 75 10             	pushl  0x10(%ebp)
f010cb73:	50                   	push   %eax
f010cb74:	e8 0c f7 ff ff       	call   f010c285 <sys_createSemaphore>
f010cb79:	83 c4 10             	add    $0x10,%esp
f010cb7c:	e9 6e 02 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_wait_semaphore:
		sys_waitSemaphore((int32)a1, (char*)a2);
f010cb81:	8b 55 10             	mov    0x10(%ebp),%edx
f010cb84:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cb87:	83 ec 08             	sub    $0x8,%esp
f010cb8a:	52                   	push   %edx
f010cb8b:	50                   	push   %eax
f010cb8c:	e8 16 f7 ff ff       	call   f010c2a7 <sys_waitSemaphore>
f010cb91:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cb94:	b8 00 00 00 00       	mov    $0x0,%eax
f010cb99:	e9 51 02 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_signal_semaphore:
		sys_signalSemaphore((int32)a1, (char*)a2);
f010cb9e:	8b 55 10             	mov    0x10(%ebp),%edx
f010cba1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cba4:	83 ec 08             	sub    $0x8,%esp
f010cba7:	52                   	push   %edx
f010cba8:	50                   	push   %eax
f010cba9:	e8 13 f7 ff ff       	call   f010c2c1 <sys_signalSemaphore>
f010cbae:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cbb1:	b8 00 00 00 00       	mov    $0x0,%eax
f010cbb6:	e9 34 02 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_get_semaphore_value:
		return sys_getSemaphoreValue((int32)a1, (char*)a2);
f010cbbb:	8b 55 10             	mov    0x10(%ebp),%edx
f010cbbe:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cbc1:	83 ec 08             	sub    $0x8,%esp
f010cbc4:	52                   	push   %edx
f010cbc5:	50                   	push   %eax
f010cbc6:	e8 10 f7 ff ff       	call   f010c2db <sys_getSemaphoreValue>
f010cbcb:	83 c4 10             	add    $0x10,%esp
f010cbce:	e9 1c 02 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_create_shared_object:
		return sys_createSharedObject((char*)a1, a2, a3, (void*)a4);
f010cbd3:	8b 4d 18             	mov    0x18(%ebp),%ecx
f010cbd6:	8b 45 14             	mov    0x14(%ebp),%eax
f010cbd9:	0f b6 d0             	movzbl %al,%edx
f010cbdc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cbdf:	51                   	push   %ecx
f010cbe0:	52                   	push   %edx
f010cbe1:	ff 75 10             	pushl  0x10(%ebp)
f010cbe4:	50                   	push   %eax
f010cbe5:	e8 4e f7 ff ff       	call   f010c338 <sys_createSharedObject>
f010cbea:	83 c4 10             	add    $0x10,%esp
f010cbed:	e9 fd 01 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_get_shared_object:
		return sys_getSharedObject((int32)a1, (char*)a2, (void*)a3);
f010cbf2:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cbf5:	8b 55 10             	mov    0x10(%ebp),%edx
f010cbf8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cbfb:	83 ec 04             	sub    $0x4,%esp
f010cbfe:	51                   	push   %ecx
f010cbff:	52                   	push   %edx
f010cc00:	50                   	push   %eax
f010cc01:	e8 7b f7 ff ff       	call   f010c381 <sys_getSharedObject>
f010cc06:	83 c4 10             	add    $0x10,%esp
f010cc09:	e9 e1 01 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_free_shared_object:
		return sys_freeSharedObject((int32)a1, (void *)a2);
f010cc0e:	8b 55 10             	mov    0x10(%ebp),%edx
f010cc11:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc14:	83 ec 08             	sub    $0x8,%esp
f010cc17:	52                   	push   %edx
f010cc18:	50                   	push   %eax
f010cc19:	e8 7f f7 ff ff       	call   f010c39d <sys_freeSharedObject>
f010cc1e:	83 c4 10             	add    $0x10,%esp
f010cc21:	e9 c9 01 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_get_size_of_shared_object:
		return sys_getSizeOfSharedObject((int32)a1, (char*)a2);
f010cc26:	8b 55 10             	mov    0x10(%ebp),%edx
f010cc29:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc2c:	83 ec 08             	sub    $0x8,%esp
f010cc2f:	52                   	push   %edx
f010cc30:	50                   	push   %eax
f010cc31:	e8 32 f7 ff ff       	call   f010c368 <sys_getSizeOfSharedObject>
f010cc36:	83 c4 10             	add    $0x10,%esp
f010cc39:	e9 b1 01 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_get_max_shares:
		return sys_getMaxShares();
f010cc3e:	e8 73 f7 ff ff       	call   f010c3b6 <sys_getMaxShares>
f010cc43:	e9 a7 01 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_create_env:
		return sys_create_env((char*)a1, (uint32)a2, (uint32)a3, (uint32)a4);
f010cc48:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc4b:	ff 75 18             	pushl  0x18(%ebp)
f010cc4e:	ff 75 14             	pushl  0x14(%ebp)
f010cc51:	ff 75 10             	pushl  0x10(%ebp)
f010cc54:	50                   	push   %eax
f010cc55:	e8 86 f8 ff ff       	call   f010c4e0 <sys_create_env>
f010cc5a:	83 c4 10             	add    $0x10,%esp
f010cc5d:	e9 8d 01 00 00       	jmp    f010cdef <syscall+0x425>
		break;

	case SYS_run_env:
		sys_run_env((int32)a1);
f010cc62:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc65:	83 ec 0c             	sub    $0xc,%esp
f010cc68:	50                   	push   %eax
f010cc69:	e8 b2 f8 ff ff       	call   f010c520 <sys_run_env>
f010cc6e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cc71:	b8 00 00 00 00       	mov    $0x0,%eax
f010cc76:	e9 74 01 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_getenvindex:
		return sys_getenvindex();
f010cc7b:	e8 4d f7 ff ff       	call   f010c3cd <sys_getenvindex>
f010cc80:	e9 6a 01 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_getenvid:
		return sys_getenvid();
f010cc85:	e8 36 f7 ff ff       	call   f010c3c0 <sys_getenvid>
f010cc8a:	e9 60 01 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_getparentenvid:
		return sys_getparentenvid();
f010cc8f:	e8 99 f7 ff ff       	call   f010c42d <sys_getparentenvid>
f010cc94:	e9 56 01 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_destroy_env:
		return sys_destroy_env(a1);
f010cc99:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cc9c:	83 ec 0c             	sub    $0xc,%esp
f010cc9f:	50                   	push   %eax
f010cca0:	e8 95 f7 ff ff       	call   f010c43a <sys_destroy_env>
f010cca5:	83 c4 10             	add    $0x10,%esp
f010cca8:	e9 42 01 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_exit_env:
		sys_exit_env();
f010ccad:	e8 20 f8 ff ff       	call   f010c4d2 <sys_exit_env>
		return 0;
f010ccb2:	b8 00 00 00 00       	mov    $0x0,%eax
f010ccb7:	e9 33 01 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_get_virtual_time:
	{
		struct uint64 res = sys_get_virtual_time();
f010ccbc:	8d 45 e8             	lea    -0x18(%ebp),%eax
f010ccbf:	83 ec 0c             	sub    $0xc,%esp
f010ccc2:	50                   	push   %eax
f010ccc3:	e8 70 f8 ff ff       	call   f010c538 <sys_get_virtual_time>
f010ccc8:	83 c4 0c             	add    $0xc,%esp
		uint32* ptrlow = ((uint32*)a1);
f010cccb:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ccce:	89 45 f4             	mov    %eax,-0xc(%ebp)
		uint32* ptrhi = ((uint32*)a2);
f010ccd1:	8b 45 10             	mov    0x10(%ebp),%eax
f010ccd4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		*ptrlow = res.low;
f010ccd7:	8b 55 e8             	mov    -0x18(%ebp),%edx
f010ccda:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ccdd:	89 10                	mov    %edx,(%eax)
		*ptrhi = res.hi;
f010ccdf:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010cce2:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cce5:	89 10                	mov    %edx,(%eax)
		return 0;
f010cce7:	b8 00 00 00 00       	mov    $0x0,%eax
f010ccec:	e9 fe 00 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	}
	case SYS_move_user_mem:
		sys_move_user_mem(a1, a2, a3);
f010ccf1:	83 ec 04             	sub    $0x4,%esp
f010ccf4:	ff 75 14             	pushl  0x14(%ebp)
f010ccf7:	ff 75 10             	pushl  0x10(%ebp)
f010ccfa:	ff 75 0c             	pushl  0xc(%ebp)
f010ccfd:	e8 17 f5 ff ff       	call   f010c219 <sys_move_user_mem>
f010cd02:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cd05:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd0a:	e9 e0 00 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_rcr2:
		return sys_rcr2();
f010cd0f:	e8 53 f8 ff ff       	call   f010c567 <sys_rcr2>
f010cd14:	e9 d6 00 00 00       	jmp    f010cdef <syscall+0x425>
		break;
	case SYS_bypassPageFault:
		sys_bypassPageFault(a1);
f010cd19:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cd1c:	0f b6 c0             	movzbl %al,%eax
f010cd1f:	83 ec 0c             	sub    $0xc,%esp
f010cd22:	50                   	push   %eax
f010cd23:	e8 51 f8 ff ff       	call   f010c579 <sys_bypassPageFault>
f010cd28:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cd2b:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd30:	e9 ba 00 00 00       	jmp    f010cdef <syscall+0x425>

	case SYS_rsttst:
		rsttst();
f010cd35:	e8 56 f8 ff ff       	call   f010c590 <rsttst>
		return 0;
f010cd3a:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd3f:	e9 ab 00 00 00       	jmp    f010cdef <syscall+0x425>
	case SYS_inctst:
		inctst();
f010cd44:	e8 57 f8 ff ff       	call   f010c5a0 <inctst>
		return 0;
f010cd49:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd4e:	e9 9c 00 00 00       	jmp    f010cdef <syscall+0x425>
	case SYS_chktst:
		chktst(a1);
f010cd53:	83 ec 0c             	sub    $0xc,%esp
f010cd56:	ff 75 0c             	pushl  0xc(%ebp)
f010cd59:	e8 44 f9 ff ff       	call   f010c6a2 <chktst>
f010cd5e:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cd61:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd66:	e9 84 00 00 00       	jmp    f010cdef <syscall+0x425>
	case SYS_gettst:
		return gettst();
f010cd6b:	e8 41 f8 ff ff       	call   f010c5b1 <gettst>
f010cd70:	eb 7d                	jmp    f010cdef <syscall+0x425>
	case SYS_testNum:
		tst(a1, a2, a3, (char)a4, a5);
f010cd72:	8b 55 1c             	mov    0x1c(%ebp),%edx
f010cd75:	8b 45 18             	mov    0x18(%ebp),%eax
f010cd78:	0f be c0             	movsbl %al,%eax
f010cd7b:	83 ec 0c             	sub    $0xc,%esp
f010cd7e:	52                   	push   %edx
f010cd7f:	50                   	push   %eax
f010cd80:	ff 75 14             	pushl  0x14(%ebp)
f010cd83:	ff 75 10             	pushl  0x10(%ebp)
f010cd86:	ff 75 0c             	pushl  0xc(%ebp)
f010cd89:	e8 2d f8 ff ff       	call   f010c5bb <tst>
f010cd8e:	83 c4 20             	add    $0x20,%esp
		return 0;
f010cd91:	b8 00 00 00 00       	mov    $0x0,%eax
f010cd96:	eb 57                	jmp    f010cdef <syscall+0x425>

	case SYS_get_heap_strategy:
		return sys_get_heap_strategy();
f010cd98:	e8 9c f4 ff ff       	call   f010c239 <sys_get_heap_strategy>
f010cd9d:	eb 50                	jmp    f010cdef <syscall+0x425>

	case SYS_set_heap_strategy:
		sys_set_uheap_strategy(a1);
f010cd9f:	83 ec 0c             	sub    $0xc,%esp
f010cda2:	ff 75 0c             	pushl  0xc(%ebp)
f010cda5:	e8 99 f4 ff ff       	call   f010c243 <sys_set_uheap_strategy>
f010cdaa:	83 c4 10             	add    $0x10,%esp
		return 0;
f010cdad:	b8 00 00 00 00       	mov    $0x0,%eax
f010cdb2:	eb 3b                	jmp    f010cdef <syscall+0x425>

	case SYS_check_LRU_lists:
		return sys_check_LRU_lists((uint32*)a1, (uint32*)a2, (int)a3, (int)a4);
f010cdb4:	8b 5d 18             	mov    0x18(%ebp),%ebx
f010cdb7:	8b 4d 14             	mov    0x14(%ebp),%ecx
f010cdba:	8b 55 10             	mov    0x10(%ebp),%edx
f010cdbd:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdc0:	53                   	push   %ebx
f010cdc1:	51                   	push   %ecx
f010cdc2:	52                   	push   %edx
f010cdc3:	50                   	push   %eax
f010cdc4:	e8 14 f9 ff ff       	call   f010c6dd <sys_check_LRU_lists>
f010cdc9:	83 c4 10             	add    $0x10,%esp
f010cdcc:	eb 21                	jmp    f010cdef <syscall+0x425>

	case SYS_check_LRU_lists_free:
		return sys_check_LRU_lists_free((uint32*)a1, (int)a2);
f010cdce:	8b 55 10             	mov    0x10(%ebp),%edx
f010cdd1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdd4:	83 ec 08             	sub    $0x8,%esp
f010cdd7:	52                   	push   %edx
f010cdd8:	50                   	push   %eax
f010cdd9:	e8 81 fa ff ff       	call   f010c85f <sys_check_LRU_lists_free>
f010cdde:	83 c4 10             	add    $0x10,%esp
f010cde1:	eb 0c                	jmp    f010cdef <syscall+0x425>

	case NSYSCALLS:
		return 	-E_INVAL;
f010cde3:	b8 03 00 00 00       	mov    $0x3,%eax
f010cde8:	eb 05                	jmp    f010cdef <syscall+0x425>
		break;
	}
	//panic("syscall not implemented");
	return -E_INVAL;
f010cdea:	b8 03 00 00 00       	mov    $0x3,%eax
}
f010cdef:	8d 65 f8             	lea    -0x8(%ebp),%esp
f010cdf2:	5b                   	pop    %ebx
f010cdf3:	5e                   	pop    %esi
f010cdf4:	5d                   	pop    %ebp
f010cdf5:	c3                   	ret    

f010cdf6 <stab_binsearch>:
//	will exit setting left = 118, right = 554.
//
static void
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
f010cdf6:	55                   	push   %ebp
f010cdf7:	89 e5                	mov    %esp,%ebp
f010cdf9:	83 ec 20             	sub    $0x20,%esp
	int l = *region_left, r = *region_right, any_matches = 0;
f010cdfc:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cdff:	8b 00                	mov    (%eax),%eax
f010ce01:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010ce04:	8b 45 10             	mov    0x10(%ebp),%eax
f010ce07:	8b 00                	mov    (%eax),%eax
f010ce09:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010ce0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (l <= r) {
f010ce13:	e9 ca 00 00 00       	jmp    f010cee2 <stab_binsearch+0xec>
		int true_m = (l + r) / 2, m = true_m;
f010ce18:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010ce1b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ce1e:	01 d0                	add    %edx,%eax
f010ce20:	89 c2                	mov    %eax,%edx
f010ce22:	c1 ea 1f             	shr    $0x1f,%edx
f010ce25:	01 d0                	add    %edx,%eax
f010ce27:	d1 f8                	sar    %eax
f010ce29:	89 45 ec             	mov    %eax,-0x14(%ebp)
f010ce2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ce2f:	89 45 f0             	mov    %eax,-0x10(%ebp)

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010ce32:	eb 03                	jmp    f010ce37 <stab_binsearch+0x41>
			m--;
f010ce34:	ff 4d f0             	decl   -0x10(%ebp)

	while (l <= r) {
		int true_m = (l + r) / 2, m = true_m;

		// search for earliest stab with right type
		while (m >= l && stabs[m].n_type != type)
f010ce37:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce3a:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010ce3d:	7c 1e                	jl     f010ce5d <stab_binsearch+0x67>
f010ce3f:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ce42:	89 d0                	mov    %edx,%eax
f010ce44:	01 c0                	add    %eax,%eax
f010ce46:	01 d0                	add    %edx,%eax
f010ce48:	c1 e0 02             	shl    $0x2,%eax
f010ce4b:	89 c2                	mov    %eax,%edx
f010ce4d:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce50:	01 d0                	add    %edx,%eax
f010ce52:	8a 40 04             	mov    0x4(%eax),%al
f010ce55:	0f b6 c0             	movzbl %al,%eax
f010ce58:	3b 45 14             	cmp    0x14(%ebp),%eax
f010ce5b:	75 d7                	jne    f010ce34 <stab_binsearch+0x3e>
			m--;
		if (m < l) {	// no match in [l, m]
f010ce5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ce60:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010ce63:	7d 09                	jge    f010ce6e <stab_binsearch+0x78>
			l = true_m + 1;
f010ce65:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ce68:	40                   	inc    %eax
f010ce69:	89 45 fc             	mov    %eax,-0x4(%ebp)
			continue;
f010ce6c:	eb 74                	jmp    f010cee2 <stab_binsearch+0xec>
		}

		// actual binary search
		any_matches = 1;
f010ce6e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
		if (stabs[m].n_value < addr) {
f010ce75:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ce78:	89 d0                	mov    %edx,%eax
f010ce7a:	01 c0                	add    %eax,%eax
f010ce7c:	01 d0                	add    %edx,%eax
f010ce7e:	c1 e0 02             	shl    $0x2,%eax
f010ce81:	89 c2                	mov    %eax,%edx
f010ce83:	8b 45 08             	mov    0x8(%ebp),%eax
f010ce86:	01 d0                	add    %edx,%eax
f010ce88:	8b 40 08             	mov    0x8(%eax),%eax
f010ce8b:	3b 45 18             	cmp    0x18(%ebp),%eax
f010ce8e:	73 11                	jae    f010cea1 <stab_binsearch+0xab>
			*region_left = m;
f010ce90:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ce93:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ce96:	89 10                	mov    %edx,(%eax)
			l = true_m + 1;
f010ce98:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010ce9b:	40                   	inc    %eax
f010ce9c:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010ce9f:	eb 41                	jmp    f010cee2 <stab_binsearch+0xec>
		} else if (stabs[m].n_value > addr) {
f010cea1:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cea4:	89 d0                	mov    %edx,%eax
f010cea6:	01 c0                	add    %eax,%eax
f010cea8:	01 d0                	add    %edx,%eax
f010ceaa:	c1 e0 02             	shl    $0x2,%eax
f010cead:	89 c2                	mov    %eax,%edx
f010ceaf:	8b 45 08             	mov    0x8(%ebp),%eax
f010ceb2:	01 d0                	add    %edx,%eax
f010ceb4:	8b 40 08             	mov    0x8(%eax),%eax
f010ceb7:	3b 45 18             	cmp    0x18(%ebp),%eax
f010ceba:	76 14                	jbe    f010ced0 <stab_binsearch+0xda>
			*region_right = m - 1;
f010cebc:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cebf:	8d 50 ff             	lea    -0x1(%eax),%edx
f010cec2:	8b 45 10             	mov    0x10(%ebp),%eax
f010cec5:	89 10                	mov    %edx,(%eax)
			r = m - 1;
f010cec7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010ceca:	48                   	dec    %eax
f010cecb:	89 45 f8             	mov    %eax,-0x8(%ebp)
f010cece:	eb 12                	jmp    f010cee2 <stab_binsearch+0xec>
		} else {
			// exact match for 'addr', but continue loop to find
			// *region_right
			*region_left = m;
f010ced0:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ced3:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010ced6:	89 10                	mov    %edx,(%eax)
			l = m;
f010ced8:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010cedb:	89 45 fc             	mov    %eax,-0x4(%ebp)
			addr++;
f010cede:	83 45 18 04          	addl   $0x4,0x18(%ebp)
stab_binsearch(const struct Stab *stabs, int *region_left, int *region_right,
	       int type, uint32*  addr)
{
	int l = *region_left, r = *region_right, any_matches = 0;

	while (l <= r) {
f010cee2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010cee5:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f010cee8:	0f 8e 2a ff ff ff    	jle    f010ce18 <stab_binsearch+0x22>
			l = m;
			addr++;
		}
	}

	if (!any_matches)
f010ceee:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010cef2:	75 0f                	jne    f010cf03 <stab_binsearch+0x10d>
		*region_right = *region_left - 1;
f010cef4:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cef7:	8b 00                	mov    (%eax),%eax
f010cef9:	8d 50 ff             	lea    -0x1(%eax),%edx
f010cefc:	8b 45 10             	mov    0x10(%ebp),%eax
f010ceff:	89 10                	mov    %edx,(%eax)
		     l > *region_left && stabs[l].n_type != type;
		     l--)
			/* do nothing */;
		*region_left = l;
	}
}
f010cf01:	eb 3d                	jmp    f010cf40 <stab_binsearch+0x14a>

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010cf03:	8b 45 10             	mov    0x10(%ebp),%eax
f010cf06:	8b 00                	mov    (%eax),%eax
f010cf08:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010cf0b:	eb 03                	jmp    f010cf10 <stab_binsearch+0x11a>
		     l > *region_left && stabs[l].n_type != type;
		     l--)
f010cf0d:	ff 4d fc             	decl   -0x4(%ebp)
	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
		     l > *region_left && stabs[l].n_type != type;
f010cf10:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf13:	8b 00                	mov    (%eax),%eax

	if (!any_matches)
		*region_right = *region_left - 1;
	else {
		// find rightmost region containing 'addr'
		for (l = *region_right;
f010cf15:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f010cf18:	7d 1e                	jge    f010cf38 <stab_binsearch+0x142>
		     l > *region_left && stabs[l].n_type != type;
f010cf1a:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cf1d:	89 d0                	mov    %edx,%eax
f010cf1f:	01 c0                	add    %eax,%eax
f010cf21:	01 d0                	add    %edx,%eax
f010cf23:	c1 e0 02             	shl    $0x2,%eax
f010cf26:	89 c2                	mov    %eax,%edx
f010cf28:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf2b:	01 d0                	add    %edx,%eax
f010cf2d:	8a 40 04             	mov    0x4(%eax),%al
f010cf30:	0f b6 c0             	movzbl %al,%eax
f010cf33:	3b 45 14             	cmp    0x14(%ebp),%eax
f010cf36:	75 d5                	jne    f010cf0d <stab_binsearch+0x117>
		     l--)
			/* do nothing */;
		*region_left = l;
f010cf38:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf3b:	8b 55 fc             	mov    -0x4(%ebp),%edx
f010cf3e:	89 10                	mov    %edx,(%eax)
	}
}
f010cf40:	90                   	nop
f010cf41:	c9                   	leave  
f010cf42:	c3                   	ret    

f010cf43 <debuginfo_eip>:
//	negative if not.  But even if it returns negative it has stored some
//	information into '*info'.
//
int
debuginfo_eip(uint32*  addr, struct Eipdebuginfo *info)
{
f010cf43:	55                   	push   %ebp
f010cf44:	89 e5                	mov    %esp,%ebp
f010cf46:	83 ec 38             	sub    $0x38,%esp
	const struct Stab *stabs, *stab_end;
	const char *stabstr, *stabstr_end;
	int lfile, rfile, lfun, rfun, lline, rline;

	// Initialize *info
	info->eip_file = "<unknown>";
f010cf49:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf4c:	c7 00 34 6c 13 f0    	movl   $0xf0136c34,(%eax)
	info->eip_line = 0;
f010cf52:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf55:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
	info->eip_fn_name = "<unknown>";
f010cf5c:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf5f:	c7 40 08 34 6c 13 f0 	movl   $0xf0136c34,0x8(%eax)
	info->eip_fn_namelen = 9;
f010cf66:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf69:	c7 40 0c 09 00 00 00 	movl   $0x9,0xc(%eax)
	info->eip_fn_addr = addr;
f010cf70:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf73:	8b 55 08             	mov    0x8(%ebp),%edx
f010cf76:	89 50 10             	mov    %edx,0x10(%eax)
	info->eip_fn_narg = 0;
f010cf79:	8b 45 0c             	mov    0xc(%ebp),%eax
f010cf7c:	c7 40 14 00 00 00 00 	movl   $0x0,0x14(%eax)

	// Find the relevant set of stabs
	if ((uint32)addr >= USER_LIMIT) {
f010cf83:	8b 45 08             	mov    0x8(%ebp),%eax
f010cf86:	3d ff ff 7f ef       	cmp    $0xef7fffff,%eax
f010cf8b:	76 1e                	jbe    f010cfab <debuginfo_eip+0x68>
		stabs = __STAB_BEGIN__;
f010cf8d:	c7 45 f4 98 c6 13 f0 	movl   $0xf013c698,-0xc(%ebp)
		stab_end = __STAB_END__;
f010cf94:	c7 45 f0 4c a8 17 f0 	movl   $0xf017a84c,-0x10(%ebp)
		stabstr = __STABSTR_BEGIN__;
f010cf9b:	c7 45 ec 4d a8 17 f0 	movl   $0xf017a84d,-0x14(%ebp)
		stabstr_end = __STABSTR_END__;
f010cfa2:	c7 45 e8 cb 73 18 f0 	movl   $0xf01873cb,-0x18(%ebp)
f010cfa9:	eb 2a                	jmp    f010cfd5 <debuginfo_eip+0x92>
		// The user-application linker script, user/user.ld,
		// puts information about the application's stabs (equivalent
		// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and
		// __STABSTR_END__) in a structure located at virtual address
		// USTABDATA.
		const struct UserStabData *usd = (const struct UserStabData *) USTABDATA;
f010cfab:	c7 45 e0 00 00 20 00 	movl   $0x200000,-0x20(%ebp)

		// Make sure this memory is valid.
		// Return -1 if it is not.  Hint: Call user_mem_check.
		// LAB 3: Your code here.

		stabs = usd->stabs;
f010cfb2:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cfb5:	8b 00                	mov    (%eax),%eax
f010cfb7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		stab_end = usd->stab_end;
f010cfba:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cfbd:	8b 40 04             	mov    0x4(%eax),%eax
f010cfc0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		stabstr = usd->stabstr;
f010cfc3:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cfc6:	8b 40 08             	mov    0x8(%eax),%eax
f010cfc9:	89 45 ec             	mov    %eax,-0x14(%ebp)
		stabstr_end = usd->stabstr_end;
f010cfcc:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010cfcf:	8b 40 0c             	mov    0xc(%eax),%eax
f010cfd2:	89 45 e8             	mov    %eax,-0x18(%ebp)
		// Make sure the STABS and string table memory is valid.
		// LAB 3: Your code here.
	}

	// String table validity checks
	if (stabstr_end <= stabstr || stabstr_end[-1] != 0)
f010cfd5:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cfd8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010cfdb:	76 0a                	jbe    f010cfe7 <debuginfo_eip+0xa4>
f010cfdd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010cfe0:	48                   	dec    %eax
f010cfe1:	8a 00                	mov    (%eax),%al
f010cfe3:	84 c0                	test   %al,%al
f010cfe5:	74 0a                	je     f010cff1 <debuginfo_eip+0xae>
		return -1;
f010cfe7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010cfec:	e9 01 02 00 00       	jmp    f010d1f2 <debuginfo_eip+0x2af>
	// 'eip'.  First, we find the basic source file containing 'eip'.
	// Then, we look in that source file for the function.  Then we look
	// for the line number.

	// Search the entire set of stabs for the source file (type N_SO).
	lfile = 0;
f010cff1:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	rfile = (stab_end - stabs) - 1;
f010cff8:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010cffb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010cffe:	29 c2                	sub    %eax,%edx
f010d000:	89 d0                	mov    %edx,%eax
f010d002:	c1 f8 02             	sar    $0x2,%eax
f010d005:	89 c2                	mov    %eax,%edx
f010d007:	89 d0                	mov    %edx,%eax
f010d009:	c1 e0 02             	shl    $0x2,%eax
f010d00c:	01 d0                	add    %edx,%eax
f010d00e:	c1 e0 02             	shl    $0x2,%eax
f010d011:	01 d0                	add    %edx,%eax
f010d013:	c1 e0 02             	shl    $0x2,%eax
f010d016:	01 d0                	add    %edx,%eax
f010d018:	89 c1                	mov    %eax,%ecx
f010d01a:	c1 e1 08             	shl    $0x8,%ecx
f010d01d:	01 c8                	add    %ecx,%eax
f010d01f:	89 c1                	mov    %eax,%ecx
f010d021:	c1 e1 10             	shl    $0x10,%ecx
f010d024:	01 c8                	add    %ecx,%eax
f010d026:	01 c0                	add    %eax,%eax
f010d028:	01 d0                	add    %edx,%eax
f010d02a:	48                   	dec    %eax
f010d02b:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	stab_binsearch(stabs, &lfile, &rfile, N_SO, addr);
f010d02e:	ff 75 08             	pushl  0x8(%ebp)
f010d031:	6a 64                	push   $0x64
f010d033:	8d 45 d4             	lea    -0x2c(%ebp),%eax
f010d036:	50                   	push   %eax
f010d037:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d03a:	50                   	push   %eax
f010d03b:	ff 75 f4             	pushl  -0xc(%ebp)
f010d03e:	e8 b3 fd ff ff       	call   f010cdf6 <stab_binsearch>
f010d043:	83 c4 14             	add    $0x14,%esp
	if (lfile == 0)
f010d046:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d049:	85 c0                	test   %eax,%eax
f010d04b:	75 0a                	jne    f010d057 <debuginfo_eip+0x114>
		return -1;
f010d04d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f010d052:	e9 9b 01 00 00       	jmp    f010d1f2 <debuginfo_eip+0x2af>

	// Search within that file's stabs for the function definition
	// (N_FUN).
	lfun = lfile;
f010d057:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d05a:	89 45 d0             	mov    %eax,-0x30(%ebp)
	rfun = rfile;
f010d05d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d060:	89 45 cc             	mov    %eax,-0x34(%ebp)
	stab_binsearch(stabs, &lfun, &rfun, N_FUN, addr);
f010d063:	ff 75 08             	pushl  0x8(%ebp)
f010d066:	6a 24                	push   $0x24
f010d068:	8d 45 cc             	lea    -0x34(%ebp),%eax
f010d06b:	50                   	push   %eax
f010d06c:	8d 45 d0             	lea    -0x30(%ebp),%eax
f010d06f:	50                   	push   %eax
f010d070:	ff 75 f4             	pushl  -0xc(%ebp)
f010d073:	e8 7e fd ff ff       	call   f010cdf6 <stab_binsearch>
f010d078:	83 c4 14             	add    $0x14,%esp

	if (lfun <= rfun) {
f010d07b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f010d07e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d081:	39 c2                	cmp    %eax,%edx
f010d083:	0f 8f 86 00 00 00    	jg     f010d10f <debuginfo_eip+0x1cc>
		// stabs[lfun] points to the function name
		// in the string table, but check bounds just in case.
		if (stabs[lfun].n_strx < stabstr_end - stabstr)
f010d089:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d08c:	89 c2                	mov    %eax,%edx
f010d08e:	89 d0                	mov    %edx,%eax
f010d090:	01 c0                	add    %eax,%eax
f010d092:	01 d0                	add    %edx,%eax
f010d094:	c1 e0 02             	shl    $0x2,%eax
f010d097:	89 c2                	mov    %eax,%edx
f010d099:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d09c:	01 d0                	add    %edx,%eax
f010d09e:	8b 00                	mov    (%eax),%eax
f010d0a0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d0a3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d0a6:	29 d1                	sub    %edx,%ecx
f010d0a8:	89 ca                	mov    %ecx,%edx
f010d0aa:	39 d0                	cmp    %edx,%eax
f010d0ac:	73 22                	jae    f010d0d0 <debuginfo_eip+0x18d>
			info->eip_fn_name = stabstr + stabs[lfun].n_strx;
f010d0ae:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d0b1:	89 c2                	mov    %eax,%edx
f010d0b3:	89 d0                	mov    %edx,%eax
f010d0b5:	01 c0                	add    %eax,%eax
f010d0b7:	01 d0                	add    %edx,%eax
f010d0b9:	c1 e0 02             	shl    $0x2,%eax
f010d0bc:	89 c2                	mov    %eax,%edx
f010d0be:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0c1:	01 d0                	add    %edx,%eax
f010d0c3:	8b 10                	mov    (%eax),%edx
f010d0c5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d0c8:	01 c2                	add    %eax,%edx
f010d0ca:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0cd:	89 50 08             	mov    %edx,0x8(%eax)
		info->eip_fn_addr = (uint32*) stabs[lfun].n_value;
f010d0d0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d0d3:	89 c2                	mov    %eax,%edx
f010d0d5:	89 d0                	mov    %edx,%eax
f010d0d7:	01 c0                	add    %eax,%eax
f010d0d9:	01 d0                	add    %edx,%eax
f010d0db:	c1 e0 02             	shl    $0x2,%eax
f010d0de:	89 c2                	mov    %eax,%edx
f010d0e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d0e3:	01 d0                	add    %edx,%eax
f010d0e5:	8b 50 08             	mov    0x8(%eax),%edx
f010d0e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0eb:	89 50 10             	mov    %edx,0x10(%eax)
		addr = (uint32*)(addr - (info->eip_fn_addr));
f010d0ee:	8b 55 08             	mov    0x8(%ebp),%edx
f010d0f1:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d0f4:	8b 40 10             	mov    0x10(%eax),%eax
f010d0f7:	29 c2                	sub    %eax,%edx
f010d0f9:	89 d0                	mov    %edx,%eax
f010d0fb:	c1 f8 02             	sar    $0x2,%eax
f010d0fe:	89 45 08             	mov    %eax,0x8(%ebp)
		// Search within the function definition for the line number.
		lline = lfun;
f010d101:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010d104:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfun;
f010d107:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010d10a:	89 45 dc             	mov    %eax,-0x24(%ebp)
f010d10d:	eb 15                	jmp    f010d124 <debuginfo_eip+0x1e1>
	} else {
		// Couldn't find function stab!  Maybe we're in an assembly
		// file.  Search the whole file for the line number.
		info->eip_fn_addr = addr;
f010d10f:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d112:	8b 55 08             	mov    0x8(%ebp),%edx
f010d115:	89 50 10             	mov    %edx,0x10(%eax)
		lline = lfile;
f010d118:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d11b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		rline = rfile;
f010d11e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d121:	89 45 dc             	mov    %eax,-0x24(%ebp)
	}
	// Ignore stuff after the colon.
	info->eip_fn_namelen = strfind(info->eip_fn_name, ':') - info->eip_fn_name;
f010d124:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d127:	8b 40 08             	mov    0x8(%eax),%eax
f010d12a:	83 ec 08             	sub    $0x8,%esp
f010d12d:	6a 3a                	push   $0x3a
f010d12f:	50                   	push   %eax
f010d130:	e8 ca 34 02 00       	call   f01305ff <strfind>
f010d135:	83 c4 10             	add    $0x10,%esp
f010d138:	89 c2                	mov    %eax,%edx
f010d13a:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d13d:	8b 40 08             	mov    0x8(%eax),%eax
f010d140:	29 c2                	sub    %eax,%edx
f010d142:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d145:	89 50 0c             	mov    %edx,0xc(%eax)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d148:	eb 03                	jmp    f010d14d <debuginfo_eip+0x20a>
	       && stabs[lline].n_type != N_SOL
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
		lline--;
f010d14a:	ff 4d e4             	decl   -0x1c(%ebp)
	// Search backwards from the line number for the relevant filename
	// stab.
	// We can't just use the "lfile" stab because inlined functions
	// can interpolate code from a different file!
	// Such included source files use the N_SOL stab type.
	while (lline >= lfile
f010d14d:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d150:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d153:	7c 4e                	jl     f010d1a3 <debuginfo_eip+0x260>
	       && stabs[lline].n_type != N_SOL
f010d155:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d158:	89 d0                	mov    %edx,%eax
f010d15a:	01 c0                	add    %eax,%eax
f010d15c:	01 d0                	add    %edx,%eax
f010d15e:	c1 e0 02             	shl    $0x2,%eax
f010d161:	89 c2                	mov    %eax,%edx
f010d163:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d166:	01 d0                	add    %edx,%eax
f010d168:	8a 40 04             	mov    0x4(%eax),%al
f010d16b:	3c 84                	cmp    $0x84,%al
f010d16d:	74 34                	je     f010d1a3 <debuginfo_eip+0x260>
	       && (stabs[lline].n_type != N_SO || !stabs[lline].n_value))
f010d16f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d172:	89 d0                	mov    %edx,%eax
f010d174:	01 c0                	add    %eax,%eax
f010d176:	01 d0                	add    %edx,%eax
f010d178:	c1 e0 02             	shl    $0x2,%eax
f010d17b:	89 c2                	mov    %eax,%edx
f010d17d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d180:	01 d0                	add    %edx,%eax
f010d182:	8a 40 04             	mov    0x4(%eax),%al
f010d185:	3c 64                	cmp    $0x64,%al
f010d187:	75 c1                	jne    f010d14a <debuginfo_eip+0x207>
f010d189:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d18c:	89 d0                	mov    %edx,%eax
f010d18e:	01 c0                	add    %eax,%eax
f010d190:	01 d0                	add    %edx,%eax
f010d192:	c1 e0 02             	shl    $0x2,%eax
f010d195:	89 c2                	mov    %eax,%edx
f010d197:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d19a:	01 d0                	add    %edx,%eax
f010d19c:	8b 40 08             	mov    0x8(%eax),%eax
f010d19f:	85 c0                	test   %eax,%eax
f010d1a1:	74 a7                	je     f010d14a <debuginfo_eip+0x207>
		lline--;
	if (lline >= lfile && stabs[lline].n_strx < stabstr_end - stabstr)
f010d1a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010d1a6:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
f010d1a9:	7c 42                	jl     f010d1ed <debuginfo_eip+0x2aa>
f010d1ab:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d1ae:	89 d0                	mov    %edx,%eax
f010d1b0:	01 c0                	add    %eax,%eax
f010d1b2:	01 d0                	add    %edx,%eax
f010d1b4:	c1 e0 02             	shl    $0x2,%eax
f010d1b7:	89 c2                	mov    %eax,%edx
f010d1b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1bc:	01 d0                	add    %edx,%eax
f010d1be:	8b 00                	mov    (%eax),%eax
f010d1c0:	8b 4d e8             	mov    -0x18(%ebp),%ecx
f010d1c3:	8b 55 ec             	mov    -0x14(%ebp),%edx
f010d1c6:	29 d1                	sub    %edx,%ecx
f010d1c8:	89 ca                	mov    %ecx,%edx
f010d1ca:	39 d0                	cmp    %edx,%eax
f010d1cc:	73 1f                	jae    f010d1ed <debuginfo_eip+0x2aa>
		info->eip_file = stabstr + stabs[lline].n_strx;
f010d1ce:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010d1d1:	89 d0                	mov    %edx,%eax
f010d1d3:	01 c0                	add    %eax,%eax
f010d1d5:	01 d0                	add    %edx,%eax
f010d1d7:	c1 e0 02             	shl    $0x2,%eax
f010d1da:	89 c2                	mov    %eax,%edx
f010d1dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d1df:	01 d0                	add    %edx,%eax
f010d1e1:	8b 10                	mov    (%eax),%edx
f010d1e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010d1e6:	01 c2                	add    %eax,%edx
f010d1e8:	8b 45 0c             	mov    0xc(%ebp),%eax
f010d1eb:	89 10                	mov    %edx,(%eax)
	// Set eip_fn_narg to the number of arguments taken by the function,
	// or 0 if there was no containing function.
	// Your code here.


	return 0;
f010d1ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d1f2:	c9                   	leave  
f010d1f3:	c3                   	ret    

f010d1f4 <setPageReplacmentAlgorithmLRU>:
//===============================
// REPLACEMENT STRATEGIES
//===============================
//2020
void setPageReplacmentAlgorithmLRU(int LRU_TYPE)
{
f010d1f4:	55                   	push   %ebp
f010d1f5:	89 e5                	mov    %esp,%ebp
f010d1f7:	83 ec 08             	sub    $0x8,%esp
	assert(LRU_TYPE == PG_REP_LRU_TIME_APPROX || LRU_TYPE == PG_REP_LRU_LISTS_APPROX);
f010d1fa:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f010d1fe:	74 1c                	je     f010d21c <setPageReplacmentAlgorithmLRU+0x28>
f010d200:	83 7d 08 02          	cmpl   $0x2,0x8(%ebp)
f010d204:	74 16                	je     f010d21c <setPageReplacmentAlgorithmLRU+0x28>
f010d206:	68 40 6c 13 f0       	push   $0xf0136c40
f010d20b:	68 8a 6c 13 f0       	push   $0xf0136c8a
f010d210:	6a 18                	push   $0x18
f010d212:	68 9f 6c 13 f0       	push   $0xf0136c9f
f010d217:	e8 8a 2f ff ff       	call   f01001a6 <_panic>
	_PageRepAlgoType = LRU_TYPE ;
f010d21c:	8b 45 08             	mov    0x8(%ebp),%eax
f010d21f:	a3 e4 84 6e f0       	mov    %eax,0xf06e84e4
}
f010d224:	90                   	nop
f010d225:	c9                   	leave  
f010d226:	c3                   	ret    

f010d227 <setPageReplacmentAlgorithmCLOCK>:
void setPageReplacmentAlgorithmCLOCK(){_PageRepAlgoType = PG_REP_CLOCK;}
f010d227:	55                   	push   %ebp
f010d228:	89 e5                	mov    %esp,%ebp
f010d22a:	c7 05 e4 84 6e f0 03 	movl   $0x3,0xf06e84e4
f010d231:	00 00 00 
f010d234:	90                   	nop
f010d235:	5d                   	pop    %ebp
f010d236:	c3                   	ret    

f010d237 <setPageReplacmentAlgorithmFIFO>:
void setPageReplacmentAlgorithmFIFO(){_PageRepAlgoType = PG_REP_FIFO;}
f010d237:	55                   	push   %ebp
f010d238:	89 e5                	mov    %esp,%ebp
f010d23a:	c7 05 e4 84 6e f0 04 	movl   $0x4,0xf06e84e4
f010d241:	00 00 00 
f010d244:	90                   	nop
f010d245:	5d                   	pop    %ebp
f010d246:	c3                   	ret    

f010d247 <setPageReplacmentAlgorithmModifiedCLOCK>:
void setPageReplacmentAlgorithmModifiedCLOCK(){_PageRepAlgoType = PG_REP_MODIFIEDCLOCK;}
f010d247:	55                   	push   %ebp
f010d248:	89 e5                	mov    %esp,%ebp
f010d24a:	c7 05 e4 84 6e f0 05 	movl   $0x5,0xf06e84e4
f010d251:	00 00 00 
f010d254:	90                   	nop
f010d255:	5d                   	pop    %ebp
f010d256:	c3                   	ret    

f010d257 <setPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ void setPageReplacmentAlgorithmDynamicLocal(){_PageRepAlgoType = PG_REP_DYNAMIC_LOCAL;}
f010d257:	55                   	push   %ebp
f010d258:	89 e5                	mov    %esp,%ebp
f010d25a:	c7 05 e4 84 6e f0 07 	movl   $0x7,0xf06e84e4
f010d261:	00 00 00 
f010d264:	90                   	nop
f010d265:	5d                   	pop    %ebp
f010d266:	c3                   	ret    

f010d267 <setPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ void setPageReplacmentAlgorithmNchanceCLOCK(int PageWSMaxSweeps){_PageRepAlgoType = PG_REP_NchanceCLOCK;  page_WS_max_sweeps = PageWSMaxSweeps;}
f010d267:	55                   	push   %ebp
f010d268:	89 e5                	mov    %esp,%ebp
f010d26a:	c7 05 e4 84 6e f0 06 	movl   $0x6,0xf06e84e4
f010d271:	00 00 00 
f010d274:	8b 45 08             	mov    0x8(%ebp),%eax
f010d277:	a3 08 01 68 f0       	mov    %eax,0xf0680108
f010d27c:	90                   	nop
f010d27d:	5d                   	pop    %ebp
f010d27e:	c3                   	ret    

f010d27f <isPageReplacmentAlgorithmLRU>:

//2020
uint32 isPageReplacmentAlgorithmLRU(int LRU_TYPE){return _PageRepAlgoType == LRU_TYPE ? 1 : 0;}
f010d27f:	55                   	push   %ebp
f010d280:	89 e5                	mov    %esp,%ebp
f010d282:	8b 15 e4 84 6e f0    	mov    0xf06e84e4,%edx
f010d288:	8b 45 08             	mov    0x8(%ebp),%eax
f010d28b:	39 c2                	cmp    %eax,%edx
f010d28d:	0f 94 c0             	sete   %al
f010d290:	0f b6 c0             	movzbl %al,%eax
f010d293:	5d                   	pop    %ebp
f010d294:	c3                   	ret    

f010d295 <isPageReplacmentAlgorithmCLOCK>:
uint32 isPageReplacmentAlgorithmCLOCK(){if(_PageRepAlgoType == PG_REP_CLOCK) return 1; return 0;}
f010d295:	55                   	push   %ebp
f010d296:	89 e5                	mov    %esp,%ebp
f010d298:	a1 e4 84 6e f0       	mov    0xf06e84e4,%eax
f010d29d:	83 f8 03             	cmp    $0x3,%eax
f010d2a0:	75 07                	jne    f010d2a9 <isPageReplacmentAlgorithmCLOCK+0x14>
f010d2a2:	b8 01 00 00 00       	mov    $0x1,%eax
f010d2a7:	eb 05                	jmp    f010d2ae <isPageReplacmentAlgorithmCLOCK+0x19>
f010d2a9:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2ae:	5d                   	pop    %ebp
f010d2af:	c3                   	ret    

f010d2b0 <isPageReplacmentAlgorithmFIFO>:
uint32 isPageReplacmentAlgorithmFIFO(){if(_PageRepAlgoType == PG_REP_FIFO) return 1; return 0;}
f010d2b0:	55                   	push   %ebp
f010d2b1:	89 e5                	mov    %esp,%ebp
f010d2b3:	a1 e4 84 6e f0       	mov    0xf06e84e4,%eax
f010d2b8:	83 f8 04             	cmp    $0x4,%eax
f010d2bb:	75 07                	jne    f010d2c4 <isPageReplacmentAlgorithmFIFO+0x14>
f010d2bd:	b8 01 00 00 00       	mov    $0x1,%eax
f010d2c2:	eb 05                	jmp    f010d2c9 <isPageReplacmentAlgorithmFIFO+0x19>
f010d2c4:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2c9:	5d                   	pop    %ebp
f010d2ca:	c3                   	ret    

f010d2cb <isPageReplacmentAlgorithmModifiedCLOCK>:
uint32 isPageReplacmentAlgorithmModifiedCLOCK(){if(_PageRepAlgoType == PG_REP_MODIFIEDCLOCK) return 1; return 0;}
f010d2cb:	55                   	push   %ebp
f010d2cc:	89 e5                	mov    %esp,%ebp
f010d2ce:	a1 e4 84 6e f0       	mov    0xf06e84e4,%eax
f010d2d3:	83 f8 05             	cmp    $0x5,%eax
f010d2d6:	75 07                	jne    f010d2df <isPageReplacmentAlgorithmModifiedCLOCK+0x14>
f010d2d8:	b8 01 00 00 00       	mov    $0x1,%eax
f010d2dd:	eb 05                	jmp    f010d2e4 <isPageReplacmentAlgorithmModifiedCLOCK+0x19>
f010d2df:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2e4:	5d                   	pop    %ebp
f010d2e5:	c3                   	ret    

f010d2e6 <isPageReplacmentAlgorithmDynamicLocal>:
/*2018*/ uint32 isPageReplacmentAlgorithmDynamicLocal(){if(_PageRepAlgoType == PG_REP_DYNAMIC_LOCAL) return 1; return 0;}
f010d2e6:	55                   	push   %ebp
f010d2e7:	89 e5                	mov    %esp,%ebp
f010d2e9:	a1 e4 84 6e f0       	mov    0xf06e84e4,%eax
f010d2ee:	83 f8 07             	cmp    $0x7,%eax
f010d2f1:	75 07                	jne    f010d2fa <isPageReplacmentAlgorithmDynamicLocal+0x14>
f010d2f3:	b8 01 00 00 00       	mov    $0x1,%eax
f010d2f8:	eb 05                	jmp    f010d2ff <isPageReplacmentAlgorithmDynamicLocal+0x19>
f010d2fa:	b8 00 00 00 00       	mov    $0x0,%eax
f010d2ff:	5d                   	pop    %ebp
f010d300:	c3                   	ret    

f010d301 <isPageReplacmentAlgorithmNchanceCLOCK>:
/*2021*/ uint32 isPageReplacmentAlgorithmNchanceCLOCK(){if(_PageRepAlgoType == PG_REP_NchanceCLOCK) return 1; return 0;}
f010d301:	55                   	push   %ebp
f010d302:	89 e5                	mov    %esp,%ebp
f010d304:	a1 e4 84 6e f0       	mov    0xf06e84e4,%eax
f010d309:	83 f8 06             	cmp    $0x6,%eax
f010d30c:	75 07                	jne    f010d315 <isPageReplacmentAlgorithmNchanceCLOCK+0x14>
f010d30e:	b8 01 00 00 00       	mov    $0x1,%eax
f010d313:	eb 05                	jmp    f010d31a <isPageReplacmentAlgorithmNchanceCLOCK+0x19>
f010d315:	b8 00 00 00 00       	mov    $0x0,%eax
f010d31a:	5d                   	pop    %ebp
f010d31b:	c3                   	ret    

f010d31c <enableModifiedBuffer>:

//===============================
// PAGE BUFFERING
//===============================
void enableModifiedBuffer(uint32 enableIt){_EnableModifiedBuffer = enableIt;}
f010d31c:	55                   	push   %ebp
f010d31d:	89 e5                	mov    %esp,%ebp
f010d31f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d322:	a3 ac 84 6e f0       	mov    %eax,0xf06e84ac
f010d327:	90                   	nop
f010d328:	5d                   	pop    %ebp
f010d329:	c3                   	ret    

f010d32a <isModifiedBufferEnabled>:
uint8 isModifiedBufferEnabled(){  return _EnableModifiedBuffer ; }
f010d32a:	55                   	push   %ebp
f010d32b:	89 e5                	mov    %esp,%ebp
f010d32d:	a1 ac 84 6e f0       	mov    0xf06e84ac,%eax
f010d332:	5d                   	pop    %ebp
f010d333:	c3                   	ret    

f010d334 <enableBuffering>:

void enableBuffering(uint32 enableIt){_EnableBuffering = enableIt;}
f010d334:	55                   	push   %ebp
f010d335:	89 e5                	mov    %esp,%ebp
f010d337:	8b 45 08             	mov    0x8(%ebp),%eax
f010d33a:	a3 ec 84 6e f0       	mov    %eax,0xf06e84ec
f010d33f:	90                   	nop
f010d340:	5d                   	pop    %ebp
f010d341:	c3                   	ret    

f010d342 <isBufferingEnabled>:
uint8 isBufferingEnabled(){  return _EnableBuffering ; }
f010d342:	55                   	push   %ebp
f010d343:	89 e5                	mov    %esp,%ebp
f010d345:	a1 ec 84 6e f0       	mov    0xf06e84ec,%eax
f010d34a:	5d                   	pop    %ebp
f010d34b:	c3                   	ret    

f010d34c <setModifiedBufferLength>:

void setModifiedBufferLength(uint32 length) { _ModifiedBufferLength = length;}
f010d34c:	55                   	push   %ebp
f010d34d:	89 e5                	mov    %esp,%ebp
f010d34f:	8b 45 08             	mov    0x8(%ebp),%eax
f010d352:	a3 0c 85 6e f0       	mov    %eax,0xf06e850c
f010d357:	90                   	nop
f010d358:	5d                   	pop    %ebp
f010d359:	c3                   	ret    

f010d35a <getModifiedBufferLength>:
uint32 getModifiedBufferLength() { return _ModifiedBufferLength;}
f010d35a:	55                   	push   %ebp
f010d35b:	89 e5                	mov    %esp,%ebp
f010d35d:	a1 0c 85 6e f0       	mov    0xf06e850c,%eax
f010d362:	5d                   	pop    %ebp
f010d363:	c3                   	ret    

f010d364 <table_fault_handler>:
// FAULT HANDLERS
//===============================

//Handle the table fault
void table_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d364:	55                   	push   %ebp
f010d365:	89 e5                	mov    %esp,%ebp
f010d367:	83 ec 18             	sub    $0x18,%esp
	{
		ptr_table = create_page_table(curenv->env_page_directory, (uint32)fault_va);
	}
#else
	{
		__static_cpt(curenv->env_page_directory, (uint32)fault_va, &ptr_table);
f010d36a:	8b 45 08             	mov    0x8(%ebp),%eax
f010d36d:	8b 40 5c             	mov    0x5c(%eax),%eax
f010d370:	83 ec 04             	sub    $0x4,%esp
f010d373:	8d 55 f4             	lea    -0xc(%ebp),%edx
f010d376:	52                   	push   %edx
f010d377:	ff 75 0c             	pushl  0xc(%ebp)
f010d37a:	50                   	push   %eax
f010d37b:	e8 17 97 ff ff       	call   f0106a97 <__static_cpt>
f010d380:	83 c4 10             	add    $0x10,%esp
	}
#endif
}
f010d383:	90                   	nop
f010d384:	c9                   	leave  
f010d385:	c3                   	ret    

f010d386 <page_fault_handler>:

//Handle the page fault

void page_fault_handler(struct Env * curenv, uint32 fault_va)
{
f010d386:	55                   	push   %ebp
f010d387:	89 e5                	mov    %esp,%ebp
f010d389:	83 ec 08             	sub    $0x8,%esp
	//TODO: [PROJECT MS3] [FAULT HANDLER] page_fault_handler
	// Write your code here, remove the panic and write your code
	panic("page_fault_handler() is not implemented yet...!!");
f010d38c:	83 ec 04             	sub    $0x4,%esp
f010d38f:	68 bc 6c 13 f0       	push   $0xf0136cbc
f010d394:	6a 50                	push   $0x50
f010d396:	68 9f 6c 13 f0       	push   $0xf0136c9f
f010d39b:	e8 06 2e ff ff       	call   f01001a6 <_panic>

f010d3a0 <__page_fault_handler_with_buffering>:

	//refer to the project presentation and documentation for details
}
void __page_fault_handler_with_buffering(struct Env * curenv, uint32 fault_va)
{
f010d3a0:	55                   	push   %ebp
f010d3a1:	89 e5                	mov    %esp,%ebp
f010d3a3:	83 ec 08             	sub    $0x8,%esp
	// Write your code here, remove the panic and write your code
	panic("__page_fault_handler_with_buffering() is not implemented yet...!!");
f010d3a6:	83 ec 04             	sub    $0x4,%esp
f010d3a9:	68 f0 6c 13 f0       	push   $0xf0136cf0
f010d3ae:	6a 57                	push   $0x57
f010d3b0:	68 9f 6c 13 f0       	push   $0xf0136c9f
f010d3b5:	e8 ec 2d ff ff       	call   f01001a6 <_panic>

f010d3ba <create_semaphores_array>:
// [1] Create "semaphores" array:
//===============================
//Dynamically allocate the "semaphores" array
//initialize the "semaphores" array by 0's and empty = 1
void create_semaphores_array(uint32 numOfSemaphores)
{
f010d3ba:	55                   	push   %ebp
f010d3bb:	89 e5                	mov    %esp,%ebp
f010d3bd:	83 ec 18             	sub    $0x18,%esp
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d3c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f010d3c7:	e9 aa 00 00 00       	jmp    f010d476 <create_semaphores_array+0xbc>
	{
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
f010d3cc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d3cf:	89 d0                	mov    %edx,%eax
f010d3d1:	c1 e0 02             	shl    $0x2,%eax
f010d3d4:	01 d0                	add    %edx,%eax
f010d3d6:	01 c0                	add    %eax,%eax
f010d3d8:	01 d0                	add    %edx,%eax
f010d3da:	01 c0                	add    %eax,%eax
f010d3dc:	01 d0                	add    %edx,%eax
f010d3de:	c1 e0 02             	shl    $0x2,%eax
f010d3e1:	05 80 60 6e f0       	add    $0xf06e6080,%eax
f010d3e6:	83 ec 04             	sub    $0x4,%esp
f010d3e9:	6a 5c                	push   $0x5c
f010d3eb:	6a 00                	push   $0x0
f010d3ed:	50                   	push   %eax
f010d3ee:	e8 38 32 02 00       	call   f013062b <memset>
f010d3f3:	83 c4 10             	add    $0x10,%esp
		semaphores[i].empty = 1;
f010d3f6:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d3f9:	89 d0                	mov    %edx,%eax
f010d3fb:	c1 e0 02             	shl    $0x2,%eax
f010d3fe:	01 d0                	add    %edx,%eax
f010d400:	01 c0                	add    %eax,%eax
f010d402:	01 d0                	add    %edx,%eax
f010d404:	01 c0                	add    %eax,%eax
f010d406:	01 d0                	add    %edx,%eax
f010d408:	c1 e0 02             	shl    $0x2,%eax
f010d40b:	05 d8 60 6e f0       	add    $0xf06e60d8,%eax
f010d410:	c6 00 01             	movb   $0x1,(%eax)
		LIST_INIT(&(semaphores[i].env_queue));
f010d413:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d416:	89 d0                	mov    %edx,%eax
f010d418:	c1 e0 02             	shl    $0x2,%eax
f010d41b:	01 d0                	add    %edx,%eax
f010d41d:	01 c0                	add    %eax,%eax
f010d41f:	01 d0                	add    %edx,%eax
f010d421:	01 c0                	add    %eax,%eax
f010d423:	01 d0                	add    %edx,%eax
f010d425:	c1 e0 02             	shl    $0x2,%eax
f010d428:	05 c4 60 6e f0       	add    $0xf06e60c4,%eax
f010d42d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d433:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d436:	89 d0                	mov    %edx,%eax
f010d438:	c1 e0 02             	shl    $0x2,%eax
f010d43b:	01 d0                	add    %edx,%eax
f010d43d:	01 c0                	add    %eax,%eax
f010d43f:	01 d0                	add    %edx,%eax
f010d441:	01 c0                	add    %eax,%eax
f010d443:	01 d0                	add    %edx,%eax
f010d445:	c1 e0 02             	shl    $0x2,%eax
f010d448:	05 c8 60 6e f0       	add    $0xf06e60c8,%eax
f010d44d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d453:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d456:	89 d0                	mov    %edx,%eax
f010d458:	c1 e0 02             	shl    $0x2,%eax
f010d45b:	01 d0                	add    %edx,%eax
f010d45d:	01 c0                	add    %eax,%eax
f010d45f:	01 d0                	add    %edx,%eax
f010d461:	01 c0                	add    %eax,%eax
f010d463:	01 d0                	add    %edx,%eax
f010d465:	c1 e0 02             	shl    $0x2,%eax
f010d468:	05 d0 60 6e f0       	add    $0xf06e60d0,%eax
f010d46d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	if (semaphores == NULL)
	{
		panic("Kernel runs out of memory\nCan't create the array of semaphores.");
	}
#endif
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d473:	ff 45 f4             	incl   -0xc(%ebp)
f010d476:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d47a:	0f 8e 4c ff ff ff    	jle    f010d3cc <create_semaphores_array+0x12>
		memset(&(semaphores[i]), 0, sizeof(struct Semaphore));
		semaphores[i].empty = 1;
		LIST_INIT(&(semaphores[i].env_queue));
	}

}
f010d480:	90                   	nop
f010d481:	c9                   	leave  
f010d482:	c3                   	ret    

f010d483 <allocate_semaphore_object>:
//	a) if succeed:
//		1. allocatedSemaphore (pointer to struct Semaphore) passed by reference
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
f010d483:	55                   	push   %ebp
f010d484:	89 e5                	mov    %esp,%ebp
f010d486:	83 ec 18             	sub    $0x18,%esp
	int32 semaphoreObjectID = -1 ;
f010d489:	c7 45 f4 ff ff ff ff 	movl   $0xffffffff,-0xc(%ebp)
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d490:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f010d497:	eb 2b                	jmp    f010d4c4 <allocate_semaphore_object+0x41>
	{
		if (semaphores[i].empty)
f010d499:	8b 55 f0             	mov    -0x10(%ebp),%edx
f010d49c:	89 d0                	mov    %edx,%eax
f010d49e:	c1 e0 02             	shl    $0x2,%eax
f010d4a1:	01 d0                	add    %edx,%eax
f010d4a3:	01 c0                	add    %eax,%eax
f010d4a5:	01 d0                	add    %edx,%eax
f010d4a7:	01 c0                	add    %eax,%eax
f010d4a9:	01 d0                	add    %edx,%eax
f010d4ab:	c1 e0 02             	shl    $0x2,%eax
f010d4ae:	05 d8 60 6e f0       	add    $0xf06e60d8,%eax
f010d4b3:	8a 00                	mov    (%eax),%al
f010d4b5:	84 c0                	test   %al,%al
f010d4b7:	74 08                	je     f010d4c1 <allocate_semaphore_object+0x3e>
		{
			semaphoreObjectID = i;
f010d4b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f010d4bc:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
f010d4bf:	eb 09                	jmp    f010d4ca <allocate_semaphore_object+0x47>
//		2. SempahoreObjectID (its index in the array) as a return parameter
//	b) E_NO_SEMAPHORE if the the array of semaphores is full (i.e. reaches "MAX_SEMAPHORES")
int allocate_semaphore_object(struct Semaphore **allocatedObject)
{
	int32 semaphoreObjectID = -1 ;
	for (int i = 0; i < MAX_SEMAPHORES; ++i)
f010d4c1:	ff 45 f0             	incl   -0x10(%ebp)
f010d4c4:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f010d4c8:	7e cf                	jle    f010d499 <allocate_semaphore_object+0x16>
			semaphoreObjectID = i;
			break;
		}
	}

	if (semaphoreObjectID == -1)
f010d4ca:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
f010d4ce:	75 14                	jne    f010d4e4 <allocate_semaphore_object+0x61>
				MAX_SEMAPHORES *= 2;
			}
		}
		#else
		{
			panic("Attempt to dynamically allocate space inside kernel while kheap is disabled .. ");
f010d4d0:	83 ec 04             	sub    $0x4,%esp
f010d4d3:	68 34 6d 13 f0       	push   $0xf0136d34
f010d4d8:	6a 53                	push   $0x53
f010d4da:	68 84 6d 13 f0       	push   $0xf0136d84
f010d4df:	e8 c2 2c ff ff       	call   f01001a6 <_panic>
			return E_NO_SEMAPHORE;
		}
		#endif
	}

	*allocatedObject = &(semaphores[semaphoreObjectID]);
f010d4e4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d4e7:	89 d0                	mov    %edx,%eax
f010d4e9:	c1 e0 02             	shl    $0x2,%eax
f010d4ec:	01 d0                	add    %edx,%eax
f010d4ee:	01 c0                	add    %eax,%eax
f010d4f0:	01 d0                	add    %edx,%eax
f010d4f2:	01 c0                	add    %eax,%eax
f010d4f4:	01 d0                	add    %edx,%eax
f010d4f6:	c1 e0 02             	shl    $0x2,%eax
f010d4f9:	8d 90 80 60 6e f0    	lea    -0xf919f80(%eax),%edx
f010d4ff:	8b 45 08             	mov    0x8(%ebp),%eax
f010d502:	89 10                	mov    %edx,(%eax)
	semaphores[semaphoreObjectID].empty = 0;
f010d504:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d507:	89 d0                	mov    %edx,%eax
f010d509:	c1 e0 02             	shl    $0x2,%eax
f010d50c:	01 d0                	add    %edx,%eax
f010d50e:	01 c0                	add    %eax,%eax
f010d510:	01 d0                	add    %edx,%eax
f010d512:	01 c0                	add    %eax,%eax
f010d514:	01 d0                	add    %edx,%eax
f010d516:	c1 e0 02             	shl    $0x2,%eax
f010d519:	05 d8 60 6e f0       	add    $0xf06e60d8,%eax
f010d51e:	c6 00 00             	movb   $0x0,(%eax)

	return semaphoreObjectID;
f010d521:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f010d524:	c9                   	leave  
f010d525:	c3                   	ret    

f010d526 <get_semaphore_object_ID>:
//Search for the given semaphore object in the "semaphores" array
//Return:
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
f010d526:	55                   	push   %ebp
f010d527:	89 e5                	mov    %esp,%ebp
f010d529:	83 ec 18             	sub    $0x18,%esp
	int i=0;
f010d52c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	for(; i < MAX_SEMAPHORES; ++i)
f010d533:	eb 7a                	jmp    f010d5af <get_semaphore_object_ID+0x89>
	{
		if (semaphores[i].empty)
f010d535:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d538:	89 d0                	mov    %edx,%eax
f010d53a:	c1 e0 02             	shl    $0x2,%eax
f010d53d:	01 d0                	add    %edx,%eax
f010d53f:	01 c0                	add    %eax,%eax
f010d541:	01 d0                	add    %edx,%eax
f010d543:	01 c0                	add    %eax,%eax
f010d545:	01 d0                	add    %edx,%eax
f010d547:	c1 e0 02             	shl    $0x2,%eax
f010d54a:	05 d8 60 6e f0       	add    $0xf06e60d8,%eax
f010d54f:	8a 00                	mov    (%eax),%al
f010d551:	84 c0                	test   %al,%al
f010d553:	75 56                	jne    f010d5ab <get_semaphore_object_ID+0x85>
			continue;

		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
f010d555:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d558:	89 d0                	mov    %edx,%eax
f010d55a:	c1 e0 02             	shl    $0x2,%eax
f010d55d:	01 d0                	add    %edx,%eax
f010d55f:	01 c0                	add    %eax,%eax
f010d561:	01 d0                	add    %edx,%eax
f010d563:	01 c0                	add    %eax,%eax
f010d565:	01 d0                	add    %edx,%eax
f010d567:	c1 e0 02             	shl    $0x2,%eax
f010d56a:	05 80 60 6e f0       	add    $0xf06e6080,%eax
f010d56f:	8b 00                	mov    (%eax),%eax
f010d571:	3b 45 08             	cmp    0x8(%ebp),%eax
f010d574:	75 36                	jne    f010d5ac <get_semaphore_object_ID+0x86>
f010d576:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010d579:	89 d0                	mov    %edx,%eax
f010d57b:	c1 e0 02             	shl    $0x2,%eax
f010d57e:	01 d0                	add    %edx,%eax
f010d580:	01 c0                	add    %eax,%eax
f010d582:	01 d0                	add    %edx,%eax
f010d584:	01 c0                	add    %eax,%eax
f010d586:	01 d0                	add    %edx,%eax
f010d588:	c1 e0 02             	shl    $0x2,%eax
f010d58b:	05 80 60 6e f0       	add    $0xf06e6080,%eax
f010d590:	83 c0 04             	add    $0x4,%eax
f010d593:	83 ec 08             	sub    $0x8,%esp
f010d596:	50                   	push   %eax
f010d597:	ff 75 0c             	pushl  0xc(%ebp)
f010d59a:	e8 aa 2f 02 00       	call   f0130549 <strcmp>
f010d59f:	83 c4 10             	add    $0x10,%esp
f010d5a2:	85 c0                	test   %eax,%eax
f010d5a4:	75 06                	jne    f010d5ac <get_semaphore_object_ID+0x86>
		{
			return i;
f010d5a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d5a9:	eb 0f                	jmp    f010d5ba <get_semaphore_object_ID+0x94>
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
	{
		if (semaphores[i].empty)
			continue;
f010d5ab:	90                   	nop
//	a) if found: SemaphoreObjectID (index of the semaphore object in the array)
//	b) else: E_SEMAPHORE_NOT_EXISTS
int get_semaphore_object_ID(int32 ownerID, char* name)
{
	int i=0;
	for(; i < MAX_SEMAPHORES; ++i)
f010d5ac:	ff 45 f4             	incl   -0xc(%ebp)
f010d5af:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)
f010d5b3:	7e 80                	jle    f010d535 <get_semaphore_object_ID+0xf>
		if(semaphores[i].ownerID == ownerID && strcmp(name, semaphores[i].name)==0)
		{
			return i;
		}
	}
	return E_SEMAPHORE_NOT_EXISTS;
f010d5b5:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
}
f010d5ba:	c9                   	leave  
f010d5bb:	c3                   	ret    

f010d5bc <free_semaphore_object>:
//delete the semaphore with the given ID from the "semaphores" array
//Return:
//	a) 0 if succeed
//	b) E_SEMAPHORE_NOT_EXISTS if the semaphore is not exists
int free_semaphore_object(uint32 semaphoreObjectID)
{
f010d5bc:	55                   	push   %ebp
f010d5bd:	89 e5                	mov    %esp,%ebp
f010d5bf:	83 ec 08             	sub    $0x8,%esp
	if (semaphoreObjectID >= MAX_SEMAPHORES)
f010d5c2:	83 7d 08 63          	cmpl   $0x63,0x8(%ebp)
f010d5c6:	76 0a                	jbe    f010d5d2 <free_semaphore_object+0x16>
		return E_SEMAPHORE_NOT_EXISTS;
f010d5c8:	b8 f3 ff ff ff       	mov    $0xfffffff3,%eax
f010d5cd:	e9 ac 00 00 00       	jmp    f010d67e <free_semaphore_object+0xc2>

	memset(&(semaphores[semaphoreObjectID]), 0, sizeof(struct Semaphore));
f010d5d2:	8b 55 08             	mov    0x8(%ebp),%edx
f010d5d5:	89 d0                	mov    %edx,%eax
f010d5d7:	c1 e0 02             	shl    $0x2,%eax
f010d5da:	01 d0                	add    %edx,%eax
f010d5dc:	01 c0                	add    %eax,%eax
f010d5de:	01 d0                	add    %edx,%eax
f010d5e0:	01 c0                	add    %eax,%eax
f010d5e2:	01 d0                	add    %edx,%eax
f010d5e4:	c1 e0 02             	shl    $0x2,%eax
f010d5e7:	05 80 60 6e f0       	add    $0xf06e6080,%eax
f010d5ec:	83 ec 04             	sub    $0x4,%esp
f010d5ef:	6a 5c                	push   $0x5c
f010d5f1:	6a 00                	push   $0x0
f010d5f3:	50                   	push   %eax
f010d5f4:	e8 32 30 02 00       	call   f013062b <memset>
f010d5f9:	83 c4 10             	add    $0x10,%esp
	semaphores[semaphoreObjectID].empty = 1;
f010d5fc:	8b 55 08             	mov    0x8(%ebp),%edx
f010d5ff:	89 d0                	mov    %edx,%eax
f010d601:	c1 e0 02             	shl    $0x2,%eax
f010d604:	01 d0                	add    %edx,%eax
f010d606:	01 c0                	add    %eax,%eax
f010d608:	01 d0                	add    %edx,%eax
f010d60a:	01 c0                	add    %eax,%eax
f010d60c:	01 d0                	add    %edx,%eax
f010d60e:	c1 e0 02             	shl    $0x2,%eax
f010d611:	05 d8 60 6e f0       	add    $0xf06e60d8,%eax
f010d616:	c6 00 01             	movb   $0x1,(%eax)
	LIST_INIT(&(semaphores[semaphoreObjectID].env_queue));
f010d619:	8b 55 08             	mov    0x8(%ebp),%edx
f010d61c:	89 d0                	mov    %edx,%eax
f010d61e:	c1 e0 02             	shl    $0x2,%eax
f010d621:	01 d0                	add    %edx,%eax
f010d623:	01 c0                	add    %eax,%eax
f010d625:	01 d0                	add    %edx,%eax
f010d627:	01 c0                	add    %eax,%eax
f010d629:	01 d0                	add    %edx,%eax
f010d62b:	c1 e0 02             	shl    $0x2,%eax
f010d62e:	05 c4 60 6e f0       	add    $0xf06e60c4,%eax
f010d633:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d639:	8b 55 08             	mov    0x8(%ebp),%edx
f010d63c:	89 d0                	mov    %edx,%eax
f010d63e:	c1 e0 02             	shl    $0x2,%eax
f010d641:	01 d0                	add    %edx,%eax
f010d643:	01 c0                	add    %eax,%eax
f010d645:	01 d0                	add    %edx,%eax
f010d647:	01 c0                	add    %eax,%eax
f010d649:	01 d0                	add    %edx,%eax
f010d64b:	c1 e0 02             	shl    $0x2,%eax
f010d64e:	05 c8 60 6e f0       	add    $0xf06e60c8,%eax
f010d653:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010d659:	8b 55 08             	mov    0x8(%ebp),%edx
f010d65c:	89 d0                	mov    %edx,%eax
f010d65e:	c1 e0 02             	shl    $0x2,%eax
f010d661:	01 d0                	add    %edx,%eax
f010d663:	01 c0                	add    %eax,%eax
f010d665:	01 d0                	add    %edx,%eax
f010d667:	01 c0                	add    %eax,%eax
f010d669:	01 d0                	add    %edx,%eax
f010d66b:	c1 e0 02             	shl    $0x2,%eax
f010d66e:	05 d0 60 6e f0       	add    $0xf06e60d0,%eax
f010d673:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	return 0;
f010d679:	b8 00 00 00 00       	mov    $0x0,%eax
}
f010d67e:	c9                   	leave  
f010d67f:	c3                   	ret    

f010d680 <createSemaphore>:

//======================
// [1] Create Semaphore:
//======================
int createSemaphore(int32 ownerEnvID, char* semaphoreName, uint32 initialValue)
{
f010d680:	55                   	push   %ebp
f010d681:	89 e5                	mov    %esp,%ebp
f010d683:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("createSemaphore() is not implemented yet...!!");
f010d686:	83 ec 04             	sub    $0x4,%esp
f010d689:	68 a4 6d 13 f0       	push   $0xf0136da4
f010d68e:	68 94 00 00 00       	push   $0x94
f010d693:	68 84 6d 13 f0       	push   $0xf0136d84
f010d698:	e8 09 2b ff ff       	call   f01001a6 <_panic>

f010d69d <waitSemaphore>:

//============
// [2] Wait():
//============
void waitSemaphore(int32 ownerEnvID, char* semaphoreName)
{
f010d69d:	55                   	push   %ebp
f010d69e:	89 e5                	mov    %esp,%ebp
f010d6a0:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("waitSemaphore() is not implemented yet...!!");
f010d6a3:	83 ec 04             	sub    $0x4,%esp
f010d6a6:	68 d4 6d 13 f0       	push   $0xf0136dd4
f010d6ab:	68 a6 00 00 00       	push   $0xa6
f010d6b0:	68 84 6d 13 f0       	push   $0xf0136d84
f010d6b5:	e8 ec 2a ff ff       	call   f01001a6 <_panic>

f010d6ba <signalSemaphore>:

//==============
// [3] Signal():
//==============
void signalSemaphore(int ownerEnvID, char* semaphoreName)
{
f010d6ba:	55                   	push   %ebp
f010d6bb:	89 e5                	mov    %esp,%ebp
f010d6bd:	83 ec 08             	sub    $0x8,%esp
	// your code is here, remove the panic and write your code
	panic("signalSemaphore() is not implemented yet...!!");
f010d6c0:	83 ec 04             	sub    $0x4,%esp
f010d6c3:	68 00 6e 13 f0       	push   $0xf0136e00
f010d6c8:	68 ba 00 00 00       	push   $0xba
f010d6cd:	68 84 6d 13 f0       	push   $0xf0136d84
f010d6d2:	e8 cf 2a ff ff       	call   f01001a6 <_panic>

f010d6d7 <test_initialize_MemBlocksList>:

#define Mega  (1024*1024)
#define kilo (1024)

void test_initialize_MemBlocksList()
{
f010d6d7:	55                   	push   %ebp
f010d6d8:	89 e5                	mov    %esp,%ebp
f010d6da:	83 ec 18             	sub    $0x18,%esp
	uint32 numOfBlocks = 5;
f010d6dd:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010d6e4:	83 ec 0c             	sub    $0xc,%esp
f010d6e7:	ff 75 ec             	pushl  -0x14(%ebp)
f010d6ea:	e8 b8 38 02 00       	call   f0130fa7 <initialize_MemBlocksList>
f010d6ef:	83 c4 10             	add    $0x10,%esp
	//Check 1: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks)
f010d6f2:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010d6f7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f010d6fa:	74 17                	je     f010d713 <test_initialize_MemBlocksList+0x3c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AvailableMemBlocksList %d\n", LIST_SIZE(&(AvailableMemBlocksList)));
f010d6fc:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010d701:	50                   	push   %eax
f010d702:	68 40 6e 13 f0       	push   $0xf0136e40
f010d707:	6a 1f                	push   $0x1f
f010d709:	68 94 6e 13 f0       	push   $0xf0136e94
f010d70e:	e8 93 2a ff ff       	call   f01001a6 <_panic>
		//assert(LIST_SIZE(&AvailableMemBlocksList) == numOfBlocks);
	}

	//Check 2: Check number of nodes in AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010d713:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010d718:	85 c0                	test   %eax,%eax
f010d71a:	74 17                	je     f010d733 <test_initialize_MemBlocksList+0x5c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the AllocMemBlocksList %d\n", LIST_SIZE(&(AllocMemBlocksList)));
f010d71c:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010d721:	50                   	push   %eax
f010d722:	68 b8 6e 13 f0       	push   $0xf0136eb8
f010d727:	6a 26                	push   $0x26
f010d729:	68 94 6e 13 f0       	push   $0xf0136e94
f010d72e:	e8 73 2a ff ff       	call   f01001a6 <_panic>
	}

	//Check 3: Check number of nodes in AvailableMemBlocksList
	if (LIST_SIZE(&(FreeMemBlocksList)) != 0)
f010d733:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010d738:	85 c0                	test   %eax,%eax
f010d73a:	74 17                	je     f010d753 <test_initialize_MemBlocksList+0x7c>
	{
		panic("initialize_MemBlocksList: Allocating wrong size for the FreeMemBlocksList %d\n", LIST_SIZE(&(FreeMemBlocksList)));
f010d73c:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010d741:	50                   	push   %eax
f010d742:	68 08 6f 13 f0       	push   $0xf0136f08
f010d747:	6a 2c                	push   $0x2c
f010d749:	68 94 6e 13 f0       	push   $0xf0136e94
f010d74e:	e8 53 2a ff ff       	call   f01001a6 <_panic>
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
f010d753:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 size = 0;
f010d75a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010d761:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f010d766:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d769:	eb 29                	jmp    f010d794 <test_initialize_MemBlocksList+0xbd>
	{
		size++;
f010d76b:	ff 45 f0             	incl   -0x10(%ebp)
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f010d76e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d771:	8b 50 0c             	mov    0xc(%eax),%edx
f010d774:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d777:	8b 40 08             	mov    0x8(%eax),%eax
f010d77a:	83 ec 04             	sub    $0x4,%esp
f010d77d:	52                   	push   %edx
f010d77e:	50                   	push   %eax
f010d77f:	68 58 6f 13 f0       	push   $0xf0136f58
f010d784:	e8 a4 34 ff ff       	call   f0100c2d <cprintf>
f010d789:	83 c4 10             	add    $0x10,%esp
	}

	//Check 4: Check the existance of each node and its data in AvailableMemBlocksList
	struct MemBlock* node = NULL;
	uint32 size = 0;
	LIST_FOREACH(node, &AvailableMemBlocksList)
f010d78c:	a1 fc 84 6e f0       	mov    0xf06e84fc,%eax
f010d791:	89 45 f4             	mov    %eax,-0xc(%ebp)
f010d794:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d798:	74 07                	je     f010d7a1 <test_initialize_MemBlocksList+0xca>
f010d79a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010d79d:	8b 00                	mov    (%eax),%eax
f010d79f:	eb 05                	jmp    f010d7a6 <test_initialize_MemBlocksList+0xcf>
f010d7a1:	b8 00 00 00 00       	mov    $0x0,%eax
f010d7a6:	a3 fc 84 6e f0       	mov    %eax,0xf06e84fc
f010d7ab:	a1 fc 84 6e f0       	mov    0xf06e84fc,%eax
f010d7b0:	85 c0                	test   %eax,%eax
f010d7b2:	75 b7                	jne    f010d76b <test_initialize_MemBlocksList+0x94>
f010d7b4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f010d7b8:	75 b1                	jne    f010d76b <test_initialize_MemBlocksList+0x94>
	{
		size++;
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
	if(LIST_SIZE(&(AvailableMemBlocksList)) != size)
f010d7ba:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010d7bf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d7c2:	74 14                	je     f010d7d8 <test_initialize_MemBlocksList+0x101>
		panic("initialize_MemBlocksList: Some nodes are not created in the initialize_MemBlocksList\n");
f010d7c4:	83 ec 04             	sub    $0x4,%esp
f010d7c7:	68 78 6f 13 f0       	push   $0xf0136f78
f010d7cc:	6a 38                	push   $0x38
f010d7ce:	68 94 6e 13 f0       	push   $0xf0136e94
f010d7d3:	e8 ce 29 ff ff       	call   f01001a6 <_panic>
	else
		cprintf("Congratulations!! test initialize_MemBlocksList completed successfully.\n");
f010d7d8:	83 ec 0c             	sub    $0xc,%esp
f010d7db:	68 d0 6f 13 f0       	push   $0xf0136fd0
f010d7e0:	e8 48 34 ff ff       	call   f0100c2d <cprintf>
f010d7e5:	83 c4 10             	add    $0x10,%esp
}
f010d7e8:	90                   	nop
f010d7e9:	c9                   	leave  
f010d7ea:	c3                   	ret    

f010d7eb <test_insert_sorted_allocList>:

void test_insert_sorted_allocList()
{
f010d7eb:	55                   	push   %ebp
f010d7ec:	89 e5                	mov    %esp,%ebp
f010d7ee:	57                   	push   %edi
f010d7ef:	81 ec 94 00 00 00    	sub    $0x94,%esp
	uint32 numOfBlocks = 5;
f010d7f5:	c7 45 f4 05 00 00 00 	movl   $0x5,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010d7fc:	83 ec 0c             	sub    $0xc,%esp
f010d7ff:	ff 75 f4             	pushl  -0xc(%ebp)
f010d802:	e8 a0 37 02 00       	call   f0130fa7 <initialize_MemBlocksList>
f010d807:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010d80a:	c7 05 f0 8f 65 f0 00 	movl   $0x0,0xf0658ff0
f010d811:	00 00 00 
f010d814:	c7 05 f4 8f 65 f0 00 	movl   $0x0,0xf0658ff4
f010d81b:	00 00 00 
f010d81e:	c7 05 fc 8f 65 f0 00 	movl   $0x0,0xf0658ffc
f010d825:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010d828:	c7 05 c0 84 6e f0 00 	movl   $0x0,0xf06e84c0
f010d82f:	00 00 00 
f010d832:	c7 05 c4 84 6e f0 00 	movl   $0x0,0xf06e84c4
f010d839:	00 00 00 
f010d83c:	c7 05 cc 84 6e f0 00 	movl   $0x0,0xf06e84cc
f010d843:	00 00 00 

	uint32 blocksToInsertSVAs[5]={0,0,0,0,0};
f010d846:	8d 55 d8             	lea    -0x28(%ebp),%edx
f010d849:	b9 05 00 00 00       	mov    $0x5,%ecx
f010d84e:	b8 00 00 00 00       	mov    $0x0,%eax
f010d853:	89 d7                	mov    %edx,%edi
f010d855:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[5]={0,0,0,0,0};
f010d857:	8d 55 c4             	lea    -0x3c(%ebp),%edx
f010d85a:	b9 05 00 00 00       	mov    $0x5,%ecx
f010d85f:	b8 00 00 00 00       	mov    $0x0,%eax
f010d864:	89 d7                	mov    %edx,%edi
f010d866:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010d868:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	uint32 actualSize = 0;
f010d86f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)


	/*INSERT Scenario 1: Insert BLOCK_1 in the empty AllocMemBlocksList*/
	//BLOCK_1 sva = 8K
	blocksToInsertSVAs[1] = 0x0 + (8*kilo);
f010d876:	c7 45 dc 00 20 00 00 	movl   $0x2000,-0x24(%ebp)
	blocksToInsertSizes[1] = (4*kilo);
f010d87d:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[1];
f010d884:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010d887:	89 45 b8             	mov    %eax,-0x48(%ebp)
	blockToInsert1.size = blocksToInsertSizes[1];
f010d88a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f010d88d:	89 45 bc             	mov    %eax,-0x44(%ebp)

	insert_sorted_allocList(&blockToInsert1);
f010d890:	83 ec 0c             	sub    $0xc,%esp
f010d893:	8d 45 b0             	lea    -0x50(%ebp),%eax
f010d896:	50                   	push   %eax
f010d897:	e8 2b 38 02 00       	call   f01310c7 <insert_sorted_allocList>
f010d89c:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 1;
f010d89f:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010d8a6:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010d8ab:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d8ae:	74 14                	je     f010d8c4 <test_insert_sorted_allocList+0xd9>
f010d8b0:	83 ec 04             	sub    $0x4,%esp
f010d8b3:	68 1c 70 13 f0       	push   $0xf013701c
f010d8b8:	6a 56                	push   $0x56
f010d8ba:	68 94 6e 13 f0       	push   $0xf0136e94
f010d8bf:	e8 e2 28 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010d8c4:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010d8c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d8cc:	74 14                	je     f010d8e2 <test_insert_sorted_allocList+0xf7>
f010d8ce:	83 ec 04             	sub    $0x4,%esp
f010d8d1:	68 68 70 13 f0       	push   $0xf0137068
f010d8d6:	6a 59                	push   $0x59
f010d8d8:	68 94 6e 13 f0       	push   $0xf0136e94
f010d8dd:	e8 c4 28 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	int chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d8e2:	83 ec 0c             	sub    $0xc,%esp
f010d8e5:	ff 75 f0             	pushl  -0x10(%ebp)
f010d8e8:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010d8eb:	50                   	push   %eax
f010d8ec:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d8ef:	50                   	push   %eax
f010d8f0:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d8f3:	50                   	push   %eax
f010d8f4:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010d8f9:	e8 7d 26 00 00       	call   f010ff7b <check_list_data>
f010d8fe:	83 c4 20             	add    $0x20,%esp
f010d901:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d904:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d908:	74 14                	je     f010d91e <test_insert_sorted_allocList+0x133>
f010d90a:	83 ec 04             	sub    $0x4,%esp
f010d90d:	68 b8 70 13 f0       	push   $0xf01370b8
f010d912:	6a 5d                	push   $0x5d
f010d914:	68 94 6e 13 f0       	push   $0xf0136e94
f010d919:	e8 88 28 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d91e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d921:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d924:	74 14                	je     f010d93a <test_insert_sorted_allocList+0x14f>
f010d926:	83 ec 04             	sub    $0x4,%esp
f010d929:	68 08 71 13 f0       	push   $0xf0137108
f010d92e:	6a 5e                	push   $0x5e
f010d930:	68 94 6e 13 f0       	push   $0xf0136e94
f010d935:	e8 6c 28 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT Scenario 2: Insert BLOCK_2 in the AllocMemBlocksList with sva greater than BLOCK_1*/
	//BLOCK_2 sva = 28K
	blocksToInsertSVAs[4] = (28*kilo);
f010d93a:	c7 45 e8 00 70 00 00 	movl   $0x7000,-0x18(%ebp)
	blocksToInsertSizes[4] = (2*kilo);
f010d941:	c7 45 d4 00 08 00 00 	movl   $0x800,-0x2c(%ebp)
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[4];
f010d948:	8b 45 e8             	mov    -0x18(%ebp),%eax
f010d94b:	89 45 a8             	mov    %eax,-0x58(%ebp)
	blockToInsert2.size = blocksToInsertSizes[4];
f010d94e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f010d951:	89 45 ac             	mov    %eax,-0x54(%ebp)

	insert_sorted_allocList(&blockToInsert2);
f010d954:	83 ec 0c             	sub    $0xc,%esp
f010d957:	8d 45 a0             	lea    -0x60(%ebp),%eax
f010d95a:	50                   	push   %eax
f010d95b:	e8 67 37 02 00       	call   f01310c7 <insert_sorted_allocList>
f010d960:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 2;
f010d963:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010d96a:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010d96f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d972:	74 14                	je     f010d988 <test_insert_sorted_allocList+0x19d>
f010d974:	83 ec 04             	sub    $0x4,%esp
f010d977:	68 1c 70 13 f0       	push   $0xf013701c
f010d97c:	6a 6d                	push   $0x6d
f010d97e:	68 94 6e 13 f0       	push   $0xf0136e94
f010d983:	e8 1e 28 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010d988:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010d98d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010d990:	74 14                	je     f010d9a6 <test_insert_sorted_allocList+0x1bb>
f010d992:	83 ec 04             	sub    $0x4,%esp
f010d995:	68 68 70 13 f0       	push   $0xf0137068
f010d99a:	6a 70                	push   $0x70
f010d99c:	68 94 6e 13 f0       	push   $0xf0136e94
f010d9a1:	e8 00 28 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010d9a6:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010d9ad:	83 ec 0c             	sub    $0xc,%esp
f010d9b0:	ff 75 f0             	pushl  -0x10(%ebp)
f010d9b3:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010d9b6:	50                   	push   %eax
f010d9b7:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010d9ba:	50                   	push   %eax
f010d9bb:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010d9be:	50                   	push   %eax
f010d9bf:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010d9c4:	e8 b2 25 00 00       	call   f010ff7b <check_list_data>
f010d9c9:	83 c4 20             	add    $0x20,%esp
f010d9cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010d9cf:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010d9d3:	74 14                	je     f010d9e9 <test_insert_sorted_allocList+0x1fe>
f010d9d5:	83 ec 04             	sub    $0x4,%esp
f010d9d8:	68 b8 70 13 f0       	push   $0xf01370b8
f010d9dd:	6a 75                	push   $0x75
f010d9df:	68 94 6e 13 f0       	push   $0xf0136e94
f010d9e4:	e8 bd 27 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010d9e9:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010d9ec:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010d9ef:	74 14                	je     f010da05 <test_insert_sorted_allocList+0x21a>
f010d9f1:	83 ec 04             	sub    $0x4,%esp
f010d9f4:	68 08 71 13 f0       	push   $0xf0137108
f010d9f9:	6a 76                	push   $0x76
f010d9fb:	68 94 6e 13 f0       	push   $0xf0136e94
f010da00:	e8 a1 27 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT Scenario 3: Insert BLOCK_3 in the AllocMemBlocksList with sva smaller than BLOCK_2*/
	//BLOCK_3 sva = 16K
	blocksToInsertSVAs[2] = (16*kilo);
f010da05:	c7 45 e0 00 40 00 00 	movl   $0x4000,-0x20(%ebp)
	blocksToInsertSizes[2] = (8*kilo);
f010da0c:	c7 45 cc 00 20 00 00 	movl   $0x2000,-0x34(%ebp)
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[2];
f010da13:	8b 45 e0             	mov    -0x20(%ebp),%eax
f010da16:	89 45 98             	mov    %eax,-0x68(%ebp)
	blockToInsert3.size = blocksToInsertSizes[2];
f010da19:	8b 45 cc             	mov    -0x34(%ebp),%eax
f010da1c:	89 45 9c             	mov    %eax,-0x64(%ebp)

	insert_sorted_allocList(&blockToInsert3);
f010da1f:	83 ec 0c             	sub    $0xc,%esp
f010da22:	8d 45 90             	lea    -0x70(%ebp),%eax
f010da25:	50                   	push   %eax
f010da26:	e8 9c 36 02 00       	call   f01310c7 <insert_sorted_allocList>
f010da2b:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 3;
f010da2e:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010da35:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010da3a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010da3d:	74 17                	je     f010da56 <test_insert_sorted_allocList+0x26b>
f010da3f:	83 ec 04             	sub    $0x4,%esp
f010da42:	68 1c 70 13 f0       	push   $0xf013701c
f010da47:	68 85 00 00 00       	push   $0x85
f010da4c:	68 94 6e 13 f0       	push   $0xf0136e94
f010da51:	e8 50 27 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList\n");
f010da56:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010da5b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010da5e:	74 17                	je     f010da77 <test_insert_sorted_allocList+0x28c>
f010da60:	83 ec 04             	sub    $0x4,%esp
f010da63:	68 54 71 13 f0       	push   $0xf0137154
f010da68:	68 88 00 00 00       	push   $0x88
f010da6d:	68 94 6e 13 f0       	push   $0xf0136e94
f010da72:	e8 2f 27 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010da77:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010da7e:	83 ec 0c             	sub    $0xc,%esp
f010da81:	ff 75 f0             	pushl  -0x10(%ebp)
f010da84:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010da87:	50                   	push   %eax
f010da88:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010da8b:	50                   	push   %eax
f010da8c:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010da8f:	50                   	push   %eax
f010da90:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010da95:	e8 e1 24 00 00       	call   f010ff7b <check_list_data>
f010da9a:	83 c4 20             	add    $0x20,%esp
f010da9d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010daa0:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010daa4:	74 17                	je     f010dabd <test_insert_sorted_allocList+0x2d2>
f010daa6:	83 ec 04             	sub    $0x4,%esp
f010daa9:	68 b8 70 13 f0       	push   $0xf01370b8
f010daae:	68 8d 00 00 00       	push   $0x8d
f010dab3:	68 94 6e 13 f0       	push   $0xf0136e94
f010dab8:	e8 e9 26 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010dabd:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010dac0:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dac3:	74 17                	je     f010dadc <test_insert_sorted_allocList+0x2f1>
f010dac5:	83 ec 04             	sub    $0x4,%esp
f010dac8:	68 08 71 13 f0       	push   $0xf0137108
f010dacd:	68 8e 00 00 00       	push   $0x8e
f010dad2:	68 94 6e 13 f0       	push   $0xf0136e94
f010dad7:	e8 ca 26 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//INSERT Scenario 4: Insert BLOCK_4 in the AllocMemBlocksList with sva smaller than ALL (SHALL BE INSERTED AS HEAD)
	//BLOCK_4 sva = 0x0
	blocksToInsertSVAs[0] = (0x0);
f010dadc:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
	blocksToInsertSizes[0] = (8*kilo);
f010dae3:	c7 45 c4 00 20 00 00 	movl   $0x2000,-0x3c(%ebp)
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[0];
f010daea:	8b 45 d8             	mov    -0x28(%ebp),%eax
f010daed:	89 45 88             	mov    %eax,-0x78(%ebp)
	blockToInsert4.size = blocksToInsertSizes[0];
f010daf0:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f010daf3:	89 45 8c             	mov    %eax,-0x74(%ebp)
	insert_sorted_allocList(&blockToInsert4);
f010daf6:	83 ec 0c             	sub    $0xc,%esp
f010daf9:	8d 45 80             	lea    -0x80(%ebp),%eax
f010dafc:	50                   	push   %eax
f010dafd:	e8 c5 35 02 00       	call   f01310c7 <insert_sorted_allocList>
f010db02:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 4;
f010db05:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010db0c:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010db11:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010db14:	74 17                	je     f010db2d <test_insert_sorted_allocList+0x342>
f010db16:	83 ec 04             	sub    $0x4,%esp
f010db19:	68 1c 70 13 f0       	push   $0xf013701c
f010db1e:	68 9c 00 00 00       	push   $0x9c
f010db23:	68 94 6e 13 f0       	push   $0xf0136e94
f010db28:	e8 79 26 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010db2d:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010db32:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010db35:	74 17                	je     f010db4e <test_insert_sorted_allocList+0x363>
f010db37:	83 ec 04             	sub    $0x4,%esp
f010db3a:	68 68 70 13 f0       	push   $0xf0137068
f010db3f:	68 9f 00 00 00       	push   $0x9f
f010db44:	68 94 6e 13 f0       	push   $0xf0136e94
f010db49:	e8 58 26 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010db4e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010db55:	83 ec 0c             	sub    $0xc,%esp
f010db58:	ff 75 f0             	pushl  -0x10(%ebp)
f010db5b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010db5e:	50                   	push   %eax
f010db5f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010db62:	50                   	push   %eax
f010db63:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010db66:	50                   	push   %eax
f010db67:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010db6c:	e8 0a 24 00 00       	call   f010ff7b <check_list_data>
f010db71:	83 c4 20             	add    $0x20,%esp
f010db74:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010db77:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010db7b:	74 17                	je     f010db94 <test_insert_sorted_allocList+0x3a9>
f010db7d:	83 ec 04             	sub    $0x4,%esp
f010db80:	68 b8 70 13 f0       	push   $0xf01370b8
f010db85:	68 a4 00 00 00       	push   $0xa4
f010db8a:	68 94 6e 13 f0       	push   $0xf0136e94
f010db8f:	e8 12 26 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010db94:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010db97:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010db9a:	74 17                	je     f010dbb3 <test_insert_sorted_allocList+0x3c8>
f010db9c:	83 ec 04             	sub    $0x4,%esp
f010db9f:	68 08 71 13 f0       	push   $0xf0137108
f010dba4:	68 a5 00 00 00       	push   $0xa5
f010dba9:	68 94 6e 13 f0       	push   $0xf0136e94
f010dbae:	e8 f3 25 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//INSERT Scenario 5: Insert BLOCK_5 in the AllocMemBlocksList with sva not greater than the first block only
	//BLOCK_5 sva = 24K
	blocksToInsertSVAs[3] = 24*kilo;
f010dbb3:	c7 45 e4 00 60 00 00 	movl   $0x6000,-0x1c(%ebp)
	blocksToInsertSizes[3] = (4*kilo);
f010dbba:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[3];
f010dbc1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dbc4:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
	blockToInsert5.size = blocksToInsertSizes[3];
f010dbca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f010dbcd:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	insert_sorted_allocList(&blockToInsert5);
f010dbd3:	83 ec 0c             	sub    $0xc,%esp
f010dbd6:	8d 85 70 ff ff ff    	lea    -0x90(%ebp),%eax
f010dbdc:	50                   	push   %eax
f010dbdd:	e8 e5 34 02 00       	call   f01310c7 <insert_sorted_allocList>
f010dbe2:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	actualSize = 5;
f010dbe5:	c7 45 f0 05 00 00 00 	movl   $0x5,-0x10(%ebp)
	if (LIST_SIZE(&(AllocMemBlocksList)) != actualSize) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AllocMemBlocksList.");
f010dbec:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010dbf1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dbf4:	74 17                	je     f010dc0d <test_insert_sorted_allocList+0x422>
f010dbf6:	83 ec 04             	sub    $0x4,%esp
f010dbf9:	68 1c 70 13 f0       	push   $0xf013701c
f010dbfe:	68 b3 00 00 00       	push   $0xb3
f010dc03:	68 94 6e 13 f0       	push   $0xf0136e94
f010dc08:	e8 99 25 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check size of the AvailableMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks) panic("insert_sorted: WRONG ALLOCATION - wrong size for the AvailableMemBlocksList.");
f010dc0d:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010dc12:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010dc15:	74 17                	je     f010dc2e <test_insert_sorted_allocList+0x443>
f010dc17:	83 ec 04             	sub    $0x4,%esp
f010dc1a:	68 68 70 13 f0       	push   $0xf0137068
f010dc1f:	68 b6 00 00 00       	push   $0xb6
f010dc24:	68 94 6e 13 f0       	push   $0xf0136e94
f010dc29:	e8 78 25 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the allocated list content
	size = 0;
f010dc2e:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	chk = check_list_data(&AllocMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010dc35:	83 ec 0c             	sub    $0xc,%esp
f010dc38:	ff 75 f0             	pushl  -0x10(%ebp)
f010dc3b:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010dc3e:	50                   	push   %eax
f010dc3f:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010dc42:	50                   	push   %eax
f010dc43:	8d 45 d8             	lea    -0x28(%ebp),%eax
f010dc46:	50                   	push   %eax
f010dc47:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010dc4c:	e8 2a 23 00 00       	call   f010ff7b <check_list_data>
f010dc51:	83 c4 20             	add    $0x20,%esp
f010dc54:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if(chk != 1) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList content is not correct.");
f010dc57:	83 7d ec 01          	cmpl   $0x1,-0x14(%ebp)
f010dc5b:	74 17                	je     f010dc74 <test_insert_sorted_allocList+0x489>
f010dc5d:	83 ec 04             	sub    $0x4,%esp
f010dc60:	68 b8 70 13 f0       	push   $0xf01370b8
f010dc65:	68 bb 00 00 00       	push   $0xbb
f010dc6a:	68 94 6e 13 f0       	push   $0xf0136e94
f010dc6f:	e8 32 25 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted: WRONG ALLOCATION .. AllocMemBlocksList size is not correct.");
f010dc74:	8b 45 c0             	mov    -0x40(%ebp),%eax
f010dc77:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010dc7a:	74 17                	je     f010dc93 <test_insert_sorted_allocList+0x4a8>
f010dc7c:	83 ec 04             	sub    $0x4,%esp
f010dc7f:	68 08 71 13 f0       	push   $0xf0137108
f010dc84:	68 bc 00 00 00       	push   $0xbc
f010dc89:	68 94 6e 13 f0       	push   $0xf0136e94
f010dc8e:	e8 13 25 ff ff       	call   f01001a6 <_panic>
	//====================================================================//
	//====================================================================//
	//show_list_content(&AllocMemBlocksList);

	cprintf("Congratulations!! test insert_sorted completed successfully.\n");
f010dc93:	83 ec 0c             	sub    $0xc,%esp
f010dc96:	68 a4 71 13 f0       	push   $0xf01371a4
f010dc9b:	e8 8d 2f ff ff       	call   f0100c2d <cprintf>
f010dca0:	83 c4 10             	add    $0x10,%esp
}
f010dca3:	90                   	nop
f010dca4:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010dca7:	c9                   	leave  
f010dca8:	c3                   	ret    

f010dca9 <test_find_block>:

void test_find_block()
{
f010dca9:	55                   	push   %ebp
f010dcaa:	89 e5                	mov    %esp,%ebp
f010dcac:	57                   	push   %edi
f010dcad:	56                   	push   %esi
f010dcae:	53                   	push   %ebx
f010dcaf:	81 ec ac 00 00 00    	sub    $0xac,%esp
	uint32 numOfBlocks = 6;
f010dcb5:	c7 45 e0 06 00 00 00 	movl   $0x6,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010dcbc:	83 ec 0c             	sub    $0xc,%esp
f010dcbf:	ff 75 e0             	pushl  -0x20(%ebp)
f010dcc2:	e8 e0 32 02 00       	call   f0130fa7 <initialize_MemBlocksList>
f010dcc7:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&FreeMemBlocksList);
f010dcca:	c7 05 c0 84 6e f0 00 	movl   $0x0,0xf06e84c0
f010dcd1:	00 00 00 
f010dcd4:	c7 05 c4 84 6e f0 00 	movl   $0x0,0xf06e84c4
f010dcdb:	00 00 00 
f010dcde:	c7 05 cc 84 6e f0 00 	movl   $0x0,0xf06e84cc
f010dce5:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfAllocBlocks  6
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
f010dce8:	8d 45 c4             	lea    -0x3c(%ebp),%eax
f010dceb:	bb 1c 73 13 f0       	mov    $0xf013731c,%ebx
f010dcf0:	ba 06 00 00 00       	mov    $0x6,%edx
f010dcf5:	89 c7                	mov    %eax,%edi
f010dcf7:	89 de                	mov    %ebx,%esi
f010dcf9:	89 d1                	mov    %edx,%ecx
f010dcfb:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;
f010dcfd:	8d 45 ac             	lea    -0x54(%ebp),%eax
f010dd00:	bb 34 73 13 f0       	mov    $0xf0137334,%ebx
f010dd05:	ba 06 00 00 00       	mov    $0x6,%edx
f010dd0a:	89 c7                	mov    %eax,%edi
f010dd0c:	89 de                	mov    %ebx,%esi
f010dd0e:	89 d1                	mov    %edx,%ecx
f010dd10:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&AllocMemBlocksList);
f010dd12:	c7 05 f0 8f 65 f0 00 	movl   $0x0,0xf0658ff0
f010dd19:	00 00 00 
f010dd1c:	c7 05 f4 8f 65 f0 00 	movl   $0x0,0xf0658ff4
f010dd23:	00 00 00 
f010dd26:	c7 05 fc 8f 65 f0 00 	movl   $0x0,0xf0658ffc
f010dd2d:	00 00 00 
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010dd30:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010dd37:	e9 5f 01 00 00       	jmp    f010de9b <test_find_block+0x1f2>
	{
		blockToInsert[i].sva = BlocksSVAs[i];
f010dd3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dd3f:	8b 44 85 c4          	mov    -0x3c(%ebp,%eax,4),%eax
f010dd43:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dd46:	c1 e2 04             	shl    $0x4,%edx
f010dd49:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010dd4c:	01 da                	add    %ebx,%edx
f010dd4e:	81 ea 94 00 00 00    	sub    $0x94,%edx
f010dd54:	89 02                	mov    %eax,(%edx)
		blockToInsert[i].size = BlocksSizes[i];
f010dd56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dd59:	8b 44 85 ac          	mov    -0x54(%ebp,%eax,4),%eax
f010dd5d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dd60:	c1 e2 04             	shl    $0x4,%edx
f010dd63:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010dd66:	01 f2                	add    %esi,%edx
f010dd68:	81 ea 90 00 00 00    	sub    $0x90,%edx
f010dd6e:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010dd70:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010dd74:	0f 85 92 00 00 00    	jne    f010de0c <test_find_block+0x163>
			LIST_INSERT_HEAD(&AllocMemBlocksList, &(blockToInsert[i]));
f010dd7a:	a1 f0 8f 65 f0       	mov    0xf0658ff0,%eax
f010dd7f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dd82:	c1 e2 04             	shl    $0x4,%edx
f010dd85:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010dd88:	01 fa                	add    %edi,%edx
f010dd8a:	81 ea 9c 00 00 00    	sub    $0x9c,%edx
f010dd90:	89 02                	mov    %eax,(%edx)
f010dd92:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dd95:	c1 e0 04             	shl    $0x4,%eax
f010dd98:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010dd9b:	01 d8                	add    %ebx,%eax
f010dd9d:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010dda2:	8b 00                	mov    (%eax),%eax
f010dda4:	85 c0                	test   %eax,%eax
f010dda6:	74 18                	je     f010ddc0 <test_find_block+0x117>
f010dda8:	a1 f0 8f 65 f0       	mov    0xf0658ff0,%eax
f010ddad:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010ddb3:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ddb6:	c1 e1 04             	shl    $0x4,%ecx
f010ddb9:	01 ca                	add    %ecx,%edx
f010ddbb:	89 50 04             	mov    %edx,0x4(%eax)
f010ddbe:	eb 13                	jmp    f010ddd3 <test_find_block+0x12a>
f010ddc0:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ddc6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ddc9:	c1 e2 04             	shl    $0x4,%edx
f010ddcc:	01 d0                	add    %edx,%eax
f010ddce:	a3 f4 8f 65 f0       	mov    %eax,0xf0658ff4
f010ddd3:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010ddd9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010dddc:	c1 e2 04             	shl    $0x4,%edx
f010dddf:	01 d0                	add    %edx,%eax
f010dde1:	a3 f0 8f 65 f0       	mov    %eax,0xf0658ff0
f010dde6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010dde9:	c1 e0 04             	shl    $0x4,%eax
f010ddec:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ddef:	01 f0                	add    %esi,%eax
f010ddf1:	2d 98 00 00 00       	sub    $0x98,%eax
f010ddf6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ddfc:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010de01:	40                   	inc    %eax
f010de02:	a3 fc 8f 65 f0       	mov    %eax,0xf0658ffc
f010de07:	e9 8c 00 00 00       	jmp    f010de98 <test_find_block+0x1ef>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
f010de0c:	a1 f4 8f 65 f0       	mov    0xf0658ff4,%eax
f010de11:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de14:	c1 e2 04             	shl    $0x4,%edx
f010de17:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010de1a:	01 fa                	add    %edi,%edx
f010de1c:	81 ea 98 00 00 00    	sub    $0x98,%edx
f010de22:	89 02                	mov    %eax,(%edx)
f010de24:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010de27:	c1 e0 04             	shl    $0x4,%eax
f010de2a:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010de2d:	01 d8                	add    %ebx,%eax
f010de2f:	2d 98 00 00 00       	sub    $0x98,%eax
f010de34:	8b 00                	mov    (%eax),%eax
f010de36:	85 c0                	test   %eax,%eax
f010de38:	74 17                	je     f010de51 <test_find_block+0x1a8>
f010de3a:	a1 f4 8f 65 f0       	mov    0xf0658ff4,%eax
f010de3f:	8d 95 4c ff ff ff    	lea    -0xb4(%ebp),%edx
f010de45:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010de48:	c1 e1 04             	shl    $0x4,%ecx
f010de4b:	01 ca                	add    %ecx,%edx
f010de4d:	89 10                	mov    %edx,(%eax)
f010de4f:	eb 13                	jmp    f010de64 <test_find_block+0x1bb>
f010de51:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010de57:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de5a:	c1 e2 04             	shl    $0x4,%edx
f010de5d:	01 d0                	add    %edx,%eax
f010de5f:	a3 f0 8f 65 f0       	mov    %eax,0xf0658ff0
f010de64:	8d 85 4c ff ff ff    	lea    -0xb4(%ebp),%eax
f010de6a:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010de6d:	c1 e2 04             	shl    $0x4,%edx
f010de70:	01 d0                	add    %edx,%eax
f010de72:	a3 f4 8f 65 f0       	mov    %eax,0xf0658ff4
f010de77:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010de7a:	c1 e0 04             	shl    $0x4,%eax
f010de7d:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010de80:	01 f0                	add    %esi,%eax
f010de82:	2d 9c 00 00 00       	sub    $0x9c,%eax
f010de87:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010de8d:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010de92:	40                   	inc    %eax
f010de93:	a3 fc 8f 65 f0       	mov    %eax,0xf0658ffc
	uint32 BlocksSVAs[numOfAllocBlocks] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB
	uint32 BlocksSizes[numOfAllocBlocks] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega} ;

	LIST_INIT(&AllocMemBlocksList);
	struct MemBlock blockToInsert[numOfAllocBlocks];
	for (int i = 0; i < numOfAllocBlocks; ++i)
f010de98:	ff 45 e4             	incl   -0x1c(%ebp)
f010de9b:	83 7d e4 05          	cmpl   $0x5,-0x1c(%ebp)
f010de9f:	0f 8e 97 fe ff ff    	jle    f010dd3c <test_find_block+0x93>
		else
			LIST_INSERT_TAIL(&AllocMemBlocksList, &(blockToInsert[i]));
	}

	/*FIND Scenario 1: Search for a block that doesn't exist (Block with SVA = 4KB)*/
	struct MemBlock * blockToFind = find_block(&AllocMemBlocksList, 0x1000);
f010dea5:	83 ec 08             	sub    $0x8,%esp
f010dea8:	68 00 10 00 00       	push   $0x1000
f010dead:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010deb2:	e8 b8 31 02 00       	call   f013106f <find_block>
f010deb7:	83 c4 10             	add    $0x10,%esp
f010deba:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind != NULL)
f010debd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010dec1:	74 17                	je     f010deda <test_find_block+0x231>
		panic("find_block: WRONG SEARCH - The block you searched for doesn't exist, however find_block find it.");
f010dec3:	83 ec 04             	sub    $0x4,%esp
f010dec6:	68 e4 71 13 f0       	push   $0xf01371e4
f010decb:	68 de 00 00 00       	push   $0xde
f010ded0:	68 94 6e 13 f0       	push   $0xf0136e94
f010ded5:	e8 cc 22 ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 2: Search for a block exist @ the beginning (Block with SVA = 0KB)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x0);
f010deda:	83 ec 08             	sub    $0x8,%esp
f010dedd:	6a 00                	push   $0x0
f010dedf:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010dee4:	e8 86 31 02 00       	call   f013106f <find_block>
f010dee9:	83 c4 10             	add    $0x10,%esp
f010deec:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 3*kilo || blockToFind->sva != 0x0)
f010deef:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010def3:	74 17                	je     f010df0c <test_find_block+0x263>
f010def5:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010def8:	8b 40 0c             	mov    0xc(%eax),%eax
f010defb:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010df00:	75 0a                	jne    f010df0c <test_find_block+0x263>
f010df02:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010df05:	8b 40 08             	mov    0x8(%eax),%eax
f010df08:	85 c0                	test   %eax,%eax
f010df0a:	74 17                	je     f010df23 <test_find_block+0x27a>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010df0c:	83 ec 04             	sub    $0x4,%esp
f010df0f:	68 48 72 13 f0       	push   $0xf0137248
f010df14:	68 e3 00 00 00       	push   $0xe3
f010df19:	68 94 6e 13 f0       	push   $0xf0136e94
f010df1e:	e8 83 22 ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 3: Search for a block exist @ the mid (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x7000);
f010df23:	83 ec 08             	sub    $0x8,%esp
f010df26:	68 00 70 00 00       	push   $0x7000
f010df2b:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010df30:	e8 3a 31 02 00       	call   f013106f <find_block>
f010df35:	83 c4 10             	add    $0x10,%esp
f010df38:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 9*kilo || blockToFind->sva != 0x7000)
f010df3b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010df3f:	74 1a                	je     f010df5b <test_find_block+0x2b2>
f010df41:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010df44:	8b 40 0c             	mov    0xc(%eax),%eax
f010df47:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010df4c:	75 0d                	jne    f010df5b <test_find_block+0x2b2>
f010df4e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010df51:	8b 40 08             	mov    0x8(%eax),%eax
f010df54:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010df59:	74 17                	je     f010df72 <test_find_block+0x2c9>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010df5b:	83 ec 04             	sub    $0x4,%esp
f010df5e:	68 48 72 13 f0       	push   $0xf0137248
f010df63:	68 e8 00 00 00       	push   $0xe8
f010df68:	68 94 6e 13 f0       	push   $0xf0136e94
f010df6d:	e8 34 22 ff ff       	call   f01001a6 <_panic>

	/*FIND Scenario 4: Search for a block exist @ the end (Block with SVA = 0x7000)*/
	blockToFind = find_block(&AllocMemBlocksList, 0x1A400);
f010df72:	83 ec 08             	sub    $0x8,%esp
f010df75:	68 00 a4 01 00       	push   $0x1a400
f010df7a:	68 f0 8f 65 f0       	push   $0xf0658ff0
f010df7f:	e8 eb 30 02 00       	call   f013106f <find_block>
f010df84:	83 c4 10             	add    $0x10,%esp
f010df87:	89 45 dc             	mov    %eax,-0x24(%ebp)
	if(blockToFind == NULL || blockToFind->size != 2*Mega || blockToFind->sva != 0x1A400)
f010df8a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010df8e:	74 1a                	je     f010dfaa <test_find_block+0x301>
f010df90:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010df93:	8b 40 0c             	mov    0xc(%eax),%eax
f010df96:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010df9b:	75 0d                	jne    f010dfaa <test_find_block+0x301>
f010df9d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010dfa0:	8b 40 08             	mov    0x8(%eax),%eax
f010dfa3:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010dfa8:	74 17                	je     f010dfc1 <test_find_block+0x318>
		panic("find_block: WRONG SEARCH - You find wrong block.");
f010dfaa:	83 ec 04             	sub    $0x4,%esp
f010dfad:	68 48 72 13 f0       	push   $0xf0137248
f010dfb2:	68 ed 00 00 00       	push   $0xed
f010dfb7:	68 94 6e 13 f0       	push   $0xf0136e94
f010dfbc:	e8 e5 21 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList & FreeMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 0 )
f010dfc1:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010dfc6:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010dfc9:	75 09                	jne    f010dfd4 <test_find_block+0x32b>
f010dfcb:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010dfd0:	85 c0                	test   %eax,%eax
f010dfd2:	74 17                	je     f010dfeb <test_find_block+0x342>
	{
		panic("find_block: AvailableMemBlocksList and FreeMemBlocksList are affected and this shall not occurred.");
f010dfd4:	83 ec 04             	sub    $0x4,%esp
f010dfd7:	68 7c 72 13 f0       	push   $0xf013727c
f010dfdc:	68 f2 00 00 00       	push   $0xf2
f010dfe1:	68 94 6e 13 f0       	push   $0xf0136e94
f010dfe6:	e8 bb 21 ff ff       	call   f01001a6 <_panic>
	}

	//show_list_content(&AllocMemBlocksList);
	cprintf("Congratulations!! test find_block completed successfully.\n");
f010dfeb:	83 ec 0c             	sub    $0xc,%esp
f010dfee:	68 e0 72 13 f0       	push   $0xf01372e0
f010dff3:	e8 35 2c ff ff       	call   f0100c2d <cprintf>
f010dff8:	83 c4 10             	add    $0x10,%esp
}
f010dffb:	90                   	nop
f010dffc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010dfff:	5b                   	pop    %ebx
f010e000:	5e                   	pop    %esi
f010e001:	5f                   	pop    %edi
f010e002:	5d                   	pop    %ebp
f010e003:	c3                   	ret    

f010e004 <test_alloc_block_FF>:

void test_alloc_block_FF()
{
f010e004:	55                   	push   %ebp
f010e005:	89 e5                	mov    %esp,%ebp
f010e007:	57                   	push   %edi
f010e008:	56                   	push   %esi
f010e009:	53                   	push   %ebx
f010e00a:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010e010:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e017:	83 ec 0c             	sub    $0xc,%esp
f010e01a:	ff 75 e0             	pushl  -0x20(%ebp)
f010e01d:	e8 85 2f 02 00       	call   f0130fa7 <initialize_MemBlocksList>
f010e022:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e025:	c7 05 f0 8f 65 f0 00 	movl   $0x0,0xf0658ff0
f010e02c:	00 00 00 
f010e02f:	c7 05 f4 8f 65 f0 00 	movl   $0x0,0xf0658ff4
f010e036:	00 00 00 
f010e039:	c7 05 fc 8f 65 f0 00 	movl   $0x0,0xf0658ffc
f010e040:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_FF  8
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010e043:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e046:	bb c0 75 13 f0       	mov    $0xf01375c0,%ebx
f010e04b:	ba 08 00 00 00       	mov    $0x8,%edx
f010e050:	89 c7                	mov    %eax,%edi
f010e052:	89 de                	mov    %ebx,%esi
f010e054:	89 d1                	mov    %edx,%ecx
f010e056:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;
f010e058:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e05b:	bb e0 75 13 f0       	mov    $0xf01375e0,%ebx
f010e060:	ba 08 00 00 00       	mov    $0x8,%edx
f010e065:	89 c7                	mov    %eax,%edi
f010e067:	89 de                	mov    %ebx,%esi
f010e069:	89 d1                	mov    %edx,%ecx
f010e06b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e06d:	c7 05 c0 84 6e f0 00 	movl   $0x0,0xf06e84c0
f010e074:	00 00 00 
f010e077:	c7 05 c4 84 6e f0 00 	movl   $0x0,0xf06e84c4
f010e07e:	00 00 00 
f010e081:	c7 05 cc 84 6e f0 00 	movl   $0x0,0xf06e84cc
f010e088:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010e08b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e092:	e9 5f 01 00 00       	jmp    f010e1f6 <test_alloc_block_FF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e097:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e09a:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010e09e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e0a1:	c1 e2 04             	shl    $0x4,%edx
f010e0a4:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e0a7:	01 da                	add    %ebx,%edx
f010e0a9:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010e0af:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010e0b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e0b4:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010e0b8:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e0bb:	c1 e2 04             	shl    $0x4,%edx
f010e0be:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e0c1:	01 f2                	add    %esi,%edx
f010e0c3:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010e0c9:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e0cb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e0cf:	0f 85 92 00 00 00    	jne    f010e167 <test_alloc_block_FF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010e0d5:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f010e0da:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e0dd:	c1 e2 04             	shl    $0x4,%edx
f010e0e0:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e0e3:	01 fa                	add    %edi,%edx
f010e0e5:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010e0eb:	89 02                	mov    %eax,(%edx)
f010e0ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e0f0:	c1 e0 04             	shl    $0x4,%eax
f010e0f3:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e0f6:	01 d8                	add    %ebx,%eax
f010e0f8:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e0fd:	8b 00                	mov    (%eax),%eax
f010e0ff:	85 c0                	test   %eax,%eax
f010e101:	74 18                	je     f010e11b <test_alloc_block_FF+0x117>
f010e103:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f010e108:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e10e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e111:	c1 e1 04             	shl    $0x4,%ecx
f010e114:	01 ca                	add    %ecx,%edx
f010e116:	89 50 04             	mov    %edx,0x4(%eax)
f010e119:	eb 13                	jmp    f010e12e <test_alloc_block_FF+0x12a>
f010e11b:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e121:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e124:	c1 e2 04             	shl    $0x4,%edx
f010e127:	01 d0                	add    %edx,%eax
f010e129:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f010e12e:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e134:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e137:	c1 e2 04             	shl    $0x4,%edx
f010e13a:	01 d0                	add    %edx,%eax
f010e13c:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f010e141:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e144:	c1 e0 04             	shl    $0x4,%eax
f010e147:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e14a:	01 f0                	add    %esi,%eax
f010e14c:	2d d0 00 00 00       	sub    $0xd0,%eax
f010e151:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e157:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e15c:	40                   	inc    %eax
f010e15d:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
f010e162:	e9 8c 00 00 00       	jmp    f010e1f3 <test_alloc_block_FF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010e167:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f010e16c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e16f:	c1 e2 04             	shl    $0x4,%edx
f010e172:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e175:	01 fa                	add    %edi,%edx
f010e177:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010e17d:	89 02                	mov    %eax,(%edx)
f010e17f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e182:	c1 e0 04             	shl    $0x4,%eax
f010e185:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e188:	01 d8                	add    %ebx,%eax
f010e18a:	2d d0 00 00 00       	sub    $0xd0,%eax
f010e18f:	8b 00                	mov    (%eax),%eax
f010e191:	85 c0                	test   %eax,%eax
f010e193:	74 17                	je     f010e1ac <test_alloc_block_FF+0x1a8>
f010e195:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f010e19a:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010e1a0:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e1a3:	c1 e1 04             	shl    $0x4,%ecx
f010e1a6:	01 ca                	add    %ecx,%edx
f010e1a8:	89 10                	mov    %edx,(%eax)
f010e1aa:	eb 13                	jmp    f010e1bf <test_alloc_block_FF+0x1bb>
f010e1ac:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e1b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e1b5:	c1 e2 04             	shl    $0x4,%edx
f010e1b8:	01 d0                	add    %edx,%eax
f010e1ba:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f010e1bf:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010e1c5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e1c8:	c1 e2 04             	shl    $0x4,%edx
f010e1cb:	01 d0                	add    %edx,%eax
f010e1cd:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f010e1d2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e1d5:	c1 e0 04             	shl    $0x4,%eax
f010e1d8:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e1db:	01 f0                	add    %esi,%eax
f010e1dd:	2d d4 00 00 00       	sub    $0xd4,%eax
f010e1e2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e1e8:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e1ed:	40                   	inc    %eax
f010e1ee:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
	uint32 BlocksSVAs[numOfFreeBlocks_FF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_FF] = {3*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega, 5*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_FF];
	for (int i = 0; i < numOfFreeBlocks_FF; ++i)
f010e1f3:	ff 45 e4             	incl   -0x1c(%ebp)
f010e1f6:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010e1fa:	0f 8e 97 fe ff ff    	jle    f010e097 <test_alloc_block_FF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*FF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_FF(3*Mega);
f010e200:	83 ec 0c             	sub    $0xc,%esp
f010e203:	68 00 00 30 00       	push   $0x300000
f010e208:	e8 55 30 02 00       	call   f0131262 <alloc_block_FF>
f010e20d:	83 c4 10             	add    $0x10,%esp
f010e210:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a block instead no existing free blocks with the given size.");
f010e213:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e217:	74 17                	je     f010e230 <test_alloc_block_FF+0x22c>
f010e219:	83 ec 04             	sub    $0x4,%esp
f010e21c:	68 4c 73 13 f0       	push   $0xf013734c
f010e221:	68 15 01 00 00       	push   $0x115
f010e226:	68 94 6e 13 f0       	push   $0xf0136e94
f010e22b:	e8 76 1f ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e230:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010e235:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e238:	75 13                	jne    f010e24d <test_alloc_block_FF+0x249>
f010e23a:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e23f:	83 f8 08             	cmp    $0x8,%eax
f010e242:	75 09                	jne    f010e24d <test_alloc_block_FF+0x249>
f010e244:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010e249:	85 c0                	test   %eax,%eax
f010e24b:	74 17                	je     f010e264 <test_alloc_block_FF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010e24d:	83 ec 04             	sub    $0x4,%esp
f010e250:	68 c0 73 13 f0       	push   $0xf01373c0
f010e255:	68 19 01 00 00       	push   $0x119
f010e25a:	68 94 6e 13 f0       	push   $0xf0136e94
f010e25f:	e8 42 1f ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(9*kilo);
f010e264:	83 ec 0c             	sub    $0xc,%esp
f010e267:	68 00 24 00 00       	push   $0x2400
f010e26c:	e8 f1 2f 02 00       	call   f0131262 <alloc_block_FF>
f010e271:	83 c4 10             	add    $0x10,%esp
f010e274:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 9*kilo || blockToAlloc->sva != 0x7000)
f010e277:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e27b:	74 1a                	je     f010e297 <test_alloc_block_FF+0x293>
f010e27d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e280:	8b 40 0c             	mov    0xc(%eax),%eax
f010e283:	3d 00 24 00 00       	cmp    $0x2400,%eax
f010e288:	75 0d                	jne    f010e297 <test_alloc_block_FF+0x293>
f010e28a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e28d:	8b 40 08             	mov    0x8(%eax),%eax
f010e290:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010e295:	74 17                	je     f010e2ae <test_alloc_block_FF+0x2aa>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010e297:	83 ec 04             	sub    $0x4,%esp
f010e29a:	68 38 74 13 f0       	push   $0xf0137438
f010e29f:	68 21 01 00 00       	push   $0x121
f010e2a4:	68 94 6e 13 f0       	push   $0xf0136e94
f010e2a9:	e8 f8 1e ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e2ae:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010e2b3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e2b6:	75 13                	jne    f010e2cb <test_alloc_block_FF+0x2c7>
f010e2b8:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e2bd:	83 f8 07             	cmp    $0x7,%eax
f010e2c0:	75 09                	jne    f010e2cb <test_alloc_block_FF+0x2c7>
f010e2c2:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010e2c7:	85 c0                	test   %eax,%eax
f010e2c9:	74 17                	je     f010e2e2 <test_alloc_block_FF+0x2de>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e2cb:	83 ec 04             	sub    $0x4,%esp
f010e2ce:	68 7c 74 13 f0       	push   $0xf013747c
f010e2d3:	68 25 01 00 00       	push   $0x125
f010e2d8:	68 94 6e 13 f0       	push   $0xf0136e94
f010e2dd:	e8 c4 1e ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010e2e2:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e2e9:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_FF-1;
f010e2ec:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010e2f3:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010e2fa:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e301:	83 ec 0c             	sub    $0xc,%esp
f010e304:	ff 75 d8             	pushl  -0x28(%ebp)
f010e307:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e30d:	50                   	push   %eax
f010e30e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e311:	50                   	push   %eax
f010e312:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e315:	50                   	push   %eax
f010e316:	68 c0 84 6e f0       	push   $0xf06e84c0
f010e31b:	e8 5b 1c 00 00       	call   f010ff7b <check_list_data>
f010e320:	83 c4 20             	add    $0x20,%esp
f010e323:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010e326:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e32a:	74 17                	je     f010e343 <test_alloc_block_FF+0x33f>
f010e32c:	83 ec 04             	sub    $0x4,%esp
f010e32f:	68 e0 74 13 f0       	push   $0xf01374e0
f010e334:	68 2d 01 00 00       	push   $0x12d
f010e339:	68 94 6e 13 f0       	push   $0xf0136e94
f010e33e:	e8 63 1e ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010e343:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e349:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e34c:	74 17                	je     f010e365 <test_alloc_block_FF+0x361>
f010e34e:	83 ec 04             	sub    $0x4,%esp
f010e351:	68 2c 75 13 f0       	push   $0xf013752c
f010e356:	68 2e 01 00 00       	push   $0x12e
f010e35b:	68 94 6e 13 f0       	push   $0xf0136e94
f010e360:	e8 41 1e ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*FF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of the first existing free block*/
	blockToAlloc = alloc_block_FF(1*Mega);
f010e365:	83 ec 0c             	sub    $0xc,%esp
f010e368:	68 00 00 10 00       	push   $0x100000
f010e36d:	e8 f0 2e 02 00       	call   f0131262 <alloc_block_FF>
f010e372:	83 c4 10             	add    $0x10,%esp
f010e375:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010e378:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e37c:	74 1a                	je     f010e398 <test_alloc_block_FF+0x394>
f010e37e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e381:	8b 40 0c             	mov    0xc(%eax),%eax
f010e384:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e389:	75 0d                	jne    f010e398 <test_alloc_block_FF+0x394>
f010e38b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e38e:	8b 40 08             	mov    0x8(%eax),%eax
f010e391:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e396:	74 17                	je     f010e3af <test_alloc_block_FF+0x3ab>
		panic("alloc_block_FF: WRONG FF ALLOC - alloc_block_FF find a wrong block.");
f010e398:	83 ec 04             	sub    $0x4,%esp
f010e39b:	68 38 74 13 f0       	push   $0xf0137438
f010e3a0:	68 36 01 00 00       	push   $0x136
f010e3a5:	68 94 6e 13 f0       	push   $0xf0136e94
f010e3aa:	e8 f7 1d ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_FF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e3af:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010e3b4:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e3b7:	4a                   	dec    %edx
f010e3b8:	39 d0                	cmp    %edx,%eax
f010e3ba:	75 13                	jne    f010e3cf <test_alloc_block_FF+0x3cb>
f010e3bc:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e3c1:	83 f8 07             	cmp    $0x7,%eax
f010e3c4:	75 09                	jne    f010e3cf <test_alloc_block_FF+0x3cb>
f010e3c6:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010e3cb:	85 c0                	test   %eax,%eax
f010e3cd:	74 17                	je     f010e3e6 <test_alloc_block_FF+0x3e2>
		panic("alloc_block_FF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e3cf:	83 ec 04             	sub    $0x4,%esp
f010e3d2:	68 7c 74 13 f0       	push   $0xf013747c
f010e3d7:	68 3a 01 00 00       	push   $0x13a
f010e3dc:	68 94 6e 13 f0       	push   $0xf0136e94
f010e3e1:	e8 c0 1d ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e3e6:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010e3ed:	00 00 00 
	actualSize = numOfFreeBlocks_FF-1;
f010e3f0:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010e3f7:	c7 45 c8 00 a4 11 00 	movl   $0x11a400,-0x38(%ebp)
	BlocksSizes[5] = 1*Mega;
f010e3fe:	c7 45 a8 00 00 10 00 	movl   $0x100000,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e405:	83 ec 0c             	sub    $0xc,%esp
f010e408:	ff 75 d8             	pushl  -0x28(%ebp)
f010e40b:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010e411:	50                   	push   %eax
f010e412:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010e415:	50                   	push   %eax
f010e416:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010e419:	50                   	push   %eax
f010e41a:	68 c0 84 6e f0       	push   $0xf06e84c0
f010e41f:	e8 57 1b 00 00       	call   f010ff7b <check_list_data>
f010e424:	83 c4 20             	add    $0x20,%esp
f010e427:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList content is not correct.");
f010e42a:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e42e:	74 17                	je     f010e447 <test_alloc_block_FF+0x443>
f010e430:	83 ec 04             	sub    $0x4,%esp
f010e433:	68 e0 74 13 f0       	push   $0xf01374e0
f010e438:	68 42 01 00 00       	push   $0x142
f010e43d:	68 94 6e 13 f0       	push   $0xf0136e94
f010e442:	e8 5f 1d ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_FF: WRONG FF ALLOC .. FreeMemBlocksList size is not correct.");
f010e447:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010e44d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e450:	74 17                	je     f010e469 <test_alloc_block_FF+0x465>
f010e452:	83 ec 04             	sub    $0x4,%esp
f010e455:	68 2c 75 13 f0       	push   $0xf013752c
f010e45a:	68 43 01 00 00       	push   $0x143
f010e45f:	68 94 6e 13 f0       	push   $0xf0136e94
f010e464:	e8 3d 1d ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_FF completed successfully.\n");
f010e469:	83 ec 0c             	sub    $0xc,%esp
f010e46c:	68 78 75 13 f0       	push   $0xf0137578
f010e471:	e8 b7 27 ff ff       	call   f0100c2d <cprintf>
f010e476:	83 c4 10             	add    $0x10,%esp
}
f010e479:	90                   	nop
f010e47a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010e47d:	5b                   	pop    %ebx
f010e47e:	5e                   	pop    %esi
f010e47f:	5f                   	pop    %edi
f010e480:	5d                   	pop    %ebp
f010e481:	c3                   	ret    

f010e482 <test_alloc_block_BF>:

void test_alloc_block_BF()
{
f010e482:	55                   	push   %ebp
f010e483:	89 e5                	mov    %esp,%ebp
f010e485:	57                   	push   %edi
f010e486:	56                   	push   %esi
f010e487:	53                   	push   %ebx
f010e488:	81 ec cc 00 00 00    	sub    $0xcc,%esp
	uint32 numOfBlocks = 10;
f010e48e:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010e495:	83 ec 0c             	sub    $0xc,%esp
f010e498:	ff 75 e0             	pushl  -0x20(%ebp)
f010e49b:	e8 07 2b 02 00       	call   f0130fa7 <initialize_MemBlocksList>
f010e4a0:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010e4a3:	c7 05 f0 8f 65 f0 00 	movl   $0x0,0xf0658ff0
f010e4aa:	00 00 00 
f010e4ad:	c7 05 f4 8f 65 f0 00 	movl   $0x0,0xf0658ff4
f010e4b4:	00 00 00 
f010e4b7:	c7 05 fc 8f 65 f0 00 	movl   $0x0,0xf0658ffc
f010e4be:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_BF 7
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
f010e4c1:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e4c4:	bb f4 77 13 f0       	mov    $0xf01377f4,%ebx
f010e4c9:	ba 07 00 00 00       	mov    $0x7,%edx
f010e4ce:	89 c7                	mov    %eax,%edi
f010e4d0:	89 de                	mov    %ebx,%esi
f010e4d2:	89 d1                	mov    %edx,%ecx
f010e4d4:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;
f010e4d6:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e4d9:	bb 10 78 13 f0       	mov    $0xf0137810,%ebx
f010e4de:	ba 07 00 00 00       	mov    $0x7,%edx
f010e4e3:	89 c7                	mov    %eax,%edi
f010e4e5:	89 de                	mov    %ebx,%esi
f010e4e7:	89 d1                	mov    %edx,%ecx
f010e4e9:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010e4eb:	c7 05 c0 84 6e f0 00 	movl   $0x0,0xf06e84c0
f010e4f2:	00 00 00 
f010e4f5:	c7 05 c4 84 6e f0 00 	movl   $0x0,0xf06e84c4
f010e4fc:	00 00 00 
f010e4ff:	c7 05 cc 84 6e f0 00 	movl   $0x0,0xf06e84cc
f010e506:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010e509:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010e510:	e9 5f 01 00 00       	jmp    f010e674 <test_alloc_block_BF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010e515:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e518:	8b 44 85 b8          	mov    -0x48(%ebp,%eax,4),%eax
f010e51c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e51f:	c1 e2 04             	shl    $0x4,%edx
f010e522:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e525:	01 da                	add    %ebx,%edx
f010e527:	81 ea b4 00 00 00    	sub    $0xb4,%edx
f010e52d:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010e52f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e532:	8b 44 85 9c          	mov    -0x64(%ebp,%eax,4),%eax
f010e536:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e539:	c1 e2 04             	shl    $0x4,%edx
f010e53c:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e53f:	01 f2                	add    %esi,%edx
f010e541:	81 ea b0 00 00 00    	sub    $0xb0,%edx
f010e547:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010e549:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010e54d:	0f 85 92 00 00 00    	jne    f010e5e5 <test_alloc_block_BF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010e553:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f010e558:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e55b:	c1 e2 04             	shl    $0x4,%edx
f010e55e:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e561:	01 fa                	add    %edi,%edx
f010e563:	81 ea bc 00 00 00    	sub    $0xbc,%edx
f010e569:	89 02                	mov    %eax,(%edx)
f010e56b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e56e:	c1 e0 04             	shl    $0x4,%eax
f010e571:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e574:	01 d8                	add    %ebx,%eax
f010e576:	2d bc 00 00 00       	sub    $0xbc,%eax
f010e57b:	8b 00                	mov    (%eax),%eax
f010e57d:	85 c0                	test   %eax,%eax
f010e57f:	74 18                	je     f010e599 <test_alloc_block_BF+0x117>
f010e581:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f010e586:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010e58c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e58f:	c1 e1 04             	shl    $0x4,%ecx
f010e592:	01 ca                	add    %ecx,%edx
f010e594:	89 50 04             	mov    %edx,0x4(%eax)
f010e597:	eb 13                	jmp    f010e5ac <test_alloc_block_BF+0x12a>
f010e599:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e59f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e5a2:	c1 e2 04             	shl    $0x4,%edx
f010e5a5:	01 d0                	add    %edx,%eax
f010e5a7:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f010e5ac:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e5b2:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e5b5:	c1 e2 04             	shl    $0x4,%edx
f010e5b8:	01 d0                	add    %edx,%eax
f010e5ba:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f010e5bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e5c2:	c1 e0 04             	shl    $0x4,%eax
f010e5c5:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e5c8:	01 f0                	add    %esi,%eax
f010e5ca:	2d b8 00 00 00       	sub    $0xb8,%eax
f010e5cf:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e5d5:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e5da:	40                   	inc    %eax
f010e5db:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
f010e5e0:	e9 8c 00 00 00       	jmp    f010e671 <test_alloc_block_BF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010e5e5:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f010e5ea:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e5ed:	c1 e2 04             	shl    $0x4,%edx
f010e5f0:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010e5f3:	01 fa                	add    %edi,%edx
f010e5f5:	81 ea b8 00 00 00    	sub    $0xb8,%edx
f010e5fb:	89 02                	mov    %eax,(%edx)
f010e5fd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e600:	c1 e0 04             	shl    $0x4,%eax
f010e603:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010e606:	01 d8                	add    %ebx,%eax
f010e608:	2d b8 00 00 00       	sub    $0xb8,%eax
f010e60d:	8b 00                	mov    (%eax),%eax
f010e60f:	85 c0                	test   %eax,%eax
f010e611:	74 17                	je     f010e62a <test_alloc_block_BF+0x1a8>
f010e613:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f010e618:	8d 95 2c ff ff ff    	lea    -0xd4(%ebp),%edx
f010e61e:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010e621:	c1 e1 04             	shl    $0x4,%ecx
f010e624:	01 ca                	add    %ecx,%edx
f010e626:	89 10                	mov    %edx,(%eax)
f010e628:	eb 13                	jmp    f010e63d <test_alloc_block_BF+0x1bb>
f010e62a:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e630:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e633:	c1 e2 04             	shl    $0x4,%edx
f010e636:	01 d0                	add    %edx,%eax
f010e638:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f010e63d:	8d 85 2c ff ff ff    	lea    -0xd4(%ebp),%eax
f010e643:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010e646:	c1 e2 04             	shl    $0x4,%edx
f010e649:	01 d0                	add    %edx,%eax
f010e64b:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f010e650:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010e653:	c1 e0 04             	shl    $0x4,%eax
f010e656:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010e659:	01 f0                	add    %esi,%eax
f010e65b:	2d bc 00 00 00       	sub    $0xbc,%eax
f010e660:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010e666:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e66b:	40                   	inc    %eax
f010e66c:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
	uint32 BlocksSVAs[numOfFreeBlocks_BF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB
	uint32 BlocksSizes[numOfFreeBlocks_BF] = {2*kilo, 8*kilo, 1*kilo, 9*kilo, 4*kilo, 2*Mega, 1*Mega} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_BF];
	for (int i = 0; i < numOfFreeBlocks_BF; ++i)
f010e671:	ff 45 e4             	incl   -0x1c(%ebp)
f010e674:	83 7d e4 06          	cmpl   $0x6,-0x1c(%ebp)
f010e678:	0f 8e 97 fe ff ff    	jle    f010e515 <test_alloc_block_BF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*BF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_BF(4*Mega);
f010e67e:	83 ec 0c             	sub    $0xc,%esp
f010e681:	68 00 00 40 00       	push   $0x400000
f010e686:	e8 a1 2d 02 00       	call   f013142c <alloc_block_BF>
f010e68b:	83 c4 10             	add    $0x10,%esp
f010e68e:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a block instead no existing free blocks with the given size.");
f010e691:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e695:	74 17                	je     f010e6ae <test_alloc_block_BF+0x22c>
f010e697:	83 ec 04             	sub    $0x4,%esp
f010e69a:	68 00 76 13 f0       	push   $0xf0137600
f010e69f:	68 66 01 00 00       	push   $0x166
f010e6a4:	68 94 6e 13 f0       	push   $0xf0136e94
f010e6a9:	e8 f8 1a ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e6ae:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010e6b3:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e6b6:	75 13                	jne    f010e6cb <test_alloc_block_BF+0x249>
f010e6b8:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e6bd:	83 f8 07             	cmp    $0x7,%eax
f010e6c0:	75 09                	jne    f010e6cb <test_alloc_block_BF+0x249>
f010e6c2:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010e6c7:	85 c0                	test   %eax,%eax
f010e6c9:	74 17                	je     f010e6e2 <test_alloc_block_BF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010e6cb:	83 ec 04             	sub    $0x4,%esp
f010e6ce:	68 c0 73 13 f0       	push   $0xf01373c0
f010e6d3:	68 6a 01 00 00       	push   $0x16a
f010e6d8:	68 94 6e 13 f0       	push   $0xf0136e94
f010e6dd:	e8 c4 1a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (NOT THE FIRST BLOCK FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010e6e2:	83 ec 0c             	sub    $0xc,%esp
f010e6e5:	68 00 00 10 00       	push   $0x100000
f010e6ea:	e8 3d 2d 02 00       	call   f013142c <alloc_block_BF>
f010e6ef:	83 c4 10             	add    $0x10,%esp
f010e6f2:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x21B400)
f010e6f5:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e6f9:	74 1a                	je     f010e715 <test_alloc_block_BF+0x293>
f010e6fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e6fe:	8b 40 0c             	mov    0xc(%eax),%eax
f010e701:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e706:	75 0d                	jne    f010e715 <test_alloc_block_BF+0x293>
f010e708:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e70b:	8b 40 08             	mov    0x8(%eax),%eax
f010e70e:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010e713:	74 17                	je     f010e72c <test_alloc_block_BF+0x2aa>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e715:	83 ec 04             	sub    $0x4,%esp
f010e718:	68 74 76 13 f0       	push   $0xf0137674
f010e71d:	68 72 01 00 00       	push   $0x172
f010e722:	68 94 6e 13 f0       	push   $0xf0136e94
f010e727:	e8 7a 1a ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e72c:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010e731:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010e734:	75 13                	jne    f010e749 <test_alloc_block_BF+0x2c7>
f010e736:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e73b:	83 f8 06             	cmp    $0x6,%eax
f010e73e:	75 09                	jne    f010e749 <test_alloc_block_BF+0x2c7>
f010e740:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010e745:	85 c0                	test   %eax,%eax
f010e747:	74 17                	je     f010e760 <test_alloc_block_BF+0x2de>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e749:	83 ec 04             	sub    $0x4,%esp
f010e74c:	68 b8 76 13 f0       	push   $0xf01376b8
f010e751:	68 76 01 00 00       	push   $0x176
f010e756:	68 94 6e 13 f0       	push   $0xf0136e94
f010e75b:	e8 46 1a ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010e760:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010e767:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_BF-1;
f010e76a:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0;
f010e771:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
	BlocksSizes[6] = 0;
f010e778:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e77f:	83 ec 0c             	sub    $0xc,%esp
f010e782:	ff 75 d8             	pushl  -0x28(%ebp)
f010e785:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010e78b:	50                   	push   %eax
f010e78c:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e78f:	50                   	push   %eax
f010e790:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e793:	50                   	push   %eax
f010e794:	68 c0 84 6e f0       	push   $0xf06e84c0
f010e799:	e8 dd 17 00 00       	call   f010ff7b <check_list_data>
f010e79e:	83 c4 20             	add    $0x20,%esp
f010e7a1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010e7a4:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e7a8:	74 17                	je     f010e7c1 <test_alloc_block_BF+0x33f>
f010e7aa:	83 ec 04             	sub    $0x4,%esp
f010e7ad:	68 1c 77 13 f0       	push   $0xf013771c
f010e7b2:	68 7e 01 00 00       	push   $0x17e
f010e7b7:	68 94 6e 13 f0       	push   $0xf0136e94
f010e7bc:	e8 e5 19 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010e7c1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e7c7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e7ca:	74 17                	je     f010e7e3 <test_alloc_block_BF+0x361>
f010e7cc:	83 ec 04             	sub    $0x4,%esp
f010e7cf:	68 68 77 13 f0       	push   $0xf0137768
f010e7d4:	68 7f 01 00 00       	push   $0x17f
f010e7d9:	68 94 6e 13 f0       	push   $0xf0136e94
f010e7de:	e8 c3 19 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 3: Try to allocate a block with a size smaller than the size of any existing free block (ONLY ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(1*Mega);
f010e7e3:	83 ec 0c             	sub    $0xc,%esp
f010e7e6:	68 00 00 10 00       	push   $0x100000
f010e7eb:	e8 3c 2c 02 00       	call   f013142c <alloc_block_BF>
f010e7f0:	83 c4 10             	add    $0x10,%esp
f010e7f3:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*Mega || blockToAlloc->sva != 0x1A400)
f010e7f6:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e7fa:	74 1a                	je     f010e816 <test_alloc_block_BF+0x394>
f010e7fc:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e7ff:	8b 40 0c             	mov    0xc(%eax),%eax
f010e802:	3d 00 00 10 00       	cmp    $0x100000,%eax
f010e807:	75 0d                	jne    f010e816 <test_alloc_block_BF+0x394>
f010e809:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e80c:	8b 40 08             	mov    0x8(%eax),%eax
f010e80f:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010e814:	74 17                	je     f010e82d <test_alloc_block_BF+0x3ab>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e816:	83 ec 04             	sub    $0x4,%esp
f010e819:	68 74 76 13 f0       	push   $0xf0137674
f010e81e:	68 87 01 00 00       	push   $0x187
f010e823:	68 94 6e 13 f0       	push   $0xf0136e94
f010e828:	e8 79 19 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e82d:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010e832:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e835:	4a                   	dec    %edx
f010e836:	39 d0                	cmp    %edx,%eax
f010e838:	75 13                	jne    f010e84d <test_alloc_block_BF+0x3cb>
f010e83a:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e83f:	83 f8 06             	cmp    $0x6,%eax
f010e842:	75 09                	jne    f010e84d <test_alloc_block_BF+0x3cb>
f010e844:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010e849:	85 c0                	test   %eax,%eax
f010e84b:	74 17                	je     f010e864 <test_alloc_block_BF+0x3e2>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e84d:	83 ec 04             	sub    $0x4,%esp
f010e850:	68 b8 76 13 f0       	push   $0xf01376b8
f010e855:	68 8b 01 00 00       	push   $0x18b
f010e85a:	68 94 6e 13 f0       	push   $0xf0136e94
f010e85f:	e8 42 19 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e864:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010e86b:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010e86e:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0x11A400;  //105KB + 1Mega = (105*1024)+(1024*1024)
f010e875:	c7 45 cc 00 a4 11 00 	movl   $0x11a400,-0x34(%ebp)
	BlocksSizes[5] = 1*Mega;
f010e87c:	c7 45 b0 00 00 10 00 	movl   $0x100000,-0x50(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e883:	83 ec 0c             	sub    $0xc,%esp
f010e886:	ff 75 d8             	pushl  -0x28(%ebp)
f010e889:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010e88f:	50                   	push   %eax
f010e890:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e893:	50                   	push   %eax
f010e894:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e897:	50                   	push   %eax
f010e898:	68 c0 84 6e f0       	push   $0xf06e84c0
f010e89d:	e8 d9 16 00 00       	call   f010ff7b <check_list_data>
f010e8a2:	83 c4 20             	add    $0x20,%esp
f010e8a5:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010e8a8:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e8ac:	74 17                	je     f010e8c5 <test_alloc_block_BF+0x443>
f010e8ae:	83 ec 04             	sub    $0x4,%esp
f010e8b1:	68 1c 77 13 f0       	push   $0xf013771c
f010e8b6:	68 93 01 00 00       	push   $0x193
f010e8bb:	68 94 6e 13 f0       	push   $0xf0136e94
f010e8c0:	e8 e1 18 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010e8c5:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e8cb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e8ce:	74 17                	je     f010e8e7 <test_alloc_block_BF+0x465>
f010e8d0:	83 ec 04             	sub    $0x4,%esp
f010e8d3:	68 68 77 13 f0       	push   $0xf0137768
f010e8d8:	68 94 01 00 00       	push   $0x194
f010e8dd:	68 94 6e 13 f0       	push   $0xf0136e94
f010e8e2:	e8 bf 18 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (MORE THAN ONE BLOCK CAN FIT)*/
	blockToAlloc = alloc_block_BF(3*kilo);
f010e8e7:	83 ec 0c             	sub    $0xc,%esp
f010e8ea:	68 00 0c 00 00       	push   $0xc00
f010e8ef:	e8 38 2b 02 00       	call   f013142c <alloc_block_BF>
f010e8f4:	83 c4 10             	add    $0x10,%esp
f010e8f7:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x19000)
f010e8fa:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010e8fe:	74 1a                	je     f010e91a <test_alloc_block_BF+0x498>
f010e900:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e903:	8b 40 0c             	mov    0xc(%eax),%eax
f010e906:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010e90b:	75 0d                	jne    f010e91a <test_alloc_block_BF+0x498>
f010e90d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010e910:	8b 40 08             	mov    0x8(%eax),%eax
f010e913:	3d 00 90 01 00       	cmp    $0x19000,%eax
f010e918:	74 17                	je     f010e931 <test_alloc_block_BF+0x4af>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010e91a:	83 ec 04             	sub    $0x4,%esp
f010e91d:	68 74 76 13 f0       	push   $0xf0137674
f010e922:	68 9c 01 00 00       	push   $0x19c
f010e927:	68 94 6e 13 f0       	push   $0xf0136e94
f010e92c:	e8 75 18 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010e931:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010e936:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010e939:	83 ea 02             	sub    $0x2,%edx
f010e93c:	39 d0                	cmp    %edx,%eax
f010e93e:	75 13                	jne    f010e953 <test_alloc_block_BF+0x4d1>
f010e940:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010e945:	83 f8 06             	cmp    $0x6,%eax
f010e948:	75 09                	jne    f010e953 <test_alloc_block_BF+0x4d1>
f010e94a:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010e94f:	85 c0                	test   %eax,%eax
f010e951:	74 17                	je     f010e96a <test_alloc_block_BF+0x4e8>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010e953:	83 ec 04             	sub    $0x4,%esp
f010e956:	68 b8 76 13 f0       	push   $0xf01376b8
f010e95b:	68 a0 01 00 00       	push   $0x1a0
f010e960:	68 94 6e 13 f0       	push   $0xf0136e94
f010e965:	e8 3c 18 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010e96a:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010e971:	00 00 00 
	actualSize = numOfFreeBlocks_BF-1;
f010e974:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[4] = 0x19C00;  //100KB + 3KB
f010e97b:	c7 45 c8 00 9c 01 00 	movl   $0x19c00,-0x38(%ebp)
	BlocksSizes[4] = 1*kilo;
f010e982:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010e989:	83 ec 0c             	sub    $0xc,%esp
f010e98c:	ff 75 d8             	pushl  -0x28(%ebp)
f010e98f:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010e995:	50                   	push   %eax
f010e996:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010e999:	50                   	push   %eax
f010e99a:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010e99d:	50                   	push   %eax
f010e99e:	68 c0 84 6e f0       	push   $0xf06e84c0
f010e9a3:	e8 d3 15 00 00       	call   f010ff7b <check_list_data>
f010e9a8:	83 c4 20             	add    $0x20,%esp
f010e9ab:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010e9ae:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010e9b2:	74 17                	je     f010e9cb <test_alloc_block_BF+0x549>
f010e9b4:	83 ec 04             	sub    $0x4,%esp
f010e9b7:	68 1c 77 13 f0       	push   $0xf013771c
f010e9bc:	68 a8 01 00 00       	push   $0x1a8
f010e9c1:	68 94 6e 13 f0       	push   $0xf0136e94
f010e9c6:	e8 db 17 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010e9cb:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010e9d1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010e9d4:	74 17                	je     f010e9ed <test_alloc_block_BF+0x56b>
f010e9d6:	83 ec 04             	sub    $0x4,%esp
f010e9d9:	68 68 77 13 f0       	push   $0xf0137768
f010e9de:	68 a9 01 00 00       	push   $0x1a9
f010e9e3:	68 94 6e 13 f0       	push   $0xf0136e94
f010e9e8:	e8 b9 17 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*BF ALLOC Scenario 5: Try to allocate a block @ the head of the free block list */
	blockToAlloc = alloc_block_BF(2*kilo);
f010e9ed:	83 ec 0c             	sub    $0xc,%esp
f010e9f0:	68 00 08 00 00       	push   $0x800
f010e9f5:	e8 32 2a 02 00       	call   f013142c <alloc_block_BF>
f010e9fa:	83 c4 10             	add    $0x10,%esp
f010e9fd:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*kilo || blockToAlloc->sva != 0x0)
f010ea00:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ea04:	74 17                	je     f010ea1d <test_alloc_block_BF+0x59b>
f010ea06:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ea09:	8b 40 0c             	mov    0xc(%eax),%eax
f010ea0c:	3d 00 08 00 00       	cmp    $0x800,%eax
f010ea11:	75 0a                	jne    f010ea1d <test_alloc_block_BF+0x59b>
f010ea13:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ea16:	8b 40 08             	mov    0x8(%eax),%eax
f010ea19:	85 c0                	test   %eax,%eax
f010ea1b:	74 17                	je     f010ea34 <test_alloc_block_BF+0x5b2>
		panic("alloc_block_BF: WRONG BF ALLOC - alloc_block_BF find a wrong block.");
f010ea1d:	83 ec 04             	sub    $0x4,%esp
f010ea20:	68 74 76 13 f0       	push   $0xf0137674
f010ea25:	68 b1 01 00 00       	push   $0x1b1
f010ea2a:	68 94 6e 13 f0       	push   $0xf0136e94
f010ea2f:	e8 72 17 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_BF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ea34:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010ea39:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010ea3c:	83 ea 02             	sub    $0x2,%edx
f010ea3f:	39 d0                	cmp    %edx,%eax
f010ea41:	75 13                	jne    f010ea56 <test_alloc_block_BF+0x5d4>
f010ea43:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010ea48:	83 f8 05             	cmp    $0x5,%eax
f010ea4b:	75 09                	jne    f010ea56 <test_alloc_block_BF+0x5d4>
f010ea4d:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010ea52:	85 c0                	test   %eax,%eax
f010ea54:	74 17                	je     f010ea6d <test_alloc_block_BF+0x5eb>
		panic("alloc_block_BF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010ea56:	83 ec 04             	sub    $0x4,%esp
f010ea59:	68 b8 76 13 f0       	push   $0xf01376b8
f010ea5e:	68 b5 01 00 00       	push   $0x1b5
f010ea63:	68 94 6e 13 f0       	push   $0xf0136e94
f010ea68:	e8 39 17 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010ea6d:	c7 85 28 ff ff ff 00 	movl   $0x0,-0xd8(%ebp)
f010ea74:	00 00 00 
	actualSize = numOfFreeBlocks_BF-2;
f010ea77:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0x0;
f010ea7e:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
	BlocksSizes[0] = 0;
f010ea85:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ea8c:	83 ec 0c             	sub    $0xc,%esp
f010ea8f:	ff 75 d8             	pushl  -0x28(%ebp)
f010ea92:	8d 85 28 ff ff ff    	lea    -0xd8(%ebp),%eax
f010ea98:	50                   	push   %eax
f010ea99:	8d 45 9c             	lea    -0x64(%ebp),%eax
f010ea9c:	50                   	push   %eax
f010ea9d:	8d 45 b8             	lea    -0x48(%ebp),%eax
f010eaa0:	50                   	push   %eax
f010eaa1:	68 c0 84 6e f0       	push   $0xf06e84c0
f010eaa6:	e8 d0 14 00 00       	call   f010ff7b <check_list_data>
f010eaab:	83 c4 20             	add    $0x20,%esp
f010eaae:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList content is not correct.");
f010eab1:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010eab5:	74 17                	je     f010eace <test_alloc_block_BF+0x64c>
f010eab7:	83 ec 04             	sub    $0x4,%esp
f010eaba:	68 1c 77 13 f0       	push   $0xf013771c
f010eabf:	68 bd 01 00 00       	push   $0x1bd
f010eac4:	68 94 6e 13 f0       	push   $0xf0136e94
f010eac9:	e8 d8 16 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_BF: WRONG BF ALLOC .. FreeMemBlocksList size is not correct.");
f010eace:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f010ead4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ead7:	74 17                	je     f010eaf0 <test_alloc_block_BF+0x66e>
f010ead9:	83 ec 04             	sub    $0x4,%esp
f010eadc:	68 68 77 13 f0       	push   $0xf0137768
f010eae1:	68 be 01 00 00       	push   $0x1be
f010eae6:	68 94 6e 13 f0       	push   $0xf0136e94
f010eaeb:	e8 b6 16 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_BF completed successfully.\n");
f010eaf0:	83 ec 0c             	sub    $0xc,%esp
f010eaf3:	68 b4 77 13 f0       	push   $0xf01377b4
f010eaf8:	e8 30 21 ff ff       	call   f0100c2d <cprintf>
f010eafd:	83 c4 10             	add    $0x10,%esp
}
f010eb00:	90                   	nop
f010eb01:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010eb04:	5b                   	pop    %ebx
f010eb05:	5e                   	pop    %esi
f010eb06:	5f                   	pop    %edi
f010eb07:	5d                   	pop    %ebp
f010eb08:	c3                   	ret    

f010eb09 <test_alloc_block_NF>:

void test_alloc_block_NF()
{
f010eb09:	55                   	push   %ebp
f010eb0a:	89 e5                	mov    %esp,%ebp
f010eb0c:	57                   	push   %edi
f010eb0d:	56                   	push   %esi
f010eb0e:	53                   	push   %ebx
f010eb0f:	81 ec ec 00 00 00    	sub    $0xec,%esp
	uint32 numOfBlocks = 10;
f010eb15:	c7 45 e0 0a 00 00 00 	movl   $0xa,-0x20(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010eb1c:	83 ec 0c             	sub    $0xc,%esp
f010eb1f:	ff 75 e0             	pushl  -0x20(%ebp)
f010eb22:	e8 80 24 02 00       	call   f0130fa7 <initialize_MemBlocksList>
f010eb27:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010eb2a:	c7 05 f0 8f 65 f0 00 	movl   $0x0,0xf0658ff0
f010eb31:	00 00 00 
f010eb34:	c7 05 f4 8f 65 f0 00 	movl   $0x0,0xf0658ff4
f010eb3b:	00 00 00 
f010eb3e:	c7 05 fc 8f 65 f0 00 	movl   $0x0,0xf0658ffc
f010eb45:	00 00 00 

	//Fill AllocMemBlocksList with multiple blocks
	#define numOfFreeBlocks_NF 8
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
f010eb48:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010eb4b:	bb c0 75 13 f0       	mov    $0xf01375c0,%ebx
f010eb50:	ba 08 00 00 00       	mov    $0x8,%edx
f010eb55:	89 c7                	mov    %eax,%edi
f010eb57:	89 de                	mov    %ebx,%esi
f010eb59:	89 d1                	mov    %edx,%ecx
f010eb5b:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;
f010eb5d:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010eb60:	bb 20 7a 13 f0       	mov    $0xf0137a20,%ebx
f010eb65:	ba 08 00 00 00       	mov    $0x8,%edx
f010eb6a:	89 c7                	mov    %eax,%edi
f010eb6c:	89 de                	mov    %ebx,%esi
f010eb6e:	89 d1                	mov    %edx,%ecx
f010eb70:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)

	LIST_INIT(&FreeMemBlocksList);
f010eb72:	c7 05 c0 84 6e f0 00 	movl   $0x0,0xf06e84c0
f010eb79:	00 00 00 
f010eb7c:	c7 05 c4 84 6e f0 00 	movl   $0x0,0xf06e84c4
f010eb83:	00 00 00 
f010eb86:	c7 05 cc 84 6e f0 00 	movl   $0x0,0xf06e84cc
f010eb8d:	00 00 00 
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010eb90:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f010eb97:	e9 5f 01 00 00       	jmp    f010ecfb <test_alloc_block_NF+0x1f2>
	{
		freeBlocks[i].sva = BlocksSVAs[i];
f010eb9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010eb9f:	8b 44 85 b4          	mov    -0x4c(%ebp,%eax,4),%eax
f010eba3:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eba6:	c1 e2 04             	shl    $0x4,%edx
f010eba9:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ebac:	01 da                	add    %ebx,%edx
f010ebae:	81 ea cc 00 00 00    	sub    $0xcc,%edx
f010ebb4:	89 02                	mov    %eax,(%edx)
		freeBlocks[i].size = BlocksSizes[i];
f010ebb6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ebb9:	8b 44 85 94          	mov    -0x6c(%ebp,%eax,4),%eax
f010ebbd:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ebc0:	c1 e2 04             	shl    $0x4,%edx
f010ebc3:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ebc6:	01 f2                	add    %esi,%edx
f010ebc8:	81 ea c8 00 00 00    	sub    $0xc8,%edx
f010ebce:	89 02                	mov    %eax,(%edx)
		if (i == 0)
f010ebd0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f010ebd4:	0f 85 92 00 00 00    	jne    f010ec6c <test_alloc_block_NF+0x163>
			LIST_INSERT_HEAD(&FreeMemBlocksList, &(freeBlocks[i]));
f010ebda:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f010ebdf:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ebe2:	c1 e2 04             	shl    $0x4,%edx
f010ebe5:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ebe8:	01 fa                	add    %edi,%edx
f010ebea:	81 ea d4 00 00 00    	sub    $0xd4,%edx
f010ebf0:	89 02                	mov    %eax,(%edx)
f010ebf2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ebf5:	c1 e0 04             	shl    $0x4,%eax
f010ebf8:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ebfb:	01 d8                	add    %ebx,%eax
f010ebfd:	2d d4 00 00 00       	sub    $0xd4,%eax
f010ec02:	8b 00                	mov    (%eax),%eax
f010ec04:	85 c0                	test   %eax,%eax
f010ec06:	74 18                	je     f010ec20 <test_alloc_block_NF+0x117>
f010ec08:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f010ec0d:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010ec13:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010ec16:	c1 e1 04             	shl    $0x4,%ecx
f010ec19:	01 ca                	add    %ecx,%edx
f010ec1b:	89 50 04             	mov    %edx,0x4(%eax)
f010ec1e:	eb 13                	jmp    f010ec33 <test_alloc_block_NF+0x12a>
f010ec20:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ec26:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec29:	c1 e2 04             	shl    $0x4,%edx
f010ec2c:	01 d0                	add    %edx,%eax
f010ec2e:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f010ec33:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ec39:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec3c:	c1 e2 04             	shl    $0x4,%edx
f010ec3f:	01 d0                	add    %edx,%eax
f010ec41:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f010ec46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ec49:	c1 e0 04             	shl    $0x4,%eax
f010ec4c:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ec4f:	01 f0                	add    %esi,%eax
f010ec51:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ec56:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010ec5c:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010ec61:	40                   	inc    %eax
f010ec62:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
f010ec67:	e9 8c 00 00 00       	jmp    f010ecf8 <test_alloc_block_NF+0x1ef>
		else
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
f010ec6c:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f010ec71:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ec74:	c1 e2 04             	shl    $0x4,%edx
f010ec77:	8d 7d e8             	lea    -0x18(%ebp),%edi
f010ec7a:	01 fa                	add    %edi,%edx
f010ec7c:	81 ea d0 00 00 00    	sub    $0xd0,%edx
f010ec82:	89 02                	mov    %eax,(%edx)
f010ec84:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ec87:	c1 e0 04             	shl    $0x4,%eax
f010ec8a:	8d 5d e8             	lea    -0x18(%ebp),%ebx
f010ec8d:	01 d8                	add    %ebx,%eax
f010ec8f:	2d d0 00 00 00       	sub    $0xd0,%eax
f010ec94:	8b 00                	mov    (%eax),%eax
f010ec96:	85 c0                	test   %eax,%eax
f010ec98:	74 17                	je     f010ecb1 <test_alloc_block_NF+0x1a8>
f010ec9a:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f010ec9f:	8d 95 14 ff ff ff    	lea    -0xec(%ebp),%edx
f010eca5:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
f010eca8:	c1 e1 04             	shl    $0x4,%ecx
f010ecab:	01 ca                	add    %ecx,%edx
f010ecad:	89 10                	mov    %edx,(%eax)
f010ecaf:	eb 13                	jmp    f010ecc4 <test_alloc_block_NF+0x1bb>
f010ecb1:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ecb7:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010ecba:	c1 e2 04             	shl    $0x4,%edx
f010ecbd:	01 d0                	add    %edx,%eax
f010ecbf:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f010ecc4:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010ecca:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f010eccd:	c1 e2 04             	shl    $0x4,%edx
f010ecd0:	01 d0                	add    %edx,%eax
f010ecd2:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f010ecd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f010ecda:	c1 e0 04             	shl    $0x4,%eax
f010ecdd:	8d 75 e8             	lea    -0x18(%ebp),%esi
f010ece0:	01 f0                	add    %esi,%eax
f010ece2:	2d d4 00 00 00       	sub    $0xd4,%eax
f010ece7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f010eced:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010ecf2:	40                   	inc    %eax
f010ecf3:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
	uint32 BlocksSVAs[numOfFreeBlocks_NF] = {0x0, 0x2000, 0x4000, 0x7000, 0x19000, 0x1A400, 0x21B400, 0x31B400}; //0KB, 8KB, 16KB, 28KB, 100KB, 105KB, 2,157KB, 3,181KB
	uint32 BlocksSizes[numOfFreeBlocks_NF] = {3*kilo, 8*kilo, 1*kilo, 10*kilo, 4*kilo, 2*Mega, 1*Mega, 1*kilo} ;

	LIST_INIT(&FreeMemBlocksList);
	struct MemBlock freeBlocks[numOfFreeBlocks_NF];
	for (int i = 0; i < numOfFreeBlocks_NF; ++i)
f010ecf8:	ff 45 e4             	incl   -0x1c(%ebp)
f010ecfb:	83 7d e4 07          	cmpl   $0x7,-0x1c(%ebp)
f010ecff:	0f 8e 97 fe ff ff    	jle    f010eb9c <test_alloc_block_NF+0x93>
			LIST_INSERT_TAIL(&FreeMemBlocksList, &(freeBlocks[i]));
	}

	//====================================================================//
	/*NF ALLOC Scenario 1: Try to allocate a block with a size greater than the size of any existing free block*/
	struct MemBlock * blockToAlloc = alloc_block_NF(10*Mega);
f010ed05:	83 ec 0c             	sub    $0xc,%esp
f010ed08:	68 00 00 a0 00       	push   $0xa00000
f010ed0d:	e8 65 29 02 00       	call   f0131677 <alloc_block_NF>
f010ed12:	83 c4 10             	add    $0x10,%esp
f010ed15:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc != NULL) panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a block instead no existing free blocks with the given size.");
f010ed18:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ed1c:	74 17                	je     f010ed35 <test_alloc_block_NF+0x22c>
f010ed1e:	83 ec 04             	sub    $0x4,%esp
f010ed21:	68 2c 78 13 f0       	push   $0xf013782c
f010ed26:	68 e1 01 00 00       	push   $0x1e1
f010ed2b:	68 94 6e 13 f0       	push   $0xf0136e94
f010ed30:	e8 71 14 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010ed35:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010ed3a:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010ed3d:	75 13                	jne    f010ed52 <test_alloc_block_NF+0x249>
f010ed3f:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010ed44:	83 f8 08             	cmp    $0x8,%eax
f010ed47:	75 09                	jne    f010ed52 <test_alloc_block_NF+0x249>
f010ed49:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010ed4e:	85 c0                	test   %eax,%eax
f010ed50:	74 17                	je     f010ed69 <test_alloc_block_NF+0x260>
		panic("find_block: AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList are affected and this shall not occurred.");
f010ed52:	83 ec 04             	sub    $0x4,%esp
f010ed55:	68 c0 73 13 f0       	push   $0xf01373c0
f010ed5a:	68 e5 01 00 00       	push   $0x1e5
f010ed5f:	68 94 6e 13 f0       	push   $0xf0136e94
f010ed64:	e8 3d 14 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 2: Try to allocate a block with a size equal to the size of the one existing free blocks (STARTING from 0)*/
	blockToAlloc = alloc_block_NF(10*kilo);
f010ed69:	83 ec 0c             	sub    $0xc,%esp
f010ed6c:	68 00 28 00 00       	push   $0x2800
f010ed71:	e8 01 29 02 00       	call   f0131677 <alloc_block_NF>
f010ed76:	83 c4 10             	add    $0x10,%esp
f010ed79:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 10*kilo || blockToAlloc->sva != 0x7000)
f010ed7c:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ed80:	74 1a                	je     f010ed9c <test_alloc_block_NF+0x293>
f010ed82:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed85:	8b 40 0c             	mov    0xc(%eax),%eax
f010ed88:	3d 00 28 00 00       	cmp    $0x2800,%eax
f010ed8d:	75 0d                	jne    f010ed9c <test_alloc_block_NF+0x293>
f010ed8f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ed92:	8b 40 08             	mov    0x8(%eax),%eax
f010ed95:	3d 00 70 00 00       	cmp    $0x7000,%eax
f010ed9a:	74 17                	je     f010edb3 <test_alloc_block_NF+0x2aa>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ed9c:	83 ec 04             	sub    $0x4,%esp
f010ed9f:	68 a0 78 13 f0       	push   $0xf01378a0
f010eda4:	68 ed 01 00 00       	push   $0x1ed
f010eda9:	68 94 6e 13 f0       	push   $0xf0136e94
f010edae:	e8 f3 13 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-1 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010edb3:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010edb8:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010edbb:	75 13                	jne    f010edd0 <test_alloc_block_NF+0x2c7>
f010edbd:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010edc2:	83 f8 07             	cmp    $0x7,%eax
f010edc5:	75 09                	jne    f010edd0 <test_alloc_block_NF+0x2c7>
f010edc7:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010edcc:	85 c0                	test   %eax,%eax
f010edce:	74 17                	je     f010ede7 <test_alloc_block_NF+0x2de>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010edd0:	83 ec 04             	sub    $0x4,%esp
f010edd3:	68 e4 78 13 f0       	push   $0xf01378e4
f010edd8:	68 f1 01 00 00       	push   $0x1f1
f010eddd:	68 94 6e 13 f0       	push   $0xf0136e94
f010ede2:	e8 bf 13 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	uint32 size = 0;
f010ede7:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010edee:	00 00 00 
	uint32 actualSize = numOfFreeBlocks_NF-1;
f010edf1:	c7 45 d8 07 00 00 00 	movl   $0x7,-0x28(%ebp)
	BlocksSVAs[3] = 0;
f010edf8:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
	BlocksSizes[3] = 0;
f010edff:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ee06:	83 ec 0c             	sub    $0xc,%esp
f010ee09:	ff 75 d8             	pushl  -0x28(%ebp)
f010ee0c:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ee12:	50                   	push   %eax
f010ee13:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ee16:	50                   	push   %eax
f010ee17:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ee1a:	50                   	push   %eax
f010ee1b:	68 c0 84 6e f0       	push   $0xf06e84c0
f010ee20:	e8 56 11 00 00       	call   f010ff7b <check_list_data>
f010ee25:	83 c4 20             	add    $0x20,%esp
f010ee28:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010ee2b:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ee2f:	74 17                	je     f010ee48 <test_alloc_block_NF+0x33f>
f010ee31:	83 ec 04             	sub    $0x4,%esp
f010ee34:	68 48 79 13 f0       	push   $0xf0137948
f010ee39:	68 f9 01 00 00       	push   $0x1f9
f010ee3e:	68 94 6e 13 f0       	push   $0xf0136e94
f010ee43:	e8 5e 13 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ee48:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ee4e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ee51:	74 17                	je     f010ee6a <test_alloc_block_NF+0x361>
f010ee53:	83 ec 04             	sub    $0x4,%esp
f010ee56:	68 94 79 13 f0       	push   $0xf0137994
f010ee5b:	68 fa 01 00 00       	push   $0x1fa
f010ee60:	68 94 6e 13 f0       	push   $0xf0136e94
f010ee65:	e8 3c 13 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 3: Try to allocate a block with a size equal to the size of the one existing free blocks (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(2*Mega);
f010ee6a:	83 ec 0c             	sub    $0xc,%esp
f010ee6d:	68 00 00 20 00       	push   $0x200000
f010ee72:	e8 00 28 02 00       	call   f0131677 <alloc_block_NF>
f010ee77:	83 c4 10             	add    $0x10,%esp
f010ee7a:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 2*Mega || blockToAlloc->sva != 0x1A400)
f010ee7d:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ee81:	74 1a                	je     f010ee9d <test_alloc_block_NF+0x394>
f010ee83:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee86:	8b 40 0c             	mov    0xc(%eax),%eax
f010ee89:	3d 00 00 20 00       	cmp    $0x200000,%eax
f010ee8e:	75 0d                	jne    f010ee9d <test_alloc_block_NF+0x394>
f010ee90:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ee93:	8b 40 08             	mov    0x8(%eax),%eax
f010ee96:	3d 00 a4 01 00       	cmp    $0x1a400,%eax
f010ee9b:	74 17                	je     f010eeb4 <test_alloc_block_NF+0x3ab>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ee9d:	83 ec 04             	sub    $0x4,%esp
f010eea0:	68 a0 78 13 f0       	push   $0xf01378a0
f010eea5:	68 03 02 00 00       	push   $0x203
f010eeaa:	68 94 6e 13 f0       	push   $0xf0136e94
f010eeaf:	e8 f2 12 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010eeb4:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010eeb9:	3b 45 e0             	cmp    -0x20(%ebp),%eax
f010eebc:	75 13                	jne    f010eed1 <test_alloc_block_NF+0x3c8>
f010eebe:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010eec3:	83 f8 06             	cmp    $0x6,%eax
f010eec6:	75 09                	jne    f010eed1 <test_alloc_block_NF+0x3c8>
f010eec8:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010eecd:	85 c0                	test   %eax,%eax
f010eecf:	74 17                	je     f010eee8 <test_alloc_block_NF+0x3df>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010eed1:	83 ec 04             	sub    $0x4,%esp
f010eed4:	68 e4 78 13 f0       	push   $0xf01378e4
f010eed9:	68 07 02 00 00       	push   $0x207
f010eede:	68 94 6e 13 f0       	push   $0xf0136e94
f010eee3:	e8 be 12 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010eee8:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010eeef:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010eef2:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[5] = 0;
f010eef9:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	BlocksSizes[5] = 0;
f010ef00:	c7 45 a8 00 00 00 00 	movl   $0x0,-0x58(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010ef07:	83 ec 0c             	sub    $0xc,%esp
f010ef0a:	ff 75 d8             	pushl  -0x28(%ebp)
f010ef0d:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010ef13:	50                   	push   %eax
f010ef14:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ef17:	50                   	push   %eax
f010ef18:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010ef1b:	50                   	push   %eax
f010ef1c:	68 c0 84 6e f0       	push   $0xf06e84c0
f010ef21:	e8 55 10 00 00       	call   f010ff7b <check_list_data>
f010ef26:	83 c4 20             	add    $0x20,%esp
f010ef29:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010ef2c:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010ef30:	74 17                	je     f010ef49 <test_alloc_block_NF+0x440>
f010ef32:	83 ec 04             	sub    $0x4,%esp
f010ef35:	68 48 79 13 f0       	push   $0xf0137948
f010ef3a:	68 0f 02 00 00       	push   $0x20f
f010ef3f:	68 94 6e 13 f0       	push   $0xf0136e94
f010ef44:	e8 5d 12 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010ef49:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010ef4f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010ef52:	74 17                	je     f010ef6b <test_alloc_block_NF+0x462>
f010ef54:	83 ec 04             	sub    $0x4,%esp
f010ef57:	68 94 79 13 f0       	push   $0xf0137994
f010ef5c:	68 10 02 00 00       	push   $0x210
f010ef61:	68 94 6e 13 f0       	push   $0xf0136e94
f010ef66:	e8 3b 12 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 4: Try to allocate a block with a size smaller than the size of any existing free block (The first one fit after the last allocated VA)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(512*kilo);
f010ef6b:	83 ec 0c             	sub    $0xc,%esp
f010ef6e:	68 00 00 08 00       	push   $0x80000
f010ef73:	e8 ff 26 02 00       	call   f0131677 <alloc_block_NF>
f010ef78:	83 c4 10             	add    $0x10,%esp
f010ef7b:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 512*kilo || blockToAlloc->sva != 0x21B400)
f010ef7e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010ef82:	74 1a                	je     f010ef9e <test_alloc_block_NF+0x495>
f010ef84:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef87:	8b 40 0c             	mov    0xc(%eax),%eax
f010ef8a:	3d 00 00 08 00       	cmp    $0x80000,%eax
f010ef8f:	75 0d                	jne    f010ef9e <test_alloc_block_NF+0x495>
f010ef91:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010ef94:	8b 40 08             	mov    0x8(%eax),%eax
f010ef97:	3d 00 b4 21 00       	cmp    $0x21b400,%eax
f010ef9c:	74 17                	je     f010efb5 <test_alloc_block_NF+0x4ac>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010ef9e:	83 ec 04             	sub    $0x4,%esp
f010efa1:	68 a0 78 13 f0       	push   $0xf01378a0
f010efa6:	68 19 02 00 00       	push   $0x219
f010efab:	68 94 6e 13 f0       	push   $0xf0136e94
f010efb0:	e8 f1 11 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-1 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010efb5:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010efba:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010efbd:	4a                   	dec    %edx
f010efbe:	39 d0                	cmp    %edx,%eax
f010efc0:	75 13                	jne    f010efd5 <test_alloc_block_NF+0x4cc>
f010efc2:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010efc7:	83 f8 06             	cmp    $0x6,%eax
f010efca:	75 09                	jne    f010efd5 <test_alloc_block_NF+0x4cc>
f010efcc:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010efd1:	85 c0                	test   %eax,%eax
f010efd3:	74 17                	je     f010efec <test_alloc_block_NF+0x4e3>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010efd5:	83 ec 04             	sub    $0x4,%esp
f010efd8:	68 e4 78 13 f0       	push   $0xf01378e4
f010efdd:	68 1d 02 00 00       	push   $0x21d
f010efe2:	68 94 6e 13 f0       	push   $0xf0136e94
f010efe7:	e8 ba 11 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010efec:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010eff3:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010eff6:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo;
f010effd:	c7 45 cc 00 b4 29 00 	movl   $0x29b400,-0x34(%ebp)
	BlocksSizes[6] = 512*kilo;
f010f004:	c7 45 ac 00 00 08 00 	movl   $0x80000,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f00b:	83 ec 0c             	sub    $0xc,%esp
f010f00e:	ff 75 d8             	pushl  -0x28(%ebp)
f010f011:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f017:	50                   	push   %eax
f010f018:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f01b:	50                   	push   %eax
f010f01c:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f01f:	50                   	push   %eax
f010f020:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f025:	e8 51 0f 00 00       	call   f010ff7b <check_list_data>
f010f02a:	83 c4 20             	add    $0x20,%esp
f010f02d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f030:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f034:	74 17                	je     f010f04d <test_alloc_block_NF+0x544>
f010f036:	83 ec 04             	sub    $0x4,%esp
f010f039:	68 48 79 13 f0       	push   $0xf0137948
f010f03e:	68 25 02 00 00       	push   $0x225
f010f043:	68 94 6e 13 f0       	push   $0xf0136e94
f010f048:	e8 59 11 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f04d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f053:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f056:	74 17                	je     f010f06f <test_alloc_block_NF+0x566>
f010f058:	83 ec 04             	sub    $0x4,%esp
f010f05b:	68 94 79 13 f0       	push   $0xf0137994
f010f060:	68 26 02 00 00       	push   $0x226
f010f065:	68 94 6e 13 f0       	push   $0xf0136e94
f010f06a:	e8 37 11 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 5: Try to allocate a block with a size smaller than the size of any existing free block (One from the updated blocks before in the free list)*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(511*kilo);
f010f06f:	83 ec 0c             	sub    $0xc,%esp
f010f072:	68 00 fc 07 00       	push   $0x7fc00
f010f077:	e8 fb 25 02 00       	call   f0131677 <alloc_block_NF>
f010f07c:	83 c4 10             	add    $0x10,%esp
f010f07f:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 511*kilo || blockToAlloc->sva != (0x21B400 + 512*kilo))
f010f082:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f086:	74 1a                	je     f010f0a2 <test_alloc_block_NF+0x599>
f010f088:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f08b:	8b 40 0c             	mov    0xc(%eax),%eax
f010f08e:	3d 00 fc 07 00       	cmp    $0x7fc00,%eax
f010f093:	75 0d                	jne    f010f0a2 <test_alloc_block_NF+0x599>
f010f095:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f098:	8b 40 08             	mov    0x8(%eax),%eax
f010f09b:	3d 00 b4 29 00       	cmp    $0x29b400,%eax
f010f0a0:	74 17                	je     f010f0b9 <test_alloc_block_NF+0x5b0>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f0a2:	83 ec 04             	sub    $0x4,%esp
f010f0a5:	68 a0 78 13 f0       	push   $0xf01378a0
f010f0aa:	68 2f 02 00 00       	push   $0x22f
f010f0af:	68 94 6e 13 f0       	push   $0xf0136e94
f010f0b4:	e8 ed 10 ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-2 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f0b9:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f0be:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f0c1:	83 ea 02             	sub    $0x2,%edx
f010f0c4:	39 d0                	cmp    %edx,%eax
f010f0c6:	75 13                	jne    f010f0db <test_alloc_block_NF+0x5d2>
f010f0c8:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f0cd:	83 f8 06             	cmp    $0x6,%eax
f010f0d0:	75 09                	jne    f010f0db <test_alloc_block_NF+0x5d2>
f010f0d2:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f0d7:	85 c0                	test   %eax,%eax
f010f0d9:	74 17                	je     f010f0f2 <test_alloc_block_NF+0x5e9>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f0db:	83 ec 04             	sub    $0x4,%esp
f010f0de:	68 e4 78 13 f0       	push   $0xf01378e4
f010f0e3:	68 33 02 00 00       	push   $0x233
f010f0e8:	68 94 6e 13 f0       	push   $0xf0136e94
f010f0ed:	e8 b4 10 ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f0f2:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f0f9:	00 00 00 
	actualSize = numOfFreeBlocks_NF-2;
f010f0fc:	c7 45 d8 06 00 00 00 	movl   $0x6,-0x28(%ebp)
	BlocksSVAs[6] = 0x21B400 + 512*kilo + (511*kilo);
f010f103:	c7 45 cc 00 b0 31 00 	movl   $0x31b000,-0x34(%ebp)
	BlocksSizes[6] = 1*kilo;
f010f10a:	c7 45 ac 00 04 00 00 	movl   $0x400,-0x54(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f111:	83 ec 0c             	sub    $0xc,%esp
f010f114:	ff 75 d8             	pushl  -0x28(%ebp)
f010f117:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f11d:	50                   	push   %eax
f010f11e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f121:	50                   	push   %eax
f010f122:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f125:	50                   	push   %eax
f010f126:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f12b:	e8 4b 0e 00 00       	call   f010ff7b <check_list_data>
f010f130:	83 c4 20             	add    $0x20,%esp
f010f133:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f136:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f13a:	74 17                	je     f010f153 <test_alloc_block_NF+0x64a>
f010f13c:	83 ec 04             	sub    $0x4,%esp
f010f13f:	68 48 79 13 f0       	push   $0xf0137948
f010f144:	68 3b 02 00 00       	push   $0x23b
f010f149:	68 94 6e 13 f0       	push   $0xf0136e94
f010f14e:	e8 53 10 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f153:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f159:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f15c:	74 17                	je     f010f175 <test_alloc_block_NF+0x66c>
f010f15e:	83 ec 04             	sub    $0x4,%esp
f010f161:	68 94 79 13 f0       	push   $0xf0137994
f010f166:	68 3c 02 00 00       	push   $0x23c
f010f16b:	68 94 6e 13 f0       	push   $0xf0136e94
f010f170:	e8 31 10 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 6: Try to allocate a block with a size smaller than ALL the NEXT existing blocks .. Shall start search from the start of the list*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(3*kilo);
f010f175:	83 ec 0c             	sub    $0xc,%esp
f010f178:	68 00 0c 00 00       	push   $0xc00
f010f17d:	e8 f5 24 02 00       	call   f0131677 <alloc_block_NF>
f010f182:	83 c4 10             	add    $0x10,%esp
f010f185:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 3*kilo || blockToAlloc->sva != 0x0)
f010f188:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f18c:	74 17                	je     f010f1a5 <test_alloc_block_NF+0x69c>
f010f18e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f191:	8b 40 0c             	mov    0xc(%eax),%eax
f010f194:	3d 00 0c 00 00       	cmp    $0xc00,%eax
f010f199:	75 0a                	jne    f010f1a5 <test_alloc_block_NF+0x69c>
f010f19b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f19e:	8b 40 08             	mov    0x8(%eax),%eax
f010f1a1:	85 c0                	test   %eax,%eax
f010f1a3:	74 17                	je     f010f1bc <test_alloc_block_NF+0x6b3>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f1a5:	83 ec 04             	sub    $0x4,%esp
f010f1a8:	68 a0 78 13 f0       	push   $0xf01378a0
f010f1ad:	68 45 02 00 00       	push   $0x245
f010f1b2:	68 94 6e 13 f0       	push   $0xf0136e94
f010f1b7:	e8 ea 0f ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-2 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f1bc:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f1c1:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f1c4:	83 ea 02             	sub    $0x2,%edx
f010f1c7:	39 d0                	cmp    %edx,%eax
f010f1c9:	75 13                	jne    f010f1de <test_alloc_block_NF+0x6d5>
f010f1cb:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f1d0:	83 f8 05             	cmp    $0x5,%eax
f010f1d3:	75 09                	jne    f010f1de <test_alloc_block_NF+0x6d5>
f010f1d5:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f1da:	85 c0                	test   %eax,%eax
f010f1dc:	74 17                	je     f010f1f5 <test_alloc_block_NF+0x6ec>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f1de:	83 ec 04             	sub    $0x4,%esp
f010f1e1:	68 e4 78 13 f0       	push   $0xf01378e4
f010f1e6:	68 49 02 00 00       	push   $0x249
f010f1eb:	68 94 6e 13 f0       	push   $0xf0136e94
f010f1f0:	e8 b1 0f ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f1f5:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f1fc:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010f1ff:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[0] = 0;
f010f206:	c7 45 b4 00 00 00 00 	movl   $0x0,-0x4c(%ebp)
	BlocksSizes[0] = 0;
f010f20d:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f214:	83 ec 0c             	sub    $0xc,%esp
f010f217:	ff 75 d8             	pushl  -0x28(%ebp)
f010f21a:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f220:	50                   	push   %eax
f010f221:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f224:	50                   	push   %eax
f010f225:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f228:	50                   	push   %eax
f010f229:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f22e:	e8 48 0d 00 00       	call   f010ff7b <check_list_data>
f010f233:	83 c4 20             	add    $0x20,%esp
f010f236:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f239:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f23d:	74 17                	je     f010f256 <test_alloc_block_NF+0x74d>
f010f23f:	83 ec 04             	sub    $0x4,%esp
f010f242:	68 48 79 13 f0       	push   $0xf0137948
f010f247:	68 51 02 00 00       	push   $0x251
f010f24c:	68 94 6e 13 f0       	push   $0xf0136e94
f010f251:	e8 50 0f ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f256:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f25c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f25f:	74 17                	je     f010f278 <test_alloc_block_NF+0x76f>
f010f261:	83 ec 04             	sub    $0x4,%esp
f010f264:	68 94 79 13 f0       	push   $0xf0137994
f010f269:	68 52 02 00 00       	push   $0x252
f010f26e:	68 94 6e 13 f0       	push   $0xf0136e94
f010f273:	e8 2e 0f ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*NF ALLOC Scenario 7: Try to allocate a block with a size smaller than the existing blocks .. To try to update head not to remove it*/
	// Now, lastAllocVA shall EQUAL to 0x7000
	blockToAlloc = alloc_block_NF(1*kilo);
f010f278:	83 ec 0c             	sub    $0xc,%esp
f010f27b:	68 00 04 00 00       	push   $0x400
f010f280:	e8 f2 23 02 00       	call   f0131677 <alloc_block_NF>
f010f285:	83 c4 10             	add    $0x10,%esp
f010f288:	89 45 dc             	mov    %eax,-0x24(%ebp)

	//Check returned block content
	if(blockToAlloc == NULL || blockToAlloc->size != 1*kilo || blockToAlloc->sva != 0x2000)
f010f28b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f010f28f:	74 1a                	je     f010f2ab <test_alloc_block_NF+0x7a2>
f010f291:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f294:	8b 40 0c             	mov    0xc(%eax),%eax
f010f297:	3d 00 04 00 00       	cmp    $0x400,%eax
f010f29c:	75 0d                	jne    f010f2ab <test_alloc_block_NF+0x7a2>
f010f29e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f010f2a1:	8b 40 08             	mov    0x8(%eax),%eax
f010f2a4:	3d 00 20 00 00       	cmp    $0x2000,%eax
f010f2a9:	74 17                	je     f010f2c2 <test_alloc_block_NF+0x7b9>
		panic("alloc_block_NF: WRONG NF ALLOC - alloc_block_NF find a wrong block.");
f010f2ab:	83 ec 04             	sub    $0x4,%esp
f010f2ae:	68 a0 78 13 f0       	push   $0xf01378a0
f010f2b3:	68 5b 02 00 00       	push   $0x25b
f010f2b8:	68 94 6e 13 f0       	push   $0xf0136e94
f010f2bd:	e8 e4 0e ff ff       	call   f01001a6 <_panic>

	//Check size of AvailableMemBlocksList, FreeMemBlocksList & AllocMemBlocksList
	if (LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks-3 || LIST_SIZE(&(FreeMemBlocksList)) != numOfFreeBlocks_NF-3 || LIST_SIZE(&(AllocMemBlocksList)) != 0)
f010f2c2:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f2c7:	8b 55 e0             	mov    -0x20(%ebp),%edx
f010f2ca:	83 ea 03             	sub    $0x3,%edx
f010f2cd:	39 d0                	cmp    %edx,%eax
f010f2cf:	75 13                	jne    f010f2e4 <test_alloc_block_NF+0x7db>
f010f2d1:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f2d6:	83 f8 05             	cmp    $0x5,%eax
f010f2d9:	75 09                	jne    f010f2e4 <test_alloc_block_NF+0x7db>
f010f2db:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f2e0:	85 c0                	test   %eax,%eax
f010f2e2:	74 17                	je     f010f2fb <test_alloc_block_NF+0x7f2>
		panic("alloc_block_NF: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f2e4:	83 ec 04             	sub    $0x4,%esp
f010f2e7:	68 e4 78 13 f0       	push   $0xf01378e4
f010f2ec:	68 5f 02 00 00       	push   $0x25f
f010f2f1:	68 94 6e 13 f0       	push   $0xf0136e94
f010f2f6:	e8 ab 0e ff ff       	call   f01001a6 <_panic>

	//Check FreeMemBlocksList content
	size = 0;
f010f2fb:	c7 85 10 ff ff ff 00 	movl   $0x0,-0xf0(%ebp)
f010f302:	00 00 00 
	actualSize = numOfFreeBlocks_NF-3;
f010f305:	c7 45 d8 05 00 00 00 	movl   $0x5,-0x28(%ebp)
	BlocksSVAs[1] = 0x2000 + 1*kilo;
f010f30c:	c7 45 b8 00 24 00 00 	movl   $0x2400,-0x48(%ebp)
	BlocksSizes[1] = 7*kilo;
f010f313:	c7 45 98 00 1c 00 00 	movl   $0x1c00,-0x68(%ebp)
	chk = check_list_data(&FreeMemBlocksList, BlocksSVAs, BlocksSizes, &size, actualSize);
f010f31a:	83 ec 0c             	sub    $0xc,%esp
f010f31d:	ff 75 d8             	pushl  -0x28(%ebp)
f010f320:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f010f326:	50                   	push   %eax
f010f327:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f32a:	50                   	push   %eax
f010f32b:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f010f32e:	50                   	push   %eax
f010f32f:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f334:	e8 42 0c 00 00       	call   f010ff7b <check_list_data>
f010f339:	83 c4 20             	add    $0x20,%esp
f010f33c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	if(chk != 1) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList content is not correct.");
f010f33f:	83 7d d4 01          	cmpl   $0x1,-0x2c(%ebp)
f010f343:	74 17                	je     f010f35c <test_alloc_block_NF+0x853>
f010f345:	83 ec 04             	sub    $0x4,%esp
f010f348:	68 48 79 13 f0       	push   $0xf0137948
f010f34d:	68 67 02 00 00       	push   $0x267
f010f352:	68 94 6e 13 f0       	push   $0xf0136e94
f010f357:	e8 4a 0e ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("alloc_block_NF: WRONG NF ALLOC .. FreeMemBlocksList size is not correct.");
f010f35c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f010f362:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f010f365:	74 17                	je     f010f37e <test_alloc_block_NF+0x875>
f010f367:	83 ec 04             	sub    $0x4,%esp
f010f36a:	68 94 79 13 f0       	push   $0xf0137994
f010f36f:	68 68 02 00 00       	push   $0x268
f010f374:	68 94 6e 13 f0       	push   $0xf0136e94
f010f379:	e8 28 0e ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test alloc_block_NF completed successfully.\n");
f010f37e:	83 ec 0c             	sub    $0xc,%esp
f010f381:	68 e0 79 13 f0       	push   $0xf01379e0
f010f386:	e8 a2 18 ff ff       	call   f0100c2d <cprintf>
f010f38b:	83 c4 10             	add    $0x10,%esp

}
f010f38e:	90                   	nop
f010f38f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f010f392:	5b                   	pop    %ebx
f010f393:	5e                   	pop    %esi
f010f394:	5f                   	pop    %edi
f010f395:	5d                   	pop    %ebp
f010f396:	c3                   	ret    

f010f397 <test_insert_sorted_with_merge_freeList>:

void test_insert_sorted_with_merge_freeList()
{
f010f397:	55                   	push   %ebp
f010f398:	89 e5                	mov    %esp,%ebp
f010f39a:	57                   	push   %edi
f010f39b:	81 ec 04 01 00 00    	sub    $0x104,%esp
	uint32 numOfBlocks = 10;
f010f3a1:	c7 45 f4 0a 00 00 00 	movl   $0xa,-0xc(%ebp)
	initialize_MemBlocksList(numOfBlocks);
f010f3a8:	83 ec 0c             	sub    $0xc,%esp
f010f3ab:	ff 75 f4             	pushl  -0xc(%ebp)
f010f3ae:	e8 f4 1b 02 00       	call   f0130fa7 <initialize_MemBlocksList>
f010f3b3:	83 c4 10             	add    $0x10,%esp
	LIST_INIT(&AllocMemBlocksList);
f010f3b6:	c7 05 f0 8f 65 f0 00 	movl   $0x0,0xf0658ff0
f010f3bd:	00 00 00 
f010f3c0:	c7 05 f4 8f 65 f0 00 	movl   $0x0,0xf0658ff4
f010f3c7:	00 00 00 
f010f3ca:	c7 05 fc 8f 65 f0 00 	movl   $0x0,0xf0658ffc
f010f3d1:	00 00 00 
	LIST_INIT(&FreeMemBlocksList);
f010f3d4:	c7 05 c0 84 6e f0 00 	movl   $0x0,0xf06e84c0
f010f3db:	00 00 00 
f010f3de:	c7 05 c4 84 6e f0 00 	movl   $0x0,0xf06e84c4
f010f3e5:	00 00 00 
f010f3e8:	c7 05 cc 84 6e f0 00 	movl   $0x0,0xf06e84cc
f010f3ef:	00 00 00 

	uint32 blocksToInsertSVAs[10]={0,0,0,0,0,0,0,0,0,0};
f010f3f2:	8d 55 c0             	lea    -0x40(%ebp),%edx
f010f3f5:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010f3fa:	b8 00 00 00 00       	mov    $0x0,%eax
f010f3ff:	89 d7                	mov    %edx,%edi
f010f401:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 blocksToInsertSizes[10]={0,0,0,0,0,0,0,0,0,0};
f010f403:	8d 55 98             	lea    -0x68(%ebp),%edx
f010f406:	b9 0a 00 00 00       	mov    $0xa,%ecx
f010f40b:	b8 00 00 00 00       	mov    $0x0,%eax
f010f410:	89 d7                	mov    %edx,%edi
f010f412:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 size = 0;
f010f414:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	uint32 actualSize = 0;
f010f41b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	/*INSERT_SORTED_WITH MERGE Scenario 1: CASE 0 - Insert BLOCK_1 in the empty FreeMemBlocksList*/
	int idx_blocksToInsert = 3;
f010f422:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo;
f010f429:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f42c:	c7 44 85 c0 00 20 00 	movl   $0x2000,-0x40(%ebp,%eax,4)
f010f433:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010f434:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f437:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010f43e:	00 
	struct MemBlock blockToInsert1;
	blockToInsert1.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f43f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f442:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f446:	89 45 8c             	mov    %eax,-0x74(%ebp)
	blockToInsert1.size = blocksToInsertSizes[idx_blocksToInsert];
f010f449:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f44c:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f450:	89 45 90             	mov    %eax,-0x70(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert1);
f010f453:	83 ec 0c             	sub    $0xc,%esp
f010f456:	8d 45 84             	lea    -0x7c(%ebp),%eax
f010f459:	50                   	push   %eax
f010f45a:	e8 cf 27 02 00       	call   f0131c2e <insert_sorted_with_merge_freeList>
f010f45f:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 1)
f010f462:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f467:	85 c0                	test   %eax,%eax
f010f469:	75 14                	jne    f010f47f <test_insert_sorted_with_merge_freeList+0xe8>
f010f46b:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f470:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f473:	75 0a                	jne    f010f47f <test_insert_sorted_with_merge_freeList+0xe8>
f010f475:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f47a:	83 f8 01             	cmp    $0x1,%eax
f010f47d:	74 17                	je     f010f496 <test_insert_sorted_with_merge_freeList+0xff>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f47f:	83 ec 04             	sub    $0x4,%esp
f010f482:	68 40 7a 13 f0       	push   $0xf0137a40
f010f487:	68 88 02 00 00       	push   $0x288
f010f48c:	68 94 6e 13 f0       	push   $0xf0136e94
f010f491:	e8 10 0d ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the free list content
	size = 0;
f010f496:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 1;
f010f49d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	int chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f4a4:	83 ec 0c             	sub    $0xc,%esp
f010f4a7:	ff 75 f0             	pushl  -0x10(%ebp)
f010f4aa:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f4ad:	50                   	push   %eax
f010f4ae:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f4b1:	50                   	push   %eax
f010f4b2:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f4b5:	50                   	push   %eax
f010f4b6:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f4bb:	e8 bb 0a 00 00       	call   f010ff7b <check_list_data>
f010f4c0:	83 c4 20             	add    $0x20,%esp
f010f4c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f4c6:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f4ca:	74 17                	je     f010f4e3 <test_insert_sorted_with_merge_freeList+0x14c>
f010f4cc:	83 ec 04             	sub    $0x4,%esp
f010f4cf:	68 ac 7a 13 f0       	push   $0xf0137aac
f010f4d4:	68 8e 02 00 00       	push   $0x28e
f010f4d9:	68 94 6e 13 f0       	push   $0xf0136e94
f010f4de:	e8 c3 0c ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f4e3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f4e6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f4e9:	74 17                	je     f010f502 <test_insert_sorted_with_merge_freeList+0x16b>
f010f4eb:	83 ec 04             	sub    $0x4,%esp
f010f4ee:	68 00 7b 13 f0       	push   $0xf0137b00
f010f4f3:	68 8f 02 00 00       	push   $0x28f
f010f4f8:	68 94 6e 13 f0       	push   $0xf0136e94
f010f4fd:	e8 a4 0c ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 2: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE TAIL)*/
	idx_blocksToInsert = 7;
f010f502:	c7 45 ec 07 00 00 00 	movl   $0x7,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo;
f010f509:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f50c:	c7 44 85 c0 00 80 00 	movl   $0x8000,-0x40(%ebp,%eax,4)
f010f513:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 7*kilo;
f010f514:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f517:	c7 44 85 98 00 1c 00 	movl   $0x1c00,-0x68(%ebp,%eax,4)
f010f51e:	00 
	struct MemBlock blockToInsert2;
	blockToInsert2.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f51f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f522:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f526:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
	blockToInsert2.size = blocksToInsertSizes[idx_blocksToInsert];
f010f52c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f52f:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f533:	89 45 80             	mov    %eax,-0x80(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert2);
f010f536:	83 ec 0c             	sub    $0xc,%esp
f010f539:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f010f53f:	50                   	push   %eax
f010f540:	e8 e9 26 02 00       	call   f0131c2e <insert_sorted_with_merge_freeList>
f010f545:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 2)
f010f548:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f54d:	85 c0                	test   %eax,%eax
f010f54f:	75 14                	jne    f010f565 <test_insert_sorted_with_merge_freeList+0x1ce>
f010f551:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f556:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f559:	75 0a                	jne    f010f565 <test_insert_sorted_with_merge_freeList+0x1ce>
f010f55b:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f560:	83 f8 02             	cmp    $0x2,%eax
f010f563:	74 17                	je     f010f57c <test_insert_sorted_with_merge_freeList+0x1e5>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f565:	83 ec 04             	sub    $0x4,%esp
f010f568:	68 40 7a 13 f0       	push   $0xf0137a40
f010f56d:	68 9e 02 00 00       	push   $0x29e
f010f572:	68 94 6e 13 f0       	push   $0xf0136e94
f010f577:	e8 2a 0c ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f57c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 2;
f010f583:	c7 45 f0 02 00 00 00 	movl   $0x2,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f58a:	83 ec 0c             	sub    $0xc,%esp
f010f58d:	ff 75 f0             	pushl  -0x10(%ebp)
f010f590:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f593:	50                   	push   %eax
f010f594:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f597:	50                   	push   %eax
f010f598:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f59b:	50                   	push   %eax
f010f59c:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f5a1:	e8 d5 09 00 00       	call   f010ff7b <check_list_data>
f010f5a6:	83 c4 20             	add    $0x20,%esp
f010f5a9:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f5ac:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f5b0:	74 17                	je     f010f5c9 <test_insert_sorted_with_merge_freeList+0x232>
f010f5b2:	83 ec 04             	sub    $0x4,%esp
f010f5b5:	68 ac 7a 13 f0       	push   $0xf0137aac
f010f5ba:	68 a4 02 00 00       	push   $0x2a4
f010f5bf:	68 94 6e 13 f0       	push   $0xf0136e94
f010f5c4:	e8 dd 0b ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f5c9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f5cc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f5cf:	74 17                	je     f010f5e8 <test_insert_sorted_with_merge_freeList+0x251>
f010f5d1:	83 ec 04             	sub    $0x4,%esp
f010f5d4:	68 00 7b 13 f0       	push   $0xf0137b00
f010f5d9:	68 a5 02 00 00       	push   $0x2a5
f010f5de:	68 94 6e 13 f0       	push   $0xf0136e94
f010f5e3:	e8 be 0b ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 3: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (AT THE HEAD)*/
	idx_blocksToInsert = 1;
f010f5e8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 1*kilo;
f010f5ef:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f5f2:	c7 44 85 c0 00 04 00 	movl   $0x400,-0x40(%ebp,%eax,4)
f010f5f9:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010f5fa:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f5fd:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010f604:	00 
	struct MemBlock blockToInsert3;
	blockToInsert3.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f605:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f608:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f60c:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
	blockToInsert3.size = blocksToInsertSizes[idx_blocksToInsert];
f010f612:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f615:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f619:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert3);
f010f61f:	83 ec 0c             	sub    $0xc,%esp
f010f622:	8d 85 64 ff ff ff    	lea    -0x9c(%ebp),%eax
f010f628:	50                   	push   %eax
f010f629:	e8 00 26 02 00       	call   f0131c2e <insert_sorted_with_merge_freeList>
f010f62e:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010f631:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f636:	85 c0                	test   %eax,%eax
f010f638:	75 14                	jne    f010f64e <test_insert_sorted_with_merge_freeList+0x2b7>
f010f63a:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f63f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f642:	75 0a                	jne    f010f64e <test_insert_sorted_with_merge_freeList+0x2b7>
f010f644:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f649:	83 f8 03             	cmp    $0x3,%eax
f010f64c:	74 17                	je     f010f665 <test_insert_sorted_with_merge_freeList+0x2ce>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f64e:	83 ec 04             	sub    $0x4,%esp
f010f651:	68 40 7a 13 f0       	push   $0xf0137a40
f010f656:	68 b4 02 00 00       	push   $0x2b4
f010f65b:	68 94 6e 13 f0       	push   $0xf0136e94
f010f660:	e8 41 0b ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f665:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010f66c:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f673:	83 ec 0c             	sub    $0xc,%esp
f010f676:	ff 75 f0             	pushl  -0x10(%ebp)
f010f679:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f67c:	50                   	push   %eax
f010f67d:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f680:	50                   	push   %eax
f010f681:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f684:	50                   	push   %eax
f010f685:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f68a:	e8 ec 08 00 00       	call   f010ff7b <check_list_data>
f010f68f:	83 c4 20             	add    $0x20,%esp
f010f692:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f695:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f699:	74 17                	je     f010f6b2 <test_insert_sorted_with_merge_freeList+0x31b>
f010f69b:	83 ec 04             	sub    $0x4,%esp
f010f69e:	68 ac 7a 13 f0       	push   $0xf0137aac
f010f6a3:	68 ba 02 00 00       	push   $0x2ba
f010f6a8:	68 94 6e 13 f0       	push   $0xf0136e94
f010f6ad:	e8 f4 0a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f6b2:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f6b5:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f6b8:	74 17                	je     f010f6d1 <test_insert_sorted_with_merge_freeList+0x33a>
f010f6ba:	83 ec 04             	sub    $0x4,%esp
f010f6bd:	68 00 7b 13 f0       	push   $0xf0137b00
f010f6c2:	68 bb 02 00 00       	push   $0x2bb
f010f6c7:	68 94 6e 13 f0       	push   $0xf0136e94
f010f6cc:	e8 d5 0a ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 4: CASE 1 - Insert with NO MERGE in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 6;
f010f6d1:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 10*kilo;
f010f6d8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6db:	c7 44 85 c0 00 58 00 	movl   $0x5800,-0x40(%ebp,%eax,4)
f010f6e2:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010f6e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6e6:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010f6ed:	00 
	struct MemBlock blockToInsert4;
	blockToInsert4.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f6ee:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6f1:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f6f5:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
	blockToInsert4.size = blocksToInsertSizes[idx_blocksToInsert];
f010f6fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f6fe:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f702:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)

	insert_sorted_with_merge_freeList(&blockToInsert4);
f010f708:	83 ec 0c             	sub    $0xc,%esp
f010f70b:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f010f711:	50                   	push   %eax
f010f712:	e8 17 25 02 00       	call   f0131c2e <insert_sorted_with_merge_freeList>
f010f717:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f71a:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f71f:	85 c0                	test   %eax,%eax
f010f721:	75 14                	jne    f010f737 <test_insert_sorted_with_merge_freeList+0x3a0>
f010f723:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f728:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f010f72b:	75 0a                	jne    f010f737 <test_insert_sorted_with_merge_freeList+0x3a0>
f010f72d:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f732:	83 f8 04             	cmp    $0x4,%eax
f010f735:	74 17                	je     f010f74e <test_insert_sorted_with_merge_freeList+0x3b7>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f737:	83 ec 04             	sub    $0x4,%esp
f010f73a:	68 40 7a 13 f0       	push   $0xf0137a40
f010f73f:	68 ca 02 00 00       	push   $0x2ca
f010f744:	68 94 6e 13 f0       	push   $0xf0136e94
f010f749:	e8 58 0a ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f74e:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f755:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f75c:	83 ec 0c             	sub    $0xc,%esp
f010f75f:	ff 75 f0             	pushl  -0x10(%ebp)
f010f762:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f765:	50                   	push   %eax
f010f766:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f769:	50                   	push   %eax
f010f76a:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f76d:	50                   	push   %eax
f010f76e:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f773:	e8 03 08 00 00       	call   f010ff7b <check_list_data>
f010f778:	83 c4 20             	add    $0x20,%esp
f010f77b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f77e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f782:	74 17                	je     f010f79b <test_insert_sorted_with_merge_freeList+0x404>
f010f784:	83 ec 04             	sub    $0x4,%esp
f010f787:	68 ac 7a 13 f0       	push   $0xf0137aac
f010f78c:	68 d0 02 00 00       	push   $0x2d0
f010f791:	68 94 6e 13 f0       	push   $0xf0136e94
f010f796:	e8 0b 0a ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f79b:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f79e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f7a1:	74 17                	je     f010f7ba <test_insert_sorted_with_merge_freeList+0x423>
f010f7a3:	83 ec 04             	sub    $0x4,%esp
f010f7a6:	68 00 7b 13 f0       	push   $0xf0137b00
f010f7ab:	68 d1 02 00 00       	push   $0x2d1
f010f7b0:	68 94 6e 13 f0       	push   $0xf0136e94
f010f7b5:	e8 ec 09 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 5: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (AT the tail)*/
	idx_blocksToInsert = 8;
f010f7ba:	c7 45 ec 08 00 00 00 	movl   $0x8,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo + 20*kilo + 7*kilo;
f010f7c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f7c4:	c7 44 85 c0 00 9c 00 	movl   $0x9c00,-0x40(%ebp,%eax,4)
f010f7cb:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 3*kilo;
f010f7cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f7cf:	c7 44 85 98 00 0c 00 	movl   $0xc00,-0x68(%ebp,%eax,4)
f010f7d6:	00 
	struct MemBlock blockToInsert5;
	blockToInsert5.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f7d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f7da:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f7de:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
	blockToInsert5.size = blocksToInsertSizes[idx_blocksToInsert];
f010f7e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f7e7:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f7eb:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert5);
f010f7f1:	83 ec 0c             	sub    $0xc,%esp
f010f7f4:	8d 85 44 ff ff ff    	lea    -0xbc(%ebp),%eax
f010f7fa:	50                   	push   %eax
f010f7fb:	e8 2e 24 02 00       	call   f0131c2e <insert_sorted_with_merge_freeList>
f010f800:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 1 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f803:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f808:	85 c0                	test   %eax,%eax
f010f80a:	75 17                	jne    f010f823 <test_insert_sorted_with_merge_freeList+0x48c>
f010f80c:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f811:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f814:	42                   	inc    %edx
f010f815:	39 d0                	cmp    %edx,%eax
f010f817:	75 0a                	jne    f010f823 <test_insert_sorted_with_merge_freeList+0x48c>
f010f819:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f81e:	83 f8 04             	cmp    $0x4,%eax
f010f821:	74 17                	je     f010f83a <test_insert_sorted_with_merge_freeList+0x4a3>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f823:	83 ec 04             	sub    $0x4,%esp
f010f826:	68 40 7a 13 f0       	push   $0xf0137a40
f010f82b:	68 e3 02 00 00       	push   $0x2e3
f010f830:	68 94 6e 13 f0       	push   $0xf0136e94
f010f835:	e8 6c 09 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f83a:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f841:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f010f848:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f84b:	8d 50 ff             	lea    -0x1(%eax),%edx
f010f84e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f851:	48                   	dec    %eax
f010f852:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010f856:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f859:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f85d:	01 c8                	add    %ecx,%eax
f010f85f:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f863:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f866:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f86d:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010f86e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f871:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f878:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f879:	83 ec 0c             	sub    $0xc,%esp
f010f87c:	ff 75 f0             	pushl  -0x10(%ebp)
f010f87f:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f882:	50                   	push   %eax
f010f883:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f886:	50                   	push   %eax
f010f887:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010f88a:	50                   	push   %eax
f010f88b:	68 c0 84 6e f0       	push   $0xf06e84c0
f010f890:	e8 e6 06 00 00       	call   f010ff7b <check_list_data>
f010f895:	83 c4 20             	add    $0x20,%esp
f010f898:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010f89b:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f89f:	74 17                	je     f010f8b8 <test_insert_sorted_with_merge_freeList+0x521>
f010f8a1:	83 ec 04             	sub    $0x4,%esp
f010f8a4:	68 ac 7a 13 f0       	push   $0xf0137aac
f010f8a9:	68 ec 02 00 00       	push   $0x2ec
f010f8ae:	68 94 6e 13 f0       	push   $0xf0136e94
f010f8b3:	e8 ee 08 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010f8b8:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f8bb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010f8be:	74 17                	je     f010f8d7 <test_insert_sorted_with_merge_freeList+0x540>
f010f8c0:	83 ec 04             	sub    $0x4,%esp
f010f8c3:	68 00 7b 13 f0       	push   $0xf0137b00
f010f8c8:	68 ed 02 00 00       	push   $0x2ed
f010f8cd:	68 94 6e 13 f0       	push   $0xf0136e94
f010f8d2:	e8 cf 08 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010f8d7:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010f8de:	83 ec 0c             	sub    $0xc,%esp
f010f8e1:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f8e4:	50                   	push   %eax
f010f8e5:	e8 5d 07 00 00       	call   f0110047 <check_avaliable_list_data>
f010f8ea:	83 c4 10             	add    $0x10,%esp
f010f8ed:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010f8f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010f8f3:	8d 50 01             	lea    0x1(%eax),%edx
f010f8f6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010f8f9:	39 c2                	cmp    %eax,%edx
f010f8fb:	74 17                	je     f010f914 <test_insert_sorted_with_merge_freeList+0x57d>
f010f8fd:	83 ec 04             	sub    $0x4,%esp
f010f900:	68 54 7b 13 f0       	push   $0xf0137b54
f010f905:	68 f2 02 00 00       	push   $0x2f2
f010f90a:	68 94 6e 13 f0       	push   $0xf0136e94
f010f90f:	e8 92 08 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010f914:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010f918:	74 17                	je     f010f931 <test_insert_sorted_with_merge_freeList+0x59a>
f010f91a:	83 ec 04             	sub    $0x4,%esp
f010f91d:	68 ac 7b 13 f0       	push   $0xf0137bac
f010f922:	68 f3 02 00 00       	push   $0x2f3
f010f927:	68 94 6e 13 f0       	push   $0xf0136e94
f010f92c:	e8 75 08 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 6: CASE 2 - Merge with previous ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 4;
f010f931:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 8*kilo + 4*kilo;
f010f938:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f93b:	c7 44 85 c0 00 30 00 	movl   $0x3000,-0x40(%ebp,%eax,4)
f010f942:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010f943:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f946:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010f94d:	00 
	struct MemBlock blockToInsert6;
	blockToInsert6.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010f94e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f951:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010f955:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
	blockToInsert6.size = blocksToInsertSizes[idx_blocksToInsert];
f010f95b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f95e:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f962:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert6);
f010f968:	83 ec 0c             	sub    $0xc,%esp
f010f96b:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f010f971:	50                   	push   %eax
f010f972:	e8 b7 22 02 00       	call   f0131c2e <insert_sorted_with_merge_freeList>
f010f977:	83 c4 10             	add    $0x10,%esp

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 2 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010f97a:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010f97f:	85 c0                	test   %eax,%eax
f010f981:	75 19                	jne    f010f99c <test_insert_sorted_with_merge_freeList+0x605>
f010f983:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010f988:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010f98b:	83 c2 02             	add    $0x2,%edx
f010f98e:	39 d0                	cmp    %edx,%eax
f010f990:	75 0a                	jne    f010f99c <test_insert_sorted_with_merge_freeList+0x605>
f010f992:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010f997:	83 f8 04             	cmp    $0x4,%eax
f010f99a:	74 17                	je     f010f9b3 <test_insert_sorted_with_merge_freeList+0x61c>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010f99c:	83 ec 04             	sub    $0x4,%esp
f010f99f:	68 40 7a 13 f0       	push   $0xf0137a40
f010f9a4:	68 05 03 00 00       	push   $0x305
f010f9a9:	68 94 6e 13 f0       	push   $0xf0136e94
f010f9ae:	e8 f3 07 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010f9b3:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010f9ba:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSizes[idx_blocksToInsert-1] += blocksToInsertSizes[idx_blocksToInsert];
f010f9c1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9c4:	8d 50 ff             	lea    -0x1(%eax),%edx
f010f9c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9ca:	48                   	dec    %eax
f010f9cb:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010f9cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9d2:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010f9d6:	01 c8                	add    %ecx,%eax
f010f9d8:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010f9dc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9df:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010f9e6:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010f9e7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010f9ea:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010f9f1:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010f9f2:	83 ec 0c             	sub    $0xc,%esp
f010f9f5:	ff 75 f0             	pushl  -0x10(%ebp)
f010f9f8:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010f9fb:	50                   	push   %eax
f010f9fc:	8d 45 98             	lea    -0x68(%ebp),%eax
f010f9ff:	50                   	push   %eax
f010fa00:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fa03:	50                   	push   %eax
f010fa04:	68 c0 84 6e f0       	push   $0xf06e84c0
f010fa09:	e8 6d 05 00 00       	call   f010ff7b <check_list_data>
f010fa0e:	83 c4 20             	add    $0x20,%esp
f010fa11:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fa14:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fa18:	74 17                	je     f010fa31 <test_insert_sorted_with_merge_freeList+0x69a>
f010fa1a:	83 ec 04             	sub    $0x4,%esp
f010fa1d:	68 ac 7a 13 f0       	push   $0xf0137aac
f010fa22:	68 0e 03 00 00       	push   $0x30e
f010fa27:	68 94 6e 13 f0       	push   $0xf0136e94
f010fa2c:	e8 75 07 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fa31:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fa34:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fa37:	74 17                	je     f010fa50 <test_insert_sorted_with_merge_freeList+0x6b9>
f010fa39:	83 ec 04             	sub    $0x4,%esp
f010fa3c:	68 00 7b 13 f0       	push   $0xf0137b00
f010fa41:	68 0f 03 00 00       	push   $0x30f
f010fa46:	68 94 6e 13 f0       	push   $0xf0136e94
f010fa4b:	e8 56 07 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fa50:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fa57:	83 ec 0c             	sub    $0xc,%esp
f010fa5a:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fa5d:	50                   	push   %eax
f010fa5e:	e8 e4 05 00 00       	call   f0110047 <check_avaliable_list_data>
f010fa63:	83 c4 10             	add    $0x10,%esp
f010fa66:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 2) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fa69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fa6c:	8d 50 02             	lea    0x2(%eax),%edx
f010fa6f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fa72:	39 c2                	cmp    %eax,%edx
f010fa74:	74 17                	je     f010fa8d <test_insert_sorted_with_merge_freeList+0x6f6>
f010fa76:	83 ec 04             	sub    $0x4,%esp
f010fa79:	68 54 7b 13 f0       	push   $0xf0137b54
f010fa7e:	68 14 03 00 00       	push   $0x314
f010fa83:	68 94 6e 13 f0       	push   $0xf0136e94
f010fa88:	e8 19 07 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010fa8d:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fa91:	74 17                	je     f010faaa <test_insert_sorted_with_merge_freeList+0x713>
f010fa93:	83 ec 04             	sub    $0x4,%esp
f010fa96:	68 ac 7b 13 f0       	push   $0xf0137bac
f010fa9b:	68 15 03 00 00       	push   $0x315
f010faa0:	68 94 6e 13 f0       	push   $0xf0136e94
f010faa5:	e8 fc 06 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 7: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (AT the head)*/
	idx_blocksToInsert = 0;
f010faaa:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fab1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fab4:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fabb:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 1*kilo;
f010fabc:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fabf:	c7 44 85 98 00 04 00 	movl   $0x400,-0x68(%ebp,%eax,4)
f010fac6:	00 
	struct MemBlock blockToInsert7;
	blockToInsert7.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fac7:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010faca:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010face:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
	blockToInsert7.size = blocksToInsertSizes[idx_blocksToInsert];
f010fad4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fad7:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fadb:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert7);
f010fae1:	83 ec 0c             	sub    $0xc,%esp
f010fae4:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f010faea:	50                   	push   %eax
f010faeb:	e8 3e 21 02 00       	call   f0131c2e <insert_sorted_with_merge_freeList>
f010faf0:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 3 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010faf3:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010faf8:	85 c0                	test   %eax,%eax
f010fafa:	75 19                	jne    f010fb15 <test_insert_sorted_with_merge_freeList+0x77e>
f010fafc:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010fb01:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fb04:	83 c2 03             	add    $0x3,%edx
f010fb07:	39 d0                	cmp    %edx,%eax
f010fb09:	75 0a                	jne    f010fb15 <test_insert_sorted_with_merge_freeList+0x77e>
f010fb0b:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010fb10:	83 f8 04             	cmp    $0x4,%eax
f010fb13:	74 17                	je     f010fb2c <test_insert_sorted_with_merge_freeList+0x795>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fb15:	83 ec 04             	sub    $0x4,%esp
f010fb18:	68 40 7a 13 f0       	push   $0xf0137a40
f010fb1d:	68 28 03 00 00       	push   $0x328
f010fb22:	68 94 6e 13 f0       	push   $0xf0136e94
f010fb27:	e8 7a 06 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fb2c:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010fb33:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f010fb3a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb3d:	8d 50 01             	lea    0x1(%eax),%edx
f010fb40:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb43:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fb47:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f010fb4b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb4e:	8d 50 01             	lea    0x1(%eax),%edx
f010fb51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb54:	40                   	inc    %eax
f010fb55:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010fb59:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb5c:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fb60:	01 c8                	add    %ecx,%eax
f010fb62:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fb66:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb69:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fb70:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010fb71:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fb74:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fb7b:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fb7c:	83 ec 0c             	sub    $0xc,%esp
f010fb7f:	ff 75 f0             	pushl  -0x10(%ebp)
f010fb82:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fb85:	50                   	push   %eax
f010fb86:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fb89:	50                   	push   %eax
f010fb8a:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fb8d:	50                   	push   %eax
f010fb8e:	68 c0 84 6e f0       	push   $0xf06e84c0
f010fb93:	e8 e3 03 00 00       	call   f010ff7b <check_list_data>
f010fb98:	83 c4 20             	add    $0x20,%esp
f010fb9b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fb9e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fba2:	74 17                	je     f010fbbb <test_insert_sorted_with_merge_freeList+0x824>
f010fba4:	83 ec 04             	sub    $0x4,%esp
f010fba7:	68 ac 7a 13 f0       	push   $0xf0137aac
f010fbac:	68 32 03 00 00       	push   $0x332
f010fbb1:	68 94 6e 13 f0       	push   $0xf0136e94
f010fbb6:	e8 eb 05 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fbbb:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fbbe:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fbc1:	74 17                	je     f010fbda <test_insert_sorted_with_merge_freeList+0x843>
f010fbc3:	83 ec 04             	sub    $0x4,%esp
f010fbc6:	68 00 7b 13 f0       	push   $0xf0137b00
f010fbcb:	68 33 03 00 00       	push   $0x333
f010fbd0:	68 94 6e 13 f0       	push   $0xf0136e94
f010fbd5:	e8 cc 05 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fbda:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fbe1:	83 ec 0c             	sub    $0xc,%esp
f010fbe4:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fbe7:	50                   	push   %eax
f010fbe8:	e8 5a 04 00 00       	call   f0110047 <check_avaliable_list_data>
f010fbed:	83 c4 10             	add    $0x10,%esp
f010fbf0:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 3) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fbf3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fbf6:	8d 50 03             	lea    0x3(%eax),%edx
f010fbf9:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fbfc:	39 c2                	cmp    %eax,%edx
f010fbfe:	74 17                	je     f010fc17 <test_insert_sorted_with_merge_freeList+0x880>
f010fc00:	83 ec 04             	sub    $0x4,%esp
f010fc03:	68 54 7b 13 f0       	push   $0xf0137b54
f010fc08:	68 38 03 00 00       	push   $0x338
f010fc0d:	68 94 6e 13 f0       	push   $0xf0136e94
f010fc12:	e8 8f 05 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010fc17:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fc1b:	74 17                	je     f010fc34 <test_insert_sorted_with_merge_freeList+0x89d>
f010fc1d:	83 ec 04             	sub    $0x4,%esp
f010fc20:	68 ac 7b 13 f0       	push   $0xf0137bac
f010fc25:	68 39 03 00 00       	push   $0x339
f010fc2a:	68 94 6e 13 f0       	push   $0xf0136e94
f010fc2f:	e8 72 05 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 8: CASE 3 - Merge with next ONLY in the FreeMemBlocksList (between 2 blocks)*/
	idx_blocksToInsert = 5;
f010fc34:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = (8*kilo + 4*kilo + 10*kilo) - (4*kilo);
f010fc3b:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc3e:	c7 44 85 c0 00 48 00 	movl   $0x4800,-0x40(%ebp,%eax,4)
f010fc45:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 4*kilo;
f010fc46:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc49:	c7 44 85 98 00 10 00 	movl   $0x1000,-0x68(%ebp,%eax,4)
f010fc50:	00 
	struct MemBlock blockToInsert8;
	blockToInsert8.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fc51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc54:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fc58:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
	blockToInsert8.size = blocksToInsertSizes[idx_blocksToInsert];
f010fc5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fc61:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fc65:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)

//	cprintf("===>BEFORE\n");
//	show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert8);
f010fc6b:	83 ec 0c             	sub    $0xc,%esp
f010fc6e:	8d 85 14 ff ff ff    	lea    -0xec(%ebp),%eax
f010fc74:	50                   	push   %eax
f010fc75:	e8 b4 1f 02 00       	call   f0131c2e <insert_sorted_with_merge_freeList>
f010fc7a:	83 c4 10             	add    $0x10,%esp
//	show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 4 || LIST_SIZE(&(FreeMemBlocksList)) != 4)
f010fc7d:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010fc82:	85 c0                	test   %eax,%eax
f010fc84:	75 19                	jne    f010fc9f <test_insert_sorted_with_merge_freeList+0x908>
f010fc86:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010fc8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fc8e:	83 c2 04             	add    $0x4,%edx
f010fc91:	39 d0                	cmp    %edx,%eax
f010fc93:	75 0a                	jne    f010fc9f <test_insert_sorted_with_merge_freeList+0x908>
f010fc95:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010fc9a:	83 f8 04             	cmp    $0x4,%eax
f010fc9d:	74 17                	je     f010fcb6 <test_insert_sorted_with_merge_freeList+0x91f>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fc9f:	83 ec 04             	sub    $0x4,%esp
f010fca2:	68 40 7a 13 f0       	push   $0xf0137a40
f010fca7:	68 4c 03 00 00       	push   $0x34c
f010fcac:	68 94 6e 13 f0       	push   $0xf0136e94
f010fcb1:	e8 f0 04 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fcb6:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 4;
f010fcbd:	c7 45 f0 04 00 00 00 	movl   $0x4,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert+1] = blocksToInsertSVAs[idx_blocksToInsert];
f010fcc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcc7:	8d 50 01             	lea    0x1(%eax),%edx
f010fcca:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fccd:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fcd1:	89 44 95 c0          	mov    %eax,-0x40(%ebp,%edx,4)
	blocksToInsertSizes[idx_blocksToInsert+1] += blocksToInsertSizes[idx_blocksToInsert];
f010fcd5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcd8:	8d 50 01             	lea    0x1(%eax),%edx
f010fcdb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcde:	40                   	inc    %eax
f010fcdf:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010fce3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fce6:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fcea:	01 c8                	add    %ecx,%eax
f010fcec:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fcf0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcf3:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fcfa:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010fcfb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fcfe:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fd05:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fd06:	83 ec 0c             	sub    $0xc,%esp
f010fd09:	ff 75 f0             	pushl  -0x10(%ebp)
f010fd0c:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fd0f:	50                   	push   %eax
f010fd10:	8d 45 98             	lea    -0x68(%ebp),%eax
f010fd13:	50                   	push   %eax
f010fd14:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010fd17:	50                   	push   %eax
f010fd18:	68 c0 84 6e f0       	push   $0xf06e84c0
f010fd1d:	e8 59 02 00 00       	call   f010ff7b <check_list_data>
f010fd22:	83 c4 20             	add    $0x20,%esp
f010fd25:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fd28:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fd2c:	74 17                	je     f010fd45 <test_insert_sorted_with_merge_freeList+0x9ae>
f010fd2e:	83 ec 04             	sub    $0x4,%esp
f010fd31:	68 ac 7a 13 f0       	push   $0xf0137aac
f010fd36:	68 56 03 00 00       	push   $0x356
f010fd3b:	68 94 6e 13 f0       	push   $0xf0136e94
f010fd40:	e8 61 04 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010fd45:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fd48:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fd4b:	74 17                	je     f010fd64 <test_insert_sorted_with_merge_freeList+0x9cd>
f010fd4d:	83 ec 04             	sub    $0x4,%esp
f010fd50:	68 00 7b 13 f0       	push   $0xf0137b00
f010fd55:	68 57 03 00 00       	push   $0x357
f010fd5a:	68 94 6e 13 f0       	push   $0xf0136e94
f010fd5f:	e8 42 04 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010fd64:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010fd6b:	83 ec 0c             	sub    $0xc,%esp
f010fd6e:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010fd71:	50                   	push   %eax
f010fd72:	e8 d0 02 00 00       	call   f0110047 <check_avaliable_list_data>
f010fd77:	83 c4 10             	add    $0x10,%esp
f010fd7a:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 4) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010fd7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010fd80:	8d 50 04             	lea    0x4(%eax),%edx
f010fd83:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010fd86:	39 c2                	cmp    %eax,%edx
f010fd88:	74 17                	je     f010fda1 <test_insert_sorted_with_merge_freeList+0xa0a>
f010fd8a:	83 ec 04             	sub    $0x4,%esp
f010fd8d:	68 54 7b 13 f0       	push   $0xf0137b54
f010fd92:	68 5c 03 00 00       	push   $0x35c
f010fd97:	68 94 6e 13 f0       	push   $0xf0136e94
f010fd9c:	e8 05 04 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010fda1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fda5:	74 17                	je     f010fdbe <test_insert_sorted_with_merge_freeList+0xa27>
f010fda7:	83 ec 04             	sub    $0x4,%esp
f010fdaa:	68 ac 7b 13 f0       	push   $0xf0137bac
f010fdaf:	68 5d 03 00 00       	push   $0x35d
f010fdb4:	68 94 6e 13 f0       	push   $0xf0136e94
f010fdb9:	e8 e8 03 ff ff       	call   f01001a6 <_panic>

	//====================================================================//
	/*INSERT_SORTED_WITH MERGE Scenario 9: CASE 4 - Merge with prev & next in the FreeMemBlocksList */
	idx_blocksToInsert = 2;
f010fdbe:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert] = 2*kilo;
f010fdc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdc8:	c7 44 85 c0 00 08 00 	movl   $0x800,-0x40(%ebp,%eax,4)
f010fdcf:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0x2000 - 2*kilo; //6144
f010fdd0:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdd3:	c7 44 85 98 00 18 00 	movl   $0x1800,-0x68(%ebp,%eax,4)
f010fdda:	00 
	struct MemBlock blockToInsert9;
	blockToInsert9.sva = blocksToInsertSVAs[idx_blocksToInsert];
f010fddb:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdde:	8b 44 85 c0          	mov    -0x40(%ebp,%eax,4),%eax
f010fde2:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
	blockToInsert9.size = blocksToInsertSizes[idx_blocksToInsert];
f010fde8:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fdeb:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fdef:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)

	//printf("===>BEFORE\n");
	//show_list_content(&FreeMemBlocksList);

	insert_sorted_with_merge_freeList(&blockToInsert9);
f010fdf5:	83 ec 0c             	sub    $0xc,%esp
f010fdf8:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f010fdfe:	50                   	push   %eax
f010fdff:	e8 2a 1e 02 00       	call   f0131c2e <insert_sorted_with_merge_freeList>
f010fe04:	83 c4 10             	add    $0x10,%esp
	//show_list_content(&FreeMemBlocksList);

	//Check 1: Check size of the AllocMemBlocksList
	if (LIST_SIZE(&(AllocMemBlocksList)) != 0 || LIST_SIZE(&(AvailableMemBlocksList)) != numOfBlocks + 6 || LIST_SIZE(&(FreeMemBlocksList)) != 3)
f010fe07:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f010fe0c:	85 c0                	test   %eax,%eax
f010fe0e:	75 19                	jne    f010fe29 <test_insert_sorted_with_merge_freeList+0xa92>
f010fe10:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f010fe15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f010fe18:	83 c2 06             	add    $0x6,%edx
f010fe1b:	39 d0                	cmp    %edx,%eax
f010fe1d:	75 0a                	jne    f010fe29 <test_insert_sorted_with_merge_freeList+0xa92>
f010fe1f:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f010fe24:	83 f8 03             	cmp    $0x3,%eax
f010fe27:	74 17                	je     f010fe40 <test_insert_sorted_with_merge_freeList+0xaa9>
		panic("insert_sorted_with_merge: Wrong sizes for AvailableMemBlocksList, FreeMemBlocksList and AllocMemBlocksList.");
f010fe29:	83 ec 04             	sub    $0x4,%esp
f010fe2c:	68 40 7a 13 f0       	push   $0xf0137a40
f010fe31:	68 70 03 00 00       	push   $0x370
f010fe36:	68 94 6e 13 f0       	push   $0xf0136e94
f010fe3b:	e8 66 03 ff ff       	call   f01001a6 <_panic>

	//Check 2: Check the FreeMemBlocksList content
	size = 0;
f010fe40:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	actualSize = 3;
f010fe47:	c7 45 f0 03 00 00 00 	movl   $0x3,-0x10(%ebp)
	blocksToInsertSVAs[idx_blocksToInsert-1] = 0x0;
f010fe4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe51:	48                   	dec    %eax
f010fe52:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fe59:	00 
	blocksToInsertSizes[idx_blocksToInsert-1] = blocksToInsertSizes[idx_blocksToInsert-1] + blocksToInsertSizes[idx_blocksToInsert] + blocksToInsertSizes[idx_blocksToInsert+1];
f010fe5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe5d:	8d 50 ff             	lea    -0x1(%eax),%edx
f010fe60:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe63:	48                   	dec    %eax
f010fe64:	8b 4c 85 98          	mov    -0x68(%ebp,%eax,4),%ecx
f010fe68:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe6b:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fe6f:	01 c1                	add    %eax,%ecx
f010fe71:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe74:	40                   	inc    %eax
f010fe75:	8b 44 85 98          	mov    -0x68(%ebp,%eax,4),%eax
f010fe79:	01 c8                	add    %ecx,%eax
f010fe7b:	89 44 95 98          	mov    %eax,-0x68(%ebp,%edx,4)
	blocksToInsertSVAs[idx_blocksToInsert] = 0x0;
f010fe7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe82:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fe89:	00 
	blocksToInsertSizes[idx_blocksToInsert] = 0;
f010fe8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe8d:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010fe94:	00 
	blocksToInsertSVAs[idx_blocksToInsert+1] = 0x0;
f010fe95:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fe98:	40                   	inc    %eax
f010fe99:	c7 44 85 c0 00 00 00 	movl   $0x0,-0x40(%ebp,%eax,4)
f010fea0:	00 
	blocksToInsertSizes[idx_blocksToInsert+1] = 0;
f010fea1:	8b 45 ec             	mov    -0x14(%ebp),%eax
f010fea4:	40                   	inc    %eax
f010fea5:	c7 44 85 98 00 00 00 	movl   $0x0,-0x68(%ebp,%eax,4)
f010feac:	00 
	chk = check_list_data(&FreeMemBlocksList, blocksToInsertSVAs, blocksToInsertSizes, &size, actualSize);
f010fead:	83 ec 0c             	sub    $0xc,%esp
f010feb0:	ff 75 f0             	pushl  -0x10(%ebp)
f010feb3:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010feb6:	50                   	push   %eax
f010feb7:	8d 45 98             	lea    -0x68(%ebp),%eax
f010feba:	50                   	push   %eax
f010febb:	8d 45 c0             	lea    -0x40(%ebp),%eax
f010febe:	50                   	push   %eax
f010febf:	68 c0 84 6e f0       	push   $0xf06e84c0
f010fec4:	e8 b2 00 00 00       	call   f010ff7b <check_list_data>
f010fec9:	83 c4 20             	add    $0x20,%esp
f010fecc:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList content is not correct.");
f010fecf:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010fed3:	74 17                	je     f010feec <test_insert_sorted_with_merge_freeList+0xb55>
f010fed5:	83 ec 04             	sub    $0x4,%esp
f010fed8:	68 ac 7a 13 f0       	push   $0xf0137aac
f010fedd:	68 7c 03 00 00       	push   $0x37c
f010fee2:	68 94 6e 13 f0       	push   $0xf0136e94
f010fee7:	e8 ba 02 ff ff       	call   f01001a6 <_panic>
	if(size != actualSize) panic("insert_sorted_with_merge: WRONG INSERT .. FreeMemBlocksList size is not correct.");
f010feec:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010feef:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f010fef2:	74 17                	je     f010ff0b <test_insert_sorted_with_merge_freeList+0xb74>
f010fef4:	83 ec 04             	sub    $0x4,%esp
f010fef7:	68 00 7b 13 f0       	push   $0xf0137b00
f010fefc:	68 7d 03 00 00       	push   $0x37d
f010ff01:	68 94 6e 13 f0       	push   $0xf0136e94
f010ff06:	e8 9b 02 ff ff       	call   f01001a6 <_panic>

	//Check 3: Check the AvailableMemBlocksList content
	size = 0;
f010ff0b:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
	chk = check_avaliable_list_data(&size);
f010ff12:	83 ec 0c             	sub    $0xc,%esp
f010ff15:	8d 45 94             	lea    -0x6c(%ebp),%eax
f010ff18:	50                   	push   %eax
f010ff19:	e8 29 01 00 00       	call   f0110047 <check_avaliable_list_data>
f010ff1e:	83 c4 10             	add    $0x10,%esp
f010ff21:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if(size != numOfBlocks + 6) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList size is not correct.");
f010ff24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f010ff27:	8d 50 06             	lea    0x6(%eax),%edx
f010ff2a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f010ff2d:	39 c2                	cmp    %eax,%edx
f010ff2f:	74 17                	je     f010ff48 <test_insert_sorted_with_merge_freeList+0xbb1>
f010ff31:	83 ec 04             	sub    $0x4,%esp
f010ff34:	68 54 7b 13 f0       	push   $0xf0137b54
f010ff39:	68 82 03 00 00       	push   $0x382
f010ff3e:	68 94 6e 13 f0       	push   $0xf0136e94
f010ff43:	e8 5e 02 ff ff       	call   f01001a6 <_panic>
	if(chk != 1) panic("insert_sorted_with_merge: WRONG INSERT .. AvailableMemBlocksList content is not correct.");
f010ff48:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f010ff4c:	74 17                	je     f010ff65 <test_insert_sorted_with_merge_freeList+0xbce>
f010ff4e:	83 ec 04             	sub    $0x4,%esp
f010ff51:	68 ac 7b 13 f0       	push   $0xf0137bac
f010ff56:	68 83 03 00 00       	push   $0x383
f010ff5b:	68 94 6e 13 f0       	push   $0xf0136e94
f010ff60:	e8 41 02 ff ff       	call   f01001a6 <_panic>
	//====================================================================//


	//show_list_content(&FreeMemBlocksList);
	cprintf("Congratulations!! test insert_sorted_with_merge_freeList completed successfully.\n");
f010ff65:	83 ec 0c             	sub    $0xc,%esp
f010ff68:	68 08 7c 13 f0       	push   $0xf0137c08
f010ff6d:	e8 bb 0c ff ff       	call   f0100c2d <cprintf>
f010ff72:	83 c4 10             	add    $0x10,%esp

}
f010ff75:	90                   	nop
f010ff76:	8b 7d fc             	mov    -0x4(%ebp),%edi
f010ff79:	c9                   	leave  
f010ff7a:	c3                   	ret    

f010ff7b <check_list_data>:

/********************Helper Functions***************************/
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
f010ff7b:	55                   	push   %ebp
f010ff7c:	89 e5                	mov    %esp,%ebp
f010ff7e:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f010ff81:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f010ff88:	8b 45 14             	mov    0x14(%ebp),%eax
f010ff8b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	int i = 0;
f010ff91:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	LIST_FOREACH(node, list)
f010ff98:	8b 45 08             	mov    0x8(%ebp),%eax
f010ff9b:	8b 00                	mov    (%eax),%eax
f010ff9d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f010ffa0:	eb 6e                	jmp    f0110010 <check_list_data+0x95>
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
			i++;
f010ffa2:	ff 45 f8             	incl   -0x8(%ebp)
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
	{
		while(blocksSizes[i] == 0) //Empty entry in the given ground truth array .. skip it
f010ffa5:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ffa8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f010ffaf:	8b 45 10             	mov    0x10(%ebp),%eax
f010ffb2:	01 d0                	add    %edx,%eax
f010ffb4:	8b 00                	mov    (%eax),%eax
f010ffb6:	85 c0                	test   %eax,%eax
f010ffb8:	74 e8                	je     f010ffa2 <check_list_data+0x27>
			i++;
		if(node->sva != blocksSVAs[(i)] || node->size != blocksSizes[i])
f010ffba:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010ffbd:	8b 50 08             	mov    0x8(%eax),%edx
f010ffc0:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ffc3:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010ffca:	8b 45 0c             	mov    0xc(%ebp),%eax
f010ffcd:	01 c8                	add    %ecx,%eax
f010ffcf:	8b 00                	mov    (%eax),%eax
f010ffd1:	39 c2                	cmp    %eax,%edx
f010ffd3:	75 1b                	jne    f010fff0 <check_list_data+0x75>
f010ffd5:	8b 45 fc             	mov    -0x4(%ebp),%eax
f010ffd8:	8b 50 0c             	mov    0xc(%eax),%edx
f010ffdb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f010ffde:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f010ffe5:	8b 45 10             	mov    0x10(%ebp),%eax
f010ffe8:	01 c8                	add    %ecx,%eax
f010ffea:	8b 00                	mov    (%eax),%eax
f010ffec:	39 c2                	cmp    %eax,%edx
f010ffee:	74 07                	je     f010fff7 <check_list_data+0x7c>
		{
//			cprintf("i = %d .. \n", i);
//			cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
//			cprintf("blocks[i] data: sva = %x, size = %d\n", blocksSVAs[(i)], blocksSizes[i]);
			return 0;
f010fff0:	b8 00 00 00 00       	mov    $0x0,%eax
f010fff5:	eb 4e                	jmp    f0110045 <check_list_data+0xca>
		}
		(*size)++;
f010fff7:	8b 45 14             	mov    0x14(%ebp),%eax
f010fffa:	8b 00                	mov    (%eax),%eax
f010fffc:	8d 50 01             	lea    0x1(%eax),%edx
f010ffff:	8b 45 14             	mov    0x14(%ebp),%eax
f0110002:	89 10                	mov    %edx,(%eax)
		i++;
f0110004:	ff 45 f8             	incl   -0x8(%ebp)
int check_list_data(struct MemBlock_List* list, uint32* blocksSVAs, uint32* blocksSizes, uint32* size, uint32 actualSize)
{
	struct MemBlock* node = NULL;
	*size = 0;
	int i = 0;
	LIST_FOREACH(node, list)
f0110007:	8b 45 08             	mov    0x8(%ebp),%eax
f011000a:	8b 40 08             	mov    0x8(%eax),%eax
f011000d:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110010:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0110014:	74 07                	je     f011001d <check_list_data+0xa2>
f0110016:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110019:	8b 00                	mov    (%eax),%eax
f011001b:	eb 05                	jmp    f0110022 <check_list_data+0xa7>
f011001d:	b8 00 00 00 00       	mov    $0x0,%eax
f0110022:	8b 55 08             	mov    0x8(%ebp),%edx
f0110025:	89 42 08             	mov    %eax,0x8(%edx)
f0110028:	8b 45 08             	mov    0x8(%ebp),%eax
f011002b:	8b 40 08             	mov    0x8(%eax),%eax
f011002e:	85 c0                	test   %eax,%eax
f0110030:	0f 85 6f ff ff ff    	jne    f010ffa5 <check_list_data+0x2a>
f0110036:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011003a:	0f 85 65 ff ff ff    	jne    f010ffa5 <check_list_data+0x2a>
			return 0;
		}
		(*size)++;
		i++;
	}
	return 1;
f0110040:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0110045:	c9                   	leave  
f0110046:	c3                   	ret    

f0110047 <check_avaliable_list_data>:

int check_avaliable_list_data(uint32* size)
{
f0110047:	55                   	push   %ebp
f0110048:	89 e5                	mov    %esp,%ebp
f011004a:	83 ec 10             	sub    $0x10,%esp
	struct MemBlock* node = NULL;
f011004d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	*size = 0;
f0110054:	8b 45 08             	mov    0x8(%ebp),%eax
f0110057:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

	LIST_FOREACH(node, &AvailableMemBlocksList)
f011005d:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0110062:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110065:	eb 30                	jmp    f0110097 <check_avaliable_list_data+0x50>
	{
		if(node->sva != 0x0 || node->size != 0)
f0110067:	8b 45 fc             	mov    -0x4(%ebp),%eax
f011006a:	8b 40 08             	mov    0x8(%eax),%eax
f011006d:	85 c0                	test   %eax,%eax
f011006f:	75 0a                	jne    f011007b <check_avaliable_list_data+0x34>
f0110071:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0110074:	8b 40 0c             	mov    0xc(%eax),%eax
f0110077:	85 c0                	test   %eax,%eax
f0110079:	74 07                	je     f0110082 <check_avaliable_list_data+0x3b>
		{
			return 0;
f011007b:	b8 00 00 00 00       	mov    $0x0,%eax
f0110080:	eb 40                	jmp    f01100c2 <check_avaliable_list_data+0x7b>
		}
		(*size)++;
f0110082:	8b 45 08             	mov    0x8(%ebp),%eax
f0110085:	8b 00                	mov    (%eax),%eax
f0110087:	8d 50 01             	lea    0x1(%eax),%edx
f011008a:	8b 45 08             	mov    0x8(%ebp),%eax
f011008d:	89 10                	mov    %edx,(%eax)
int check_avaliable_list_data(uint32* size)
{
	struct MemBlock* node = NULL;
	*size = 0;

	LIST_FOREACH(node, &AvailableMemBlocksList)
f011008f:	a1 fc 84 6e f0       	mov    0xf06e84fc,%eax
f0110094:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0110097:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f011009b:	74 07                	je     f01100a4 <check_avaliable_list_data+0x5d>
f011009d:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01100a0:	8b 00                	mov    (%eax),%eax
f01100a2:	eb 05                	jmp    f01100a9 <check_avaliable_list_data+0x62>
f01100a4:	b8 00 00 00 00       	mov    $0x0,%eax
f01100a9:	a3 fc 84 6e f0       	mov    %eax,0xf06e84fc
f01100ae:	a1 fc 84 6e f0       	mov    0xf06e84fc,%eax
f01100b3:	85 c0                	test   %eax,%eax
f01100b5:	75 b0                	jne    f0110067 <check_avaliable_list_data+0x20>
f01100b7:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01100bb:	75 aa                	jne    f0110067 <check_avaliable_list_data+0x20>
		{
			return 0;
		}
		(*size)++;
	}
	return 1;
f01100bd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01100c2:	c9                   	leave  
f01100c3:	c3                   	ret    

f01100c4 <show_list_content>:


void show_list_content(struct MemBlock_List* list)
{
f01100c4:	55                   	push   %ebp
f01100c5:	89 e5                	mov    %esp,%ebp
f01100c7:	83 ec 18             	sub    $0x18,%esp
	struct MemBlock* node = NULL;
f01100ca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	LIST_FOREACH(node, list)
f01100d1:	8b 45 08             	mov    0x8(%ebp),%eax
f01100d4:	8b 00                	mov    (%eax),%eax
f01100d6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01100d9:	eb 27                	jmp    f0110102 <show_list_content+0x3e>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
f01100db:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01100de:	8b 50 0c             	mov    0xc(%eax),%edx
f01100e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01100e4:	8b 40 08             	mov    0x8(%eax),%eax
f01100e7:	83 ec 04             	sub    $0x4,%esp
f01100ea:	52                   	push   %edx
f01100eb:	50                   	push   %eax
f01100ec:	68 58 6f 13 f0       	push   $0xf0136f58
f01100f1:	e8 37 0b ff ff       	call   f0100c2d <cprintf>
f01100f6:	83 c4 10             	add    $0x10,%esp


void show_list_content(struct MemBlock_List* list)
{
	struct MemBlock* node = NULL;
	LIST_FOREACH(node, list)
f01100f9:	8b 45 08             	mov    0x8(%ebp),%eax
f01100fc:	8b 40 08             	mov    0x8(%eax),%eax
f01100ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0110102:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0110106:	74 07                	je     f011010f <show_list_content+0x4b>
f0110108:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011010b:	8b 00                	mov    (%eax),%eax
f011010d:	eb 05                	jmp    f0110114 <show_list_content+0x50>
f011010f:	b8 00 00 00 00       	mov    $0x0,%eax
f0110114:	8b 55 08             	mov    0x8(%ebp),%edx
f0110117:	89 42 08             	mov    %eax,0x8(%edx)
f011011a:	8b 45 08             	mov    0x8(%ebp),%eax
f011011d:	8b 40 08             	mov    0x8(%eax),%eax
f0110120:	85 c0                	test   %eax,%eax
f0110122:	75 b7                	jne    f01100db <show_list_content+0x17>
f0110124:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0110128:	75 b1                	jne    f01100db <show_list_content+0x17>
	{
		cprintf("Node data: sva = %x, size = %d\n", node->sva, node->size);
	}
}
f011012a:	90                   	nop
f011012b:	c9                   	leave  
f011012c:	c3                   	ret    

f011012d <TestAutoCompleteCommand>:
int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc);
int CA(uint32 *ptr_dir, uint32 va);
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which);
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type);
int TestAutoCompleteCommand()
{
f011012d:	55                   	push   %ebp
f011012e:	89 e5                	mov    %esp,%ebp
f0110130:	57                   	push   %edi
f0110131:	56                   	push   %esi
f0110132:	53                   	push   %ebx
f0110133:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	cprintf("Automatic Testing of Autocomplete:\n");
f0110139:	83 ec 0c             	sub    $0xc,%esp
f011013c:	68 5c 7c 13 f0       	push   $0xf0137c5c
f0110141:	e8 e7 0a ff ff       	call   f0100c2d <cprintf>
f0110146:	83 c4 10             	add    $0x10,%esp
	cprintf("\n========================\n");
f0110149:	83 ec 0c             	sub    $0xc,%esp
f011014c:	68 80 7c 13 f0       	push   $0xf0137c80
f0110151:	e8 d7 0a ff ff       	call   f0100c2d <cprintf>
f0110156:	83 c4 10             	add    $0x10,%esp
	//	cprintf("========================\n");
	//	cprintf("Q2 Test: manually try the test cases in the doc. \n..."
	//			"OR, you can do it automatically by un-commenting the code in this function, it should output the same results in the Examples exist in the MS1 ppt\n");
	//
	//	int retValue = 0;
	int i = 0;
f0110159:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)

	//CASE1:
	//should execute the kernel_info command
	cprintf("==>Testing now AUTOCOMPLETE for: kernel_info\n");
f0110160:	83 ec 0c             	sub    $0xc,%esp
f0110163:	68 9c 7c 13 f0       	push   $0xf0137c9c
f0110168:	e8 c0 0a ff ff       	call   f0100c2d <cprintf>
f011016d:	83 c4 10             	add    $0x10,%esp
	char cr0[100] = "kernel_info";
f0110170:	8d 45 80             	lea    -0x80(%ebp),%eax
f0110173:	bb 56 7d 13 f0       	mov    $0xf0137d56,%ebx
f0110178:	ba 03 00 00 00       	mov    $0x3,%edx
f011017d:	89 c7                	mov    %eax,%edi
f011017f:	89 de                	mov    %ebx,%esi
f0110181:	89 d1                	mov    %edx,%ecx
f0110183:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f0110185:	8d 55 8c             	lea    -0x74(%ebp),%edx
f0110188:	b9 16 00 00 00       	mov    $0x16,%ecx
f011018d:	b8 00 00 00 00       	mov    $0x0,%eax
f0110192:	89 d7                	mov    %edx,%edi
f0110194:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr0) ;
f0110196:	83 ec 0c             	sub    $0xc,%esp
f0110199:	8d 45 80             	lea    -0x80(%ebp),%eax
f011019c:	50                   	push   %eax
f011019d:	e8 ed 0a ff ff       	call   f0100c8f <execute_command>
f01101a2:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01101a5:	83 ec 0c             	sub    $0xc,%esp
f01101a8:	68 ca 7c 13 f0       	push   $0xf0137cca
f01101ad:	e8 7b 0a ff ff       	call   f0100c2d <cprintf>
f01101b2:	83 c4 10             	add    $0x10,%esp

	//CASE2: should print the commands that start with he ---> Shall print (help)
	cprintf("==>Testing now AUTOCOMPLETE for: he\n");
f01101b5:	83 ec 0c             	sub    $0xc,%esp
f01101b8:	68 e0 7c 13 f0       	push   $0xf0137ce0
f01101bd:	e8 6b 0a ff ff       	call   f0100c2d <cprintf>
f01101c2:	83 c4 10             	add    $0x10,%esp
	char cr2[100] = "he";
f01101c5:	c7 85 1c ff ff ff 68 	movl   $0x6568,-0xe4(%ebp)
f01101cc:	65 00 00 
f01101cf:	8d 95 20 ff ff ff    	lea    -0xe0(%ebp),%edx
f01101d5:	b9 18 00 00 00       	mov    $0x18,%ecx
f01101da:	b8 00 00 00 00       	mov    $0x0,%eax
f01101df:	89 d7                	mov    %edx,%edi
f01101e1:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr2) ;
f01101e3:	83 ec 0c             	sub    $0xc,%esp
f01101e6:	8d 85 1c ff ff ff    	lea    -0xe4(%ebp),%eax
f01101ec:	50                   	push   %eax
f01101ed:	e8 9d 0a ff ff       	call   f0100c8f <execute_command>
f01101f2:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f01101f5:	83 ec 0c             	sub    $0xc,%esp
f01101f8:	68 ca 7c 13 f0       	push   $0xf0137cca
f01101fd:	e8 2b 0a ff ff       	call   f0100c2d <cprintf>
f0110202:	83 c4 10             	add    $0x10,%esp


	//CASE3: should print the commands that start with ru ---> Shall print (rum, rub, rut, run, runall) .. Each in a separate line
	cprintf("==>Testing now AUTOCOMPLETE for: ru\n");
f0110205:	83 ec 0c             	sub    $0xc,%esp
f0110208:	68 08 7d 13 f0       	push   $0xf0137d08
f011020d:	e8 1b 0a ff ff       	call   f0100c2d <cprintf>
f0110212:	83 c4 10             	add    $0x10,%esp
	char cr3[100] = "ru";
f0110215:	c7 85 b8 fe ff ff 72 	movl   $0x7572,-0x148(%ebp)
f011021c:	75 00 00 
f011021f:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f0110225:	b9 18 00 00 00       	mov    $0x18,%ecx
f011022a:	b8 00 00 00 00       	mov    $0x0,%eax
f011022f:	89 d7                	mov    %edx,%edi
f0110231:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr3) ;
f0110233:	83 ec 0c             	sub    $0xc,%esp
f0110236:	8d 85 b8 fe ff ff    	lea    -0x148(%ebp),%eax
f011023c:	50                   	push   %eax
f011023d:	e8 4d 0a ff ff       	call   f0100c8f <execute_command>
f0110242:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110245:	83 ec 0c             	sub    $0xc,%esp
f0110248:	68 ca 7c 13 f0       	push   $0xf0137cca
f011024d:	e8 db 09 ff ff       	call   f0100c2d <cprintf>
f0110252:	83 c4 10             	add    $0x10,%esp

	//CASE4: should print unknown command
	cprintf("==>Testing now AUTOCOMPLETE for: smm\n");
f0110255:	83 ec 0c             	sub    $0xc,%esp
f0110258:	68 30 7d 13 f0       	push   $0xf0137d30
f011025d:	e8 cb 09 ff ff       	call   f0100c2d <cprintf>
f0110262:	83 c4 10             	add    $0x10,%esp
	char cr4[100] = "smm";
f0110265:	c7 85 54 fe ff ff 73 	movl   $0x6d6d73,-0x1ac(%ebp)
f011026c:	6d 6d 00 
f011026f:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f0110275:	b9 18 00 00 00       	mov    $0x18,%ecx
f011027a:	b8 00 00 00 00       	mov    $0x0,%eax
f011027f:	89 d7                	mov    %edx,%edi
f0110281:	f3 ab                	rep stos %eax,%es:(%edi)
	execute_command(cr4) ;
f0110283:	83 ec 0c             	sub    $0xc,%esp
f0110286:	8d 85 54 fe ff ff    	lea    -0x1ac(%ebp),%eax
f011028c:	50                   	push   %eax
f011028d:	e8 fd 09 ff ff       	call   f0100c8f <execute_command>
f0110292:	83 c4 10             	add    $0x10,%esp
	cprintf("=================\n\n");
f0110295:	83 ec 0c             	sub    $0xc,%esp
f0110298:	68 ca 7c 13 f0       	push   $0xf0137cca
f011029d:	e8 8b 09 ff ff       	call   f0100c2d <cprintf>
f01102a2:	83 c4 10             	add    $0x10,%esp
	return 0;
f01102a5:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01102aa:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01102ad:	5b                   	pop    %ebx
f01102ae:	5e                   	pop    %esi
f01102af:	5f                   	pop    %edi
f01102b0:	5d                   	pop    %ebp
f01102b1:	c3                   	ret    

f01102b2 <test_pt_set_page_permissions>:

//=====================================
// 1) TEST SET/CLEAR PAGE PERMISSIONS:
//=====================================
int test_pt_set_page_permissions()
{
f01102b2:	55                   	push   %ebp
f01102b3:	89 e5                	mov    %esp,%ebp
f01102b5:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check setting a permission
	uint32 va = 0xEF800000;
f01102b8:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f01102bf:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f01102c6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01102cd:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01102d2:	ff 75 ec             	pushl  -0x14(%ebp)
f01102d5:	ff 75 f0             	pushl  -0x10(%ebp)
f01102d8:	ff 75 f4             	pushl  -0xc(%ebp)
f01102db:	50                   	push   %eax
f01102dc:	e8 d3 71 ff ff       	call   f01074b4 <pt_set_page_permissions>
f01102e1:	83 c4 10             	add    $0x10,%esp
	int ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01102e4:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01102e9:	ff 75 ec             	pushl  -0x14(%ebp)
f01102ec:	ff 75 f0             	pushl  -0x10(%ebp)
f01102ef:	ff 75 f4             	pushl  -0xc(%ebp)
f01102f2:	50                   	push   %eax
f01102f3:	e8 ca 50 00 00       	call   f01153c2 <CP>
f01102f8:	83 c4 10             	add    $0x10,%esp
f01102fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01102fe:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110302:	74 14                	je     f0110318 <test_pt_set_page_permissions+0x66>
	{
		panic("[EVAL] #1 Set Permission Failed.\n");
f0110304:	83 ec 04             	sub    $0x4,%esp
f0110307:	68 bc 7d 13 f0       	push   $0xf0137dbc
f011030c:	6a 5a                	push   $0x5a
f011030e:	68 de 7d 13 f0       	push   $0xf0137dde
f0110313:	e8 8e fe fe ff       	call   f01001a6 <_panic>
	}

	//Case 2: Check setting MORE THAN ONE permission
	va = 0xEF801000;
f0110318:	c7 45 f4 00 10 80 ef 	movl   $0xef801000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER;
f011031f:	c7 45 f0 44 00 00 00 	movl   $0x44,-0x10(%ebp)
	permissions_to_clear = 0;
f0110326:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011032d:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110332:	ff 75 ec             	pushl  -0x14(%ebp)
f0110335:	ff 75 f0             	pushl  -0x10(%ebp)
f0110338:	ff 75 f4             	pushl  -0xc(%ebp)
f011033b:	50                   	push   %eax
f011033c:	e8 73 71 ff ff       	call   f01074b4 <pt_set_page_permissions>
f0110341:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110344:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110349:	ff 75 ec             	pushl  -0x14(%ebp)
f011034c:	ff 75 f0             	pushl  -0x10(%ebp)
f011034f:	ff 75 f4             	pushl  -0xc(%ebp)
f0110352:	50                   	push   %eax
f0110353:	e8 6a 50 00 00       	call   f01153c2 <CP>
f0110358:	83 c4 10             	add    $0x10,%esp
f011035b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011035e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110362:	74 14                	je     f0110378 <test_pt_set_page_permissions+0xc6>
	{
		panic("[EVAL] #2 Set Permission Failed.\n");
f0110364:	83 ec 04             	sub    $0x4,%esp
f0110367:	68 fc 7d 13 f0       	push   $0xf0137dfc
f011036c:	6a 66                	push   $0x66
f011036e:	68 de 7d 13 f0       	push   $0xf0137dde
f0110373:	e8 2e fe fe ff       	call   f01001a6 <_panic>
	}

	va = 0xEF800000;
f0110378:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = PERM_MODIFIED|PERM_USER|PERM_USED|PERM_PRESENT;
f011037f:	c7 45 f0 65 00 00 00 	movl   $0x65,-0x10(%ebp)
	permissions_to_clear = 0;
f0110386:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011038d:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110392:	ff 75 ec             	pushl  -0x14(%ebp)
f0110395:	ff 75 f0             	pushl  -0x10(%ebp)
f0110398:	ff 75 f4             	pushl  -0xc(%ebp)
f011039b:	50                   	push   %eax
f011039c:	e8 13 71 ff ff       	call   f01074b4 <pt_set_page_permissions>
f01103a1:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01103a4:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01103a9:	ff 75 ec             	pushl  -0x14(%ebp)
f01103ac:	ff 75 f0             	pushl  -0x10(%ebp)
f01103af:	ff 75 f4             	pushl  -0xc(%ebp)
f01103b2:	50                   	push   %eax
f01103b3:	e8 0a 50 00 00       	call   f01153c2 <CP>
f01103b8:	83 c4 10             	add    $0x10,%esp
f01103bb:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01103be:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01103c2:	74 14                	je     f01103d8 <test_pt_set_page_permissions+0x126>
	{
		panic("[EVAL] #3 Set Permission Failed.\n");
f01103c4:	83 ec 04             	sub    $0x4,%esp
f01103c7:	68 20 7e 13 f0       	push   $0xf0137e20
f01103cc:	6a 71                	push   $0x71
f01103ce:	68 de 7d 13 f0       	push   $0xf0137dde
f01103d3:	e8 ce fd fe ff       	call   f01001a6 <_panic>
	}

	//Case 3: Check clearing a permission
	va = 0xF0000000;
f01103d8:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	permissions_to_set = 0;
f01103df:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_PRESENT;
f01103e6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01103ed:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01103f2:	ff 75 ec             	pushl  -0x14(%ebp)
f01103f5:	ff 75 f0             	pushl  -0x10(%ebp)
f01103f8:	ff 75 f4             	pushl  -0xc(%ebp)
f01103fb:	50                   	push   %eax
f01103fc:	e8 b3 70 ff ff       	call   f01074b4 <pt_set_page_permissions>
f0110401:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110404:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110409:	ff 75 ec             	pushl  -0x14(%ebp)
f011040c:	ff 75 f0             	pushl  -0x10(%ebp)
f011040f:	ff 75 f4             	pushl  -0xc(%ebp)
f0110412:	50                   	push   %eax
f0110413:	e8 aa 4f 00 00       	call   f01153c2 <CP>
f0110418:	83 c4 10             	add    $0x10,%esp
f011041b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011041e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110422:	74 14                	je     f0110438 <test_pt_set_page_permissions+0x186>
	{
		panic("[EVAL] #4 Clear Permission Failed.\n");
f0110424:	83 ec 04             	sub    $0x4,%esp
f0110427:	68 44 7e 13 f0       	push   $0xf0137e44
f011042c:	6a 7d                	push   $0x7d
f011042e:	68 de 7d 13 f0       	push   $0xf0137dde
f0110433:	e8 6e fd fe ff       	call   f01001a6 <_panic>
	}

	//Case 4: Check clearing MORE THAN ONE permission
	va = 0xEF800000;
f0110438:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	permissions_to_set = 0;
f011043f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	permissions_to_clear = PERM_MODIFIED|PERM_USER;
f0110446:	c7 45 ec 44 00 00 00 	movl   $0x44,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f011044d:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110452:	ff 75 ec             	pushl  -0x14(%ebp)
f0110455:	ff 75 f0             	pushl  -0x10(%ebp)
f0110458:	ff 75 f4             	pushl  -0xc(%ebp)
f011045b:	50                   	push   %eax
f011045c:	e8 53 70 ff ff       	call   f01074b4 <pt_set_page_permissions>
f0110461:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110464:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110469:	ff 75 ec             	pushl  -0x14(%ebp)
f011046c:	ff 75 f0             	pushl  -0x10(%ebp)
f011046f:	ff 75 f4             	pushl  -0xc(%ebp)
f0110472:	50                   	push   %eax
f0110473:	e8 4a 4f 00 00       	call   f01153c2 <CP>
f0110478:	83 c4 10             	add    $0x10,%esp
f011047b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f011047e:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f0110482:	74 17                	je     f011049b <test_pt_set_page_permissions+0x1e9>
	{
		panic("[EVAL] #5 Clear Permission Failed.\n");
f0110484:	83 ec 04             	sub    $0x4,%esp
f0110487:	68 68 7e 13 f0       	push   $0xf0137e68
f011048c:	68 89 00 00 00       	push   $0x89
f0110491:	68 de 7d 13 f0       	push   $0xf0137dde
f0110496:	e8 0b fd fe ff       	call   f01001a6 <_panic>
	}

	//Case 5: Check settiing & clearing MORE THAN ONE permission together
	va = 0xF0001000;
f011049b:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	permissions_to_set = PERM_USER|PERM_BUFFERED;
f01104a2:	c7 45 f0 04 02 00 00 	movl   $0x204,-0x10(%ebp)
	permissions_to_clear = PERM_WRITEABLE|PERM_USED|PERM_MODIFIED;
f01104a9:	c7 45 ec 62 00 00 00 	movl   $0x62,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01104b0:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01104b5:	ff 75 ec             	pushl  -0x14(%ebp)
f01104b8:	ff 75 f0             	pushl  -0x10(%ebp)
f01104bb:	ff 75 f4             	pushl  -0xc(%ebp)
f01104be:	50                   	push   %eax
f01104bf:	e8 f0 6f ff ff       	call   f01074b4 <pt_set_page_permissions>
f01104c4:	83 c4 10             	add    $0x10,%esp

	ret = CP(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f01104c7:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01104cc:	ff 75 ec             	pushl  -0x14(%ebp)
f01104cf:	ff 75 f0             	pushl  -0x10(%ebp)
f01104d2:	ff 75 f4             	pushl  -0xc(%ebp)
f01104d5:	50                   	push   %eax
f01104d6:	e8 e7 4e 00 00       	call   f01153c2 <CP>
f01104db:	83 c4 10             	add    $0x10,%esp
f01104de:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (ret != 1)
f01104e1:	83 7d e8 01          	cmpl   $0x1,-0x18(%ebp)
f01104e5:	74 17                	je     f01104fe <test_pt_set_page_permissions+0x24c>
	{
		panic("[EVAL] #6 Set & Clear Permission Failed.\n");
f01104e7:	83 ec 04             	sub    $0x4,%esp
f01104ea:	68 8c 7e 13 f0       	push   $0xf0137e8c
f01104ef:	68 95 00 00 00       	push   $0x95
f01104f4:	68 de 7d 13 f0       	push   $0xf0137dde
f01104f9:	e8 a8 fc fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test pt_set&clear_page_permissions completed successfully.\n");
f01104fe:	83 ec 0c             	sub    $0xc,%esp
f0110501:	68 b8 7e 13 f0       	push   $0xf0137eb8
f0110506:	e8 22 07 ff ff       	call   f0100c2d <cprintf>
f011050b:	83 c4 10             	add    $0x10,%esp
	return 0;
f011050e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110513:	c9                   	leave  
f0110514:	c3                   	ret    

f0110515 <test_pt_set_page_permissions_invalid_va>:

int test_pt_set_page_permissions_invalid_va()
{
f0110515:	55                   	push   %ebp
f0110516:	89 e5                	mov    %esp,%ebp
f0110518:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x0;
f011051b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 permissions_to_set = PERM_PRESENT;
f0110522:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	uint32 permissions_to_clear = 0;
f0110529:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	pt_set_page_permissions(ptr_page_directory, va, permissions_to_set, permissions_to_clear);
f0110530:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110535:	ff 75 ec             	pushl  -0x14(%ebp)
f0110538:	ff 75 f0             	pushl  -0x10(%ebp)
f011053b:	ff 75 f4             	pushl  -0xc(%ebp)
f011053e:	50                   	push   %eax
f011053f:	e8 70 6f ff ff       	call   f01074b4 <pt_set_page_permissions>
f0110544:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling setting permissions of an invalid virtual address with non existing page table.");
f0110547:	83 ec 04             	sub    $0x4,%esp
f011054a:	68 08 7f 13 f0       	push   $0xf0137f08
f011054f:	68 a2 00 00 00       	push   $0xa2
f0110554:	68 de 7d 13 f0       	push   $0xf0137dde
f0110559:	e8 48 fc fe ff       	call   f01001a6 <_panic>

f011055e <test_pt_get_page_permissions>:

//=====================================
// 2) TEST GET PAGE PERMISSIONS:
//=====================================
int test_pt_get_page_permissions()
{
f011055e:	55                   	push   %ebp
f011055f:	89 e5                	mov    %esp,%ebp
f0110561:	83 ec 18             	sub    $0x18,%esp
	//Case 1: Check getting a permission of a non existing VA with NO table
	uint32 va = 0xeebfe000;
f0110564:	c7 45 f4 00 e0 bf ee 	movl   $0xeebfe000,-0xc(%ebp)
	int ret = pt_get_page_permissions(ptr_page_directory, va);
f011056b:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110570:	83 ec 08             	sub    $0x8,%esp
f0110573:	ff 75 f4             	pushl  -0xc(%ebp)
f0110576:	50                   	push   %eax
f0110577:	e8 ed 6f ff ff       	call   f0107569 <pt_get_page_permissions>
f011057c:	83 c4 10             	add    $0x10,%esp
f011057f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != -1)
f0110582:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)
f0110586:	74 17                	je     f011059f <test_pt_get_page_permissions+0x41>
	{
		panic("[EVAL] #1 Get Permission Failed.\n");
f0110588:	83 ec 04             	sub    $0x4,%esp
f011058b:	68 a4 7f 13 f0       	push   $0xf0137fa4
f0110590:	68 b0 00 00 00       	push   $0xb0
f0110595:	68 de 7d 13 f0       	push   $0xf0137dde
f011059a:	e8 07 fc fe ff       	call   f01001a6 <_panic>
	}

	//Case 2: Check getting a permission of a non existing VA with an existing table
	va = 0xEF800000;
f011059f:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01105a6:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01105ab:	83 ec 08             	sub    $0x8,%esp
f01105ae:	ff 75 f4             	pushl  -0xc(%ebp)
f01105b1:	50                   	push   %eax
f01105b2:	e8 b2 6f ff ff       	call   f0107569 <pt_get_page_permissions>
f01105b7:	83 c4 10             	add    $0x10,%esp
f01105ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 0)
f01105bd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01105c1:	74 17                	je     f01105da <test_pt_get_page_permissions+0x7c>
	{
		panic("[EVAL] #2 Get Permission Failed.\n");
f01105c3:	83 ec 04             	sub    $0x4,%esp
f01105c6:	68 c8 7f 13 f0       	push   $0xf0137fc8
f01105cb:	68 b8 00 00 00       	push   $0xb8
f01105d0:	68 de 7d 13 f0       	push   $0xf0137dde
f01105d5:	e8 cc fb fe ff       	call   f01001a6 <_panic>
	}

	//Case 3: Check getting a permission of an existing VA with an existing table
	va = 0xf0000000;
f01105da:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f01105e1:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01105e6:	83 ec 08             	sub    $0x8,%esp
f01105e9:	ff 75 f4             	pushl  -0xc(%ebp)
f01105ec:	50                   	push   %eax
f01105ed:	e8 77 6f ff ff       	call   f0107569 <pt_get_page_permissions>
f01105f2:	83 c4 10             	add    $0x10,%esp
f01105f5:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f01105f8:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f01105fc:	74 17                	je     f0110615 <test_pt_get_page_permissions+0xb7>
	{
		panic("[EVAL] #3 Get Permission Failed.\n");
f01105fe:	83 ec 04             	sub    $0x4,%esp
f0110601:	68 ec 7f 13 f0       	push   $0xf0137fec
f0110606:	68 c0 00 00 00       	push   $0xc0
f011060b:	68 de 7d 13 f0       	push   $0xf0137dde
f0110610:	e8 91 fb fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF1000000;
f0110615:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f011061c:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110621:	83 ec 08             	sub    $0x8,%esp
f0110624:	ff 75 f4             	pushl  -0xc(%ebp)
f0110627:	50                   	push   %eax
f0110628:	e8 3c 6f ff ff       	call   f0107569 <pt_get_page_permissions>
f011062d:	83 c4 10             	add    $0x10,%esp
f0110630:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 3)
f0110633:	83 7d f0 03          	cmpl   $0x3,-0x10(%ebp)
f0110637:	74 17                	je     f0110650 <test_pt_get_page_permissions+0xf2>
	{
		panic("[EVAL] #4 Get Permission Failed.\n");
f0110639:	83 ec 04             	sub    $0x4,%esp
f011063c:	68 10 80 13 f0       	push   $0xf0138010
f0110641:	68 c7 00 00 00       	push   $0xc7
f0110646:	68 de 7d 13 f0       	push   $0xf0137dde
f011064b:	e8 56 fb fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0001000;
f0110650:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	ret = pt_get_page_permissions(ptr_page_directory, va);
f0110657:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f011065c:	83 ec 08             	sub    $0x8,%esp
f011065f:	ff 75 f4             	pushl  -0xc(%ebp)
f0110662:	50                   	push   %eax
f0110663:	e8 01 6f ff ff       	call   f0107569 <pt_get_page_permissions>
f0110668:	83 c4 10             	add    $0x10,%esp
f011066b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 99)
f011066e:	83 7d f0 63          	cmpl   $0x63,-0x10(%ebp)
f0110672:	74 17                	je     f011068b <test_pt_get_page_permissions+0x12d>
	{
		panic("[EVAL] #5 Get Permission Failed.\n");
f0110674:	83 ec 04             	sub    $0x4,%esp
f0110677:	68 34 80 13 f0       	push   $0xf0138034
f011067c:	68 ce 00 00 00       	push   $0xce
f0110681:	68 de 7d 13 f0       	push   $0xf0137dde
f0110686:	e8 1b fb fe ff       	call   f01001a6 <_panic>
	}
	cprintf("Congratulations!! test pt_get_page_permissions completed successfully.\n");
f011068b:	83 ec 0c             	sub    $0xc,%esp
f011068e:	68 58 80 13 f0       	push   $0xf0138058
f0110693:	e8 95 05 ff ff       	call   f0100c2d <cprintf>
f0110698:	83 c4 10             	add    $0x10,%esp
	return 0;
f011069b:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01106a0:	c9                   	leave  
f01106a1:	c3                   	ret    

f01106a2 <test_pt_clear_page_table_entry>:

//=====================================
// 3) TEST CLEAR PAGE TABLE ENTRY:
//=====================================
int test_pt_clear_page_table_entry()
{
f01106a2:	55                   	push   %ebp
f01106a3:	89 e5                	mov    %esp,%ebp
f01106a5:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0xF1000000;
f01106a8:	c7 45 f4 00 00 00 f1 	movl   $0xf1000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01106af:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01106b4:	83 ec 08             	sub    $0x8,%esp
f01106b7:	ff 75 f4             	pushl  -0xc(%ebp)
f01106ba:	50                   	push   %eax
f01106bb:	e8 07 6f ff ff       	call   f01075c7 <pt_clear_page_table_entry>
f01106c0:	83 c4 10             	add    $0x10,%esp
	int ret = CE(ptr_page_directory, va);
f01106c3:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01106c8:	83 ec 08             	sub    $0x8,%esp
f01106cb:	ff 75 f4             	pushl  -0xc(%ebp)
f01106ce:	50                   	push   %eax
f01106cf:	e8 4a 4c 00 00       	call   f011531e <CE>
f01106d4:	83 c4 10             	add    $0x10,%esp
f01106d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01106da:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01106de:	74 17                	je     f01106f7 <test_pt_clear_page_table_entry+0x55>
	{
		panic("[EVAL] #1 Clear Page Table Entry Failed.\n");
f01106e0:	83 ec 04             	sub    $0x4,%esp
f01106e3:	68 a0 80 13 f0       	push   $0xf01380a0
f01106e8:	68 de 00 00 00       	push   $0xde
f01106ed:	68 de 7d 13 f0       	push   $0xf0137dde
f01106f2:	e8 af fa fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0001000;
f01106f7:	c7 45 f4 00 10 00 f0 	movl   $0xf0001000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f01106fe:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110703:	83 ec 08             	sub    $0x8,%esp
f0110706:	ff 75 f4             	pushl  -0xc(%ebp)
f0110709:	50                   	push   %eax
f011070a:	e8 b8 6e ff ff       	call   f01075c7 <pt_clear_page_table_entry>
f011070f:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0110712:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110717:	83 ec 08             	sub    $0x8,%esp
f011071a:	ff 75 f4             	pushl  -0xc(%ebp)
f011071d:	50                   	push   %eax
f011071e:	e8 fb 4b 00 00       	call   f011531e <CE>
f0110723:	83 c4 10             	add    $0x10,%esp
f0110726:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110729:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011072d:	74 17                	je     f0110746 <test_pt_clear_page_table_entry+0xa4>
	{
		panic("[EVAL] #2 Clear Page Table Entry Failed.\n");
f011072f:	83 ec 04             	sub    $0x4,%esp
f0110732:	68 cc 80 13 f0       	push   $0xf01380cc
f0110737:	68 e6 00 00 00       	push   $0xe6
f011073c:	68 de 7d 13 f0       	push   $0xf0137dde
f0110741:	e8 60 fa fe ff       	call   f01001a6 <_panic>
	}

	va = 0xEF800000;
f0110746:	c7 45 f4 00 00 80 ef 	movl   $0xef800000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011074d:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110752:	83 ec 08             	sub    $0x8,%esp
f0110755:	ff 75 f4             	pushl  -0xc(%ebp)
f0110758:	50                   	push   %eax
f0110759:	e8 69 6e ff ff       	call   f01075c7 <pt_clear_page_table_entry>
f011075e:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f0110761:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110766:	83 ec 08             	sub    $0x8,%esp
f0110769:	ff 75 f4             	pushl  -0xc(%ebp)
f011076c:	50                   	push   %eax
f011076d:	e8 ac 4b 00 00       	call   f011531e <CE>
f0110772:	83 c4 10             	add    $0x10,%esp
f0110775:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f0110778:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f011077c:	74 17                	je     f0110795 <test_pt_clear_page_table_entry+0xf3>
	{
		panic("[EVAL] #3 Clear Page Table Entry Failed.\n");
f011077e:	83 ec 04             	sub    $0x4,%esp
f0110781:	68 f8 80 13 f0       	push   $0xf01380f8
f0110786:	68 ee 00 00 00       	push   $0xee
f011078b:	68 de 7d 13 f0       	push   $0xf0137dde
f0110790:	e8 11 fa fe ff       	call   f01001a6 <_panic>
	}

	va = 0xF0000000;
f0110795:	c7 45 f4 00 00 00 f0 	movl   $0xf0000000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f011079c:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01107a1:	83 ec 08             	sub    $0x8,%esp
f01107a4:	ff 75 f4             	pushl  -0xc(%ebp)
f01107a7:	50                   	push   %eax
f01107a8:	e8 1a 6e ff ff       	call   f01075c7 <pt_clear_page_table_entry>
f01107ad:	83 c4 10             	add    $0x10,%esp
	ret = CE(ptr_page_directory, va);
f01107b0:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01107b5:	83 ec 08             	sub    $0x8,%esp
f01107b8:	ff 75 f4             	pushl  -0xc(%ebp)
f01107bb:	50                   	push   %eax
f01107bc:	e8 5d 4b 00 00       	call   f011531e <CE>
f01107c1:	83 c4 10             	add    $0x10,%esp
f01107c4:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (ret != 1)
f01107c7:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f01107cb:	74 17                	je     f01107e4 <test_pt_clear_page_table_entry+0x142>
	{
		panic("[EVAL] #4 Clear Page Table Entry Failed.\n");
f01107cd:	83 ec 04             	sub    $0x4,%esp
f01107d0:	68 24 81 13 f0       	push   $0xf0138124
f01107d5:	68 f6 00 00 00       	push   $0xf6
f01107da:	68 de 7d 13 f0       	push   $0xf0137dde
f01107df:	e8 c2 f9 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test pt_clear_page_table_entry completed successfully.\n");
f01107e4:	83 ec 0c             	sub    $0xc,%esp
f01107e7:	68 50 81 13 f0       	push   $0xf0138150
f01107ec:	e8 3c 04 ff ff       	call   f0100c2d <cprintf>
f01107f1:	83 c4 10             	add    $0x10,%esp
	return 0;
f01107f4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01107f9:	c9                   	leave  
f01107fa:	c3                   	ret    

f01107fb <test_pt_clear_page_table_entry_invalid_va>:

int test_pt_clear_page_table_entry_invalid_va()
{
f01107fb:	55                   	push   %ebp
f01107fc:	89 e5                	mov    %esp,%ebp
f01107fe:	83 ec 18             	sub    $0x18,%esp
	uint32 va = 0x1000;
f0110801:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
	pt_clear_page_table_entry(ptr_page_directory, va);
f0110808:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f011080d:	83 ec 08             	sub    $0x8,%esp
f0110810:	ff 75 f4             	pushl  -0xc(%ebp)
f0110813:	50                   	push   %eax
f0110814:	e8 ae 6d ff ff       	call   f01075c7 <pt_clear_page_table_entry>
f0110819:	83 c4 10             	add    $0x10,%esp
	panic("WRONG PANIC - This test shall panic with your error message. Check handling clearing the entry of an invalid virtual address non existing page table.");
f011081c:	83 ec 04             	sub    $0x4,%esp
f011081f:	68 9c 81 13 f0       	push   $0xf013819c
f0110824:	68 01 01 00 00       	push   $0x101
f0110829:	68 de 7d 13 f0       	push   $0xf0137dde
f011082e:	e8 73 f9 fe ff       	call   f01001a6 <_panic>

f0110833 <test_virtual_to_physical>:

//=====================================
// 4) TEST CONVERTING VA 2 PA:
//=====================================
int test_virtual_to_physical()
{
f0110833:	55                   	push   %ebp
f0110834:	89 e5                	mov    %esp,%ebp
f0110836:	57                   	push   %edi
f0110837:	56                   	push   %esi
f0110838:	53                   	push   %ebx
f0110839:	81 ec ac 01 00 00    	sub    $0x1ac,%esp
	int kilo = 1024 ;
f011083f:	c7 45 e4 00 04 00 00 	movl   $0x400,-0x1c(%ebp)
	int mega = 1024*1024 ;
f0110846:	c7 45 e0 00 00 10 00 	movl   $0x100000,-0x20(%ebp)
	uint32 va;
	ClearUserSpace(ptr_page_directory);
f011084d:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110852:	83 ec 0c             	sub    $0xc,%esp
f0110855:	50                   	push   %eax
f0110856:	e8 c4 4c 00 00       	call   f011551f <ClearUserSpace>
f011085b:	83 c4 10             	add    $0x10,%esp

	//============================
	//Case 1: Check getting pa of a va with NO table
	va = 0xeebfe000;
f011085e:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	int pa = virtual_to_physical(ptr_page_directory, va);
f0110865:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f011086a:	83 ec 08             	sub    $0x8,%esp
f011086d:	ff 75 dc             	pushl  -0x24(%ebp)
f0110870:	50                   	push   %eax
f0110871:	e8 bd 6d ff ff       	call   f0107633 <virtual_to_physical>
f0110876:	83 c4 10             	add    $0x10,%esp
f0110879:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %d\n", va, CA(ptr_page_directory, va), pa);
	if(pa != -1)
f011087c:	83 7d d8 ff          	cmpl   $0xffffffff,-0x28(%ebp)
f0110880:	74 17                	je     f0110899 <test_virtual_to_physical+0x66>
		panic("[EVAL] #1 Test of virtual_to_physical Entry Failed.\n");
f0110882:	83 ec 04             	sub    $0x4,%esp
f0110885:	68 34 82 13 f0       	push   $0xf0138234
f011088a:	68 16 01 00 00       	push   $0x116
f011088f:	68 de 7d 13 f0       	push   $0xf0137dde
f0110894:	e8 0d f9 fe ff       	call   f01001a6 <_panic>

	//============================
	//Case 2: Check getting pa of a va with a table
	va = 0xf0000000;
f0110899:	c7 45 dc 00 00 00 f0 	movl   $0xf0000000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01108a0:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01108a5:	83 ec 08             	sub    $0x8,%esp
f01108a8:	ff 75 dc             	pushl  -0x24(%ebp)
f01108ab:	50                   	push   %eax
f01108ac:	e8 82 6d ff ff       	call   f0107633 <virtual_to_physical>
f01108b1:	83 c4 10             	add    $0x10,%esp
f01108b4:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01108b7:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01108bc:	83 ec 08             	sub    $0x8,%esp
f01108bf:	ff 75 dc             	pushl  -0x24(%ebp)
f01108c2:	50                   	push   %eax
f01108c3:	e8 bd 49 00 00       	call   f0115285 <CA>
f01108c8:	83 c4 10             	add    $0x10,%esp
f01108cb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01108ce:	74 17                	je     f01108e7 <test_virtual_to_physical+0xb4>
		panic("[EVAL] #2 Test of virtual_to_physical Entry Failed.\n");
f01108d0:	83 ec 04             	sub    $0x4,%esp
f01108d3:	68 6c 82 13 f0       	push   $0xf013826c
f01108d8:	68 1f 01 00 00       	push   $0x11f
f01108dd:	68 de 7d 13 f0       	push   $0xf0137dde
f01108e2:	e8 bf f8 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap1[100] = "ap 0x2800000";execute_command(ap1);
f01108e7:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f01108ed:	bb 38 84 13 f0       	mov    $0xf0138438,%ebx
f01108f2:	ba 0d 00 00 00       	mov    $0xd,%edx
f01108f7:	89 c7                	mov    %eax,%edi
f01108f9:	89 de                	mov    %ebx,%esi
f01108fb:	89 d1                	mov    %edx,%ecx
f01108fd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01108ff:	8d 55 81             	lea    -0x7f(%ebp),%edx
f0110902:	b9 57 00 00 00       	mov    $0x57,%ecx
f0110907:	b0 00                	mov    $0x0,%al
f0110909:	89 d7                	mov    %edx,%edi
f011090b:	f3 aa                	rep stos %al,%es:(%edi)
f011090d:	83 ec 0c             	sub    $0xc,%esp
f0110910:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
f0110916:	50                   	push   %eax
f0110917:	e8 73 03 ff ff       	call   f0100c8f <execute_command>
f011091c:	83 c4 10             	add    $0x10,%esp
	va = 0x2800000;
f011091f:	c7 45 dc 00 00 80 02 	movl   $0x2800000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110926:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f011092b:	83 ec 08             	sub    $0x8,%esp
f011092e:	ff 75 dc             	pushl  -0x24(%ebp)
f0110931:	50                   	push   %eax
f0110932:	e8 fc 6c ff ff       	call   f0107633 <virtual_to_physical>
f0110937:	83 c4 10             	add    $0x10,%esp
f011093a:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f011093d:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110942:	83 ec 08             	sub    $0x8,%esp
f0110945:	ff 75 dc             	pushl  -0x24(%ebp)
f0110948:	50                   	push   %eax
f0110949:	e8 37 49 00 00       	call   f0115285 <CA>
f011094e:	83 c4 10             	add    $0x10,%esp
f0110951:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110954:	74 17                	je     f011096d <test_virtual_to_physical+0x13a>
		panic("[EVAL] #3 Test of virtual_to_physical Entry Failed.\n");
f0110956:	83 ec 04             	sub    $0x4,%esp
f0110959:	68 a4 82 13 f0       	push   $0xf01382a4
f011095e:	68 28 01 00 00       	push   $0x128
f0110963:	68 de 7d 13 f0       	push   $0xf0137dde
f0110968:	e8 39 f8 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap2[100] = "ap 0x2801000";execute_command(ap2);
f011096d:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f0110973:	bb 9c 84 13 f0       	mov    $0xf013849c,%ebx
f0110978:	ba 0d 00 00 00       	mov    $0xd,%edx
f011097d:	89 c7                	mov    %eax,%edi
f011097f:	89 de                	mov    %ebx,%esi
f0110981:	89 d1                	mov    %edx,%ecx
f0110983:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110985:	8d 95 1d ff ff ff    	lea    -0xe3(%ebp),%edx
f011098b:	b9 57 00 00 00       	mov    $0x57,%ecx
f0110990:	b0 00                	mov    $0x0,%al
f0110992:	89 d7                	mov    %edx,%edi
f0110994:	f3 aa                	rep stos %al,%es:(%edi)
f0110996:	83 ec 0c             	sub    $0xc,%esp
f0110999:	8d 85 10 ff ff ff    	lea    -0xf0(%ebp),%eax
f011099f:	50                   	push   %eax
f01109a0:	e8 ea 02 ff ff       	call   f0100c8f <execute_command>
f01109a5:	83 c4 10             	add    $0x10,%esp
	va = 0x2801000;
f01109a8:	c7 45 dc 00 10 80 02 	movl   $0x2801000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f01109af:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01109b4:	83 ec 08             	sub    $0x8,%esp
f01109b7:	ff 75 dc             	pushl  -0x24(%ebp)
f01109ba:	50                   	push   %eax
f01109bb:	e8 73 6c ff ff       	call   f0107633 <virtual_to_physical>
f01109c0:	83 c4 10             	add    $0x10,%esp
f01109c3:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f01109c6:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f01109cb:	83 ec 08             	sub    $0x8,%esp
f01109ce:	ff 75 dc             	pushl  -0x24(%ebp)
f01109d1:	50                   	push   %eax
f01109d2:	e8 ae 48 00 00       	call   f0115285 <CA>
f01109d7:	83 c4 10             	add    $0x10,%esp
f01109da:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01109dd:	74 17                	je     f01109f6 <test_virtual_to_physical+0x1c3>
		panic("[EVAL] #4 Test of virtual_to_physical Entry Failed.\n");
f01109df:	83 ec 04             	sub    $0x4,%esp
f01109e2:	68 dc 82 13 f0       	push   $0xf01382dc
f01109e7:	68 31 01 00 00       	push   $0x131
f01109ec:	68 de 7d 13 f0       	push   $0xf0137dde
f01109f1:	e8 b0 f7 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap3[100] = "ap 0x2802000";execute_command(ap3);
f01109f6:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f01109fc:	bb 00 85 13 f0       	mov    $0xf0138500,%ebx
f0110a01:	ba 0d 00 00 00       	mov    $0xd,%edx
f0110a06:	89 c7                	mov    %eax,%edi
f0110a08:	89 de                	mov    %ebx,%esi
f0110a0a:	89 d1                	mov    %edx,%ecx
f0110a0c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110a0e:	8d 95 b9 fe ff ff    	lea    -0x147(%ebp),%edx
f0110a14:	b9 57 00 00 00       	mov    $0x57,%ecx
f0110a19:	b0 00                	mov    $0x0,%al
f0110a1b:	89 d7                	mov    %edx,%edi
f0110a1d:	f3 aa                	rep stos %al,%es:(%edi)
f0110a1f:	83 ec 0c             	sub    $0xc,%esp
f0110a22:	8d 85 ac fe ff ff    	lea    -0x154(%ebp),%eax
f0110a28:	50                   	push   %eax
f0110a29:	e8 61 02 ff ff       	call   f0100c8f <execute_command>
f0110a2e:	83 c4 10             	add    $0x10,%esp
	va = 0x2802000;
f0110a31:	c7 45 dc 00 20 80 02 	movl   $0x2802000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110a38:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110a3d:	83 ec 08             	sub    $0x8,%esp
f0110a40:	ff 75 dc             	pushl  -0x24(%ebp)
f0110a43:	50                   	push   %eax
f0110a44:	e8 ea 6b ff ff       	call   f0107633 <virtual_to_physical>
f0110a49:	83 c4 10             	add    $0x10,%esp
f0110a4c:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110a4f:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110a54:	83 ec 08             	sub    $0x8,%esp
f0110a57:	ff 75 dc             	pushl  -0x24(%ebp)
f0110a5a:	50                   	push   %eax
f0110a5b:	e8 25 48 00 00       	call   f0115285 <CA>
f0110a60:	83 c4 10             	add    $0x10,%esp
f0110a63:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110a66:	74 17                	je     f0110a7f <test_virtual_to_physical+0x24c>
		panic("[EVAL] #5 Test of virtual_to_physical Entry Failed.\n");
f0110a68:	83 ec 04             	sub    $0x4,%esp
f0110a6b:	68 14 83 13 f0       	push   $0xf0138314
f0110a70:	68 3a 01 00 00       	push   $0x13a
f0110a75:	68 de 7d 13 f0       	push   $0xf0137dde
f0110a7a:	e8 27 f7 fe ff       	call   f01001a6 <_panic>

	//============================
	va = 0xF0001000;
f0110a7f:	c7 45 dc 00 10 00 f0 	movl   $0xf0001000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110a86:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110a8b:	83 ec 08             	sub    $0x8,%esp
f0110a8e:	ff 75 dc             	pushl  -0x24(%ebp)
f0110a91:	50                   	push   %eax
f0110a92:	e8 9c 6b ff ff       	call   f0107633 <virtual_to_physical>
f0110a97:	83 c4 10             	add    $0x10,%esp
f0110a9a:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110a9d:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110aa2:	83 ec 08             	sub    $0x8,%esp
f0110aa5:	ff 75 dc             	pushl  -0x24(%ebp)
f0110aa8:	50                   	push   %eax
f0110aa9:	e8 d7 47 00 00       	call   f0115285 <CA>
f0110aae:	83 c4 10             	add    $0x10,%esp
f0110ab1:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110ab4:	74 17                	je     f0110acd <test_virtual_to_physical+0x29a>
		panic("[EVAL] #6 Test of virtual_to_physical Entry Failed.\n");
f0110ab6:	83 ec 04             	sub    $0x4,%esp
f0110ab9:	68 4c 83 13 f0       	push   $0xf013834c
f0110abe:	68 42 01 00 00       	push   $0x142
f0110ac3:	68 de 7d 13 f0       	push   $0xf0137dde
f0110ac8:	e8 d9 f6 fe ff       	call   f01001a6 <_panic>

	//============================
	va = 0xF0001005;
f0110acd:	c7 45 dc 05 10 00 f0 	movl   $0xf0001005,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110ad4:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110ad9:	83 ec 08             	sub    $0x8,%esp
f0110adc:	ff 75 dc             	pushl  -0x24(%ebp)
f0110adf:	50                   	push   %eax
f0110ae0:	e8 4e 6b ff ff       	call   f0107633 <virtual_to_physical>
f0110ae5:	83 c4 10             	add    $0x10,%esp
f0110ae8:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110aeb:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110af0:	83 ec 08             	sub    $0x8,%esp
f0110af3:	ff 75 dc             	pushl  -0x24(%ebp)
f0110af6:	50                   	push   %eax
f0110af7:	e8 89 47 00 00       	call   f0115285 <CA>
f0110afc:	83 c4 10             	add    $0x10,%esp
f0110aff:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110b02:	74 17                	je     f0110b1b <test_virtual_to_physical+0x2e8>
		panic("[EVAL] #7 Test of virtual_to_physical Entry Failed.\n");
f0110b04:	83 ec 04             	sub    $0x4,%esp
f0110b07:	68 84 83 13 f0       	push   $0xf0138384
f0110b0c:	68 4a 01 00 00       	push   $0x14a
f0110b11:	68 de 7d 13 f0       	push   $0xf0137dde
f0110b16:	e8 8b f6 fe ff       	call   f01001a6 <_panic>

	//============================
	char ap4[100] = "ap 0xeebfe000";execute_command(ap4);
f0110b1b:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0110b21:	bb 64 85 13 f0       	mov    $0xf0138564,%ebx
f0110b26:	ba 0e 00 00 00       	mov    $0xe,%edx
f0110b2b:	89 c7                	mov    %eax,%edi
f0110b2d:	89 de                	mov    %ebx,%esi
f0110b2f:	89 d1                	mov    %edx,%ecx
f0110b31:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110b33:	8d 95 56 fe ff ff    	lea    -0x1aa(%ebp),%edx
f0110b39:	b9 56 00 00 00       	mov    $0x56,%ecx
f0110b3e:	b0 00                	mov    $0x0,%al
f0110b40:	89 d7                	mov    %edx,%edi
f0110b42:	f3 aa                	rep stos %al,%es:(%edi)
f0110b44:	83 ec 0c             	sub    $0xc,%esp
f0110b47:	8d 85 48 fe ff ff    	lea    -0x1b8(%ebp),%eax
f0110b4d:	50                   	push   %eax
f0110b4e:	e8 3c 01 ff ff       	call   f0100c8f <execute_command>
f0110b53:	83 c4 10             	add    $0x10,%esp
	va = 0xeebfe000;
f0110b56:	c7 45 dc 00 e0 bf ee 	movl   $0xeebfe000,-0x24(%ebp)
	pa = virtual_to_physical(ptr_page_directory, va);
f0110b5d:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110b62:	83 ec 08             	sub    $0x8,%esp
f0110b65:	ff 75 dc             	pushl  -0x24(%ebp)
f0110b68:	50                   	push   %eax
f0110b69:	e8 c5 6a ff ff       	call   f0107633 <virtual_to_physical>
f0110b6e:	83 c4 10             	add    $0x10,%esp
f0110b71:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//cprintf("va = %x, pa = %x, ret pa = %x\n", va, CA(ptr_page_directory, va), pa);
	if(pa != CA(ptr_page_directory, va))
f0110b74:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0110b79:	83 ec 08             	sub    $0x8,%esp
f0110b7c:	ff 75 dc             	pushl  -0x24(%ebp)
f0110b7f:	50                   	push   %eax
f0110b80:	e8 00 47 00 00       	call   f0115285 <CA>
f0110b85:	83 c4 10             	add    $0x10,%esp
f0110b88:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0110b8b:	74 17                	je     f0110ba4 <test_virtual_to_physical+0x371>
		panic("[EVAL] #8 Test of virtual_to_physical Entry Failed.\n");
f0110b8d:	83 ec 04             	sub    $0x4,%esp
f0110b90:	68 bc 83 13 f0       	push   $0xf01383bc
f0110b95:	68 53 01 00 00       	push   $0x153
f0110b9a:	68 de 7d 13 f0       	push   $0xf0137dde
f0110b9f:	e8 02 f6 fe ff       	call   f01001a6 <_panic>

	//============================
	cprintf("Congratulations!! test virtual_to_physical completed successfully.\n");
f0110ba4:	83 ec 0c             	sub    $0xc,%esp
f0110ba7:	68 f4 83 13 f0       	push   $0xf01383f4
f0110bac:	e8 7c 00 ff ff       	call   f0100c2d <cprintf>
f0110bb1:	83 c4 10             	add    $0x10,%esp

	return 0;
f0110bb4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0110bb9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0110bbc:	5b                   	pop    %ebx
f0110bbd:	5e                   	pop    %esi
f0110bbe:	5f                   	pop    %edi
f0110bbf:	5d                   	pop    %ebp
f0110bc0:	c3                   	ret    

f0110bc1 <test_cut_paste_pages>:

//===============================
// 1) TEST CUT-PASTE PAGES:
//===============================
int test_cut_paste_pages()
{
f0110bc1:	55                   	push   %ebp
f0110bc2:	89 e5                	mov    %esp,%ebp
f0110bc4:	57                   	push   %edi
f0110bc5:	56                   	push   %esi
f0110bc6:	53                   	push   %ebx
f0110bc7:	81 ec ec 03 00 00    	sub    $0x3ec,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0110bcd:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0110bd3:	bb 78 88 13 f0       	mov    $0xf0138878,%ebx
f0110bd8:	ba 0f 00 00 00       	mov    $0xf,%edx
f0110bdd:	89 c7                	mov    %eax,%edi
f0110bdf:	89 de                	mov    %ebx,%esi
f0110be1:	89 d1                	mov    %edx,%ecx
f0110be3:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0110be5:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f0110beb:	b9 23 00 00 00       	mov    $0x23,%ecx
f0110bf0:	b0 00                	mov    $0x0,%al
f0110bf2:	89 d7                	mov    %edx,%edi
f0110bf4:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0110bf6:	6a 00                	push   $0x0
f0110bf8:	6a 0a                	push   $0xa
f0110bfa:	6a 14                	push   $0x14
f0110bfc:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0110c02:	50                   	push   %eax
f0110c03:	e8 7c 77 ff ff       	call   f0108384 <env_create>
f0110c08:	83 c4 10             	add    $0x10,%esp
f0110c0b:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0110c0e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110c11:	8b 40 5c             	mov    0x5c(%eax),%eax
f0110c14:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0110c17:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110c1a:	8b 40 60             	mov    0x60(%eax),%eax
f0110c1d:	89 45 90             	mov    %eax,-0x70(%ebp)
}

static __inline void
lcr3(uint32 val)
{
	__asm __volatile("movl %0,%%cr3" : : "r" (val));
f0110c20:	8b 45 90             	mov    -0x70(%ebp),%eax
f0110c23:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0110c26:	c7 85 4a ff ff ff 61 	movl   $0x20707561,-0xb6(%ebp)
f0110c2d:	75 70 20 
f0110c30:	c7 85 4e ff ff ff 00 	movl   $0x0,-0xb2(%ebp)
f0110c37:	00 00 00 
f0110c3a:	8d 95 52 ff ff ff    	lea    -0xae(%ebp),%edx
f0110c40:	b9 03 00 00 00       	mov    $0x3,%ecx
f0110c45:	b8 00 00 00 00       	mov    $0x0,%eax
f0110c4a:	89 d7                	mov    %edx,%edi
f0110c4c:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0110c4e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0110c51:	8b 40 4c             	mov    0x4c(%eax),%eax
f0110c54:	83 ec 08             	sub    $0x8,%esp
f0110c57:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0110c5d:	52                   	push   %edx
f0110c5e:	50                   	push   %eax
f0110c5f:	e8 7f fc 01 00       	call   f01308e3 <ltostr>
f0110c64:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0110c67:	83 ec 04             	sub    $0x4,%esp
f0110c6a:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110c70:	50                   	push   %eax
f0110c71:	8d 85 36 ff ff ff    	lea    -0xca(%ebp),%eax
f0110c77:	50                   	push   %eax
f0110c78:	8d 85 4a ff ff ff    	lea    -0xb6(%ebp),%eax
f0110c7e:	50                   	push   %eax
f0110c7f:	e8 57 fd 01 00       	call   f01309db <strcconcat>
f0110c84:	83 c4 10             	add    $0x10,%esp
	//===================================================
	int numOfArgs = 0;
f0110c87:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6;
	int kilo = 1024 ;
f0110c8e:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f0110c95:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)

	ClearUserSpace(proc_directory);
f0110c9c:	83 ec 0c             	sub    $0xc,%esp
f0110c9f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110ca2:	e8 78 48 00 00       	call   f011551f <ClearUserSpace>
f0110ca7:	83 c4 10             	add    $0x10,%esp

	char ap1[100] ;strcconcat(aup_cmd, " 0x2800000", ap1); execute_command(ap1);
f0110caa:	83 ec 04             	sub    $0x4,%esp
f0110cad:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0110cb3:	50                   	push   %eax
f0110cb4:	68 c8 85 13 f0       	push   $0xf01385c8
f0110cb9:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110cbf:	50                   	push   %eax
f0110cc0:	e8 16 fd 01 00       	call   f01309db <strcconcat>
f0110cc5:	83 c4 10             	add    $0x10,%esp
f0110cc8:	83 ec 0c             	sub    $0xc,%esp
f0110ccb:	8d 85 60 fe ff ff    	lea    -0x1a0(%ebp),%eax
f0110cd1:	50                   	push   %eax
f0110cd2:	e8 b8 ff fe ff       	call   f0100c8f <execute_command>
f0110cd7:	83 c4 10             	add    $0x10,%esp
	char ap2[100] ;strcconcat(aup_cmd, " 0x2801000", ap2); execute_command(ap2);
f0110cda:	83 ec 04             	sub    $0x4,%esp
f0110cdd:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0110ce3:	50                   	push   %eax
f0110ce4:	68 d3 85 13 f0       	push   $0xf01385d3
f0110ce9:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110cef:	50                   	push   %eax
f0110cf0:	e8 e6 fc 01 00       	call   f01309db <strcconcat>
f0110cf5:	83 c4 10             	add    $0x10,%esp
f0110cf8:	83 ec 0c             	sub    $0xc,%esp
f0110cfb:	8d 85 fc fd ff ff    	lea    -0x204(%ebp),%eax
f0110d01:	50                   	push   %eax
f0110d02:	e8 88 ff fe ff       	call   f0100c8f <execute_command>
f0110d07:	83 c4 10             	add    $0x10,%esp
	char ap3[100] ;strcconcat(aup_cmd, " 0x2802000", ap3); execute_command(ap3);
f0110d0a:	83 ec 04             	sub    $0x4,%esp
f0110d0d:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0110d13:	50                   	push   %eax
f0110d14:	68 de 85 13 f0       	push   $0xf01385de
f0110d19:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0110d1f:	50                   	push   %eax
f0110d20:	e8 b6 fc 01 00       	call   f01309db <strcconcat>
f0110d25:	83 c4 10             	add    $0x10,%esp
f0110d28:	83 ec 0c             	sub    $0xc,%esp
f0110d2b:	8d 85 98 fd ff ff    	lea    -0x268(%ebp),%eax
f0110d31:	50                   	push   %eax
f0110d32:	e8 58 ff fe ff       	call   f0100c8f <execute_command>
f0110d37:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x2800000; *ptr1 = 'a';
f0110d3a:	c7 45 c0 00 00 80 02 	movl   $0x2800000,-0x40(%ebp)
f0110d41:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d44:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x28017FF; *ptr1 = 'b';
f0110d47:	c7 45 c0 ff 17 80 02 	movl   $0x28017ff,-0x40(%ebp)
f0110d4e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d51:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x2802FFF; *ptr1 = 'c';
f0110d54:	c7 45 c0 ff 2f 80 02 	movl   $0x2802fff,-0x40(%ebp)
f0110d5b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d5e:	c6 00 63             	movb   $0x63,(%eax)

	uint32 perms = GP(proc_directory, (uint32)ptr1);
f0110d61:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110d64:	83 ec 08             	sub    $0x8,%esp
f0110d67:	50                   	push   %eax
f0110d68:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110d6b:	e8 16 47 00 00       	call   f0115486 <GP>
f0110d70:	83 c4 10             	add    $0x10,%esp
f0110d73:	89 45 bc             	mov    %eax,-0x44(%ebp)

	int eval = 0;
f0110d76:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	int correct = 1;
f0110d7d:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	int ff1 = sys_calculate_free_frames();
f0110d84:	e8 47 b3 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0110d89:	89 45 b8             	mov    %eax,-0x48(%ebp)

	/*=============================================*/
	/*PART I: Destination Pages Does NOT Exist 60% */
	/*=============================================*/
	cprintf("CASE I: Destination Pages Does NOT Exist [60%]\n") ;
f0110d8c:	83 ec 0c             	sub    $0xc,%esp
f0110d8f:	68 ec 85 13 f0       	push   $0xf01385ec
f0110d94:	e8 94 fe fe ff       	call   f0100c2d <cprintf>
f0110d99:	83 c4 10             	add    $0x10,%esp
	int ret = cut_paste_pages(proc_directory, 0x2800000, 0x2900000, 3) ;
f0110d9c:	6a 03                	push   $0x3
f0110d9e:	68 00 00 90 02       	push   $0x2900000
f0110da3:	68 00 00 80 02       	push   $0x2800000
f0110da8:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110dab:	e8 c1 72 ff ff       	call   f0108071 <cut_paste_pages>
f0110db0:	83 c4 10             	add    $0x10,%esp
f0110db3:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	int ff2 = sys_calculate_free_frames();
f0110db6:	e8 15 b3 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0110dbb:	89 45 b0             	mov    %eax,-0x50(%ebp)

	correct = 1 ;
f0110dbe:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	if (ret != 0 || ff1 != ff2)
f0110dc5:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0110dc9:	75 08                	jne    f0110dd3 <test_cut_paste_pages+0x212>
f0110dcb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110dce:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0110dd1:	74 2b                	je     f0110dfe <test_cut_paste_pages+0x23d>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0110dd3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110dd6:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110dd9:	83 ec 0c             	sub    $0xc,%esp
f0110ddc:	50                   	push   %eax
f0110ddd:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110de0:	68 1c 86 13 f0       	push   $0xf013861c
f0110de5:	68 91 01 00 00       	push   $0x191
f0110dea:	68 de 7d 13 f0       	push   $0xf0137dde
f0110def:	e8 3e f5 fe ff       	call   f0100332 <_warn>
f0110df4:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0110df7:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 5 ;
f0110dfe:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110e02:	74 04                	je     f0110e08 <test_cut_paste_pages+0x247>
f0110e04:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0110e08:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2800000, 0x2900000, 3*PAGE_SIZE, 1, perms, 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0110e0f:	83 ec 08             	sub    $0x8,%esp
f0110e12:	6a 00                	push   $0x0
f0110e14:	6a 01                	push   $0x1
f0110e16:	6a 00                	push   $0x0
f0110e18:	68 ff 0f 00 00       	push   $0xfff
f0110e1d:	ff 75 bc             	pushl  -0x44(%ebp)
f0110e20:	6a 01                	push   $0x1
f0110e22:	68 00 30 00 00       	push   $0x3000
f0110e27:	68 00 00 90 02       	push   $0x2900000
f0110e2c:	68 00 00 80 02       	push   $0x2800000
f0110e31:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110e34:	e8 1a 47 00 00       	call   f0115553 <CCP>
f0110e39:	83 c4 30             	add    $0x30,%esp
f0110e3c:	83 f8 01             	cmp    $0x1,%eax
f0110e3f:	74 21                	je     f0110e62 <test_cut_paste_pages+0x2a1>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f0110e41:	83 ec 04             	sub    $0x4,%esp
f0110e44:	68 70 86 13 f0       	push   $0xf0138670
f0110e49:	68 99 01 00 00       	push   $0x199
f0110e4e:	68 de 7d 13 f0       	push   $0xf0137dde
f0110e53:	e8 da f4 fe ff       	call   f0100332 <_warn>
f0110e58:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0110e5b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 15 ;
f0110e62:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110e66:	74 04                	je     f0110e6c <test_cut_paste_pages+0x2ab>
f0110e68:	83 45 e4 0f          	addl   $0xf,-0x1c(%ebp)
	correct = 1 ;
f0110e6c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2900000, 0) && CB(proc_directory, 0x2901000, 0) && CB(proc_directory, 0x2902000, 0))
f0110e73:	83 ec 04             	sub    $0x4,%esp
f0110e76:	6a 00                	push   $0x0
f0110e78:	68 00 00 90 02       	push   $0x2900000
f0110e7d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110e80:	e8 5f 41 00 00       	call   f0114fe4 <CB>
f0110e85:	83 c4 10             	add    $0x10,%esp
f0110e88:	85 c0                	test   %eax,%eax
f0110e8a:	0f 84 f6 00 00 00    	je     f0110f86 <test_cut_paste_pages+0x3c5>
f0110e90:	83 ec 04             	sub    $0x4,%esp
f0110e93:	6a 00                	push   $0x0
f0110e95:	68 00 10 90 02       	push   $0x2901000
f0110e9a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110e9d:	e8 42 41 00 00       	call   f0114fe4 <CB>
f0110ea2:	83 c4 10             	add    $0x10,%esp
f0110ea5:	85 c0                	test   %eax,%eax
f0110ea7:	0f 84 d9 00 00 00    	je     f0110f86 <test_cut_paste_pages+0x3c5>
f0110ead:	83 ec 04             	sub    $0x4,%esp
f0110eb0:	6a 00                	push   $0x0
f0110eb2:	68 00 20 90 02       	push   $0x2902000
f0110eb7:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110eba:	e8 25 41 00 00       	call   f0114fe4 <CB>
f0110ebf:	83 c4 10             	add    $0x10,%esp
f0110ec2:	85 c0                	test   %eax,%eax
f0110ec4:	0f 84 bc 00 00 00    	je     f0110f86 <test_cut_paste_pages+0x3c5>
	{
		ptr1 = (char*)0x2900000;
f0110eca:	c7 45 c0 00 00 90 02 	movl   $0x2900000,-0x40(%ebp)
		ptr2 = (char*)0x29017FF;
f0110ed1:	c7 45 ac ff 17 90 02 	movl   $0x29017ff,-0x54(%ebp)
		ptr3 = (char*)0x2902FFF;
f0110ed8:	c7 45 a8 ff 2f 90 02 	movl   $0x2902fff,-0x58(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'b' || (*ptr3) != 'c')
f0110edf:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0110ee2:	8a 00                	mov    (%eax),%al
f0110ee4:	3c 61                	cmp    $0x61,%al
f0110ee6:	75 12                	jne    f0110efa <test_cut_paste_pages+0x339>
f0110ee8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110eeb:	8a 00                	mov    (%eax),%al
f0110eed:	3c 62                	cmp    $0x62,%al
f0110eef:	75 09                	jne    f0110efa <test_cut_paste_pages+0x339>
f0110ef1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0110ef4:	8a 00                	mov    (%eax),%al
f0110ef6:	3c 63                	cmp    $0x63,%al
f0110ef8:	74 21                	je     f0110f1b <test_cut_paste_pages+0x35a>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0110efa:	83 ec 04             	sub    $0x4,%esp
f0110efd:	68 bc 86 13 f0       	push   $0xf01386bc
f0110f02:	68 a6 01 00 00       	push   $0x1a6
f0110f07:	68 de 7d 13 f0       	push   $0xf0137dde
f0110f0c:	e8 21 f4 fe ff       	call   f0100332 <_warn>
f0110f11:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0110f14:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0110f1b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110f1f:	74 04                	je     f0110f25 <test_cut_paste_pages+0x364>
f0110f21:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0110f25:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CB(proc_directory, 0x2901000, 1))
f0110f2c:	83 ec 04             	sub    $0x4,%esp
f0110f2f:	6a 01                	push   $0x1
f0110f31:	68 00 10 90 02       	push   $0x2901000
f0110f36:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110f39:	e8 a6 40 00 00       	call   f0114fe4 <CB>
f0110f3e:	83 c4 10             	add    $0x10,%esp
f0110f41:	85 c0                	test   %eax,%eax
f0110f43:	74 41                	je     f0110f86 <test_cut_paste_pages+0x3c5>
		{
			*ptr2 = 'y';
f0110f45:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110f48:	c6 00 79             	movb   $0x79,(%eax)
			if ((*ptr2) != 'y')
f0110f4b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0110f4e:	8a 00                	mov    (%eax),%al
f0110f50:	3c 79                	cmp    $0x79,%al
f0110f52:	74 21                	je     f0110f75 <test_cut_paste_pages+0x3b4>
			{
				warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0110f54:	83 ec 04             	sub    $0x4,%esp
f0110f57:	68 bc 86 13 f0       	push   $0xf01386bc
f0110f5c:	68 b1 01 00 00       	push   $0x1b1
f0110f61:	68 de 7d 13 f0       	push   $0xf0137dde
f0110f66:	e8 c7 f3 fe ff       	call   f0100332 <_warn>
f0110f6b:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0110f6e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f0110f75:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110f79:	74 04                	je     f0110f7f <test_cut_paste_pages+0x3be>
f0110f7b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0110f7f:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}


	ff1 = ff2 ;
f0110f86:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0110f89:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x2901000, 0x2BFF000, 2) ;
f0110f8c:	6a 02                	push   $0x2
f0110f8e:	68 00 f0 bf 02       	push   $0x2bff000
f0110f93:	68 00 10 90 02       	push   $0x2901000
f0110f98:	ff 75 d4             	pushl  -0x2c(%ebp)
f0110f9b:	e8 d1 70 ff ff       	call   f0108071 <cut_paste_pages>
f0110fa0:	83 c4 10             	add    $0x10,%esp
f0110fa3:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f0110fa6:	e8 25 b1 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0110fab:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != 0 || ff1 - ff2 != 1)
f0110fae:	83 7d b4 00          	cmpl   $0x0,-0x4c(%ebp)
f0110fb2:	75 0b                	jne    f0110fbf <test_cut_paste_pages+0x3fe>
f0110fb4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110fb7:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110fba:	83 f8 01             	cmp    $0x1,%eax
f0110fbd:	74 2b                	je     f0110fea <test_cut_paste_pages+0x429>
	{
		warn("[EVAL] cut_paste_pages: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, ff1 - ff2);
f0110fbf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0110fc2:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0110fc5:	83 ec 0c             	sub    $0xc,%esp
f0110fc8:	50                   	push   %eax
f0110fc9:	ff 75 b4             	pushl  -0x4c(%ebp)
f0110fcc:	68 1c 86 13 f0       	push   $0xf013861c
f0110fd1:	68 c2 01 00 00       	push   $0x1c2
f0110fd6:	68 de 7d 13 f0       	push   $0xf0137dde
f0110fdb:	e8 52 f3 fe ff       	call   f0100332 <_warn>
f0110fe0:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0110fe3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0110fea:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0110fee:	74 04                	je     f0110ff4 <test_cut_paste_pages+0x433>
f0110ff0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0110ff4:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CCP(proc_directory, 0x2901000, 0x2BFF000, 2*PAGE_SIZE, 1, perms , 0xFFF, 0, 0x001, CHK_CUT_PASTE) != 1)
f0110ffb:	83 ec 08             	sub    $0x8,%esp
f0110ffe:	6a 00                	push   $0x0
f0111000:	6a 01                	push   $0x1
f0111002:	6a 00                	push   $0x0
f0111004:	68 ff 0f 00 00       	push   $0xfff
f0111009:	ff 75 bc             	pushl  -0x44(%ebp)
f011100c:	6a 01                	push   $0x1
f011100e:	68 00 20 00 00       	push   $0x2000
f0111013:	68 00 f0 bf 02       	push   $0x2bff000
f0111018:	68 00 10 90 02       	push   $0x2901000
f011101d:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111020:	e8 2e 45 00 00       	call   f0115553 <CCP>
f0111025:	83 c4 30             	add    $0x30,%esp
f0111028:	83 f8 01             	cmp    $0x1,%eax
f011102b:	74 21                	je     f011104e <test_cut_paste_pages+0x48d>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f011102d:	83 ec 04             	sub    $0x4,%esp
f0111030:	68 70 86 13 f0       	push   $0xf0138670
f0111035:	68 ca 01 00 00       	push   $0x1ca
f011103a:	68 de 7d 13 f0       	push   $0xf0137dde
f011103f:	e8 ee f2 fe ff       	call   f0100332 <_warn>
f0111044:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111047:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f011104e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111052:	74 04                	je     f0111058 <test_cut_paste_pages+0x497>
f0111054:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111058:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (CB(proc_directory, 0x2BFF7FF, 0) && CB(proc_directory, 0x2C00FFF, 0))
f011105f:	83 ec 04             	sub    $0x4,%esp
f0111062:	6a 00                	push   $0x0
f0111064:	68 ff f7 bf 02       	push   $0x2bff7ff
f0111069:	ff 75 d4             	pushl  -0x2c(%ebp)
f011106c:	e8 73 3f 00 00       	call   f0114fe4 <CB>
f0111071:	83 c4 10             	add    $0x10,%esp
f0111074:	85 c0                	test   %eax,%eax
f0111076:	74 6b                	je     f01110e3 <test_cut_paste_pages+0x522>
f0111078:	83 ec 04             	sub    $0x4,%esp
f011107b:	6a 00                	push   $0x0
f011107d:	68 ff 0f c0 02       	push   $0x2c00fff
f0111082:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111085:	e8 5a 3f 00 00       	call   f0114fe4 <CB>
f011108a:	83 c4 10             	add    $0x10,%esp
f011108d:	85 c0                	test   %eax,%eax
f011108f:	74 52                	je     f01110e3 <test_cut_paste_pages+0x522>
	{
		ptr1 = (char*)0x2BFF7FF;
f0111091:	c7 45 c0 ff f7 bf 02 	movl   $0x2bff7ff,-0x40(%ebp)
		ptr2 = (char*)0x2C00FFF;
f0111098:	c7 45 ac ff 0f c0 02 	movl   $0x2c00fff,-0x54(%ebp)
		if ((*ptr1) != 'y' || (*ptr2) != 'c')
f011109f:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01110a2:	8a 00                	mov    (%eax),%al
f01110a4:	3c 79                	cmp    $0x79,%al
f01110a6:	75 09                	jne    f01110b1 <test_cut_paste_pages+0x4f0>
f01110a8:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01110ab:	8a 00                	mov    (%eax),%al
f01110ad:	3c 63                	cmp    $0x63,%al
f01110af:	74 21                	je     f01110d2 <test_cut_paste_pages+0x511>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f01110b1:	83 ec 04             	sub    $0x4,%esp
f01110b4:	68 bc 86 13 f0       	push   $0xf01386bc
f01110b9:	68 d6 01 00 00       	push   $0x1d6
f01110be:	68 de 7d 13 f0       	push   $0xf0137dde
f01110c3:	e8 6a f2 fe ff       	call   f0100332 <_warn>
f01110c8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01110cb:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f01110d2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01110d6:	74 04                	je     f01110dc <test_cut_paste_pages+0x51b>
f01110d8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01110dc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}
	cprintf("CASE I: END\n") ;
f01110e3:	83 ec 0c             	sub    $0xc,%esp
f01110e6:	68 f5 86 13 f0       	push   $0xf01386f5
f01110eb:	e8 3d fb fe ff       	call   f0100c2d <cprintf>
f01110f0:	83 c4 10             	add    $0x10,%esp

	/*========================================*/
	/*PART II: Destination Pages Exist 40%	  */
	/*========================================*/
	cprintf("\nCASE II: Destination Pages Exist [40%]\n") ;
f01110f3:	83 ec 0c             	sub    $0xc,%esp
f01110f6:	68 04 87 13 f0       	push   $0xf0138704
f01110fb:	e8 2d fb fe ff       	call   f0100c2d <cprintf>
f0111100:	83 c4 10             	add    $0x10,%esp

	char ap4[100] ;strcconcat(aup_cmd, " 0x1400000", ap4); execute_command(ap4);
f0111103:	83 ec 04             	sub    $0x4,%esp
f0111106:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f011110c:	50                   	push   %eax
f011110d:	68 2d 87 13 f0       	push   $0xf013872d
f0111112:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111118:	50                   	push   %eax
f0111119:	e8 bd f8 01 00       	call   f01309db <strcconcat>
f011111e:	83 c4 10             	add    $0x10,%esp
f0111121:	83 ec 0c             	sub    $0xc,%esp
f0111124:	8d 85 34 fd ff ff    	lea    -0x2cc(%ebp),%eax
f011112a:	50                   	push   %eax
f011112b:	e8 5f fb fe ff       	call   f0100c8f <execute_command>
f0111130:	83 c4 10             	add    $0x10,%esp
	char ap5[100] ;strcconcat(aup_cmd, " 0x1401000", ap5); execute_command(ap5);
f0111133:	83 ec 04             	sub    $0x4,%esp
f0111136:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f011113c:	50                   	push   %eax
f011113d:	68 38 87 13 f0       	push   $0xf0138738
f0111142:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111148:	50                   	push   %eax
f0111149:	e8 8d f8 01 00       	call   f01309db <strcconcat>
f011114e:	83 c4 10             	add    $0x10,%esp
f0111151:	83 ec 0c             	sub    $0xc,%esp
f0111154:	8d 85 d0 fc ff ff    	lea    -0x330(%ebp),%eax
f011115a:	50                   	push   %eax
f011115b:	e8 2f fb fe ff       	call   f0100c8f <execute_command>
f0111160:	83 c4 10             	add    $0x10,%esp
	char ap6[100] ;strcconcat(aup_cmd, " 0x1402000", ap6); execute_command(ap6);
f0111163:	83 ec 04             	sub    $0x4,%esp
f0111166:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f011116c:	50                   	push   %eax
f011116d:	68 43 87 13 f0       	push   $0xf0138743
f0111172:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f0111178:	50                   	push   %eax
f0111179:	e8 5d f8 01 00       	call   f01309db <strcconcat>
f011117e:	83 c4 10             	add    $0x10,%esp
f0111181:	83 ec 0c             	sub    $0xc,%esp
f0111184:	8d 85 6c fc ff ff    	lea    -0x394(%ebp),%eax
f011118a:	50                   	push   %eax
f011118b:	e8 ff fa fe ff       	call   f0100c8f <execute_command>
f0111190:	83 c4 10             	add    $0x10,%esp
	char ap7[100] ;strcconcat(aup_cmd, " 0x1C00000", ap7); execute_command(ap7);
f0111193:	83 ec 04             	sub    $0x4,%esp
f0111196:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f011119c:	50                   	push   %eax
f011119d:	68 4e 87 13 f0       	push   $0xf013874e
f01111a2:	8d 85 04 ff ff ff    	lea    -0xfc(%ebp),%eax
f01111a8:	50                   	push   %eax
f01111a9:	e8 2d f8 01 00       	call   f01309db <strcconcat>
f01111ae:	83 c4 10             	add    $0x10,%esp
f01111b1:	83 ec 0c             	sub    $0xc,%esp
f01111b4:	8d 85 08 fc ff ff    	lea    -0x3f8(%ebp),%eax
f01111ba:	50                   	push   %eax
f01111bb:	e8 cf fa fe ff       	call   f0100c8f <execute_command>
f01111c0:	83 c4 10             	add    $0x10,%esp

	ptr1 = (char*)0x1400000; *ptr1 = 'a';
f01111c3:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
f01111ca:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01111cd:	c6 00 61             	movb   $0x61,(%eax)
	ptr1 = (char*)0x14007FF; *ptr1 = 'b';
f01111d0:	c7 45 c0 ff 07 40 01 	movl   $0x14007ff,-0x40(%ebp)
f01111d7:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01111da:	c6 00 62             	movb   $0x62,(%eax)
	ptr1 = (char*)0x1400FFF; *ptr1 = 'c';
f01111dd:	c7 45 c0 ff 0f 40 01 	movl   $0x1400fff,-0x40(%ebp)
f01111e4:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01111e7:	c6 00 63             	movb   $0x63,(%eax)
	ptr1 = (char*)0x1C00000; *ptr1 = 'x';
f01111ea:	c7 45 c0 00 00 c0 01 	movl   $0x1c00000,-0x40(%ebp)
f01111f1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01111f4:	c6 00 78             	movb   $0x78,(%eax)
	ptr1 = (char*)0x1C007FF; *ptr1 = 'y';
f01111f7:	c7 45 c0 ff 07 c0 01 	movl   $0x1c007ff,-0x40(%ebp)
f01111fe:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0111201:	c6 00 79             	movb   $0x79,(%eax)
	ptr1 = (char*)0x1C00FFF; *ptr1 = 'z';
f0111204:	c7 45 c0 ff 0f c0 01 	movl   $0x1c00fff,-0x40(%ebp)
f011120b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011120e:	c6 00 7a             	movb   $0x7a,(%eax)
	uint32 srcp = GP(proc_directory, 0x1C00000) ;
f0111211:	83 ec 08             	sub    $0x8,%esp
f0111214:	68 00 00 c0 01       	push   $0x1c00000
f0111219:	ff 75 d4             	pushl  -0x2c(%ebp)
f011121c:	e8 65 42 00 00       	call   f0115486 <GP>
f0111221:	83 c4 10             	add    $0x10,%esp
f0111224:	89 45 a4             	mov    %eax,-0x5c(%ebp)
	uint32 dstp = GP(proc_directory, 0x1400000) ;
f0111227:	83 ec 08             	sub    $0x8,%esp
f011122a:	68 00 00 40 01       	push   $0x1400000
f011122f:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111232:	e8 4f 42 00 00       	call   f0115486 <GP>
f0111237:	83 c4 10             	add    $0x10,%esp
f011123a:	89 45 a0             	mov    %eax,-0x60(%ebp)

	ff1 = sys_calculate_free_frames();
f011123d:	e8 8e ae ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0111242:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1C00000, 0x1400000, 1) ;
f0111245:	6a 01                	push   $0x1
f0111247:	68 00 00 40 01       	push   $0x1400000
f011124c:	68 00 00 c0 01       	push   $0x1c00000
f0111251:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111254:	e8 18 6e ff ff       	call   f0108071 <cut_paste_pages>
f0111259:	83 c4 10             	add    $0x10,%esp
f011125c:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f011125f:	e8 6c ae ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0111264:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f0111267:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f011126b:	75 08                	jne    f0111275 <test_cut_paste_pages+0x6b4>
f011126d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111270:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0111273:	74 2b                	je     f01112a0 <test_cut_paste_pages+0x6df>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f0111275:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111278:	2b 45 b0             	sub    -0x50(%ebp),%eax
f011127b:	83 ec 0c             	sub    $0xc,%esp
f011127e:	50                   	push   %eax
f011127f:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111282:	68 5c 87 13 f0       	push   $0xf013875c
f0111287:	68 f9 01 00 00       	push   $0x1f9
f011128c:	68 de 7d 13 f0       	push   $0xf0137dde
f0111291:	e8 9c f0 fe ff       	call   f0100332 <_warn>
f0111296:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f0111299:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f01112a0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01112a4:	74 04                	je     f01112aa <test_cut_paste_pages+0x6e9>
f01112a6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f01112aa:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	int chk_cntnt = 1 ;
f01112b1:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CCP(proc_directory, 0x1C00000, 0x1400000, 1*PAGE_SIZE, 1, dstp , 0xFFF, srcp, 0xFFF, CHK_CUT_PASTE) != 1)
f01112b8:	83 ec 08             	sub    $0x8,%esp
f01112bb:	6a 00                	push   $0x0
f01112bd:	68 ff 0f 00 00       	push   $0xfff
f01112c2:	ff 75 a4             	pushl  -0x5c(%ebp)
f01112c5:	68 ff 0f 00 00       	push   $0xfff
f01112ca:	ff 75 a0             	pushl  -0x60(%ebp)
f01112cd:	6a 01                	push   $0x1
f01112cf:	68 00 10 00 00       	push   $0x1000
f01112d4:	68 00 00 40 01       	push   $0x1400000
f01112d9:	68 00 00 c0 01       	push   $0x1c00000
f01112de:	ff 75 d4             	pushl  -0x2c(%ebp)
f01112e1:	e8 6d 42 00 00       	call   f0115553 <CCP>
f01112e6:	83 c4 30             	add    $0x30,%esp
f01112e9:	83 f8 01             	cmp    $0x1,%eax
f01112ec:	74 28                	je     f0111316 <test_cut_paste_pages+0x755>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions and/or references\n");
f01112ee:	83 ec 04             	sub    $0x4,%esp
f01112f1:	68 70 86 13 f0       	push   $0xf0138670
f01112f6:	68 02 02 00 00       	push   $0x202
f01112fb:	68 de 7d 13 f0       	push   $0xf0137dde
f0111300:	e8 2d f0 fe ff       	call   f0100332 <_warn>
f0111305:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f0111308:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f011130f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0111316:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011131a:	74 04                	je     f0111320 <test_cut_paste_pages+0x75f>
f011131c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f0111320:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111327:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011132b:	0f 84 92 00 00 00    	je     f01113c3 <test_cut_paste_pages+0x802>
	{
		ptr1 = (char*)0x1400000;
f0111331:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111338:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011133f:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111346:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f011134d:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111354:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f011135b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011135e:	8a 00                	mov    (%eax),%al
f0111360:	3c 61                	cmp    $0x61,%al
f0111362:	75 2d                	jne    f0111391 <test_cut_paste_pages+0x7d0>
f0111364:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111367:	8a 00                	mov    (%eax),%al
f0111369:	3c 78                	cmp    $0x78,%al
f011136b:	75 24                	jne    f0111391 <test_cut_paste_pages+0x7d0>
f011136d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111370:	8a 00                	mov    (%eax),%al
f0111372:	3c 62                	cmp    $0x62,%al
f0111374:	75 1b                	jne    f0111391 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111376:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111379:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f011137b:	3c 79                	cmp    $0x79,%al
f011137d:	75 12                	jne    f0111391 <test_cut_paste_pages+0x7d0>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011137f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111382:	8a 00                	mov    (%eax),%al
f0111384:	3c 63                	cmp    $0x63,%al
f0111386:	75 09                	jne    f0111391 <test_cut_paste_pages+0x7d0>
f0111388:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011138b:	8a 00                	mov    (%eax),%al
f011138d:	3c 7a                	cmp    $0x7a,%al
f011138f:	74 21                	je     f01113b2 <test_cut_paste_pages+0x7f1>
		{
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f0111391:	83 ec 04             	sub    $0x4,%esp
f0111394:	68 bc 86 13 f0       	push   $0xf01386bc
f0111399:	68 14 02 00 00       	push   $0x214
f011139e:	68 de 7d 13 f0       	push   $0xf0137dde
f01113a3:	e8 8a ef fe ff       	call   f0100332 <_warn>
f01113a8:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01113ab:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01113b2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01113b6:	74 04                	je     f01113bc <test_cut_paste_pages+0x7fb>
f01113b8:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01113bc:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	ff1 = sys_calculate_free_frames();
f01113c3:	e8 08 ad ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01113c8:	89 45 b8             	mov    %eax,-0x48(%ebp)

	ret = cut_paste_pages(proc_directory, 0x1400000, 0x1BFF000, 3) ;
f01113cb:	6a 03                	push   $0x3
f01113cd:	68 00 f0 bf 01       	push   $0x1bff000
f01113d2:	68 00 00 40 01       	push   $0x1400000
f01113d7:	ff 75 d4             	pushl  -0x2c(%ebp)
f01113da:	e8 92 6c ff ff       	call   f0108071 <cut_paste_pages>
f01113df:	83 c4 10             	add    $0x10,%esp
f01113e2:	89 45 b4             	mov    %eax,-0x4c(%ebp)

	ff2 = sys_calculate_free_frames();
f01113e5:	e8 e6 ac ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01113ea:	89 45 b0             	mov    %eax,-0x50(%ebp)

	if (ret != -1 || ff1 - ff2 != 0)
f01113ed:	83 7d b4 ff          	cmpl   $0xffffffff,-0x4c(%ebp)
f01113f1:	75 08                	jne    f01113fb <test_cut_paste_pages+0x83a>
f01113f3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01113f6:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f01113f9:	74 2b                	je     f0111426 <test_cut_paste_pages+0x865>
	{
		warn("[EVAL] cut_paste_pages: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, ff1 - ff2);
f01113fb:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01113fe:	2b 45 b0             	sub    -0x50(%ebp),%eax
f0111401:	83 ec 0c             	sub    $0xc,%esp
f0111404:	50                   	push   %eax
f0111405:	ff 75 b4             	pushl  -0x4c(%ebp)
f0111408:	68 5c 87 13 f0       	push   $0xf013875c
f011140d:	68 23 02 00 00       	push   $0x223
f0111412:	68 de 7d 13 f0       	push   $0xf0137dde
f0111417:	e8 16 ef fe ff       	call   f0100332 <_warn>
f011141c:	83 c4 20             	add    $0x20,%esp
		correct = 0;
f011141f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
	}
	if (correct) eval += 10 ;
f0111426:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011142a:	74 04                	je     f0111430 <test_cut_paste_pages+0x86f>
f011142c:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
	correct = 1 ;
f0111430:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	chk_cntnt = 1;
f0111437:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f011143e:	83 ec 04             	sub    $0x4,%esp
f0111441:	6a 00                	push   $0x0
f0111443:	68 00 00 40 01       	push   $0x1400000
f0111448:	ff 75 d4             	pushl  -0x2c(%ebp)
f011144b:	e8 94 3b 00 00       	call   f0114fe4 <CB>
f0111450:	83 c4 10             	add    $0x10,%esp
f0111453:	83 f8 01             	cmp    $0x1,%eax
f0111456:	0f 85 80 00 00 00    	jne    f01114dc <test_cut_paste_pages+0x91b>
f011145c:	83 ec 04             	sub    $0x4,%esp
f011145f:	6a 00                	push   $0x0
f0111461:	68 00 10 40 01       	push   $0x1401000
f0111466:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111469:	e8 76 3b 00 00       	call   f0114fe4 <CB>
f011146e:	83 c4 10             	add    $0x10,%esp
f0111471:	83 f8 01             	cmp    $0x1,%eax
f0111474:	75 66                	jne    f01114dc <test_cut_paste_pages+0x91b>
f0111476:	83 ec 04             	sub    $0x4,%esp
f0111479:	6a 00                	push   $0x0
f011147b:	68 00 20 40 01       	push   $0x1402000
f0111480:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111483:	e8 5c 3b 00 00       	call   f0114fe4 <CB>
f0111488:	83 c4 10             	add    $0x10,%esp
f011148b:	83 f8 01             	cmp    $0x1,%eax
f011148e:	75 4c                	jne    f01114dc <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f0111490:	83 ec 04             	sub    $0x4,%esp
f0111493:	6a 00                	push   $0x0
f0111495:	68 00 f0 bf 01       	push   $0x1bff000
f011149a:	ff 75 d4             	pushl  -0x2c(%ebp)
f011149d:	e8 42 3b 00 00       	call   f0114fe4 <CB>
f01114a2:	83 c4 10             	add    $0x10,%esp
		correct = 0;
	}
	if (correct) eval += 10 ;
	correct = 1 ;
	chk_cntnt = 1;
	if (CB(proc_directory, 0x1400000, 0) != 1 || CB(proc_directory, 0x1401000, 0) != 1 || CB(proc_directory, 0x1402000, 0) != 1 ||
f01114a5:	85 c0                	test   %eax,%eax
f01114a7:	75 33                	jne    f01114dc <test_cut_paste_pages+0x91b>
			CB(proc_directory, 0x1BFF000, 0) != 0 || CB(proc_directory, 0x1C00000, 0) != 1 || CB(proc_directory, 0x1C01000, 0) != 0)
f01114a9:	83 ec 04             	sub    $0x4,%esp
f01114ac:	6a 00                	push   $0x0
f01114ae:	68 00 00 c0 01       	push   $0x1c00000
f01114b3:	ff 75 d4             	pushl  -0x2c(%ebp)
f01114b6:	e8 29 3b 00 00       	call   f0114fe4 <CB>
f01114bb:	83 c4 10             	add    $0x10,%esp
f01114be:	83 f8 01             	cmp    $0x1,%eax
f01114c1:	75 19                	jne    f01114dc <test_cut_paste_pages+0x91b>
f01114c3:	83 ec 04             	sub    $0x4,%esp
f01114c6:	6a 00                	push   $0x0
f01114c8:	68 00 10 c0 01       	push   $0x1c01000
f01114cd:	ff 75 d4             	pushl  -0x2c(%ebp)
f01114d0:	e8 0f 3b 00 00       	call   f0114fe4 <CB>
f01114d5:	83 c4 10             	add    $0x10,%esp
f01114d8:	85 c0                	test   %eax,%eax
f01114da:	74 28                	je     f0111504 <test_cut_paste_pages+0x943>
	{
		warn("[EVAL] cut_paste_pages: Failed (problem in permissions)\n");
f01114dc:	83 ec 04             	sub    $0x4,%esp
f01114df:	68 bc 87 13 f0       	push   $0xf01387bc
f01114e4:	68 2c 02 00 00       	push   $0x22c
f01114e9:	68 de 7d 13 f0       	push   $0xf0137dde
f01114ee:	e8 3f ee fe ff       	call   f0100332 <_warn>
f01114f3:	83 c4 10             	add    $0x10,%esp
		correct = 0;
f01114f6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		chk_cntnt = 0;
f01114fd:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	}
	if (correct) eval += 5 ;
f0111504:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111508:	74 04                	je     f011150e <test_cut_paste_pages+0x94d>
f011150a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
	correct = 1 ;
f011150e:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	if (chk_cntnt)
f0111515:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0111519:	0f 84 99 00 00 00    	je     f01115b8 <test_cut_paste_pages+0x9f7>
	{
		ptr1 = (char*)0x1400000;
f011151f:	c7 45 c0 00 00 40 01 	movl   $0x1400000,-0x40(%ebp)
		ptr2 = (char*)0x1C00000;
f0111526:	c7 45 ac 00 00 c0 01 	movl   $0x1c00000,-0x54(%ebp)
		ptr3 = (char*)0x14007FF;
f011152d:	c7 45 a8 ff 07 40 01 	movl   $0x14007ff,-0x58(%ebp)
		ptr4 = (char*)0x1C007FF;
f0111534:	c7 45 9c ff 07 c0 01 	movl   $0x1c007ff,-0x64(%ebp)
		ptr5 = (char*)0x1400FFF;
f011153b:	c7 45 98 ff 0f 40 01 	movl   $0x1400fff,-0x68(%ebp)
		ptr6 = (char*)0x1C00FFF;
f0111542:	c7 45 94 ff 0f c0 01 	movl   $0x1c00fff,-0x6c(%ebp)
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111549:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011154c:	8a 00                	mov    (%eax),%al
f011154e:	3c 61                	cmp    $0x61,%al
f0111550:	75 2d                	jne    f011157f <test_cut_paste_pages+0x9be>
f0111552:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111555:	8a 00                	mov    (%eax),%al
f0111557:	3c 78                	cmp    $0x78,%al
f0111559:	75 24                	jne    f011157f <test_cut_paste_pages+0x9be>
f011155b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011155e:	8a 00                	mov    (%eax),%al
f0111560:	3c 62                	cmp    $0x62,%al
f0111562:	75 1b                	jne    f011157f <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f0111564:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111567:	8a 00                	mov    (%eax),%al
		ptr2 = (char*)0x1C00000;
		ptr3 = (char*)0x14007FF;
		ptr4 = (char*)0x1C007FF;
		ptr5 = (char*)0x1400FFF;
		ptr6 = (char*)0x1C00FFF;
		if ((*ptr1) != 'a' || (*ptr2) != 'x' || (*ptr3) != 'b' ||
f0111569:	3c 79                	cmp    $0x79,%al
f011156b:	75 12                	jne    f011157f <test_cut_paste_pages+0x9be>
				(*ptr4) != 'y'|| (*ptr5) != 'c'|| (*ptr6) != 'z')
f011156d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111570:	8a 00                	mov    (%eax),%al
f0111572:	3c 63                	cmp    $0x63,%al
f0111574:	75 09                	jne    f011157f <test_cut_paste_pages+0x9be>
f0111576:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111579:	8a 00                	mov    (%eax),%al
f011157b:	3c 7a                	cmp    $0x7a,%al
f011157d:	74 28                	je     f01115a7 <test_cut_paste_pages+0x9e6>
		{
			correct = 0;
f011157f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chk_cntnt = 0;
f0111586:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
			warn("[EVAL] cut_paste_pages: Failed (content is not correct)\n");
f011158d:	83 ec 04             	sub    $0x4,%esp
f0111590:	68 bc 86 13 f0       	push   $0xf01386bc
f0111595:	68 40 02 00 00       	push   $0x240
f011159a:	68 de 7d 13 f0       	push   $0xf0137dde
f011159f:	e8 8e ed fe ff       	call   f0100332 <_warn>
f01115a4:	83 c4 10             	add    $0x10,%esp
		}
		if (correct) eval += 5 ;
f01115a7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01115ab:	74 04                	je     f01115b1 <test_cut_paste_pages+0x9f0>
f01115ad:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01115b1:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	}

	cprintf("CASE II: END\n") ;
f01115b8:	83 ec 0c             	sub    $0xc,%esp
f01115bb:	68 f5 87 13 f0       	push   $0xf01387f5
f01115c0:	e8 68 f6 fe ff       	call   f0100c2d <cprintf>
f01115c5:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] cut_paste_pages: FINISHED. Evaluation = %d\n", eval);
f01115c8:	83 ec 08             	sub    $0x8,%esp
f01115cb:	ff 75 e4             	pushl  -0x1c(%ebp)
f01115ce:	68 04 88 13 f0       	push   $0xf0138804
f01115d3:	e8 55 f6 fe ff       	call   f0100c2d <cprintf>
f01115d8:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01115db:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01115df:	75 10                	jne    f01115f1 <test_cut_paste_pages+0xa30>
		cprintf("Congratulations!! test cut_paste_pages completed successfully.\n");
f01115e1:	83 ec 0c             	sub    $0xc,%esp
f01115e4:	68 38 88 13 f0       	push   $0xf0138838
f01115e9:	e8 3f f6 fe ff       	call   f0100c2d <cprintf>
f01115ee:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01115f1:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f01115f6:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01115f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01115fc:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01115ff:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0111604:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0111607:	5b                   	pop    %ebx
f0111608:	5e                   	pop    %esi
f0111609:	5f                   	pop    %edi
f011160a:	5d                   	pop    %ebp
f011160b:	c3                   	ret    

f011160c <test_copy_paste_chunk>:

//===============================
// 2) TEST COPY-PASTE CHUNK:
//===============================
int test_copy_paste_chunk()
{
f011160c:	55                   	push   %ebp
f011160d:	89 e5                	mov    %esp,%ebp
f011160f:	57                   	push   %edi
f0111610:	56                   	push   %esi
f0111611:	53                   	push   %ebx
f0111612:	81 ec ac 05 00 00    	sub    $0x5ac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0111618:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f011161e:	bb 78 88 13 f0       	mov    $0xf0138878,%ebx
f0111623:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111628:	89 c7                	mov    %eax,%edi
f011162a:	89 de                	mov    %ebx,%esi
f011162c:	89 d1                	mov    %edx,%ecx
f011162e:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111630:	8d 95 51 ff ff ff    	lea    -0xaf(%ebp),%edx
f0111636:	b9 23 00 00 00       	mov    $0x23,%ecx
f011163b:	b0 00                	mov    $0x0,%al
f011163d:	89 d7                	mov    %edx,%edi
f011163f:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0111641:	6a 00                	push   $0x0
f0111643:	6a 0a                	push   $0xa
f0111645:	6a 14                	push   $0x14
f0111647:	8d 85 42 ff ff ff    	lea    -0xbe(%ebp),%eax
f011164d:	50                   	push   %eax
f011164e:	e8 31 6d ff ff       	call   f0108384 <env_create>
f0111653:	83 c4 10             	add    $0x10,%esp
f0111656:	89 45 d8             	mov    %eax,-0x28(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0111659:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011165c:	8b 40 5c             	mov    0x5c(%eax),%eax
f011165f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	lcr3(env->env_cr3) ;
f0111662:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0111665:	8b 40 60             	mov    0x60(%eax),%eax
f0111668:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f011166e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0111674:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0111677:	c7 85 2e ff ff ff 61 	movl   $0x20707561,-0xd2(%ebp)
f011167e:	75 70 20 
f0111681:	c7 85 32 ff ff ff 00 	movl   $0x0,-0xce(%ebp)
f0111688:	00 00 00 
f011168b:	8d 95 36 ff ff ff    	lea    -0xca(%ebp),%edx
f0111691:	b9 03 00 00 00       	mov    $0x3,%ecx
f0111696:	b8 00 00 00 00       	mov    $0x0,%eax
f011169b:	89 d7                	mov    %edx,%edi
f011169d:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f011169f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01116a2:	8b 40 4c             	mov    0x4c(%eax),%eax
f01116a5:	83 ec 08             	sub    $0x8,%esp
f01116a8:	8d 95 1a ff ff ff    	lea    -0xe6(%ebp),%edx
f01116ae:	52                   	push   %edx
f01116af:	50                   	push   %eax
f01116b0:	e8 2e f2 01 00       	call   f01308e3 <ltostr>
f01116b5:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01116b8:	83 ec 04             	sub    $0x4,%esp
f01116bb:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01116c1:	50                   	push   %eax
f01116c2:	8d 85 1a ff ff ff    	lea    -0xe6(%ebp),%eax
f01116c8:	50                   	push   %eax
f01116c9:	8d 85 2e ff ff ff    	lea    -0xd2(%ebp),%eax
f01116cf:	50                   	push   %eax
f01116d0:	e8 06 f3 01 00       	call   f01309db <strcconcat>
f01116d5:	83 c4 10             	add    $0x10,%esp
	//===================================================

	ClearUserSpace(proc_directory);
f01116d8:	83 ec 0c             	sub    $0xc,%esp
f01116db:	ff 75 d4             	pushl  -0x2c(%ebp)
f01116de:	e8 3c 3e 00 00       	call   f011551f <ClearUserSpace>
f01116e3:	83 c4 10             	add    $0x10,%esp
	int numOfArgs = 0;
f01116e6:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
	char *args[MAX_ARGUMENTS] ;
	uint32 res =0;
f01116ed:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint32 eval = 0; int correct = 1 ;
f01116f4:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01116fb:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter ;
	char *ch1, *ch2, *ch3, *ch4, *ch5, *ch6, *ch7,*ch8, *ch9, *ch10, *ch11, *ch12 ;
	char tch[13];
	int kilo = 1024 ;
f0111702:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0111709:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	/*==================================================*/
	/*PART I: Destination page(s) exist & read only 20% */
	/*==================================================*/
	cprintf("\nCASE I: Destination page(s) exist & read only [20%]\n") ;
f0111710:	83 ec 0c             	sub    $0xc,%esp
f0111713:	68 ac 88 13 f0       	push   $0xf01388ac
f0111718:	e8 10 f5 fe ff       	call   f0100c2d <cprintf>
f011171d:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0111720:	83 ec 04             	sub    $0x4,%esp
f0111723:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111729:	50                   	push   %eax
f011172a:	68 e2 88 13 f0       	push   $0xf01388e2
f011172f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111735:	50                   	push   %eax
f0111736:	e8 a0 f2 01 00       	call   f01309db <strcconcat>
f011173b:	83 c4 10             	add    $0x10,%esp
f011173e:	83 ec 0c             	sub    $0xc,%esp
f0111741:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111747:	50                   	push   %eax
f0111748:	e8 42 f5 fe ff       	call   f0100c8f <execute_command>
f011174d:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x1000", c1); execute_command(c1);
f0111750:	83 ec 04             	sub    $0x4,%esp
f0111753:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111759:	50                   	push   %eax
f011175a:	68 e7 88 13 f0       	push   $0xf01388e7
f011175f:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111765:	50                   	push   %eax
f0111766:	e8 70 f2 01 00       	call   f01309db <strcconcat>
f011176b:	83 c4 10             	add    $0x10,%esp
f011176e:	83 ec 0c             	sub    $0xc,%esp
f0111771:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111777:	50                   	push   %eax
f0111778:	e8 12 f5 fe ff       	call   f0100c8f <execute_command>
f011177d:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x000000 a";execute_command(c2);
f0111780:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111786:	bb ed 8b 13 f0       	mov    $0xf0138bed,%ebx
f011178b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111790:	89 c7                	mov    %eax,%edi
f0111792:	89 de                	mov    %ebx,%esi
f0111794:	89 d1                	mov    %edx,%ecx
f0111796:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111798:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f011179e:	b9 55 00 00 00       	mov    $0x55,%ecx
f01117a3:	b0 00                	mov    $0x0,%al
f01117a5:	89 d7                	mov    %edx,%edi
f01117a7:	f3 aa                	rep stos %al,%es:(%edi)
f01117a9:	83 ec 0c             	sub    $0xc,%esp
f01117ac:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f01117b2:	50                   	push   %eax
f01117b3:	e8 d7 f4 fe ff       	call   f0100c8f <execute_command>
f01117b8:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x0007FF b";execute_command(c3);
f01117bb:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01117c1:	bb 51 8c 13 f0       	mov    $0xf0138c51,%ebx
f01117c6:	ba 0f 00 00 00       	mov    $0xf,%edx
f01117cb:	89 c7                	mov    %eax,%edi
f01117cd:	89 de                	mov    %ebx,%esi
f01117cf:	89 d1                	mov    %edx,%ecx
f01117d1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01117d3:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f01117d9:	b9 55 00 00 00       	mov    $0x55,%ecx
f01117de:	b0 00                	mov    $0x0,%al
f01117e0:	89 d7                	mov    %edx,%edi
f01117e2:	f3 aa                	rep stos %al,%es:(%edi)
f01117e4:	83 ec 0c             	sub    $0xc,%esp
f01117e7:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f01117ed:	50                   	push   %eax
f01117ee:	e8 9c f4 fe ff       	call   f0100c8f <execute_command>
f01117f3:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x000FFF c";execute_command(c4);
f01117f6:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f01117fc:	bb b5 8c 13 f0       	mov    $0xf0138cb5,%ebx
f0111801:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111806:	89 c7                	mov    %eax,%edi
f0111808:	89 de                	mov    %ebx,%esi
f011180a:	89 d1                	mov    %edx,%ecx
f011180c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011180e:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0111814:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111819:	b0 00                	mov    $0x0,%al
f011181b:	89 d7                	mov    %edx,%edi
f011181d:	f3 aa                	rep stos %al,%es:(%edi)
f011181f:	83 ec 0c             	sub    $0xc,%esp
f0111822:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0111828:	50                   	push   %eax
f0111829:	e8 61 f4 fe ff       	call   f0100c8f <execute_command>
f011182e:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x001000 d";execute_command(c22);
f0111831:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111837:	bb 19 8d 13 f0       	mov    $0xf0138d19,%ebx
f011183c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111841:	89 c7                	mov    %eax,%edi
f0111843:	89 de                	mov    %ebx,%esi
f0111845:	89 d1                	mov    %edx,%ecx
f0111847:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111849:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f011184f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111854:	b0 00                	mov    $0x0,%al
f0111856:	89 d7                	mov    %edx,%edi
f0111858:	f3 aa                	rep stos %al,%es:(%edi)
f011185a:	83 ec 0c             	sub    $0xc,%esp
f011185d:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111863:	50                   	push   %eax
f0111864:	e8 26 f4 fe ff       	call   f0100c8f <execute_command>
f0111869:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x0017FF e";execute_command(c23);
f011186c:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111872:	bb 7d 8d 13 f0       	mov    $0xf0138d7d,%ebx
f0111877:	ba 0f 00 00 00       	mov    $0xf,%edx
f011187c:	89 c7                	mov    %eax,%edi
f011187e:	89 de                	mov    %ebx,%esi
f0111880:	89 d1                	mov    %edx,%ecx
f0111882:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111884:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f011188a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011188f:	b0 00                	mov    $0x0,%al
f0111891:	89 d7                	mov    %edx,%edi
f0111893:	f3 aa                	rep stos %al,%es:(%edi)
f0111895:	83 ec 0c             	sub    $0xc,%esp
f0111898:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f011189e:	50                   	push   %eax
f011189f:	e8 eb f3 fe ff       	call   f0100c8f <execute_command>
f01118a4:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x001FFF f";execute_command(c24);
f01118a7:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01118ad:	bb e1 8d 13 f0       	mov    $0xf0138de1,%ebx
f01118b2:	ba 0f 00 00 00       	mov    $0xf,%edx
f01118b7:	89 c7                	mov    %eax,%edi
f01118b9:	89 de                	mov    %ebx,%esi
f01118bb:	89 d1                	mov    %edx,%ecx
f01118bd:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01118bf:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f01118c5:	b9 55 00 00 00       	mov    $0x55,%ecx
f01118ca:	b0 00                	mov    $0x0,%al
f01118cc:	89 d7                	mov    %edx,%edi
f01118ce:	f3 aa                	rep stos %al,%es:(%edi)
f01118d0:	83 ec 0c             	sub    $0xc,%esp
f01118d3:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f01118d9:	50                   	push   %eax
f01118da:	e8 b0 f3 fe ff       	call   f0100c8f <execute_command>
f01118df:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x100000", c5); execute_command(c5);
f01118e2:	83 ec 04             	sub    $0x4,%esp
f01118e5:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01118eb:	50                   	push   %eax
f01118ec:	68 ef 88 13 f0       	push   $0xf01388ef
f01118f1:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01118f7:	50                   	push   %eax
f01118f8:	e8 de f0 01 00       	call   f01309db <strcconcat>
f01118fd:	83 c4 10             	add    $0x10,%esp
f0111900:	83 ec 0c             	sub    $0xc,%esp
f0111903:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111909:	50                   	push   %eax
f011190a:	e8 80 f3 fe ff       	call   f0100c8f <execute_command>
f011190f:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x101000 r", c5); execute_command(c5);
f0111912:	83 ec 04             	sub    $0x4,%esp
f0111915:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011191b:	50                   	push   %eax
f011191c:	68 f9 88 13 f0       	push   $0xf01388f9
f0111921:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111927:	50                   	push   %eax
f0111928:	e8 ae f0 01 00       	call   f01309db <strcconcat>
f011192d:	83 c4 10             	add    $0x10,%esp
f0111930:	83 ec 0c             	sub    $0xc,%esp
f0111933:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111939:	50                   	push   %eax
f011193a:	e8 50 f3 fe ff       	call   f0100c8f <execute_command>
f011193f:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x100000 x";execute_command(c6);
f0111942:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111948:	bb 45 8e 13 f0       	mov    $0xf0138e45,%ebx
f011194d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111952:	89 c7                	mov    %eax,%edi
f0111954:	89 de                	mov    %ebx,%esi
f0111956:	89 d1                	mov    %edx,%ecx
f0111958:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011195a:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0111960:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111965:	b0 00                	mov    $0x0,%al
f0111967:	89 d7                	mov    %edx,%edi
f0111969:	f3 aa                	rep stos %al,%es:(%edi)
f011196b:	83 ec 0c             	sub    $0xc,%esp
f011196e:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111974:	50                   	push   %eax
f0111975:	e8 15 f3 fe ff       	call   f0100c8f <execute_command>
f011197a:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x1007FF y";execute_command(c7);
f011197d:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111983:	bb a9 8e 13 f0       	mov    $0xf0138ea9,%ebx
f0111988:	ba 0f 00 00 00       	mov    $0xf,%edx
f011198d:	89 c7                	mov    %eax,%edi
f011198f:	89 de                	mov    %ebx,%esi
f0111991:	89 d1                	mov    %edx,%ecx
f0111993:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111995:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011199b:	b9 55 00 00 00       	mov    $0x55,%ecx
f01119a0:	b0 00                	mov    $0x0,%al
f01119a2:	89 d7                	mov    %edx,%edi
f01119a4:	f3 aa                	rep stos %al,%es:(%edi)
f01119a6:	83 ec 0c             	sub    $0xc,%esp
f01119a9:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f01119af:	50                   	push   %eax
f01119b0:	e8 da f2 fe ff       	call   f0100c8f <execute_command>
f01119b5:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x100FFF z";execute_command(c8);
f01119b8:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01119be:	bb 0d 8f 13 f0       	mov    $0xf0138f0d,%ebx
f01119c3:	ba 0f 00 00 00       	mov    $0xf,%edx
f01119c8:	89 c7                	mov    %eax,%edi
f01119ca:	89 de                	mov    %ebx,%esi
f01119cc:	89 d1                	mov    %edx,%ecx
f01119ce:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01119d0:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f01119d6:	b9 55 00 00 00       	mov    $0x55,%ecx
f01119db:	b0 00                	mov    $0x0,%al
f01119dd:	89 d7                	mov    %edx,%edi
f01119df:	f3 aa                	rep stos %al,%es:(%edi)
f01119e1:	83 ec 0c             	sub    $0xc,%esp
f01119e4:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f01119ea:	50                   	push   %eax
f01119eb:	e8 9f f2 fe ff       	call   f0100c8f <execute_command>
f01119f0:	83 c4 10             	add    $0x10,%esp

		ch1 = (char*)0x000000; ch2 = (char*)0x100000;
f01119f3:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f01119fa:	c7 45 b8 00 00 10 00 	movl   $0x100000,-0x48(%ebp)
		ch3 = (char*)0x0007FF; ch4 = (char*)0x1007FF;
f0111a01:	c7 45 b4 ff 07 00 00 	movl   $0x7ff,-0x4c(%ebp)
f0111a08:	c7 45 b0 ff 07 10 00 	movl   $0x1007ff,-0x50(%ebp)
		ch5 = (char*)0x000FFF; ch6 = (char*)0x100FFF;
f0111a0f:	c7 45 ac ff 0f 00 00 	movl   $0xfff,-0x54(%ebp)
f0111a16:	c7 45 a8 ff 0f 10 00 	movl   $0x100fff,-0x58(%ebp)
		ch7 = (char*)0x001000; ch8 = (char*)0x101000;
f0111a1d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0111a24:	c7 45 a0 00 10 10 00 	movl   $0x101000,-0x60(%ebp)
		ch9 = (char*)0x0017FF; ch10= (char*)0x1017FF;
f0111a2b:	c7 45 9c ff 17 00 00 	movl   $0x17ff,-0x64(%ebp)
f0111a32:	c7 45 98 ff 17 10 00 	movl   $0x1017ff,-0x68(%ebp)
		ch11= (char*)0x001FFF; ch12= (char*)0x101FFF;
f0111a39:	c7 45 94 ff 1f 00 00 	movl   $0x1fff,-0x6c(%ebp)
f0111a40:	c7 45 90 ff 1f 10 00 	movl   $0x101fff,-0x70(%ebp)

		tch[8] = *ch8 ;tch[10] = *ch10 ;tch[12] = *ch12 ;
f0111a47:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111a4a:	8a 00                	mov    (%eax),%al
f0111a4c:	88 85 a3 fe ff ff    	mov    %al,-0x15d(%ebp)
f0111a52:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111a55:	8a 00                	mov    (%eax),%al
f0111a57:	88 85 a5 fe ff ff    	mov    %al,-0x15b(%ebp)
f0111a5d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111a60:	8a 00                	mov    (%eax),%al
f0111a62:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111a68:	e8 63 a6 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0111a6d:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x0, 0x100000, 6*kilo);
f0111a70:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111a73:	89 d0                	mov    %edx,%eax
f0111a75:	01 c0                	add    %eax,%eax
f0111a77:	01 d0                	add    %edx,%eax
f0111a79:	01 c0                	add    %eax,%eax
f0111a7b:	50                   	push   %eax
f0111a7c:	68 00 00 10 00       	push   $0x100000
f0111a81:	6a 00                	push   $0x0
f0111a83:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111a86:	e8 b2 67 ff ff       	call   f010823d <copy_paste_chunk>
f0111a8b:	83 c4 10             	add    $0x10,%esp
f0111a8e:	89 45 88             	mov    %eax,-0x78(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0111a91:	e8 3a a6 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0111a96:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0111a99:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != -1 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0111aa0:	83 7d 88 ff          	cmpl   $0xffffffff,-0x78(%ebp)
f0111aa4:	75 08                	jne    f0111aae <test_copy_paste_chunk+0x4a2>
f0111aa6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111aa9:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0111aac:	74 2b                	je     f0111ad9 <test_copy_paste_chunk+0x4cd>
		{
			warn("[EVAL] copy_paste_chunk: Failed (dest is read-only... operation should be denied) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0111aae:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111ab1:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0111ab4:	83 ec 0c             	sub    $0xc,%esp
f0111ab7:	50                   	push   %eax
f0111ab8:	ff 75 88             	pushl  -0x78(%ebp)
f0111abb:	68 08 89 13 f0       	push   $0xf0138908
f0111ac0:	68 93 02 00 00       	push   $0x293
f0111ac5:	68 de 7d 13 f0       	push   $0xf0137dde
f0111aca:	e8 63 e8 fe ff       	call   f0100332 <_warn>
f0111acf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0111ad2:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111ad9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111add:	74 04                	je     f0111ae3 <test_copy_paste_chunk+0x4d7>
f0111adf:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111ae3:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'x' || *ch3 != 'b' || *ch4 != 'y' || *ch5 != 'c' || *ch6 != 'z'
f0111aea:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111aed:	8a 00                	mov    (%eax),%al
f0111aef:	3c 61                	cmp    $0x61,%al
f0111af1:	75 75                	jne    f0111b68 <test_copy_paste_chunk+0x55c>
f0111af3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0111af6:	8a 00                	mov    (%eax),%al
f0111af8:	3c 78                	cmp    $0x78,%al
f0111afa:	75 6c                	jne    f0111b68 <test_copy_paste_chunk+0x55c>
f0111afc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111aff:	8a 00                	mov    (%eax),%al
f0111b01:	3c 62                	cmp    $0x62,%al
f0111b03:	75 63                	jne    f0111b68 <test_copy_paste_chunk+0x55c>
f0111b05:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0111b08:	8a 00                	mov    (%eax),%al
f0111b0a:	3c 79                	cmp    $0x79,%al
f0111b0c:	75 5a                	jne    f0111b68 <test_copy_paste_chunk+0x55c>
f0111b0e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0111b11:	8a 00                	mov    (%eax),%al
f0111b13:	3c 63                	cmp    $0x63,%al
f0111b15:	75 51                	jne    f0111b68 <test_copy_paste_chunk+0x55c>
f0111b17:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111b1a:	8a 00                	mov    (%eax),%al
f0111b1c:	3c 7a                	cmp    $0x7a,%al
f0111b1e:	75 48                	jne    f0111b68 <test_copy_paste_chunk+0x55c>
				||  *ch7 != 'd' || *ch8 != tch[8] || *ch9 != 'e' || *ch10 != tch[10] || *ch11!= 'f' || *ch12 != tch[12])
f0111b20:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111b23:	8a 00                	mov    (%eax),%al
f0111b25:	3c 64                	cmp    $0x64,%al
f0111b27:	75 3f                	jne    f0111b68 <test_copy_paste_chunk+0x55c>
f0111b29:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0111b2c:	8a 10                	mov    (%eax),%dl
f0111b2e:	8a 85 a3 fe ff ff    	mov    -0x15d(%ebp),%al
f0111b34:	38 c2                	cmp    %al,%dl
f0111b36:	75 30                	jne    f0111b68 <test_copy_paste_chunk+0x55c>
f0111b38:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0111b3b:	8a 00                	mov    (%eax),%al
f0111b3d:	3c 65                	cmp    $0x65,%al
f0111b3f:	75 27                	jne    f0111b68 <test_copy_paste_chunk+0x55c>
f0111b41:	8b 45 98             	mov    -0x68(%ebp),%eax
f0111b44:	8a 10                	mov    (%eax),%dl
f0111b46:	8a 85 a5 fe ff ff    	mov    -0x15b(%ebp),%al
f0111b4c:	38 c2                	cmp    %al,%dl
f0111b4e:	75 18                	jne    f0111b68 <test_copy_paste_chunk+0x55c>
f0111b50:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0111b53:	8a 00                	mov    (%eax),%al
f0111b55:	3c 66                	cmp    $0x66,%al
f0111b57:	75 0f                	jne    f0111b68 <test_copy_paste_chunk+0x55c>
f0111b59:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111b5c:	8a 10                	mov    (%eax),%dl
f0111b5e:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0111b64:	38 c2                	cmp    %al,%dl
f0111b66:	74 21                	je     f0111b89 <test_copy_paste_chunk+0x57d>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0111b68:	83 ec 04             	sub    $0x4,%esp
f0111b6b:	68 6c 89 13 f0       	push   $0xf013896c
f0111b70:	68 9c 02 00 00       	push   $0x29c
f0111b75:	68 de 7d 13 f0       	push   $0xf0137dde
f0111b7a:	e8 b3 e7 fe ff       	call   f0100332 <_warn>
f0111b7f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111b82:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0111b89:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111b8d:	74 04                	je     f0111b93 <test_copy_paste_chunk+0x587>
f0111b8f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0111b93:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE I: END \n") ;
f0111b9a:	83 ec 0c             	sub    $0xc,%esp
f0111b9d:	68 a6 89 13 f0       	push   $0xf01389a6
f0111ba2:	e8 86 f0 fe ff       	call   f0100c2d <cprintf>
f0111ba7:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: Destination page(s) exist & writable 40% */
	/*==================================================*/
	cprintf("\nCASE II: Destination page(s) exist & writable [40%]\n") ;
f0111baa:	83 ec 0c             	sub    $0xc,%esp
f0111bad:	68 b8 89 13 f0       	push   $0xf01389b8
f0111bb2:	e8 76 f0 fe ff       	call   f0100c2d <cprintf>
f0111bb7:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x200000", c1); execute_command(c1);
f0111bba:	83 ec 04             	sub    $0x4,%esp
f0111bbd:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111bc3:	50                   	push   %eax
f0111bc4:	68 ee 89 13 f0       	push   $0xf01389ee
f0111bc9:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111bcf:	50                   	push   %eax
f0111bd0:	e8 06 ee 01 00       	call   f01309db <strcconcat>
f0111bd5:	83 c4 10             	add    $0x10,%esp
f0111bd8:	83 ec 0c             	sub    $0xc,%esp
f0111bdb:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111be1:	50                   	push   %eax
f0111be2:	e8 a8 f0 fe ff       	call   f0100c8f <execute_command>
f0111be7:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x201000", c1); execute_command(c1);
f0111bea:	83 ec 04             	sub    $0x4,%esp
f0111bed:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111bf3:	50                   	push   %eax
f0111bf4:	68 f8 89 13 f0       	push   $0xf01389f8
f0111bf9:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111bff:	50                   	push   %eax
f0111c00:	e8 d6 ed 01 00       	call   f01309db <strcconcat>
f0111c05:	83 c4 10             	add    $0x10,%esp
f0111c08:	83 ec 0c             	sub    $0xc,%esp
f0111c0b:	8d 85 4f fa ff ff    	lea    -0x5b1(%ebp),%eax
f0111c11:	50                   	push   %eax
f0111c12:	e8 78 f0 fe ff       	call   f0100c8f <execute_command>
f0111c17:	83 c4 10             	add    $0x10,%esp
		/*write on 1st page*/
		char c2[100] = "wum 0x200000 a";execute_command(c2);
f0111c1a:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111c20:	bb 71 8f 13 f0       	mov    $0xf0138f71,%ebx
f0111c25:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111c2a:	89 c7                	mov    %eax,%edi
f0111c2c:	89 de                	mov    %ebx,%esi
f0111c2e:	89 d1                	mov    %edx,%ecx
f0111c30:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c32:	8d 95 c2 fa ff ff    	lea    -0x53e(%ebp),%edx
f0111c38:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111c3d:	b0 00                	mov    $0x0,%al
f0111c3f:	89 d7                	mov    %edx,%edi
f0111c41:	f3 aa                	rep stos %al,%es:(%edi)
f0111c43:	83 ec 0c             	sub    $0xc,%esp
f0111c46:	8d 85 b3 fa ff ff    	lea    -0x54d(%ebp),%eax
f0111c4c:	50                   	push   %eax
f0111c4d:	e8 3d f0 fe ff       	call   f0100c8f <execute_command>
f0111c52:	83 c4 10             	add    $0x10,%esp
		char c3[100] = "wum 0x2007FF b";execute_command(c3);
f0111c55:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0111c5b:	bb d5 8f 13 f0       	mov    $0xf0138fd5,%ebx
f0111c60:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111c65:	89 c7                	mov    %eax,%edi
f0111c67:	89 de                	mov    %ebx,%esi
f0111c69:	89 d1                	mov    %edx,%ecx
f0111c6b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111c6d:	8d 95 26 fb ff ff    	lea    -0x4da(%ebp),%edx
f0111c73:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111c78:	b0 00                	mov    $0x0,%al
f0111c7a:	89 d7                	mov    %edx,%edi
f0111c7c:	f3 aa                	rep stos %al,%es:(%edi)
f0111c7e:	83 ec 0c             	sub    $0xc,%esp
f0111c81:	8d 85 17 fb ff ff    	lea    -0x4e9(%ebp),%eax
f0111c87:	50                   	push   %eax
f0111c88:	e8 02 f0 fe ff       	call   f0100c8f <execute_command>
f0111c8d:	83 c4 10             	add    $0x10,%esp
		char c4[100] = "wum 0x200FFF c";execute_command(c4);
f0111c90:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0111c96:	bb 39 90 13 f0       	mov    $0xf0139039,%ebx
f0111c9b:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111ca0:	89 c7                	mov    %eax,%edi
f0111ca2:	89 de                	mov    %ebx,%esi
f0111ca4:	89 d1                	mov    %edx,%ecx
f0111ca6:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111ca8:	8d 95 8a fb ff ff    	lea    -0x476(%ebp),%edx
f0111cae:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111cb3:	b0 00                	mov    $0x0,%al
f0111cb5:	89 d7                	mov    %edx,%edi
f0111cb7:	f3 aa                	rep stos %al,%es:(%edi)
f0111cb9:	83 ec 0c             	sub    $0xc,%esp
f0111cbc:	8d 85 7b fb ff ff    	lea    -0x485(%ebp),%eax
f0111cc2:	50                   	push   %eax
f0111cc3:	e8 c7 ef fe ff       	call   f0100c8f <execute_command>
f0111cc8:	83 c4 10             	add    $0x10,%esp
		/*write on 2nd page*/
		char c22[100] = "wum 0x201000 d";execute_command(c22);
f0111ccb:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111cd1:	bb 9d 90 13 f0       	mov    $0xf013909d,%ebx
f0111cd6:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111cdb:	89 c7                	mov    %eax,%edi
f0111cdd:	89 de                	mov    %ebx,%esi
f0111cdf:	89 d1                	mov    %edx,%ecx
f0111ce1:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111ce3:	8d 95 ee fb ff ff    	lea    -0x412(%ebp),%edx
f0111ce9:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111cee:	b0 00                	mov    $0x0,%al
f0111cf0:	89 d7                	mov    %edx,%edi
f0111cf2:	f3 aa                	rep stos %al,%es:(%edi)
f0111cf4:	83 ec 0c             	sub    $0xc,%esp
f0111cf7:	8d 85 df fb ff ff    	lea    -0x421(%ebp),%eax
f0111cfd:	50                   	push   %eax
f0111cfe:	e8 8c ef fe ff       	call   f0100c8f <execute_command>
f0111d03:	83 c4 10             	add    $0x10,%esp
		char c23[100] = "wum 0x2017FF e";execute_command(c23);
f0111d06:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111d0c:	bb 01 91 13 f0       	mov    $0xf0139101,%ebx
f0111d11:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111d16:	89 c7                	mov    %eax,%edi
f0111d18:	89 de                	mov    %ebx,%esi
f0111d1a:	89 d1                	mov    %edx,%ecx
f0111d1c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111d1e:	8d 95 52 fc ff ff    	lea    -0x3ae(%ebp),%edx
f0111d24:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111d29:	b0 00                	mov    $0x0,%al
f0111d2b:	89 d7                	mov    %edx,%edi
f0111d2d:	f3 aa                	rep stos %al,%es:(%edi)
f0111d2f:	83 ec 0c             	sub    $0xc,%esp
f0111d32:	8d 85 43 fc ff ff    	lea    -0x3bd(%ebp),%eax
f0111d38:	50                   	push   %eax
f0111d39:	e8 51 ef fe ff       	call   f0100c8f <execute_command>
f0111d3e:	83 c4 10             	add    $0x10,%esp
		char c24[100] = "wum 0x201FFF f";execute_command(c24);
f0111d41:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0111d47:	bb 65 91 13 f0       	mov    $0xf0139165,%ebx
f0111d4c:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111d51:	89 c7                	mov    %eax,%edi
f0111d53:	89 de                	mov    %ebx,%esi
f0111d55:	89 d1                	mov    %edx,%ecx
f0111d57:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111d59:	8d 95 b6 fc ff ff    	lea    -0x34a(%ebp),%edx
f0111d5f:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111d64:	b0 00                	mov    $0x0,%al
f0111d66:	89 d7                	mov    %edx,%edi
f0111d68:	f3 aa                	rep stos %al,%es:(%edi)
f0111d6a:	83 ec 0c             	sub    $0xc,%esp
f0111d6d:	8d 85 a7 fc ff ff    	lea    -0x359(%ebp),%eax
f0111d73:	50                   	push   %eax
f0111d74:	e8 16 ef fe ff       	call   f0100c8f <execute_command>
f0111d79:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c5[100] ;strcconcat(aup_cmd, " 0x400000", c5); execute_command(c5);
f0111d7c:	83 ec 04             	sub    $0x4,%esp
f0111d7f:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111d85:	50                   	push   %eax
f0111d86:	68 02 8a 13 f0       	push   $0xf0138a02
f0111d8b:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111d91:	50                   	push   %eax
f0111d92:	e8 44 ec 01 00       	call   f01309db <strcconcat>
f0111d97:	83 c4 10             	add    $0x10,%esp
f0111d9a:	83 ec 0c             	sub    $0xc,%esp
f0111d9d:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111da3:	50                   	push   %eax
f0111da4:	e8 e6 ee fe ff       	call   f0100c8f <execute_command>
f0111da9:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x401000", c5); execute_command(c5);
f0111dac:	83 ec 04             	sub    $0x4,%esp
f0111daf:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111db5:	50                   	push   %eax
f0111db6:	68 0c 8a 13 f0       	push   $0xf0138a0c
f0111dbb:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0111dc1:	50                   	push   %eax
f0111dc2:	e8 14 ec 01 00       	call   f01309db <strcconcat>
f0111dc7:	83 c4 10             	add    $0x10,%esp
f0111dca:	83 ec 0c             	sub    $0xc,%esp
f0111dcd:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0111dd3:	50                   	push   %eax
f0111dd4:	e8 b6 ee fe ff       	call   f0100c8f <execute_command>
f0111dd9:	83 c4 10             	add    $0x10,%esp
		char c6[100] = "wum 0x400000 x";execute_command(c6);
f0111ddc:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111de2:	bb c9 91 13 f0       	mov    $0xf01391c9,%ebx
f0111de7:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111dec:	89 c7                	mov    %eax,%edi
f0111dee:	89 de                	mov    %ebx,%esi
f0111df0:	89 d1                	mov    %edx,%ecx
f0111df2:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111df4:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f0111dfa:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111dff:	b0 00                	mov    $0x0,%al
f0111e01:	89 d7                	mov    %edx,%edi
f0111e03:	f3 aa                	rep stos %al,%es:(%edi)
f0111e05:	83 ec 0c             	sub    $0xc,%esp
f0111e08:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0111e0e:	50                   	push   %eax
f0111e0f:	e8 7b ee fe ff       	call   f0100c8f <execute_command>
f0111e14:	83 c4 10             	add    $0x10,%esp
		char c7[100] = "wum 0x4007FF y";execute_command(c7);
f0111e17:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111e1d:	bb 2d 92 13 f0       	mov    $0xf013922d,%ebx
f0111e22:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111e27:	89 c7                	mov    %eax,%edi
f0111e29:	89 de                	mov    %ebx,%esi
f0111e2b:	89 d1                	mov    %edx,%ecx
f0111e2d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111e2f:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f0111e35:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111e3a:	b0 00                	mov    $0x0,%al
f0111e3c:	89 d7                	mov    %edx,%edi
f0111e3e:	f3 aa                	rep stos %al,%es:(%edi)
f0111e40:	83 ec 0c             	sub    $0xc,%esp
f0111e43:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0111e49:	50                   	push   %eax
f0111e4a:	e8 40 ee fe ff       	call   f0100c8f <execute_command>
f0111e4f:	83 c4 10             	add    $0x10,%esp
		char c8[100] = "wum 0x400FFF z";execute_command(c8);
f0111e52:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0111e58:	bb 91 92 13 f0       	mov    $0xf0139291,%ebx
f0111e5d:	ba 0f 00 00 00       	mov    $0xf,%edx
f0111e62:	89 c7                	mov    %eax,%edi
f0111e64:	89 de                	mov    %ebx,%esi
f0111e66:	89 d1                	mov    %edx,%ecx
f0111e68:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0111e6a:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0111e70:	b9 55 00 00 00       	mov    $0x55,%ecx
f0111e75:	b0 00                	mov    $0x0,%al
f0111e77:	89 d7                	mov    %edx,%edi
f0111e79:	f3 aa                	rep stos %al,%es:(%edi)
f0111e7b:	83 ec 0c             	sub    $0xc,%esp
f0111e7e:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0111e84:	50                   	push   %eax
f0111e85:	e8 05 ee fe ff       	call   f0100c8f <execute_command>
f0111e8a:	83 c4 10             	add    $0x10,%esp

		//Test1
		ch1 = (char*)0x200000; ch2 = (char*)0x400000;
f0111e8d:	c7 45 bc 00 00 20 00 	movl   $0x200000,-0x44(%ebp)
f0111e94:	c7 45 b8 00 00 40 00 	movl   $0x400000,-0x48(%ebp)
		ch3 = (char*)0x2007FF; ch4 = (char*)0x4007FF;
f0111e9b:	c7 45 b4 ff 07 20 00 	movl   $0x2007ff,-0x4c(%ebp)
f0111ea2:	c7 45 b0 ff 07 40 00 	movl   $0x4007ff,-0x50(%ebp)
		ch5 = (char*)0x200FFF; ch6 = (char*)0x400FFF;
f0111ea9:	c7 45 ac ff 0f 20 00 	movl   $0x200fff,-0x54(%ebp)
f0111eb0:	c7 45 a8 ff 0f 40 00 	movl   $0x400fff,-0x58(%ebp)
		ch7 = (char*)0x201000; ch8 = (char*)0x401000;
f0111eb7:	c7 45 a4 00 10 20 00 	movl   $0x201000,-0x5c(%ebp)
f0111ebe:	c7 45 a0 00 10 40 00 	movl   $0x401000,-0x60(%ebp)
		ch9 = (char*)0x2017FF; ch10= (char*)0x4017FF;
f0111ec5:	c7 45 9c ff 17 20 00 	movl   $0x2017ff,-0x64(%ebp)
f0111ecc:	c7 45 98 ff 17 40 00 	movl   $0x4017ff,-0x68(%ebp)
		ch11= (char*)0x201FFF; ch12= (char*)0x401FFF;
f0111ed3:	c7 45 94 ff 1f 20 00 	movl   $0x201fff,-0x6c(%ebp)
f0111eda:	c7 45 90 ff 1f 40 00 	movl   $0x401fff,-0x70(%ebp)

		tch[12] = *ch12 ;
f0111ee1:	8b 45 90             	mov    -0x70(%ebp),%eax
f0111ee4:	8a 00                	mov    (%eax),%al
f0111ee6:	88 85 a7 fe ff ff    	mov    %al,-0x159(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0111eec:	e8 df a1 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0111ef1:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x200000, 0x400000, 6*kilo);
f0111ef4:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0111ef7:	89 d0                	mov    %edx,%eax
f0111ef9:	01 c0                	add    %eax,%eax
f0111efb:	01 d0                	add    %edx,%eax
f0111efd:	01 c0                	add    %eax,%eax
f0111eff:	50                   	push   %eax
f0111f00:	68 00 00 40 00       	push   $0x400000
f0111f05:	68 00 00 20 00       	push   $0x200000
f0111f0a:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f0d:	e8 2b 63 ff ff       	call   f010823d <copy_paste_chunk>
f0111f12:	83 c4 10             	add    $0x10,%esp
f0111f15:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0111f18:	e8 b3 a1 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0111f1d:	89 45 84             	mov    %eax,-0x7c(%ebp)

		correct = 1 ;
f0111f20:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f0111f27:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f0111f2b:	75 08                	jne    f0111f35 <test_copy_paste_chunk+0x929>
f0111f2d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111f30:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f0111f33:	74 2b                	je     f0111f60 <test_copy_paste_chunk+0x954>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0111f35:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0111f38:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0111f3b:	83 ec 0c             	sub    $0xc,%esp
f0111f3e:	50                   	push   %eax
f0111f3f:	ff 75 80             	pushl  -0x80(%ebp)
f0111f42:	68 18 8a 13 f0       	push   $0xf0138a18
f0111f47:	68 cc 02 00 00       	push   $0x2cc
f0111f4c:	68 de 7d 13 f0       	push   $0xf0137dde
f0111f51:	e8 dc e3 fe ff       	call   f0100332 <_warn>
f0111f56:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0111f59:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f0111f60:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111f64:	74 04                	je     f0111f6a <test_copy_paste_chunk+0x95e>
f0111f66:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111f6a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1;
f0111f71:	c7 85 7c ff ff ff 01 	movl   $0x1,-0x84(%ebp)
f0111f78:	00 00 00 
		if (CCP(proc_directory, 0x200000, 0x400000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0111f7b:	83 ec 08             	sub    $0x8,%esp
f0111f7e:	6a 01                	push   $0x1
f0111f80:	6a 07                	push   $0x7
f0111f82:	6a 07                	push   $0x7
f0111f84:	6a 07                	push   $0x7
f0111f86:	6a 07                	push   $0x7
f0111f88:	6a 01                	push   $0x1
f0111f8a:	68 00 20 00 00       	push   $0x2000
f0111f8f:	68 00 00 40 00       	push   $0x400000
f0111f94:	68 00 00 20 00       	push   $0x200000
f0111f99:	ff 75 d4             	pushl  -0x2c(%ebp)
f0111f9c:	e8 b2 35 00 00       	call   f0115553 <CCP>
f0111fa1:	83 c4 30             	add    $0x30,%esp
f0111fa4:	83 f8 01             	cmp    $0x1,%eax
f0111fa7:	74 2b                	je     f0111fd4 <test_copy_paste_chunk+0x9c8>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references)\n");
f0111fa9:	83 ec 04             	sub    $0x4,%esp
f0111fac:	68 6c 8a 13 f0       	push   $0xf0138a6c
f0111fb1:	68 d5 02 00 00       	push   $0x2d5
f0111fb6:	68 de 7d 13 f0       	push   $0xf0137dde
f0111fbb:	e8 72 e3 fe ff       	call   f0100332 <_warn>
f0111fc0:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0111fc3:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0;
f0111fca:	c7 85 7c ff ff ff 00 	movl   $0x0,-0x84(%ebp)
f0111fd1:	00 00 00 
		}
		if (correct) eval += 5 ;
f0111fd4:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0111fd8:	74 04                	je     f0111fde <test_copy_paste_chunk+0x9d2>
f0111fda:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0111fde:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		*ch3 = 'y' ;	// wum 0x2007FF y
f0111fe5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0111fe8:	c6 00 79             	movb   $0x79,(%eax)
		*ch6 = 'z' ;	// wum 0x400FFF z
f0111feb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0111fee:	c6 00 7a             	movb   $0x7a,(%eax)
		*ch7 = 'w' ;	// wum 0x201000 w
f0111ff1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0111ff4:	c6 00 77             	movb   $0x77,(%eax)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z'
f0111ff7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0111ffa:	8a 00                	mov    (%eax),%al
f0111ffc:	3c 61                	cmp    $0x61,%al
f0111ffe:	75 69                	jne    f0112069 <test_copy_paste_chunk+0xa5d>
f0112000:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112003:	8a 00                	mov    (%eax),%al
f0112005:	3c 61                	cmp    $0x61,%al
f0112007:	75 60                	jne    f0112069 <test_copy_paste_chunk+0xa5d>
f0112009:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011200c:	8a 00                	mov    (%eax),%al
f011200e:	3c 79                	cmp    $0x79,%al
f0112010:	75 57                	jne    f0112069 <test_copy_paste_chunk+0xa5d>
f0112012:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0112015:	8a 00                	mov    (%eax),%al
f0112017:	3c 62                	cmp    $0x62,%al
f0112019:	75 4e                	jne    f0112069 <test_copy_paste_chunk+0xa5d>
f011201b:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011201e:	8a 00                	mov    (%eax),%al
f0112020:	3c 63                	cmp    $0x63,%al
f0112022:	75 45                	jne    f0112069 <test_copy_paste_chunk+0xa5d>
f0112024:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0112027:	8a 00                	mov    (%eax),%al
f0112029:	3c 7a                	cmp    $0x7a,%al
f011202b:	75 3c                	jne    f0112069 <test_copy_paste_chunk+0xa5d>
				||  *ch7 != 'w' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'e' || *ch11!= 'f' || *ch12 != tch[12])
f011202d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112030:	8a 00                	mov    (%eax),%al
f0112032:	3c 77                	cmp    $0x77,%al
f0112034:	75 33                	jne    f0112069 <test_copy_paste_chunk+0xa5d>
f0112036:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0112039:	8a 00                	mov    (%eax),%al
f011203b:	3c 64                	cmp    $0x64,%al
f011203d:	75 2a                	jne    f0112069 <test_copy_paste_chunk+0xa5d>
f011203f:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112042:	8a 00                	mov    (%eax),%al
f0112044:	3c 65                	cmp    $0x65,%al
f0112046:	75 21                	jne    f0112069 <test_copy_paste_chunk+0xa5d>
f0112048:	8b 45 98             	mov    -0x68(%ebp),%eax
f011204b:	8a 00                	mov    (%eax),%al
f011204d:	3c 65                	cmp    $0x65,%al
f011204f:	75 18                	jne    f0112069 <test_copy_paste_chunk+0xa5d>
f0112051:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112054:	8a 00                	mov    (%eax),%al
f0112056:	3c 66                	cmp    $0x66,%al
f0112058:	75 0f                	jne    f0112069 <test_copy_paste_chunk+0xa5d>
f011205a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011205d:	8a 10                	mov    (%eax),%dl
f011205f:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f0112065:	38 c2                	cmp    %al,%dl
f0112067:	74 21                	je     f011208a <test_copy_paste_chunk+0xa7e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112069:	83 ec 04             	sub    $0x4,%esp
f011206c:	68 6c 89 13 f0       	push   $0xf013896c
f0112071:	68 e3 02 00 00       	push   $0x2e3
f0112076:	68 de 7d 13 f0       	push   $0xf0137dde
f011207b:	e8 b2 e2 fe ff       	call   f0100332 <_warn>
f0112080:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112083:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f011208a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011208e:	74 04                	je     f0112094 <test_copy_paste_chunk+0xa88>
f0112090:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112094:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		//Test2
		*ch10 = 'x';	// wum 0x4017FF y
f011209b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011209e:	c6 00 78             	movb   $0x78,(%eax)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01120a1:	e8 2a a0 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01120a6:	89 45 8c             	mov    %eax,-0x74(%ebp)

		ret = copy_paste_chunk(proc_directory, 0x400800, 0x200800, 3*kilo);
f01120a9:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01120ac:	89 c2                	mov    %eax,%edx
f01120ae:	01 d2                	add    %edx,%edx
f01120b0:	01 d0                	add    %edx,%eax
f01120b2:	50                   	push   %eax
f01120b3:	68 00 08 20 00       	push   $0x200800
f01120b8:	68 00 08 40 00       	push   $0x400800
f01120bd:	ff 75 d4             	pushl  -0x2c(%ebp)
f01120c0:	e8 78 61 ff ff       	call   f010823d <copy_paste_chunk>
f01120c5:	83 c4 10             	add    $0x10,%esp
f01120c8:	89 45 80             	mov    %eax,-0x80(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01120cb:	e8 00 a0 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01120d0:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || numOfFreeFramesBefore != numOfFreeFramesAfter)
f01120d3:	83 7d 80 00          	cmpl   $0x0,-0x80(%ebp)
f01120d7:	75 08                	jne    f01120e1 <test_copy_paste_chunk+0xad5>
f01120d9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01120dc:	3b 45 84             	cmp    -0x7c(%ebp),%eax
f01120df:	74 2b                	je     f011210c <test_copy_paste_chunk+0xb00>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01120e1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01120e4:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01120e7:	83 ec 0c             	sub    $0xc,%esp
f01120ea:	50                   	push   %eax
f01120eb:	ff 75 80             	pushl  -0x80(%ebp)
f01120ee:	68 18 8a 13 f0       	push   $0xf0138a18
f01120f3:	68 f3 02 00 00       	push   $0x2f3
f01120f8:	68 de 7d 13 f0       	push   $0xf0137dde
f01120fd:	e8 30 e2 fe ff       	call   f0100332 <_warn>
f0112102:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112105:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011210c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112110:	74 04                	je     f0112116 <test_copy_paste_chunk+0xb0a>
f0112112:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112116:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (CCP(proc_directory, 0x400000, 0x200000, 2*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f011211d:	83 ec 08             	sub    $0x8,%esp
f0112120:	6a 01                	push   $0x1
f0112122:	6a 07                	push   $0x7
f0112124:	6a 07                	push   $0x7
f0112126:	6a 07                	push   $0x7
f0112128:	6a 07                	push   $0x7
f011212a:	6a 01                	push   $0x1
f011212c:	68 00 20 00 00       	push   $0x2000
f0112131:	68 00 00 20 00       	push   $0x200000
f0112136:	68 00 00 40 00       	push   $0x400000
f011213b:	ff 75 d4             	pushl  -0x2c(%ebp)
f011213e:	e8 10 34 00 00       	call   f0115553 <CCP>
f0112143:	83 c4 30             	add    $0x30,%esp
f0112146:	83 f8 01             	cmp    $0x1,%eax
f0112149:	74 21                	je     f011216c <test_copy_paste_chunk+0xb60>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f011214b:	83 ec 04             	sub    $0x4,%esp
f011214e:	68 b8 8a 13 f0       	push   $0xf0138ab8
f0112153:	68 fb 02 00 00       	push   $0x2fb
f0112158:	68 de 7d 13 f0       	push   $0xf0137dde
f011215d:	e8 d0 e1 fe ff       	call   f0100332 <_warn>
f0112162:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112165:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f011216c:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112170:	74 04                	je     f0112176 <test_copy_paste_chunk+0xb6a>
f0112172:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112176:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f011217d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112180:	8a 00                	mov    (%eax),%al
f0112182:	3c 61                	cmp    $0x61,%al
f0112184:	75 69                	jne    f01121ef <test_copy_paste_chunk+0xbe3>
f0112186:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112189:	8a 00                	mov    (%eax),%al
f011218b:	3c 61                	cmp    $0x61,%al
f011218d:	75 60                	jne    f01121ef <test_copy_paste_chunk+0xbe3>
f011218f:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112192:	8a 00                	mov    (%eax),%al
f0112194:	3c 79                	cmp    $0x79,%al
f0112196:	75 57                	jne    f01121ef <test_copy_paste_chunk+0xbe3>
f0112198:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011219b:	8a 00                	mov    (%eax),%al
f011219d:	3c 62                	cmp    $0x62,%al
f011219f:	75 4e                	jne    f01121ef <test_copy_paste_chunk+0xbe3>
f01121a1:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01121a4:	8a 00                	mov    (%eax),%al
f01121a6:	3c 7a                	cmp    $0x7a,%al
f01121a8:	75 45                	jne    f01121ef <test_copy_paste_chunk+0xbe3>
f01121aa:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01121ad:	8a 00                	mov    (%eax),%al
f01121af:	3c 7a                	cmp    $0x7a,%al
f01121b1:	75 3c                	jne    f01121ef <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01121b3:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01121b6:	8a 00                	mov    (%eax),%al
			correct = 0;
		}
		if (correct) eval += 5 ;
		correct = 1 ;

		if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'z' || *ch6 != 'z' ||
f01121b8:	3c 64                	cmp    $0x64,%al
f01121ba:	75 33                	jne    f01121ef <test_copy_paste_chunk+0xbe3>
				*ch7 != 'd' || *ch8 != 'd' || *ch9 != 'e' || *ch10!= 'x' || *ch11!= 'f'  || *ch12 != tch[12])
f01121bc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01121bf:	8a 00                	mov    (%eax),%al
f01121c1:	3c 64                	cmp    $0x64,%al
f01121c3:	75 2a                	jne    f01121ef <test_copy_paste_chunk+0xbe3>
f01121c5:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01121c8:	8a 00                	mov    (%eax),%al
f01121ca:	3c 65                	cmp    $0x65,%al
f01121cc:	75 21                	jne    f01121ef <test_copy_paste_chunk+0xbe3>
f01121ce:	8b 45 98             	mov    -0x68(%ebp),%eax
f01121d1:	8a 00                	mov    (%eax),%al
f01121d3:	3c 78                	cmp    $0x78,%al
f01121d5:	75 18                	jne    f01121ef <test_copy_paste_chunk+0xbe3>
f01121d7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01121da:	8a 00                	mov    (%eax),%al
f01121dc:	3c 66                	cmp    $0x66,%al
f01121de:	75 0f                	jne    f01121ef <test_copy_paste_chunk+0xbe3>
f01121e0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01121e3:	8a 10                	mov    (%eax),%dl
f01121e5:	8a 85 a7 fe ff ff    	mov    -0x159(%ebp),%al
f01121eb:	38 c2                	cmp    %al,%dl
f01121ed:	74 21                	je     f0112210 <test_copy_paste_chunk+0xc04>
		{
			warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01121ef:	83 ec 04             	sub    $0x4,%esp
f01121f2:	68 6c 89 13 f0       	push   $0xf013896c
f01121f7:	68 04 03 00 00       	push   $0x304
f01121fc:	68 de 7d 13 f0       	push   $0xf0137dde
f0112201:	e8 2c e1 fe ff       	call   f0100332 <_warn>
f0112206:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112209:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 10 ;
f0112210:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112214:	74 04                	je     f011221a <test_copy_paste_chunk+0xc0e>
f0112216:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011221a:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

	}
	cprintf("\nCASE II: END\n") ;
f0112221:	83 ec 0c             	sub    $0xc,%esp
f0112224:	68 03 8b 13 f0       	push   $0xf0138b03
f0112229:	e8 ff e9 fe ff       	call   f0100c2d <cprintf>
f011222e:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART III: Destination page(s) doesn't exist 40% */
	/*================================================*/
	cprintf("\nCASE III: Destination page(s) doesn't exist [40%]\n") ;
f0112231:	83 ec 0c             	sub    $0xc,%esp
f0112234:	68 14 8b 13 f0       	push   $0xf0138b14
f0112239:	e8 ef e9 fe ff       	call   f0100c2d <cprintf>
f011223e:	83 c4 10             	add    $0x10,%esp
	{
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x800000", c1); execute_command(c1);
f0112241:	83 ec 04             	sub    $0x4,%esp
f0112244:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011224a:	50                   	push   %eax
f011224b:	68 48 8b 13 f0       	push   $0xf0138b48
f0112250:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112256:	50                   	push   %eax
f0112257:	e8 7f e7 01 00       	call   f01309db <strcconcat>
f011225c:	83 c4 10             	add    $0x10,%esp
f011225f:	83 ec 0c             	sub    $0xc,%esp
f0112262:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112268:	50                   	push   %eax
f0112269:	e8 21 ea fe ff       	call   f0100c8f <execute_command>
f011226e:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x801000", c1); execute_command(c1);
f0112271:	83 ec 04             	sub    $0x4,%esp
f0112274:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f011227a:	50                   	push   %eax
f011227b:	68 52 8b 13 f0       	push   $0xf0138b52
f0112280:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f0112286:	50                   	push   %eax
f0112287:	e8 4f e7 01 00       	call   f01309db <strcconcat>
f011228c:	83 c4 10             	add    $0x10,%esp
f011228f:	83 ec 0c             	sub    $0xc,%esp
f0112292:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f0112298:	50                   	push   %eax
f0112299:	e8 f1 e9 fe ff       	call   f0100c8f <execute_command>
f011229e:	83 c4 10             	add    $0x10,%esp
		/*allocate another page ====*/ strcconcat(aup_cmd, " 0x802000", c1); execute_command(c1);
f01122a1:	83 ec 04             	sub    $0x4,%esp
f01122a4:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01122aa:	50                   	push   %eax
f01122ab:	68 5c 8b 13 f0       	push   $0xf0138b5c
f01122b0:	8d 85 e8 fe ff ff    	lea    -0x118(%ebp),%eax
f01122b6:	50                   	push   %eax
f01122b7:	e8 1f e7 01 00       	call   f01309db <strcconcat>
f01122bc:	83 c4 10             	add    $0x10,%esp
f01122bf:	83 ec 0c             	sub    $0xc,%esp
f01122c2:	8d 85 0b fd ff ff    	lea    -0x2f5(%ebp),%eax
f01122c8:	50                   	push   %eax
f01122c9:	e8 c1 e9 fe ff       	call   f0100c8f <execute_command>
f01122ce:	83 c4 10             	add    $0x10,%esp
		char c14[100] = "wum 0x800000 a"; execute_command(c14);
f01122d1:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f01122d7:	bb f5 92 13 f0       	mov    $0xf01392f5,%ebx
f01122dc:	ba 0f 00 00 00       	mov    $0xf,%edx
f01122e1:	89 c7                	mov    %eax,%edi
f01122e3:	89 de                	mov    %ebx,%esi
f01122e5:	89 d1                	mov    %edx,%ecx
f01122e7:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01122e9:	8d 95 7e fd ff ff    	lea    -0x282(%ebp),%edx
f01122ef:	b9 55 00 00 00       	mov    $0x55,%ecx
f01122f4:	b0 00                	mov    $0x0,%al
f01122f6:	89 d7                	mov    %edx,%edi
f01122f8:	f3 aa                	rep stos %al,%es:(%edi)
f01122fa:	83 ec 0c             	sub    $0xc,%esp
f01122fd:	8d 85 6f fd ff ff    	lea    -0x291(%ebp),%eax
f0112303:	50                   	push   %eax
f0112304:	e8 86 e9 fe ff       	call   f0100c8f <execute_command>
f0112309:	83 c4 10             	add    $0x10,%esp
		char c15[100] = "wum 0x8017FF b"; execute_command(c15);
f011230c:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f0112312:	bb 59 93 13 f0       	mov    $0xf0139359,%ebx
f0112317:	ba 0f 00 00 00       	mov    $0xf,%edx
f011231c:	89 c7                	mov    %eax,%edi
f011231e:	89 de                	mov    %ebx,%esi
f0112320:	89 d1                	mov    %edx,%ecx
f0112322:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0112324:	8d 95 e2 fd ff ff    	lea    -0x21e(%ebp),%edx
f011232a:	b9 55 00 00 00       	mov    $0x55,%ecx
f011232f:	b0 00                	mov    $0x0,%al
f0112331:	89 d7                	mov    %edx,%edi
f0112333:	f3 aa                	rep stos %al,%es:(%edi)
f0112335:	83 ec 0c             	sub    $0xc,%esp
f0112338:	8d 85 d3 fd ff ff    	lea    -0x22d(%ebp),%eax
f011233e:	50                   	push   %eax
f011233f:	e8 4b e9 fe ff       	call   f0100c8f <execute_command>
f0112344:	83 c4 10             	add    $0x10,%esp
		char c16[100] = "wum 0x802FFF c"; execute_command(c16);
f0112347:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f011234d:	bb bd 93 13 f0       	mov    $0xf01393bd,%ebx
f0112352:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112357:	89 c7                	mov    %eax,%edi
f0112359:	89 de                	mov    %ebx,%esi
f011235b:	89 d1                	mov    %edx,%ecx
f011235d:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011235f:	8d 95 46 fe ff ff    	lea    -0x1ba(%ebp),%edx
f0112365:	b9 55 00 00 00       	mov    $0x55,%ecx
f011236a:	b0 00                	mov    $0x0,%al
f011236c:	89 d7                	mov    %edx,%edi
f011236e:	f3 aa                	rep stos %al,%es:(%edi)
f0112370:	83 ec 0c             	sub    $0xc,%esp
f0112373:	8d 85 37 fe ff ff    	lea    -0x1c9(%ebp),%eax
f0112379:	50                   	push   %eax
f011237a:	e8 10 e9 fe ff       	call   f0100c8f <execute_command>
f011237f:	83 c4 10             	add    $0x10,%esp

		//Test3
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112382:	e8 49 9d ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0112387:	89 45 8c             	mov    %eax,-0x74(%ebp)

		int ret = copy_paste_chunk(proc_directory, 0x800000, 0x900000, 12*kilo);
f011238a:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f011238d:	89 d0                	mov    %edx,%eax
f011238f:	01 c0                	add    %eax,%eax
f0112391:	01 d0                	add    %edx,%eax
f0112393:	c1 e0 02             	shl    $0x2,%eax
f0112396:	50                   	push   %eax
f0112397:	68 00 00 90 00       	push   $0x900000
f011239c:	68 00 00 80 00       	push   $0x800000
f01123a1:	ff 75 d4             	pushl  -0x2c(%ebp)
f01123a4:	e8 94 5e ff ff       	call   f010823d <copy_paste_chunk>
f01123a9:	83 c4 10             	add    $0x10,%esp
f01123ac:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01123b2:	e8 19 9d ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01123b7:	89 45 84             	mov    %eax,-0x7c(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f01123ba:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f01123c1:	75 0b                	jne    f01123ce <test_copy_paste_chunk+0xdc2>
f01123c3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01123c6:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01123c9:	83 f8 03             	cmp    $0x3,%eax
f01123cc:	74 2e                	je     f01123fc <test_copy_paste_chunk+0xdf0>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f01123ce:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01123d1:	2b 45 84             	sub    -0x7c(%ebp),%eax
f01123d4:	83 ec 0c             	sub    $0xc,%esp
f01123d7:	50                   	push   %eax
f01123d8:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01123de:	68 18 8a 13 f0       	push   $0xf0138a18
f01123e3:	68 22 03 00 00       	push   $0x322
f01123e8:	68 de 7d 13 f0       	push   $0xf0137dde
f01123ed:	e8 40 df fe ff       	call   f0100332 <_warn>
f01123f2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01123f5:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01123fc:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112400:	74 04                	je     f0112406 <test_copy_paste_chunk+0xdfa>
f0112402:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112406:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		int chkcnt = 1 ;
f011240d:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x800000, 0x900000, 3*PAGE_SIZE, 1, 0x007, 0x007, 0x007, 0x007, CHK_COPY_PASTE) != 1)
f0112414:	83 ec 08             	sub    $0x8,%esp
f0112417:	6a 01                	push   $0x1
f0112419:	6a 07                	push   $0x7
f011241b:	6a 07                	push   $0x7
f011241d:	6a 07                	push   $0x7
f011241f:	6a 07                	push   $0x7
f0112421:	6a 01                	push   $0x1
f0112423:	68 00 30 00 00       	push   $0x3000
f0112428:	68 00 00 90 00       	push   $0x900000
f011242d:	68 00 00 80 00       	push   $0x800000
f0112432:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112435:	e8 19 31 00 00       	call   f0115553 <CCP>
f011243a:	83 c4 30             	add    $0x30,%esp
f011243d:	83 f8 01             	cmp    $0x1,%eax
f0112440:	74 28                	je     f011246a <test_copy_paste_chunk+0xe5e>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112442:	83 ec 04             	sub    $0x4,%esp
f0112445:	68 b8 8a 13 f0       	push   $0xf0138ab8
f011244a:	68 2b 03 00 00       	push   $0x32b
f011244f:	68 de 7d 13 f0       	push   $0xf0137dde
f0112454:	e8 d9 de fe ff       	call   f0100332 <_warn>
f0112459:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011245c:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112463:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 5 ;
f011246a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f011246e:	74 04                	je     f0112474 <test_copy_paste_chunk+0xe68>
f0112470:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112474:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f011247b:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f011247f:	0f 84 9e 00 00 00    	je     f0112523 <test_copy_paste_chunk+0xf17>
		{
			ch1 = (char*)0x800000; ch2 = (char*)0x900000;
f0112485:	c7 45 bc 00 00 80 00 	movl   $0x800000,-0x44(%ebp)
f011248c:	c7 45 b8 00 00 90 00 	movl   $0x900000,-0x48(%ebp)
			ch3 = (char*)0x8017FF; ch4 = (char*)0x9017FF;
f0112493:	c7 45 b4 ff 17 80 00 	movl   $0x8017ff,-0x4c(%ebp)
f011249a:	c7 45 b0 ff 17 90 00 	movl   $0x9017ff,-0x50(%ebp)
			ch5 = (char*)0x802FFF; ch6 = (char*)0x902FFF;
f01124a1:	c7 45 ac ff 2f 80 00 	movl   $0x802fff,-0x54(%ebp)
f01124a8:	c7 45 a8 ff 2f 90 00 	movl   $0x902fff,-0x58(%ebp)

			*ch3 = 'y';	//wum 0x8017FF y
f01124af:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01124b2:	c6 00 79             	movb   $0x79,(%eax)
			*ch6 = 'z';	//wum 0x902FFF z
f01124b5:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01124b8:	c6 00 7a             	movb   $0x7a,(%eax)

			if (*ch1 != 'a' || *ch2 != 'a' || *ch3 != 'y' || *ch4 != 'b' || *ch5 != 'c' || *ch6 != 'z')
f01124bb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01124be:	8a 00                	mov    (%eax),%al
f01124c0:	3c 61                	cmp    $0x61,%al
f01124c2:	75 2d                	jne    f01124f1 <test_copy_paste_chunk+0xee5>
f01124c4:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01124c7:	8a 00                	mov    (%eax),%al
f01124c9:	3c 61                	cmp    $0x61,%al
f01124cb:	75 24                	jne    f01124f1 <test_copy_paste_chunk+0xee5>
f01124cd:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01124d0:	8a 00                	mov    (%eax),%al
f01124d2:	3c 79                	cmp    $0x79,%al
f01124d4:	75 1b                	jne    f01124f1 <test_copy_paste_chunk+0xee5>
f01124d6:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01124d9:	8a 00                	mov    (%eax),%al
f01124db:	3c 62                	cmp    $0x62,%al
f01124dd:	75 12                	jne    f01124f1 <test_copy_paste_chunk+0xee5>
f01124df:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01124e2:	8a 00                	mov    (%eax),%al
f01124e4:	3c 63                	cmp    $0x63,%al
f01124e6:	75 09                	jne    f01124f1 <test_copy_paste_chunk+0xee5>
f01124e8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01124eb:	8a 00                	mov    (%eax),%al
f01124ed:	3c 7a                	cmp    $0x7a,%al
f01124ef:	74 21                	je     f0112512 <test_copy_paste_chunk+0xf06>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f01124f1:	83 ec 04             	sub    $0x4,%esp
f01124f4:	68 6c 89 13 f0       	push   $0xf013896c
f01124f9:	68 3d 03 00 00       	push   $0x33d
f01124fe:	68 de 7d 13 f0       	push   $0xf0137dde
f0112503:	e8 2a de fe ff       	call   f0100332 <_warn>
f0112508:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011250b:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 10 ;
f0112512:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112516:	74 04                	je     f011251c <test_copy_paste_chunk+0xf10>
f0112518:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
			correct = 1 ;
f011251c:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
		//Test4
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112523:	e8 a8 9b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0112528:	89 45 8c             	mov    %eax,-0x74(%ebp)
		SB(proc_directory, 0x901000, 2 , 0) ;
f011252b:	6a 00                	push   $0x0
f011252d:	6a 02                	push   $0x2
f011252f:	68 00 10 90 00       	push   $0x901000
f0112534:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112537:	e8 59 2b 00 00       	call   f0115095 <SB>
f011253c:	83 c4 10             	add    $0x10,%esp
		SB(proc_directory, 0x902000, 2 , 0) ;
f011253f:	6a 00                	push   $0x0
f0112541:	6a 02                	push   $0x2
f0112543:	68 00 20 90 00       	push   $0x902000
f0112548:	ff 75 d4             	pushl  -0x2c(%ebp)
f011254b:	e8 45 2b 00 00       	call   f0115095 <SB>
f0112550:	83 c4 10             	add    $0x10,%esp

		ret = copy_paste_chunk(proc_directory, 0x901000, 0xBFF000, 8*kilo);
f0112553:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112556:	c1 e0 03             	shl    $0x3,%eax
f0112559:	50                   	push   %eax
f011255a:	68 00 f0 bf 00       	push   $0xbff000
f011255f:	68 00 10 90 00       	push   $0x901000
f0112564:	ff 75 d4             	pushl  -0x2c(%ebp)
f0112567:	e8 d1 5c ff ff       	call   f010823d <copy_paste_chunk>
f011256c:	83 c4 10             	add    $0x10,%esp
f011256f:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112575:	e8 56 9b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011257a:	89 45 84             	mov    %eax,-0x7c(%ebp)
		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 3)
f011257d:	83 bd 78 ff ff ff 00 	cmpl   $0x0,-0x88(%ebp)
f0112584:	75 0b                	jne    f0112591 <test_copy_paste_chunk+0xf85>
f0112586:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112589:	2b 45 84             	sub    -0x7c(%ebp),%eax
f011258c:	83 f8 03             	cmp    $0x3,%eax
f011258f:	74 2e                	je     f01125bf <test_copy_paste_chunk+0xfb3>
		{
			warn("[EVAL] copy_paste_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112591:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0112594:	2b 45 84             	sub    -0x7c(%ebp),%eax
f0112597:	83 ec 0c             	sub    $0xc,%esp
f011259a:	50                   	push   %eax
f011259b:	ff b5 78 ff ff ff    	pushl  -0x88(%ebp)
f01125a1:	68 18 8a 13 f0       	push   $0xf0138a18
f01125a6:	68 4d 03 00 00       	push   $0x34d
f01125ab:	68 de 7d 13 f0       	push   $0xf0137dde
f01125b0:	e8 7d dd fe ff       	call   f0100332 <_warn>
f01125b5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01125b8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		}
		if (correct) eval += 5 ;
f01125bf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01125c3:	74 04                	je     f01125c9 <test_copy_paste_chunk+0xfbd>
f01125c5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01125c9:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		chkcnt = 1 ;
f01125d0:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0x901000, 0xBFF000, 2*PAGE_SIZE, 1, 0x003, 0x007, 0x003, 0x007, CHK_COPY_PASTE) != 1)
f01125d7:	83 ec 08             	sub    $0x8,%esp
f01125da:	6a 01                	push   $0x1
f01125dc:	6a 07                	push   $0x7
f01125de:	6a 03                	push   $0x3
f01125e0:	6a 07                	push   $0x7
f01125e2:	6a 03                	push   $0x3
f01125e4:	6a 01                	push   $0x1
f01125e6:	68 00 20 00 00       	push   $0x2000
f01125eb:	68 00 f0 bf 00       	push   $0xbff000
f01125f0:	68 00 10 90 00       	push   $0x901000
f01125f5:	ff 75 d4             	pushl  -0x2c(%ebp)
f01125f8:	e8 56 2f 00 00       	call   f0115553 <CCP>
f01125fd:	83 c4 30             	add    $0x30,%esp
f0112600:	83 f8 01             	cmp    $0x1,%eax
f0112603:	74 28                	je     f011262d <test_copy_paste_chunk+0x1021>
		{
			warn("[EVAL] copy_paste_chunk: Failed (problem in permissions and/or references\n");
f0112605:	83 ec 04             	sub    $0x4,%esp
f0112608:	68 b8 8a 13 f0       	push   $0xf0138ab8
f011260d:	68 56 03 00 00       	push   $0x356
f0112612:	68 de 7d 13 f0       	push   $0xf0137dde
f0112617:	e8 16 dd fe ff       	call   f0100332 <_warn>
f011261c:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011261f:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			chkcnt = 0 ;
f0112626:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f011262d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0112631:	74 04                	je     f0112637 <test_copy_paste_chunk+0x102b>
f0112633:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112637:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)

		if (chkcnt)
f011263e:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112642:	74 72                	je     f01126b6 <test_copy_paste_chunk+0x10aa>
		{
			ch1 = (char*)0x9017FF; ch2 = (char*)0xBFF7FF; ch3 = (char*)0x902FFF;ch4 = (char*)0xC00FFF;
f0112644:	c7 45 bc ff 17 90 00 	movl   $0x9017ff,-0x44(%ebp)
f011264b:	c7 45 b8 ff f7 bf 00 	movl   $0xbff7ff,-0x48(%ebp)
f0112652:	c7 45 b4 ff 2f 90 00 	movl   $0x902fff,-0x4c(%ebp)
f0112659:	c7 45 b0 ff 0f c0 00 	movl   $0xc00fff,-0x50(%ebp)
			if (*ch1 != 'b' || *ch2 != 'b' || *ch3 != 'z' || *ch4 != 'z')
f0112660:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112663:	8a 00                	mov    (%eax),%al
f0112665:	3c 62                	cmp    $0x62,%al
f0112667:	75 1b                	jne    f0112684 <test_copy_paste_chunk+0x1078>
f0112669:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011266c:	8a 00                	mov    (%eax),%al
f011266e:	3c 62                	cmp    $0x62,%al
f0112670:	75 12                	jne    f0112684 <test_copy_paste_chunk+0x1078>
f0112672:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112675:	8a 00                	mov    (%eax),%al
f0112677:	3c 7a                	cmp    $0x7a,%al
f0112679:	75 09                	jne    f0112684 <test_copy_paste_chunk+0x1078>
f011267b:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011267e:	8a 00                	mov    (%eax),%al
f0112680:	3c 7a                	cmp    $0x7a,%al
f0112682:	74 21                	je     f01126a5 <test_copy_paste_chunk+0x1099>
			{
				warn("[EVAL] copy_paste_chunk: Failed (content is not correct)\n");
f0112684:	83 ec 04             	sub    $0x4,%esp
f0112687:	68 6c 89 13 f0       	push   $0xf013896c
f011268c:	68 62 03 00 00       	push   $0x362
f0112691:	68 de 7d 13 f0       	push   $0xf0137dde
f0112696:	e8 97 dc fe ff       	call   f0100332 <_warn>
f011269b:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011269e:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
			}
			if (correct) eval += 5 ;
f01126a5:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f01126a9:	74 04                	je     f01126af <test_copy_paste_chunk+0x10a3>
f01126ab:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01126af:	c7 45 e0 01 00 00 00 	movl   $0x1,-0x20(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f01126b6:	83 ec 0c             	sub    $0xc,%esp
f01126b9:	68 66 8b 13 f0       	push   $0xf0138b66
f01126be:	e8 6a e5 fe ff       	call   f0100c2d <cprintf>
f01126c3:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] copy_paste_chunk: FINISHED. Evaluation = %d\n", eval);
f01126c6:	83 ec 08             	sub    $0x8,%esp
f01126c9:	ff 75 e4             	pushl  -0x1c(%ebp)
f01126cc:	68 78 8b 13 f0       	push   $0xf0138b78
f01126d1:	e8 57 e5 fe ff       	call   f0100c2d <cprintf>
f01126d6:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01126d9:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01126dd:	75 10                	jne    f01126ef <test_copy_paste_chunk+0x10e3>
		cprintf("Congratulations!! test copy_paste_chunk completed successfully.\n");
f01126df:	83 ec 0c             	sub    $0xc,%esp
f01126e2:	68 ac 8b 13 f0       	push   $0xf0138bac
f01126e7:	e8 41 e5 fe ff       	call   f0100c2d <cprintf>
f01126ec:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01126ef:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f01126f4:	89 45 d0             	mov    %eax,-0x30(%ebp)
f01126f7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01126fa:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01126fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0112702:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0112705:	5b                   	pop    %ebx
f0112706:	5e                   	pop    %esi
f0112707:	5f                   	pop    %edi
f0112708:	5d                   	pop    %ebp
f0112709:	c3                   	ret    

f011270a <test_share_chunk>:

//===============================
// 3) TEST SHARE CHUNK:
//===============================
int test_share_chunk()
{
f011270a:	55                   	push   %ebp
f011270b:	89 e5                	mov    %esp,%ebp
f011270d:	57                   	push   %edi
f011270e:	56                   	push   %esi
f011270f:	53                   	push   %ebx
f0112710:	81 ec bc 00 00 00    	sub    $0xbc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0112716:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f011271c:	bb 78 88 13 f0       	mov    $0xf0138878,%ebx
f0112721:	ba 0f 00 00 00       	mov    $0xf,%edx
f0112726:	89 c7                	mov    %eax,%edi
f0112728:	89 de                	mov    %ebx,%esi
f011272a:	89 d1                	mov    %edx,%ecx
f011272c:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011272e:	8d 95 5d ff ff ff    	lea    -0xa3(%ebp),%edx
f0112734:	b9 23 00 00 00       	mov    $0x23,%ecx
f0112739:	b0 00                	mov    $0x0,%al
f011273b:	89 d7                	mov    %edx,%edi
f011273d:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f011273f:	6a 00                	push   $0x0
f0112741:	6a 0a                	push   $0xa
f0112743:	6a 14                	push   $0x14
f0112745:	8d 85 4e ff ff ff    	lea    -0xb2(%ebp),%eax
f011274b:	50                   	push   %eax
f011274c:	e8 33 5c ff ff       	call   f0108384 <env_create>
f0112751:	83 c4 10             	add    $0x10,%esp
f0112754:	89 45 d0             	mov    %eax,-0x30(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0112757:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011275a:	8b 40 5c             	mov    0x5c(%eax),%eax
f011275d:	89 45 cc             	mov    %eax,-0x34(%ebp)
	lcr3(env->env_cr3) ;
f0112760:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0112763:	8b 40 60             	mov    0x60(%eax),%eax
f0112766:	89 45 80             	mov    %eax,-0x80(%ebp)
f0112769:	8b 45 80             	mov    -0x80(%ebp),%eax
f011276c:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f011276f:	83 ec 0c             	sub    $0xc,%esp
f0112772:	ff 75 cc             	pushl  -0x34(%ebp)
f0112775:	e8 a5 2d 00 00       	call   f011551f <ClearUserSpace>
f011277a:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011277d:	c7 45 c4 00 04 00 00 	movl   $0x400,-0x3c(%ebp)
	int mega = 1024*1024 ;
f0112784:	c7 45 c0 00 00 10 00 	movl   $0x100000,-0x40(%ebp)
	uint32 eval = 0;
f011278b:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f0112792:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 20% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [20%]\n") ;
f0112796:	83 ec 0c             	sub    $0xc,%esp
f0112799:	68 24 94 13 f0       	push   $0xf0139424
f011279e:	e8 8a e4 fe ff       	call   f0100c2d <cprintf>
f01127a3:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)0xF0100000;
f01127a6:	c7 45 bc 00 00 10 f0 	movl   $0xf0100000,-0x44(%ebp)
		ptr2 = (char*)0xF1004000;
f01127ad:	c7 45 b8 00 40 00 f1 	movl   $0xf1004000,-0x48(%ebp)
		tptr[1] = *ptr1 ;
f01127b4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01127b7:	8a 00                	mov    (%eax),%al
f01127b9:	88 85 45 ff ff ff    	mov    %al,-0xbb(%ebp)
		tptr[2] = *ptr2 ;
f01127bf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01127c2:	8a 00                	mov    (%eax),%al
f01127c4:	88 85 46 ff ff ff    	mov    %al,-0xba(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f01127ca:	e8 01 99 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01127cf:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0100000,0xF0104000, 6*kilo, PERM_WRITEABLE) ;
f01127d2:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01127d5:	89 d0                	mov    %edx,%eax
f01127d7:	01 c0                	add    %eax,%eax
f01127d9:	01 d0                	add    %edx,%eax
f01127db:	01 c0                	add    %eax,%eax
f01127dd:	83 ec 0c             	sub    $0xc,%esp
f01127e0:	6a 02                	push   $0x2
f01127e2:	50                   	push   %eax
f01127e3:	68 00 40 10 f0       	push   $0xf0104000
f01127e8:	68 00 00 10 f0       	push   $0xf0100000
f01127ed:	ff 75 cc             	pushl  -0x34(%ebp)
f01127f0:	e8 62 5a ff ff       	call   f0108257 <share_chunk>
f01127f5:	83 c4 20             	add    $0x20,%esp
f01127f8:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01127fb:	e8 d0 98 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0112800:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0112803:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0112807:	75 08                	jne    f0112811 <test_share_chunk+0x107>
f0112809:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011280c:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f011280f:	74 28                	je     f0112839 <test_share_chunk+0x12f>
		{
			warn("[EVAL] share_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter));
f0112811:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112814:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112817:	83 ec 0c             	sub    $0xc,%esp
f011281a:	50                   	push   %eax
f011281b:	ff 75 b0             	pushl  -0x50(%ebp)
f011281e:	68 50 94 13 f0       	push   $0xf0139450
f0112823:	68 9e 03 00 00       	push   $0x39e
f0112828:	68 de 7d 13 f0       	push   $0xf0137dde
f011282d:	e8 00 db fe ff       	call   f0100332 <_warn>
f0112832:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112835:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0112839:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011283d:	74 04                	je     f0112843 <test_share_chunk+0x139>
f011283f:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112843:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xF0100000, 0xF0104000, 8*kilo, 1, 0x003, 0x007, 0x003, 0x007, ~CHK_SHARE) == 0)
f0112847:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011284a:	c1 e0 03             	shl    $0x3,%eax
f011284d:	83 ec 08             	sub    $0x8,%esp
f0112850:	68 fd 00 00 00       	push   $0xfd
f0112855:	6a 07                	push   $0x7
f0112857:	6a 03                	push   $0x3
f0112859:	6a 07                	push   $0x7
f011285b:	6a 03                	push   $0x3
f011285d:	6a 01                	push   $0x1
f011285f:	50                   	push   %eax
f0112860:	68 00 40 10 f0       	push   $0xf0104000
f0112865:	68 00 00 10 f0       	push   $0xf0100000
f011286a:	ff 75 cc             	pushl  -0x34(%ebp)
f011286d:	e8 e1 2c 00 00       	call   f0115553 <CCP>
f0112872:	83 c4 30             	add    $0x30,%esp
f0112875:	85 c0                	test   %eax,%eax
f0112877:	75 1e                	jne    f0112897 <test_share_chunk+0x18d>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112879:	83 ec 04             	sub    $0x4,%esp
f011287c:	68 ac 94 13 f0       	push   $0xf01394ac
f0112881:	68 a6 03 00 00       	push   $0x3a6
f0112886:	68 de 7d 13 f0       	push   $0xf0137dde
f011288b:	e8 a2 da fe ff       	call   f0100332 <_warn>
f0112890:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112893:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112897:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011289b:	74 04                	je     f01128a1 <test_share_chunk+0x197>
f011289d:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)

		*ptr1 = 'A' ;
f01128a1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01128a4:	c6 00 41             	movb   $0x41,(%eax)
		*ptr2 = 'B' ;
f01128a7:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01128aa:	c6 00 42             	movb   $0x42,(%eax)

		if ((*ptr1) != 'A' || (*ptr2) != 'B')
f01128ad:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01128b0:	8a 00                	mov    (%eax),%al
f01128b2:	3c 41                	cmp    $0x41,%al
f01128b4:	75 09                	jne    f01128bf <test_share_chunk+0x1b5>
f01128b6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01128b9:	8a 00                	mov    (%eax),%al
f01128bb:	3c 42                	cmp    $0x42,%al
f01128bd:	74 1e                	je     f01128dd <test_share_chunk+0x1d3>
		{
			warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01128bf:	83 ec 04             	sub    $0x4,%esp
f01128c2:	68 f4 94 13 f0       	push   $0xf01394f4
f01128c7:	68 b0 03 00 00       	push   $0x3b0
f01128cc:	68 de 7d 13 f0       	push   $0xf0137dde
f01128d1:	e8 5c da fe ff       	call   f0100332 <_warn>
f01128d6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01128d9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01128dd:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01128e1:	74 04                	je     f01128e7 <test_share_chunk+0x1dd>
f01128e3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01128e7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		*ptr1 = tptr[1] ;
f01128eb:	8a 95 45 ff ff ff    	mov    -0xbb(%ebp),%dl
f01128f1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01128f4:	88 10                	mov    %dl,(%eax)
		*ptr2 = tptr[2] ;
f01128f6:	8a 95 46 ff ff ff    	mov    -0xba(%ebp),%dl
f01128fc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01128ff:	88 10                	mov    %dl,(%eax)
	}
	cprintf("\nCASE I: END\n") ;
f0112901:	83 ec 0c             	sub    $0xc,%esp
f0112904:	68 29 95 13 f0       	push   $0xf0139529
f0112909:	e8 1f e3 fe ff       	call   f0100c2d <cprintf>
f011290e:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART II: Destination page(s) not exist [Supervisor] 25% */
	/*========================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor] [25%]\n") ;
f0112911:	83 ec 0c             	sub    $0xc,%esp
f0112914:	68 38 95 13 f0       	push   $0xf0139538
f0112919:	e8 0f e3 fe ff       	call   f0100c2d <cprintf>
f011291e:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112921:	e8 aa 97 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0112926:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0xF0000000,0x40000000, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f0112929:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011292c:	c1 e0 05             	shl    $0x5,%eax
f011292f:	83 ec 0c             	sub    $0xc,%esp
f0112932:	68 02 0e 00 00       	push   $0xe02
f0112937:	50                   	push   %eax
f0112938:	68 00 00 00 40       	push   $0x40000000
f011293d:	68 00 00 00 f0       	push   $0xf0000000
f0112942:	ff 75 cc             	pushl  -0x34(%ebp)
f0112945:	e8 0d 59 ff ff       	call   f0108257 <share_chunk>
f011294a:	83 c4 20             	add    $0x20,%esp
f011294d:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112950:	e8 7b 97 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0112955:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (32*mega) / (4*mega))
f0112958:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f011295c:	75 1f                	jne    f011297d <test_share_chunk+0x273>
f011295e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112961:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112964:	89 c1                	mov    %eax,%ecx
f0112966:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0112969:	c1 e0 05             	shl    $0x5,%eax
f011296c:	8b 55 c0             	mov    -0x40(%ebp),%edx
f011296f:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0112976:	99                   	cltd   
f0112977:	f7 fb                	idiv   %ebx
f0112979:	39 c1                	cmp    %eax,%ecx
f011297b:	74 28                	je     f01129a5 <test_share_chunk+0x29b>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f011297d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112980:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112983:	83 ec 0c             	sub    $0xc,%esp
f0112986:	50                   	push   %eax
f0112987:	ff 75 a8             	pushl  -0x58(%ebp)
f011298a:	68 74 95 13 f0       	push   $0xf0139574
f011298f:	68 c8 03 00 00       	push   $0x3c8
f0112994:	68 de 7d 13 f0       	push   $0xf0137dde
f0112999:	e8 94 d9 fe ff       	call   f0100332 <_warn>
f011299e:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01129a1:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01129a5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01129a9:	74 04                	je     f01129af <test_share_chunk+0x2a5>
f01129ab:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01129af:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f01129b3:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0xF0000000, 0x40000000, 32*mega, -1, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f01129ba:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01129bd:	c1 e0 05             	shl    $0x5,%eax
f01129c0:	83 ec 08             	sub    $0x8,%esp
f01129c3:	6a 02                	push   $0x2
f01129c5:	6a 07                	push   $0x7
f01129c7:	6a 03                	push   $0x3
f01129c9:	68 07 0e 00 00       	push   $0xe07
f01129ce:	68 03 0e 00 00       	push   $0xe03
f01129d3:	6a ff                	push   $0xffffffff
f01129d5:	50                   	push   %eax
f01129d6:	68 00 00 00 40       	push   $0x40000000
f01129db:	68 00 00 00 f0       	push   $0xf0000000
f01129e0:	ff 75 cc             	pushl  -0x34(%ebp)
f01129e3:	e8 6b 2b 00 00       	call   f0115553 <CCP>
f01129e8:	83 c4 30             	add    $0x30,%esp
f01129eb:	85 c0                	test   %eax,%eax
f01129ed:	75 25                	jne    f0112a14 <test_share_chunk+0x30a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f01129ef:	83 ec 04             	sub    $0x4,%esp
f01129f2:	68 ac 94 13 f0       	push   $0xf01394ac
f01129f7:	68 d1 03 00 00       	push   $0x3d1
f01129fc:	68 de 7d 13 f0       	push   $0xf0137dde
f0112a01:	e8 2c d9 fe ff       	call   f0100332 <_warn>
f0112a06:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a09:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0112a0d:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}

		if (CCP(proc_directory, 0xF0000000, 0x40000000, 12*kilo, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0112a14:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112a17:	89 d0                	mov    %edx,%eax
f0112a19:	01 c0                	add    %eax,%eax
f0112a1b:	01 d0                	add    %edx,%eax
f0112a1d:	c1 e0 02             	shl    $0x2,%eax
f0112a20:	83 ec 08             	sub    $0x8,%esp
f0112a23:	6a 02                	push   $0x2
f0112a25:	6a 07                	push   $0x7
f0112a27:	6a 03                	push   $0x3
f0112a29:	68 07 0e 00 00       	push   $0xe07
f0112a2e:	68 03 0e 00 00       	push   $0xe03
f0112a33:	6a 02                	push   $0x2
f0112a35:	50                   	push   %eax
f0112a36:	68 00 00 00 40       	push   $0x40000000
f0112a3b:	68 00 00 00 f0       	push   $0xf0000000
f0112a40:	ff 75 cc             	pushl  -0x34(%ebp)
f0112a43:	e8 0b 2b 00 00       	call   f0115553 <CCP>
f0112a48:	83 c4 30             	add    $0x30,%esp
f0112a4b:	85 c0                	test   %eax,%eax
f0112a4d:	75 1e                	jne    f0112a6d <test_share_chunk+0x363>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112a4f:	83 ec 04             	sub    $0x4,%esp
f0112a52:	68 ac 94 13 f0       	push   $0xf01394ac
f0112a57:	68 d8 03 00 00       	push   $0x3d8
f0112a5c:	68 de 7d 13 f0       	push   $0xf0137dde
f0112a61:	e8 cc d8 fe ff       	call   f0100332 <_warn>
f0112a66:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112a69:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112a6d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112a71:	74 04                	je     f0112a77 <test_share_chunk+0x36d>
f0112a73:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112a77:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		extern char end_of_kernel[];
		uint32 endRange = ((uint32)end_of_kernel - KERNEL_BASE);
f0112a7b:	b8 1c 86 6e f0       	mov    $0xf06e861c,%eax
f0112a80:	05 00 00 00 10       	add    $0x10000000,%eax
f0112a85:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		if (CCP(proc_directory, 0xF0000000+PHYS_IO_MEM, 0x40000000+PHYS_IO_MEM, endRange - PHYS_IO_MEM, 2, 0xE03, 0xE07, 0x003, 0x007, CHK_SHARE) == 0)
f0112a88:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0112a8b:	2d 00 00 0a 00       	sub    $0xa0000,%eax
f0112a90:	83 ec 08             	sub    $0x8,%esp
f0112a93:	6a 02                	push   $0x2
f0112a95:	6a 07                	push   $0x7
f0112a97:	6a 03                	push   $0x3
f0112a99:	68 07 0e 00 00       	push   $0xe07
f0112a9e:	68 03 0e 00 00       	push   $0xe03
f0112aa3:	6a 02                	push   $0x2
f0112aa5:	50                   	push   %eax
f0112aa6:	68 00 00 0a 40       	push   $0x400a0000
f0112aab:	68 00 00 0a f0       	push   $0xf00a0000
f0112ab0:	ff 75 cc             	pushl  -0x34(%ebp)
f0112ab3:	e8 9b 2a 00 00       	call   f0115553 <CCP>
f0112ab8:	83 c4 30             	add    $0x30,%esp
f0112abb:	85 c0                	test   %eax,%eax
f0112abd:	75 1e                	jne    f0112add <test_share_chunk+0x3d3>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112abf:	83 ec 04             	sub    $0x4,%esp
f0112ac2:	68 ac 94 13 f0       	push   $0xf01394ac
f0112ac7:	68 e2 03 00 00       	push   $0x3e2
f0112acc:	68 de 7d 13 f0       	push   $0xf0137dde
f0112ad1:	e8 5c d8 fe ff       	call   f0100332 <_warn>
f0112ad6:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112ad9:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112add:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112ae1:	74 04                	je     f0112ae7 <test_share_chunk+0x3dd>
f0112ae3:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112ae7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0112aeb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0112aef:	0f 84 a4 00 00 00    	je     f0112b99 <test_share_chunk+0x48f>
		{
			ptr1 = (char*)0xF00007FF; *ptr1 = 'A' ;
f0112af5:	c7 45 bc ff 07 00 f0 	movl   $0xf00007ff,-0x44(%ebp)
f0112afc:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112aff:	c6 00 41             	movb   $0x41,(%eax)
			ptr2 = (char*)0x400007FF;
f0112b02:	c7 45 b8 ff 07 00 40 	movl   $0x400007ff,-0x48(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A')
f0112b09:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112b0c:	8a 00                	mov    (%eax),%al
f0112b0e:	3c 41                	cmp    $0x41,%al
f0112b10:	75 09                	jne    f0112b1b <test_share_chunk+0x411>
f0112b12:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b15:	8a 00                	mov    (%eax),%al
f0112b17:	3c 41                	cmp    $0x41,%al
f0112b19:	74 1e                	je     f0112b39 <test_share_chunk+0x42f>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112b1b:	83 ec 04             	sub    $0x4,%esp
f0112b1e:	68 f4 94 13 f0       	push   $0xf01394f4
f0112b23:	68 ef 03 00 00       	push   $0x3ef
f0112b28:	68 de 7d 13 f0       	push   $0xf0137dde
f0112b2d:	e8 00 d8 fe ff       	call   f0100332 <_warn>
f0112b32:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112b35:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112b39:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112b3d:	74 04                	je     f0112b43 <test_share_chunk+0x439>
f0112b3f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112b43:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

			ptr1 = (char*)0x41000FFF; *ptr1 = 'C' ;
f0112b47:	c7 45 bc ff 0f 00 41 	movl   $0x41000fff,-0x44(%ebp)
f0112b4e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112b51:	c6 00 43             	movb   $0x43,(%eax)
			ptr2 = (char*)0xF1000FFF;
f0112b54:	c7 45 b8 ff 0f 00 f1 	movl   $0xf1000fff,-0x48(%ebp)

			if ((*ptr1) != 'C' || (*ptr2) != 'C')
f0112b5b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112b5e:	8a 00                	mov    (%eax),%al
f0112b60:	3c 43                	cmp    $0x43,%al
f0112b62:	75 09                	jne    f0112b6d <test_share_chunk+0x463>
f0112b64:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112b67:	8a 00                	mov    (%eax),%al
f0112b69:	3c 43                	cmp    $0x43,%al
f0112b6b:	74 1e                	je     f0112b8b <test_share_chunk+0x481>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112b6d:	83 ec 04             	sub    $0x4,%esp
f0112b70:	68 f4 94 13 f0       	push   $0xf01394f4
f0112b75:	68 fa 03 00 00       	push   $0x3fa
f0112b7a:	68 de 7d 13 f0       	push   $0xf0137dde
f0112b7f:	e8 ae d7 fe ff       	call   f0100332 <_warn>
f0112b84:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112b87:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112b8b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112b8f:	74 04                	je     f0112b95 <test_share_chunk+0x48b>
f0112b91:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112b95:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0112b99:	83 ec 0c             	sub    $0xc,%esp
f0112b9c:	68 03 8b 13 f0       	push   $0xf0138b03
f0112ba1:	e8 87 e0 fe ff       	call   f0100c2d <cprintf>
f0112ba6:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART III: Destination page(s) not exist [User r/w] 25%  */
	/*========================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [User r/w] [25%]\n") ;
f0112ba9:	83 ec 0c             	sub    $0xc,%esp
f0112bac:	68 c4 95 13 f0       	push   $0xf01395c4
f0112bb1:	e8 77 e0 fe ff       	call   f0100c2d <cprintf>
f0112bb6:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112bb9:	e8 12 95 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0112bbe:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x40000000,0x0, 648*kilo, PERM_WRITEABLE|PERM_USER) ;
f0112bc1:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112bc4:	89 d0                	mov    %edx,%eax
f0112bc6:	c1 e0 03             	shl    $0x3,%eax
f0112bc9:	01 d0                	add    %edx,%eax
f0112bcb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0112bd2:	01 d0                	add    %edx,%eax
f0112bd4:	c1 e0 03             	shl    $0x3,%eax
f0112bd7:	83 ec 0c             	sub    $0xc,%esp
f0112bda:	6a 06                	push   $0x6
f0112bdc:	50                   	push   %eax
f0112bdd:	6a 00                	push   $0x0
f0112bdf:	68 00 00 00 40       	push   $0x40000000
f0112be4:	ff 75 cc             	pushl  -0x34(%ebp)
f0112be7:	e8 6b 56 ff ff       	call   f0108257 <share_chunk>
f0112bec:	83 c4 20             	add    $0x20,%esp
f0112bef:	89 45 a0             	mov    %eax,-0x60(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112bf2:	e8 d9 94 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0112bf7:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0112bfa:	83 7d a0 00          	cmpl   $0x0,-0x60(%ebp)
f0112bfe:	75 0b                	jne    f0112c0b <test_share_chunk+0x501>
f0112c00:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112c03:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112c06:	83 f8 01             	cmp    $0x1,%eax
f0112c09:	74 28                	je     f0112c33 <test_share_chunk+0x529>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112c0b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112c0e:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112c11:	83 ec 0c             	sub    $0xc,%esp
f0112c14:	50                   	push   %eax
f0112c15:	ff 75 a0             	pushl  -0x60(%ebp)
f0112c18:	68 74 95 13 f0       	push   $0xf0139574
f0112c1d:	68 10 04 00 00       	push   $0x410
f0112c22:	68 de 7d 13 f0       	push   $0xf0137dde
f0112c27:	e8 06 d7 fe ff       	call   f0100332 <_warn>
f0112c2c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112c2f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112c33:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112c37:	74 04                	je     f0112c3d <test_share_chunk+0x533>
f0112c39:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112c3d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0112c41:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0x40000000, 0x0, PHYS_IO_MEM + 4*kilo, -1, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112c48:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112c4b:	05 00 80 02 00       	add    $0x28000,%eax
f0112c50:	c1 e0 02             	shl    $0x2,%eax
f0112c53:	83 ec 08             	sub    $0x8,%esp
f0112c56:	6a 02                	push   $0x2
f0112c58:	6a 07                	push   $0x7
f0112c5a:	6a 03                	push   $0x3
f0112c5c:	6a 07                	push   $0x7
f0112c5e:	6a 07                	push   $0x7
f0112c60:	6a ff                	push   $0xffffffff
f0112c62:	50                   	push   %eax
f0112c63:	6a 00                	push   $0x0
f0112c65:	68 00 00 00 40       	push   $0x40000000
f0112c6a:	ff 75 cc             	pushl  -0x34(%ebp)
f0112c6d:	e8 e1 28 00 00       	call   f0115553 <CCP>
f0112c72:	83 c4 30             	add    $0x30,%esp
f0112c75:	85 c0                	test   %eax,%eax
f0112c77:	75 25                	jne    f0112c9e <test_share_chunk+0x594>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112c79:	83 ec 04             	sub    $0x4,%esp
f0112c7c:	68 ac 94 13 f0       	push   $0xf01394ac
f0112c81:	68 19 04 00 00       	push   $0x419
f0112c86:	68 de 7d 13 f0       	push   $0xf0137dde
f0112c8b:	e8 a2 d6 fe ff       	call   f0100332 <_warn>
f0112c90:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112c93:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0112c97:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}

		if (CCP(proc_directory, 0x40000000, 0x0, 12*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112c9e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112ca1:	89 d0                	mov    %edx,%eax
f0112ca3:	01 c0                	add    %eax,%eax
f0112ca5:	01 d0                	add    %edx,%eax
f0112ca7:	c1 e0 02             	shl    $0x2,%eax
f0112caa:	83 ec 08             	sub    $0x8,%esp
f0112cad:	6a 02                	push   $0x2
f0112caf:	6a 07                	push   $0x7
f0112cb1:	6a 03                	push   $0x3
f0112cb3:	6a 07                	push   $0x7
f0112cb5:	6a 07                	push   $0x7
f0112cb7:	6a 03                	push   $0x3
f0112cb9:	50                   	push   %eax
f0112cba:	6a 00                	push   $0x0
f0112cbc:	68 00 00 00 40       	push   $0x40000000
f0112cc1:	ff 75 cc             	pushl  -0x34(%ebp)
f0112cc4:	e8 8a 28 00 00       	call   f0115553 <CCP>
f0112cc9:	83 c4 30             	add    $0x30,%esp
f0112ccc:	85 c0                	test   %eax,%eax
f0112cce:	75 1e                	jne    f0112cee <test_share_chunk+0x5e4>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112cd0:	83 ec 04             	sub    $0x4,%esp
f0112cd3:	68 ac 94 13 f0       	push   $0xf01394ac
f0112cd8:	68 20 04 00 00       	push   $0x420
f0112cdd:	68 de 7d 13 f0       	push   $0xf0137dde
f0112ce2:	e8 4b d6 fe ff       	call   f0100332 <_warn>
f0112ce7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112cea:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112cee:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112cf2:	74 04                	je     f0112cf8 <test_share_chunk+0x5ee>
f0112cf4:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112cf8:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40003000, 0x3000, PHYS_IO_MEM - 12*kilo, 2, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112cfc:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112cff:	89 d0                	mov    %edx,%eax
f0112d01:	01 c0                	add    %eax,%eax
f0112d03:	01 d0                	add    %edx,%eax
f0112d05:	c1 e0 02             	shl    $0x2,%eax
f0112d08:	f7 d8                	neg    %eax
f0112d0a:	05 00 00 0a 00       	add    $0xa0000,%eax
f0112d0f:	83 ec 08             	sub    $0x8,%esp
f0112d12:	6a 02                	push   $0x2
f0112d14:	6a 07                	push   $0x7
f0112d16:	6a 03                	push   $0x3
f0112d18:	6a 07                	push   $0x7
f0112d1a:	6a 07                	push   $0x7
f0112d1c:	6a 02                	push   $0x2
f0112d1e:	50                   	push   %eax
f0112d1f:	68 00 30 00 00       	push   $0x3000
f0112d24:	68 00 30 00 40       	push   $0x40003000
f0112d29:	ff 75 cc             	pushl  -0x34(%ebp)
f0112d2c:	e8 22 28 00 00       	call   f0115553 <CCP>
f0112d31:	83 c4 30             	add    $0x30,%esp
f0112d34:	85 c0                	test   %eax,%eax
f0112d36:	75 1e                	jne    f0112d56 <test_share_chunk+0x64c>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112d38:	83 ec 04             	sub    $0x4,%esp
f0112d3b:	68 ac 94 13 f0       	push   $0xf01394ac
f0112d40:	68 28 04 00 00       	push   $0x428
f0112d45:	68 de 7d 13 f0       	push   $0xf0137dde
f0112d4a:	e8 e3 d5 fe ff       	call   f0100332 <_warn>
f0112d4f:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112d52:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112d56:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112d5a:	74 04                	je     f0112d60 <test_share_chunk+0x656>
f0112d5c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112d60:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x40000000+PHYS_IO_MEM, PHYS_IO_MEM, 4*kilo, 3, 0x007, 0x007, 0x003, 0x007, CHK_SHARE) == 0)
f0112d64:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112d67:	c1 e0 02             	shl    $0x2,%eax
f0112d6a:	83 ec 08             	sub    $0x8,%esp
f0112d6d:	6a 02                	push   $0x2
f0112d6f:	6a 07                	push   $0x7
f0112d71:	6a 03                	push   $0x3
f0112d73:	6a 07                	push   $0x7
f0112d75:	6a 07                	push   $0x7
f0112d77:	6a 03                	push   $0x3
f0112d79:	50                   	push   %eax
f0112d7a:	68 00 00 0a 00       	push   $0xa0000
f0112d7f:	68 00 00 0a 40       	push   $0x400a0000
f0112d84:	ff 75 cc             	pushl  -0x34(%ebp)
f0112d87:	e8 c7 27 00 00       	call   f0115553 <CCP>
f0112d8c:	83 c4 30             	add    $0x30,%esp
f0112d8f:	85 c0                	test   %eax,%eax
f0112d91:	75 1e                	jne    f0112db1 <test_share_chunk+0x6a7>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112d93:	83 ec 04             	sub    $0x4,%esp
f0112d96:	68 ac 94 13 f0       	push   $0xf01394ac
f0112d9b:	68 30 04 00 00       	push   $0x430
f0112da0:	68 de 7d 13 f0       	push   $0xf0137dde
f0112da5:	e8 88 d5 fe ff       	call   f0100332 <_warn>
f0112daa:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112dad:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112db1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112db5:	74 04                	je     f0112dbb <test_share_chunk+0x6b1>
f0112db7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112dbb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0112dbf:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f0112dc3:	0f 84 92 00 00 00    	je     f0112e5b <test_share_chunk+0x751>
		{
			ptr1 = (char*)0x7FF;
f0112dc9:	c7 45 bc ff 07 00 00 	movl   $0x7ff,-0x44(%ebp)
			ptr2 = (char*)0xF00007FF;
f0112dd0:	c7 45 b8 ff 07 00 f0 	movl   $0xf00007ff,-0x48(%ebp)
			ptr3 = (char*)0x400007FF;
f0112dd7:	c7 45 9c ff 07 00 40 	movl   $0x400007ff,-0x64(%ebp)
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
f0112dde:	c7 45 98 ff ff 09 00 	movl   $0x9ffff,-0x68(%ebp)
f0112de5:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112de8:	c6 00 44             	movb   $0x44,(%eax)
			ptr5 = (char*)0xF009FFFF;
f0112deb:	c7 45 94 ff ff 09 f0 	movl   $0xf009ffff,-0x6c(%ebp)
			ptr6 = (char*)0x4009FFFF;
f0112df2:	c7 45 90 ff ff 09 40 	movl   $0x4009ffff,-0x70(%ebp)

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0112df9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0112dfc:	8a 00                	mov    (%eax),%al
f0112dfe:	3c 41                	cmp    $0x41,%al
f0112e00:	75 2d                	jne    f0112e2f <test_share_chunk+0x725>
f0112e02:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0112e05:	8a 00                	mov    (%eax),%al
f0112e07:	3c 41                	cmp    $0x41,%al
f0112e09:	75 24                	jne    f0112e2f <test_share_chunk+0x725>
f0112e0b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0112e0e:	8a 00                	mov    (%eax),%al
f0112e10:	3c 41                	cmp    $0x41,%al
f0112e12:	75 1b                	jne    f0112e2f <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0112e14:	8b 45 98             	mov    -0x68(%ebp),%eax
f0112e17:	8a 00                	mov    (%eax),%al
			ptr3 = (char*)0x400007FF;
			ptr4 = (char*)0x9FFFF; *ptr4 = 'D';
			ptr5 = (char*)0xF009FFFF;
			ptr6 = (char*)0x4009FFFF;

			if ((*ptr1) != 'A' || (*ptr2) != 'A' || (*ptr3) != 'A' ||
f0112e19:	3c 44                	cmp    $0x44,%al
f0112e1b:	75 12                	jne    f0112e2f <test_share_chunk+0x725>
					(*ptr4) != 'D' || (*ptr5) != 'D'|| (*ptr6) != 'D')
f0112e1d:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0112e20:	8a 00                	mov    (%eax),%al
f0112e22:	3c 44                	cmp    $0x44,%al
f0112e24:	75 09                	jne    f0112e2f <test_share_chunk+0x725>
f0112e26:	8b 45 90             	mov    -0x70(%ebp),%eax
f0112e29:	8a 00                	mov    (%eax),%al
f0112e2b:	3c 44                	cmp    $0x44,%al
f0112e2d:	74 1e                	je     f0112e4d <test_share_chunk+0x743>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f0112e2f:	83 ec 04             	sub    $0x4,%esp
f0112e32:	68 f4 94 13 f0       	push   $0xf01394f4
f0112e37:	68 42 04 00 00       	push   $0x442
f0112e3c:	68 de 7d 13 f0       	push   $0xf0137dde
f0112e41:	e8 ec d4 fe ff       	call   f0100332 <_warn>
f0112e46:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0112e49:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0112e4d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112e51:	74 04                	je     f0112e57 <test_share_chunk+0x74d>
f0112e53:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0112e57:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE III: END\n") ;
f0112e5b:	83 ec 0c             	sub    $0xc,%esp
f0112e5e:	68 66 8b 13 f0       	push   $0xf0138b66
f0112e63:	e8 c5 dd fe ff       	call   f0100c2d <cprintf>
f0112e68:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r] 30%     */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r] [30%]\n") ;
f0112e6b:	83 ec 0c             	sub    $0xc,%esp
f0112e6e:	68 00 96 13 f0       	push   $0xf0139600
f0112e73:	e8 b5 dd fe ff       	call   f0100c2d <cprintf>
f0112e78:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0112e7b:	e8 50 92 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0112e80:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = share_chunk(proc_directory, 0x9FC00,0x3FFC00, 7*kilo, PERM_USER) ;
f0112e83:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112e86:	89 d0                	mov    %edx,%eax
f0112e88:	01 c0                	add    %eax,%eax
f0112e8a:	01 d0                	add    %edx,%eax
f0112e8c:	01 c0                	add    %eax,%eax
f0112e8e:	01 d0                	add    %edx,%eax
f0112e90:	83 ec 0c             	sub    $0xc,%esp
f0112e93:	6a 04                	push   $0x4
f0112e95:	50                   	push   %eax
f0112e96:	68 00 fc 3f 00       	push   $0x3ffc00
f0112e9b:	68 00 fc 09 00       	push   $0x9fc00
f0112ea0:	ff 75 cc             	pushl  -0x34(%ebp)
f0112ea3:	e8 af 53 ff ff       	call   f0108257 <share_chunk>
f0112ea8:	83 c4 20             	add    $0x20,%esp
f0112eab:	89 45 8c             	mov    %eax,-0x74(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f0112eae:	e8 1d 92 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0112eb3:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 1)
f0112eb6:	83 7d 8c 00          	cmpl   $0x0,-0x74(%ebp)
f0112eba:	75 0b                	jne    f0112ec7 <test_share_chunk+0x7bd>
f0112ebc:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112ebf:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112ec2:	83 f8 01             	cmp    $0x1,%eax
f0112ec5:	74 28                	je     f0112eef <test_share_chunk+0x7e5>
		{
			warn("[EVAL] share_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter);
f0112ec7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0112eca:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0112ecd:	83 ec 0c             	sub    $0xc,%esp
f0112ed0:	50                   	push   %eax
f0112ed1:	ff 75 8c             	pushl  -0x74(%ebp)
f0112ed4:	68 74 95 13 f0       	push   $0xf0139574
f0112ed9:	68 58 04 00 00       	push   $0x458
f0112ede:	68 de 7d 13 f0       	push   $0xf0137dde
f0112ee3:	e8 4a d4 fe ff       	call   f0100332 <_warn>
f0112ee8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0112eeb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0112eef:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112ef3:	74 04                	je     f0112ef9 <test_share_chunk+0x7ef>
f0112ef5:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0112ef9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0112efd:	c7 45 d4 01 00 00 00 	movl   $0x1,-0x2c(%ebp)
		if (CCP(proc_directory, 0x9F000, 0x3FF000, 12*kilo, -1, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0112f04:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0112f07:	89 d0                	mov    %edx,%eax
f0112f09:	01 c0                	add    %eax,%eax
f0112f0b:	01 d0                	add    %edx,%eax
f0112f0d:	c1 e0 02             	shl    $0x2,%eax
f0112f10:	83 ec 08             	sub    $0x8,%esp
f0112f13:	6a 02                	push   $0x2
f0112f15:	6a 07                	push   $0x7
f0112f17:	6a 07                	push   $0x7
f0112f19:	6a 07                	push   $0x7
f0112f1b:	6a 05                	push   $0x5
f0112f1d:	6a ff                	push   $0xffffffff
f0112f1f:	50                   	push   %eax
f0112f20:	68 00 f0 3f 00       	push   $0x3ff000
f0112f25:	68 00 f0 09 00       	push   $0x9f000
f0112f2a:	ff 75 cc             	pushl  -0x34(%ebp)
f0112f2d:	e8 21 26 00 00       	call   f0115553 <CCP>
f0112f32:	83 c4 30             	add    $0x30,%esp
f0112f35:	85 c0                	test   %eax,%eax
f0112f37:	75 25                	jne    f0112f5e <test_share_chunk+0x854>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112f39:	83 ec 04             	sub    $0x4,%esp
f0112f3c:	68 ac 94 13 f0       	push   $0xf01394ac
f0112f41:	68 61 04 00 00       	push   $0x461
f0112f46:	68 de 7d 13 f0       	push   $0xf0137dde
f0112f4b:	e8 e2 d3 fe ff       	call   f0100332 <_warn>
f0112f50:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112f53:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0112f57:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
		}
		if (correct) eval += 5 ;
f0112f5e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112f62:	74 04                	je     f0112f68 <test_share_chunk+0x85e>
f0112f64:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112f68:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0x9F000, 0x3FF000, 4*kilo, 3, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0112f6c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112f6f:	c1 e0 02             	shl    $0x2,%eax
f0112f72:	83 ec 08             	sub    $0x8,%esp
f0112f75:	6a 02                	push   $0x2
f0112f77:	6a 07                	push   $0x7
f0112f79:	6a 07                	push   $0x7
f0112f7b:	6a 07                	push   $0x7
f0112f7d:	6a 05                	push   $0x5
f0112f7f:	6a 03                	push   $0x3
f0112f81:	50                   	push   %eax
f0112f82:	68 00 f0 3f 00       	push   $0x3ff000
f0112f87:	68 00 f0 09 00       	push   $0x9f000
f0112f8c:	ff 75 cc             	pushl  -0x34(%ebp)
f0112f8f:	e8 bf 25 00 00       	call   f0115553 <CCP>
f0112f94:	83 c4 30             	add    $0x30,%esp
f0112f97:	85 c0                	test   %eax,%eax
f0112f99:	75 1e                	jne    f0112fb9 <test_share_chunk+0x8af>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112f9b:	83 ec 04             	sub    $0x4,%esp
f0112f9e:	68 ac 94 13 f0       	push   $0xf01394ac
f0112fa3:	68 6a 04 00 00       	push   $0x46a
f0112fa8:	68 de 7d 13 f0       	push   $0xf0137dde
f0112fad:	e8 80 d3 fe ff       	call   f0100332 <_warn>
f0112fb2:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0112fb5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0112fb9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0112fbd:	74 04                	je     f0112fc3 <test_share_chunk+0x8b9>
f0112fbf:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0112fc3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0xA0000, 0x400000, 8*kilo, 4, 0x005, 0x007, 0x007, 0x007, CHK_SHARE) == 0)
f0112fc7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0112fca:	c1 e0 03             	shl    $0x3,%eax
f0112fcd:	83 ec 08             	sub    $0x8,%esp
f0112fd0:	6a 02                	push   $0x2
f0112fd2:	6a 07                	push   $0x7
f0112fd4:	6a 07                	push   $0x7
f0112fd6:	6a 07                	push   $0x7
f0112fd8:	6a 05                	push   $0x5
f0112fda:	6a 04                	push   $0x4
f0112fdc:	50                   	push   %eax
f0112fdd:	68 00 00 40 00       	push   $0x400000
f0112fe2:	68 00 00 0a 00       	push   $0xa0000
f0112fe7:	ff 75 cc             	pushl  -0x34(%ebp)
f0112fea:	e8 64 25 00 00       	call   f0115553 <CCP>
f0112fef:	83 c4 30             	add    $0x30,%esp
f0112ff2:	85 c0                	test   %eax,%eax
f0112ff4:	75 1e                	jne    f0113014 <test_share_chunk+0x90a>
		{
			warn("[EVAL] share_chunk: Failed (problem in permissions and/or references\n");
f0112ff6:	83 ec 04             	sub    $0x4,%esp
f0112ff9:	68 ac 94 13 f0       	push   $0xf01394ac
f0112ffe:	68 72 04 00 00       	push   $0x472
f0113003:	68 de 7d 13 f0       	push   $0xf0137dde
f0113008:	e8 25 d3 fe ff       	call   f0100332 <_warn>
f011300d:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113010:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113014:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113018:	74 04                	je     f011301e <test_share_chunk+0x914>
f011301a:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011301e:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113022:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f0113026:	0f 84 b2 00 00 00    	je     f01130de <test_share_chunk+0x9d4>
		{
			ptr1 = (char*)0x0009FFFF;
f011302c:	c7 45 bc ff ff 09 00 	movl   $0x9ffff,-0x44(%ebp)
			ptr2 = (char*)0x003FFFFF;
f0113033:	c7 45 b8 ff ff 3f 00 	movl   $0x3fffff,-0x48(%ebp)
			ptr3 = (char*)0x4009FFFF;
f011303a:	c7 45 9c ff ff 09 40 	movl   $0x4009ffff,-0x64(%ebp)
			ptr4 = (char*)0xF009FFFF;
f0113041:	c7 45 98 ff ff 09 f0 	movl   $0xf009ffff,-0x68(%ebp)

			ptr5 = (char*)0x000A1001;
f0113048:	c7 45 94 01 10 0a 00 	movl   $0xa1001,-0x6c(%ebp)
			ptr6 = (char*)0x00401001;
f011304f:	c7 45 90 01 10 40 00 	movl   $0x401001,-0x70(%ebp)
			ptr7 = (char*)0x400A1001;
f0113056:	c7 45 88 01 10 0a 40 	movl   $0x400a1001,-0x78(%ebp)
			ptr8 = (char*)0xF00A1001;
f011305d:	c7 45 84 01 10 0a f0 	movl   $0xf00a1001,-0x7c(%ebp)

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113064:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113067:	8a 00                	mov    (%eax),%al
f0113069:	3c 44                	cmp    $0x44,%al
f011306b:	75 45                	jne    f01130b2 <test_share_chunk+0x9a8>
f011306d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0113070:	8a 00                	mov    (%eax),%al
f0113072:	3c 44                	cmp    $0x44,%al
f0113074:	75 3c                	jne    f01130b2 <test_share_chunk+0x9a8>
f0113076:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0113079:	8a 00                	mov    (%eax),%al
f011307b:	3c 44                	cmp    $0x44,%al
f011307d:	75 33                	jne    f01130b2 <test_share_chunk+0x9a8>
f011307f:	8b 45 98             	mov    -0x68(%ebp),%eax
f0113082:	8a 00                	mov    (%eax),%al
f0113084:	3c 44                	cmp    $0x44,%al
f0113086:	75 2a                	jne    f01130b2 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113088:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011308b:	8a 10                	mov    (%eax),%dl
f011308d:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113090:	8a 00                	mov    (%eax),%al
			ptr5 = (char*)0x000A1001;
			ptr6 = (char*)0x00401001;
			ptr7 = (char*)0x400A1001;
			ptr8 = (char*)0xF00A1001;

			if ((*ptr1) != 'D' || (*ptr2) != 'D' || (*ptr3) != 'D' || (*ptr4) != 'D' ||
f0113092:	38 c2                	cmp    %al,%dl
f0113094:	75 1c                	jne    f01130b2 <test_share_chunk+0x9a8>
					(*ptr5) != (*ptr6) || (*ptr5) != (*ptr7) ||(*ptr5) != (*ptr8))
f0113096:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0113099:	8a 10                	mov    (%eax),%dl
f011309b:	8b 45 88             	mov    -0x78(%ebp),%eax
f011309e:	8a 00                	mov    (%eax),%al
f01130a0:	38 c2                	cmp    %al,%dl
f01130a2:	75 0e                	jne    f01130b2 <test_share_chunk+0x9a8>
f01130a4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01130a7:	8a 10                	mov    (%eax),%dl
f01130a9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01130ac:	8a 00                	mov    (%eax),%al
f01130ae:	38 c2                	cmp    %al,%dl
f01130b0:	74 1e                	je     f01130d0 <test_share_chunk+0x9c6>
			{
				warn("[EVAL] share_chunk: Failed (content is not correct)\n");
f01130b2:	83 ec 04             	sub    $0x4,%esp
f01130b5:	68 f4 94 13 f0       	push   $0xf01394f4
f01130ba:	68 87 04 00 00       	push   $0x487
f01130bf:	68 de 7d 13 f0       	push   $0xf0137dde
f01130c4:	e8 69 d2 fe ff       	call   f0100332 <_warn>
f01130c9:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f01130cc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f01130d0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01130d4:	74 04                	je     f01130da <test_share_chunk+0x9d0>
f01130d6:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f01130da:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE IV: END\n") ;
f01130de:	83 ec 0c             	sub    $0xc,%esp
f01130e1:	68 38 96 13 f0       	push   $0xf0139638
f01130e6:	e8 42 db fe ff       	call   f0100c2d <cprintf>
f01130eb:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] share_chunk: FINISHED. Evaluation = %d\n", eval);
f01130ee:	83 ec 08             	sub    $0x8,%esp
f01130f1:	ff 75 e4             	pushl  -0x1c(%ebp)
f01130f4:	68 48 96 13 f0       	push   $0xf0139648
f01130f9:	e8 2f db fe ff       	call   f0100c2d <cprintf>
f01130fe:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0113101:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0113105:	75 10                	jne    f0113117 <test_share_chunk+0xa0d>
		cprintf("Congratulations!! test share_chunk completed successfully.\n");
f0113107:	83 ec 0c             	sub    $0xc,%esp
f011310a:	68 78 96 13 f0       	push   $0xf0139678
f011310f:	e8 19 db fe ff       	call   f0100c2d <cprintf>
f0113114:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0113117:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f011311c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011311f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113122:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0113125:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011312a:	8d 65 f4             	lea    -0xc(%ebp),%esp
f011312d:	5b                   	pop    %ebx
f011312e:	5e                   	pop    %esi
f011312f:	5f                   	pop    %edi
f0113130:	5d                   	pop    %ebp
f0113131:	c3                   	ret    

f0113132 <test_allocate_chunk>:

//===============================
// 4) TEST ALLOCATE CHUNK:
//===============================
int test_allocate_chunk()
{
f0113132:	55                   	push   %ebp
f0113133:	89 e5                	mov    %esp,%ebp
f0113135:	57                   	push   %edi
f0113136:	56                   	push   %esi
f0113137:	53                   	push   %ebx
f0113138:	81 ec ac 00 00 00    	sub    $0xac,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f011313e:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113144:	bb 78 88 13 f0       	mov    $0xf0138878,%ebx
f0113149:	ba 0f 00 00 00       	mov    $0xf,%edx
f011314e:	89 c7                	mov    %eax,%edi
f0113150:	89 de                	mov    %ebx,%esi
f0113152:	89 d1                	mov    %edx,%ecx
f0113154:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113156:	8d 95 6d ff ff ff    	lea    -0x93(%ebp),%edx
f011315c:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113161:	b0 00                	mov    $0x0,%al
f0113163:	89 d7                	mov    %edx,%edi
f0113165:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113167:	6a 00                	push   $0x0
f0113169:	6a 0a                	push   $0xa
f011316b:	6a 14                	push   $0x14
f011316d:	8d 85 5e ff ff ff    	lea    -0xa2(%ebp),%eax
f0113173:	50                   	push   %eax
f0113174:	e8 0b 52 ff ff       	call   f0108384 <env_create>
f0113179:	83 c4 10             	add    $0x10,%esp
f011317c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f011317f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0113182:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113185:	89 45 d0             	mov    %eax,-0x30(%ebp)
	lcr3(env->env_cr3) ;
f0113188:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011318b:	8b 40 60             	mov    0x60(%eax),%eax
f011318e:	89 45 90             	mov    %eax,-0x70(%ebp)
f0113191:	8b 45 90             	mov    -0x70(%ebp),%eax
f0113194:	0f 22 d8             	mov    %eax,%cr3
	//===================================================

	ClearUserSpace(proc_directory);
f0113197:	83 ec 0c             	sub    $0xc,%esp
f011319a:	ff 75 d0             	pushl  -0x30(%ebp)
f011319d:	e8 7d 23 00 00       	call   f011551f <ClearUserSpace>
f01131a2:	83 c4 10             	add    $0x10,%esp

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f01131a5:	c7 45 c8 00 04 00 00 	movl   $0x400,-0x38(%ebp)
	int mega = 1024*1024 ;
f01131ac:	c7 45 c4 00 00 10 00 	movl   $0x100000,-0x3c(%ebp)
	uint32 eval = 0;
f01131b3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct =1 ;
f01131ba:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	extern char end_of_kernel[];

	/*======================================*/
	/*PART I: Destination page(s) exist 30% */
	/*======================================*/
	cprintf("\nCASE I: Destination page(s) exist [30%]\n") ;
f01131be:	83 ec 0c             	sub    $0xc,%esp
f01131c1:	68 b4 96 13 f0       	push   $0xf01396b4
f01131c6:	e8 62 da fe ff       	call   f0100c2d <cprintf>
f01131cb:	83 c4 10             	add    $0x10,%esp
	{
		ptr1 = (char*)KERNEL_STACK_TOP - 1;
f01131ce:	c7 45 c0 ff ff bf ef 	movl   $0xefbfffff,-0x40(%ebp)
		ptr2 = (char*)KERNEL_STACK_TOP - 2;
f01131d5:	c7 45 bc fe ff bf ef 	movl   $0xefbffffe,-0x44(%ebp)
		tptr[1] = *ptr1 ;
f01131dc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01131df:	8a 00                	mov    (%eax),%al
f01131e1:	88 85 55 ff ff ff    	mov    %al,-0xab(%ebp)
		tptr[2] = *ptr2 ;
f01131e7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01131ea:	8a 00                	mov    (%eax),%al
f01131ec:	88 85 56 ff ff ff    	mov    %al,-0xaa(%ebp)
		uint32 old_perms = GP(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE) ;
f01131f2:	83 ec 08             	sub    $0x8,%esp
f01131f5:	68 00 f0 bf ef       	push   $0xefbff000
f01131fa:	ff 75 d0             	pushl  -0x30(%ebp)
f01131fd:	e8 84 22 00 00       	call   f0115486 <GP>
f0113202:	83 c4 10             	add    $0x10,%esp
f0113205:	89 45 b8             	mov    %eax,-0x48(%ebp)
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113208:	e8 c3 8e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011320d:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 1*PAGE_SIZE, 4*kilo, PERM_WRITEABLE) ;
f0113210:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113213:	c1 e0 02             	shl    $0x2,%eax
f0113216:	6a 02                	push   $0x2
f0113218:	50                   	push   %eax
f0113219:	68 00 f0 bf ef       	push   $0xefbff000
f011321e:	ff 75 d0             	pushl  -0x30(%ebp)
f0113221:	e8 4b 50 ff ff       	call   f0108271 <allocate_chunk>
f0113226:	83 c4 10             	add    $0x10,%esp
f0113229:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011322c:	e8 9f 8e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0113231:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f0113234:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f0113238:	75 08                	jne    f0113242 <test_allocate_chunk+0x110>
f011323a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011323d:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f0113240:	74 2a                	je     f011326c <test_allocate_chunk+0x13a>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f0113242:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113245:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113248:	83 ec 08             	sub    $0x8,%esp
f011324b:	6a 00                	push   $0x0
f011324d:	50                   	push   %eax
f011324e:	ff 75 b0             	pushl  -0x50(%ebp)
f0113251:	68 e0 96 13 f0       	push   $0xf01396e0
f0113256:	68 c3 04 00 00       	push   $0x4c3
f011325b:	68 de 7d 13 f0       	push   $0xf0137dde
f0113260:	e8 cd d0 fe ff       	call   f0100332 <_warn>
f0113265:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113268:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011326c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113270:	74 04                	je     f0113276 <test_allocate_chunk+0x144>
f0113272:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113276:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		numOfFreeFramesBefore = sys_calculate_free_frames();
f011327a:	e8 51 8e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011327f:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		ret = allocate_chunk(proc_directory, KERNEL_STACK_TOP - 5*kilo, 2*kilo, PERM_WRITEABLE) ;
f0113282:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113285:	01 c0                	add    %eax,%eax
f0113287:	89 c1                	mov    %eax,%ecx
f0113289:	8b 55 c8             	mov    -0x38(%ebp),%edx
f011328c:	89 d0                	mov    %edx,%eax
f011328e:	c1 e0 02             	shl    $0x2,%eax
f0113291:	01 d0                	add    %edx,%eax
f0113293:	f7 d8                	neg    %eax
f0113295:	2d 00 00 40 10       	sub    $0x10400000,%eax
f011329a:	6a 02                	push   $0x2
f011329c:	51                   	push   %ecx
f011329d:	50                   	push   %eax
f011329e:	ff 75 d0             	pushl  -0x30(%ebp)
f01132a1:	e8 cb 4f ff ff       	call   f0108271 <allocate_chunk>
f01132a6:	83 c4 10             	add    $0x10,%esp
f01132a9:	89 45 b0             	mov    %eax,-0x50(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01132ac:	e8 1f 8e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01132b1:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != -1 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != 0)
f01132b4:	83 7d b0 ff          	cmpl   $0xffffffff,-0x50(%ebp)
f01132b8:	75 08                	jne    f01132c2 <test_allocate_chunk+0x190>
f01132ba:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01132bd:	3b 45 ac             	cmp    -0x54(%ebp),%eax
f01132c0:	74 2a                	je     f01132ec <test_allocate_chunk+0x1ba>
		{
			warn("[EVAL] allocate_chunk: Failed (dest is exist... operation should be denied) ret=%d diff=%d expected=%d\n", ret, (numOfFreeFramesBefore - numOfFreeFramesAfter), 0);
f01132c2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01132c5:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01132c8:	83 ec 08             	sub    $0x8,%esp
f01132cb:	6a 00                	push   $0x0
f01132cd:	50                   	push   %eax
f01132ce:	ff 75 b0             	pushl  -0x50(%ebp)
f01132d1:	68 e0 96 13 f0       	push   $0xf01396e0
f01132d6:	68 d1 04 00 00       	push   $0x4d1
f01132db:	68 de 7d 13 f0       	push   $0xf0137dde
f01132e0:	e8 4d d0 fe ff       	call   f0100332 <_warn>
f01132e5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01132e8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01132ec:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01132f0:	74 04                	je     f01132f6 <test_allocate_chunk+0x1c4>
f01132f2:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01132f6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (CCP(proc_directory, 0, KERNEL_STACK_TOP-1*PAGE_SIZE, 4*kilo, 1, old_perms, 0xFFF, 0, 0, CHK_ALLOC) == 0)
f01132fa:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01132fd:	c1 e0 02             	shl    $0x2,%eax
f0113300:	83 ec 08             	sub    $0x8,%esp
f0113303:	6a 03                	push   $0x3
f0113305:	6a 00                	push   $0x0
f0113307:	6a 00                	push   $0x0
f0113309:	68 ff 0f 00 00       	push   $0xfff
f011330e:	ff 75 b8             	pushl  -0x48(%ebp)
f0113311:	6a 01                	push   $0x1
f0113313:	50                   	push   %eax
f0113314:	68 00 f0 bf ef       	push   $0xefbff000
f0113319:	6a 00                	push   $0x0
f011331b:	ff 75 d0             	pushl  -0x30(%ebp)
f011331e:	e8 30 22 00 00       	call   f0115553 <CCP>
f0113323:	83 c4 30             	add    $0x30,%esp
f0113326:	85 c0                	test   %eax,%eax
f0113328:	75 1e                	jne    f0113348 <test_allocate_chunk+0x216>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011332a:	83 ec 04             	sub    $0x4,%esp
f011332d:	68 48 97 13 f0       	push   $0xf0139748
f0113332:	68 d9 04 00 00       	push   $0x4d9
f0113337:	68 de 7d 13 f0       	push   $0xf0137dde
f011333c:	e8 f1 cf fe ff       	call   f0100332 <_warn>
f0113341:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113344:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113348:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011334c:	74 04                	je     f0113352 <test_allocate_chunk+0x220>
f011334e:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113352:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if ((*ptr1) != tptr[1] || (*ptr2) != tptr[2])
f0113356:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113359:	8a 10                	mov    (%eax),%dl
f011335b:	8a 85 55 ff ff ff    	mov    -0xab(%ebp),%al
f0113361:	38 c2                	cmp    %al,%dl
f0113363:	75 0f                	jne    f0113374 <test_allocate_chunk+0x242>
f0113365:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113368:	8a 10                	mov    (%eax),%dl
f011336a:	8a 85 56 ff ff ff    	mov    -0xaa(%ebp),%al
f0113370:	38 c2                	cmp    %al,%dl
f0113372:	74 1e                	je     f0113392 <test_allocate_chunk+0x260>
		{
			warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113374:	83 ec 04             	sub    $0x4,%esp
f0113377:	68 94 97 13 f0       	push   $0xf0139794
f011337c:	68 e1 04 00 00       	push   $0x4e1
f0113381:	68 de 7d 13 f0       	push   $0xf0137dde
f0113386:	e8 a7 cf fe ff       	call   f0100332 <_warn>
f011338b:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f011338e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113392:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113396:	74 04                	je     f011339c <test_allocate_chunk+0x26a>
f0113398:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011339c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01133a0:	83 ec 0c             	sub    $0xc,%esp
f01133a3:	68 29 95 13 f0       	push   $0xf0139529
f01133a8:	e8 80 d8 fe ff       	call   f0100c2d <cprintf>
f01133ad:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART II: Destination page(s) not exist [Supervisor r/w] 20% */
	/*============================================================*/
	cprintf("\nCASE II: Destination page(s) not exist [Supervisor r/w] [20%]\n") ;
f01133b0:	83 ec 0c             	sub    $0xc,%esp
f01133b3:	68 cc 97 13 f0       	push   $0xf01397cc
f01133b8:	e8 70 d8 fe ff       	call   f0100c2d <cprintf>
f01133bd:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01133c0:	e8 0b 8d ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01133c5:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0, 32*mega, PERM_WRITEABLE | PERM_AVAILABLE) ;
f01133c8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01133cb:	c1 e0 05             	shl    $0x5,%eax
f01133ce:	68 02 0e 00 00       	push   $0xe02
f01133d3:	50                   	push   %eax
f01133d4:	6a 00                	push   $0x0
f01133d6:	ff 75 d0             	pushl  -0x30(%ebp)
f01133d9:	e8 93 4e ff ff       	call   f0108271 <allocate_chunk>
f01133de:	83 c4 10             	add    $0x10,%esp
f01133e1:	89 45 a8             	mov    %eax,-0x58(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01133e4:	e8 e7 8c ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01133e9:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((32*mega)/(4*mega) + (32*mega)/(4*kilo)))
f01133ec:	83 7d a8 00          	cmpl   $0x0,-0x58(%ebp)
f01133f0:	75 36                	jne    f0113428 <test_allocate_chunk+0x2f6>
f01133f2:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01133f5:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01133f8:	89 c1                	mov    %eax,%ecx
f01133fa:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01133fd:	c1 e0 05             	shl    $0x5,%eax
f0113400:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113403:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011340a:	99                   	cltd   
f011340b:	f7 fe                	idiv   %esi
f011340d:	89 c3                	mov    %eax,%ebx
f011340f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113412:	c1 e0 05             	shl    $0x5,%eax
f0113415:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113418:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011341f:	99                   	cltd   
f0113420:	f7 fe                	idiv   %esi
f0113422:	01 d8                	add    %ebx,%eax
f0113424:	39 c1                	cmp    %eax,%ecx
f0113426:	74 54                	je     f011347c <test_allocate_chunk+0x34a>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((32*mega)/(4*mega) + (32*mega)/(4*kilo)));
f0113428:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011342b:	c1 e0 05             	shl    $0x5,%eax
f011342e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113431:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113438:	99                   	cltd   
f0113439:	f7 ff                	idiv   %edi
f011343b:	89 c1                	mov    %eax,%ecx
f011343d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113440:	c1 e0 05             	shl    $0x5,%eax
f0113443:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113446:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f011344d:	99                   	cltd   
f011344e:	f7 fe                	idiv   %esi
f0113450:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113453:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113456:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113459:	83 ec 08             	sub    $0x8,%esp
f011345c:	52                   	push   %edx
f011345d:	50                   	push   %eax
f011345e:	ff 75 a8             	pushl  -0x58(%ebp)
f0113461:	68 0c 98 13 f0       	push   $0xf013980c
f0113466:	68 f6 04 00 00       	push   $0x4f6
f011346b:	68 de 7d 13 f0       	push   $0xf0137dde
f0113470:	e8 bd ce fe ff       	call   f0100332 <_warn>
f0113475:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113478:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011347c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113480:	74 04                	je     f0113486 <test_allocate_chunk+0x354>
f0113482:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113486:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011348a:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
		if (CCP(proc_directory, 0, 0x0, 32*mega, 1, 0xE03, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113491:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113494:	c1 e0 05             	shl    $0x5,%eax
f0113497:	83 ec 08             	sub    $0x8,%esp
f011349a:	6a 03                	push   $0x3
f011349c:	6a 00                	push   $0x0
f011349e:	6a 00                	push   $0x0
f01134a0:	68 07 0e 00 00       	push   $0xe07
f01134a5:	68 03 0e 00 00       	push   $0xe03
f01134aa:	6a 01                	push   $0x1
f01134ac:	50                   	push   %eax
f01134ad:	6a 00                	push   $0x0
f01134af:	6a 00                	push   $0x0
f01134b1:	ff 75 d0             	pushl  -0x30(%ebp)
f01134b4:	e8 9a 20 00 00       	call   f0115553 <CCP>
f01134b9:	83 c4 30             	add    $0x30,%esp
f01134bc:	85 c0                	test   %eax,%eax
f01134be:	75 25                	jne    f01134e5 <test_allocate_chunk+0x3b3>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01134c0:	83 ec 04             	sub    $0x4,%esp
f01134c3:	68 48 97 13 f0       	push   $0xf0139748
f01134c8:	68 ff 04 00 00       	push   $0x4ff
f01134cd:	68 de 7d 13 f0       	push   $0xf0137dde
f01134d2:	e8 5b ce fe ff       	call   f0100332 <_warn>
f01134d7:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01134da:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01134de:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		}
		if (correct) eval += 10 ;
f01134e5:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01134e9:	74 04                	je     f01134ef <test_allocate_chunk+0x3bd>
f01134eb:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01134ef:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f01134f3:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f01134f7:	74 5a                	je     f0113553 <test_allocate_chunk+0x421>
		{
			ptr1 = (char*)(0x0+2*kilo); *ptr1 = 'K' ;
f01134f9:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01134fc:	01 c0                	add    %eax,%eax
f01134fe:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113501:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113504:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(0x0+2*mega); *ptr2 = 'M' ;
f0113507:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011350a:	01 c0                	add    %eax,%eax
f011350c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011350f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113512:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f0113515:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113518:	8a 00                	mov    (%eax),%al
f011351a:	3c 4b                	cmp    $0x4b,%al
f011351c:	75 09                	jne    f0113527 <test_allocate_chunk+0x3f5>
f011351e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0113521:	8a 00                	mov    (%eax),%al
f0113523:	3c 4d                	cmp    $0x4d,%al
f0113525:	74 1e                	je     f0113545 <test_allocate_chunk+0x413>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113527:	83 ec 04             	sub    $0x4,%esp
f011352a:	68 94 97 13 f0       	push   $0xf0139794
f011352f:	68 0d 05 00 00       	push   $0x50d
f0113534:	68 de 7d 13 f0       	push   $0xf0137dde
f0113539:	e8 f4 cd fe ff       	call   f0100332 <_warn>
f011353e:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f0113541:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f0113545:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113549:	74 04                	je     f011354f <test_allocate_chunk+0x41d>
f011354b:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f011354f:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
		}
	}
	cprintf("\nCASE II: END\n") ;
f0113553:	83 ec 0c             	sub    $0xc,%esp
f0113556:	68 03 8b 13 f0       	push   $0xf0138b03
f011355b:	e8 cd d6 fe ff       	call   f0100c2d <cprintf>
f0113560:	83 c4 10             	add    $0x10,%esp

	/*============================================================*/
	/*PART III: Destination page(s) not exist [Supervisor r] 15%  */
	/*============================================================*/
	cprintf("\nCASE III: Destination page(s) not exist [Supervisor r] [15%]\n") ;
f0113563:	83 ec 0c             	sub    $0xc,%esp
f0113566:	68 6c 98 13 f0       	push   $0xf013986c
f011356b:	e8 bd d6 fe ff       	call   f0100c2d <cprintf>
f0113570:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f0113573:	e8 58 8b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0113578:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, 0x0+32*mega, 64*mega, 0) ;
f011357b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011357e:	c1 e0 06             	shl    $0x6,%eax
f0113581:	89 c2                	mov    %eax,%edx
f0113583:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113586:	c1 e0 05             	shl    $0x5,%eax
f0113589:	6a 00                	push   $0x0
f011358b:	52                   	push   %edx
f011358c:	50                   	push   %eax
f011358d:	ff 75 d0             	pushl  -0x30(%ebp)
f0113590:	e8 dc 4c ff ff       	call   f0108271 <allocate_chunk>
f0113595:	83 c4 10             	add    $0x10,%esp
f0113598:	89 45 a4             	mov    %eax,-0x5c(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f011359b:	e8 30 8b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01135a0:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*mega) + (64*mega)/(4*kilo)))
f01135a3:	83 7d a4 00          	cmpl   $0x0,-0x5c(%ebp)
f01135a7:	75 36                	jne    f01135df <test_allocate_chunk+0x4ad>
f01135a9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01135ac:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01135af:	89 c1                	mov    %eax,%ecx
f01135b1:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01135b4:	c1 e0 06             	shl    $0x6,%eax
f01135b7:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01135ba:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f01135c1:	99                   	cltd   
f01135c2:	f7 ff                	idiv   %edi
f01135c4:	89 c3                	mov    %eax,%ebx
f01135c6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01135c9:	c1 e0 06             	shl    $0x6,%eax
f01135cc:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01135cf:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f01135d6:	99                   	cltd   
f01135d7:	f7 fe                	idiv   %esi
f01135d9:	01 d8                	add    %ebx,%eax
f01135db:	39 c1                	cmp    %eax,%ecx
f01135dd:	74 54                	je     f0113633 <test_allocate_chunk+0x501>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*mega) + (64*mega)/(4*kilo)));
f01135df:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01135e2:	c1 e0 06             	shl    $0x6,%eax
f01135e5:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f01135e8:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f01135ef:	99                   	cltd   
f01135f0:	f7 fb                	idiv   %ebx
f01135f2:	89 c1                	mov    %eax,%ecx
f01135f4:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01135f7:	c1 e0 06             	shl    $0x6,%eax
f01135fa:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01135fd:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113604:	99                   	cltd   
f0113605:	f7 ff                	idiv   %edi
f0113607:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f011360a:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011360d:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113610:	83 ec 08             	sub    $0x8,%esp
f0113613:	52                   	push   %edx
f0113614:	50                   	push   %eax
f0113615:	ff 75 a4             	pushl  -0x5c(%ebp)
f0113618:	68 0c 98 13 f0       	push   $0xf013980c
f011361d:	68 23 05 00 00       	push   $0x523
f0113622:	68 de 7d 13 f0       	push   $0xf0137dde
f0113627:	e8 06 cd fe ff       	call   f0100332 <_warn>
f011362c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011362f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113633:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113637:	74 04                	je     f011363d <test_allocate_chunk+0x50b>
f0113639:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011363d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f0113641:	c7 45 a0 01 00 00 00 	movl   $0x1,-0x60(%ebp)
		if (CCP(proc_directory, 0, 0x0+32*mega, 64*mega, 1, 0x001, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113648:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011364b:	c1 e0 06             	shl    $0x6,%eax
f011364e:	89 c2                	mov    %eax,%edx
f0113650:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113653:	c1 e0 05             	shl    $0x5,%eax
f0113656:	83 ec 08             	sub    $0x8,%esp
f0113659:	6a 03                	push   $0x3
f011365b:	6a 00                	push   $0x0
f011365d:	6a 00                	push   $0x0
f011365f:	68 07 0e 00 00       	push   $0xe07
f0113664:	6a 01                	push   $0x1
f0113666:	6a 01                	push   $0x1
f0113668:	52                   	push   %edx
f0113669:	50                   	push   %eax
f011366a:	6a 00                	push   $0x0
f011366c:	ff 75 d0             	pushl  -0x30(%ebp)
f011366f:	e8 df 1e 00 00       	call   f0115553 <CCP>
f0113674:	83 c4 30             	add    $0x30,%esp
f0113677:	85 c0                	test   %eax,%eax
f0113679:	75 25                	jne    f01136a0 <test_allocate_chunk+0x56e>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011367b:	83 ec 04             	sub    $0x4,%esp
f011367e:	68 48 97 13 f0       	push   $0xf0139748
f0113683:	68 2c 05 00 00       	push   $0x52c
f0113688:	68 de 7d 13 f0       	push   $0xf0137dde
f011368d:	e8 a0 cc fe ff       	call   f0100332 <_warn>
f0113692:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113695:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113699:	c7 45 a0 00 00 00 00 	movl   $0x0,-0x60(%ebp)
		}
		if (correct) eval += 10 ;
f01136a0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01136a4:	74 04                	je     f01136aa <test_allocate_chunk+0x578>
f01136a6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01136aa:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE III: END\n") ;
f01136ae:	83 ec 0c             	sub    $0xc,%esp
f01136b1:	68 66 8b 13 f0       	push   $0xf0138b66
f01136b6:	e8 72 d5 fe ff       	call   f0100c2d <cprintf>
f01136bb:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART IV: Destination page(s) not exist [User r/w] 20%  */
	/*========================================================*/
	cprintf("\nCASE IV: Destination page(s) not exist [User r/w] [20%]\n") ;
f01136be:	83 ec 0c             	sub    $0xc,%esp
f01136c1:	68 ac 98 13 f0       	push   $0xf01398ac
f01136c6:	e8 62 d5 fe ff       	call   f0100c2d <cprintf>
f01136cb:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f01136ce:	e8 fd 89 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01136d3:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory, USER_HEAP_START, 64*mega, PERM_WRITEABLE|PERM_USER|PERM_AVAILABLE) ;
f01136d6:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01136d9:	c1 e0 06             	shl    $0x6,%eax
f01136dc:	68 06 0e 00 00       	push   $0xe06
f01136e1:	50                   	push   %eax
f01136e2:	68 00 00 00 80       	push   $0x80000000
f01136e7:	ff 75 d0             	pushl  -0x30(%ebp)
f01136ea:	e8 82 4b ff ff       	call   f0108271 <allocate_chunk>
f01136ef:	83 c4 10             	add    $0x10,%esp
f01136f2:	89 45 9c             	mov    %eax,-0x64(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01136f5:	e8 d6 89 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01136fa:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != ((64*mega)/(4*kilo)+(64*mega)/(4*mega)))
f01136fd:	83 7d 9c 00          	cmpl   $0x0,-0x64(%ebp)
f0113701:	75 36                	jne    f0113739 <test_allocate_chunk+0x607>
f0113703:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113706:	2b 45 ac             	sub    -0x54(%ebp),%eax
f0113709:	89 c1                	mov    %eax,%ecx
f011370b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011370e:	c1 e0 06             	shl    $0x6,%eax
f0113711:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113714:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011371b:	99                   	cltd   
f011371c:	f7 fb                	idiv   %ebx
f011371e:	89 c3                	mov    %eax,%ebx
f0113720:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113723:	c1 e0 06             	shl    $0x6,%eax
f0113726:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113729:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113730:	99                   	cltd   
f0113731:	f7 fe                	idiv   %esi
f0113733:	01 d8                	add    %ebx,%eax
f0113735:	39 c1                	cmp    %eax,%ecx
f0113737:	74 54                	je     f011378d <test_allocate_chunk+0x65b>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, ((64*mega)/(4*kilo)+(64*mega)/(4*mega)));
f0113739:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011373c:	c1 e0 06             	shl    $0x6,%eax
f011373f:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113742:	8d 3c 95 00 00 00 00 	lea    0x0(,%edx,4),%edi
f0113749:	99                   	cltd   
f011374a:	f7 ff                	idiv   %edi
f011374c:	89 c1                	mov    %eax,%ecx
f011374e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0113751:	c1 e0 06             	shl    $0x6,%eax
f0113754:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113757:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f011375e:	99                   	cltd   
f011375f:	f7 fb                	idiv   %ebx
f0113761:	8d 14 01             	lea    (%ecx,%eax,1),%edx
f0113764:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0113767:	2b 45 ac             	sub    -0x54(%ebp),%eax
f011376a:	83 ec 08             	sub    $0x8,%esp
f011376d:	52                   	push   %edx
f011376e:	50                   	push   %eax
f011376f:	ff 75 9c             	pushl  -0x64(%ebp)
f0113772:	68 0c 98 13 f0       	push   $0xf013980c
f0113777:	68 42 05 00 00       	push   $0x542
f011377c:	68 de 7d 13 f0       	push   $0xf0137dde
f0113781:	e8 ac cb fe ff       	call   f0100332 <_warn>
f0113786:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113789:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011378d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113791:	74 04                	je     f0113797 <test_allocate_chunk+0x665>
f0113793:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113797:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011379b:	c7 45 d8 01 00 00 00 	movl   $0x1,-0x28(%ebp)
		if (CCP(proc_directory, 0, USER_HEAP_START, 64*mega, 1, 0xE07, 0xE07, 0, 0, CHK_ALLOC) == 0)
f01137a2:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f01137a5:	c1 e0 06             	shl    $0x6,%eax
f01137a8:	83 ec 08             	sub    $0x8,%esp
f01137ab:	6a 03                	push   $0x3
f01137ad:	6a 00                	push   $0x0
f01137af:	6a 00                	push   $0x0
f01137b1:	68 07 0e 00 00       	push   $0xe07
f01137b6:	68 07 0e 00 00       	push   $0xe07
f01137bb:	6a 01                	push   $0x1
f01137bd:	50                   	push   %eax
f01137be:	68 00 00 00 80       	push   $0x80000000
f01137c3:	6a 00                	push   $0x0
f01137c5:	ff 75 d0             	pushl  -0x30(%ebp)
f01137c8:	e8 86 1d 00 00       	call   f0115553 <CCP>
f01137cd:	83 c4 30             	add    $0x30,%esp
f01137d0:	85 c0                	test   %eax,%eax
f01137d2:	75 25                	jne    f01137f9 <test_allocate_chunk+0x6c7>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f01137d4:	83 ec 04             	sub    $0x4,%esp
f01137d7:	68 48 97 13 f0       	push   $0xf0139748
f01137dc:	68 4b 05 00 00       	push   $0x54b
f01137e1:	68 de 7d 13 f0       	push   $0xf0137dde
f01137e6:	e8 47 cb fe ff       	call   f0100332 <_warn>
f01137eb:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f01137ee:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f01137f2:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		}
		if (correct) eval += 10 ;
f01137f9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01137fd:	74 04                	je     f0113803 <test_allocate_chunk+0x6d1>
f01137ff:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113803:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		if (chk_cnt)
f0113807:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
f011380b:	74 6f                	je     f011387c <test_allocate_chunk+0x74a>
		{
			ptr1 = (char*)(USER_HEAP_START+2*kilo); *ptr1 = 'K' ;
f011380d:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113810:	01 c0                	add    %eax,%eax
f0113812:	05 00 00 00 80       	add    $0x80000000,%eax
f0113817:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011381a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011381d:	c6 00 4b             	movb   $0x4b,(%eax)
			ptr2 = (char*)(USER_HEAP_START+22*mega);*ptr2 = 'M' ;
f0113820:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0113823:	89 d0                	mov    %edx,%eax
f0113825:	c1 e0 02             	shl    $0x2,%eax
f0113828:	01 d0                	add    %edx,%eax
f011382a:	01 c0                	add    %eax,%eax
f011382c:	01 d0                	add    %edx,%eax
f011382e:	01 c0                	add    %eax,%eax
f0113830:	05 00 00 00 80       	add    $0x80000000,%eax
f0113835:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0113838:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011383b:	c6 00 4d             	movb   $0x4d,(%eax)

			if ((*ptr1) != 'K' || (*ptr2) != 'M')
f011383e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113841:	8a 00                	mov    (%eax),%al
f0113843:	3c 4b                	cmp    $0x4b,%al
f0113845:	75 09                	jne    f0113850 <test_allocate_chunk+0x71e>
f0113847:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011384a:	8a 00                	mov    (%eax),%al
f011384c:	3c 4d                	cmp    $0x4d,%al
f011384e:	74 1e                	je     f011386e <test_allocate_chunk+0x73c>
			{
				warn("[EVAL] allocate_chunk: Failed (content is not correct)\n");
f0113850:	83 ec 04             	sub    $0x4,%esp
f0113853:	68 94 97 13 f0       	push   $0xf0139794
f0113858:	68 59 05 00 00       	push   $0x559
f011385d:	68 de 7d 13 f0       	push   $0xf0137dde
f0113862:	e8 cb ca fe ff       	call   f0100332 <_warn>
f0113867:	83 c4 10             	add    $0x10,%esp
				correct = 0;
f011386a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			}
			if (correct) eval += 5 ;
f011386e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113872:	74 04                	je     f0113878 <test_allocate_chunk+0x746>
f0113874:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
			correct = 1 ;
f0113878:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		}
	}
	cprintf("\nCASE IV: END\n") ;
f011387c:	83 ec 0c             	sub    $0xc,%esp
f011387f:	68 38 96 13 f0       	push   $0xf0139638
f0113884:	e8 a4 d3 fe ff       	call   f0100c2d <cprintf>
f0113889:	83 c4 10             	add    $0x10,%esp

	/*========================================================*/
	/*PART V: Destination page(s) not exist [User r] 15%     */
	/*========================================================*/
	cprintf("\nCASE V: Destination page(s) not exist [User r] [15%]\n") ;
f011388c:	83 ec 0c             	sub    $0xc,%esp
f011388f:	68 e8 98 13 f0       	push   $0xf01398e8
f0113894:	e8 94 d3 fe ff       	call   f0100c2d <cprintf>
f0113899:	83 c4 10             	add    $0x10,%esp
	{
		numOfFreeFramesBefore = sys_calculate_free_frames();
f011389c:	e8 2f 88 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01138a1:	89 45 b4             	mov    %eax,-0x4c(%ebp)

		int ret = allocate_chunk(proc_directory,0x403FFC00, 7*kilo, PERM_USER|PERM_AVAILABLE) ;
f01138a4:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01138a7:	89 d0                	mov    %edx,%eax
f01138a9:	01 c0                	add    %eax,%eax
f01138ab:	01 d0                	add    %edx,%eax
f01138ad:	01 c0                	add    %eax,%eax
f01138af:	01 d0                	add    %edx,%eax
f01138b1:	68 04 0e 00 00       	push   $0xe04
f01138b6:	50                   	push   %eax
f01138b7:	68 00 fc 3f 40       	push   $0x403ffc00
f01138bc:	ff 75 d0             	pushl  -0x30(%ebp)
f01138bf:	e8 ad 49 ff ff       	call   f0108271 <allocate_chunk>
f01138c4:	83 c4 10             	add    $0x10,%esp
f01138c7:	89 45 98             	mov    %eax,-0x68(%ebp)

		numOfFreeFramesAfter = sys_calculate_free_frames();
f01138ca:	e8 01 88 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01138cf:	89 45 ac             	mov    %eax,-0x54(%ebp)

		if (ret != 0 || (numOfFreeFramesBefore - numOfFreeFramesAfter) != (3+2))
f01138d2:	83 7d 98 00          	cmpl   $0x0,-0x68(%ebp)
f01138d6:	75 0b                	jne    f01138e3 <test_allocate_chunk+0x7b1>
f01138d8:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138db:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01138de:	83 f8 05             	cmp    $0x5,%eax
f01138e1:	74 2a                	je     f011390d <test_allocate_chunk+0x7db>
		{
			warn("[EVAL] allocate_chunk: Failed (# allocated frames is not correct) ret=%d diff=%d expected=%d\n", ret, numOfFreeFramesBefore - numOfFreeFramesAfter, (3+2));
f01138e3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01138e6:	2b 45 ac             	sub    -0x54(%ebp),%eax
f01138e9:	83 ec 08             	sub    $0x8,%esp
f01138ec:	6a 05                	push   $0x5
f01138ee:	50                   	push   %eax
f01138ef:	ff 75 98             	pushl  -0x68(%ebp)
f01138f2:	68 0c 98 13 f0       	push   $0xf013980c
f01138f7:	68 70 05 00 00       	push   $0x570
f01138fc:	68 de 7d 13 f0       	push   $0xf0137dde
f0113901:	e8 2c ca fe ff       	call   f0100332 <_warn>
f0113906:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113909:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f011390d:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113911:	74 04                	je     f0113917 <test_allocate_chunk+0x7e5>
f0113913:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113917:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		int chk_cnt = 1 ;
f011391b:	c7 45 94 01 00 00 00 	movl   $0x1,-0x6c(%ebp)
		if (CCP(proc_directory, 0, 0x403FF000, 12*kilo, 1, 0xE05, 0xE07, 0, 0, CHK_ALLOC) == 0)
f0113922:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0113925:	89 d0                	mov    %edx,%eax
f0113927:	01 c0                	add    %eax,%eax
f0113929:	01 d0                	add    %edx,%eax
f011392b:	c1 e0 02             	shl    $0x2,%eax
f011392e:	83 ec 08             	sub    $0x8,%esp
f0113931:	6a 03                	push   $0x3
f0113933:	6a 00                	push   $0x0
f0113935:	6a 00                	push   $0x0
f0113937:	68 07 0e 00 00       	push   $0xe07
f011393c:	68 05 0e 00 00       	push   $0xe05
f0113941:	6a 01                	push   $0x1
f0113943:	50                   	push   %eax
f0113944:	68 00 f0 3f 40       	push   $0x403ff000
f0113949:	6a 00                	push   $0x0
f011394b:	ff 75 d0             	pushl  -0x30(%ebp)
f011394e:	e8 00 1c 00 00       	call   f0115553 <CCP>
f0113953:	83 c4 30             	add    $0x30,%esp
f0113956:	85 c0                	test   %eax,%eax
f0113958:	75 25                	jne    f011397f <test_allocate_chunk+0x84d>
		{
			warn("[EVAL] allocate_chunk: Failed (problem in permissions and/or references\n");
f011395a:	83 ec 04             	sub    $0x4,%esp
f011395d:	68 48 97 13 f0       	push   $0xf0139748
f0113962:	68 79 05 00 00       	push   $0x579
f0113967:	68 de 7d 13 f0       	push   $0xf0137dde
f011396c:	e8 c1 c9 fe ff       	call   f0100332 <_warn>
f0113971:	83 c4 10             	add    $0x10,%esp
			correct = 0;
f0113974:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
			chk_cnt = 0 ;
f0113978:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%ebp)
		}
		if (correct) eval += 5 ;
f011397f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113983:	74 04                	je     f0113989 <test_allocate_chunk+0x857>
f0113985:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113989:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

	}
	cprintf("\nCASE V: END\n") ;
f011398d:	83 ec 0c             	sub    $0xc,%esp
f0113990:	68 1f 99 13 f0       	push   $0xf013991f
f0113995:	e8 93 d2 fe ff       	call   f0100c2d <cprintf>
f011399a:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] allocate_chunk: FINISHED. Evaluation = %d\n", eval);
f011399d:	83 ec 08             	sub    $0x8,%esp
f01139a0:	ff 75 e4             	pushl  -0x1c(%ebp)
f01139a3:	68 30 99 13 f0       	push   $0xf0139930
f01139a8:	e8 80 d2 fe ff       	call   f0100c2d <cprintf>
f01139ad:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f01139b0:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f01139b4:	75 10                	jne    f01139c6 <test_allocate_chunk+0x894>
		cprintf("Congratulations!! test allocate_chunk completed successfully.\n");
f01139b6:	83 ec 0c             	sub    $0xc,%esp
f01139b9:	68 64 99 13 f0       	push   $0xf0139964
f01139be:	e8 6a d2 fe ff       	call   f0100c2d <cprintf>
f01139c3:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f01139c6:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f01139cb:	89 45 cc             	mov    %eax,-0x34(%ebp)
f01139ce:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01139d1:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f01139d4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01139d9:	8d 65 f4             	lea    -0xc(%ebp),%esp
f01139dc:	5b                   	pop    %ebx
f01139dd:	5e                   	pop    %esi
f01139de:	5f                   	pop    %edi
f01139df:	5d                   	pop    %ebp
f01139e0:	c3                   	ret    

f01139e1 <test_calculate_required_frames>:

//======================================
// 5) [+]TEST CALCULATE REQUIRED FRAMES:
//======================================
int test_calculate_required_frames()
{
f01139e1:	55                   	push   %ebp
f01139e2:	89 e5                	mov    %esp,%ebp
f01139e4:	57                   	push   %edi
f01139e5:	56                   	push   %esi
f01139e6:	53                   	push   %ebx
f01139e7:	81 ec fc 01 00 00    	sub    $0x1fc,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f01139ed:	8d 45 8e             	lea    -0x72(%ebp),%eax
f01139f0:	bb 78 88 13 f0       	mov    $0xf0138878,%ebx
f01139f5:	ba 0f 00 00 00       	mov    $0xf,%edx
f01139fa:	89 c7                	mov    %eax,%edi
f01139fc:	89 de                	mov    %ebx,%esi
f01139fe:	89 d1                	mov    %edx,%ecx
f0113a00:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0113a02:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0113a05:	b9 23 00 00 00       	mov    $0x23,%ecx
f0113a0a:	b0 00                	mov    $0x0,%al
f0113a0c:	89 d7                	mov    %edx,%edi
f0113a0e:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0113a10:	6a 00                	push   $0x0
f0113a12:	6a 0a                	push   $0xa
f0113a14:	6a 14                	push   $0x14
f0113a16:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0113a19:	50                   	push   %eax
f0113a1a:	e8 65 49 ff ff       	call   f0108384 <env_create>
f0113a1f:	83 c4 10             	add    $0x10,%esp
f0113a22:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0113a25:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113a28:	8b 40 5c             	mov    0x5c(%eax),%eax
f0113a2b:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f0113a2e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113a31:	8b 40 60             	mov    0x60(%eax),%eax
f0113a34:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0113a37:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0113a3a:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f0113a3d:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f0113a44:	75 70 20 
f0113a47:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f0113a4e:	00 00 00 
f0113a51:	8d 55 82             	lea    -0x7e(%ebp),%edx
f0113a54:	b9 03 00 00 00       	mov    $0x3,%ecx
f0113a59:	b8 00 00 00 00       	mov    $0x0,%eax
f0113a5e:	89 d7                	mov    %edx,%edi
f0113a60:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f0113a62:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0113a65:	8b 40 4c             	mov    0x4c(%eax),%eax
f0113a68:	83 ec 08             	sub    $0x8,%esp
f0113a6b:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f0113a71:	52                   	push   %edx
f0113a72:	50                   	push   %eax
f0113a73:	e8 6b ce 01 00       	call   f01308e3 <ltostr>
f0113a78:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f0113a7b:	83 ec 04             	sub    $0x4,%esp
f0113a7e:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113a84:	50                   	push   %eax
f0113a85:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f0113a8b:	50                   	push   %eax
f0113a8c:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0113a92:	50                   	push   %eax
f0113a93:	e8 43 cf 01 00       	call   f01309db <strcconcat>
f0113a98:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f0113a9b:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0113aa2:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f0113aa9:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint32 res =0;
f0113ab0:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
	uint8 correct = 1;
f0113ab7:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;

	ClearUserSpace(proc_directory);
f0113abb:	83 ec 0c             	sub    $0xc,%esp
f0113abe:	ff 75 d8             	pushl  -0x28(%ebp)
f0113ac1:	e8 59 1a 00 00       	call   f011551f <ClearUserSpace>
f0113ac6:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f0113ac9:	83 ec 0c             	sub    $0xc,%esp
f0113acc:	68 a4 99 13 f0       	push   $0xf01399a4
f0113ad1:	e8 57 d1 fe ff       	call   f0100c2d <cprintf>
f0113ad6:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0113ad9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113adc:	c1 e0 03             	shl    $0x3,%eax
f0113adf:	83 ec 04             	sub    $0x4,%esp
f0113ae2:	50                   	push   %eax
f0113ae3:	6a 00                	push   $0x0
f0113ae5:	ff 75 d8             	pushl  -0x28(%ebp)
f0113ae8:	e8 bb 47 ff ff       	call   f01082a8 <calculate_required_frames>
f0113aed:	83 c4 10             	add    $0x10,%esp
f0113af0:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0113af3:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0113af7:	74 23                	je     f0113b1c <test_calculate_required_frames+0x13b>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0113af9:	83 ec 0c             	sub    $0xc,%esp
f0113afc:	6a 03                	push   $0x3
f0113afe:	ff 75 c8             	pushl  -0x38(%ebp)
f0113b01:	68 d8 99 13 f0       	push   $0xf01399d8
f0113b06:	68 b2 05 00 00       	push   $0x5b2
f0113b0b:	68 de 7d 13 f0       	push   $0xf0137dde
f0113b10:	e8 1d c8 fe ff       	call   f0100332 <_warn>
f0113b15:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b18:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b1c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b20:	74 04                	je     f0113b26 <test_calculate_required_frames+0x145>
f0113b22:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b26:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 4*mega);
f0113b2a:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113b2d:	c1 e0 02             	shl    $0x2,%eax
f0113b30:	83 ec 04             	sub    $0x4,%esp
f0113b33:	50                   	push   %eax
f0113b34:	6a 00                	push   $0x0
f0113b36:	ff 75 d8             	pushl  -0x28(%ebp)
f0113b39:	e8 6a 47 ff ff       	call   f01082a8 <calculate_required_frames>
f0113b3e:	83 c4 10             	add    $0x10,%esp
f0113b41:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 1025)
f0113b44:	81 7d c8 01 04 00 00 	cmpl   $0x401,-0x38(%ebp)
f0113b4b:	74 26                	je     f0113b73 <test_calculate_required_frames+0x192>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 1025);
f0113b4d:	83 ec 0c             	sub    $0xc,%esp
f0113b50:	68 01 04 00 00       	push   $0x401
f0113b55:	ff 75 c8             	pushl  -0x38(%ebp)
f0113b58:	68 d8 99 13 f0       	push   $0xf01399d8
f0113b5d:	68 bc 05 00 00       	push   $0x5bc
f0113b62:	68 de 7d 13 f0       	push   $0xf0137dde
f0113b67:	e8 c6 c7 fe ff       	call   f0100332 <_warn>
f0113b6c:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113b6f:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113b73:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113b77:	74 04                	je     f0113b7d <test_calculate_required_frames+0x19c>
f0113b79:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113b7d:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0113b81:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113b84:	c1 e0 0a             	shl    $0xa,%eax
f0113b87:	83 ec 04             	sub    $0x4,%esp
f0113b8a:	50                   	push   %eax
f0113b8b:	6a 00                	push   $0x0
f0113b8d:	ff 75 d8             	pushl  -0x28(%ebp)
f0113b90:	e8 13 47 ff ff       	call   f01082a8 <calculate_required_frames>
f0113b95:	83 c4 10             	add    $0x10,%esp
f0113b98:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)))
f0113b9b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113b9e:	c1 e0 0a             	shl    $0xa,%eax
f0113ba1:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113ba4:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113bab:	99                   	cltd   
f0113bac:	f7 fb                	idiv   %ebx
f0113bae:	89 c1                	mov    %eax,%ecx
f0113bb0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113bb3:	c1 e0 0a             	shl    $0xa,%eax
f0113bb6:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113bb9:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113bc0:	99                   	cltd   
f0113bc1:	f7 fe                	idiv   %esi
f0113bc3:	01 c8                	add    %ecx,%eax
f0113bc5:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0113bc8:	74 4c                	je     f0113c16 <test_calculate_required_frames+0x235>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)));
f0113bca:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113bcd:	c1 e0 0a             	shl    $0xa,%eax
f0113bd0:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113bd3:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113bda:	99                   	cltd   
f0113bdb:	f7 fb                	idiv   %ebx
f0113bdd:	89 c1                	mov    %eax,%ecx
f0113bdf:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113be2:	c1 e0 0a             	shl    $0xa,%eax
f0113be5:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113be8:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113bef:	99                   	cltd   
f0113bf0:	f7 fe                	idiv   %esi
f0113bf2:	01 c8                	add    %ecx,%eax
f0113bf4:	83 ec 0c             	sub    $0xc,%esp
f0113bf7:	50                   	push   %eax
f0113bf8:	ff 75 c8             	pushl  -0x38(%ebp)
f0113bfb:	68 d8 99 13 f0       	push   $0xf01399d8
f0113c00:	68 c6 05 00 00       	push   $0x5c6
f0113c05:	68 de 7d 13 f0       	push   $0xf0137dde
f0113c0a:	e8 23 c7 fe ff       	call   f0100332 <_warn>
f0113c0f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c12:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c16:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c1a:	74 04                	je     f0113c20 <test_calculate_required_frames+0x23f>
f0113c1c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c20:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test4
		res = calculate_required_frames(proc_directory, 0x1000, 6*kilo);
f0113c24:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113c27:	89 d0                	mov    %edx,%eax
f0113c29:	01 c0                	add    %eax,%eax
f0113c2b:	01 d0                	add    %edx,%eax
f0113c2d:	01 c0                	add    %eax,%eax
f0113c2f:	83 ec 04             	sub    $0x4,%esp
f0113c32:	50                   	push   %eax
f0113c33:	68 00 10 00 00       	push   $0x1000
f0113c38:	ff 75 d8             	pushl  -0x28(%ebp)
f0113c3b:	e8 68 46 ff ff       	call   f01082a8 <calculate_required_frames>
f0113c40:	83 c4 10             	add    $0x10,%esp
f0113c43:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0113c46:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0113c4a:	74 23                	je     f0113c6f <test_calculate_required_frames+0x28e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0113c4c:	83 ec 0c             	sub    $0xc,%esp
f0113c4f:	6a 03                	push   $0x3
f0113c51:	ff 75 c8             	pushl  -0x38(%ebp)
f0113c54:	68 d8 99 13 f0       	push   $0xf01399d8
f0113c59:	68 d2 05 00 00       	push   $0x5d2
f0113c5e:	68 de 7d 13 f0       	push   $0xf0137dde
f0113c63:	e8 ca c6 fe ff       	call   f0100332 <_warn>
f0113c68:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113c6b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113c6f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113c73:	74 04                	je     f0113c79 <test_calculate_required_frames+0x298>
f0113c75:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113c79:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0113c7d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113c80:	89 c2                	mov    %eax,%edx
f0113c82:	01 d2                	add    %edx,%edx
f0113c84:	01 d0                	add    %edx,%eax
f0113c86:	83 ec 04             	sub    $0x4,%esp
f0113c89:	50                   	push   %eax
f0113c8a:	68 00 18 00 00       	push   $0x1800
f0113c8f:	ff 75 d8             	pushl  -0x28(%ebp)
f0113c92:	e8 11 46 ff ff       	call   f01082a8 <calculate_required_frames>
f0113c97:	83 c4 10             	add    $0x10,%esp
f0113c9a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 3)
f0113c9d:	83 7d c8 03          	cmpl   $0x3,-0x38(%ebp)
f0113ca1:	74 23                	je     f0113cc6 <test_calculate_required_frames+0x2e5>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 3);
f0113ca3:	83 ec 0c             	sub    $0xc,%esp
f0113ca6:	6a 03                	push   $0x3
f0113ca8:	ff 75 c8             	pushl  -0x38(%ebp)
f0113cab:	68 d8 99 13 f0       	push   $0xf01399d8
f0113cb0:	68 dc 05 00 00       	push   $0x5dc
f0113cb5:	68 de 7d 13 f0       	push   $0xf0137dde
f0113cba:	e8 73 c6 fe ff       	call   f0100332 <_warn>
f0113cbf:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113cc2:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113cc6:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113cca:	74 04                	je     f0113cd0 <test_calculate_required_frames+0x2ef>
f0113ccc:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113cd0:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0113cd4:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113cd7:	89 d0                	mov    %edx,%eax
f0113cd9:	c1 e0 02             	shl    $0x2,%eax
f0113cdc:	01 d0                	add    %edx,%eax
f0113cde:	01 c0                	add    %eax,%eax
f0113ce0:	83 ec 04             	sub    $0x4,%esp
f0113ce3:	50                   	push   %eax
f0113ce4:	68 00 00 40 00       	push   $0x400000
f0113ce9:	ff 75 d8             	pushl  -0x28(%ebp)
f0113cec:	e8 b7 45 ff ff       	call   f01082a8 <calculate_required_frames>
f0113cf1:	83 c4 10             	add    $0x10,%esp
f0113cf4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2563)
f0113cf7:	81 7d c8 03 0a 00 00 	cmpl   $0xa03,-0x38(%ebp)
f0113cfe:	74 26                	je     f0113d26 <test_calculate_required_frames+0x345>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f0113d00:	83 ec 0c             	sub    $0xc,%esp
f0113d03:	68 03 0a 00 00       	push   $0xa03
f0113d08:	ff 75 c8             	pushl  -0x38(%ebp)
f0113d0b:	68 d8 99 13 f0       	push   $0xf01399d8
f0113d10:	68 e6 05 00 00       	push   $0x5e6
f0113d15:	68 de 7d 13 f0       	push   $0xf0137dde
f0113d1a:	e8 13 c6 fe ff       	call   f0100332 <_warn>
f0113d1f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d22:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113d26:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d2a:	74 04                	je     f0113d30 <test_calculate_required_frames+0x34f>
f0113d2c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113d30:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0113d34:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113d37:	01 c0                	add    %eax,%eax
f0113d39:	83 ec 04             	sub    $0x4,%esp
f0113d3c:	50                   	push   %eax
f0113d3d:	68 00 00 70 00       	push   $0x700000
f0113d42:	ff 75 d8             	pushl  -0x28(%ebp)
f0113d45:	e8 5e 45 ff ff       	call   f01082a8 <calculate_required_frames>
f0113d4a:	83 c4 10             	add    $0x10,%esp
f0113d4d:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 514)
f0113d50:	81 7d c8 02 02 00 00 	cmpl   $0x202,-0x38(%ebp)
f0113d57:	74 26                	je     f0113d7f <test_calculate_required_frames+0x39e>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 514);
f0113d59:	83 ec 0c             	sub    $0xc,%esp
f0113d5c:	68 02 02 00 00       	push   $0x202
f0113d61:	ff 75 c8             	pushl  -0x38(%ebp)
f0113d64:	68 d8 99 13 f0       	push   $0xf01399d8
f0113d69:	68 f2 05 00 00       	push   $0x5f2
f0113d6e:	68 de 7d 13 f0       	push   $0xf0137dde
f0113d73:	e8 ba c5 fe ff       	call   f0100332 <_warn>
f0113d78:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113d7b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113d7f:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113d83:	74 04                	je     f0113d89 <test_calculate_required_frames+0x3a8>
f0113d85:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113d89:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f0113d8d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113d90:	83 ec 04             	sub    $0x4,%esp
f0113d93:	50                   	push   %eax
f0113d94:	68 ff ff 3f 00       	push   $0x3fffff
f0113d99:	ff 75 d8             	pushl  -0x28(%ebp)
f0113d9c:	e8 07 45 ff ff       	call   f01082a8 <calculate_required_frames>
f0113da1:	83 c4 10             	add    $0x10,%esp
f0113da4:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 4)
f0113da7:	83 7d c8 04          	cmpl   $0x4,-0x38(%ebp)
f0113dab:	74 23                	je     f0113dd0 <test_calculate_required_frames+0x3ef>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 4);
f0113dad:	83 ec 0c             	sub    $0xc,%esp
f0113db0:	6a 04                	push   $0x4
f0113db2:	ff 75 c8             	pushl  -0x38(%ebp)
f0113db5:	68 d8 99 13 f0       	push   $0xf01399d8
f0113dba:	68 fc 05 00 00       	push   $0x5fc
f0113dbf:	68 de 7d 13 f0       	push   $0xf0137dde
f0113dc4:	e8 69 c5 fe ff       	call   f0100332 <_warn>
f0113dc9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113dcc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113dd0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113dd4:	74 04                	je     f0113dda <test_calculate_required_frames+0x3f9>
f0113dd6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113dda:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f0113dde:	83 ec 0c             	sub    $0xc,%esp
f0113de1:	68 29 95 13 f0       	push   $0xf0139529
f0113de6:	e8 42 ce fe ff       	call   f0100c2d <cprintf>
f0113deb:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f0113dee:	83 ec 0c             	sub    $0xc,%esp
f0113df1:	68 30 9a 13 f0       	push   $0xf0139a30
f0113df6:	e8 32 ce fe ff       	call   f0100c2d <cprintf>
f0113dfb:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f0113dfe:	83 ec 04             	sub    $0x4,%esp
f0113e01:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0113e07:	50                   	push   %eax
f0113e08:	68 e2 88 13 f0       	push   $0xf01388e2
f0113e0d:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113e13:	50                   	push   %eax
f0113e14:	e8 c2 cb 01 00       	call   f01309db <strcconcat>
f0113e19:	83 c4 10             	add    $0x10,%esp
f0113e1c:	83 ec 0c             	sub    $0xc,%esp
f0113e1f:	8d 85 fe fd ff ff    	lea    -0x202(%ebp),%eax
f0113e25:	50                   	push   %eax
f0113e26:	e8 64 ce fe ff       	call   f0100c8f <execute_command>
f0113e2b:	83 c4 10             	add    $0x10,%esp

		res = calculate_required_frames(proc_directory, 0x0, 8*kilo);
f0113e2e:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113e31:	c1 e0 03             	shl    $0x3,%eax
f0113e34:	83 ec 04             	sub    $0x4,%esp
f0113e37:	50                   	push   %eax
f0113e38:	6a 00                	push   $0x0
f0113e3a:	ff 75 d8             	pushl  -0x28(%ebp)
f0113e3d:	e8 66 44 ff ff       	call   f01082a8 <calculate_required_frames>
f0113e42:	83 c4 10             	add    $0x10,%esp
f0113e45:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0113e48:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f0113e4f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113e52:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113e55:	74 24                	je     f0113e7b <test_calculate_required_frames+0x49a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113e57:	83 ec 0c             	sub    $0xc,%esp
f0113e5a:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113e5d:	ff 75 c8             	pushl  -0x38(%ebp)
f0113e60:	68 d8 99 13 f0       	push   $0xf01399d8
f0113e65:	68 10 06 00 00       	push   $0x610
f0113e6a:	68 de 7d 13 f0       	push   $0xf0137dde
f0113e6f:	e8 be c4 fe ff       	call   f0100332 <_warn>
f0113e74:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113e77:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113e7b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113e7f:	74 04                	je     f0113e85 <test_calculate_required_frames+0x4a4>
f0113e81:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113e85:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f0113e89:	83 ec 04             	sub    $0x4,%esp
f0113e8c:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113e92:	50                   	push   %eax
f0113e93:	68 ef 88 13 f0       	push   $0xf01388ef
f0113e98:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113e9e:	50                   	push   %eax
f0113e9f:	e8 37 cb 01 00       	call   f01309db <strcconcat>
f0113ea4:	83 c4 10             	add    $0x10,%esp
f0113ea7:	83 ec 0c             	sub    $0xc,%esp
f0113eaa:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113eb0:	50                   	push   %eax
f0113eb1:	e8 d9 cd fe ff       	call   f0100c8f <execute_command>
f0113eb6:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0113eb9:	83 ec 04             	sub    $0x4,%esp
f0113ebc:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113ec2:	50                   	push   %eax
f0113ec3:	68 64 9a 13 f0       	push   $0xf0139a64
f0113ec8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113ece:	50                   	push   %eax
f0113ecf:	e8 07 cb 01 00       	call   f01309db <strcconcat>
f0113ed4:	83 c4 10             	add    $0x10,%esp
f0113ed7:	83 ec 0c             	sub    $0xc,%esp
f0113eda:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0113ee0:	50                   	push   %eax
f0113ee1:	e8 a9 cd fe ff       	call   f0100c8f <execute_command>
f0113ee6:	83 c4 10             	add    $0x10,%esp

		//Test2
		res = calculate_required_frames(proc_directory, 0x0, 8*mega);
f0113ee9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113eec:	c1 e0 03             	shl    $0x3,%eax
f0113eef:	83 ec 04             	sub    $0x4,%esp
f0113ef2:	50                   	push   %eax
f0113ef3:	6a 00                	push   $0x0
f0113ef5:	ff 75 d8             	pushl  -0x28(%ebp)
f0113ef8:	e8 ab 43 ff ff       	call   f01082a8 <calculate_required_frames>
f0113efd:	83 c4 10             	add    $0x10,%esp
f0113f00:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 2047;
f0113f03:	c7 45 c4 ff 07 00 00 	movl   $0x7ff,-0x3c(%ebp)
		if (res != expected)
f0113f0a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113f0d:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113f10:	74 24                	je     f0113f36 <test_calculate_required_frames+0x555>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113f12:	83 ec 0c             	sub    $0xc,%esp
f0113f15:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113f18:	ff 75 c8             	pushl  -0x38(%ebp)
f0113f1b:	68 d8 99 13 f0       	push   $0xf01399d8
f0113f20:	68 1e 06 00 00       	push   $0x61e
f0113f25:	68 de 7d 13 f0       	push   $0xf0137dde
f0113f2a:	e8 03 c4 fe ff       	call   f0100332 <_warn>
f0113f2f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113f32:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0113f36:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113f3a:	74 04                	je     f0113f40 <test_calculate_required_frames+0x55f>
f0113f3c:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0113f40:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		res = calculate_required_frames(proc_directory, 0x0, 1024*mega);
f0113f44:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113f47:	c1 e0 0a             	shl    $0xa,%eax
f0113f4a:	83 ec 04             	sub    $0x4,%esp
f0113f4d:	50                   	push   %eax
f0113f4e:	6a 00                	push   $0x0
f0113f50:	ff 75 d8             	pushl  -0x28(%ebp)
f0113f53:	e8 50 43 ff ff       	call   f01082a8 <calculate_required_frames>
f0113f58:	83 c4 10             	add    $0x10,%esp
f0113f5b:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = ((1024*mega)/(4*mega) + (1024*mega)/(4*kilo)) - 2 - 1 - 2;
f0113f5e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113f61:	c1 e0 0a             	shl    $0xa,%eax
f0113f64:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0113f67:	8d 1c 95 00 00 00 00 	lea    0x0(,%edx,4),%ebx
f0113f6e:	99                   	cltd   
f0113f6f:	f7 fb                	idiv   %ebx
f0113f71:	89 c1                	mov    %eax,%ecx
f0113f73:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0113f76:	c1 e0 0a             	shl    $0xa,%eax
f0113f79:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0113f7c:	8d 34 95 00 00 00 00 	lea    0x0(,%edx,4),%esi
f0113f83:	99                   	cltd   
f0113f84:	f7 fe                	idiv   %esi
f0113f86:	01 c8                	add    %ecx,%eax
f0113f88:	83 e8 05             	sub    $0x5,%eax
f0113f8b:	89 45 c4             	mov    %eax,-0x3c(%ebp)
		if (res != expected)
f0113f8e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0113f91:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0113f94:	74 24                	je     f0113fba <test_calculate_required_frames+0x5d9>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0113f96:	83 ec 0c             	sub    $0xc,%esp
f0113f99:	ff 75 c4             	pushl  -0x3c(%ebp)
f0113f9c:	ff 75 c8             	pushl  -0x38(%ebp)
f0113f9f:	68 d8 99 13 f0       	push   $0xf01399d8
f0113fa4:	68 29 06 00 00       	push   $0x629
f0113fa9:	68 de 7d 13 f0       	push   $0xf0137dde
f0113fae:	e8 7f c3 fe ff       	call   f0100332 <_warn>
f0113fb3:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0113fb6:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0113fba:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0113fbe:	74 04                	je     f0113fc4 <test_calculate_required_frames+0x5e3>
f0113fc0:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0113fc4:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0113fc8:	83 ec 04             	sub    $0x4,%esp
f0113fcb:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113fd1:	50                   	push   %eax
f0113fd2:	68 70 9a 13 f0       	push   $0xf0139a70
f0113fd7:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0113fdd:	50                   	push   %eax
f0113fde:	e8 f8 c9 01 00       	call   f01309db <strcconcat>
f0113fe3:	83 c4 10             	add    $0x10,%esp
f0113fe6:	83 ec 0c             	sub    $0xc,%esp
f0113fe9:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0113fef:	50                   	push   %eax
f0113ff0:	e8 9a cc fe ff       	call   f0100c8f <execute_command>
f0113ff5:	83 c4 10             	add    $0x10,%esp

		//Test4
		res = calculate_required_frames(proc_directory, 0x1800, 3*kilo);
f0113ff8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0113ffb:	89 c2                	mov    %eax,%edx
f0113ffd:	01 d2                	add    %edx,%edx
f0113fff:	01 d0                	add    %edx,%eax
f0114001:	83 ec 04             	sub    $0x4,%esp
f0114004:	50                   	push   %eax
f0114005:	68 00 18 00 00       	push   $0x1800
f011400a:	ff 75 d8             	pushl  -0x28(%ebp)
f011400d:	e8 96 42 ff ff       	call   f01082a8 <calculate_required_frames>
f0114012:	83 c4 10             	add    $0x10,%esp
f0114015:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 1 ;
f0114018:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (res != expected)
f011401f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0114022:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114025:	74 24                	je     f011404b <test_calculate_required_frames+0x66a>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114027:	83 ec 0c             	sub    $0xc,%esp
f011402a:	ff 75 c4             	pushl  -0x3c(%ebp)
f011402d:	ff 75 c8             	pushl  -0x38(%ebp)
f0114030:	68 d8 99 13 f0       	push   $0xf01399d8
f0114035:	68 38 06 00 00       	push   $0x638
f011403a:	68 de 7d 13 f0       	push   $0xf0137dde
f011403f:	e8 ee c2 fe ff       	call   f0100332 <_warn>
f0114044:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114047:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011404b:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011404f:	74 04                	je     f0114055 <test_calculate_required_frames+0x674>
f0114051:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114055:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0114059:	83 ec 04             	sub    $0x4,%esp
f011405c:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114062:	50                   	push   %eax
f0114063:	68 48 8b 13 f0       	push   $0xf0138b48
f0114068:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011406e:	50                   	push   %eax
f011406f:	e8 67 c9 01 00       	call   f01309db <strcconcat>
f0114074:	83 c4 10             	add    $0x10,%esp
f0114077:	83 ec 0c             	sub    $0xc,%esp
f011407a:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114080:	50                   	push   %eax
f0114081:	e8 09 cc fe ff       	call   f0100c8f <execute_command>
f0114086:	83 c4 10             	add    $0x10,%esp

		//Test5
		res = calculate_required_frames(proc_directory, 0x400000, 10*mega);
f0114089:	8b 55 cc             	mov    -0x34(%ebp),%edx
f011408c:	89 d0                	mov    %edx,%eax
f011408e:	c1 e0 02             	shl    $0x2,%eax
f0114091:	01 d0                	add    %edx,%eax
f0114093:	01 c0                	add    %eax,%eax
f0114095:	83 ec 04             	sub    $0x4,%esp
f0114098:	50                   	push   %eax
f0114099:	68 00 00 40 00       	push   $0x400000
f011409e:	ff 75 d8             	pushl  -0x28(%ebp)
f01140a1:	e8 02 42 ff ff       	call   f01082a8 <calculate_required_frames>
f01140a6:	83 c4 10             	add    $0x10,%esp
f01140a9:	89 45 c8             	mov    %eax,-0x38(%ebp)
		if (res != 2561)
f01140ac:	81 7d c8 01 0a 00 00 	cmpl   $0xa01,-0x38(%ebp)
f01140b3:	74 26                	je     f01140db <test_calculate_required_frames+0x6fa>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, 2563);
f01140b5:	83 ec 0c             	sub    $0xc,%esp
f01140b8:	68 03 0a 00 00       	push   $0xa03
f01140bd:	ff 75 c8             	pushl  -0x38(%ebp)
f01140c0:	68 d8 99 13 f0       	push   $0xf01399d8
f01140c5:	68 44 06 00 00       	push   $0x644
f01140ca:	68 de 7d 13 f0       	push   $0xf0137dde
f01140cf:	e8 5e c2 fe ff       	call   f0100332 <_warn>
f01140d4:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01140d7:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01140db:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01140df:	74 04                	je     f01140e5 <test_calculate_required_frames+0x704>
f01140e1:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01140e5:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}

	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f01140e9:	83 ec 04             	sub    $0x4,%esp
f01140ec:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f01140f2:	50                   	push   %eax
f01140f3:	68 52 8b 13 f0       	push   $0xf0138b52
f01140f8:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01140fe:	50                   	push   %eax
f01140ff:	e8 d7 c8 01 00       	call   f01309db <strcconcat>
f0114104:	83 c4 10             	add    $0x10,%esp
f0114107:	83 ec 0c             	sub    $0xc,%esp
f011410a:	8d 85 62 fe ff ff    	lea    -0x19e(%ebp),%eax
f0114110:	50                   	push   %eax
f0114111:	e8 79 cb fe ff       	call   f0100c8f <execute_command>
f0114116:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0114119:	83 ec 04             	sub    $0x4,%esp
f011411c:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114122:	50                   	push   %eax
f0114123:	68 78 9a 13 f0       	push   $0xf0139a78
f0114128:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f011412e:	50                   	push   %eax
f011412f:	e8 a7 c8 01 00       	call   f01309db <strcconcat>
f0114134:	83 c4 10             	add    $0x10,%esp
f0114137:	83 ec 0c             	sub    $0xc,%esp
f011413a:	8d 85 c6 fe ff ff    	lea    -0x13a(%ebp),%eax
f0114140:	50                   	push   %eax
f0114141:	e8 49 cb fe ff       	call   f0100c8f <execute_command>
f0114146:	83 c4 10             	add    $0x10,%esp

		//Test7
		res = calculate_required_frames(proc_directory, 0x700000, 2*mega);
f0114149:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011414c:	01 c0                	add    %eax,%eax
f011414e:	83 ec 04             	sub    $0x4,%esp
f0114151:	50                   	push   %eax
f0114152:	68 00 00 70 00       	push   $0x700000
f0114157:	ff 75 d8             	pushl  -0x28(%ebp)
f011415a:	e8 49 41 ff ff       	call   f01082a8 <calculate_required_frames>
f011415f:	83 c4 10             	add    $0x10,%esp
f0114162:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 510 ;
f0114165:	c7 45 c4 fe 01 00 00 	movl   $0x1fe,-0x3c(%ebp)
		if (res != expected)
f011416c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011416f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114172:	74 24                	je     f0114198 <test_calculate_required_frames+0x7b7>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f0114174:	83 ec 0c             	sub    $0xc,%esp
f0114177:	ff 75 c4             	pushl  -0x3c(%ebp)
f011417a:	ff 75 c8             	pushl  -0x38(%ebp)
f011417d:	68 d8 99 13 f0       	push   $0xf01399d8
f0114182:	68 54 06 00 00       	push   $0x654
f0114187:	68 de 7d 13 f0       	push   $0xf0137dde
f011418c:	e8 a1 c1 fe ff       	call   f0100332 <_warn>
f0114191:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114194:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114198:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011419c:	74 04                	je     f01141a2 <test_calculate_required_frames+0x7c1>
f011419e:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01141a2:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		res = calculate_required_frames(proc_directory, 0x3FFFFF, 1*kilo);
f01141a6:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01141a9:	83 ec 04             	sub    $0x4,%esp
f01141ac:	50                   	push   %eax
f01141ad:	68 ff ff 3f 00       	push   $0x3fffff
f01141b2:	ff 75 d8             	pushl  -0x28(%ebp)
f01141b5:	e8 ee 40 ff ff       	call   f01082a8 <calculate_required_frames>
f01141ba:	83 c4 10             	add    $0x10,%esp
f01141bd:	89 45 c8             	mov    %eax,-0x38(%ebp)
		expected = 3 ;
f01141c0:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (res != expected)
f01141c7:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01141ca:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01141cd:	74 24                	je     f01141f3 <test_calculate_required_frames+0x812>
		{
			warn("[EVAL] calculate_required_frames: Failed (count is not correct). res=%d, expected=%d\n", res, expected);
f01141cf:	83 ec 0c             	sub    $0xc,%esp
f01141d2:	ff 75 c4             	pushl  -0x3c(%ebp)
f01141d5:	ff 75 c8             	pushl  -0x38(%ebp)
f01141d8:	68 d8 99 13 f0       	push   $0xf01399d8
f01141dd:	68 5f 06 00 00       	push   $0x65f
f01141e2:	68 de 7d 13 f0       	push   $0xf0137dde
f01141e7:	e8 46 c1 fe ff       	call   f0100332 <_warn>
f01141ec:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01141ef:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01141f3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01141f7:	74 04                	je     f01141fd <test_calculate_required_frames+0x81c>
f01141f9:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01141fd:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0114201:	83 ec 0c             	sub    $0xc,%esp
f0114204:	68 03 8b 13 f0       	push   $0xf0138b03
f0114209:	e8 1f ca fe ff       	call   f0100c2d <cprintf>
f011420e:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_required_frames: FINISHED. Evaluation = %d\n", eval);
f0114211:	83 ec 08             	sub    $0x8,%esp
f0114214:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114217:	68 84 9a 13 f0       	push   $0xf0139a84
f011421c:	e8 0c ca fe ff       	call   f0100c2d <cprintf>
f0114221:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114224:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114228:	75 10                	jne    f011423a <test_calculate_required_frames+0x859>
		cprintf("Congratulations!! test calculate_required_frames completed successfully.\n");
f011422a:	83 ec 0c             	sub    $0xc,%esp
f011422d:	68 c4 9a 13 f0       	push   $0xf0139ac4
f0114232:	e8 f6 c9 fe ff       	call   f0100c2d <cprintf>
f0114237:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f011423a:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f011423f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0114242:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114245:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114248:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011424d:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114250:	5b                   	pop    %ebx
f0114251:	5e                   	pop    %esi
f0114252:	5f                   	pop    %edi
f0114253:	5d                   	pop    %ebp
f0114254:	c3                   	ret    

f0114255 <test_calculate_allocated_space>:

int test_calculate_allocated_space()
{
f0114255:	55                   	push   %ebp
f0114256:	89 e5                	mov    %esp,%ebp
f0114258:	57                   	push   %edi
f0114259:	56                   	push   %esi
f011425a:	53                   	push   %ebx
f011425b:	81 ec 0c 02 00 00    	sub    $0x20c,%esp
	//Create a Temp. User Process
	char prog_name[50] = "fos_helloWorld";
f0114261:	8d 45 8e             	lea    -0x72(%ebp),%eax
f0114264:	bb 78 88 13 f0       	mov    $0xf0138878,%ebx
f0114269:	ba 0f 00 00 00       	mov    $0xf,%edx
f011426e:	89 c7                	mov    %eax,%edi
f0114270:	89 de                	mov    %ebx,%esi
f0114272:	89 d1                	mov    %edx,%ecx
f0114274:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0114276:	8d 55 9d             	lea    -0x63(%ebp),%edx
f0114279:	b9 23 00 00 00       	mov    $0x23,%ecx
f011427e:	b0 00                	mov    $0x0,%al
f0114280:	89 d7                	mov    %edx,%edi
f0114282:	f3 aa                	rep stos %al,%es:(%edi)
	struct Env* env = env_create(prog_name, 20, 10, 0);
f0114284:	6a 00                	push   $0x0
f0114286:	6a 0a                	push   $0xa
f0114288:	6a 14                	push   $0x14
f011428a:	8d 45 8e             	lea    -0x72(%ebp),%eax
f011428d:	50                   	push   %eax
f011428e:	e8 f1 40 ff ff       	call   f0108384 <env_create>
f0114293:	83 c4 10             	add    $0x10,%esp
f0114296:	89 45 dc             	mov    %eax,-0x24(%ebp)
	uint32 *proc_directory = env->env_page_directory ;
f0114299:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011429c:	8b 40 5c             	mov    0x5c(%eax),%eax
f011429f:	89 45 d8             	mov    %eax,-0x28(%ebp)
	lcr3(env->env_cr3) ;
f01142a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01142a5:	8b 40 60             	mov    0x60(%eax),%eax
f01142a8:	89 45 c0             	mov    %eax,-0x40(%ebp)
f01142ab:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01142ae:	0f 22 d8             	mov    %eax,%cr3
	char aup[20] = "aup " ;
f01142b1:	c7 85 7a ff ff ff 61 	movl   $0x20707561,-0x86(%ebp)
f01142b8:	75 70 20 
f01142bb:	c7 85 7e ff ff ff 00 	movl   $0x0,-0x82(%ebp)
f01142c2:	00 00 00 
f01142c5:	8d 55 82             	lea    -0x7e(%ebp),%edx
f01142c8:	b9 03 00 00 00       	mov    $0x3,%ecx
f01142cd:	b8 00 00 00 00       	mov    $0x0,%eax
f01142d2:	89 d7                	mov    %edx,%edi
f01142d4:	f3 ab                	rep stos %eax,%es:(%edi)
	char env_id[20] ; ltostr(env->env_id, env_id) ;
f01142d6:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01142d9:	8b 40 4c             	mov    0x4c(%eax),%eax
f01142dc:	83 ec 08             	sub    $0x8,%esp
f01142df:	8d 95 66 ff ff ff    	lea    -0x9a(%ebp),%edx
f01142e5:	52                   	push   %edx
f01142e6:	50                   	push   %eax
f01142e7:	e8 f7 c5 01 00       	call   f01308e3 <ltostr>
f01142ec:	83 c4 10             	add    $0x10,%esp
	char aup_cmd[50];
	strcconcat(aup, env_id, aup_cmd);
f01142ef:	83 ec 04             	sub    $0x4,%esp
f01142f2:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01142f8:	50                   	push   %eax
f01142f9:	8d 85 66 ff ff ff    	lea    -0x9a(%ebp),%eax
f01142ff:	50                   	push   %eax
f0114300:	8d 85 7a ff ff ff    	lea    -0x86(%ebp),%eax
f0114306:	50                   	push   %eax
f0114307:	e8 cf c6 01 00       	call   f01309db <strcconcat>
f011430c:	83 c4 10             	add    $0x10,%esp
	//===================================================

	char *ptr1, *ptr2, *ptr3, *ptr4, *ptr5, *ptr6, *ptr7, *ptr8;
	char tptr[10] ;
	int kilo = 1024 ;
f011430f:	c7 45 d0 00 04 00 00 	movl   $0x400,-0x30(%ebp)
	int mega = 1024*1024 ;
f0114316:	c7 45 cc 00 00 10 00 	movl   $0x100000,-0x34(%ebp)
	uint32 eval = 0;
f011431d:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
	uint8 correct = 1;
f0114324:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	uint32 expected_num_pages;
	uint32 expected_num_tables;
	uint32 numOfFreeFramesBefore, numOfFreeFramesAfter;
	uint32 num_pages = 0;
f0114328:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011432f:	00 00 00 
	uint32 num_tables = 0;
f0114332:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114339:	00 00 00 
	ClearUserSpace(proc_directory);
f011433c:	83 ec 0c             	sub    $0xc,%esp
f011433f:	ff 75 d8             	pushl  -0x28(%ebp)
f0114342:	e8 d8 11 00 00       	call   f011551f <ClearUserSpace>
f0114347:	83 c4 10             	add    $0x10,%esp

	/*================================================*/
	/*PART I: ALL pages and tables are not exist 50%  */
	/*================================================*/
	cprintf("\nCASE I: ALL pages and tables are not exist [50%]\n") ;
f011434a:	83 ec 0c             	sub    $0xc,%esp
f011434d:	68 a4 99 13 f0       	push   $0xf01399a4
f0114352:	e8 d6 c8 fe ff       	call   f0100c2d <cprintf>
f0114357:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f011435a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011435d:	c1 e0 03             	shl    $0x3,%eax
f0114360:	89 c2                	mov    %eax,%edx
f0114362:	83 ec 0c             	sub    $0xc,%esp
f0114365:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011436b:	50                   	push   %eax
f011436c:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114372:	50                   	push   %eax
f0114373:	52                   	push   %edx
f0114374:	6a 00                	push   $0x0
f0114376:	ff 75 d8             	pushl  -0x28(%ebp)
f0114379:	e8 0d 3f ff ff       	call   f010828b <calculate_allocated_space>
f011437e:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114381:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114387:	85 c0                	test   %eax,%eax
f0114389:	74 27                	je     f01143b2 <test_calculate_allocated_space+0x15d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011438b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114391:	83 ec 0c             	sub    $0xc,%esp
f0114394:	6a 00                	push   $0x0
f0114396:	50                   	push   %eax
f0114397:	68 10 9b 13 f0       	push   $0xf0139b10
f011439c:	68 94 06 00 00       	push   $0x694
f01143a1:	68 de 7d 13 f0       	push   $0xf0137dde
f01143a6:	e8 87 bf fe ff       	call   f0100332 <_warn>
f01143ab:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143ae:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01143b2:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01143b8:	85 c0                	test   %eax,%eax
f01143ba:	74 27                	je     f01143e3 <test_calculate_allocated_space+0x18e>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01143bc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01143c2:	83 ec 0c             	sub    $0xc,%esp
f01143c5:	6a 00                	push   $0x0
f01143c7:	50                   	push   %eax
f01143c8:	68 70 9b 13 f0       	push   $0xf0139b70
f01143cd:	68 99 06 00 00       	push   $0x699
f01143d2:	68 de 7d 13 f0       	push   $0xf0137dde
f01143d7:	e8 56 bf fe ff       	call   f0100332 <_warn>
f01143dc:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01143df:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01143e3:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01143e7:	74 04                	je     f01143ed <test_calculate_allocated_space+0x198>
f01143e9:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01143ed:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test2
		num_tables = 0;
f01143f1:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01143f8:	00 00 00 
		num_pages = 0;
f01143fb:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114402:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+4*mega, &num_tables, &num_pages);
f0114405:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114408:	c1 e0 02             	shl    $0x2,%eax
f011440b:	89 c2                	mov    %eax,%edx
f011440d:	83 ec 0c             	sub    $0xc,%esp
f0114410:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114416:	50                   	push   %eax
f0114417:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011441d:	50                   	push   %eax
f011441e:	52                   	push   %edx
f011441f:	6a 00                	push   $0x0
f0114421:	ff 75 d8             	pushl  -0x28(%ebp)
f0114424:	e8 62 3e ff ff       	call   f010828b <calculate_allocated_space>
f0114429:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011442c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114432:	85 c0                	test   %eax,%eax
f0114434:	74 27                	je     f011445d <test_calculate_allocated_space+0x208>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114436:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011443c:	83 ec 0c             	sub    $0xc,%esp
f011443f:	6a 00                	push   $0x0
f0114441:	50                   	push   %eax
f0114442:	68 10 9b 13 f0       	push   $0xf0139b10
f0114447:	68 a5 06 00 00       	push   $0x6a5
f011444c:	68 de 7d 13 f0       	push   $0xf0137dde
f0114451:	e8 dc be fe ff       	call   f0100332 <_warn>
f0114456:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114459:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011445d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114463:	85 c0                	test   %eax,%eax
f0114465:	74 27                	je     f011448e <test_calculate_allocated_space+0x239>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114467:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011446d:	83 ec 0c             	sub    $0xc,%esp
f0114470:	6a 00                	push   $0x0
f0114472:	50                   	push   %eax
f0114473:	68 70 9b 13 f0       	push   $0xf0139b70
f0114478:	68 aa 06 00 00       	push   $0x6aa
f011447d:	68 de 7d 13 f0       	push   $0xf0137dde
f0114482:	e8 ab be fe ff       	call   f0100332 <_warn>
f0114487:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011448a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f011448e:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114492:	74 04                	je     f0114498 <test_calculate_allocated_space+0x243>
f0114494:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114498:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f011449c:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01144a3:	00 00 00 
		num_pages = 0;
f01144a6:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01144ad:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f01144b0:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01144b3:	c1 e0 0a             	shl    $0xa,%eax
f01144b6:	89 c2                	mov    %eax,%edx
f01144b8:	83 ec 0c             	sub    $0xc,%esp
f01144bb:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01144c1:	50                   	push   %eax
f01144c2:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01144c8:	50                   	push   %eax
f01144c9:	52                   	push   %edx
f01144ca:	6a 00                	push   $0x0
f01144cc:	ff 75 d8             	pushl  -0x28(%ebp)
f01144cf:	e8 b7 3d ff ff       	call   f010828b <calculate_allocated_space>
f01144d4:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01144d7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01144dd:	85 c0                	test   %eax,%eax
f01144df:	74 27                	je     f0114508 <test_calculate_allocated_space+0x2b3>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01144e1:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01144e7:	83 ec 0c             	sub    $0xc,%esp
f01144ea:	6a 00                	push   $0x0
f01144ec:	50                   	push   %eax
f01144ed:	68 10 9b 13 f0       	push   $0xf0139b10
f01144f2:	68 b6 06 00 00       	push   $0x6b6
f01144f7:	68 de 7d 13 f0       	push   $0xf0137dde
f01144fc:	e8 31 be fe ff       	call   f0100332 <_warn>
f0114501:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114504:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114508:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011450e:	85 c0                	test   %eax,%eax
f0114510:	74 27                	je     f0114539 <test_calculate_allocated_space+0x2e4>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114512:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114518:	83 ec 0c             	sub    $0xc,%esp
f011451b:	6a 00                	push   $0x0
f011451d:	50                   	push   %eax
f011451e:	68 70 9b 13 f0       	push   $0xf0139b70
f0114523:	68 bb 06 00 00       	push   $0x6bb
f0114528:	68 de 7d 13 f0       	push   $0xf0137dde
f011452d:	e8 00 be fe ff       	call   f0100332 <_warn>
f0114532:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114535:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114539:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011453d:	74 04                	je     f0114543 <test_calculate_allocated_space+0x2ee>
f011453f:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114543:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test4
		num_tables = 0;
f0114547:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f011454e:	00 00 00 
		num_pages = 0;
f0114551:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114558:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1000, 0x1000+6*kilo, &num_tables, &num_pages);
f011455b:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011455e:	89 d0                	mov    %edx,%eax
f0114560:	01 c0                	add    %eax,%eax
f0114562:	01 d0                	add    %edx,%eax
f0114564:	01 c0                	add    %eax,%eax
f0114566:	05 00 10 00 00       	add    $0x1000,%eax
f011456b:	89 c2                	mov    %eax,%edx
f011456d:	83 ec 0c             	sub    $0xc,%esp
f0114570:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114576:	50                   	push   %eax
f0114577:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011457d:	50                   	push   %eax
f011457e:	52                   	push   %edx
f011457f:	68 00 10 00 00       	push   $0x1000
f0114584:	ff 75 d8             	pushl  -0x28(%ebp)
f0114587:	e8 ff 3c ff ff       	call   f010828b <calculate_allocated_space>
f011458c:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f011458f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114595:	85 c0                	test   %eax,%eax
f0114597:	74 27                	je     f01145c0 <test_calculate_allocated_space+0x36b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114599:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011459f:	83 ec 0c             	sub    $0xc,%esp
f01145a2:	6a 00                	push   $0x0
f01145a4:	50                   	push   %eax
f01145a5:	68 10 9b 13 f0       	push   $0xf0139b10
f01145aa:	68 c8 06 00 00       	push   $0x6c8
f01145af:	68 de 7d 13 f0       	push   $0xf0137dde
f01145b4:	e8 79 bd fe ff       	call   f0100332 <_warn>
f01145b9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145bc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01145c0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01145c6:	85 c0                	test   %eax,%eax
f01145c8:	74 27                	je     f01145f1 <test_calculate_allocated_space+0x39c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01145ca:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01145d0:	83 ec 0c             	sub    $0xc,%esp
f01145d3:	6a 00                	push   $0x0
f01145d5:	50                   	push   %eax
f01145d6:	68 70 9b 13 f0       	push   $0xf0139b70
f01145db:	68 cd 06 00 00       	push   $0x6cd
f01145e0:	68 de 7d 13 f0       	push   $0xf0137dde
f01145e5:	e8 48 bd fe ff       	call   f0100332 <_warn>
f01145ea:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01145ed:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01145f1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01145f5:	74 04                	je     f01145fb <test_calculate_allocated_space+0x3a6>
f01145f7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01145fb:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test5
		num_tables = 0;
f01145ff:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114606:	00 00 00 
		num_pages = 0;
f0114609:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114610:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0114613:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114616:	89 c2                	mov    %eax,%edx
f0114618:	01 d2                	add    %edx,%edx
f011461a:	01 d0                	add    %edx,%eax
f011461c:	05 00 18 00 00       	add    $0x1800,%eax
f0114621:	89 c2                	mov    %eax,%edx
f0114623:	83 ec 0c             	sub    $0xc,%esp
f0114626:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f011462c:	50                   	push   %eax
f011462d:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114633:	50                   	push   %eax
f0114634:	52                   	push   %edx
f0114635:	68 00 18 00 00       	push   $0x1800
f011463a:	ff 75 d8             	pushl  -0x28(%ebp)
f011463d:	e8 49 3c ff ff       	call   f010828b <calculate_allocated_space>
f0114642:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114645:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011464b:	85 c0                	test   %eax,%eax
f011464d:	74 27                	je     f0114676 <test_calculate_allocated_space+0x421>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011464f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114655:	83 ec 0c             	sub    $0xc,%esp
f0114658:	6a 00                	push   $0x0
f011465a:	50                   	push   %eax
f011465b:	68 10 9b 13 f0       	push   $0xf0139b10
f0114660:	68 d9 06 00 00       	push   $0x6d9
f0114665:	68 de 7d 13 f0       	push   $0xf0137dde
f011466a:	e8 c3 bc fe ff       	call   f0100332 <_warn>
f011466f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114672:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114676:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011467c:	85 c0                	test   %eax,%eax
f011467e:	74 27                	je     f01146a7 <test_calculate_allocated_space+0x452>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114680:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114686:	83 ec 0c             	sub    $0xc,%esp
f0114689:	6a 00                	push   $0x0
f011468b:	50                   	push   %eax
f011468c:	68 70 9b 13 f0       	push   $0xf0139b70
f0114691:	68 de 06 00 00       	push   $0x6de
f0114696:	68 de 7d 13 f0       	push   $0xf0137dde
f011469b:	e8 92 bc fe ff       	call   f0100332 <_warn>
f01146a0:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01146a3:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01146a7:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01146ab:	74 04                	je     f01146b1 <test_calculate_allocated_space+0x45c>
f01146ad:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01146b1:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test6
		num_tables = 0;
f01146b5:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f01146bc:	00 00 00 
		num_pages = 0;
f01146bf:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f01146c6:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f01146c9:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01146cc:	89 d0                	mov    %edx,%eax
f01146ce:	c1 e0 02             	shl    $0x2,%eax
f01146d1:	01 d0                	add    %edx,%eax
f01146d3:	01 c0                	add    %eax,%eax
f01146d5:	05 00 00 40 00       	add    $0x400000,%eax
f01146da:	89 c2                	mov    %eax,%edx
f01146dc:	83 ec 0c             	sub    $0xc,%esp
f01146df:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f01146e5:	50                   	push   %eax
f01146e6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f01146ec:	50                   	push   %eax
f01146ed:	52                   	push   %edx
f01146ee:	68 00 00 40 00       	push   $0x400000
f01146f3:	ff 75 d8             	pushl  -0x28(%ebp)
f01146f6:	e8 90 3b ff ff       	call   f010828b <calculate_allocated_space>
f01146fb:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01146fe:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114704:	85 c0                	test   %eax,%eax
f0114706:	74 27                	je     f011472f <test_calculate_allocated_space+0x4da>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f0114708:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011470e:	83 ec 0c             	sub    $0xc,%esp
f0114711:	6a 00                	push   $0x0
f0114713:	50                   	push   %eax
f0114714:	68 10 9b 13 f0       	push   $0xf0139b10
f0114719:	68 ea 06 00 00       	push   $0x6ea
f011471e:	68 de 7d 13 f0       	push   $0xf0137dde
f0114723:	e8 0a bc fe ff       	call   f0100332 <_warn>
f0114728:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011472b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f011472f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114735:	85 c0                	test   %eax,%eax
f0114737:	74 27                	je     f0114760 <test_calculate_allocated_space+0x50b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f0114739:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011473f:	83 ec 0c             	sub    $0xc,%esp
f0114742:	6a 00                	push   $0x0
f0114744:	50                   	push   %eax
f0114745:	68 70 9b 13 f0       	push   $0xf0139b70
f011474a:	68 ef 06 00 00       	push   $0x6ef
f011474f:	68 de 7d 13 f0       	push   $0xf0137dde
f0114754:	e8 d9 bb fe ff       	call   f0100332 <_warn>
f0114759:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011475c:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114760:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114764:	74 04                	je     f011476a <test_calculate_allocated_space+0x515>
f0114766:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f011476a:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		//Test7
		num_tables = 0;
f011476e:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114775:	00 00 00 
		num_pages = 0;
f0114778:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f011477f:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0114782:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114785:	05 00 00 38 00       	add    $0x380000,%eax
f011478a:	01 c0                	add    %eax,%eax
f011478c:	89 c2                	mov    %eax,%edx
f011478e:	83 ec 0c             	sub    $0xc,%esp
f0114791:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114797:	50                   	push   %eax
f0114798:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011479e:	50                   	push   %eax
f011479f:	52                   	push   %edx
f01147a0:	68 00 00 70 00       	push   $0x700000
f01147a5:	ff 75 d8             	pushl  -0x28(%ebp)
f01147a8:	e8 de 3a ff ff       	call   f010828b <calculate_allocated_space>
f01147ad:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f01147b0:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01147b6:	85 c0                	test   %eax,%eax
f01147b8:	74 27                	je     f01147e1 <test_calculate_allocated_space+0x58c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f01147ba:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01147c0:	83 ec 0c             	sub    $0xc,%esp
f01147c3:	6a 00                	push   $0x0
f01147c5:	50                   	push   %eax
f01147c6:	68 10 9b 13 f0       	push   $0xf0139b10
f01147cb:	68 fc 06 00 00       	push   $0x6fc
f01147d0:	68 de 7d 13 f0       	push   $0xf0137dde
f01147d5:	e8 58 bb fe ff       	call   f0100332 <_warn>
f01147da:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01147dd:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f01147e1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01147e7:	85 c0                	test   %eax,%eax
f01147e9:	74 27                	je     f0114812 <test_calculate_allocated_space+0x5bd>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f01147eb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01147f1:	83 ec 0c             	sub    $0xc,%esp
f01147f4:	6a 00                	push   $0x0
f01147f6:	50                   	push   %eax
f01147f7:	68 70 9b 13 f0       	push   $0xf0139b70
f01147fc:	68 01 07 00 00       	push   $0x701
f0114801:	68 de 7d 13 f0       	push   $0xf0137dde
f0114806:	e8 27 bb fe ff       	call   f0100332 <_warn>
f011480b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011480e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114812:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114816:	74 04                	je     f011481c <test_calculate_allocated_space+0x5c7>
f0114818:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f011481c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test8
		num_tables = 0;
f0114820:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114827:	00 00 00 
		num_pages = 0;
f011482a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114831:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0114834:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114837:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f011483c:	89 c2                	mov    %eax,%edx
f011483e:	83 ec 0c             	sub    $0xc,%esp
f0114841:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114847:	50                   	push   %eax
f0114848:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011484e:	50                   	push   %eax
f011484f:	52                   	push   %edx
f0114850:	68 ff ff 3f 00       	push   $0x3fffff
f0114855:	ff 75 d8             	pushl  -0x28(%ebp)
f0114858:	e8 2e 3a ff ff       	call   f010828b <calculate_allocated_space>
f011485d:	83 c4 20             	add    $0x20,%esp
		if (num_tables != 0)
f0114860:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114866:	85 c0                	test   %eax,%eax
f0114868:	74 27                	je     f0114891 <test_calculate_allocated_space+0x63c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, 0);
f011486a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114870:	83 ec 0c             	sub    $0xc,%esp
f0114873:	6a 00                	push   $0x0
f0114875:	50                   	push   %eax
f0114876:	68 10 9b 13 f0       	push   $0xf0139b10
f011487b:	68 0d 07 00 00       	push   $0x70d
f0114880:	68 de 7d 13 f0       	push   $0xf0137dde
f0114885:	e8 a8 ba fe ff       	call   f0100332 <_warn>
f011488a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f011488d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != 0)
f0114891:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114897:	85 c0                	test   %eax,%eax
f0114899:	74 27                	je     f01148c2 <test_calculate_allocated_space+0x66d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, 0);
f011489b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01148a1:	83 ec 0c             	sub    $0xc,%esp
f01148a4:	6a 00                	push   $0x0
f01148a6:	50                   	push   %eax
f01148a7:	68 70 9b 13 f0       	push   $0xf0139b70
f01148ac:	68 12 07 00 00       	push   $0x712
f01148b1:	68 de 7d 13 f0       	push   $0xf0137dde
f01148b6:	e8 77 ba fe ff       	call   f0100332 <_warn>
f01148bb:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01148be:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f01148c2:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01148c6:	74 04                	je     f01148cc <test_calculate_allocated_space+0x677>
f01148c8:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f01148cc:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE I: END\n") ;
f01148d0:	83 ec 0c             	sub    $0xc,%esp
f01148d3:	68 29 95 13 f0       	push   $0xf0139529
f01148d8:	e8 50 c3 fe ff       	call   f0100c2d <cprintf>
f01148dd:	83 c4 10             	add    $0x10,%esp

	/*==================================================*/
	/*PART II: SOME pages and/or tables are exist [50%] */
	/*==================================================*/
	cprintf("\nCASE II: SOME pages and/or tables are exist [50%]\n") ;
f01148e0:	83 ec 0c             	sub    $0xc,%esp
f01148e3:	68 30 9a 13 f0       	push   $0xf0139a30
f01148e8:	e8 40 c3 fe ff       	call   f0100c2d <cprintf>
f01148ed:	83 c4 10             	add    $0x10,%esp
	{
		//Test1
		/*allocate page*/char c1[100] ;strcconcat(aup_cmd, " 0x0", c1); execute_command(c1);
f01148f0:	83 ec 04             	sub    $0x4,%esp
f01148f3:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f01148f9:	50                   	push   %eax
f01148fa:	68 e2 88 13 f0       	push   $0xf01388e2
f01148ff:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114905:	50                   	push   %eax
f0114906:	e8 d0 c0 01 00       	call   f01309db <strcconcat>
f011490b:	83 c4 10             	add    $0x10,%esp
f011490e:	83 ec 0c             	sub    $0xc,%esp
f0114911:	8d 85 f4 fd ff ff    	lea    -0x20c(%ebp),%eax
f0114917:	50                   	push   %eax
f0114918:	e8 72 c3 fe ff       	call   f0100c8f <execute_command>
f011491d:	83 c4 10             	add    $0x10,%esp

		num_tables = 0;
f0114920:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114927:	00 00 00 
		num_pages = 0;
f011492a:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114931:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*kilo, &num_tables, &num_pages);
f0114934:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114937:	c1 e0 03             	shl    $0x3,%eax
f011493a:	89 c2                	mov    %eax,%edx
f011493c:	83 ec 0c             	sub    $0xc,%esp
f011493f:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114945:	50                   	push   %eax
f0114946:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f011494c:	50                   	push   %eax
f011494d:	52                   	push   %edx
f011494e:	6a 00                	push   $0x0
f0114950:	ff 75 d8             	pushl  -0x28(%ebp)
f0114953:	e8 33 39 ff ff       	call   f010828b <calculate_allocated_space>
f0114958:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f011495b:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1 ;
f0114962:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114969:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011496f:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114972:	74 28                	je     f011499c <test_calculate_allocated_space+0x747>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114974:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011497a:	83 ec 0c             	sub    $0xc,%esp
f011497d:	ff 75 c8             	pushl  -0x38(%ebp)
f0114980:	50                   	push   %eax
f0114981:	68 10 9b 13 f0       	push   $0xf0139b10
f0114986:	68 29 07 00 00       	push   $0x729
f011498b:	68 de 7d 13 f0       	push   $0xf0137dde
f0114990:	e8 9d b9 fe ff       	call   f0100332 <_warn>
f0114995:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114998:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f011499c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01149a2:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f01149a5:	74 28                	je     f01149cf <test_calculate_allocated_space+0x77a>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f01149a7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01149ad:	83 ec 0c             	sub    $0xc,%esp
f01149b0:	ff 75 c4             	pushl  -0x3c(%ebp)
f01149b3:	50                   	push   %eax
f01149b4:	68 70 9b 13 f0       	push   $0xf0139b70
f01149b9:	68 2e 07 00 00       	push   $0x72e
f01149be:	68 de 7d 13 f0       	push   $0xf0137dde
f01149c3:	e8 6a b9 fe ff       	call   f0100332 <_warn>
f01149c8:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f01149cb:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f01149cf:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f01149d3:	74 04                	je     f01149d9 <test_calculate_allocated_space+0x784>
f01149d5:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f01149d9:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c2[100] ;strcconcat(aup_cmd, " 0x100000", c2); execute_command(c2);
f01149dd:	83 ec 04             	sub    $0x4,%esp
f01149e0:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f01149e6:	50                   	push   %eax
f01149e7:	68 ef 88 13 f0       	push   $0xf01388ef
f01149ec:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f01149f2:	50                   	push   %eax
f01149f3:	e8 e3 bf 01 00       	call   f01309db <strcconcat>
f01149f8:	83 c4 10             	add    $0x10,%esp
f01149fb:	83 ec 0c             	sub    $0xc,%esp
f01149fe:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114a04:	50                   	push   %eax
f0114a05:	e8 85 c2 fe ff       	call   f0100c8f <execute_command>
f0114a0a:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x10000000", c3); execute_command(c3);
f0114a0d:	83 ec 04             	sub    $0x4,%esp
f0114a10:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114a16:	50                   	push   %eax
f0114a17:	68 64 9a 13 f0       	push   $0xf0139a64
f0114a1c:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114a22:	50                   	push   %eax
f0114a23:	e8 b3 bf 01 00       	call   f01309db <strcconcat>
f0114a28:	83 c4 10             	add    $0x10,%esp
f0114a2b:	83 ec 0c             	sub    $0xc,%esp
f0114a2e:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114a34:	50                   	push   %eax
f0114a35:	e8 55 c2 fe ff       	call   f0100c8f <execute_command>
f0114a3a:	83 c4 10             	add    $0x10,%esp

		//Test2
		num_tables = 0;
f0114a3d:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114a44:	00 00 00 
		num_pages = 0;
f0114a47:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114a4e:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+8*mega, &num_tables, &num_pages);
f0114a51:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114a54:	c1 e0 03             	shl    $0x3,%eax
f0114a57:	89 c2                	mov    %eax,%edx
f0114a59:	83 ec 0c             	sub    $0xc,%esp
f0114a5c:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114a62:	50                   	push   %eax
f0114a63:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114a69:	50                   	push   %eax
f0114a6a:	52                   	push   %edx
f0114a6b:	6a 00                	push   $0x0
f0114a6d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114a70:	e8 16 38 ff ff       	call   f010828b <calculate_allocated_space>
f0114a75:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 ;
f0114a78:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 2 ;
f0114a7f:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114a86:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114a8c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114a8f:	74 28                	je     f0114ab9 <test_calculate_allocated_space+0x864>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114a91:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114a97:	83 ec 0c             	sub    $0xc,%esp
f0114a9a:	ff 75 c8             	pushl  -0x38(%ebp)
f0114a9d:	50                   	push   %eax
f0114a9e:	68 10 9b 13 f0       	push   $0xf0139b10
f0114aa3:	68 3f 07 00 00       	push   $0x73f
f0114aa8:	68 de 7d 13 f0       	push   $0xf0137dde
f0114aad:	e8 80 b8 fe ff       	call   f0100332 <_warn>
f0114ab2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ab5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114ab9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114abf:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114ac2:	74 28                	je     f0114aec <test_calculate_allocated_space+0x897>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114ac4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114aca:	83 ec 0c             	sub    $0xc,%esp
f0114acd:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114ad0:	50                   	push   %eax
f0114ad1:	68 70 9b 13 f0       	push   $0xf0139b70
f0114ad6:	68 44 07 00 00       	push   $0x744
f0114adb:	68 de 7d 13 f0       	push   $0xf0137dde
f0114ae0:	e8 4d b8 fe ff       	call   f0100332 <_warn>
f0114ae5:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ae8:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114aec:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114af0:	74 04                	je     f0114af6 <test_calculate_allocated_space+0x8a1>
f0114af2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114af6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test3
		num_tables = 0;
f0114afa:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114b01:	00 00 00 
		num_pages = 0;
f0114b04:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114b0b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x0, 0x0+1024*mega, &num_tables, &num_pages);
f0114b0e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114b11:	c1 e0 0a             	shl    $0xa,%eax
f0114b14:	89 c2                	mov    %eax,%edx
f0114b16:	83 ec 0c             	sub    $0xc,%esp
f0114b19:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114b1f:	50                   	push   %eax
f0114b20:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114b26:	50                   	push   %eax
f0114b27:	52                   	push   %edx
f0114b28:	6a 00                	push   $0x0
f0114b2a:	ff 75 d8             	pushl  -0x28(%ebp)
f0114b2d:	e8 59 37 ff ff       	call   f010828b <calculate_allocated_space>
f0114b32:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1 + 1;
f0114b35:	c7 45 c8 02 00 00 00 	movl   $0x2,-0x38(%ebp)
		expected_num_pages = 1 + 1 + 1;
f0114b3c:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114b43:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114b49:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114b4c:	74 28                	je     f0114b76 <test_calculate_allocated_space+0x921>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114b4e:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114b54:	83 ec 0c             	sub    $0xc,%esp
f0114b57:	ff 75 c8             	pushl  -0x38(%ebp)
f0114b5a:	50                   	push   %eax
f0114b5b:	68 10 9b 13 f0       	push   $0xf0139b10
f0114b60:	68 52 07 00 00       	push   $0x752
f0114b65:	68 de 7d 13 f0       	push   $0xf0137dde
f0114b6a:	e8 c3 b7 fe ff       	call   f0100332 <_warn>
f0114b6f:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114b72:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114b76:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114b7c:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114b7f:	74 28                	je     f0114ba9 <test_calculate_allocated_space+0x954>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114b81:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114b87:	83 ec 0c             	sub    $0xc,%esp
f0114b8a:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114b8d:	50                   	push   %eax
f0114b8e:	68 70 9b 13 f0       	push   $0xf0139b70
f0114b93:	68 57 07 00 00       	push   $0x757
f0114b98:	68 de 7d 13 f0       	push   $0xf0137dde
f0114b9d:	e8 90 b7 fe ff       	call   f0100332 <_warn>
f0114ba2:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ba5:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114ba9:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114bad:	74 04                	je     f0114bb3 <test_calculate_allocated_space+0x95e>
f0114baf:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114bb3:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x2000", c3); execute_command(c3);
f0114bb7:	83 ec 04             	sub    $0x4,%esp
f0114bba:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114bc0:	50                   	push   %eax
f0114bc1:	68 70 9a 13 f0       	push   $0xf0139a70
f0114bc6:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114bcc:	50                   	push   %eax
f0114bcd:	e8 09 be 01 00       	call   f01309db <strcconcat>
f0114bd2:	83 c4 10             	add    $0x10,%esp
f0114bd5:	83 ec 0c             	sub    $0xc,%esp
f0114bd8:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114bde:	50                   	push   %eax
f0114bdf:	e8 ab c0 fe ff       	call   f0100c8f <execute_command>
f0114be4:	83 c4 10             	add    $0x10,%esp

		//Test4
		num_tables = 0;
f0114be7:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114bee:	00 00 00 
		num_pages = 0;
f0114bf1:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114bf8:	00 00 00 
		calculate_allocated_space(proc_directory, 0x1800, 0x1800+3*kilo, &num_tables, &num_pages);
f0114bfb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114bfe:	89 c2                	mov    %eax,%edx
f0114c00:	01 d2                	add    %edx,%edx
f0114c02:	01 d0                	add    %edx,%eax
f0114c04:	05 00 18 00 00       	add    $0x1800,%eax
f0114c09:	89 c2                	mov    %eax,%edx
f0114c0b:	83 ec 0c             	sub    $0xc,%esp
f0114c0e:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114c14:	50                   	push   %eax
f0114c15:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114c1b:	50                   	push   %eax
f0114c1c:	52                   	push   %edx
f0114c1d:	68 00 18 00 00       	push   $0x1800
f0114c22:	ff 75 d8             	pushl  -0x28(%ebp)
f0114c25:	e8 61 36 ff ff       	call   f010828b <calculate_allocated_space>
f0114c2a:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114c2d:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0114c34:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114c3b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114c41:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114c44:	74 28                	je     f0114c6e <test_calculate_allocated_space+0xa19>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114c46:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114c4c:	83 ec 0c             	sub    $0xc,%esp
f0114c4f:	ff 75 c8             	pushl  -0x38(%ebp)
f0114c52:	50                   	push   %eax
f0114c53:	68 10 9b 13 f0       	push   $0xf0139b10
f0114c58:	68 68 07 00 00       	push   $0x768
f0114c5d:	68 de 7d 13 f0       	push   $0xf0137dde
f0114c62:	e8 cb b6 fe ff       	call   f0100332 <_warn>
f0114c67:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c6a:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114c6e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c74:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114c77:	74 28                	je     f0114ca1 <test_calculate_allocated_space+0xa4c>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114c79:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114c7f:	83 ec 0c             	sub    $0xc,%esp
f0114c82:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114c85:	50                   	push   %eax
f0114c86:	68 70 9b 13 f0       	push   $0xf0139b70
f0114c8b:	68 6d 07 00 00       	push   $0x76d
f0114c90:	68 de 7d 13 f0       	push   $0xf0137dde
f0114c95:	e8 98 b6 fe ff       	call   f0100332 <_warn>
f0114c9a:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114c9d:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114ca1:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ca5:	74 04                	je     f0114cab <test_calculate_allocated_space+0xa56>
f0114ca7:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114cab:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x800000", c4); execute_command(c4);
f0114caf:	83 ec 04             	sub    $0x4,%esp
f0114cb2:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114cb8:	50                   	push   %eax
f0114cb9:	68 48 8b 13 f0       	push   $0xf0138b48
f0114cbe:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114cc4:	50                   	push   %eax
f0114cc5:	e8 11 bd 01 00       	call   f01309db <strcconcat>
f0114cca:	83 c4 10             	add    $0x10,%esp
f0114ccd:	83 ec 0c             	sub    $0xc,%esp
f0114cd0:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114cd6:	50                   	push   %eax
f0114cd7:	e8 b3 bf fe ff       	call   f0100c8f <execute_command>
f0114cdc:	83 c4 10             	add    $0x10,%esp

		//Test5
		num_tables = 0;
f0114cdf:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114ce6:	00 00 00 
		num_pages = 0;
f0114ce9:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114cf0:	00 00 00 
		calculate_allocated_space(proc_directory, 0x400000, 0x400000+10*mega, &num_tables, &num_pages);
f0114cf3:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0114cf6:	89 d0                	mov    %edx,%eax
f0114cf8:	c1 e0 02             	shl    $0x2,%eax
f0114cfb:	01 d0                	add    %edx,%eax
f0114cfd:	01 c0                	add    %eax,%eax
f0114cff:	05 00 00 40 00       	add    $0x400000,%eax
f0114d04:	89 c2                	mov    %eax,%edx
f0114d06:	83 ec 0c             	sub    $0xc,%esp
f0114d09:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114d0f:	50                   	push   %eax
f0114d10:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114d16:	50                   	push   %eax
f0114d17:	52                   	push   %edx
f0114d18:	68 00 00 40 00       	push   $0x400000
f0114d1d:	ff 75 d8             	pushl  -0x28(%ebp)
f0114d20:	e8 66 35 ff ff       	call   f010828b <calculate_allocated_space>
f0114d25:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114d28:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 1;
f0114d2f:	c7 45 c4 01 00 00 00 	movl   $0x1,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114d36:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114d3c:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114d3f:	74 28                	je     f0114d69 <test_calculate_allocated_space+0xb14>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114d41:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114d47:	83 ec 0c             	sub    $0xc,%esp
f0114d4a:	ff 75 c8             	pushl  -0x38(%ebp)
f0114d4d:	50                   	push   %eax
f0114d4e:	68 10 9b 13 f0       	push   $0xf0139b10
f0114d53:	68 7d 07 00 00       	push   $0x77d
f0114d58:	68 de 7d 13 f0       	push   $0xf0137dde
f0114d5d:	e8 d0 b5 fe ff       	call   f0100332 <_warn>
f0114d62:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d65:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114d69:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114d6f:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114d72:	74 28                	je     f0114d9c <test_calculate_allocated_space+0xb47>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114d74:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114d7a:	83 ec 0c             	sub    $0xc,%esp
f0114d7d:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114d80:	50                   	push   %eax
f0114d81:	68 70 9b 13 f0       	push   $0xf0139b70
f0114d86:	68 82 07 00 00       	push   $0x782
f0114d8b:	68 de 7d 13 f0       	push   $0xf0137dde
f0114d90:	e8 9d b5 fe ff       	call   f0100332 <_warn>
f0114d95:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114d98:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 5 ;
f0114d9c:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114da0:	74 04                	je     f0114da6 <test_calculate_allocated_space+0xb51>
f0114da2:	83 45 e4 05          	addl   $0x5,-0x1c(%ebp)
		correct = 1 ;
f0114da6:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	{
		/*allocate page*/char c3[100] ;strcconcat(aup_cmd, " 0x801000", c3); execute_command(c3);
f0114daa:	83 ec 04             	sub    $0x4,%esp
f0114dad:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114db3:	50                   	push   %eax
f0114db4:	68 52 8b 13 f0       	push   $0xf0138b52
f0114db9:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114dbf:	50                   	push   %eax
f0114dc0:	e8 16 bc 01 00       	call   f01309db <strcconcat>
f0114dc5:	83 c4 10             	add    $0x10,%esp
f0114dc8:	83 ec 0c             	sub    $0xc,%esp
f0114dcb:	8d 85 58 fe ff ff    	lea    -0x1a8(%ebp),%eax
f0114dd1:	50                   	push   %eax
f0114dd2:	e8 b8 be fe ff       	call   f0100c8f <execute_command>
f0114dd7:	83 c4 10             	add    $0x10,%esp
		/*allocate page*/char c4[100] ;strcconcat(aup_cmd, " 0x810000", c4); execute_command(c4);
f0114dda:	83 ec 04             	sub    $0x4,%esp
f0114ddd:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114de3:	50                   	push   %eax
f0114de4:	68 78 9a 13 f0       	push   $0xf0139a78
f0114de9:	8d 85 34 ff ff ff    	lea    -0xcc(%ebp),%eax
f0114def:	50                   	push   %eax
f0114df0:	e8 e6 bb 01 00       	call   f01309db <strcconcat>
f0114df5:	83 c4 10             	add    $0x10,%esp
f0114df8:	83 ec 0c             	sub    $0xc,%esp
f0114dfb:	8d 85 bc fe ff ff    	lea    -0x144(%ebp),%eax
f0114e01:	50                   	push   %eax
f0114e02:	e8 88 be fe ff       	call   f0100c8f <execute_command>
f0114e07:	83 c4 10             	add    $0x10,%esp

		//Test6
		num_tables = 0;
f0114e0a:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114e11:	00 00 00 
		num_pages = 0;
f0114e14:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114e1b:	00 00 00 
		calculate_allocated_space(proc_directory, 0x700000, 0x700000+2*mega, &num_tables, &num_pages);
f0114e1e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0114e21:	05 00 00 38 00       	add    $0x380000,%eax
f0114e26:	01 c0                	add    %eax,%eax
f0114e28:	89 c2                	mov    %eax,%edx
f0114e2a:	83 ec 0c             	sub    $0xc,%esp
f0114e2d:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114e33:	50                   	push   %eax
f0114e34:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114e3a:	50                   	push   %eax
f0114e3b:	52                   	push   %edx
f0114e3c:	68 00 00 70 00       	push   $0x700000
f0114e41:	ff 75 d8             	pushl  -0x28(%ebp)
f0114e44:	e8 42 34 ff ff       	call   f010828b <calculate_allocated_space>
f0114e49:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114e4c:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 3;
f0114e53:	c7 45 c4 03 00 00 00 	movl   $0x3,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114e5a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114e60:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114e63:	74 28                	je     f0114e8d <test_calculate_allocated_space+0xc38>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114e65:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114e6b:	83 ec 0c             	sub    $0xc,%esp
f0114e6e:	ff 75 c8             	pushl  -0x38(%ebp)
f0114e71:	50                   	push   %eax
f0114e72:	68 10 9b 13 f0       	push   $0xf0139b10
f0114e77:	68 94 07 00 00       	push   $0x794
f0114e7c:	68 de 7d 13 f0       	push   $0xf0137dde
f0114e81:	e8 ac b4 fe ff       	call   f0100332 <_warn>
f0114e86:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114e89:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114e8d:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114e93:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114e96:	74 28                	je     f0114ec0 <test_calculate_allocated_space+0xc6b>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114e98:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114e9e:	83 ec 0c             	sub    $0xc,%esp
f0114ea1:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114ea4:	50                   	push   %eax
f0114ea5:	68 70 9b 13 f0       	push   $0xf0139b70
f0114eaa:	68 99 07 00 00       	push   $0x799
f0114eaf:	68 de 7d 13 f0       	push   $0xf0137dde
f0114eb4:	e8 79 b4 fe ff       	call   f0100332 <_warn>
f0114eb9:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114ebc:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114ec0:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114ec4:	74 04                	je     f0114eca <test_calculate_allocated_space+0xc75>
f0114ec6:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114eca:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)

		//Test7
		num_tables = 0;
f0114ece:	c7 85 20 ff ff ff 00 	movl   $0x0,-0xe0(%ebp)
f0114ed5:	00 00 00 
		num_pages = 0;
f0114ed8:	c7 85 24 ff ff ff 00 	movl   $0x0,-0xdc(%ebp)
f0114edf:	00 00 00 
		calculate_allocated_space(proc_directory, 0x3FFFFF, 0x3FFFFF+1*kilo, &num_tables, &num_pages);
f0114ee2:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0114ee5:	05 ff ff 3f 00       	add    $0x3fffff,%eax
f0114eea:	89 c2                	mov    %eax,%edx
f0114eec:	83 ec 0c             	sub    $0xc,%esp
f0114eef:	8d 85 24 ff ff ff    	lea    -0xdc(%ebp),%eax
f0114ef5:	50                   	push   %eax
f0114ef6:	8d 85 20 ff ff ff    	lea    -0xe0(%ebp),%eax
f0114efc:	50                   	push   %eax
f0114efd:	52                   	push   %edx
f0114efe:	68 ff ff 3f 00       	push   $0x3fffff
f0114f03:	ff 75 d8             	pushl  -0x28(%ebp)
f0114f06:	e8 80 33 ff ff       	call   f010828b <calculate_allocated_space>
f0114f0b:	83 c4 20             	add    $0x20,%esp
		expected_num_tables = 1;
f0114f0e:	c7 45 c8 01 00 00 00 	movl   $0x1,-0x38(%ebp)
		expected_num_pages = 0;
f0114f15:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
		if (num_tables != expected_num_tables)
f0114f1c:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f22:	3b 45 c8             	cmp    -0x38(%ebp),%eax
f0114f25:	74 28                	je     f0114f4f <test_calculate_allocated_space+0xcfa>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Tables count is not correct). res=%d, expected=%d\n", num_tables, expected_num_tables);
f0114f27:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0114f2d:	83 ec 0c             	sub    $0xc,%esp
f0114f30:	ff 75 c8             	pushl  -0x38(%ebp)
f0114f33:	50                   	push   %eax
f0114f34:	68 10 9b 13 f0       	push   $0xf0139b10
f0114f39:	68 a7 07 00 00       	push   $0x7a7
f0114f3e:	68 de 7d 13 f0       	push   $0xf0137dde
f0114f43:	e8 ea b3 fe ff       	call   f0100332 <_warn>
f0114f48:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f4b:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (num_pages != expected_num_pages)
f0114f4f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f55:	3b 45 c4             	cmp    -0x3c(%ebp),%eax
f0114f58:	74 28                	je     f0114f82 <test_calculate_allocated_space+0xd2d>
		{
			warn("[EVAL] calculate_allocated_space: Failed (Pages count is not correct). res=%d, expected=%d\n", num_pages, expected_num_pages);
f0114f5a:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0114f60:	83 ec 0c             	sub    $0xc,%esp
f0114f63:	ff 75 c4             	pushl  -0x3c(%ebp)
f0114f66:	50                   	push   %eax
f0114f67:	68 70 9b 13 f0       	push   $0xf0139b70
f0114f6c:	68 ac 07 00 00       	push   $0x7ac
f0114f71:	68 de 7d 13 f0       	push   $0xf0137dde
f0114f76:	e8 b7 b3 fe ff       	call   f0100332 <_warn>
f0114f7b:	83 c4 20             	add    $0x20,%esp
			correct = 0;
f0114f7e:	c6 45 e3 00          	movb   $0x0,-0x1d(%ebp)
		}
		if (correct) eval += 10 ;
f0114f82:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f0114f86:	74 04                	je     f0114f8c <test_calculate_allocated_space+0xd37>
f0114f88:	83 45 e4 0a          	addl   $0xa,-0x1c(%ebp)
		correct = 1 ;
f0114f8c:	c6 45 e3 01          	movb   $0x1,-0x1d(%ebp)
	}
	cprintf("\nCASE II: END\n") ;
f0114f90:	83 ec 0c             	sub    $0xc,%esp
f0114f93:	68 03 8b 13 f0       	push   $0xf0138b03
f0114f98:	e8 90 bc fe ff       	call   f0100c2d <cprintf>
f0114f9d:	83 c4 10             	add    $0x10,%esp

	cprintf("[EVAL] calculate_allocated_space: FINISHED. Evaluation = %d\n", eval);
f0114fa0:	83 ec 08             	sub    $0x8,%esp
f0114fa3:	ff 75 e4             	pushl  -0x1c(%ebp)
f0114fa6:	68 cc 9b 13 f0       	push   $0xf0139bcc
f0114fab:	e8 7d bc fe ff       	call   f0100c2d <cprintf>
f0114fb0:	83 c4 10             	add    $0x10,%esp
	if(eval == 100)
f0114fb3:	83 7d e4 64          	cmpl   $0x64,-0x1c(%ebp)
f0114fb7:	75 10                	jne    f0114fc9 <test_calculate_allocated_space+0xd74>
		cprintf("Congratulations!! test calculate_allocated_space completed successfully.\n");
f0114fb9:	83 ec 0c             	sub    $0xc,%esp
f0114fbc:	68 0c 9c 13 f0       	push   $0xf0139c0c
f0114fc1:	e8 67 bc fe ff       	call   f0100c2d <cprintf>
f0114fc6:	83 c4 10             	add    $0x10,%esp

	//return back to the kernel directory
	lcr3(phys_page_directory) ;
f0114fc9:	a1 08 85 6e f0       	mov    0xf06e8508,%eax
f0114fce:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0114fd1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0114fd4:	0f 22 d8             	mov    %eax,%cr3

	return 0;
f0114fd7:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0114fdc:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0114fdf:	5b                   	pop    %ebx
f0114fe0:	5e                   	pop    %esi
f0114fe1:	5f                   	pop    %edi
f0114fe2:	5d                   	pop    %ebp
f0114fe3:	c3                   	ret    

f0114fe4 <CB>:
//===========================================================================
//===========================================================================
//===========================================================================

int CB(uint32 *ptr_dir, uint32 va, int bn)
{
f0114fe4:	55                   	push   %ebp
f0114fe5:	89 e5                	mov    %esp,%ebp
f0114fe7:	83 ec 18             	sub    $0x18,%esp
	//assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f0114fea:	8b 45 10             	mov    0x10(%ebp),%eax
f0114fed:	ba 01 00 00 00       	mov    $0x1,%edx
f0114ff2:	88 c1                	mov    %al,%cl
f0114ff4:	d3 e2                	shl    %cl,%edx
f0114ff6:	89 d0                	mov    %edx,%eax
f0114ff8:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0114ffb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0114ffe:	c1 e8 16             	shr    $0x16,%eax
f0115001:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115008:	8b 45 08             	mov    0x8(%ebp),%eax
f011500b:	01 d0                	add    %edx,%eax
f011500d:	8b 00                	mov    (%eax),%eax
f011500f:	83 e0 01             	and    $0x1,%eax
f0115012:	85 c0                	test   %eax,%eax
f0115014:	75 07                	jne    f011501d <CB+0x39>
f0115016:	b8 00 00 00 00       	mov    $0x0,%eax
f011501b:	eb 76                	jmp    f0115093 <CB+0xaf>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f011501d:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115020:	c1 e8 16             	shr    $0x16,%eax
f0115023:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011502a:	8b 45 08             	mov    0x8(%ebp),%eax
f011502d:	01 d0                	add    %edx,%eax
f011502f:	8b 00                	mov    (%eax),%eax
f0115031:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115036:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0115039:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011503c:	c1 e8 0c             	shr    $0xc,%eax
f011503f:	89 45 ec             	mov    %eax,-0x14(%ebp)
f0115042:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0115047:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f011504a:	72 17                	jb     f0115063 <CB+0x7f>
f011504c:	ff 75 f0             	pushl  -0x10(%ebp)
f011504f:	68 58 9c 13 f0       	push   $0xf0139c58
f0115054:	68 c7 07 00 00       	push   $0x7c7
f0115059:	68 de 7d 13 f0       	push   $0xf0137dde
f011505e:	e8 43 b1 fe ff       	call   f01001a6 <_panic>
f0115063:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115066:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011506b:	89 45 e8             	mov    %eax,-0x18(%ebp)
	return ((table[((((uint32) (va)) >> 12) & 0x3FF)]&mask) == mask)? 1 : 0 ;
f011506e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115071:	c1 e8 0c             	shr    $0xc,%eax
f0115074:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115079:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115080:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115083:	01 d0                	add    %edx,%eax
f0115085:	8b 00                	mov    (%eax),%eax
f0115087:	23 45 f4             	and    -0xc(%ebp),%eax
f011508a:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011508d:	0f 94 c0             	sete   %al
f0115090:	0f b6 c0             	movzbl %al,%eax
}
f0115093:	c9                   	leave  
f0115094:	c3                   	ret    

f0115095 <SB>:
int SB(uint32 *ptr_dir, uint32 va, int bn , int v)
{
f0115095:	55                   	push   %ebp
f0115096:	89 e5                	mov    %esp,%ebp
f0115098:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 mask = 1<<bn;
f011509b:	8b 45 10             	mov    0x10(%ebp),%eax
f011509e:	ba 01 00 00 00       	mov    $0x1,%edx
f01150a3:	88 c1                	mov    %al,%cl
f01150a5:	d3 e2                	shl    %cl,%edx
f01150a7:	89 d0                	mov    %edx,%eax
f01150a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01150ac:	8b 45 0c             	mov    0xc(%ebp),%eax
f01150af:	c1 e8 16             	shr    $0x16,%eax
f01150b2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01150b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01150bc:	01 d0                	add    %edx,%eax
f01150be:	8b 00                	mov    (%eax),%eax
f01150c0:	83 e0 01             	and    $0x1,%eax
f01150c3:	85 c0                	test   %eax,%eax
f01150c5:	75 0a                	jne    f01150d1 <SB+0x3c>
f01150c7:	b8 00 00 00 00       	mov    $0x0,%eax
f01150cc:	e9 cd 00 00 00       	jmp    f011519e <SB+0x109>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01150d1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01150d4:	c1 e8 16             	shr    $0x16,%eax
f01150d7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01150de:	8b 45 08             	mov    0x8(%ebp),%eax
f01150e1:	01 d0                	add    %edx,%eax
f01150e3:	8b 00                	mov    (%eax),%eax
f01150e5:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01150ea:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01150ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01150f0:	c1 e8 0c             	shr    $0xc,%eax
f01150f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01150f6:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01150fb:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01150fe:	72 17                	jb     f0115117 <SB+0x82>
f0115100:	ff 75 f0             	pushl  -0x10(%ebp)
f0115103:	68 58 9c 13 f0       	push   $0xf0139c58
f0115108:	68 cf 07 00 00       	push   $0x7cf
f011510d:	68 de 7d 13 f0       	push   $0xf0137dde
f0115112:	e8 8f b0 fe ff       	call   f01001a6 <_panic>
f0115117:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011511a:	2d 00 00 00 10       	sub    $0x10000000,%eax
f011511f:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (~v) table[((((uint32) (va)) >> 12) & 0x3FF)] &= ~mask ;
f0115122:	83 7d 14 ff          	cmpl   $0xffffffff,0x14(%ebp)
f0115126:	74 3c                	je     f0115164 <SB+0xcf>
f0115128:	8b 45 0c             	mov    0xc(%ebp),%eax
f011512b:	c1 e8 0c             	shr    $0xc,%eax
f011512e:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115133:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011513a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011513d:	01 d0                	add    %edx,%eax
f011513f:	8b 55 0c             	mov    0xc(%ebp),%edx
f0115142:	c1 ea 0c             	shr    $0xc,%edx
f0115145:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011514b:	8d 0c 95 00 00 00 00 	lea    0x0(,%edx,4),%ecx
f0115152:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0115155:	01 ca                	add    %ecx,%edx
f0115157:	8b 12                	mov    (%edx),%edx
f0115159:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011515c:	f7 d1                	not    %ecx
f011515e:	21 ca                	and    %ecx,%edx
f0115160:	89 10                	mov    %edx,(%eax)
f0115162:	eb 35                	jmp    f0115199 <SB+0x104>
	else 	table[((((uint32) (va)) >> 12) & 0x3FF)] |= mask ;
f0115164:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115167:	c1 e8 0c             	shr    $0xc,%eax
f011516a:	25 ff 03 00 00       	and    $0x3ff,%eax
f011516f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115176:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115179:	01 c2                	add    %eax,%edx
f011517b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011517e:	c1 e8 0c             	shr    $0xc,%eax
f0115181:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115186:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f011518d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115190:	01 c8                	add    %ecx,%eax
f0115192:	8b 00                	mov    (%eax),%eax
f0115194:	0b 45 f4             	or     -0xc(%ebp),%eax
f0115197:	89 02                	mov    %eax,(%edx)
	return 0;
f0115199:	b8 00 00 00 00       	mov    $0x0,%eax
}
f011519e:	c9                   	leave  
f011519f:	c3                   	ret    

f01151a0 <CPs>:
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
f01151a0:	55                   	push   %ebp
f01151a1:	89 e5                	mov    %esp,%ebp
f01151a3:	83 ec 28             	sub    $0x28,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f01151a6:	8b 45 0c             	mov    0xc(%ebp),%eax
f01151a9:	c1 e8 16             	shr    $0x16,%eax
f01151ac:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01151b3:	8b 45 08             	mov    0x8(%ebp),%eax
f01151b6:	01 d0                	add    %edx,%eax
f01151b8:	8b 00                	mov    (%eax),%eax
f01151ba:	83 e0 01             	and    $0x1,%eax
f01151bd:	85 c0                	test   %eax,%eax
f01151bf:	75 0a                	jne    f01151cb <CPs+0x2b>
f01151c1:	b8 00 00 00 00       	mov    $0x0,%eax
f01151c6:	e9 b8 00 00 00       	jmp    f0115283 <CPs+0xe3>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01151cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01151ce:	c1 e8 16             	shr    $0x16,%eax
f01151d1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01151d8:	8b 45 08             	mov    0x8(%ebp),%eax
f01151db:	01 d0                	add    %edx,%eax
f01151dd:	8b 00                	mov    (%eax),%eax
f01151df:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01151e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01151e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01151ea:	c1 e8 0c             	shr    $0xc,%eax
f01151ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01151f0:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01151f5:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f01151f8:	72 17                	jb     f0115211 <CPs+0x71>
f01151fa:	ff 75 f0             	pushl  -0x10(%ebp)
f01151fd:	68 58 9c 13 f0       	push   $0xf0139c58
f0115202:	68 d8 07 00 00       	push   $0x7d8
f0115207:	68 de 7d 13 f0       	push   $0xf0137dde
f011520c:	e8 95 af fe ff       	call   f01001a6 <_panic>
f0115211:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115214:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115219:	89 45 e8             	mov    %eax,-0x18(%ebp)
	for (int i = 0 ; i < 12 ; i++)
f011521c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0115223:	eb 53                	jmp    f0115278 <CPs+0xd8>
	{
		uint32 mask = 1<<i;
f0115225:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115228:	ba 01 00 00 00       	mov    $0x1,%edx
f011522d:	88 c1                	mov    %al,%cl
f011522f:	d3 e2                	shl    %cl,%edx
f0115231:	89 d0                	mov    %edx,%eax
f0115233:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (!(which & mask))	continue ;
f0115236:	8b 45 14             	mov    0x14(%ebp),%eax
f0115239:	23 45 e4             	and    -0x1c(%ebp),%eax
f011523c:	85 c0                	test   %eax,%eax
f011523e:	74 34                	je     f0115274 <CPs+0xd4>
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
f0115240:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115243:	c1 e8 0c             	shr    $0xc,%eax
f0115246:	25 ff 03 00 00       	and    $0x3ff,%eax
f011524b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115252:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115255:	01 d0                	add    %edx,%eax
f0115257:	8b 00                	mov    (%eax),%eax
f0115259:	33 45 10             	xor    0x10(%ebp),%eax
f011525c:	23 45 e4             	and    -0x1c(%ebp),%eax
f011525f:	85 c0                	test   %eax,%eax
f0115261:	0f 94 c0             	sete   %al
f0115264:	88 45 e3             	mov    %al,-0x1d(%ebp)
		if (!c) return 0;
f0115267:	80 7d e3 00          	cmpb   $0x0,-0x1d(%ebp)
f011526b:	75 08                	jne    f0115275 <CPs+0xd5>
f011526d:	b8 00 00 00 00       	mov    $0x0,%eax
f0115272:	eb 0f                	jmp    f0115283 <CPs+0xe3>
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
	{
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
f0115274:	90                   	nop
int CPs(uint32 *ptr_dir, uint32 va, uint32 perms, uint32 which)
{
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
	for (int i = 0 ; i < 12 ; i++)
f0115275:	ff 45 f4             	incl   -0xc(%ebp)
f0115278:	83 7d f4 0b          	cmpl   $0xb,-0xc(%ebp)
f011527c:	7e a7                	jle    f0115225 <CPs+0x85>
		uint32 mask = 1<<i;
		if (!(which & mask))	continue ;
		uint8 c = (table[((((uint32) (va)) >> 12) & 0x3FF)] & mask) == (perms & mask) ? 1 :  0;
		if (!c) return 0;
	}
	return 1;
f011527e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0115283:	c9                   	leave  
f0115284:	c3                   	ret    

f0115285 <CA>:

int CA(uint32 *ptr_dir, uint32 va)
{
f0115285:	55                   	push   %ebp
f0115286:	89 e5                	mov    %esp,%ebp
f0115288:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011528b:	8b 45 0c             	mov    0xc(%ebp),%eax
f011528e:	c1 e8 16             	shr    $0x16,%eax
f0115291:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115298:	8b 45 08             	mov    0x8(%ebp),%eax
f011529b:	01 d0                	add    %edx,%eax
f011529d:	8b 00                	mov    (%eax),%eax
f011529f:	83 e0 01             	and    $0x1,%eax
f01152a2:	85 c0                	test   %eax,%eax
f01152a4:	75 07                	jne    f01152ad <CA+0x28>
f01152a6:	b8 00 00 00 00       	mov    $0x0,%eax
f01152ab:	eb 6f                	jmp    f011531c <CA+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01152ad:	8b 45 0c             	mov    0xc(%ebp),%eax
f01152b0:	c1 e8 16             	shr    $0x16,%eax
f01152b3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01152ba:	8b 45 08             	mov    0x8(%ebp),%eax
f01152bd:	01 d0                	add    %edx,%eax
f01152bf:	8b 00                	mov    (%eax),%eax
f01152c1:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01152c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01152c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01152cc:	c1 e8 0c             	shr    $0xc,%eax
f01152cf:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01152d2:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01152d7:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01152da:	72 17                	jb     f01152f3 <CA+0x6e>
f01152dc:	ff 75 f4             	pushl  -0xc(%ebp)
f01152df:	68 58 9c 13 f0       	push   $0xf0139c58
f01152e4:	68 e7 07 00 00       	push   $0x7e7
f01152e9:	68 de 7d 13 f0       	push   $0xf0137dde
f01152ee:	e8 b3 ae fe ff       	call   f01001a6 <_panic>
f01152f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01152f6:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01152fb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)]&~0x00000FFF;
f01152fe:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115301:	c1 e8 0c             	shr    $0xc,%eax
f0115304:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115309:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115310:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115313:	01 d0                	add    %edx,%eax
f0115315:	8b 00                	mov    (%eax),%eax
f0115317:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f011531c:	c9                   	leave  
f011531d:	c3                   	ret    

f011531e <CE>:

int CE(uint32 *_d, uint32 va)
{
f011531e:	55                   	push   %ebp
f011531f:	89 e5                	mov    %esp,%ebp
f0115321:	83 ec 18             	sub    $0x18,%esp
	if (!(_d[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f0115324:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115327:	c1 e8 16             	shr    $0x16,%eax
f011532a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115331:	8b 45 08             	mov    0x8(%ebp),%eax
f0115334:	01 d0                	add    %edx,%eax
f0115336:	8b 00                	mov    (%eax),%eax
f0115338:	83 e0 01             	and    $0x1,%eax
f011533b:	85 c0                	test   %eax,%eax
f011533d:	75 07                	jne    f0115346 <CE+0x28>
f011533f:	b8 00 00 00 00       	mov    $0x0,%eax
f0115344:	eb 7a                	jmp    f01153c0 <CE+0xa2>
	uint32 *_t = (STATIC_KERNEL_VIRTUAL_ADDRESS(_d[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f0115346:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115349:	c1 e8 16             	shr    $0x16,%eax
f011534c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115353:	8b 45 08             	mov    0x8(%ebp),%eax
f0115356:	01 d0                	add    %edx,%eax
f0115358:	8b 00                	mov    (%eax),%eax
f011535a:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f011535f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0115362:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115365:	c1 e8 0c             	shr    $0xc,%eax
f0115368:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011536b:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f0115370:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f0115373:	72 17                	jb     f011538c <CE+0x6e>
f0115375:	ff 75 f4             	pushl  -0xc(%ebp)
f0115378:	68 58 9c 13 f0       	push   $0xf0139c58
f011537d:	68 ee 07 00 00       	push   $0x7ee
f0115382:	68 de 7d 13 f0       	push   $0xf0137dde
f0115387:	e8 1a ae fe ff       	call   f01001a6 <_panic>
f011538c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011538f:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115394:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if ((_t[((((uint32) (va)) >> 12) & 0x3FF)])!=0) return 0;
f0115397:	8b 45 0c             	mov    0xc(%ebp),%eax
f011539a:	c1 e8 0c             	shr    $0xc,%eax
f011539d:	25 ff 03 00 00       	and    $0x3ff,%eax
f01153a2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01153a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01153ac:	01 d0                	add    %edx,%eax
f01153ae:	8b 00                	mov    (%eax),%eax
f01153b0:	85 c0                	test   %eax,%eax
f01153b2:	74 07                	je     f01153bb <CE+0x9d>
f01153b4:	b8 00 00 00 00       	mov    $0x0,%eax
f01153b9:	eb 05                	jmp    f01153c0 <CE+0xa2>
	return 1;
f01153bb:	b8 01 00 00 00       	mov    $0x1,%eax
}
f01153c0:	c9                   	leave  
f01153c1:	c3                   	ret    

f01153c2 <CP>:

int CP(uint32* pd, uint32 va, uint32 ps, uint32 pc)
{
f01153c2:	55                   	push   %ebp
f01153c3:	89 e5                	mov    %esp,%ebp
f01153c5:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	uint32 pd_entry = pd[((((uint32) (va)) >> 22) & 0x3FF)];
f01153c8:	8b 45 0c             	mov    0xc(%ebp),%eax
f01153cb:	c1 e8 16             	shr    $0x16,%eax
f01153ce:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01153d5:	8b 45 08             	mov    0x8(%ebp),%eax
f01153d8:	01 d0                	add    %edx,%eax
f01153da:	8b 00                	mov    (%eax),%eax
f01153dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ( (pd_entry & 1) == 1)
f01153df:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01153e2:	83 e0 01             	and    $0x1,%eax
f01153e5:	85 c0                	test   %eax,%eax
f01153e7:	0f 84 92 00 00 00    	je     f011547f <CP+0xbd>
	{
		uint32 *t = NULL;
f01153ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
		t = (STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(pd_entry)));
f01153f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01153f7:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01153fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01153ff:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115402:	c1 e8 0c             	shr    $0xc,%eax
f0115405:	89 45 e8             	mov    %eax,-0x18(%ebp)
f0115408:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f011540d:	39 45 e8             	cmp    %eax,-0x18(%ebp)
f0115410:	72 17                	jb     f0115429 <CP+0x67>
f0115412:	ff 75 ec             	pushl  -0x14(%ebp)
f0115415:	68 58 9c 13 f0       	push   $0xf0139c58
f011541a:	68 fa 07 00 00       	push   $0x7fa
f011541f:	68 de 7d 13 f0       	push   $0xf0137dde
f0115424:	e8 7d ad fe ff       	call   f01001a6 <_panic>
f0115429:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011542c:	2d 00 00 00 10       	sub    $0x10000000,%eax
f0115431:	89 45 f0             	mov    %eax,-0x10(%ebp)
		//cprintf("va =%x, ENTRY after PERM = %x, perm to set = %x, perm to clear = %x\n", va, t[PTX(va)]&0x00000FFF, ps, pc);

		if (((t[((((uint32) (va)) >> 12) & 0x3FF)]&ps) == ps)&&((~(t[((((uint32) (va)) >> 12) & 0x3FF)])&pc) == pc))
f0115434:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115437:	c1 e8 0c             	shr    $0xc,%eax
f011543a:	25 ff 03 00 00       	and    $0x3ff,%eax
f011543f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115446:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0115449:	01 d0                	add    %edx,%eax
f011544b:	8b 00                	mov    (%eax),%eax
f011544d:	23 45 10             	and    0x10(%ebp),%eax
f0115450:	3b 45 10             	cmp    0x10(%ebp),%eax
f0115453:	75 2a                	jne    f011547f <CP+0xbd>
f0115455:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115458:	c1 e8 0c             	shr    $0xc,%eax
f011545b:	25 ff 03 00 00       	and    $0x3ff,%eax
f0115460:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115467:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011546a:	01 d0                	add    %edx,%eax
f011546c:	8b 00                	mov    (%eax),%eax
f011546e:	f7 d0                	not    %eax
f0115470:	23 45 14             	and    0x14(%ebp),%eax
f0115473:	3b 45 14             	cmp    0x14(%ebp),%eax
f0115476:	75 07                	jne    f011547f <CP+0xbd>
			return 1;
f0115478:	b8 01 00 00 00       	mov    $0x1,%eax
f011547d:	eb 05                	jmp    f0115484 <CP+0xc2>
	}
	return 0;
f011547f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0115484:	c9                   	leave  
f0115485:	c3                   	ret    

f0115486 <GP>:

uint32 GP(uint32 *ptr_dir, uint32 va)
{
f0115486:	55                   	push   %ebp
f0115487:	89 e5                	mov    %esp,%ebp
f0115489:	83 ec 18             	sub    $0x18,%esp
	assert(USE_KHEAP == 0) ;
	if (!(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & 1)) return 0;
f011548c:	8b 45 0c             	mov    0xc(%ebp),%eax
f011548f:	c1 e8 16             	shr    $0x16,%eax
f0115492:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115499:	8b 45 08             	mov    0x8(%ebp),%eax
f011549c:	01 d0                	add    %edx,%eax
f011549e:	8b 00                	mov    (%eax),%eax
f01154a0:	83 e0 01             	and    $0x1,%eax
f01154a3:	85 c0                	test   %eax,%eax
f01154a5:	75 07                	jne    f01154ae <GP+0x28>
f01154a7:	b8 00 00 00 00       	mov    $0x0,%eax
f01154ac:	eb 6f                	jmp    f011551d <GP+0x97>
	uint32 *table = (STATIC_KERNEL_VIRTUAL_ADDRESS(ptr_dir[((((uint32) (va)) >> 22) & 0x3FF)] & ~0xFFF));
f01154ae:	8b 45 0c             	mov    0xc(%ebp),%eax
f01154b1:	c1 e8 16             	shr    $0x16,%eax
f01154b4:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01154bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01154be:	01 d0                	add    %edx,%eax
f01154c0:	8b 00                	mov    (%eax),%eax
f01154c2:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01154c7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01154ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01154cd:	c1 e8 0c             	shr    $0xc,%eax
f01154d0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01154d3:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f01154d8:	39 45 f0             	cmp    %eax,-0x10(%ebp)
f01154db:	72 17                	jb     f01154f4 <GP+0x6e>
f01154dd:	ff 75 f4             	pushl  -0xc(%ebp)
f01154e0:	68 58 9c 13 f0       	push   $0xf0139c58
f01154e5:	68 07 08 00 00       	push   $0x807
f01154ea:	68 de 7d 13 f0       	push   $0xf0137dde
f01154ef:	e8 b2 ac fe ff       	call   f01001a6 <_panic>
f01154f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01154f7:	2d 00 00 00 10       	sub    $0x10000000,%eax
f01154fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
f01154ff:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115502:	c1 e8 0c             	shr    $0xc,%eax
f0115505:	25 ff 03 00 00       	and    $0x3ff,%eax
f011550a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115511:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0115514:	01 d0                	add    %edx,%eax
f0115516:	8b 00                	mov    (%eax),%eax
f0115518:	25 ff 0f 00 00       	and    $0xfff,%eax
}
f011551d:	c9                   	leave  
f011551e:	c3                   	ret    

f011551f <ClearUserSpace>:

void ClearUserSpace(uint32 *ptr_dir)
{
f011551f:	55                   	push   %ebp
f0115520:	89 e5                	mov    %esp,%ebp
f0115522:	83 ec 10             	sub    $0x10,%esp
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115525:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f011552c:	eb 18                	jmp    f0115546 <ClearUserSpace+0x27>
		ptr_dir[i] = 0;
f011552e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115531:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0115538:	8b 45 08             	mov    0x8(%ebp),%eax
f011553b:	01 d0                	add    %edx,%eax
f011553d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return table[((((uint32) (va)) >> 12) & 0x3FF)] & 0xFFF;
}

void ClearUserSpace(uint32 *ptr_dir)
{
	for (int i = 0; i < PDX(USER_TOP); ++i) {
f0115543:	ff 45 fc             	incl   -0x4(%ebp)
f0115546:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0115549:	3d ba 03 00 00       	cmp    $0x3ba,%eax
f011554e:	76 de                	jbe    f011552e <ClearUserSpace+0xf>
		ptr_dir[i] = 0;
	}
}
f0115550:	90                   	nop
f0115551:	c9                   	leave  
f0115552:	c3                   	ret    

f0115553 <CCP>:

int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
f0115553:	55                   	push   %ebp
f0115554:	89 e5                	mov    %esp,%ebp
f0115556:	83 ec 38             	sub    $0x38,%esp
f0115559:	8b 45 2c             	mov    0x2c(%ebp),%eax
f011555c:	88 45 d4             	mov    %al,-0x2c(%ebp)
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
f011555f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0115562:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115567:	89 45 f4             	mov    %eax,-0xc(%ebp)
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));
f011556a:	8b 45 10             	mov    0x10(%ebp),%eax
f011556d:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0115572:	89 45 f0             	mov    %eax,-0x10(%ebp)

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f0115575:	e9 ea 01 00 00       	jmp    f0115764 <CCP+0x211>
	{
		uint32* ptr_table1;
		uint32* ptr_table2;
		struct FrameInfo * pfi1 ;
		struct FrameInfo * pfi2 ;
		if (chk_type != CHK_ALLOC)
f011557a:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f011557e:	74 44                	je     f01155c4 <CCP+0x71>
		{
			pfi1 = get_frame_info(ptr_dir, (uint32)ptrTemp1, &ptr_table1);
f0115580:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115583:	83 ec 04             	sub    $0x4,%esp
f0115586:	8d 55 dc             	lea    -0x24(%ebp),%edx
f0115589:	52                   	push   %edx
f011558a:	50                   	push   %eax
f011558b:	ff 75 08             	pushl  0x8(%ebp)
f011558e:	e8 76 16 ff ff       	call   f0106c09 <get_frame_info>
f0115593:	83 c4 10             	add    $0x10,%esp
f0115596:	89 45 e0             	mov    %eax,-0x20(%ebp)
			if (ptr_table1 == NULL)
f0115599:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011559c:	85 c0                	test   %eax,%eax
f011559e:	75 24                	jne    f01155c4 <CCP+0x71>
			{
				warn("[EVAL] Failed. Table of address 1 = NULL\n");
f01155a0:	83 ec 04             	sub    $0x4,%esp
f01155a3:	68 88 9c 13 f0       	push   $0xf0139c88
f01155a8:	68 22 08 00 00       	push   $0x822
f01155ad:	68 de 7d 13 f0       	push   $0xf0137dde
f01155b2:	e8 7b ad fe ff       	call   f0100332 <_warn>
f01155b7:	83 c4 10             	add    $0x10,%esp
				return 0;
f01155ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01155bf:	e9 b6 01 00 00       	jmp    f011577a <CCP+0x227>
			}
		}
		pfi2 = get_frame_info(ptr_dir, (uint32)ptrTemp2, &ptr_table2);
f01155c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01155c7:	83 ec 04             	sub    $0x4,%esp
f01155ca:	8d 55 d8             	lea    -0x28(%ebp),%edx
f01155cd:	52                   	push   %edx
f01155ce:	50                   	push   %eax
f01155cf:	ff 75 08             	pushl  0x8(%ebp)
f01155d2:	e8 32 16 ff ff       	call   f0106c09 <get_frame_info>
f01155d7:	83 c4 10             	add    $0x10,%esp
f01155da:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (ptr_table2 == NULL)
f01155dd:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01155e0:	85 c0                	test   %eax,%eax
f01155e2:	75 24                	jne    f0115608 <CCP+0xb5>
		{
			warn("[EVAL] Failed. Table of address 2 = NULL\n");
f01155e4:	83 ec 04             	sub    $0x4,%esp
f01155e7:	68 b4 9c 13 f0       	push   $0xf0139cb4
f01155ec:	68 29 08 00 00       	push   $0x829
f01155f1:	68 de 7d 13 f0       	push   $0xf0137dde
f01155f6:	e8 37 ad fe ff       	call   f0100332 <_warn>
f01155fb:	83 c4 10             	add    $0x10,%esp
			return 0;
f01155fe:	b8 00 00 00 00       	mov    $0x0,%eax
f0115603:	e9 72 01 00 00       	jmp    f011577a <CCP+0x227>
		}
		if (chk_type == CHK_SHARE)
f0115608:	80 7d d4 02          	cmpb   $0x2,-0x2c(%ebp)
f011560c:	75 70                	jne    f011567e <CCP+0x12b>
		{
			uint32 fn1 = ptr_table1[PTX(ptrTemp1)] >> 12 ;
f011560e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0115611:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0115614:	c1 ea 0c             	shr    $0xc,%edx
f0115617:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f011561d:	c1 e2 02             	shl    $0x2,%edx
f0115620:	01 d0                	add    %edx,%eax
f0115622:	8b 00                	mov    (%eax),%eax
f0115624:	c1 e8 0c             	shr    $0xc,%eax
f0115627:	89 45 e8             	mov    %eax,-0x18(%ebp)
			uint32 fn2 = ptr_table2[PTX(ptrTemp2)] >> 12 ;
f011562a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011562d:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0115630:	c1 ea 0c             	shr    $0xc,%edx
f0115633:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0115639:	c1 e2 02             	shl    $0x2,%edx
f011563c:	01 d0                	add    %edx,%eax
f011563e:	8b 00                	mov    (%eax),%eax
f0115640:	c1 e8 0c             	shr    $0xc,%eax
f0115643:	89 45 e4             	mov    %eax,-0x1c(%ebp)

			if(fn1 != fn2)
f0115646:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0115649:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f011564c:	74 30                	je     f011567e <CCP+0x12b>
			{
				warn("[EVAL] Failed. Frame numbers not equal in the whole range!\nva1=%x, va2=%x, fn1=%x, fn2=%x\n", ptrTemp1, ptrTemp2, fn1, fn2);
f011564e:	83 ec 04             	sub    $0x4,%esp
f0115651:	ff 75 e4             	pushl  -0x1c(%ebp)
f0115654:	ff 75 e8             	pushl  -0x18(%ebp)
f0115657:	ff 75 f0             	pushl  -0x10(%ebp)
f011565a:	ff 75 f4             	pushl  -0xc(%ebp)
f011565d:	68 e0 9c 13 f0       	push   $0xf0139ce0
f0115662:	68 33 08 00 00       	push   $0x833
f0115667:	68 de 7d 13 f0       	push   $0xf0137dde
f011566c:	e8 c1 ac fe ff       	call   f0100332 <_warn>
f0115671:	83 c4 20             	add    $0x20,%esp
				return 0;
f0115674:	b8 00 00 00 00       	mov    $0x0,%eax
f0115679:	e9 fc 00 00 00       	jmp    f011577a <CCP+0x227>
			}
		}
		if (ref != -1)
f011567e:	83 7d 18 ff          	cmpl   $0xffffffff,0x18(%ebp)
f0115682:	74 52                	je     f01156d6 <CCP+0x183>
		{
			if (pfi2 == NULL || (*pfi2).references != ref)
f0115684:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0115688:	74 0e                	je     f0115698 <CCP+0x145>
f011568a:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011568d:	8b 40 08             	mov    0x8(%eax),%eax
f0115690:	0f b7 c0             	movzwl %ax,%eax
f0115693:	3b 45 18             	cmp    0x18(%ebp),%eax
f0115696:	74 3e                	je     f01156d6 <CCP+0x183>
			{
				warn("[EVAL] Failed. Num of frame references is not correct. MAKE SURE to use the functions of LAB5! va2=%x, ref2=%d\n", ptrTemp2, pfi2==NULL? 0 : (*pfi2).references);
f0115698:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f011569c:	74 0b                	je     f01156a9 <CCP+0x156>
f011569e:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01156a1:	8b 40 08             	mov    0x8(%eax),%eax
f01156a4:	0f b7 c0             	movzwl %ax,%eax
f01156a7:	eb 05                	jmp    f01156ae <CCP+0x15b>
f01156a9:	b8 00 00 00 00       	mov    $0x0,%eax
f01156ae:	83 ec 0c             	sub    $0xc,%esp
f01156b1:	50                   	push   %eax
f01156b2:	ff 75 f0             	pushl  -0x10(%ebp)
f01156b5:	68 3c 9d 13 f0       	push   $0xf0139d3c
f01156ba:	68 3b 08 00 00       	push   $0x83b
f01156bf:	68 de 7d 13 f0       	push   $0xf0137dde
f01156c4:	e8 69 ac fe ff       	call   f0100332 <_warn>
f01156c9:	83 c4 20             	add    $0x20,%esp
				return 0;
f01156cc:	b8 00 00 00 00       	mov    $0x0,%eax
f01156d1:	e9 a4 00 00 00       	jmp    f011577a <CCP+0x227>
			}
		}
		if (CPs(ptr_dir, (uint32)ptrTemp2, dst_perms, dst_to_chk) <= 0)
f01156d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01156d9:	ff 75 20             	pushl  0x20(%ebp)
f01156dc:	ff 75 1c             	pushl  0x1c(%ebp)
f01156df:	50                   	push   %eax
f01156e0:	ff 75 08             	pushl  0x8(%ebp)
f01156e3:	e8 b8 fa ff ff       	call   f01151a0 <CPs>
f01156e8:	83 c4 10             	add    $0x10,%esp
f01156eb:	85 c0                	test   %eax,%eax
f01156ed:	7f 21                	jg     f0115710 <CCP+0x1bd>
		{
			warn("[EVAL] Failed. one or more permission in destination is not correct\n");
f01156ef:	83 ec 04             	sub    $0x4,%esp
f01156f2:	68 ac 9d 13 f0       	push   $0xf0139dac
f01156f7:	68 41 08 00 00       	push   $0x841
f01156fc:	68 de 7d 13 f0       	push   $0xf0137dde
f0115701:	e8 2c ac fe ff       	call   f0100332 <_warn>
f0115706:	83 c4 10             	add    $0x10,%esp
			return 0;
f0115709:	b8 00 00 00 00       	mov    $0x0,%eax
f011570e:	eb 6a                	jmp    f011577a <CCP+0x227>
		}
		if (chk_type != CHK_ALLOC)
f0115710:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115714:	74 3a                	je     f0115750 <CCP+0x1fd>
		{
			if (CPs(ptr_dir, (uint32)ptrTemp1, src_perms, src_to_chk) <= 0)
f0115716:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0115719:	ff 75 28             	pushl  0x28(%ebp)
f011571c:	ff 75 24             	pushl  0x24(%ebp)
f011571f:	50                   	push   %eax
f0115720:	ff 75 08             	pushl  0x8(%ebp)
f0115723:	e8 78 fa ff ff       	call   f01151a0 <CPs>
f0115728:	83 c4 10             	add    $0x10,%esp
f011572b:	85 c0                	test   %eax,%eax
f011572d:	7f 21                	jg     f0115750 <CCP+0x1fd>
			{
				warn("[EVAL] Failed. one or more permission in source is not correct\n");
f011572f:	83 ec 04             	sub    $0x4,%esp
f0115732:	68 f4 9d 13 f0       	push   $0xf0139df4
f0115737:	68 48 08 00 00       	push   $0x848
f011573c:	68 de 7d 13 f0       	push   $0xf0137dde
f0115741:	e8 ec ab fe ff       	call   f0100332 <_warn>
f0115746:	83 c4 10             	add    $0x10,%esp
				return 0;
f0115749:	b8 00 00 00 00       	mov    $0x0,%eax
f011574e:	eb 2a                	jmp    f011577a <CCP+0x227>
			}
		}
		if (chk_type != CHK_ALLOC)
f0115750:	80 7d d4 03          	cmpb   $0x3,-0x2c(%ebp)
f0115754:	74 07                	je     f011575d <CCP+0x20a>
		{
			ptrTemp1 += PAGE_SIZE;
f0115756:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
int CCP(uint32 *ptr_dir, uint32 ptr1, uint32 ptr2, uint32 size, int ref, uint32 dst_perms, uint32 dst_to_chk, uint32 src_perms, uint32 src_to_chk, uint8 chk_type)
{
	void* ptrTemp1 = (void*)(ptr1 - ptr1 % (4096));
	void* ptrTemp2 = (void*)(ptr2 - ptr2 % (4096));

	for( ;ptrTemp2 < (void*)(ptr2+size); ptrTemp2+=PAGE_SIZE)
f011575d:	81 45 f0 00 10 00 00 	addl   $0x1000,-0x10(%ebp)
f0115764:	8b 55 10             	mov    0x10(%ebp),%edx
f0115767:	8b 45 14             	mov    0x14(%ebp),%eax
f011576a:	01 d0                	add    %edx,%eax
f011576c:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011576f:	0f 87 05 fe ff ff    	ja     f011557a <CCP+0x27>
		{
			ptrTemp1 += PAGE_SIZE;
		}
	}

	return 1;
f0115775:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011577a:	c9                   	leave  
f011577b:	c3                   	ret    

f011577c <test_priority_normal_and_higher>:

extern int sys_calculate_free_frames();

uint8 firstTime = 1;
void test_priority_normal_and_higher()
{
f011577c:	55                   	push   %ebp
f011577d:	89 e5                	mov    %esp,%ebp
f011577f:	57                   	push   %edi
f0115780:	56                   	push   %esi
f0115781:	53                   	push   %ebx
f0115782:	81 ec 4c 03 00 00    	sub    $0x34c,%esp
	if(firstTime)
f0115788:	a0 ce 0c 19 f0       	mov    0xf0190cce,%al
f011578d:	84 c0                	test   %al,%al
f011578f:	0f 84 a8 09 00 00    	je     f011613d <test_priority_normal_and_higher+0x9c1>
		uint32 fact_WS[15];
		uint32 fact_TimeStamp[15];
		uint32 hello_WS[10];
		uint32 hello_TimeStamp[10];

		firstTime = 0;
f0115795:	c6 05 ce 0c 19 f0 00 	movb   $0x0,0xf0190cce
		char command[100] = "load fos_add 20";
f011579c:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01157a2:	bb 94 a0 13 f0       	mov    $0xf013a094,%ebx
f01157a7:	ba 04 00 00 00       	mov    $0x4,%edx
f01157ac:	89 c7                	mov    %eax,%edi
f01157ae:	89 de                	mov    %ebx,%esi
f01157b0:	89 d1                	mov    %edx,%ecx
f01157b2:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f01157b4:	8d 95 24 fe ff ff    	lea    -0x1dc(%ebp),%edx
f01157ba:	b9 15 00 00 00       	mov    $0x15,%ecx
f01157bf:	b8 00 00 00 00       	mov    $0x0,%eax
f01157c4:	89 d7                	mov    %edx,%edi
f01157c6:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01157c8:	83 ec 0c             	sub    $0xc,%esp
f01157cb:	8d 85 14 fe ff ff    	lea    -0x1ec(%ebp),%eax
f01157d1:	50                   	push   %eax
f01157d2:	e8 b8 b4 fe ff       	call   f0100c8f <execute_command>
f01157d7:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 15";
f01157da:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f01157e0:	bb f8 a0 13 f0       	mov    $0xf013a0f8,%ebx
f01157e5:	ba 0d 00 00 00       	mov    $0xd,%edx
f01157ea:	89 c7                	mov    %eax,%edi
f01157ec:	89 de                	mov    %ebx,%esi
f01157ee:	89 d1                	mov    %edx,%ecx
f01157f0:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01157f2:	8d 95 85 fe ff ff    	lea    -0x17b(%ebp),%edx
f01157f8:	b9 57 00 00 00       	mov    $0x57,%ecx
f01157fd:	b0 00                	mov    $0x0,%al
f01157ff:	89 d7                	mov    %edx,%edi
f0115801:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f0115803:	83 ec 0c             	sub    $0xc,%esp
f0115806:	8d 85 78 fe ff ff    	lea    -0x188(%ebp),%eax
f011580c:	50                   	push   %eax
f011580d:	e8 7d b4 fe ff       	call   f0100c8f <execute_command>
f0115812:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 10";
f0115815:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f011581b:	bb 5c a1 13 f0       	mov    $0xf013a15c,%ebx
f0115820:	ba 17 00 00 00       	mov    $0x17,%edx
f0115825:	89 c7                	mov    %eax,%edi
f0115827:	89 de                	mov    %ebx,%esi
f0115829:	89 d1                	mov    %edx,%ecx
f011582b:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f011582d:	8d 95 f3 fe ff ff    	lea    -0x10d(%ebp),%edx
f0115833:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0115838:	b0 00                	mov    $0x0,%al
f011583a:	89 d7                	mov    %edx,%edi
f011583c:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f011583e:	83 ec 0c             	sub    $0xc,%esp
f0115841:	8d 85 dc fe ff ff    	lea    -0x124(%ebp),%eax
f0115847:	50                   	push   %eax
f0115848:	e8 42 b4 fe ff       	call   f0100c8f <execute_command>
f011584d:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f0115850:	83 ec 04             	sub    $0x4,%esp
f0115853:	6a 00                	push   $0x0
f0115855:	8d 45 ac             	lea    -0x54(%ebp),%eax
f0115858:	50                   	push   %eax
f0115859:	68 00 10 00 00       	push   $0x1000
f011585e:	e8 7c 38 ff ff       	call   f01090df <envid2env>
f0115863:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0115866:	83 ec 04             	sub    $0x4,%esp
f0115869:	6a 00                	push   $0x0
f011586b:	8d 45 a8             	lea    -0x58(%ebp),%eax
f011586e:	50                   	push   %eax
f011586f:	68 01 10 00 00       	push   $0x1001
f0115874:	e8 66 38 ff ff       	call   f01090df <envid2env>
f0115879:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f011587c:	83 ec 04             	sub    $0x4,%esp
f011587f:	6a 00                	push   $0x0
f0115881:	8d 45 a4             	lea    -0x5c(%ebp),%eax
f0115884:	50                   	push   %eax
f0115885:	68 02 10 00 00       	push   $0x1002
f011588a:	e8 50 38 ff ff       	call   f01090df <envid2env>
f011588f:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f0115892:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115895:	85 c0                	test   %eax,%eax
f0115897:	74 0e                	je     f01158a7 <test_priority_normal_and_higher+0x12b>
f0115899:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011589c:	85 c0                	test   %eax,%eax
f011589e:	74 07                	je     f01158a7 <test_priority_normal_and_higher+0x12b>
f01158a0:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01158a3:	85 c0                	test   %eax,%eax
f01158a5:	75 14                	jne    f01158bb <test_priority_normal_and_higher+0x13f>
			panic("Loading programs failed\n");
f01158a7:	83 ec 04             	sub    $0x4,%esp
f01158aa:	68 34 9e 13 f0       	push   $0xf0139e34
f01158af:	6a 26                	push   $0x26
f01158b1:	68 4d 9e 13 f0       	push   $0xf0139e4d
f01158b6:	e8 eb a8 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01158bb:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01158be:	8b 40 74             	mov    0x74(%eax),%eax
f01158c1:	83 f8 14             	cmp    $0x14,%eax
f01158c4:	75 16                	jne    f01158dc <test_priority_normal_and_higher+0x160>
f01158c6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01158c9:	8b 40 74             	mov    0x74(%eax),%eax
f01158cc:	83 f8 0f             	cmp    $0xf,%eax
f01158cf:	75 0b                	jne    f01158dc <test_priority_normal_and_higher+0x160>
f01158d1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01158d4:	8b 40 74             	mov    0x74(%eax),%eax
f01158d7:	83 f8 0a             	cmp    $0xa,%eax
f01158da:	74 14                	je     f01158f0 <test_priority_normal_and_higher+0x174>
			panic("The programs should be initially loaded with the given working set size\n");
f01158dc:	83 ec 04             	sub    $0x4,%esp
f01158df:	68 68 9e 13 f0       	push   $0xf0139e68
f01158e4:	6a 29                	push   $0x29
f01158e6:	68 4d 9e 13 f0       	push   $0xf0139e4d
f01158eb:	e8 b6 a8 fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 20; i++)
f01158f0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01158f7:	eb 43                	jmp    f011593c <test_priority_normal_and_higher+0x1c0>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01158f9:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f01158fc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01158ff:	89 d0                	mov    %edx,%eax
f0115901:	01 c0                	add    %eax,%eax
f0115903:	01 d0                	add    %edx,%eax
f0115905:	c1 e0 03             	shl    $0x3,%eax
f0115908:	01 c8                	add    %ecx,%eax
f011590a:	83 c0 78             	add    $0x78,%eax
f011590d:	8b 10                	mov    (%eax),%edx
f011590f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115912:	89 94 85 74 fd ff ff 	mov    %edx,-0x28c(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f0115919:	8b 4d ac             	mov    -0x54(%ebp),%ecx
f011591c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f011591f:	89 d0                	mov    %edx,%eax
f0115921:	01 c0                	add    %eax,%eax
f0115923:	01 d0                	add    %edx,%eax
f0115925:	c1 e0 03             	shl    $0x3,%eax
f0115928:	01 c8                	add    %ecx,%eax
f011592a:	83 e8 80             	sub    $0xffffff80,%eax
f011592d:	8b 10                	mov    (%eax),%edx
f011592f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0115932:	89 94 85 c4 fd ff ff 	mov    %edx,-0x23c(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0115939:	ff 45 e4             	incl   -0x1c(%ebp)
f011593c:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0115940:	7e b7                	jle    f01158f9 <test_priority_normal_and_higher+0x17d>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f0115942:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0115949:	eb 43                	jmp    f011598e <test_priority_normal_and_higher+0x212>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011594b:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f011594e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115951:	89 d0                	mov    %edx,%eax
f0115953:	01 c0                	add    %eax,%eax
f0115955:	01 d0                	add    %edx,%eax
f0115957:	c1 e0 03             	shl    $0x3,%eax
f011595a:	01 c8                	add    %ecx,%eax
f011595c:	83 c0 78             	add    $0x78,%eax
f011595f:	8b 10                	mov    (%eax),%edx
f0115961:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115964:	89 94 85 fc fc ff ff 	mov    %edx,-0x304(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011596b:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f011596e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0115971:	89 d0                	mov    %edx,%eax
f0115973:	01 c0                	add    %eax,%eax
f0115975:	01 d0                	add    %edx,%eax
f0115977:	c1 e0 03             	shl    $0x3,%eax
f011597a:	01 c8                	add    %ecx,%eax
f011597c:	83 e8 80             	sub    $0xffffff80,%eax
f011597f:	8b 10                	mov    (%eax),%edx
f0115981:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0115984:	89 94 85 38 fd ff ff 	mov    %edx,-0x2c8(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 15; i++)
f011598b:	ff 45 e0             	incl   -0x20(%ebp)
f011598e:	83 7d e0 0e          	cmpl   $0xe,-0x20(%ebp)
f0115992:	7e b7                	jle    f011594b <test_priority_normal_and_higher+0x1cf>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f0115994:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011599b:	eb 43                	jmp    f01159e0 <test_priority_normal_and_higher+0x264>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f011599d:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01159a0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01159a3:	89 d0                	mov    %edx,%eax
f01159a5:	01 c0                	add    %eax,%eax
f01159a7:	01 d0                	add    %edx,%eax
f01159a9:	c1 e0 03             	shl    $0x3,%eax
f01159ac:	01 c8                	add    %ecx,%eax
f01159ae:	83 c0 78             	add    $0x78,%eax
f01159b1:	8b 10                	mov    (%eax),%edx
f01159b3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01159b6:	89 94 85 ac fc ff ff 	mov    %edx,-0x354(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f01159bd:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f01159c0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01159c3:	89 d0                	mov    %edx,%eax
f01159c5:	01 c0                	add    %eax,%eax
f01159c7:	01 d0                	add    %edx,%eax
f01159c9:	c1 e0 03             	shl    $0x3,%eax
f01159cc:	01 c8                	add    %ecx,%eax
f01159ce:	83 e8 80             	sub    $0xffffff80,%eax
f01159d1:	8b 10                	mov    (%eax),%edx
f01159d3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01159d6:	89 94 85 d4 fc ff ff 	mov    %edx,-0x32c(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 10; i++)
f01159dd:	ff 45 dc             	incl   -0x24(%ebp)
f01159e0:	83 7d dc 09          	cmpl   $0x9,-0x24(%ebp)
f01159e4:	7e b7                	jle    f011599d <test_priority_normal_and_higher+0x221>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01159e6:	e8 e5 66 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01159eb:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		int freeDiskFrames = pf_calculate_free_frames();
f01159ee:	e8 a1 e2 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01159f3:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f01159f6:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01159f9:	83 ec 08             	sub    $0x8,%esp
f01159fc:	6a 03                	push   $0x3
f01159fe:	50                   	push   %eax
f01159ff:	e8 c2 4b ff ff       	call   f010a5c6 <set_program_priority>
f0115a04:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f0115a07:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115a0a:	83 ec 08             	sub    $0x8,%esp
f0115a0d:	6a 03                	push   $0x3
f0115a0f:	50                   	push   %eax
f0115a10:	e8 b1 4b ff ff       	call   f010a5c6 <set_program_priority>
f0115a15:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f0115a18:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115a1b:	83 ec 08             	sub    $0x8,%esp
f0115a1e:	6a 03                	push   $0x3
f0115a20:	50                   	push   %eax
f0115a21:	e8 a0 4b ff ff       	call   f010a5c6 <set_program_priority>
f0115a26:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115a29:	e8 66 e2 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0115a2e:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115a31:	74 14                	je     f0115a47 <test_priority_normal_and_higher+0x2cb>
f0115a33:	83 ec 04             	sub    $0x4,%esp
f0115a36:	68 b4 9e 13 f0       	push   $0xf0139eb4
f0115a3b:	6a 45                	push   $0x45
f0115a3d:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115a42:	e8 5f a7 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115a47:	e8 84 66 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0115a4c:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115a4f:	74 14                	je     f0115a65 <test_priority_normal_and_higher+0x2e9>
f0115a51:	83 ec 04             	sub    $0x4,%esp
f0115a54:	68 b4 9e 13 f0       	push   $0xf0139eb4
f0115a59:	6a 46                	push   $0x46
f0115a5b:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115a60:	e8 41 a7 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f0115a65:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115a68:	8b 40 74             	mov    0x74(%eax),%eax
f0115a6b:	83 f8 14             	cmp    $0x14,%eax
f0115a6e:	75 16                	jne    f0115a86 <test_priority_normal_and_higher+0x30a>
f0115a70:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115a73:	8b 40 74             	mov    0x74(%eax),%eax
f0115a76:	83 f8 0f             	cmp    $0xf,%eax
f0115a79:	75 0b                	jne    f0115a86 <test_priority_normal_and_higher+0x30a>
f0115a7b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115a7e:	8b 40 74             	mov    0x74(%eax),%eax
f0115a81:	83 f8 0a             	cmp    $0xa,%eax
f0115a84:	74 14                	je     f0115a9a <test_priority_normal_and_higher+0x31e>
			panic("The programs' working set size should not change after setting priority to normal\n");
f0115a86:	83 ec 04             	sub    $0x4,%esp
f0115a89:	68 e0 9e 13 f0       	push   $0xf0139ee0
f0115a8e:	6a 49                	push   $0x49
f0115a90:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115a95:	e8 0c a7 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0115a9a:	e8 31 66 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0115a9f:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115aa2:	e8 ed e1 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0115aa7:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set Priority To Above Normal // Should change only helloWorld as none of the rest is full
		set_program_priority(addEnv, 4);
f0115aaa:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115aad:	83 ec 08             	sub    $0x8,%esp
f0115ab0:	6a 04                	push   $0x4
f0115ab2:	50                   	push   %eax
f0115ab3:	e8 0e 4b ff ff       	call   f010a5c6 <set_program_priority>
f0115ab8:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 4);
f0115abb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115abe:	83 ec 08             	sub    $0x8,%esp
f0115ac1:	6a 04                	push   $0x4
f0115ac3:	50                   	push   %eax
f0115ac4:	e8 fd 4a ff ff       	call   f010a5c6 <set_program_priority>
f0115ac9:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115acc:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115acf:	83 ec 08             	sub    $0x8,%esp
f0115ad2:	6a 04                	push   $0x4
f0115ad4:	50                   	push   %eax
f0115ad5:	e8 ec 4a ff ff       	call   f010a5c6 <set_program_priority>
f0115ada:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115add:	e8 b2 e1 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0115ae2:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115ae5:	74 14                	je     f0115afb <test_priority_normal_and_higher+0x37f>
f0115ae7:	83 ec 04             	sub    $0x4,%esp
f0115aea:	68 b4 9e 13 f0       	push   $0xf0139eb4
f0115aef:	6a 53                	push   $0x53
f0115af1:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115af6:	e8 ab a6 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly%x\n");
f0115afb:	e8 d0 65 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0115b00:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115b03:	74 14                	je     f0115b19 <test_priority_normal_and_higher+0x39d>
f0115b05:	83 ec 04             	sub    $0x4,%esp
f0115b08:	68 34 9f 13 f0       	push   $0xf0139f34
f0115b0d:	6a 54                	push   $0x54
f0115b0f:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115b14:	e8 8d a6 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115b19:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115b1c:	8b 40 74             	mov    0x74(%eax),%eax
f0115b1f:	83 f8 14             	cmp    $0x14,%eax
f0115b22:	75 16                	jne    f0115b3a <test_priority_normal_and_higher+0x3be>
f0115b24:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115b27:	8b 40 74             	mov    0x74(%eax),%eax
f0115b2a:	83 f8 0f             	cmp    $0xf,%eax
f0115b2d:	75 0b                	jne    f0115b3a <test_priority_normal_and_higher+0x3be>
f0115b2f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115b32:	8b 40 74             	mov    0x74(%eax),%eax
f0115b35:	83 f8 14             	cmp    $0x14,%eax
f0115b38:	74 14                	je     f0115b4e <test_priority_normal_and_higher+0x3d2>
			panic("The programs' working set size should be doubled only if it is full\n");
f0115b3a:	83 ec 04             	sub    $0x4,%esp
f0115b3d:	68 64 9f 13 f0       	push   $0xf0139f64
f0115b42:	6a 57                	push   $0x57
f0115b44:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115b49:	e8 58 a6 fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0115b4e:	e8 7d 65 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0115b53:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115b56:	e8 39 e1 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0115b5b:	89 45 b0             	mov    %eax,-0x50(%ebp)

		// Set priority to above normal --> nothing should change (1 time only)
		set_program_priority(helloEnv, 4);
f0115b5e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115b61:	83 ec 08             	sub    $0x8,%esp
f0115b64:	6a 04                	push   $0x4
f0115b66:	50                   	push   %eax
f0115b67:	e8 5a 4a ff ff       	call   f010a5c6 <set_program_priority>
f0115b6c:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115b6f:	e8 20 e1 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0115b74:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115b77:	74 14                	je     f0115b8d <test_priority_normal_and_higher+0x411>
f0115b79:	83 ec 04             	sub    $0x4,%esp
f0115b7c:	68 b4 9e 13 f0       	push   $0xf0139eb4
f0115b81:	6a 5f                	push   $0x5f
f0115b83:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115b88:	e8 19 a6 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115b8d:	e8 3e 65 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0115b92:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115b95:	74 14                	je     f0115bab <test_priority_normal_and_higher+0x42f>
f0115b97:	83 ec 04             	sub    $0x4,%esp
f0115b9a:	68 b4 9e 13 f0       	push   $0xf0139eb4
f0115b9f:	6a 60                	push   $0x60
f0115ba1:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115ba6:	e8 fb a5 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115bab:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115bae:	8b 40 74             	mov    0x74(%eax),%eax
f0115bb1:	83 f8 14             	cmp    $0x14,%eax
f0115bb4:	75 16                	jne    f0115bcc <test_priority_normal_and_higher+0x450>
f0115bb6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115bb9:	8b 40 74             	mov    0x74(%eax),%eax
f0115bbc:	83 f8 0f             	cmp    $0xf,%eax
f0115bbf:	75 0b                	jne    f0115bcc <test_priority_normal_and_higher+0x450>
f0115bc1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115bc4:	8b 40 74             	mov    0x74(%eax),%eax
f0115bc7:	83 f8 14             	cmp    $0x14,%eax
f0115bca:	74 14                	je     f0115be0 <test_priority_normal_and_higher+0x464>
			panic("The programs' working set size should be doubled only once\n");
f0115bcc:	83 ec 04             	sub    $0x4,%esp
f0115bcf:	68 ac 9f 13 f0       	push   $0xf0139fac
f0115bd4:	6a 63                	push   $0x63
f0115bd6:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115bdb:	e8 c6 a5 fe ff       	call   f01001a6 <_panic>


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0115be0:	c7 45 d8 0a 00 00 00 	movl   $0xa,-0x28(%ebp)
f0115be7:	eb 1a                	jmp    f0115c03 <test_priority_normal_and_higher+0x487>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0115be9:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115bec:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0115bef:	89 d0                	mov    %edx,%eax
f0115bf1:	01 c0                	add    %eax,%eax
f0115bf3:	01 d0                	add    %edx,%eax
f0115bf5:	c1 e0 03             	shl    $0x3,%eax
f0115bf8:	01 c8                	add    %ecx,%eax
f0115bfa:	83 c0 7c             	add    $0x7c,%eax
f0115bfd:	c6 00 00             	movb   $0x0,(%eax)
		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");


		// Manipulate WS to seem as full
		for(int i = 10; i < 20; i++)
f0115c00:	ff 45 d8             	incl   -0x28(%ebp)
f0115c03:	83 7d d8 13          	cmpl   $0x13,-0x28(%ebp)
f0115c07:	7e e0                	jle    f0115be9 <test_priority_normal_and_higher+0x46d>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115c09:	e8 c2 64 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0115c0e:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115c11:	e8 7e e0 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0115c16:	89 45 b0             	mov    %eax,-0x50(%ebp)

		set_program_priority(helloEnv, 4);
f0115c19:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115c1c:	83 ec 08             	sub    $0x8,%esp
f0115c1f:	6a 04                	push   $0x4
f0115c21:	50                   	push   %eax
f0115c22:	e8 9f 49 ff ff       	call   f010a5c6 <set_program_priority>
f0115c27:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115c2a:	e8 65 e0 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0115c2f:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115c32:	74 14                	je     f0115c48 <test_priority_normal_and_higher+0x4cc>
f0115c34:	83 ec 04             	sub    $0x4,%esp
f0115c37:	68 b4 9e 13 f0       	push   $0xf0139eb4
f0115c3c:	6a 70                	push   $0x70
f0115c3e:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115c43:	e8 5e a5 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115c48:	e8 83 64 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0115c4d:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115c50:	74 14                	je     f0115c66 <test_priority_normal_and_higher+0x4ea>
f0115c52:	83 ec 04             	sub    $0x4,%esp
f0115c55:	68 b4 9e 13 f0       	push   $0xf0139eb4
f0115c5a:	6a 71                	push   $0x71
f0115c5c:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115c61:	e8 40 a5 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0115c66:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115c69:	8b 40 74             	mov    0x74(%eax),%eax
f0115c6c:	83 f8 14             	cmp    $0x14,%eax
f0115c6f:	75 16                	jne    f0115c87 <test_priority_normal_and_higher+0x50b>
f0115c71:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115c74:	8b 40 74             	mov    0x74(%eax),%eax
f0115c77:	83 f8 0f             	cmp    $0xf,%eax
f0115c7a:	75 0b                	jne    f0115c87 <test_priority_normal_and_higher+0x50b>
f0115c7c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115c7f:	8b 40 74             	mov    0x74(%eax),%eax
f0115c82:	83 f8 14             	cmp    $0x14,%eax
f0115c85:	74 14                	je     f0115c9b <test_priority_normal_and_higher+0x51f>
			panic("The programs' working set size should be doubled only once\n");
f0115c87:	83 ec 04             	sub    $0x4,%esp
f0115c8a:	68 ac 9f 13 f0       	push   $0xf0139fac
f0115c8f:	6a 74                	push   $0x74
f0115c91:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115c96:	e8 0b a5 fe ff       	call   f01001a6 <_panic>

		for(int i = 10; i < 15; i++)
f0115c9b:	c7 45 d4 0a 00 00 00 	movl   $0xa,-0x2c(%ebp)
f0115ca2:	eb 1a                	jmp    f0115cbe <test_priority_normal_and_higher+0x542>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0115ca4:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115ca7:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0115caa:	89 d0                	mov    %edx,%eax
f0115cac:	01 c0                	add    %eax,%eax
f0115cae:	01 d0                	add    %edx,%eax
f0115cb0:	c1 e0 03             	shl    $0x3,%eax
f0115cb3:	01 c8                	add    %ecx,%eax
f0115cb5:	83 c0 7c             	add    $0x7c,%eax
f0115cb8:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
			panic("The programs' working set size should be doubled only once\n");

		for(int i = 10; i < 15; i++)
f0115cbb:	ff 45 d4             	incl   -0x2c(%ebp)
f0115cbe:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f0115cc2:	7e e0                	jle    f0115ca4 <test_priority_normal_and_higher+0x528>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115cc4:	e8 07 64 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0115cc9:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115ccc:	e8 c3 df fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0115cd1:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0115cd4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115cd7:	83 ec 08             	sub    $0x8,%esp
f0115cda:	6a 05                	push   $0x5
f0115cdc:	50                   	push   %eax
f0115cdd:	e8 e4 48 ff ff       	call   f010a5c6 <set_program_priority>
f0115ce2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 5);
f0115ce5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115ce8:	83 ec 08             	sub    $0x8,%esp
f0115ceb:	6a 05                	push   $0x5
f0115ced:	50                   	push   %eax
f0115cee:	e8 d3 48 ff ff       	call   f010a5c6 <set_program_priority>
f0115cf3:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115cf6:	e8 99 df fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0115cfb:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115cfe:	74 14                	je     f0115d14 <test_priority_normal_and_higher+0x598>
f0115d00:	83 ec 04             	sub    $0x4,%esp
f0115d03:	68 b4 9e 13 f0       	push   $0xf0139eb4
f0115d08:	6a 7f                	push   $0x7f
f0115d0a:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115d0f:	e8 92 a4 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115d14:	e8 b7 63 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0115d19:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115d1c:	74 17                	je     f0115d35 <test_priority_normal_and_higher+0x5b9>
f0115d1e:	83 ec 04             	sub    $0x4,%esp
f0115d21:	68 b4 9e 13 f0       	push   $0xf0139eb4
f0115d26:	68 80 00 00 00       	push   $0x80
f0115d2b:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115d30:	e8 71 a4 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0115d35:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115d38:	8b 40 74             	mov    0x74(%eax),%eax
f0115d3b:	83 f8 14             	cmp    $0x14,%eax
f0115d3e:	75 16                	jne    f0115d56 <test_priority_normal_and_higher+0x5da>
f0115d40:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115d43:	8b 40 74             	mov    0x74(%eax),%eax
f0115d46:	83 f8 1e             	cmp    $0x1e,%eax
f0115d49:	75 0b                	jne    f0115d56 <test_priority_normal_and_higher+0x5da>
f0115d4b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115d4e:	8b 40 74             	mov    0x74(%eax),%eax
f0115d51:	83 f8 28             	cmp    $0x28,%eax
f0115d54:	74 17                	je     f0115d6d <test_priority_normal_and_higher+0x5f1>
			panic("The programs' working set size should be doubled if full\n");
f0115d56:	83 ec 04             	sub    $0x4,%esp
f0115d59:	68 e8 9f 13 f0       	push   $0xf0139fe8
f0115d5e:	68 83 00 00 00       	push   $0x83
f0115d63:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115d68:	e8 39 a4 fe ff       	call   f01001a6 <_panic>

		for(int i = 20; i < 40; i++)
f0115d6d:	c7 45 d0 14 00 00 00 	movl   $0x14,-0x30(%ebp)
f0115d74:	eb 1a                	jmp    f0115d90 <test_priority_normal_and_higher+0x614>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
f0115d76:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115d79:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0115d7c:	89 d0                	mov    %edx,%eax
f0115d7e:	01 c0                	add    %eax,%eax
f0115d80:	01 d0                	add    %edx,%eax
f0115d82:	c1 e0 03             	shl    $0x3,%eax
f0115d85:	01 c8                	add    %ecx,%eax
f0115d87:	83 c0 7c             	add    $0x7c,%eax
f0115d8a:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 20; i < 40; i++)
f0115d8d:	ff 45 d0             	incl   -0x30(%ebp)
f0115d90:	83 7d d0 27          	cmpl   $0x27,-0x30(%ebp)
f0115d94:	7e e0                	jle    f0115d76 <test_priority_normal_and_higher+0x5fa>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115d96:	e8 35 63 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0115d9b:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115d9e:	e8 f1 de fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0115da3:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0115da6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115da9:	83 ec 08             	sub    $0x8,%esp
f0115dac:	6a 05                	push   $0x5
f0115dae:	50                   	push   %eax
f0115daf:	e8 12 48 ff ff       	call   f010a5c6 <set_program_priority>
f0115db4:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115db7:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115dba:	83 ec 08             	sub    $0x8,%esp
f0115dbd:	6a 04                	push   $0x4
f0115dbf:	50                   	push   %eax
f0115dc0:	e8 01 48 ff ff       	call   f010a5c6 <set_program_priority>
f0115dc5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115dc8:	e8 c7 de fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0115dcd:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115dd0:	74 17                	je     f0115de9 <test_priority_normal_and_higher+0x66d>
f0115dd2:	83 ec 04             	sub    $0x4,%esp
f0115dd5:	68 b4 9e 13 f0       	push   $0xf0139eb4
f0115dda:	68 8e 00 00 00       	push   $0x8e
f0115ddf:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115de4:	e8 bd a3 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115de9:	e8 e2 62 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0115dee:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115df1:	74 17                	je     f0115e0a <test_priority_normal_and_higher+0x68e>
f0115df3:	83 ec 04             	sub    $0x4,%esp
f0115df6:	68 b4 9e 13 f0       	push   $0xf0139eb4
f0115dfb:	68 8f 00 00 00       	push   $0x8f
f0115e00:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115e05:	e8 9c a3 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0115e0a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115e0d:	8b 40 74             	mov    0x74(%eax),%eax
f0115e10:	83 f8 14             	cmp    $0x14,%eax
f0115e13:	75 16                	jne    f0115e2b <test_priority_normal_and_higher+0x6af>
f0115e15:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115e18:	8b 40 74             	mov    0x74(%eax),%eax
f0115e1b:	83 f8 1e             	cmp    $0x1e,%eax
f0115e1e:	75 0b                	jne    f0115e2b <test_priority_normal_and_higher+0x6af>
f0115e20:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e23:	8b 40 74             	mov    0x74(%eax),%eax
f0115e26:	83 f8 28             	cmp    $0x28,%eax
f0115e29:	74 17                	je     f0115e42 <test_priority_normal_and_higher+0x6c6>
			panic("The programs' working set size should be doubled if full\n");
f0115e2b:	83 ec 04             	sub    $0x4,%esp
f0115e2e:	68 e8 9f 13 f0       	push   $0xf0139fe8
f0115e33:	68 92 00 00 00       	push   $0x92
f0115e38:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115e3d:	e8 64 a3 fe ff       	call   f01001a6 <_panic>

		for(int i = 15; i < 30; i++)
f0115e42:	c7 45 cc 0f 00 00 00 	movl   $0xf,-0x34(%ebp)
f0115e49:	eb 1a                	jmp    f0115e65 <test_priority_normal_and_higher+0x6e9>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
f0115e4b:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115e4e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0115e51:	89 d0                	mov    %edx,%eax
f0115e53:	01 c0                	add    %eax,%eax
f0115e55:	01 d0                	add    %edx,%eax
f0115e57:	c1 e0 03             	shl    $0x3,%eax
f0115e5a:	01 c8                	add    %ecx,%eax
f0115e5c:	83 c0 7c             	add    $0x7c,%eax
f0115e5f:	c6 00 00             	movb   $0x0,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 30; i++)
f0115e62:	ff 45 cc             	incl   -0x34(%ebp)
f0115e65:	83 7d cc 1d          	cmpl   $0x1d,-0x34(%ebp)
f0115e69:	7e e0                	jle    f0115e4b <test_priority_normal_and_higher+0x6cf>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 0;
		}

		freeFrames = sys_calculate_free_frames();
f0115e6b:	e8 60 62 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0115e70:	89 45 b4             	mov    %eax,-0x4c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0115e73:	e8 1c de fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0115e78:	89 45 b0             	mov    %eax,-0x50(%ebp)
		set_program_priority(factEnv, 5);
f0115e7b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115e7e:	83 ec 08             	sub    $0x8,%esp
f0115e81:	6a 05                	push   $0x5
f0115e83:	50                   	push   %eax
f0115e84:	e8 3d 47 ff ff       	call   f010a5c6 <set_program_priority>
f0115e89:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 4);
f0115e8c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115e8f:	83 ec 08             	sub    $0x8,%esp
f0115e92:	6a 04                	push   $0x4
f0115e94:	50                   	push   %eax
f0115e95:	e8 2c 47 ff ff       	call   f010a5c6 <set_program_priority>
f0115e9a:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0115e9d:	e8 f2 dd fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0115ea2:	3b 45 b0             	cmp    -0x50(%ebp),%eax
f0115ea5:	74 17                	je     f0115ebe <test_priority_normal_and_higher+0x742>
f0115ea7:	83 ec 04             	sub    $0x4,%esp
f0115eaa:	68 b4 9e 13 f0       	push   $0xf0139eb4
f0115eaf:	68 9d 00 00 00       	push   $0x9d
f0115eb4:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115eb9:	e8 e8 a2 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f0115ebe:	e8 0d 62 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0115ec3:	3b 45 b4             	cmp    -0x4c(%ebp),%eax
f0115ec6:	74 17                	je     f0115edf <test_priority_normal_and_higher+0x763>
f0115ec8:	83 ec 04             	sub    $0x4,%esp
f0115ecb:	68 b4 9e 13 f0       	push   $0xf0139eb4
f0115ed0:	68 9e 00 00 00       	push   $0x9e
f0115ed5:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115eda:	e8 c7 a2 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
f0115edf:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0115ee2:	8b 40 74             	mov    0x74(%eax),%eax
f0115ee5:	83 f8 14             	cmp    $0x14,%eax
f0115ee8:	75 16                	jne    f0115f00 <test_priority_normal_and_higher+0x784>
f0115eea:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0115eed:	8b 40 74             	mov    0x74(%eax),%eax
f0115ef0:	83 f8 3c             	cmp    $0x3c,%eax
f0115ef3:	75 0b                	jne    f0115f00 <test_priority_normal_and_higher+0x784>
f0115ef5:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0115ef8:	8b 40 74             	mov    0x74(%eax),%eax
f0115efb:	83 f8 28             	cmp    $0x28,%eax
f0115efe:	74 17                	je     f0115f17 <test_priority_normal_and_higher+0x79b>
			panic("The programs' working set size should be doubled if full\n");
f0115f00:	83 ec 04             	sub    $0x4,%esp
f0115f03:	68 e8 9f 13 f0       	push   $0xf0139fe8
f0115f08:	68 a1 00 00 00       	push   $0xa1
f0115f0d:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115f12:	e8 8f a2 fe ff       	call   f01001a6 <_panic>

		for(int i = 15; i < 60; i++)
f0115f17:	c7 45 c8 0f 00 00 00 	movl   $0xf,-0x38(%ebp)
f0115f1e:	eb 1a                	jmp    f0115f3a <test_priority_normal_and_higher+0x7be>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
f0115f20:	8b 4d a8             	mov    -0x58(%ebp),%ecx
f0115f23:	8b 55 c8             	mov    -0x38(%ebp),%edx
f0115f26:	89 d0                	mov    %edx,%eax
f0115f28:	01 c0                	add    %eax,%eax
f0115f2a:	01 d0                	add    %edx,%eax
f0115f2c:	c1 e0 03             	shl    $0x3,%eax
f0115f2f:	01 c8                	add    %ecx,%eax
f0115f31:	83 c0 7c             	add    $0x7c,%eax
f0115f34:	c6 00 01             	movb   $0x1,(%eax)
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 60 || helloEnv->page_WS_max_size != 40)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 15; i < 60; i++)
f0115f37:	ff 45 c8             	incl   -0x38(%ebp)
f0115f3a:	83 7d c8 3b          	cmpl   $0x3b,-0x38(%ebp)
f0115f3e:	7e e0                	jle    f0115f20 <test_priority_normal_and_higher+0x7a4>
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0115f40:	c7 45 c4 0a 00 00 00 	movl   $0xa,-0x3c(%ebp)
f0115f47:	eb 1a                	jmp    f0115f63 <test_priority_normal_and_higher+0x7e7>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
f0115f49:	8b 4d a4             	mov    -0x5c(%ebp),%ecx
f0115f4c:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0115f4f:	89 d0                	mov    %edx,%eax
f0115f51:	01 c0                	add    %eax,%eax
f0115f53:	01 d0                	add    %edx,%eax
f0115f55:	c1 e0 03             	shl    $0x3,%eax
f0115f58:	01 c8                	add    %ecx,%eax
f0115f5a:	83 c0 7c             	add    $0x7c,%eax
f0115f5d:	c6 00 01             	movb   $0x1,(%eax)

		for(int i = 15; i < 60; i++)
		{
			factEnv->ptr_pageWorkingSet[i].empty = 1;
		}
		for(int i = 10; i < 40; i++)
f0115f60:	ff 45 c4             	incl   -0x3c(%ebp)
f0115f63:	83 7d c4 27          	cmpl   $0x27,-0x3c(%ebp)
f0115f67:	7e e0                	jle    f0115f49 <test_priority_normal_and_higher+0x7cd>
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0115f69:	c7 45 c0 00 00 00 00 	movl   $0x0,-0x40(%ebp)
f0115f70:	eb 79                	jmp    f0115feb <test_priority_normal_and_higher+0x86f>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0115f72:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115f75:	8b 8c 85 74 fd ff ff 	mov    -0x28c(%ebp,%eax,4),%ecx
f0115f7c:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0115f7f:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115f82:	89 d0                	mov    %edx,%eax
f0115f84:	01 c0                	add    %eax,%eax
f0115f86:	01 d0                	add    %edx,%eax
f0115f88:	c1 e0 03             	shl    $0x3,%eax
f0115f8b:	01 d8                	add    %ebx,%eax
f0115f8d:	83 c0 78             	add    $0x78,%eax
f0115f90:	8b 00                	mov    (%eax),%eax
f0115f92:	39 c1                	cmp    %eax,%ecx
f0115f94:	74 17                	je     f0115fad <test_priority_normal_and_higher+0x831>
				panic("Working set should be moved properly to the new one");
f0115f96:	83 ec 04             	sub    $0x4,%esp
f0115f99:	68 24 a0 13 f0       	push   $0xf013a024
f0115f9e:	68 af 00 00 00       	push   $0xaf
f0115fa3:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115fa8:	e8 f9 a1 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0115fad:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0115fb0:	8b 8c 85 c4 fd ff ff 	mov    -0x23c(%ebp,%eax,4),%ecx
f0115fb7:	8b 5d ac             	mov    -0x54(%ebp),%ebx
f0115fba:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0115fbd:	89 d0                	mov    %edx,%eax
f0115fbf:	01 c0                	add    %eax,%eax
f0115fc1:	01 d0                	add    %edx,%eax
f0115fc3:	c1 e0 03             	shl    $0x3,%eax
f0115fc6:	01 d8                	add    %ebx,%eax
f0115fc8:	83 e8 80             	sub    $0xffffff80,%eax
f0115fcb:	8b 00                	mov    (%eax),%eax
f0115fcd:	39 c1                	cmp    %eax,%ecx
f0115fcf:	74 17                	je     f0115fe8 <test_priority_normal_and_higher+0x86c>
				panic("Working set should be moved properly to the new one");
f0115fd1:	83 ec 04             	sub    $0x4,%esp
f0115fd4:	68 24 a0 13 f0       	push   $0xf013a024
f0115fd9:	68 b2 00 00 00       	push   $0xb2
f0115fde:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0115fe3:	e8 be a1 fe ff       	call   f01001a6 <_panic>
		for(int i = 10; i < 40; i++)
		{
			helloEnv->ptr_pageWorkingSet[i].empty = 1;
		}

		for(int i = 0; i < 20; i++)
f0115fe8:	ff 45 c0             	incl   -0x40(%ebp)
f0115feb:	83 7d c0 13          	cmpl   $0x13,-0x40(%ebp)
f0115fef:	7e 81                	jle    f0115f72 <test_priority_normal_and_higher+0x7f6>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0115ff1:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
f0115ff8:	eb 79                	jmp    f0116073 <test_priority_normal_and_higher+0x8f7>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f0115ffa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0115ffd:	8b 8c 85 fc fc ff ff 	mov    -0x304(%ebp,%eax,4),%ecx
f0116004:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0116007:	8b 55 bc             	mov    -0x44(%ebp),%edx
f011600a:	89 d0                	mov    %edx,%eax
f011600c:	01 c0                	add    %eax,%eax
f011600e:	01 d0                	add    %edx,%eax
f0116010:	c1 e0 03             	shl    $0x3,%eax
f0116013:	01 d8                	add    %ebx,%eax
f0116015:	83 c0 78             	add    $0x78,%eax
f0116018:	8b 00                	mov    (%eax),%eax
f011601a:	39 c1                	cmp    %eax,%ecx
f011601c:	74 17                	je     f0116035 <test_priority_normal_and_higher+0x8b9>
				panic("Working set should be moved properly to the new one");
f011601e:	83 ec 04             	sub    $0x4,%esp
f0116021:	68 24 a0 13 f0       	push   $0xf013a024
f0116026:	68 b8 00 00 00       	push   $0xb8
f011602b:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116030:	e8 71 a1 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f0116035:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0116038:	8b 8c 85 38 fd ff ff 	mov    -0x2c8(%ebp,%eax,4),%ecx
f011603f:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0116042:	8b 55 bc             	mov    -0x44(%ebp),%edx
f0116045:	89 d0                	mov    %edx,%eax
f0116047:	01 c0                	add    %eax,%eax
f0116049:	01 d0                	add    %edx,%eax
f011604b:	c1 e0 03             	shl    $0x3,%eax
f011604e:	01 d8                	add    %ebx,%eax
f0116050:	83 e8 80             	sub    $0xffffff80,%eax
f0116053:	8b 00                	mov    (%eax),%eax
f0116055:	39 c1                	cmp    %eax,%ecx
f0116057:	74 17                	je     f0116070 <test_priority_normal_and_higher+0x8f4>
				panic("Working set should be moved properly to the new one");
f0116059:	83 ec 04             	sub    $0x4,%esp
f011605c:	68 24 a0 13 f0       	push   $0xf013a024
f0116061:	68 bb 00 00 00       	push   $0xbb
f0116066:	68 4d 9e 13 f0       	push   $0xf0139e4d
f011606b:	e8 36 a1 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116070:	ff 45 bc             	incl   -0x44(%ebp)
f0116073:	83 7d bc 0e          	cmpl   $0xe,-0x44(%ebp)
f0116077:	7e 81                	jle    f0115ffa <test_priority_normal_and_higher+0x87e>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116079:	c7 45 b8 00 00 00 00 	movl   $0x0,-0x48(%ebp)
f0116080:	eb 79                	jmp    f01160fb <test_priority_normal_and_higher+0x97f>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116082:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116085:	8b 8c 85 ac fc ff ff 	mov    -0x354(%ebp,%eax,4),%ecx
f011608c:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f011608f:	8b 55 b8             	mov    -0x48(%ebp),%edx
f0116092:	89 d0                	mov    %edx,%eax
f0116094:	01 c0                	add    %eax,%eax
f0116096:	01 d0                	add    %edx,%eax
f0116098:	c1 e0 03             	shl    $0x3,%eax
f011609b:	01 d8                	add    %ebx,%eax
f011609d:	83 c0 78             	add    $0x78,%eax
f01160a0:	8b 00                	mov    (%eax),%eax
f01160a2:	39 c1                	cmp    %eax,%ecx
f01160a4:	74 17                	je     f01160bd <test_priority_normal_and_higher+0x941>
				panic("Working set should be moved properly to the new one");
f01160a6:	83 ec 04             	sub    $0x4,%esp
f01160a9:	68 24 a0 13 f0       	push   $0xf013a024
f01160ae:	68 c1 00 00 00       	push   $0xc1
f01160b3:	68 4d 9e 13 f0       	push   $0xf0139e4d
f01160b8:	e8 e9 a0 fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f01160bd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01160c0:	8b 8c 85 d4 fc ff ff 	mov    -0x32c(%ebp,%eax,4),%ecx
f01160c7:	8b 5d a4             	mov    -0x5c(%ebp),%ebx
f01160ca:	8b 55 b8             	mov    -0x48(%ebp),%edx
f01160cd:	89 d0                	mov    %edx,%eax
f01160cf:	01 c0                	add    %eax,%eax
f01160d1:	01 d0                	add    %edx,%eax
f01160d3:	c1 e0 03             	shl    $0x3,%eax
f01160d6:	01 d8                	add    %ebx,%eax
f01160d8:	83 e8 80             	sub    $0xffffff80,%eax
f01160db:	8b 00                	mov    (%eax),%eax
f01160dd:	39 c1                	cmp    %eax,%ecx
f01160df:	74 17                	je     f01160f8 <test_priority_normal_and_higher+0x97c>
				panic("Working set should be moved properly to the new one");
f01160e1:	83 ec 04             	sub    $0x4,%esp
f01160e4:	68 24 a0 13 f0       	push   $0xf013a024
f01160e9:	68 c4 00 00 00       	push   $0xc4
f01160ee:	68 4d 9e 13 f0       	push   $0xf0139e4d
f01160f3:	e8 ae a0 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01160f8:	ff 45 b8             	incl   -0x48(%ebp)
f01160fb:	83 7d b8 09          	cmpl   $0x9,-0x48(%ebp)
f01160ff:	7e 81                	jle    f0116082 <test_priority_normal_and_higher+0x906>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		char command4[100] = "runall";
f0116101:	c7 85 40 ff ff ff 72 	movl   $0x616e7572,-0xc0(%ebp)
f0116108:	75 6e 61 
f011610b:	c7 85 44 ff ff ff 6c 	movl   $0x6c6c,-0xbc(%ebp)
f0116112:	6c 00 00 
f0116115:	8d 95 48 ff ff ff    	lea    -0xb8(%ebp),%edx
f011611b:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116120:	b8 00 00 00 00       	mov    $0x0,%eax
f0116125:	89 d7                	mov    %edx,%edi
f0116127:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116129:	83 ec 0c             	sub    $0xc,%esp
f011612c:	8d 85 40 ff ff ff    	lea    -0xc0(%ebp),%eax
f0116132:	50                   	push   %eax
f0116133:	e8 57 ab fe ff       	call   f0100c8f <execute_command>
f0116138:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
	}
}
f011613b:	eb 10                	jmp    f011614d <test_priority_normal_and_higher+0x9d1>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 1 completed successfully.\n");
f011613d:	83 ec 0c             	sub    $0xc,%esp
f0116140:	68 58 a0 13 f0       	push   $0xf013a058
f0116145:	e8 e3 aa fe ff       	call   f0100c2d <cprintf>
f011614a:	83 c4 10             	add    $0x10,%esp
	}
}
f011614d:	90                   	nop
f011614e:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116151:	5b                   	pop    %ebx
f0116152:	5e                   	pop    %esi
f0116153:	5f                   	pop    %edi
f0116154:	5d                   	pop    %ebp
f0116155:	c3                   	ret    

f0116156 <test_priority_normal_and_lower>:

void test_priority_normal_and_lower()
{
f0116156:	55                   	push   %ebp
f0116157:	89 e5                	mov    %esp,%ebp
f0116159:	57                   	push   %edi
f011615a:	56                   	push   %esi
f011615b:	53                   	push   %ebx
f011615c:	81 ec ac 04 00 00    	sub    $0x4ac,%esp
	if(firstTime)
f0116162:	a0 ce 0c 19 f0       	mov    0xf0190cce,%al
f0116167:	84 c0                	test   %al,%al
f0116169:	0f 84 ac 09 00 00    	je     f0116b1b <test_priority_normal_and_lower+0x9c5>
		uint32 fact_WS[30];
		uint32 fact_TimeStamp[30];
		uint32 hello_WS[40];
		uint32 hello_TimeStamp[40];

		firstTime = 0;
f011616f:	c6 05 ce 0c 19 f0 00 	movb   $0x0,0xf0190cce
		char command[100] = "load fos_add 20";
f0116176:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f011617c:	bb 94 a0 13 f0       	mov    $0xf013a094,%ebx
f0116181:	ba 04 00 00 00       	mov    $0x4,%edx
f0116186:	89 c7                	mov    %eax,%edi
f0116188:	89 de                	mov    %ebx,%esi
f011618a:	89 d1                	mov    %edx,%ecx
f011618c:	f3 a5                	rep movsl %ds:(%esi),%es:(%edi)
f011618e:	8d 95 00 fc ff ff    	lea    -0x400(%ebp),%edx
f0116194:	b9 15 00 00 00       	mov    $0x15,%ecx
f0116199:	b8 00 00 00 00       	mov    $0x0,%eax
f011619e:	89 d7                	mov    %edx,%edi
f01161a0:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command);
f01161a2:	83 ec 0c             	sub    $0xc,%esp
f01161a5:	8d 85 f0 fb ff ff    	lea    -0x410(%ebp),%eax
f01161ab:	50                   	push   %eax
f01161ac:	e8 de aa fe ff       	call   f0100c8f <execute_command>
f01161b1:	83 c4 10             	add    $0x10,%esp
		char command2[100] = "load fact 30";
f01161b4:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01161ba:	bb 50 a3 13 f0       	mov    $0xf013a350,%ebx
f01161bf:	ba 0d 00 00 00       	mov    $0xd,%edx
f01161c4:	89 c7                	mov    %eax,%edi
f01161c6:	89 de                	mov    %ebx,%esi
f01161c8:	89 d1                	mov    %edx,%ecx
f01161ca:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f01161cc:	8d 95 61 fc ff ff    	lea    -0x39f(%ebp),%edx
f01161d2:	b9 57 00 00 00       	mov    $0x57,%ecx
f01161d7:	b0 00                	mov    $0x0,%al
f01161d9:	89 d7                	mov    %edx,%edi
f01161db:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command2);
f01161dd:	83 ec 0c             	sub    $0xc,%esp
f01161e0:	8d 85 54 fc ff ff    	lea    -0x3ac(%ebp),%eax
f01161e6:	50                   	push   %eax
f01161e7:	e8 a3 aa fe ff       	call   f0100c8f <execute_command>
f01161ec:	83 c4 10             	add    $0x10,%esp
		char command3[100] = "load fos_helloWorld 40";
f01161ef:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f01161f5:	bb b4 a3 13 f0       	mov    $0xf013a3b4,%ebx
f01161fa:	ba 17 00 00 00       	mov    $0x17,%edx
f01161ff:	89 c7                	mov    %eax,%edi
f0116201:	89 de                	mov    %ebx,%esi
f0116203:	89 d1                	mov    %edx,%ecx
f0116205:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f0116207:	8d 95 cf fc ff ff    	lea    -0x331(%ebp),%edx
f011620d:	b9 4d 00 00 00       	mov    $0x4d,%ecx
f0116212:	b0 00                	mov    $0x0,%al
f0116214:	89 d7                	mov    %edx,%edi
f0116216:	f3 aa                	rep stos %al,%es:(%edi)
		execute_command(command3);
f0116218:	83 ec 0c             	sub    $0xc,%esp
f011621b:	8d 85 b8 fc ff ff    	lea    -0x348(%ebp),%eax
f0116221:	50                   	push   %eax
f0116222:	e8 68 aa fe ff       	call   f0100c8f <execute_command>
f0116227:	83 c4 10             	add    $0x10,%esp

		struct Env * addEnv;
		struct Env * factEnv;
		struct Env * helloEnv;
		envid2env(4096, &addEnv, 0);
f011622a:	83 ec 04             	sub    $0x4,%esp
f011622d:	6a 00                	push   $0x0
f011622f:	8d 45 b8             	lea    -0x48(%ebp),%eax
f0116232:	50                   	push   %eax
f0116233:	68 00 10 00 00       	push   $0x1000
f0116238:	e8 a2 2e ff ff       	call   f01090df <envid2env>
f011623d:	83 c4 10             	add    $0x10,%esp
		envid2env(4097, &factEnv, 0);
f0116240:	83 ec 04             	sub    $0x4,%esp
f0116243:	6a 00                	push   $0x0
f0116245:	8d 45 b4             	lea    -0x4c(%ebp),%eax
f0116248:	50                   	push   %eax
f0116249:	68 01 10 00 00       	push   $0x1001
f011624e:	e8 8c 2e ff ff       	call   f01090df <envid2env>
f0116253:	83 c4 10             	add    $0x10,%esp
		envid2env(4098, &helloEnv, 0);
f0116256:	83 ec 04             	sub    $0x4,%esp
f0116259:	6a 00                	push   $0x0
f011625b:	8d 45 b0             	lea    -0x50(%ebp),%eax
f011625e:	50                   	push   %eax
f011625f:	68 02 10 00 00       	push   $0x1002
f0116264:	e8 76 2e ff ff       	call   f01090df <envid2env>
f0116269:	83 c4 10             	add    $0x10,%esp

		if(addEnv == NULL || factEnv == NULL || helloEnv == NULL)
f011626c:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011626f:	85 c0                	test   %eax,%eax
f0116271:	74 0e                	je     f0116281 <test_priority_normal_and_lower+0x12b>
f0116273:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116276:	85 c0                	test   %eax,%eax
f0116278:	74 07                	je     f0116281 <test_priority_normal_and_lower+0x12b>
f011627a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011627d:	85 c0                	test   %eax,%eax
f011627f:	75 17                	jne    f0116298 <test_priority_normal_and_lower+0x142>
			panic("Loading programs failed\n");
f0116281:	83 ec 04             	sub    $0x4,%esp
f0116284:	68 34 9e 13 f0       	push   $0xf0139e34
f0116289:	68 eb 00 00 00       	push   $0xeb
f011628e:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116293:	e8 0e 9f fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f0116298:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011629b:	8b 40 74             	mov    0x74(%eax),%eax
f011629e:	83 f8 14             	cmp    $0x14,%eax
f01162a1:	75 16                	jne    f01162b9 <test_priority_normal_and_lower+0x163>
f01162a3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01162a6:	8b 40 74             	mov    0x74(%eax),%eax
f01162a9:	83 f8 1e             	cmp    $0x1e,%eax
f01162ac:	75 0b                	jne    f01162b9 <test_priority_normal_and_lower+0x163>
f01162ae:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01162b1:	8b 40 74             	mov    0x74(%eax),%eax
f01162b4:	83 f8 28             	cmp    $0x28,%eax
f01162b7:	74 17                	je     f01162d0 <test_priority_normal_and_lower+0x17a>
			panic("The programs should be initially loaded with the given working set size\n");
f01162b9:	83 ec 04             	sub    $0x4,%esp
f01162bc:	68 68 9e 13 f0       	push   $0xf0139e68
f01162c1:	68 ee 00 00 00       	push   $0xee
f01162c6:	68 4d 9e 13 f0       	push   $0xf0139e4d
f01162cb:	e8 d6 9e fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 20; i++)
f01162d0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f01162d7:	eb 43                	jmp    f011631c <test_priority_normal_and_lower+0x1c6>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
f01162d9:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f01162dc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01162df:	89 d0                	mov    %edx,%eax
f01162e1:	01 c0                	add    %eax,%eax
f01162e3:	01 d0                	add    %edx,%eax
f01162e5:	c1 e0 03             	shl    $0x3,%eax
f01162e8:	01 c8                	add    %ecx,%eax
f01162ea:	83 c0 78             	add    $0x78,%eax
f01162ed:	8b 10                	mov    (%eax),%edx
f01162ef:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01162f2:	89 94 85 50 fb ff ff 	mov    %edx,-0x4b0(%ebp,%eax,4)
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
f01162f9:	8b 4d b8             	mov    -0x48(%ebp),%ecx
f01162fc:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01162ff:	89 d0                	mov    %edx,%eax
f0116301:	01 c0                	add    %eax,%eax
f0116303:	01 d0                	add    %edx,%eax
f0116305:	c1 e0 03             	shl    $0x3,%eax
f0116308:	01 c8                	add    %ecx,%eax
f011630a:	83 e8 80             	sub    $0xffffff80,%eax
f011630d:	8b 10                	mov    (%eax),%edx
f011630f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0116312:	89 94 85 a0 fb ff ff 	mov    %edx,-0x460(%ebp,%eax,4)
			panic("Loading programs failed\n");

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
			panic("The programs should be initially loaded with the given working set size\n");

		for(int i = 0; i < 20; i++)
f0116319:	ff 45 e4             	incl   -0x1c(%ebp)
f011631c:	83 7d e4 13          	cmpl   $0x13,-0x1c(%ebp)
f0116320:	7e b7                	jle    f01162d9 <test_priority_normal_and_lower+0x183>
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f0116322:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
f0116329:	eb 43                	jmp    f011636e <test_priority_normal_and_lower+0x218>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
f011632b:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f011632e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116331:	89 d0                	mov    %edx,%eax
f0116333:	01 c0                	add    %eax,%eax
f0116335:	01 d0                	add    %edx,%eax
f0116337:	c1 e0 03             	shl    $0x3,%eax
f011633a:	01 c8                	add    %ecx,%eax
f011633c:	83 c0 78             	add    $0x78,%eax
f011633f:	8b 10                	mov    (%eax),%edx
f0116341:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116344:	89 94 85 80 fd ff ff 	mov    %edx,-0x280(%ebp,%eax,4)
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
f011634b:	8b 4d b4             	mov    -0x4c(%ebp),%ecx
f011634e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0116351:	89 d0                	mov    %edx,%eax
f0116353:	01 c0                	add    %eax,%eax
f0116355:	01 d0                	add    %edx,%eax
f0116357:	c1 e0 03             	shl    $0x3,%eax
f011635a:	01 c8                	add    %ecx,%eax
f011635c:	83 e8 80             	sub    $0xffffff80,%eax
f011635f:	8b 10                	mov    (%eax),%edx
f0116361:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0116364:	89 94 85 f8 fd ff ff 	mov    %edx,-0x208(%ebp,%eax,4)
		{
			add_WS[i] = addEnv->ptr_pageWorkingSet[i].virtual_address;
			add_TimeStamp[i] = addEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 30; i++)
f011636b:	ff 45 e0             	incl   -0x20(%ebp)
f011636e:	83 7d e0 1d          	cmpl   $0x1d,-0x20(%ebp)
f0116372:	7e b7                	jle    f011632b <test_priority_normal_and_lower+0x1d5>
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f0116374:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f011637b:	eb 43                	jmp    f01163c0 <test_priority_normal_and_lower+0x26a>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
f011637d:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f0116380:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0116383:	89 d0                	mov    %edx,%eax
f0116385:	01 c0                	add    %eax,%eax
f0116387:	01 d0                	add    %edx,%eax
f0116389:	c1 e0 03             	shl    $0x3,%eax
f011638c:	01 c8                	add    %ecx,%eax
f011638e:	83 c0 78             	add    $0x78,%eax
f0116391:	8b 10                	mov    (%eax),%edx
f0116393:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116396:	89 94 85 70 fe ff ff 	mov    %edx,-0x190(%ebp,%eax,4)
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
f011639d:	8b 4d b0             	mov    -0x50(%ebp),%ecx
f01163a0:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01163a3:	89 d0                	mov    %edx,%eax
f01163a5:	01 c0                	add    %eax,%eax
f01163a7:	01 d0                	add    %edx,%eax
f01163a9:	c1 e0 03             	shl    $0x3,%eax
f01163ac:	01 c8                	add    %ecx,%eax
f01163ae:	83 e8 80             	sub    $0xffffff80,%eax
f01163b1:	8b 10                	mov    (%eax),%edx
f01163b3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01163b6:	89 94 85 10 ff ff ff 	mov    %edx,-0xf0(%ebp,%eax,4)
		{
			fact_WS[i] = factEnv->ptr_pageWorkingSet[i].virtual_address;
			fact_TimeStamp[i] = factEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		for(int i = 0; i < 40; i++)
f01163bd:	ff 45 dc             	incl   -0x24(%ebp)
f01163c0:	83 7d dc 27          	cmpl   $0x27,-0x24(%ebp)
f01163c4:	7e b7                	jle    f011637d <test_priority_normal_and_lower+0x227>
		{
			hello_WS[i] = helloEnv->ptr_pageWorkingSet[i].virtual_address;
			hello_TimeStamp[i] = helloEnv->ptr_pageWorkingSet[i].time_stamp;
		}

		int freeFrames = sys_calculate_free_frames();
f01163c6:	e8 05 5d ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01163cb:	89 45 c0             	mov    %eax,-0x40(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01163ce:	e8 c1 d8 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01163d3:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Normal // Should change nothing
		set_program_priority(addEnv, 3);
f01163d6:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01163d9:	83 ec 08             	sub    $0x8,%esp
f01163dc:	6a 03                	push   $0x3
f01163de:	50                   	push   %eax
f01163df:	e8 e2 41 ff ff       	call   f010a5c6 <set_program_priority>
f01163e4:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 3);
f01163e7:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01163ea:	83 ec 08             	sub    $0x8,%esp
f01163ed:	6a 03                	push   $0x3
f01163ef:	50                   	push   %eax
f01163f0:	e8 d1 41 ff ff       	call   f010a5c6 <set_program_priority>
f01163f5:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 3);
f01163f8:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01163fb:	83 ec 08             	sub    $0x8,%esp
f01163fe:	6a 03                	push   $0x3
f0116400:	50                   	push   %eax
f0116401:	e8 c0 41 ff ff       	call   f010a5c6 <set_program_priority>
f0116406:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f0116409:	e8 86 d8 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011640e:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116411:	74 17                	je     f011642a <test_priority_normal_and_lower+0x2d4>
f0116413:	83 ec 04             	sub    $0x4,%esp
f0116416:	68 b4 9e 13 f0       	push   $0xf0139eb4
f011641b:	68 0a 01 00 00       	push   $0x10a
f0116420:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116425:	e8 7c 9d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Old working set should be removed properly\n");
f011642a:	e8 a1 5c ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011642f:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f0116432:	74 17                	je     f011644b <test_priority_normal_and_lower+0x2f5>
f0116434:	83 ec 04             	sub    $0x4,%esp
f0116437:	68 b4 9e 13 f0       	push   $0xf0139eb4
f011643c:	68 0b 01 00 00       	push   $0x10b
f0116441:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116446:	e8 5b 9d fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 20 || factEnv->page_WS_max_size != 30 || helloEnv->page_WS_max_size != 40)
f011644b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011644e:	8b 40 74             	mov    0x74(%eax),%eax
f0116451:	83 f8 14             	cmp    $0x14,%eax
f0116454:	75 16                	jne    f011646c <test_priority_normal_and_lower+0x316>
f0116456:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116459:	8b 40 74             	mov    0x74(%eax),%eax
f011645c:	83 f8 1e             	cmp    $0x1e,%eax
f011645f:	75 0b                	jne    f011646c <test_priority_normal_and_lower+0x316>
f0116461:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116464:	8b 40 74             	mov    0x74(%eax),%eax
f0116467:	83 f8 28             	cmp    $0x28,%eax
f011646a:	74 17                	je     f0116483 <test_priority_normal_and_lower+0x32d>
			panic("The programs' working set size should not change after setting priority to normal\n");
f011646c:	83 ec 04             	sub    $0x4,%esp
f011646f:	68 e0 9e 13 f0       	push   $0xf0139ee0
f0116474:	68 0e 01 00 00       	push   $0x10e
f0116479:	68 4d 9e 13 f0       	push   $0xf0139e4d
f011647e:	e8 23 9d fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f0116483:	e8 48 5c ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0116488:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011648b:	e8 04 d8 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0116490:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f0116493:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116496:	83 ec 08             	sub    $0x8,%esp
f0116499:	6a 02                	push   $0x2
f011649b:	50                   	push   %eax
f011649c:	e8 25 41 ff ff       	call   f010a5c6 <set_program_priority>
f01164a1:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f01164a4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01164a7:	83 ec 08             	sub    $0x8,%esp
f01164aa:	6a 02                	push   $0x2
f01164ac:	50                   	push   %eax
f01164ad:	e8 14 41 ff ff       	call   f010a5c6 <set_program_priority>
f01164b2:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f01164b5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01164b8:	83 ec 08             	sub    $0x8,%esp
f01164bb:	6a 02                	push   $0x2
f01164bd:	50                   	push   %eax
f01164be:	e8 03 41 ff ff       	call   f010a5c6 <set_program_priority>
f01164c3:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01164c6:	e8 c9 d7 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01164cb:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01164ce:	74 17                	je     f01164e7 <test_priority_normal_and_lower+0x391>
f01164d0:	83 ec 04             	sub    $0x4,%esp
f01164d3:	68 b4 9e 13 f0       	push   $0xf0139eb4
f01164d8:	68 18 01 00 00       	push   $0x118
f01164dd:	68 4d 9e 13 f0       	push   $0xf0139e4d
f01164e2:	e8 bf 9c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01164e7:	e8 e4 5b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01164ec:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01164ef:	74 21                	je     f0116512 <test_priority_normal_and_lower+0x3bc>
f01164f1:	e8 da 5b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01164f6:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01164f9:	29 c2                	sub    %eax,%edx
f01164fb:	89 d0                	mov    %edx,%eax
f01164fd:	50                   	push   %eax
f01164fe:	68 34 9f 13 f0       	push   $0xf0139f34
f0116503:	68 19 01 00 00       	push   $0x119
f0116508:	68 4d 9e 13 f0       	push   $0xf0139e4d
f011650d:	e8 94 9c fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 20)
f0116512:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116515:	8b 40 74             	mov    0x74(%eax),%eax
f0116518:	83 f8 0a             	cmp    $0xa,%eax
f011651b:	75 16                	jne    f0116533 <test_priority_normal_and_lower+0x3dd>
f011651d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116520:	8b 40 74             	mov    0x74(%eax),%eax
f0116523:	83 f8 0f             	cmp    $0xf,%eax
f0116526:	75 0b                	jne    f0116533 <test_priority_normal_and_lower+0x3dd>
f0116528:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011652b:	8b 40 74             	mov    0x74(%eax),%eax
f011652e:	83 f8 14             	cmp    $0x14,%eax
f0116531:	74 17                	je     f011654a <test_priority_normal_and_lower+0x3f4>
			panic("The programs' working set size should be doubled only if it is full\n");
f0116533:	83 ec 04             	sub    $0x4,%esp
f0116536:	68 64 9f 13 f0       	push   $0xf0139f64
f011653b:	68 1c 01 00 00       	push   $0x11c
f0116540:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116545:	e8 5c 9c fe ff       	call   f01001a6 <_panic>

		freeFrames = sys_calculate_free_frames();
f011654a:	e8 81 5b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011654f:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116552:	e8 3d d7 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0116557:	89 45 bc             	mov    %eax,-0x44(%ebp)

		// Set Priority To Below Normal // Should change only if half is free
		set_program_priority(addEnv, 2);
f011655a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011655d:	83 ec 08             	sub    $0x8,%esp
f0116560:	6a 02                	push   $0x2
f0116562:	50                   	push   %eax
f0116563:	e8 5e 40 ff ff       	call   f010a5c6 <set_program_priority>
f0116568:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 2);
f011656b:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011656e:	83 ec 08             	sub    $0x8,%esp
f0116571:	6a 02                	push   $0x2
f0116573:	50                   	push   %eax
f0116574:	e8 4d 40 ff ff       	call   f010a5c6 <set_program_priority>
f0116579:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 2);
f011657c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011657f:	83 ec 08             	sub    $0x8,%esp
f0116582:	6a 02                	push   $0x2
f0116584:	50                   	push   %eax
f0116585:	e8 3c 40 ff ff       	call   f010a5c6 <set_program_priority>
f011658a:	83 c4 10             	add    $0x10,%esp

		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011658d:	e8 02 d7 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0116592:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116595:	74 17                	je     f01165ae <test_priority_normal_and_lower+0x458>
f0116597:	83 ec 04             	sub    $0x4,%esp
f011659a:	68 b4 9e 13 f0       	push   $0xf0139eb4
f011659f:	68 26 01 00 00       	push   $0x126
f01165a4:	68 4d 9e 13 f0       	push   $0xf0139e4d
f01165a9:	e8 f8 9b fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));
f01165ae:	e8 1d 5b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01165b3:	3b 45 c0             	cmp    -0x40(%ebp),%eax
f01165b6:	74 21                	je     f01165d9 <test_priority_normal_and_lower+0x483>
f01165b8:	e8 13 5b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01165bd:	8b 55 c0             	mov    -0x40(%ebp),%edx
f01165c0:	29 c2                	sub    %eax,%edx
f01165c2:	89 d0                	mov    %edx,%eax
f01165c4:	50                   	push   %eax
f01165c5:	68 34 9f 13 f0       	push   $0xf0139f34
f01165ca:	68 27 01 00 00       	push   $0x127
f01165cf:	68 4d 9e 13 f0       	push   $0xf0139e4d
f01165d4:	e8 cd 9b fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
f01165d9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01165dc:	8b 40 74             	mov    0x74(%eax),%eax
f01165df:	83 f8 0a             	cmp    $0xa,%eax
f01165e2:	75 16                	jne    f01165fa <test_priority_normal_and_lower+0x4a4>
f01165e4:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01165e7:	8b 40 74             	mov    0x74(%eax),%eax
f01165ea:	83 f8 0f             	cmp    $0xf,%eax
f01165ed:	75 0b                	jne    f01165fa <test_priority_normal_and_lower+0x4a4>
f01165ef:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01165f2:	8b 40 74             	mov    0x74(%eax),%eax
f01165f5:	83 f8 0a             	cmp    $0xa,%eax
f01165f8:	74 17                	je     f0116611 <test_priority_normal_and_lower+0x4bb>
			panic("The programs' working set size should be doubled only if it is full\n");
f01165fa:	83 ec 04             	sub    $0x4,%esp
f01165fd:	68 64 9f 13 f0       	push   $0xf0139f64
f0116602:	68 2a 01 00 00       	push   $0x12a
f0116607:	68 4d 9e 13 f0       	push   $0xf0139e4d
f011660c:	e8 95 9b fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 10; i++)
f0116611:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f0116618:	eb 79                	jmp    f0116693 <test_priority_normal_and_lower+0x53d>
		{
			if(add_WS[i] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f011661a:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011661d:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f0116624:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116627:	8b 55 d8             	mov    -0x28(%ebp),%edx
f011662a:	89 d0                	mov    %edx,%eax
f011662c:	01 c0                	add    %eax,%eax
f011662e:	01 d0                	add    %edx,%eax
f0116630:	c1 e0 03             	shl    $0x3,%eax
f0116633:	01 d8                	add    %ebx,%eax
f0116635:	83 c0 78             	add    $0x78,%eax
f0116638:	8b 00                	mov    (%eax),%eax
f011663a:	39 c1                	cmp    %eax,%ecx
f011663c:	74 17                	je     f0116655 <test_priority_normal_and_lower+0x4ff>
				panic("Working set should be moved properly to the new one");
f011663e:	83 ec 04             	sub    $0x4,%esp
f0116641:	68 24 a0 13 f0       	push   $0xf013a024
f0116646:	68 2f 01 00 00       	push   $0x12f
f011664b:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116650:	e8 51 9b fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f0116655:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0116658:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f011665f:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116662:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0116665:	89 d0                	mov    %edx,%eax
f0116667:	01 c0                	add    %eax,%eax
f0116669:	01 d0                	add    %edx,%eax
f011666b:	c1 e0 03             	shl    $0x3,%eax
f011666e:	01 d8                	add    %ebx,%eax
f0116670:	83 e8 80             	sub    $0xffffff80,%eax
f0116673:	8b 00                	mov    (%eax),%eax
f0116675:	39 c1                	cmp    %eax,%ecx
f0116677:	74 17                	je     f0116690 <test_priority_normal_and_lower+0x53a>
				panic("Working set should be moved properly to the new one");
f0116679:	83 ec 04             	sub    $0x4,%esp
f011667c:	68 24 a0 13 f0       	push   $0xf013a024
f0116681:	68 32 01 00 00       	push   $0x132
f0116686:	68 4d 9e 13 f0       	push   $0xf0139e4d
f011668b:	e8 16 9b fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Old working set should be removed properly%x\n", (freeFrames - sys_calculate_free_frames()));

		if(addEnv->page_WS_max_size != 10 || factEnv->page_WS_max_size != 15 || helloEnv->page_WS_max_size != 10)
			panic("The programs' working set size should be doubled only if it is full\n");

		for(int i = 0; i < 10; i++)
f0116690:	ff 45 d8             	incl   -0x28(%ebp)
f0116693:	83 7d d8 09          	cmpl   $0x9,-0x28(%ebp)
f0116697:	7e 81                	jle    f011661a <test_priority_normal_and_lower+0x4c4>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116699:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f01166a0:	eb 79                	jmp    f011671b <test_priority_normal_and_lower+0x5c5>
		{
			if(fact_WS[i] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01166a2:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01166a5:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01166ac:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01166af:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01166b2:	89 d0                	mov    %edx,%eax
f01166b4:	01 c0                	add    %eax,%eax
f01166b6:	01 d0                	add    %edx,%eax
f01166b8:	c1 e0 03             	shl    $0x3,%eax
f01166bb:	01 d8                	add    %ebx,%eax
f01166bd:	83 c0 78             	add    $0x78,%eax
f01166c0:	8b 00                	mov    (%eax),%eax
f01166c2:	39 c1                	cmp    %eax,%ecx
f01166c4:	74 17                	je     f01166dd <test_priority_normal_and_lower+0x587>
				panic("Working set should be moved properly to the new one");
f01166c6:	83 ec 04             	sub    $0x4,%esp
f01166c9:	68 24 a0 13 f0       	push   $0xf013a024
f01166ce:	68 38 01 00 00       	push   $0x138
f01166d3:	68 4d 9e 13 f0       	push   $0xf0139e4d
f01166d8:	e8 c9 9a fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01166dd:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f01166e0:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f01166e7:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01166ea:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f01166ed:	89 d0                	mov    %edx,%eax
f01166ef:	01 c0                	add    %eax,%eax
f01166f1:	01 d0                	add    %edx,%eax
f01166f3:	c1 e0 03             	shl    $0x3,%eax
f01166f6:	01 d8                	add    %ebx,%eax
f01166f8:	83 e8 80             	sub    $0xffffff80,%eax
f01166fb:	8b 00                	mov    (%eax),%eax
f01166fd:	39 c1                	cmp    %eax,%ecx
f01166ff:	74 17                	je     f0116718 <test_priority_normal_and_lower+0x5c2>
				panic("Working set should be moved properly to the new one");
f0116701:	83 ec 04             	sub    $0x4,%esp
f0116704:	68 24 a0 13 f0       	push   $0xf013a024
f0116709:	68 3b 01 00 00       	push   $0x13b
f011670e:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116713:	e8 8e 9a fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 15; i++)
f0116718:	ff 45 d4             	incl   -0x2c(%ebp)
f011671b:	83 7d d4 0e          	cmpl   $0xe,-0x2c(%ebp)
f011671f:	7e 81                	jle    f01166a2 <test_priority_normal_and_lower+0x54c>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f0116721:	c7 45 d0 00 00 00 00 	movl   $0x0,-0x30(%ebp)
f0116728:	eb 79                	jmp    f01167a3 <test_priority_normal_and_lower+0x64d>
		{
			if(hello_WS[i] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f011672a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011672d:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116734:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116737:	8b 55 d0             	mov    -0x30(%ebp),%edx
f011673a:	89 d0                	mov    %edx,%eax
f011673c:	01 c0                	add    %eax,%eax
f011673e:	01 d0                	add    %edx,%eax
f0116740:	c1 e0 03             	shl    $0x3,%eax
f0116743:	01 d8                	add    %ebx,%eax
f0116745:	83 c0 78             	add    $0x78,%eax
f0116748:	8b 00                	mov    (%eax),%eax
f011674a:	39 c1                	cmp    %eax,%ecx
f011674c:	74 17                	je     f0116765 <test_priority_normal_and_lower+0x60f>
				panic("Working set should be moved properly to the new one");
f011674e:	83 ec 04             	sub    $0x4,%esp
f0116751:	68 24 a0 13 f0       	push   $0xf013a024
f0116756:	68 41 01 00 00       	push   $0x141
f011675b:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116760:	e8 41 9a fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116765:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116768:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f011676f:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116772:	8b 55 d0             	mov    -0x30(%ebp),%edx
f0116775:	89 d0                	mov    %edx,%eax
f0116777:	01 c0                	add    %eax,%eax
f0116779:	01 d0                	add    %edx,%eax
f011677b:	c1 e0 03             	shl    $0x3,%eax
f011677e:	01 d8                	add    %ebx,%eax
f0116780:	83 e8 80             	sub    $0xffffff80,%eax
f0116783:	8b 00                	mov    (%eax),%eax
f0116785:	39 c1                	cmp    %eax,%ecx
f0116787:	74 17                	je     f01167a0 <test_priority_normal_and_lower+0x64a>
				panic("Working set should be moved properly to the new one");
f0116789:	83 ec 04             	sub    $0x4,%esp
f011678c:	68 24 a0 13 f0       	push   $0xf013a024
f0116791:	68 44 01 00 00       	push   $0x144
f0116796:	68 4d 9e 13 f0       	push   $0xf0139e4d
f011679b:	e8 06 9a fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		for(int i = 0; i < 10; i++)
f01167a0:	ff 45 d0             	incl   -0x30(%ebp)
f01167a3:	83 7d d0 09          	cmpl   $0x9,-0x30(%ebp)
f01167a7:	7e 81                	jle    f011672a <test_priority_normal_and_lower+0x5d4>
			if(hello_TimeStamp[i] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one");
		}

		// Set priority to low
		freeFrames = sys_calculate_free_frames();
f01167a9:	e8 22 59 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01167ae:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01167b1:	e8 de d4 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01167b6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f01167b9:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01167bc:	83 ec 08             	sub    $0x8,%esp
f01167bf:	6a 01                	push   $0x1
f01167c1:	50                   	push   %eax
f01167c2:	e8 ff 3d ff ff       	call   f010a5c6 <set_program_priority>
f01167c7:	83 c4 10             	add    $0x10,%esp
		set_program_priority(factEnv, 1);
f01167ca:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01167cd:	83 ec 08             	sub    $0x8,%esp
f01167d0:	6a 01                	push   $0x1
f01167d2:	50                   	push   %eax
f01167d3:	e8 ee 3d ff ff       	call   f010a5c6 <set_program_priority>
f01167d8:	83 c4 10             	add    $0x10,%esp
		set_program_priority(helloEnv, 1);
f01167db:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01167de:	83 ec 08             	sub    $0x8,%esp
f01167e1:	6a 01                	push   $0x1
f01167e3:	50                   	push   %eax
f01167e4:	e8 dd 3d ff ff       	call   f010a5c6 <set_program_priority>
f01167e9:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f01167ec:	e8 a3 d4 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01167f1:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f01167f4:	74 17                	je     f011680d <test_priority_normal_and_lower+0x6b7>
f01167f6:	83 ec 04             	sub    $0x4,%esp
f01167f9:	68 b4 9e 13 f0       	push   $0xf0139eb4
f01167fe:	68 4d 01 00 00       	push   $0x14d
f0116803:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116808:	e8 99 99 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (5+3+5)) panic("Old working set and extra pages in WS should be removed properly %d\n");
f011680d:	e8 be 58 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0116812:	2b 45 c0             	sub    -0x40(%ebp),%eax
f0116815:	83 f8 0d             	cmp    $0xd,%eax
f0116818:	74 17                	je     f0116831 <test_priority_normal_and_lower+0x6db>
f011681a:	83 ec 04             	sub    $0x4,%esp
f011681d:	68 c0 a1 13 f0       	push   $0xf013a1c0
f0116822:	68 4e 01 00 00       	push   $0x14e
f0116827:	68 4d 9e 13 f0       	push   $0xf0139e4d
f011682c:	e8 75 99 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 5 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f0116831:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116834:	8b 40 74             	mov    0x74(%eax),%eax
f0116837:	83 f8 05             	cmp    $0x5,%eax
f011683a:	75 16                	jne    f0116852 <test_priority_normal_and_lower+0x6fc>
f011683c:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011683f:	8b 40 74             	mov    0x74(%eax),%eax
f0116842:	83 f8 07             	cmp    $0x7,%eax
f0116845:	75 0b                	jne    f0116852 <test_priority_normal_and_lower+0x6fc>
f0116847:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011684a:	8b 40 74             	mov    0x74(%eax),%eax
f011684d:	83 f8 05             	cmp    $0x5,%eax
f0116850:	74 17                	je     f0116869 <test_priority_normal_and_lower+0x713>
			panic("The programs' working set size should be half\n");
f0116852:	83 ec 04             	sub    $0x4,%esp
f0116855:	68 08 a2 13 f0       	push   $0xf013a208
f011685a:	68 51 01 00 00       	push   $0x151
f011685f:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116864:	e8 3d 99 fe ff       	call   f01001a6 <_panic>


		freeFrames = sys_calculate_free_frames();
f0116869:	e8 62 58 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011686e:	89 45 c0             	mov    %eax,-0x40(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116871:	e8 1e d4 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0116876:	89 45 bc             	mov    %eax,-0x44(%ebp)
		set_program_priority(addEnv, 1);
f0116879:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011687c:	83 ec 08             	sub    $0x8,%esp
f011687f:	6a 01                	push   $0x1
f0116881:	50                   	push   %eax
f0116882:	e8 3f 3d ff ff       	call   f010a5c6 <set_program_priority>
f0116887:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Old working set should be removed properly\n");
f011688a:	e8 05 d4 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011688f:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f0116892:	74 17                	je     f01168ab <test_priority_normal_and_lower+0x755>
f0116894:	83 ec 04             	sub    $0x4,%esp
f0116897:	68 b4 9e 13 f0       	push   $0xf0139eb4
f011689c:	68 57 01 00 00       	push   $0x157
f01168a1:	68 4d 9e 13 f0       	push   $0xf0139e4d
f01168a6:	e8 fb 98 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");
f01168ab:	e8 20 58 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01168b0:	2b 45 c0             	sub    -0x40(%ebp),%eax
f01168b3:	83 f8 03             	cmp    $0x3,%eax
f01168b6:	74 17                	je     f01168cf <test_priority_normal_and_lower+0x779>
f01168b8:	83 ec 04             	sub    $0x4,%esp
f01168bb:	68 b4 9e 13 f0       	push   $0xf0139eb4
f01168c0:	68 58 01 00 00       	push   $0x158
f01168c5:	68 4d 9e 13 f0       	push   $0xf0139e4d
f01168ca:	e8 d7 98 fe ff       	call   f01001a6 <_panic>

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
f01168cf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01168d2:	8b 40 74             	mov    0x74(%eax),%eax
f01168d5:	83 f8 02             	cmp    $0x2,%eax
f01168d8:	75 16                	jne    f01168f0 <test_priority_normal_and_lower+0x79a>
f01168da:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01168dd:	8b 40 74             	mov    0x74(%eax),%eax
f01168e0:	83 f8 07             	cmp    $0x7,%eax
f01168e3:	75 0b                	jne    f01168f0 <test_priority_normal_and_lower+0x79a>
f01168e5:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01168e8:	8b 40 74             	mov    0x74(%eax),%eax
f01168eb:	83 f8 05             	cmp    $0x5,%eax
f01168ee:	74 17                	je     f0116907 <test_priority_normal_and_lower+0x7b1>
			panic("The programs' working set size should be doubled if full\n");
f01168f0:	83 ec 04             	sub    $0x4,%esp
f01168f3:	68 e8 9f 13 f0       	push   $0xf0139fe8
f01168f8:	68 5b 01 00 00       	push   $0x15b
f01168fd:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116902:	e8 9f 98 fe ff       	call   f01001a6 <_panic>

		for(int i = 0; i < 2; i++)
f0116907:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f011690e:	eb 7f                	jmp    f011698f <test_priority_normal_and_lower+0x839>
		{
			if(add_WS[i+8] != addEnv->ptr_pageWorkingSet[i].virtual_address)
f0116910:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116913:	83 c0 08             	add    $0x8,%eax
f0116916:	8b 8c 85 50 fb ff ff 	mov    -0x4b0(%ebp,%eax,4),%ecx
f011691d:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f0116920:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116923:	89 d0                	mov    %edx,%eax
f0116925:	01 c0                	add    %eax,%eax
f0116927:	01 d0                	add    %edx,%eax
f0116929:	c1 e0 03             	shl    $0x3,%eax
f011692c:	01 d8                	add    %ebx,%eax
f011692e:	83 c0 78             	add    $0x78,%eax
f0116931:	8b 00                	mov    (%eax),%eax
f0116933:	39 c1                	cmp    %eax,%ecx
f0116935:	74 17                	je     f011694e <test_priority_normal_and_lower+0x7f8>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116937:	83 ec 04             	sub    $0x4,%esp
f011693a:	68 38 a2 13 f0       	push   $0xf013a238
f011693f:	68 60 01 00 00       	push   $0x160
f0116944:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116949:	e8 58 98 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
f011694e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116951:	83 c0 08             	add    $0x8,%eax
f0116954:	8b 8c 85 a0 fb ff ff 	mov    -0x460(%ebp,%eax,4),%ecx
f011695b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f011695e:	8b 55 cc             	mov    -0x34(%ebp),%edx
f0116961:	89 d0                	mov    %edx,%eax
f0116963:	01 c0                	add    %eax,%eax
f0116965:	01 d0                	add    %edx,%eax
f0116967:	c1 e0 03             	shl    $0x3,%eax
f011696a:	01 d8                	add    %ebx,%eax
f011696c:	83 e8 80             	sub    $0xffffff80,%eax
f011696f:	8b 00                	mov    (%eax),%eax
f0116971:	39 c1                	cmp    %eax,%ecx
f0116973:	74 17                	je     f011698c <test_priority_normal_and_lower+0x836>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116975:	83 ec 04             	sub    $0x4,%esp
f0116978:	68 38 a2 13 f0       	push   $0xf013a238
f011697d:	68 63 01 00 00       	push   $0x163
f0116982:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116987:	e8 1a 98 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Old working set should be removed properly\n");

		if(addEnv->page_WS_max_size != 2 || factEnv->page_WS_max_size != 7 || helloEnv->page_WS_max_size != 5)
			panic("The programs' working set size should be doubled if full\n");

		for(int i = 0; i < 2; i++)
f011698c:	ff 45 cc             	incl   -0x34(%ebp)
f011698f:	83 7d cc 01          	cmpl   $0x1,-0x34(%ebp)
f0116993:	0f 8e 77 ff ff ff    	jle    f0116910 <test_priority_normal_and_lower+0x7ba>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116999:	c7 45 c8 00 00 00 00 	movl   $0x0,-0x38(%ebp)
f01169a0:	eb 7f                	jmp    f0116a21 <test_priority_normal_and_lower+0x8cb>
		{
			if(fact_WS[i+3] != factEnv->ptr_pageWorkingSet[i].virtual_address)
f01169a2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01169a5:	83 c0 03             	add    $0x3,%eax
f01169a8:	8b 8c 85 80 fd ff ff 	mov    -0x280(%ebp,%eax,4),%ecx
f01169af:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01169b2:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01169b5:	89 d0                	mov    %edx,%eax
f01169b7:	01 c0                	add    %eax,%eax
f01169b9:	01 d0                	add    %edx,%eax
f01169bb:	c1 e0 03             	shl    $0x3,%eax
f01169be:	01 d8                	add    %ebx,%eax
f01169c0:	83 c0 78             	add    $0x78,%eax
f01169c3:	8b 00                	mov    (%eax),%eax
f01169c5:	39 c1                	cmp    %eax,%ecx
f01169c7:	74 17                	je     f01169e0 <test_priority_normal_and_lower+0x88a>
				panic("%d Working set should be moved properly to the new one, removed pages are chosen based on replacement policy", i);
f01169c9:	ff 75 c8             	pushl  -0x38(%ebp)
f01169cc:	68 a4 a2 13 f0       	push   $0xf013a2a4
f01169d1:	68 69 01 00 00       	push   $0x169
f01169d6:	68 4d 9e 13 f0       	push   $0xf0139e4d
f01169db:	e8 c6 97 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
f01169e0:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01169e3:	83 c0 03             	add    $0x3,%eax
f01169e6:	8b 8c 85 f8 fd ff ff 	mov    -0x208(%ebp,%eax,4),%ecx
f01169ed:	8b 5d b4             	mov    -0x4c(%ebp),%ebx
f01169f0:	8b 55 c8             	mov    -0x38(%ebp),%edx
f01169f3:	89 d0                	mov    %edx,%eax
f01169f5:	01 c0                	add    %eax,%eax
f01169f7:	01 d0                	add    %edx,%eax
f01169f9:	c1 e0 03             	shl    $0x3,%eax
f01169fc:	01 d8                	add    %ebx,%eax
f01169fe:	83 e8 80             	sub    $0xffffff80,%eax
f0116a01:	8b 00                	mov    (%eax),%eax
f0116a03:	39 c1                	cmp    %eax,%ecx
f0116a05:	74 17                	je     f0116a1e <test_priority_normal_and_lower+0x8c8>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116a07:	83 ec 04             	sub    $0x4,%esp
f0116a0a:	68 38 a2 13 f0       	push   $0xf013a238
f0116a0f:	68 6c 01 00 00       	push   $0x16c
f0116a14:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116a19:	e8 88 97 fe ff       	call   f01001a6 <_panic>

			if(add_TimeStamp[i+8] != addEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 7; i++)
f0116a1e:	ff 45 c8             	incl   -0x38(%ebp)
f0116a21:	83 7d c8 06          	cmpl   $0x6,-0x38(%ebp)
f0116a25:	0f 8e 77 ff ff ff    	jle    f01169a2 <test_priority_normal_and_lower+0x84c>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116a2b:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f0116a32:	eb 7f                	jmp    f0116ab3 <test_priority_normal_and_lower+0x95d>
		{
			if(hello_WS[i+5] != helloEnv->ptr_pageWorkingSet[i].virtual_address)
f0116a34:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116a37:	83 c0 05             	add    $0x5,%eax
f0116a3a:	8b 8c 85 70 fe ff ff 	mov    -0x190(%ebp,%eax,4),%ecx
f0116a41:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116a44:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116a47:	89 d0                	mov    %edx,%eax
f0116a49:	01 c0                	add    %eax,%eax
f0116a4b:	01 d0                	add    %edx,%eax
f0116a4d:	c1 e0 03             	shl    $0x3,%eax
f0116a50:	01 d8                	add    %ebx,%eax
f0116a52:	83 c0 78             	add    $0x78,%eax
f0116a55:	8b 00                	mov    (%eax),%eax
f0116a57:	39 c1                	cmp    %eax,%ecx
f0116a59:	74 17                	je     f0116a72 <test_priority_normal_and_lower+0x91c>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116a5b:	83 ec 04             	sub    $0x4,%esp
f0116a5e:	68 38 a2 13 f0       	push   $0xf013a238
f0116a63:	68 72 01 00 00       	push   $0x172
f0116a68:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116a6d:	e8 34 97 fe ff       	call   f01001a6 <_panic>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
f0116a72:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116a75:	83 c0 05             	add    $0x5,%eax
f0116a78:	8b 8c 85 10 ff ff ff 	mov    -0xf0(%ebp,%eax,4),%ecx
f0116a7f:	8b 5d b0             	mov    -0x50(%ebp),%ebx
f0116a82:	8b 55 c4             	mov    -0x3c(%ebp),%edx
f0116a85:	89 d0                	mov    %edx,%eax
f0116a87:	01 c0                	add    %eax,%eax
f0116a89:	01 d0                	add    %edx,%eax
f0116a8b:	c1 e0 03             	shl    $0x3,%eax
f0116a8e:	01 d8                	add    %ebx,%eax
f0116a90:	83 e8 80             	sub    $0xffffff80,%eax
f0116a93:	8b 00                	mov    (%eax),%eax
f0116a95:	39 c1                	cmp    %eax,%ecx
f0116a97:	74 17                	je     f0116ab0 <test_priority_normal_and_lower+0x95a>
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
f0116a99:	83 ec 04             	sub    $0x4,%esp
f0116a9c:	68 38 a2 13 f0       	push   $0xf013a238
f0116aa1:	68 75 01 00 00       	push   $0x175
f0116aa6:	68 4d 9e 13 f0       	push   $0xf0139e4d
f0116aab:	e8 f6 96 fe ff       	call   f01001a6 <_panic>

			if(fact_TimeStamp[i+3] != factEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		for(int i = 0; i < 5; i++)
f0116ab0:	ff 45 c4             	incl   -0x3c(%ebp)
f0116ab3:	83 7d c4 04          	cmpl   $0x4,-0x3c(%ebp)
f0116ab7:	0f 8e 77 ff ff ff    	jle    f0116a34 <test_priority_normal_and_lower+0x8de>

			if(hello_TimeStamp[i+5] != helloEnv->ptr_pageWorkingSet[i].time_stamp)
				panic("Working set should be moved properly to the new one, removed pages are chosen based on replacement policy");
		}

		set_program_priority(addEnv, 5);
f0116abd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ac0:	83 ec 08             	sub    $0x8,%esp
f0116ac3:	6a 05                	push   $0x5
f0116ac5:	50                   	push   %eax
f0116ac6:	e8 fb 3a ff ff       	call   f010a5c6 <set_program_priority>
f0116acb:	83 c4 10             	add    $0x10,%esp
		set_program_priority(addEnv, 5);
f0116ace:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116ad1:	83 ec 08             	sub    $0x8,%esp
f0116ad4:	6a 05                	push   $0x5
f0116ad6:	50                   	push   %eax
f0116ad7:	e8 ea 3a ff ff       	call   f010a5c6 <set_program_priority>
f0116adc:	83 c4 10             	add    $0x10,%esp

		char command4[100] = "runall";
f0116adf:	c7 85 1c fd ff ff 72 	movl   $0x616e7572,-0x2e4(%ebp)
f0116ae6:	75 6e 61 
f0116ae9:	c7 85 20 fd ff ff 6c 	movl   $0x6c6c,-0x2e0(%ebp)
f0116af0:	6c 00 00 
f0116af3:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0116af9:	b9 17 00 00 00       	mov    $0x17,%ecx
f0116afe:	b8 00 00 00 00       	mov    $0x0,%eax
f0116b03:	89 d7                	mov    %edx,%edi
f0116b05:	f3 ab                	rep stos %eax,%es:(%edi)
		execute_command(command4);
f0116b07:	83 ec 0c             	sub    $0xc,%esp
f0116b0a:	8d 85 1c fd ff ff    	lea    -0x2e4(%ebp),%eax
f0116b10:	50                   	push   %eax
f0116b11:	e8 79 a1 fe ff       	call   f0100c8f <execute_command>
f0116b16:	83 c4 10             	add    $0x10,%esp
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
	}
}
f0116b19:	eb 10                	jmp    f0116b2b <test_priority_normal_and_lower+0x9d5>
		char command4[100] = "runall";
		execute_command(command4);
	}
	else
	{
		cprintf("\nCongratulations!! test priority 2 completed successfully.\n");
f0116b1b:	83 ec 0c             	sub    $0xc,%esp
f0116b1e:	68 14 a3 13 f0       	push   $0xf013a314
f0116b23:	e8 05 a1 fe ff       	call   f0100c2d <cprintf>
f0116b28:	83 c4 10             	add    $0x10,%esp
	}
}
f0116b2b:	90                   	nop
f0116b2c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0116b2f:	5b                   	pop    %ebx
f0116b30:	5e                   	pop    %esi
f0116b31:	5f                   	pop    %edi
f0116b32:	5d                   	pop    %ebp
f0116b33:	c3                   	ret    

f0116b34 <isKHeapPlacementStrategyNEXTFIT>:
static inline void setKHeapPlacementStrategyWORSTFIT(){_KHeapPlacementStrategy = KHP_PLACE_WORSTFIT;}

static inline uint8 isKHeapPlacementStrategyCONTALLOC(){if(_KHeapPlacementStrategy == KHP_PLACE_CONTALLOC) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyFIRSTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_FIRSTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyBESTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_BESTFIT) return 1; return 0;}
static inline uint8 isKHeapPlacementStrategyNEXTFIT(){if(_KHeapPlacementStrategy == KHP_PLACE_NEXTFIT) return 1; return 0;}
f0116b34:	55                   	push   %ebp
f0116b35:	89 e5                	mov    %esp,%ebp
f0116b37:	a1 b8 84 6e f0       	mov    0xf06e84b8,%eax
f0116b3c:	83 f8 03             	cmp    $0x3,%eax
f0116b3f:	75 04                	jne    f0116b45 <isKHeapPlacementStrategyNEXTFIT+0x11>
f0116b41:	b0 01                	mov    $0x1,%al
f0116b43:	eb 02                	jmp    f0116b47 <isKHeapPlacementStrategyNEXTFIT+0x13>
f0116b45:	b0 00                	mov    $0x0,%al
f0116b47:	5d                   	pop    %ebp
f0116b48:	c3                   	ret    

f0116b49 <test_kmalloc>:
	int c;
};


int test_kmalloc()
{
f0116b49:	55                   	push   %ebp
f0116b4a:	89 e5                	mov    %esp,%ebp
f0116b4c:	57                   	push   %edi
f0116b4d:	53                   	push   %ebx
f0116b4e:	81 ec c0 01 00 00    	sub    $0x1c0,%esp
	cprintf("==============================================\n");
f0116b54:	83 ec 0c             	sub    $0xc,%esp
f0116b57:	68 18 a4 13 f0       	push   $0xf013a418
f0116b5c:	e8 cc a0 fe ff       	call   f0100c2d <cprintf>
f0116b61:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0116b64:	83 ec 0c             	sub    $0xc,%esp
f0116b67:	68 48 a4 13 f0       	push   $0xf013a448
f0116b6c:	e8 bc a0 fe ff       	call   f0100c2d <cprintf>
f0116b71:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0116b74:	83 ec 0c             	sub    $0xc,%esp
f0116b77:	68 18 a4 13 f0       	push   $0xf013a418
f0116b7c:	e8 ac a0 fe ff       	call   f0100c2d <cprintf>
f0116b81:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0116b84:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0116b88:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0116b8c:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0116b92:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0116b98:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0116b9f:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0116ba6:	e8 25 55 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0116bab:	89 45 e0             	mov    %eax,-0x20(%ebp)

	void* ptr_allocations[20] = {0};
f0116bae:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f0116bb4:	b9 14 00 00 00       	mov    $0x14,%ecx
f0116bb9:	b8 00 00 00 00       	mov    $0x0,%eax
f0116bbe:	89 d7                	mov    %edx,%edi
f0116bc0:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//Insufficient space
		int freeFrames = sys_calculate_free_frames() ;
f0116bc2:	e8 09 55 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0116bc7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0116bca:	e8 c5 d0 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0116bcf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 sizeOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 1) ;
f0116bd2:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0116bd9:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0116bdc:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116be1:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0116be4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116be7:	ba 00 00 00 00       	mov    $0x0,%edx
f0116bec:	f7 75 d4             	divl   -0x2c(%ebp)
f0116bef:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0116bf2:	29 d0                	sub    %edx,%eax
f0116bf4:	89 c1                	mov    %eax,%ecx
f0116bf6:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0116bfd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116c02:	0f b6 d0             	movzbl %al,%edx
f0116c05:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0116c08:	01 d0                	add    %edx,%eax
f0116c0a:	48                   	dec    %eax
f0116c0b:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0116c0e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116c11:	ba 00 00 00 00       	mov    $0x0,%edx
f0116c16:	f7 75 cc             	divl   -0x34(%ebp)
f0116c19:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0116c1c:	29 d0                	sub    %edx,%eax
f0116c1e:	01 c1                	add    %eax,%ecx
f0116c20:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0116c27:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116c2c:	0f b6 c0             	movzbl %al,%eax
f0116c2f:	c1 e0 04             	shl    $0x4,%eax
f0116c32:	89 c2                	mov    %eax,%edx
f0116c34:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0116c37:	01 d0                	add    %edx,%eax
f0116c39:	48                   	dec    %eax
f0116c3a:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0116c3d:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116c40:	ba 00 00 00 00       	mov    $0x0,%edx
f0116c45:	f7 75 c4             	divl   -0x3c(%ebp)
f0116c48:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0116c4b:	29 d0                	sub    %edx,%eax
f0116c4d:	01 c8                	add    %ecx,%eax
f0116c4f:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f0116c54:	29 c2                	sub    %eax,%edx
f0116c56:	89 d0                	mov    %edx,%eax
f0116c58:	89 45 bc             	mov    %eax,-0x44(%ebp)
		ptr_allocations[0] = kmalloc(sizeOfKHeap);
f0116c5b:	83 ec 0c             	sub    $0xc,%esp
f0116c5e:	ff 75 bc             	pushl  -0x44(%ebp)
f0116c61:	e8 7e 07 ff ff       	call   f01073e4 <kmalloc>
f0116c66:	83 c4 10             	add    $0x10,%esp
f0116c69:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Allocating insufficient space: should return NULL");
f0116c6f:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116c75:	85 c0                	test   %eax,%eax
f0116c77:	74 14                	je     f0116c8d <test_kmalloc+0x144>
f0116c79:	83 ec 04             	sub    $0x4,%esp
f0116c7c:	68 a4 a4 13 f0       	push   $0xf013a4a4
f0116c81:	6a 40                	push   $0x40
f0116c83:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0116c88:	e8 19 95 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116c8d:	e8 02 d0 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0116c92:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116c95:	74 14                	je     f0116cab <test_kmalloc+0x162>
f0116c97:	83 ec 04             	sub    $0x4,%esp
f0116c9a:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0116c9f:	6a 41                	push   $0x41
f0116ca1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0116ca6:	e8 fb 94 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116cab:	e8 20 54 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0116cb0:	89 c2                	mov    %eax,%edx
f0116cb2:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0116cb5:	39 c2                	cmp    %eax,%edx
f0116cb7:	74 14                	je     f0116ccd <test_kmalloc+0x184>
f0116cb9:	83 ec 04             	sub    $0x4,%esp
f0116cbc:	68 58 a5 13 f0       	push   $0xf013a558
f0116cc1:	6a 42                	push   $0x42
f0116cc3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0116cc8:	e8 d9 94 fe ff       	call   f01001a6 <_panic>

		cprintf("\nkmalloc: current evaluation = 10%");
f0116ccd:	83 ec 0c             	sub    $0xc,%esp
f0116cd0:	68 98 a5 13 f0       	push   $0xf013a598
f0116cd5:	e8 53 9f fe ff       	call   f0100c2d <cprintf>
f0116cda:	83 c4 10             	add    $0x10,%esp
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116cdd:	e8 ee 53 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0116ce2:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116ce5:	e8 aa cf fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0116cea:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0116ced:	83 ec 0c             	sub    $0xc,%esp
f0116cf0:	68 00 fc 1f 00       	push   $0x1ffc00
f0116cf5:	e8 ea 06 ff ff       	call   f01073e4 <kmalloc>
f0116cfa:	83 c4 10             	add    $0x10,%esp
f0116cfd:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116d03:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0116d09:	89 c1                	mov    %eax,%ecx
f0116d0b:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0116d12:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0116d15:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116d1a:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0116d1d:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116d20:	ba 00 00 00 00       	mov    $0x0,%edx
f0116d25:	f7 75 b8             	divl   -0x48(%ebp)
f0116d28:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0116d2b:	29 d0                	sub    %edx,%eax
f0116d2d:	89 c3                	mov    %eax,%ebx
f0116d2f:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0116d36:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116d3b:	0f b6 d0             	movzbl %al,%edx
f0116d3e:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0116d41:	01 d0                	add    %edx,%eax
f0116d43:	48                   	dec    %eax
f0116d44:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0116d47:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d4a:	ba 00 00 00 00       	mov    $0x0,%edx
f0116d4f:	f7 75 b0             	divl   -0x50(%ebp)
f0116d52:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0116d55:	29 d0                	sub    %edx,%eax
f0116d57:	01 c3                	add    %eax,%ebx
f0116d59:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0116d60:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116d65:	0f b6 c0             	movzbl %al,%eax
f0116d68:	c1 e0 04             	shl    $0x4,%eax
f0116d6b:	89 c2                	mov    %eax,%edx
f0116d6d:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0116d70:	01 d0                	add    %edx,%eax
f0116d72:	48                   	dec    %eax
f0116d73:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0116d76:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d79:	ba 00 00 00 00       	mov    $0x0,%edx
f0116d7e:	f7 75 a8             	divl   -0x58(%ebp)
f0116d81:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0116d84:	29 d0                	sub    %edx,%eax
f0116d86:	01 d8                	add    %ebx,%eax
f0116d88:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0116d8d:	39 c1                	cmp    %eax,%ecx
f0116d8f:	74 14                	je     f0116da5 <test_kmalloc+0x25c>
f0116d91:	83 ec 04             	sub    $0x4,%esp
f0116d94:	68 bc a5 13 f0       	push   $0xf013a5bc
f0116d99:	6a 49                	push   $0x49
f0116d9b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0116da0:	e8 01 94 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116da5:	e8 ea ce fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0116daa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116dad:	74 14                	je     f0116dc3 <test_kmalloc+0x27a>
f0116daf:	83 ec 04             	sub    $0x4,%esp
f0116db2:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0116db7:	6a 4a                	push   $0x4a
f0116db9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0116dbe:	e8 e3 93 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116dc3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116dc6:	e8 05 53 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0116dcb:	29 c3                	sub    %eax,%ebx
f0116dcd:	89 d8                	mov    %ebx,%eax
f0116dcf:	3d 00 02 00 00       	cmp    $0x200,%eax
f0116dd4:	74 14                	je     f0116dea <test_kmalloc+0x2a1>
f0116dd6:	83 ec 04             	sub    $0x4,%esp
f0116dd9:	68 58 a5 13 f0       	push   $0xf013a558
f0116dde:	6a 4b                	push   $0x4b
f0116de0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0116de5:	e8 bc 93 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0116dea:	e8 e1 52 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0116def:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116df2:	e8 9d ce fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0116df7:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0116dfa:	83 ec 0c             	sub    $0xc,%esp
f0116dfd:	68 00 fc 1f 00       	push   $0x1ffc00
f0116e02:	e8 dd 05 ff ff       	call   f01073e4 <kmalloc>
f0116e07:	83 c4 10             	add    $0x10,%esp
f0116e0a:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116e10:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0116e16:	89 c1                	mov    %eax,%ecx
f0116e18:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0116e1f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0116e22:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116e27:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0116e2a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0116e2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0116e32:	f7 75 a0             	divl   -0x60(%ebp)
f0116e35:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0116e38:	29 d0                	sub    %edx,%eax
f0116e3a:	89 c3                	mov    %eax,%ebx
f0116e3c:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0116e43:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116e48:	0f b6 d0             	movzbl %al,%edx
f0116e4b:	8b 45 98             	mov    -0x68(%ebp),%eax
f0116e4e:	01 d0                	add    %edx,%eax
f0116e50:	48                   	dec    %eax
f0116e51:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0116e54:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0116e57:	ba 00 00 00 00       	mov    $0x0,%edx
f0116e5c:	f7 75 98             	divl   -0x68(%ebp)
f0116e5f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0116e62:	29 d0                	sub    %edx,%eax
f0116e64:	01 c3                	add    %eax,%ebx
f0116e66:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0116e6d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116e72:	0f b6 c0             	movzbl %al,%eax
f0116e75:	c1 e0 04             	shl    $0x4,%eax
f0116e78:	89 c2                	mov    %eax,%edx
f0116e7a:	8b 45 90             	mov    -0x70(%ebp),%eax
f0116e7d:	01 d0                	add    %edx,%eax
f0116e7f:	48                   	dec    %eax
f0116e80:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0116e83:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0116e86:	ba 00 00 00 00       	mov    $0x0,%edx
f0116e8b:	f7 75 90             	divl   -0x70(%ebp)
f0116e8e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0116e91:	29 d0                	sub    %edx,%eax
f0116e93:	01 d8                	add    %ebx,%eax
f0116e95:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0116e9a:	39 c1                	cmp    %eax,%ecx
f0116e9c:	74 14                	je     f0116eb2 <test_kmalloc+0x369>
f0116e9e:	83 ec 04             	sub    $0x4,%esp
f0116ea1:	68 bc a5 13 f0       	push   $0xf013a5bc
f0116ea6:	6a 51                	push   $0x51
f0116ea8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0116ead:	e8 f4 92 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116eb2:	e8 dd cd fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0116eb7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116eba:	74 14                	je     f0116ed0 <test_kmalloc+0x387>
f0116ebc:	83 ec 04             	sub    $0x4,%esp
f0116ebf:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0116ec4:	6a 52                	push   $0x52
f0116ec6:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0116ecb:	e8 d6 92 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116ed0:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116ed3:	e8 f8 51 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0116ed8:	29 c3                	sub    %eax,%ebx
f0116eda:	89 d8                	mov    %ebx,%eax
f0116edc:	3d 00 02 00 00       	cmp    $0x200,%eax
f0116ee1:	74 14                	je     f0116ef7 <test_kmalloc+0x3ae>
f0116ee3:	83 ec 04             	sub    $0x4,%esp
f0116ee6:	68 58 a5 13 f0       	push   $0xf013a558
f0116eeb:	6a 53                	push   $0x53
f0116eed:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0116ef2:	e8 af 92 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0116ef7:	e8 d4 51 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0116efc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0116eff:	e8 90 cd fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0116f04:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0116f07:	83 ec 0c             	sub    $0xc,%esp
f0116f0a:	68 00 08 00 00       	push   $0x800
f0116f0f:	e8 d0 04 ff ff       	call   f01073e4 <kmalloc>
f0116f14:	83 c4 10             	add    $0x10,%esp
f0116f17:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0116f1d:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0116f23:	89 c1                	mov    %eax,%ecx
f0116f25:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0116f2c:	8b 45 88             	mov    -0x78(%ebp),%eax
f0116f2f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0116f34:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0116f37:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0116f3a:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f3f:	f7 75 88             	divl   -0x78(%ebp)
f0116f42:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0116f45:	29 d0                	sub    %edx,%eax
f0116f47:	89 c3                	mov    %eax,%ebx
f0116f49:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0116f50:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116f55:	0f b6 d0             	movzbl %al,%edx
f0116f58:	8b 45 80             	mov    -0x80(%ebp),%eax
f0116f5b:	01 d0                	add    %edx,%eax
f0116f5d:	48                   	dec    %eax
f0116f5e:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0116f64:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0116f6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0116f6f:	f7 75 80             	divl   -0x80(%ebp)
f0116f72:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0116f78:	29 d0                	sub    %edx,%eax
f0116f7a:	01 c3                	add    %eax,%ebx
f0116f7c:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0116f83:	10 00 00 
f0116f86:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0116f8b:	0f b6 c0             	movzbl %al,%eax
f0116f8e:	c1 e0 04             	shl    $0x4,%eax
f0116f91:	89 c2                	mov    %eax,%edx
f0116f93:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0116f99:	01 d0                	add    %edx,%eax
f0116f9b:	48                   	dec    %eax
f0116f9c:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0116fa2:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0116fa8:	ba 00 00 00 00       	mov    $0x0,%edx
f0116fad:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0116fb3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0116fb9:	29 d0                	sub    %edx,%eax
f0116fbb:	01 d8                	add    %ebx,%eax
f0116fbd:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0116fc2:	39 c1                	cmp    %eax,%ecx
f0116fc4:	74 14                	je     f0116fda <test_kmalloc+0x491>
f0116fc6:	83 ec 04             	sub    $0x4,%esp
f0116fc9:	68 bc a5 13 f0       	push   $0xf013a5bc
f0116fce:	6a 59                	push   $0x59
f0116fd0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0116fd5:	e8 cc 91 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0116fda:	e8 b5 cc fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0116fdf:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0116fe2:	74 14                	je     f0116ff8 <test_kmalloc+0x4af>
f0116fe4:	83 ec 04             	sub    $0x4,%esp
f0116fe7:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0116fec:	6a 5a                	push   $0x5a
f0116fee:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0116ff3:	e8 ae 91 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0116ff8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0116ffb:	e8 d0 50 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0117000:	29 c3                	sub    %eax,%ebx
f0117002:	89 d8                	mov    %ebx,%eax
f0117004:	83 f8 01             	cmp    $0x1,%eax
f0117007:	74 14                	je     f011701d <test_kmalloc+0x4d4>
f0117009:	83 ec 04             	sub    $0x4,%esp
f011700c:	68 58 a5 13 f0       	push   $0xf013a558
f0117011:	6a 5b                	push   $0x5b
f0117013:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117018:	e8 89 91 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011701d:	e8 ae 50 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0117022:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117025:	e8 6a cc fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011702a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011702d:	83 ec 0c             	sub    $0xc,%esp
f0117030:	68 00 08 00 00       	push   $0x800
f0117035:	e8 aa 03 ff ff       	call   f01073e4 <kmalloc>
f011703a:	83 c4 10             	add    $0x10,%esp
f011703d:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117043:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0117049:	89 c1                	mov    %eax,%ecx
f011704b:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0117052:	10 00 00 
f0117055:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011705b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117060:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0117066:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011706c:	ba 00 00 00 00       	mov    $0x0,%edx
f0117071:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0117077:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011707d:	29 d0                	sub    %edx,%eax
f011707f:	89 c3                	mov    %eax,%ebx
f0117081:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0117088:	10 00 00 
f011708b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117090:	0f b6 d0             	movzbl %al,%edx
f0117093:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0117099:	01 d0                	add    %edx,%eax
f011709b:	48                   	dec    %eax
f011709c:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01170a2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01170a8:	ba 00 00 00 00       	mov    $0x0,%edx
f01170ad:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01170b3:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01170b9:	29 d0                	sub    %edx,%eax
f01170bb:	01 c3                	add    %eax,%ebx
f01170bd:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01170c4:	10 00 00 
f01170c7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01170cc:	0f b6 c0             	movzbl %al,%eax
f01170cf:	c1 e0 04             	shl    $0x4,%eax
f01170d2:	89 c2                	mov    %eax,%edx
f01170d4:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01170da:	01 d0                	add    %edx,%eax
f01170dc:	48                   	dec    %eax
f01170dd:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01170e3:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01170e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01170ee:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01170f4:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01170fa:	29 d0                	sub    %edx,%eax
f01170fc:	01 d8                	add    %ebx,%eax
f01170fe:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0117103:	39 c1                	cmp    %eax,%ecx
f0117105:	74 14                	je     f011711b <test_kmalloc+0x5d2>
f0117107:	83 ec 04             	sub    $0x4,%esp
f011710a:	68 bc a5 13 f0       	push   $0xf013a5bc
f011710f:	6a 61                	push   $0x61
f0117111:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117116:	e8 8b 90 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011711b:	e8 74 cb fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0117120:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117123:	74 14                	je     f0117139 <test_kmalloc+0x5f0>
f0117125:	83 ec 04             	sub    $0x4,%esp
f0117128:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011712d:	6a 62                	push   $0x62
f011712f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117134:	e8 6d 90 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117139:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011713c:	e8 8f 4f ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0117141:	29 c3                	sub    %eax,%ebx
f0117143:	89 d8                	mov    %ebx,%eax
f0117145:	83 f8 01             	cmp    $0x1,%eax
f0117148:	74 14                	je     f011715e <test_kmalloc+0x615>
f011714a:	83 ec 04             	sub    $0x4,%esp
f011714d:	68 58 a5 13 f0       	push   $0xf013a558
f0117152:	6a 63                	push   $0x63
f0117154:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117159:	e8 48 90 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011715e:	e8 6d 4f ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0117163:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117166:	e8 29 cb fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011716b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011716e:	83 ec 0c             	sub    $0xc,%esp
f0117171:	68 00 1c 00 00       	push   $0x1c00
f0117176:	e8 69 02 ff ff       	call   f01073e4 <kmalloc>
f011717b:	83 c4 10             	add    $0x10,%esp
f011717e:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117184:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011718a:	89 c1                	mov    %eax,%ecx
f011718c:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0117193:	10 00 00 
f0117196:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011719c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01171a1:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f01171a7:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01171ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01171b2:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f01171b8:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01171be:	29 d0                	sub    %edx,%eax
f01171c0:	89 c3                	mov    %eax,%ebx
f01171c2:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01171c9:	10 00 00 
f01171cc:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01171d1:	0f b6 d0             	movzbl %al,%edx
f01171d4:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01171da:	01 d0                	add    %edx,%eax
f01171dc:	48                   	dec    %eax
f01171dd:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01171e3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01171e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01171ee:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01171f4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01171fa:	29 d0                	sub    %edx,%eax
f01171fc:	01 c3                	add    %eax,%ebx
f01171fe:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0117205:	10 00 00 
f0117208:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011720d:	0f b6 c0             	movzbl %al,%eax
f0117210:	c1 e0 04             	shl    $0x4,%eax
f0117213:	89 c2                	mov    %eax,%edx
f0117215:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011721b:	01 d0                	add    %edx,%eax
f011721d:	48                   	dec    %eax
f011721e:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0117224:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011722a:	ba 00 00 00 00       	mov    $0x0,%edx
f011722f:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f0117235:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011723b:	29 d0                	sub    %edx,%eax
f011723d:	01 d8                	add    %ebx,%eax
f011723f:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0117244:	39 c1                	cmp    %eax,%ecx
f0117246:	74 14                	je     f011725c <test_kmalloc+0x713>
f0117248:	83 ec 04             	sub    $0x4,%esp
f011724b:	68 bc a5 13 f0       	push   $0xf013a5bc
f0117250:	6a 69                	push   $0x69
f0117252:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117257:	e8 4a 8f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011725c:	e8 33 ca fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0117261:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117264:	74 14                	je     f011727a <test_kmalloc+0x731>
f0117266:	83 ec 04             	sub    $0x4,%esp
f0117269:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011726e:	6a 6a                	push   $0x6a
f0117270:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117275:	e8 2c 8f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011727a:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011727d:	e8 4e 4e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0117282:	29 c3                	sub    %eax,%ebx
f0117284:	89 d8                	mov    %ebx,%eax
f0117286:	83 f8 02             	cmp    $0x2,%eax
f0117289:	74 14                	je     f011729f <test_kmalloc+0x756>
f011728b:	83 ec 04             	sub    $0x4,%esp
f011728e:	68 58 a5 13 f0       	push   $0xf013a558
f0117293:	6a 6b                	push   $0x6b
f0117295:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011729a:	e8 07 8f fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011729f:	e8 2c 4e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01172a4:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01172a7:	e8 e8 c9 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01172ac:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01172af:	83 ec 0c             	sub    $0xc,%esp
f01172b2:	68 00 fc 2f 00       	push   $0x2ffc00
f01172b7:	e8 28 01 ff ff       	call   f01073e4 <kmalloc>
f01172bc:	83 c4 10             	add    $0x10,%esp
f01172bf:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01172c5:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01172cb:	89 c1                	mov    %eax,%ecx
f01172cd:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01172d4:	10 00 00 
f01172d7:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01172dd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01172e2:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01172e8:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01172ee:	ba 00 00 00 00       	mov    $0x0,%edx
f01172f3:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01172f9:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01172ff:	29 d0                	sub    %edx,%eax
f0117301:	89 c3                	mov    %eax,%ebx
f0117303:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f011730a:	10 00 00 
f011730d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117312:	0f b6 d0             	movzbl %al,%edx
f0117315:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011731b:	01 d0                	add    %edx,%eax
f011731d:	48                   	dec    %eax
f011731e:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0117324:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011732a:	ba 00 00 00 00       	mov    $0x0,%edx
f011732f:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f0117335:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011733b:	29 d0                	sub    %edx,%eax
f011733d:	01 c3                	add    %eax,%ebx
f011733f:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0117346:	10 00 00 
f0117349:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011734e:	0f b6 c0             	movzbl %al,%eax
f0117351:	c1 e0 04             	shl    $0x4,%eax
f0117354:	89 c2                	mov    %eax,%edx
f0117356:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011735c:	01 d0                	add    %edx,%eax
f011735e:	48                   	dec    %eax
f011735f:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f0117365:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011736b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117370:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0117376:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011737c:	29 d0                	sub    %edx,%eax
f011737e:	01 d8                	add    %ebx,%eax
f0117380:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0117385:	39 c1                	cmp    %eax,%ecx
f0117387:	74 14                	je     f011739d <test_kmalloc+0x854>
f0117389:	83 ec 04             	sub    $0x4,%esp
f011738c:	68 bc a5 13 f0       	push   $0xf013a5bc
f0117391:	6a 71                	push   $0x71
f0117393:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117398:	e8 09 8e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011739d:	e8 f2 c8 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01173a2:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01173a5:	74 14                	je     f01173bb <test_kmalloc+0x872>
f01173a7:	83 ec 04             	sub    $0x4,%esp
f01173aa:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01173af:	6a 72                	push   $0x72
f01173b1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01173b6:	e8 eb 8d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01173bb:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01173be:	e8 0d 4d ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01173c3:	29 c3                	sub    %eax,%ebx
f01173c5:	89 d8                	mov    %ebx,%eax
f01173c7:	3d 00 03 00 00       	cmp    $0x300,%eax
f01173cc:	74 14                	je     f01173e2 <test_kmalloc+0x899>
f01173ce:	83 ec 04             	sub    $0x4,%esp
f01173d1:	68 58 a5 13 f0       	push   $0xf013a558
f01173d6:	6a 73                	push   $0x73
f01173d8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01173dd:	e8 c4 8d fe ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01173e2:	e8 e9 4c ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01173e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01173ea:	e8 a5 c8 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01173ef:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01173f2:	83 ec 0c             	sub    $0xc,%esp
f01173f5:	68 00 fc 5f 00       	push   $0x5ffc00
f01173fa:	e8 e5 ff fe ff       	call   f01073e4 <kmalloc>
f01173ff:	83 c4 10             	add    $0x10,%esp
f0117402:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0117408:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011740e:	89 c1                	mov    %eax,%ecx
f0117410:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f0117417:	10 00 00 
f011741a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0117420:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117425:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f011742b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117431:	ba 00 00 00 00       	mov    $0x0,%edx
f0117436:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f011743c:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0117442:	29 d0                	sub    %edx,%eax
f0117444:	89 c3                	mov    %eax,%ebx
f0117446:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011744d:	10 00 00 
f0117450:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117455:	0f b6 d0             	movzbl %al,%edx
f0117458:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011745e:	01 d0                	add    %edx,%eax
f0117460:	48                   	dec    %eax
f0117461:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0117467:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011746d:	ba 00 00 00 00       	mov    $0x0,%edx
f0117472:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0117478:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011747e:	29 d0                	sub    %edx,%eax
f0117480:	01 c3                	add    %eax,%ebx
f0117482:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0117489:	10 00 00 
f011748c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117491:	0f b6 c0             	movzbl %al,%eax
f0117494:	c1 e0 04             	shl    $0x4,%eax
f0117497:	89 c2                	mov    %eax,%edx
f0117499:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011749f:	01 d0                	add    %edx,%eax
f01174a1:	48                   	dec    %eax
f01174a2:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f01174a8:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01174ae:	ba 00 00 00 00       	mov    $0x0,%edx
f01174b3:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f01174b9:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01174bf:	29 d0                	sub    %edx,%eax
f01174c1:	01 d8                	add    %ebx,%eax
f01174c3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01174c8:	39 c1                	cmp    %eax,%ecx
f01174ca:	74 14                	je     f01174e0 <test_kmalloc+0x997>
f01174cc:	83 ec 04             	sub    $0x4,%esp
f01174cf:	68 bc a5 13 f0       	push   $0xf013a5bc
f01174d4:	6a 79                	push   $0x79
f01174d6:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01174db:	e8 c6 8c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01174e0:	e8 af c7 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01174e5:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01174e8:	74 14                	je     f01174fe <test_kmalloc+0x9b5>
f01174ea:	83 ec 04             	sub    $0x4,%esp
f01174ed:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01174f2:	6a 7a                	push   $0x7a
f01174f4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01174f9:	e8 a8 8c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01174fe:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0117501:	e8 ca 4b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0117506:	29 c3                	sub    %eax,%ebx
f0117508:	89 d8                	mov    %ebx,%eax
f011750a:	3d 00 06 00 00       	cmp    $0x600,%eax
f011750f:	74 14                	je     f0117525 <test_kmalloc+0x9dc>
f0117511:	83 ec 04             	sub    $0x4,%esp
f0117514:	68 58 a5 13 f0       	push   $0xf013a558
f0117519:	6a 7b                	push   $0x7b
f011751b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117520:	e8 81 8c fe ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0117525:	e8 a6 4b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011752a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011752d:	e8 62 c7 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0117532:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0117535:	83 ec 0c             	sub    $0xc,%esp
f0117538:	68 00 38 00 00       	push   $0x3800
f011753d:	e8 a2 fe fe ff       	call   f01073e4 <kmalloc>
f0117542:	83 c4 10             	add    $0x10,%esp
f0117545:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011754b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117551:	89 c1                	mov    %eax,%ecx
f0117553:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011755a:	10 00 00 
f011755d:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0117563:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117568:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011756e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117574:	ba 00 00 00 00       	mov    $0x0,%edx
f0117579:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011757f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0117585:	29 d0                	sub    %edx,%eax
f0117587:	89 c3                	mov    %eax,%ebx
f0117589:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0117590:	10 00 00 
f0117593:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117598:	0f b6 d0             	movzbl %al,%edx
f011759b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01175a1:	01 d0                	add    %edx,%eax
f01175a3:	48                   	dec    %eax
f01175a4:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01175aa:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01175b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01175b5:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f01175bb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01175c1:	29 d0                	sub    %edx,%eax
f01175c3:	01 c3                	add    %eax,%ebx
f01175c5:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f01175cc:	10 00 00 
f01175cf:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01175d4:	0f b6 c0             	movzbl %al,%eax
f01175d7:	c1 e0 04             	shl    $0x4,%eax
f01175da:	89 c2                	mov    %eax,%edx
f01175dc:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f01175e2:	01 d0                	add    %edx,%eax
f01175e4:	48                   	dec    %eax
f01175e5:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f01175eb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01175f1:	ba 00 00 00 00       	mov    $0x0,%edx
f01175f6:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f01175fc:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0117602:	29 d0                	sub    %edx,%eax
f0117604:	01 d8                	add    %ebx,%eax
f0117606:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011760b:	39 c1                	cmp    %eax,%ecx
f011760d:	74 17                	je     f0117626 <test_kmalloc+0xadd>
f011760f:	83 ec 04             	sub    $0x4,%esp
f0117612:	68 bc a5 13 f0       	push   $0xf013a5bc
f0117617:	68 81 00 00 00       	push   $0x81
f011761c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117621:	e8 80 8b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117626:	e8 69 c6 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011762b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011762e:	74 17                	je     f0117647 <test_kmalloc+0xafe>
f0117630:	83 ec 04             	sub    $0x4,%esp
f0117633:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0117638:	68 82 00 00 00       	push   $0x82
f011763d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117642:	e8 5f 8b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117647:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f011764a:	e8 81 4a ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011764f:	29 c3                	sub    %eax,%ebx
f0117651:	89 d8                	mov    %ebx,%eax
f0117653:	83 f8 04             	cmp    $0x4,%eax
f0117656:	74 17                	je     f011766f <test_kmalloc+0xb26>
f0117658:	83 ec 04             	sub    $0x4,%esp
f011765b:	68 58 a5 13 f0       	push   $0xf013a558
f0117660:	68 83 00 00 00       	push   $0x83
f0117665:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011766a:	e8 37 8b fe ff       	call   f01001a6 <_panic>

		cprintf("\b\b\b50%");
f011766f:	83 ec 0c             	sub    $0xc,%esp
f0117672:	68 22 a6 13 f0       	push   $0xf013a622
f0117677:	e8 b1 95 fe ff       	call   f0100c2d <cprintf>
f011767c:	83 c4 10             	add    $0x10,%esp
		//Checking read/write on the allocated spaces
		{
			freeFrames = sys_calculate_free_frames() ;
f011767f:	e8 4c 4a ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0117684:	89 45 dc             	mov    %eax,-0x24(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0117687:	e8 08 c6 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011768c:	89 45 d8             	mov    %eax,-0x28(%ebp)

			//Write values
			//In 1st 2 MB
			lastIndexOfByte = (2*Mega-kilo)/sizeof(char) - 1;
f011768f:	c7 85 f8 fe ff ff ff 	movl   $0x1ffbff,-0x108(%ebp)
f0117696:	fb 1f 00 
			byteArr = (char *) ptr_allocations[0];
f0117699:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011769f:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
			byteArr[0] = minByte ;
f01176a5:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01176ab:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01176ae:	88 10                	mov    %dl,(%eax)
			byteArr[lastIndexOfByte] = maxByte ;
f01176b0:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f01176b6:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01176bc:	01 c2                	add    %eax,%edx
f01176be:	8a 45 f2             	mov    -0xe(%ebp),%al
f01176c1:	88 02                	mov    %al,(%edx)

			//In 2nd 2 MB
			shortArr = (short *) ptr_allocations[1];
f01176c3:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f01176c9:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
			lastIndexOfShort = (2*Mega-kilo)/sizeof(short) - 1;
f01176cf:	c7 85 ec fe ff ff ff 	movl   $0xffdff,-0x114(%ebp)
f01176d6:	fd 0f 00 
			shortArr[0] = minShort;
f01176d9:	8b 95 f0 fe ff ff    	mov    -0x110(%ebp),%edx
f01176df:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01176e2:	66 89 02             	mov    %ax,(%edx)
			shortArr[lastIndexOfShort] = maxShort;
f01176e5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01176eb:	01 c0                	add    %eax,%eax
f01176ed:	89 c2                	mov    %eax,%edx
f01176ef:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01176f5:	01 c2                	add    %eax,%edx
f01176f7:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01176fb:	66 89 02             	mov    %ax,(%edx)

			//In next 2 KB
			intArr = (int *) ptr_allocations[2];
f01176fe:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0117704:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
			lastIndexOfInt = (2*kilo)/sizeof(int) - 1;
f011770a:	c7 85 e4 fe ff ff ff 	movl   $0x1ff,-0x11c(%ebp)
f0117711:	01 00 00 
			intArr[0] = minInt;
f0117714:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011771a:	8b 55 e8             	mov    -0x18(%ebp),%edx
f011771d:	89 10                	mov    %edx,(%eax)
			intArr[lastIndexOfInt] = maxInt;
f011771f:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0117725:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f011772c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0117732:	01 c2                	add    %eax,%edx
f0117734:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117737:	89 02                	mov    %eax,(%edx)

			//In 7 KB
			structArr = (struct MyStruct *) ptr_allocations[4];
f0117739:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011773f:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
			lastIndexOfStruct = (7*kilo)/sizeof(struct MyStruct) - 1;
f0117745:	c7 85 dc fe ff ff 7f 	movl   $0x37f,-0x124(%ebp)
f011774c:	03 00 00 
			structArr[0].a = minByte; structArr[0].b = minShort; structArr[0].c = minInt;
f011774f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117755:	8a 55 f3             	mov    -0xd(%ebp),%dl
f0117758:	88 10                	mov    %dl,(%eax)
f011775a:	8b 95 e0 fe ff ff    	mov    -0x120(%ebp),%edx
f0117760:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0117763:	66 89 42 02          	mov    %ax,0x2(%edx)
f0117767:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011776d:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0117770:	89 50 04             	mov    %edx,0x4(%eax)
			structArr[lastIndexOfStruct].a = maxByte; structArr[lastIndexOfStruct].b = maxShort; structArr[lastIndexOfStruct].c = maxInt;
f0117773:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117779:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117780:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117786:	01 c2                	add    %eax,%edx
f0117788:	8a 45 f2             	mov    -0xe(%ebp),%al
f011778b:	88 02                	mov    %al,(%edx)
f011778d:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117793:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011779a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01177a0:	01 c2                	add    %eax,%edx
f01177a2:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f01177a6:	66 89 42 02          	mov    %ax,0x2(%edx)
f01177aa:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01177b0:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01177b7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01177bd:	01 c2                	add    %eax,%edx
f01177bf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01177c2:	89 42 04             	mov    %eax,0x4(%edx)

			//In 6 MB
			lastIndexOfByte2 = (6*Mega-kilo)/sizeof(char) - 1;
f01177c5:	c7 85 d8 fe ff ff ff 	movl   $0x5ffbff,-0x128(%ebp)
f01177cc:	fb 5f 00 
			byteArr2 = (char *) ptr_allocations[6];
f01177cf:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01177d5:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
			byteArr2[0] = minByte ;
f01177db:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01177e1:	8a 55 f3             	mov    -0xd(%ebp),%dl
f01177e4:	88 10                	mov    %dl,(%eax)
			byteArr2[lastIndexOfByte2 / 2] = maxByte / 2;
f01177e6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01177ec:	89 c2                	mov    %eax,%edx
f01177ee:	c1 ea 1f             	shr    $0x1f,%edx
f01177f1:	01 d0                	add    %edx,%eax
f01177f3:	d1 f8                	sar    %eax
f01177f5:	89 c2                	mov    %eax,%edx
f01177f7:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01177fd:	01 c2                	add    %eax,%edx
f01177ff:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117802:	88 c1                	mov    %al,%cl
f0117804:	c0 e9 07             	shr    $0x7,%cl
f0117807:	01 c8                	add    %ecx,%eax
f0117809:	d0 f8                	sar    %al
f011780b:	88 02                	mov    %al,(%edx)
			byteArr2[lastIndexOfByte2] = maxByte ;
f011780d:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0117813:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117819:	01 c2                	add    %eax,%edx
f011781b:	8a 45 f2             	mov    -0xe(%ebp),%al
f011781e:	88 02                	mov    %al,(%edx)

			//In 14 KB
			shortArr2 = (short *) ptr_allocations[7];
f0117820:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117826:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
			lastIndexOfShort2 = (14*kilo)/sizeof(short) - 1;
f011782c:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0117833:	1b 00 00 
			shortArr2[0] = minShort;
f0117836:	8b 95 d0 fe ff ff    	mov    -0x130(%ebp),%edx
f011783c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011783f:	66 89 02             	mov    %ax,(%edx)
			shortArr2[lastIndexOfShort2] = maxShort;
f0117842:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117848:	01 c0                	add    %eax,%eax
f011784a:	89 c2                	mov    %eax,%edx
f011784c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117852:	01 c2                	add    %eax,%edx
f0117854:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f0117858:	66 89 02             	mov    %ax,(%edx)

			//Read values: check that the values are successfully written
			if (byteArr[0] 	!= minByte 	|| byteArr[lastIndexOfByte] 	!= maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f011785b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117861:	8a 00                	mov    (%eax),%al
f0117863:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117866:	75 15                	jne    f011787d <test_kmalloc+0xd34>
f0117868:	8b 95 f8 fe ff ff    	mov    -0x108(%ebp),%edx
f011786e:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0117874:	01 d0                	add    %edx,%eax
f0117876:	8a 00                	mov    (%eax),%al
f0117878:	3a 45 f2             	cmp    -0xe(%ebp),%al
f011787b:	74 17                	je     f0117894 <test_kmalloc+0xd4b>
f011787d:	83 ec 04             	sub    $0x4,%esp
f0117880:	68 2c a6 13 f0       	push   $0xf013a62c
f0117885:	68 b2 00 00 00       	push   $0xb2
f011788a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011788f:	e8 12 89 fe ff       	call   f01001a6 <_panic>
			if (shortArr[0] != minShort || shortArr[lastIndexOfShort] 	!= maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117894:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011789a:	66 8b 00             	mov    (%eax),%ax
f011789d:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f01178a1:	75 1b                	jne    f01178be <test_kmalloc+0xd75>
f01178a3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01178a9:	01 c0                	add    %eax,%eax
f01178ab:	89 c2                	mov    %eax,%edx
f01178ad:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01178b3:	01 d0                	add    %edx,%eax
f01178b5:	66 8b 00             	mov    (%eax),%ax
f01178b8:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f01178bc:	74 17                	je     f01178d5 <test_kmalloc+0xd8c>
f01178be:	83 ec 04             	sub    $0x4,%esp
f01178c1:	68 2c a6 13 f0       	push   $0xf013a62c
f01178c6:	68 b3 00 00 00       	push   $0xb3
f01178cb:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01178d0:	e8 d1 88 fe ff       	call   f01001a6 <_panic>
			if (intArr[0] 	!= minInt 	|| intArr[lastIndexOfInt] 		!= maxInt) panic("Wrong allocation: stored values are wrongly changed!");
f01178d5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01178db:	8b 00                	mov    (%eax),%eax
f01178dd:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01178e0:	75 1c                	jne    f01178fe <test_kmalloc+0xdb5>
f01178e2:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01178e8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01178ef:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01178f5:	01 d0                	add    %edx,%eax
f01178f7:	8b 00                	mov    (%eax),%eax
f01178f9:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01178fc:	74 17                	je     f0117915 <test_kmalloc+0xdcc>
f01178fe:	83 ec 04             	sub    $0x4,%esp
f0117901:	68 2c a6 13 f0       	push   $0xf013a62c
f0117906:	68 b4 00 00 00       	push   $0xb4
f011790b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117910:	e8 91 88 fe ff       	call   f01001a6 <_panic>

			if (structArr[0].a != minByte 	|| structArr[lastIndexOfStruct].a != maxByte) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117915:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011791b:	8a 00                	mov    (%eax),%al
f011791d:	3a 45 f3             	cmp    -0xd(%ebp),%al
f0117920:	75 1c                	jne    f011793e <test_kmalloc+0xdf5>
f0117922:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0117928:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f011792f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117935:	01 d0                	add    %edx,%eax
f0117937:	8a 00                	mov    (%eax),%al
f0117939:	3a 45 f2             	cmp    -0xe(%ebp),%al
f011793c:	74 17                	je     f0117955 <test_kmalloc+0xe0c>
f011793e:	83 ec 04             	sub    $0x4,%esp
f0117941:	68 2c a6 13 f0       	push   $0xf013a62c
f0117946:	68 b6 00 00 00       	push   $0xb6
f011794b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117950:	e8 51 88 fe ff       	call   f01001a6 <_panic>
			if (structArr[0].b != minShort 	|| structArr[lastIndexOfStruct].b != maxShort) 	panic("Wrong allocation: stored values are wrongly changed!");
f0117955:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011795b:	66 8b 40 02          	mov    0x2(%eax),%ax
f011795f:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117963:	75 1f                	jne    f0117984 <test_kmalloc+0xe3b>
f0117965:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011796b:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f0117972:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0117978:	01 d0                	add    %edx,%eax
f011797a:	66 8b 40 02          	mov    0x2(%eax),%ax
f011797e:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117982:	74 17                	je     f011799b <test_kmalloc+0xe52>
f0117984:	83 ec 04             	sub    $0x4,%esp
f0117987:	68 2c a6 13 f0       	push   $0xf013a62c
f011798c:	68 b7 00 00 00       	push   $0xb7
f0117991:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117996:	e8 0b 88 fe ff       	call   f01001a6 <_panic>
			if (structArr[0].c != minInt 	|| structArr[lastIndexOfStruct].c != maxInt) 	panic("Wrong allocation: stored values are wrongly changed!");
f011799b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01179a1:	8b 40 04             	mov    0x4(%eax),%eax
f01179a4:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f01179a7:	75 1d                	jne    f01179c6 <test_kmalloc+0xe7d>
f01179a9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01179af:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f01179b6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01179bc:	01 d0                	add    %edx,%eax
f01179be:	8b 40 04             	mov    0x4(%eax),%eax
f01179c1:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01179c4:	74 17                	je     f01179dd <test_kmalloc+0xe94>
f01179c6:	83 ec 04             	sub    $0x4,%esp
f01179c9:	68 2c a6 13 f0       	push   $0xf013a62c
f01179ce:	68 b8 00 00 00       	push   $0xb8
f01179d3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01179d8:	e8 c9 87 fe ff       	call   f01001a6 <_panic>

			if (byteArr2[0] != minByte || byteArr2[lastIndexOfByte2/2] != maxByte/2 || byteArr2[lastIndexOfByte2] != maxByte) panic("Wrong allocation: stored values are wrongly changed!");
f01179dd:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01179e3:	8a 00                	mov    (%eax),%al
f01179e5:	3a 45 f3             	cmp    -0xd(%ebp),%al
f01179e8:	75 40                	jne    f0117a2a <test_kmalloc+0xee1>
f01179ea:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01179f0:	89 c2                	mov    %eax,%edx
f01179f2:	c1 ea 1f             	shr    $0x1f,%edx
f01179f5:	01 d0                	add    %edx,%eax
f01179f7:	d1 f8                	sar    %eax
f01179f9:	89 c2                	mov    %eax,%edx
f01179fb:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117a01:	01 d0                	add    %edx,%eax
f0117a03:	8a 10                	mov    (%eax),%dl
f0117a05:	8a 45 f2             	mov    -0xe(%ebp),%al
f0117a08:	88 c1                	mov    %al,%cl
f0117a0a:	c0 e9 07             	shr    $0x7,%cl
f0117a0d:	01 c8                	add    %ecx,%eax
f0117a0f:	d0 f8                	sar    %al
f0117a11:	38 c2                	cmp    %al,%dl
f0117a13:	75 15                	jne    f0117a2a <test_kmalloc+0xee1>
f0117a15:	8b 95 d8 fe ff ff    	mov    -0x128(%ebp),%edx
f0117a1b:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0117a21:	01 d0                	add    %edx,%eax
f0117a23:	8a 00                	mov    (%eax),%al
f0117a25:	3a 45 f2             	cmp    -0xe(%ebp),%al
f0117a28:	74 17                	je     f0117a41 <test_kmalloc+0xef8>
f0117a2a:	83 ec 04             	sub    $0x4,%esp
f0117a2d:	68 2c a6 13 f0       	push   $0xf013a62c
f0117a32:	68 ba 00 00 00       	push   $0xba
f0117a37:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117a3c:	e8 65 87 fe ff       	call   f01001a6 <_panic>
			if (shortArr2[0] != minShort || shortArr2[lastIndexOfShort2] != maxShort) panic("Wrong allocation: stored values are wrongly changed!");
f0117a41:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117a47:	66 8b 00             	mov    (%eax),%ax
f0117a4a:	66 3b 45 f0          	cmp    -0x10(%ebp),%ax
f0117a4e:	75 1b                	jne    f0117a6b <test_kmalloc+0xf22>
f0117a50:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0117a56:	01 c0                	add    %eax,%eax
f0117a58:	89 c2                	mov    %eax,%edx
f0117a5a:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0117a60:	01 d0                	add    %edx,%eax
f0117a62:	66 8b 00             	mov    (%eax),%ax
f0117a65:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f0117a69:	74 17                	je     f0117a82 <test_kmalloc+0xf39>
f0117a6b:	83 ec 04             	sub    $0x4,%esp
f0117a6e:	68 2c a6 13 f0       	push   $0xf013a62c
f0117a73:	68 bb 00 00 00       	push   $0xbb
f0117a78:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117a7d:	e8 24 87 fe ff       	call   f01001a6 <_panic>

			if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117a82:	e8 49 46 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0117a87:	89 c2                	mov    %eax,%edx
f0117a89:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117a8c:	39 c2                	cmp    %eax,%edx
f0117a8e:	74 17                	je     f0117aa7 <test_kmalloc+0xf5e>
f0117a90:	83 ec 04             	sub    $0x4,%esp
f0117a93:	68 58 a5 13 f0       	push   $0xf013a558
f0117a98:	68 bd 00 00 00       	push   $0xbd
f0117a9d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117aa2:	e8 ff 86 fe ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117aa7:	e8 e8 c1 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0117aac:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117aaf:	74 17                	je     f0117ac8 <test_kmalloc+0xf7f>
f0117ab1:	83 ec 04             	sub    $0x4,%esp
f0117ab4:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0117ab9:	68 be 00 00 00       	push   $0xbe
f0117abe:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117ac3:	e8 de 86 fe ff       	call   f01001a6 <_panic>
		}

		cprintf("\b\b\b80%");
f0117ac8:	83 ec 0c             	sub    $0xc,%esp
f0117acb:	68 61 a6 13 f0       	push   $0xf013a661
f0117ad0:	e8 58 91 fe ff       	call   f0100c2d <cprintf>
f0117ad5:	83 c4 10             	add    $0x10,%esp

		//Insufficient space again
		freeFrames = sys_calculate_free_frames() ;
f0117ad8:	e8 f3 45 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0117add:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0117ae0:	e8 af c1 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0117ae5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		uint32 restOfKHeap = (KERNEL_HEAP_MAX - ACTUAL_START + 2*PAGE_SIZE) - (2*Mega+2*Mega+4*kilo+4*kilo+8*kilo+3*Mega+6*Mega+16*kilo) ;
f0117ae8:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0117aef:	10 00 00 
f0117af2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0117af8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117afd:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0117b03:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0117b09:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b0e:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0117b14:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0117b1a:	29 d0                	sub    %edx,%eax
f0117b1c:	89 c1                	mov    %eax,%ecx
f0117b1e:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0117b25:	10 00 00 
f0117b28:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117b2d:	0f b6 d0             	movzbl %al,%edx
f0117b30:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0117b36:	01 d0                	add    %edx,%eax
f0117b38:	48                   	dec    %eax
f0117b39:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0117b3f:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0117b45:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b4a:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0117b50:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0117b56:	29 d0                	sub    %edx,%eax
f0117b58:	01 c1                	add    %eax,%ecx
f0117b5a:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f0117b61:	10 00 00 
f0117b64:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117b69:	0f b6 c0             	movzbl %al,%eax
f0117b6c:	c1 e0 04             	shl    $0x4,%eax
f0117b6f:	89 c2                	mov    %eax,%edx
f0117b71:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0117b77:	01 d0                	add    %edx,%eax
f0117b79:	48                   	dec    %eax
f0117b7a:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f0117b80:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0117b86:	ba 00 00 00 00       	mov    $0x0,%edx
f0117b8b:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f0117b91:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0117b97:	29 d0                	sub    %edx,%eax
f0117b99:	01 c8                	add    %ecx,%eax
f0117b9b:	ba 00 50 2f 09       	mov    $0x92f5000,%edx
f0117ba0:	29 c2                	sub    %eax,%edx
f0117ba2:	89 d0                	mov    %edx,%eax
f0117ba4:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		ptr_allocations[8] = kmalloc(restOfKHeap);
f0117baa:	83 ec 0c             	sub    $0xc,%esp
f0117bad:	ff b5 b0 fe ff ff    	pushl  -0x150(%ebp)
f0117bb3:	e8 2c f8 fe ff       	call   f01073e4 <kmalloc>
f0117bb8:	83 c4 10             	add    $0x10,%esp
f0117bbb:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if (ptr_allocations[8] != NULL) panic("Allocating insufficient space: should return NULL");
f0117bc1:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0117bc7:	85 c0                	test   %eax,%eax
f0117bc9:	74 17                	je     f0117be2 <test_kmalloc+0x1099>
f0117bcb:	83 ec 04             	sub    $0x4,%esp
f0117bce:	68 a4 a4 13 f0       	push   $0xf013a4a4
f0117bd3:	68 c8 00 00 00       	push   $0xc8
f0117bd8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117bdd:	e8 c4 85 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0117be2:	e8 ad c0 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0117be7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0117bea:	74 17                	je     f0117c03 <test_kmalloc+0x10ba>
f0117bec:	83 ec 04             	sub    $0x4,%esp
f0117bef:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0117bf4:	68 c9 00 00 00       	push   $0xc9
f0117bf9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117bfe:	e8 a3 85 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation: pages are not loaded successfully into memory");
f0117c03:	e8 c8 44 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0117c08:	89 c2                	mov    %eax,%edx
f0117c0a:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117c0d:	39 c2                	cmp    %eax,%edx
f0117c0f:	74 17                	je     f0117c28 <test_kmalloc+0x10df>
f0117c11:	83 ec 04             	sub    $0x4,%esp
f0117c14:	68 58 a5 13 f0       	push   $0xf013a558
f0117c19:	68 ca 00 00 00       	push   $0xca
f0117c1e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117c23:	e8 7e 85 fe ff       	call   f01001a6 <_panic>

		cprintf("\b\b\b90%");
f0117c28:	83 ec 0c             	sub    $0xc,%esp
f0117c2b:	68 68 a6 13 f0       	push   $0xf013a668
f0117c30:	e8 f8 8f fe ff       	call   f0100c2d <cprintf>
f0117c35:	83 c4 10             	add    $0x10,%esp

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
f0117c38:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0117c3e:	05 00 40 00 00       	add    $0x4000,%eax
f0117c43:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0117c49:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0117c50:	10 00 00 
f0117c53:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0117c59:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117c5e:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0117c64:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0117c6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0117c6f:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0117c75:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0117c7b:	29 d0                	sub    %edx,%eax
f0117c7d:	89 c1                	mov    %eax,%ecx
f0117c7f:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0117c86:	10 00 00 
f0117c89:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117c8e:	0f b6 d0             	movzbl %al,%edx
f0117c91:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0117c97:	01 d0                	add    %edx,%eax
f0117c99:	48                   	dec    %eax
f0117c9a:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0117ca0:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0117ca6:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cab:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0117cb1:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0117cb7:	29 d0                	sub    %edx,%eax
f0117cb9:	01 c1                	add    %eax,%ecx
f0117cbb:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0117cc2:	10 00 00 
f0117cc5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117cca:	0f b6 c0             	movzbl %al,%eax
f0117ccd:	c1 e0 04             	shl    $0x4,%eax
f0117cd0:	89 c2                	mov    %eax,%edx
f0117cd2:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0117cd8:	01 d0                	add    %edx,%eax
f0117cda:	48                   	dec    %eax
f0117cdb:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0117ce1:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0117ce7:	ba 00 00 00 00       	mov    $0x0,%edx
f0117cec:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0117cf2:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0117cf8:	29 d0                	sub    %edx,%eax
f0117cfa:	01 c8                	add    %ecx,%eax
f0117cfc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117d01:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0117d04:	eb 6a                	jmp    f0117d70 <test_kmalloc+0x1227>
		{
			unsigned int * table;
			get_page_table(ptr_page_directory, va, &table);
f0117d06:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0117d0b:	83 ec 04             	sub    $0x4,%esp
f0117d0e:	8d 95 3c fe ff ff    	lea    -0x1c4(%ebp),%edx
f0117d14:	52                   	push   %edx
f0117d15:	ff 75 f4             	pushl  -0xc(%ebp)
f0117d18:	50                   	push   %eax
f0117d19:	e8 53 ec fe ff       	call   f0106971 <get_page_table>
f0117d1e:	83 c4 10             	add    $0x10,%esp
			uint32 perm = table[PTX(va)] & 0xFFF;
f0117d21:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0117d27:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0117d2a:	c1 ea 0c             	shr    $0xc,%edx
f0117d2d:	81 e2 ff 03 00 00    	and    $0x3ff,%edx
f0117d33:	c1 e2 02             	shl    $0x2,%edx
f0117d36:	01 d0                	add    %edx,%eax
f0117d38:	8b 00                	mov    (%eax),%eax
f0117d3a:	25 ff 0f 00 00       	and    $0xfff,%eax
f0117d3f:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
			if ((perm & PERM_USER) == PERM_USER)
f0117d45:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0117d4b:	83 e0 04             	and    $0x4,%eax
f0117d4e:	85 c0                	test   %eax,%eax
f0117d50:	74 17                	je     f0117d69 <test_kmalloc+0x1220>
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
f0117d52:	83 ec 04             	sub    $0x4,%esp
f0117d55:	68 70 a6 13 f0       	push   $0xf013a670
f0117d5a:	68 d7 00 00 00       	push   $0xd7
f0117d5f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0117d64:	e8 3d 84 fe ff       	call   f01001a6 <_panic>
		cprintf("\b\b\b90%");

		//permissions
		uint32 lastAllocAddress = (uint32)ptr_allocations[7] + 16*kilo ;
		uint32 va;
		for (va = ACTUAL_START; va < lastAllocAddress; va+=PAGE_SIZE)
f0117d69:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f0117d70:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117d73:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0117d79:	72 8b                	jb     f0117d06 <test_kmalloc+0x11bd>
			uint32 perm = table[PTX(va)] & 0xFFF;
			if ((perm & PERM_USER) == PERM_USER)
				panic("Wrong permissions: pages should be mapped with Supervisor permission only");
		}

		cprintf("\b\b\b100%\n");
f0117d7b:	83 ec 0c             	sub    $0xc,%esp
f0117d7e:	68 ba a6 13 f0       	push   $0xf013a6ba
f0117d83:	e8 a5 8e fe ff       	call   f0100c2d <cprintf>
f0117d88:	83 c4 10             	add    $0x10,%esp

	}

	cprintf("\nCongratulations!! test kmalloc completed successfully.\n");
f0117d8b:	83 ec 0c             	sub    $0xc,%esp
f0117d8e:	68 c4 a6 13 f0       	push   $0xf013a6c4
f0117d93:	e8 95 8e fe ff       	call   f0100c2d <cprintf>
f0117d98:	83 c4 10             	add    $0x10,%esp

	return 1;
f0117d9b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0117da0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0117da3:	5b                   	pop    %ebx
f0117da4:	5f                   	pop    %edi
f0117da5:	5d                   	pop    %ebp
f0117da6:	c3                   	ret    

f0117da7 <test_kmalloc_nextfit>:

int test_kmalloc_nextfit()
{
f0117da7:	55                   	push   %ebp
f0117da8:	89 e5                	mov    %esp,%ebp
f0117daa:	57                   	push   %edi
f0117dab:	53                   	push   %ebx
f0117dac:	81 ec 70 04 00 00    	sub    $0x470,%esp
	cprintf("==============================================\n");
f0117db2:	83 ec 0c             	sub    $0xc,%esp
f0117db5:	68 18 a4 13 f0       	push   $0xf013a418
f0117dba:	e8 6e 8e fe ff       	call   f0100c2d <cprintf>
f0117dbf:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0117dc2:	83 ec 0c             	sub    $0xc,%esp
f0117dc5:	68 48 a4 13 f0       	push   $0xf013a448
f0117dca:	e8 5e 8e fe ff       	call   f0100c2d <cprintf>
f0117dcf:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0117dd2:	83 ec 0c             	sub    $0xc,%esp
f0117dd5:	68 18 a4 13 f0       	push   $0xf013a418
f0117dda:	e8 4e 8e fe ff       	call   f0100c2d <cprintf>
f0117ddf:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f0117de2:	8d 95 88 fb ff ff    	lea    -0x478(%ebp),%edx
f0117de8:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f0117ded:	b8 00 00 00 00       	mov    $0x0,%eax
f0117df2:	89 d7                	mov    %edx,%edi
f0117df4:	f3 ab                	rep stos %eax,%es:(%edi)
	cprintf("This test has THREE cases. A pass message will be displayed after each one.\n");
f0117df6:	83 ec 0c             	sub    $0xc,%esp
f0117df9:	68 00 a7 13 f0       	push   $0xf013a700
f0117dfe:	e8 2a 8e fe ff       	call   f0100c2d <cprintf>
f0117e03:	83 c4 10             	add    $0x10,%esp

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f0117e06:	e8 c5 42 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0117e0b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f0117e0e:	e8 81 be fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0117e13:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0117e16:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0117e1d:	eb 1f                	jmp    f0117e3e <test_kmalloc_nextfit+0x97>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f0117e1f:	83 ec 0c             	sub    $0xc,%esp
f0117e22:	68 00 00 20 00       	push   $0x200000
f0117e27:	e8 b8 f5 fe ff       	call   f01073e4 <kmalloc>
f0117e2c:	83 c4 10             	add    $0x10,%esp
f0117e2f:	89 c2                	mov    %eax,%edx
f0117e31:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0117e34:	89 94 85 88 fb ff ff 	mov    %edx,-0x478(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int i;
	//ptr_allocations[0] = kmalloc(2*Mega - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
	for(i = 0; i< 79 ;i++)
f0117e3b:	ff 45 f4             	incl   -0xc(%ebp)
f0117e3e:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f0117e42:	7e db                	jle    f0117e1f <test_kmalloc_nextfit+0x78>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);
f0117e44:	c7 45 e8 00 10 00 00 	movl   $0x1000,-0x18(%ebp)
f0117e4b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0117e4e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117e53:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0117e56:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117e59:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e5e:	f7 75 e8             	divl   -0x18(%ebp)
f0117e61:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0117e64:	29 d0                	sub    %edx,%eax
f0117e66:	89 c1                	mov    %eax,%ecx
f0117e68:	c7 45 e0 00 10 00 00 	movl   $0x1000,-0x20(%ebp)
f0117e6f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117e74:	0f b6 d0             	movzbl %al,%edx
f0117e77:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0117e7a:	01 d0                	add    %edx,%eax
f0117e7c:	48                   	dec    %eax
f0117e7d:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0117e80:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117e83:	ba 00 00 00 00       	mov    $0x0,%edx
f0117e88:	f7 75 e0             	divl   -0x20(%ebp)
f0117e8b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0117e8e:	29 d0                	sub    %edx,%eax
f0117e90:	01 c1                	add    %eax,%ecx
f0117e92:	c7 45 d8 00 10 00 00 	movl   $0x1000,-0x28(%ebp)
f0117e99:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117e9e:	0f b6 c0             	movzbl %al,%eax
f0117ea1:	c1 e0 04             	shl    $0x4,%eax
f0117ea4:	89 c2                	mov    %eax,%edx
f0117ea6:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0117ea9:	01 d0                	add    %edx,%eax
f0117eab:	48                   	dec    %eax
f0117eac:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0117eaf:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117eb2:	ba 00 00 00 00       	mov    $0x0,%edx
f0117eb7:	f7 75 d8             	divl   -0x28(%ebp)
f0117eba:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0117ebd:	29 d0                	sub    %edx,%eax
f0117ebf:	01 c8                	add    %ecx,%eax
f0117ec1:	ba 00 b0 1f 00       	mov    $0x1fb000,%edx
f0117ec6:	29 c2                	sub    %eax,%edx
f0117ec8:	89 d0                	mov    %edx,%eax
f0117eca:	83 ec 0c             	sub    $0xc,%esp
f0117ecd:	50                   	push   %eax
f0117ece:	e8 11 f5 fe ff       	call   f01073e4 <kmalloc>
f0117ed3:	83 c4 10             	add    $0x10,%esp
f0117ed6:	89 85 c4 fc ff ff    	mov    %eax,-0x33c(%ebp)


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0117edc:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f0117ee2:	89 c1                	mov    %eax,%ecx
f0117ee4:	c7 45 d0 00 10 00 00 	movl   $0x1000,-0x30(%ebp)
f0117eeb:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0117eee:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117ef3:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0117ef6:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117ef9:	ba 00 00 00 00       	mov    $0x0,%edx
f0117efe:	f7 75 d0             	divl   -0x30(%ebp)
f0117f01:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0117f04:	29 d0                	sub    %edx,%eax
f0117f06:	89 c3                	mov    %eax,%ebx
f0117f08:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0117f0f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117f14:	0f b6 d0             	movzbl %al,%edx
f0117f17:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0117f1a:	01 d0                	add    %edx,%eax
f0117f1c:	48                   	dec    %eax
f0117f1d:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0117f20:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117f23:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f28:	f7 75 c8             	divl   -0x38(%ebp)
f0117f2b:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0117f2e:	29 d0                	sub    %edx,%eax
f0117f30:	01 c3                	add    %eax,%ebx
f0117f32:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0117f39:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117f3e:	0f b6 c0             	movzbl %al,%eax
f0117f41:	c1 e0 04             	shl    $0x4,%eax
f0117f44:	89 c2                	mov    %eax,%edx
f0117f46:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0117f49:	01 d0                	add    %edx,%eax
f0117f4b:	48                   	dec    %eax
f0117f4c:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0117f4f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117f52:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f57:	f7 75 c0             	divl   -0x40(%ebp)
f0117f5a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0117f5d:	29 d0                	sub    %edx,%eax
f0117f5f:	01 d8                	add    %ebx,%eax
f0117f61:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0117f66:	39 c1                	cmp    %eax,%ecx
f0117f68:	0f 85 ed 04 00 00    	jne    f011845b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f0117f6e:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f0117f74:	89 c1                	mov    %eax,%ecx
f0117f76:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0117f7d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0117f80:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0117f85:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0117f88:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117f8b:	ba 00 00 00 00       	mov    $0x0,%edx
f0117f90:	f7 75 b8             	divl   -0x48(%ebp)
f0117f93:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0117f96:	29 d0                	sub    %edx,%eax
f0117f98:	89 c3                	mov    %eax,%ebx
f0117f9a:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0117fa1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117fa6:	0f b6 d0             	movzbl %al,%edx
f0117fa9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0117fac:	01 d0                	add    %edx,%eax
f0117fae:	48                   	dec    %eax
f0117faf:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0117fb2:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117fb5:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fba:	f7 75 b0             	divl   -0x50(%ebp)
f0117fbd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0117fc0:	29 d0                	sub    %edx,%eax
f0117fc2:	01 c3                	add    %eax,%ebx
f0117fc4:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0117fcb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0117fd0:	0f b6 c0             	movzbl %al,%eax
f0117fd3:	c1 e0 04             	shl    $0x4,%eax
f0117fd6:	89 c2                	mov    %eax,%edx
f0117fd8:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0117fdb:	01 d0                	add    %edx,%eax
f0117fdd:	48                   	dec    %eax
f0117fde:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0117fe1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117fe4:	ba 00 00 00 00       	mov    $0x0,%edx
f0117fe9:	f7 75 a8             	divl   -0x58(%ebp)
f0117fec:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0117fef:	29 d0                	sub    %edx,%eax
f0117ff1:	01 d8                	add    %ebx,%eax
f0117ff3:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f0117ff8:	39 c1                	cmp    %eax,%ecx
f0117ffa:	0f 85 5b 04 00 00    	jne    f011845b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118000:	8b 85 a8 fb ff ff    	mov    -0x458(%ebp),%eax
f0118006:	89 c1                	mov    %eax,%ecx
f0118008:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011800f:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0118012:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118017:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011801a:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011801d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118022:	f7 75 a0             	divl   -0x60(%ebp)
f0118025:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0118028:	29 d0                	sub    %edx,%eax
f011802a:	89 c3                	mov    %eax,%ebx
f011802c:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0118033:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118038:	0f b6 d0             	movzbl %al,%edx
f011803b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011803e:	01 d0                	add    %edx,%eax
f0118040:	48                   	dec    %eax
f0118041:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0118044:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118047:	ba 00 00 00 00       	mov    $0x0,%edx
f011804c:	f7 75 98             	divl   -0x68(%ebp)
f011804f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0118052:	29 d0                	sub    %edx,%eax
f0118054:	01 c3                	add    %eax,%ebx
f0118056:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011805d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118062:	0f b6 c0             	movzbl %al,%eax
f0118065:	c1 e0 04             	shl    $0x4,%eax
f0118068:	89 c2                	mov    %eax,%edx
f011806a:	8b 45 90             	mov    -0x70(%ebp),%eax
f011806d:	01 d0                	add    %edx,%eax
f011806f:	48                   	dec    %eax
f0118070:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0118073:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118076:	ba 00 00 00 00       	mov    $0x0,%edx
f011807b:	f7 75 90             	divl   -0x70(%ebp)
f011807e:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0118081:	29 d0                	sub    %edx,%eax
f0118083:	01 d8                	add    %ebx,%eax
f0118085:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS);


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011808a:	39 c1                	cmp    %eax,%ecx
f011808c:	0f 85 c9 03 00 00    	jne    f011845b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f0118092:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f0118098:	89 c1                	mov    %eax,%ecx
f011809a:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f01180a1:	8b 45 88             	mov    -0x78(%ebp),%eax
f01180a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01180a9:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01180ac:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01180af:	ba 00 00 00 00       	mov    $0x0,%edx
f01180b4:	f7 75 88             	divl   -0x78(%ebp)
f01180b7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01180ba:	29 d0                	sub    %edx,%eax
f01180bc:	89 c3                	mov    %eax,%ebx
f01180be:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01180c5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01180ca:	0f b6 d0             	movzbl %al,%edx
f01180cd:	8b 45 80             	mov    -0x80(%ebp),%eax
f01180d0:	01 d0                	add    %edx,%eax
f01180d2:	48                   	dec    %eax
f01180d3:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01180d9:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01180df:	ba 00 00 00 00       	mov    $0x0,%edx
f01180e4:	f7 75 80             	divl   -0x80(%ebp)
f01180e7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01180ed:	29 d0                	sub    %edx,%eax
f01180ef:	01 c3                	add    %eax,%ebx
f01180f1:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01180f8:	10 00 00 
f01180fb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118100:	0f b6 c0             	movzbl %al,%eax
f0118103:	c1 e0 04             	shl    $0x4,%eax
f0118106:	89 c2                	mov    %eax,%edx
f0118108:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011810e:	01 d0                	add    %edx,%eax
f0118110:	48                   	dec    %eax
f0118111:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f0118117:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011811d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118122:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f0118128:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011812e:	29 d0                	sub    %edx,%eax
f0118130:	01 d8                	add    %ebx,%eax
f0118132:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax


	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f0118137:	39 c1                	cmp    %eax,%ecx
f0118139:	0f 85 1c 03 00 00    	jne    f011845b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011813f:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0118145:	89 c1                	mov    %eax,%ecx
f0118147:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f011814e:	10 00 00 
f0118151:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0118157:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011815c:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f0118162:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118168:	ba 00 00 00 00       	mov    $0x0,%edx
f011816d:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f0118173:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0118179:	29 d0                	sub    %edx,%eax
f011817b:	89 c3                	mov    %eax,%ebx
f011817d:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f0118184:	10 00 00 
f0118187:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011818c:	0f b6 d0             	movzbl %al,%edx
f011818f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0118195:	01 d0                	add    %edx,%eax
f0118197:	48                   	dec    %eax
f0118198:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f011819e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01181a4:	ba 00 00 00 00       	mov    $0x0,%edx
f01181a9:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01181af:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01181b5:	29 d0                	sub    %edx,%eax
f01181b7:	01 c3                	add    %eax,%ebx
f01181b9:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01181c0:	10 00 00 
f01181c3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01181c8:	0f b6 c0             	movzbl %al,%eax
f01181cb:	c1 e0 04             	shl    $0x4,%eax
f01181ce:	89 c2                	mov    %eax,%edx
f01181d0:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01181d6:	01 d0                	add    %edx,%eax
f01181d8:	48                   	dec    %eax
f01181d9:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01181df:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01181e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01181ea:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01181f0:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01181f6:	29 d0                	sub    %edx,%eax
f01181f8:	01 d8                	add    %ebx,%eax
f01181fa:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f01181ff:	39 c1                	cmp    %eax,%ecx
f0118201:	0f 85 54 02 00 00    	jne    f011845b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f0118207:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f011820d:	89 c1                	mov    %eax,%ecx
f011820f:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0118216:	10 00 00 
f0118219:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011821f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118224:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f011822a:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118230:	ba 00 00 00 00       	mov    $0x0,%edx
f0118235:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f011823b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0118241:	29 d0                	sub    %edx,%eax
f0118243:	89 c3                	mov    %eax,%ebx
f0118245:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f011824c:	10 00 00 
f011824f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118254:	0f b6 d0             	movzbl %al,%edx
f0118257:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011825d:	01 d0                	add    %edx,%eax
f011825f:	48                   	dec    %eax
f0118260:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0118266:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011826c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118271:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0118277:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011827d:	29 d0                	sub    %edx,%eax
f011827f:	01 c3                	add    %eax,%ebx
f0118281:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0118288:	10 00 00 
f011828b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118290:	0f b6 c0             	movzbl %al,%eax
f0118293:	c1 e0 04             	shl    $0x4,%eax
f0118296:	89 c2                	mov    %eax,%edx
f0118298:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011829e:	01 d0                	add    %edx,%eax
f01182a0:	48                   	dec    %eax
f01182a1:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01182a7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01182ad:	ba 00 00 00 00       	mov    $0x0,%edx
f01182b2:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01182b8:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01182be:	29 d0                	sub    %edx,%eax
f01182c0:	01 d8                	add    %ebx,%eax
f01182c2:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f01182c7:	39 c1                	cmp    %eax,%ecx
f01182c9:	0f 85 8c 01 00 00    	jne    f011845b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f01182cf:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f01182d5:	89 c1                	mov    %eax,%ecx
f01182d7:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01182de:	10 00 00 
f01182e1:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01182e7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01182ec:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f01182f2:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01182f8:	ba 00 00 00 00       	mov    $0x0,%edx
f01182fd:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f0118303:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0118309:	29 d0                	sub    %edx,%eax
f011830b:	89 c3                	mov    %eax,%ebx
f011830d:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f0118314:	10 00 00 
f0118317:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011831c:	0f b6 d0             	movzbl %al,%edx
f011831f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0118325:	01 d0                	add    %edx,%eax
f0118327:	48                   	dec    %eax
f0118328:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f011832e:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118334:	ba 00 00 00 00       	mov    $0x0,%edx
f0118339:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f011833f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0118345:	29 d0                	sub    %edx,%eax
f0118347:	01 c3                	add    %eax,%ebx
f0118349:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f0118350:	10 00 00 
f0118353:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118358:	0f b6 c0             	movzbl %al,%eax
f011835b:	c1 e0 04             	shl    $0x4,%eax
f011835e:	89 c2                	mov    %eax,%edx
f0118360:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0118366:	01 d0                	add    %edx,%eax
f0118368:	48                   	dec    %eax
f0118369:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f011836f:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118375:	ba 00 00 00 00       	mov    $0x0,%edx
f011837a:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f0118380:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0118386:	29 d0                	sub    %edx,%eax
f0118388:	01 d8                	add    %ebx,%eax
f011838a:	2d 00 c0 df 06       	sub    $0x6dfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011838f:	39 c1                	cmp    %eax,%ecx
f0118391:	0f 85 c4 00 00 00    	jne    f011845b <test_kmalloc_nextfit+0x6b4>
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
f0118397:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f011839d:	89 c1                	mov    %eax,%ecx
f011839f:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01183a6:	10 00 00 
f01183a9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01183af:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01183b4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01183ba:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01183c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01183c5:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01183cb:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01183d1:	29 d0                	sub    %edx,%eax
f01183d3:	89 c3                	mov    %eax,%ebx
f01183d5:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01183dc:	10 00 00 
f01183df:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01183e4:	0f b6 d0             	movzbl %al,%edx
f01183e7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01183ed:	01 d0                	add    %edx,%eax
f01183ef:	48                   	dec    %eax
f01183f0:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01183f6:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01183fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0118401:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0118407:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011840d:	29 d0                	sub    %edx,%eax
f011840f:	01 c3                	add    %eax,%ebx
f0118411:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0118418:	10 00 00 
f011841b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118420:	0f b6 c0             	movzbl %al,%eax
f0118423:	c1 e0 04             	shl    $0x4,%eax
f0118426:	89 c2                	mov    %eax,%edx
f0118428:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011842e:	01 d0                	add    %edx,%eax
f0118430:	48                   	dec    %eax
f0118431:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0118437:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011843d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118442:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0118448:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011844e:	29 d0                	sub    %edx,%eax
f0118450:	01 d8                	add    %ebx,%eax
f0118452:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[25] != (ACTUAL_START + 50*Mega) ||
f0118457:	39 c1                	cmp    %eax,%ecx
f0118459:	74 17                	je     f0118472 <test_kmalloc_nextfit+0x6cb>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega ))
		panic("Wrong allocation, Check next fitting strategy is working correctly");
f011845b:	83 ec 04             	sub    $0x4,%esp
f011845e:	68 50 a7 13 f0       	push   $0xf013a750
f0118463:	68 03 01 00 00       	push   $0x103
f0118468:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011846d:	e8 34 7d fe ff       	call   f01001a6 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118472:	e8 1d b8 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0118477:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011847a:	74 17                	je     f0118493 <test_kmalloc_nextfit+0x6ec>
f011847c:	83 ec 04             	sub    $0x4,%esp
f011847f:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0118484:	68 05 01 00 00       	push   $0x105
f0118489:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011848e:	e8 13 7d fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/(PAGE_SIZE) ) panic("Wrong allocation");
f0118493:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118496:	e8 35 3c ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011849b:	29 c3                	sub    %eax,%ebx
f011849d:	89 d9                	mov    %ebx,%ecx
f011849f:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01184a6:	10 00 00 
f01184a9:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01184af:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01184b4:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f01184ba:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01184c0:	ba 00 00 00 00       	mov    $0x0,%edx
f01184c5:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f01184cb:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f01184d1:	29 d0                	sub    %edx,%eax
f01184d3:	89 c3                	mov    %eax,%ebx
f01184d5:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f01184dc:	10 00 00 
f01184df:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01184e4:	0f b6 d0             	movzbl %al,%edx
f01184e7:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f01184ed:	01 d0                	add    %edx,%eax
f01184ef:	48                   	dec    %eax
f01184f0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f01184f6:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01184fc:	ba 00 00 00 00       	mov    $0x0,%edx
f0118501:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0118507:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011850d:	29 d0                	sub    %edx,%eax
f011850f:	01 c3                	add    %eax,%ebx
f0118511:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0118518:	10 00 00 
f011851b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118520:	0f b6 c0             	movzbl %al,%eax
f0118523:	c1 e0 04             	shl    $0x4,%eax
f0118526:	89 c2                	mov    %eax,%edx
f0118528:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011852e:	01 d0                	add    %edx,%eax
f0118530:	48                   	dec    %eax
f0118531:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0118537:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011853d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118542:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0118548:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011854e:	29 d0                	sub    %edx,%eax
f0118550:	01 d8                	add    %ebx,%eax
f0118552:	ba 00 b0 ff 09       	mov    $0x9ffb000,%edx
f0118557:	29 c2                	sub    %eax,%edx
f0118559:	89 d0                	mov    %edx,%eax
f011855b:	c1 e8 0c             	shr    $0xc,%eax
f011855e:	39 c1                	cmp    %eax,%ecx
f0118560:	74 17                	je     f0118579 <test_kmalloc_nextfit+0x7d2>
f0118562:	83 ec 04             	sub    $0x4,%esp
f0118565:	68 93 a7 13 f0       	push   $0xf013a793
f011856a:	68 06 01 00 00       	push   $0x106
f011856f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118574:	e8 2d 7c fe ff       	call   f01001a6 <_panic>

	// Make memory holes.
	freeDiskFrames = pf_calculate_free_frames() ;
f0118579:	e8 16 b7 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011857e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118581:	e8 4a 3b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0118586:	89 45 f0             	mov    %eax,-0x10(%ebp)

	kfree(ptr_allocations[0]);		// Hole 1 = 2 M
f0118589:	8b 85 88 fb ff ff    	mov    -0x478(%ebp),%eax
f011858f:	83 ec 0c             	sub    $0xc,%esp
f0118592:	50                   	push   %eax
f0118593:	e8 66 ee fe ff       	call   f01073fe <kfree>
f0118598:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		// Hole 2 = 4 M
f011859b:	8b 85 90 fb ff ff    	mov    -0x470(%ebp),%eax
f01185a1:	83 ec 0c             	sub    $0xc,%esp
f01185a4:	50                   	push   %eax
f01185a5:	e8 54 ee fe ff       	call   f01073fe <kfree>
f01185aa:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f01185ad:	8b 85 94 fb ff ff    	mov    -0x46c(%ebp),%eax
f01185b3:	83 ec 0c             	sub    $0xc,%esp
f01185b6:	50                   	push   %eax
f01185b7:	e8 42 ee fe ff       	call   f01073fe <kfree>
f01185bc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[5]);		// Hole 3 = 2 M
f01185bf:	8b 85 9c fb ff ff    	mov    -0x464(%ebp),%eax
f01185c5:	83 ec 0c             	sub    $0xc,%esp
f01185c8:	50                   	push   %eax
f01185c9:	e8 30 ee fe ff       	call   f01073fe <kfree>
f01185ce:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		// Hole 4 = 6 M
f01185d1:	8b 85 b0 fb ff ff    	mov    -0x450(%ebp),%eax
f01185d7:	83 ec 0c             	sub    $0xc,%esp
f01185da:	50                   	push   %eax
f01185db:	e8 1e ee fe ff       	call   f01073fe <kfree>
f01185e0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f01185e3:	8b 85 b8 fb ff ff    	mov    -0x448(%ebp),%eax
f01185e9:	83 ec 0c             	sub    $0xc,%esp
f01185ec:	50                   	push   %eax
f01185ed:	e8 0c ee fe ff       	call   f01073fe <kfree>
f01185f2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f01185f5:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f01185fb:	83 ec 0c             	sub    $0xc,%esp
f01185fe:	50                   	push   %eax
f01185ff:	e8 fa ed fe ff       	call   f01073fe <kfree>
f0118604:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[20]);		// Hole 5 = 2 M
f0118607:	8b 85 d8 fb ff ff    	mov    -0x428(%ebp),%eax
f011860d:	83 ec 0c             	sub    $0xc,%esp
f0118610:	50                   	push   %eax
f0118611:	e8 e8 ed fe ff       	call   f01073fe <kfree>
f0118616:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[25]);		// Hole 6 = 2 M
f0118619:	8b 85 ec fb ff ff    	mov    -0x414(%ebp),%eax
f011861f:	83 ec 0c             	sub    $0xc,%esp
f0118622:	50                   	push   %eax
f0118623:	e8 d6 ed fe ff       	call   f01073fe <kfree>
f0118628:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[79]);		// Hole 7 = 2 M - 4 KB
f011862b:	8b 85 c4 fc ff ff    	mov    -0x33c(%ebp),%eax
f0118631:	83 ec 0c             	sub    $0xc,%esp
f0118634:	50                   	push   %eax
f0118635:	e8 c4 ed fe ff       	call   f01073fe <kfree>
f011863a:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011863d:	e8 52 b6 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0118642:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118645:	74 17                	je     f011865e <test_kmalloc_nextfit+0x8b7>
f0118647:	83 ec 04             	sub    $0x4,%esp
f011864a:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011864f:	68 17 01 00 00       	push   $0x117
f0118654:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118659:	e8 48 7b fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((10*2*Mega) - PAGE_SIZE - INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011865e:	e8 6d 3a ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0118663:	89 c2                	mov    %eax,%edx
f0118665:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118668:	89 d1                	mov    %edx,%ecx
f011866a:	29 c1                	sub    %eax,%ecx
f011866c:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0118673:	10 00 00 
f0118676:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011867c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118681:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0118687:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011868d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118692:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0118698:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011869e:	29 d0                	sub    %edx,%eax
f01186a0:	89 c3                	mov    %eax,%ebx
f01186a2:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f01186a9:	10 00 00 
f01186ac:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01186b1:	0f b6 d0             	movzbl %al,%edx
f01186b4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01186ba:	01 d0                	add    %edx,%eax
f01186bc:	48                   	dec    %eax
f01186bd:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f01186c3:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01186c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01186ce:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f01186d4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01186da:	29 d0                	sub    %edx,%eax
f01186dc:	01 c3                	add    %eax,%ebx
f01186de:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01186e5:	10 00 00 
f01186e8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01186ed:	0f b6 c0             	movzbl %al,%eax
f01186f0:	c1 e0 04             	shl    $0x4,%eax
f01186f3:	89 c2                	mov    %eax,%edx
f01186f5:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01186fb:	01 d0                	add    %edx,%eax
f01186fd:	48                   	dec    %eax
f01186fe:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0118704:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011870a:	ba 00 00 00 00       	mov    $0x0,%edx
f011870f:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0118715:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011871b:	29 d0                	sub    %edx,%eax
f011871d:	01 d8                	add    %ebx,%eax
f011871f:	ba 00 b0 3f 01       	mov    $0x13fb000,%edx
f0118724:	29 c2                	sub    %eax,%edx
f0118726:	89 d0                	mov    %edx,%eax
f0118728:	c1 e8 0c             	shr    $0xc,%eax
f011872b:	39 c1                	cmp    %eax,%ecx
f011872d:	74 17                	je     f0118746 <test_kmalloc_nextfit+0x99f>
f011872f:	83 ec 04             	sub    $0x4,%esp
f0118732:	68 a4 a7 13 f0       	push   $0xf013a7a4
f0118737:	68 18 01 00 00       	push   $0x118
f011873c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118741:	e8 60 7a fe ff       	call   f01001a6 <_panic>

	// Test next fit
	freeDiskFrames = pf_calculate_free_frames() ;
f0118746:	e8 49 b5 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011874b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f011874e:	e8 7d 39 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0118753:	89 45 f0             	mov    %eax,-0x10(%ebp)
	void* tempAddress = kmalloc(Mega-kilo);		// Use Hole 1 -> Hole 1 = 1 M
f0118756:	83 ec 0c             	sub    $0xc,%esp
f0118759:	68 00 fc 0f 00       	push   $0xffc00
f011875e:	e8 81 ec fe ff       	call   f01073e4 <kmalloc>
f0118763:	83 c4 10             	add    $0x10,%esp
f0118766:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011876c:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0118773:	10 00 00 
f0118776:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011877c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118781:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0118787:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011878d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118792:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0118798:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011879e:	29 d0                	sub    %edx,%eax
f01187a0:	89 c1                	mov    %eax,%ecx
f01187a2:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01187a9:	10 00 00 
f01187ac:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01187b1:	0f b6 d0             	movzbl %al,%edx
f01187b4:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01187ba:	01 d0                	add    %edx,%eax
f01187bc:	48                   	dec    %eax
f01187bd:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01187c3:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01187c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01187ce:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01187d4:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01187da:	29 d0                	sub    %edx,%eax
f01187dc:	01 c1                	add    %eax,%ecx
f01187de:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01187e5:	10 00 00 
f01187e8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01187ed:	0f b6 c0             	movzbl %al,%eax
f01187f0:	c1 e0 04             	shl    $0x4,%eax
f01187f3:	89 c2                	mov    %eax,%edx
f01187f5:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01187fb:	01 d0                	add    %edx,%eax
f01187fd:	48                   	dec    %eax
f01187fe:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0118804:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011880a:	ba 00 00 00 00       	mov    $0x0,%edx
f011880f:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0118815:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011881b:	29 d0                	sub    %edx,%eax
f011881d:	01 c8                	add    %ecx,%eax
f011881f:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f0118825:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011882b:	39 c2                	cmp    %eax,%edx
f011882d:	74 17                	je     f0118846 <test_kmalloc_nextfit+0xa9f>
		panic("Next Fit not working correctly");
f011882f:	83 ec 04             	sub    $0x4,%esp
f0118832:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0118837:	68 1f 01 00 00       	push   $0x11f
f011883c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118841:	e8 60 79 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118846:	e8 49 b4 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011884b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011884e:	74 17                	je     f0118867 <test_kmalloc_nextfit+0xac0>
f0118850:	83 ec 04             	sub    $0x4,%esp
f0118853:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0118858:	68 20 01 00 00       	push   $0x120
f011885d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118862:	e8 3f 79 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118867:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011886a:	e8 61 38 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011886f:	29 c3                	sub    %eax,%ebx
f0118871:	89 d8                	mov    %ebx,%eax
f0118873:	3d 00 01 00 00       	cmp    $0x100,%eax
f0118878:	74 17                	je     f0118891 <test_kmalloc_nextfit+0xaea>
f011887a:	83 ec 04             	sub    $0x4,%esp
f011887d:	68 93 a7 13 f0       	push   $0xf013a793
f0118882:	68 21 01 00 00       	push   $0x121
f0118887:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011888c:	e8 15 79 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118891:	e8 fe b3 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0118896:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118899:	e8 32 38 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011889e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo);					// Use Hole 1 -> Hole 1 = 1 M - Kilo -> requires one page only
f01188a1:	83 ec 0c             	sub    $0xc,%esp
f01188a4:	68 00 04 00 00       	push   $0x400
f01188a9:	e8 36 eb fe ff       	call   f01073e4 <kmalloc>
f01188ae:	83 c4 10             	add    $0x10,%esp
f01188b1:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00100000)
f01188b7:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01188be:	10 00 00 
f01188c1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01188c7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01188cc:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01188d2:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01188d8:	ba 00 00 00 00       	mov    $0x0,%edx
f01188dd:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f01188e3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01188e9:	29 d0                	sub    %edx,%eax
f01188eb:	89 c1                	mov    %eax,%ecx
f01188ed:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f01188f4:	10 00 00 
f01188f7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01188fc:	0f b6 d0             	movzbl %al,%edx
f01188ff:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0118905:	01 d0                	add    %edx,%eax
f0118907:	48                   	dec    %eax
f0118908:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011890e:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118914:	ba 00 00 00 00       	mov    $0x0,%edx
f0118919:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011891f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0118925:	29 d0                	sub    %edx,%eax
f0118927:	01 c1                	add    %eax,%ecx
f0118929:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0118930:	10 00 00 
f0118933:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118938:	0f b6 c0             	movzbl %al,%eax
f011893b:	c1 e0 04             	shl    $0x4,%eax
f011893e:	89 c2                	mov    %eax,%edx
f0118940:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0118946:	01 d0                	add    %edx,%eax
f0118948:	48                   	dec    %eax
f0118949:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011894f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118955:	ba 00 00 00 00       	mov    $0x0,%edx
f011895a:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0118960:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0118966:	29 d0                	sub    %edx,%eax
f0118968:	01 c8                	add    %ecx,%eax
f011896a:	8d 90 00 40 10 f6    	lea    -0x9efc000(%eax),%edx
f0118970:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118976:	39 c2                	cmp    %eax,%edx
f0118978:	74 17                	je     f0118991 <test_kmalloc_nextfit+0xbea>
		panic("Next Fit not working correctly");
f011897a:	83 ec 04             	sub    $0x4,%esp
f011897d:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0118982:	68 27 01 00 00       	push   $0x127
f0118987:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011898c:	e8 15 78 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118991:	e8 fe b2 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0118996:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118999:	74 17                	je     f01189b2 <test_kmalloc_nextfit+0xc0b>
f011899b:	83 ec 04             	sub    $0x4,%esp
f011899e:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01189a3:	68 28 01 00 00       	push   $0x128
f01189a8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01189ad:	e8 f4 77 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f01189b2:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01189b5:	e8 16 37 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01189ba:	29 c3                	sub    %eax,%ebx
f01189bc:	89 d8                	mov    %ebx,%eax
f01189be:	83 f8 01             	cmp    $0x1,%eax
f01189c1:	74 17                	je     f01189da <test_kmalloc_nextfit+0xc33>
f01189c3:	83 ec 04             	sub    $0x4,%esp
f01189c6:	68 93 a7 13 f0       	push   $0xf013a793
f01189cb:	68 29 01 00 00       	push   $0x129
f01189d0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01189d5:	e8 cc 77 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f01189da:	e8 b5 b2 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01189df:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01189e2:	e8 e9 36 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01189e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(5*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f01189ea:	83 ec 0c             	sub    $0xc,%esp
f01189ed:	68 00 00 50 00       	push   $0x500000
f01189f2:	e8 ed e9 fe ff       	call   f01073e4 <kmalloc>
f01189f7:	83 c4 10             	add    $0x10,%esp
f01189fa:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f0118a00:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f0118a07:	10 00 00 
f0118a0a:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f0118a10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118a15:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f0118a1b:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118a21:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a26:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f0118a2c:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0118a32:	29 d0                	sub    %edx,%eax
f0118a34:	89 c1                	mov    %eax,%ecx
f0118a36:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0118a3d:	10 00 00 
f0118a40:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118a45:	0f b6 d0             	movzbl %al,%edx
f0118a48:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0118a4e:	01 d0                	add    %edx,%eax
f0118a50:	48                   	dec    %eax
f0118a51:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0118a57:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118a5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0118a62:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0118a68:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0118a6e:	29 d0                	sub    %edx,%eax
f0118a70:	01 c1                	add    %eax,%ecx
f0118a72:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f0118a79:	10 00 00 
f0118a7c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118a81:	0f b6 c0             	movzbl %al,%eax
f0118a84:	c1 e0 04             	shl    $0x4,%eax
f0118a87:	89 c2                	mov    %eax,%edx
f0118a89:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0118a8f:	01 d0                	add    %edx,%eax
f0118a91:	48                   	dec    %eax
f0118a92:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f0118a98:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118a9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0118aa3:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f0118aa9:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0118aaf:	29 d0                	sub    %edx,%eax
f0118ab1:	01 c8                	add    %ecx,%eax
f0118ab3:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f0118ab9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118abf:	39 c2                	cmp    %eax,%edx
f0118ac1:	74 17                	je     f0118ada <test_kmalloc_nextfit+0xd33>
		panic("Next Fit not working correctly");
f0118ac3:	83 ec 04             	sub    $0x4,%esp
f0118ac6:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0118acb:	68 2f 01 00 00       	push   $0x12f
f0118ad0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118ad5:	e8 cc 76 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118ada:	e8 b5 b1 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0118adf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118ae2:	74 17                	je     f0118afb <test_kmalloc_nextfit+0xd54>
f0118ae4:	83 ec 04             	sub    $0x4,%esp
f0118ae7:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0118aec:	68 30 01 00 00       	push   $0x130
f0118af1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118af6:	e8 ab 76 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (5*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118afb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118afe:	e8 cd 35 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0118b03:	29 c3                	sub    %eax,%ebx
f0118b05:	89 d8                	mov    %ebx,%eax
f0118b07:	3d 00 05 00 00       	cmp    $0x500,%eax
f0118b0c:	74 17                	je     f0118b25 <test_kmalloc_nextfit+0xd7e>
f0118b0e:	83 ec 04             	sub    $0x4,%esp
f0118b11:	68 93 a7 13 f0       	push   $0xf013a793
f0118b16:	68 31 01 00 00       	push   $0x131
f0118b1b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118b20:	e8 81 76 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118b25:	e8 6a b1 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0118b2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118b2d:	e8 9e 35 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0118b32:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(1*Mega); 			   // Use Hole 4 -> Hole 4 = 0 M
f0118b35:	83 ec 0c             	sub    $0xc,%esp
f0118b38:	68 00 00 10 00       	push   $0x100000
f0118b3d:	e8 a2 e8 fe ff       	call   f01073e4 <kmalloc>
f0118b42:	83 c4 10             	add    $0x10,%esp
f0118b45:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01900000)
f0118b4b:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f0118b52:	10 00 00 
f0118b55:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0118b5b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118b60:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f0118b66:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118b6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0118b71:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f0118b77:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0118b7d:	29 d0                	sub    %edx,%eax
f0118b7f:	89 c1                	mov    %eax,%ecx
f0118b81:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0118b88:	10 00 00 
f0118b8b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118b90:	0f b6 d0             	movzbl %al,%edx
f0118b93:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0118b99:	01 d0                	add    %edx,%eax
f0118b9b:	48                   	dec    %eax
f0118b9c:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0118ba2:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0118ba8:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bad:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f0118bb3:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0118bb9:	29 d0                	sub    %edx,%eax
f0118bbb:	01 c1                	add    %eax,%ecx
f0118bbd:	c7 85 84 fe ff ff 00 	movl   $0x1000,-0x17c(%ebp)
f0118bc4:	10 00 00 
f0118bc7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118bcc:	0f b6 c0             	movzbl %al,%eax
f0118bcf:	c1 e0 04             	shl    $0x4,%eax
f0118bd2:	89 c2                	mov    %eax,%edx
f0118bd4:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0118bda:	01 d0                	add    %edx,%eax
f0118bdc:	48                   	dec    %eax
f0118bdd:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
f0118be3:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0118be9:	ba 00 00 00 00       	mov    $0x0,%edx
f0118bee:	f7 b5 84 fe ff ff    	divl   -0x17c(%ebp)
f0118bf4:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0118bfa:	29 d0                	sub    %edx,%eax
f0118bfc:	01 c8                	add    %ecx,%eax
f0118bfe:	8d 90 00 40 90 f7    	lea    -0x86fc000(%eax),%edx
f0118c04:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118c0a:	39 c2                	cmp    %eax,%edx
f0118c0c:	74 17                	je     f0118c25 <test_kmalloc_nextfit+0xe7e>
		panic("Next Fit not working correctly");
f0118c0e:	83 ec 04             	sub    $0x4,%esp
f0118c11:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0118c16:	68 37 01 00 00       	push   $0x137
f0118c1b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118c20:	e8 81 75 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c25:	e8 6a b0 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0118c2a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118c2d:	74 17                	je     f0118c46 <test_kmalloc_nextfit+0xe9f>
f0118c2f:	83 ec 04             	sub    $0x4,%esp
f0118c32:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0118c37:	68 38 01 00 00       	push   $0x138
f0118c3c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118c41:	e8 60 75 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega)/PAGE_SIZE) panic("Wrong allocation");
f0118c46:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118c49:	e8 82 34 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0118c4e:	29 c3                	sub    %eax,%ebx
f0118c50:	89 d8                	mov    %ebx,%eax
f0118c52:	3d 00 01 00 00       	cmp    $0x100,%eax
f0118c57:	74 17                	je     f0118c70 <test_kmalloc_nextfit+0xec9>
f0118c59:	83 ec 04             	sub    $0x4,%esp
f0118c5c:	68 93 a7 13 f0       	push   $0xf013a793
f0118c61:	68 39 01 00 00       	push   $0x139
f0118c66:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118c6b:	e8 36 75 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118c70:	e8 1f b0 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0118c75:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118c78:	e8 53 34 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0118c7d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[15]);					// Make a new hole => 2 M
f0118c80:	8b 85 c4 fb ff ff    	mov    -0x43c(%ebp),%eax
f0118c86:	83 ec 0c             	sub    $0xc,%esp
f0118c89:	50                   	push   %eax
f0118c8a:	e8 6f e7 fe ff       	call   f01073fe <kfree>
f0118c8f:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118c92:	e8 fd af fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0118c97:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118c9a:	74 17                	je     f0118cb3 <test_kmalloc_nextfit+0xf0c>
f0118c9c:	83 ec 04             	sub    $0x4,%esp
f0118c9f:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0118ca4:	68 3e 01 00 00       	push   $0x13e
f0118ca9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118cae:	e8 f3 74 fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) !=  (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f0118cb3:	e8 18 34 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0118cb8:	89 c2                	mov    %eax,%edx
f0118cba:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0118cbd:	29 c2                	sub    %eax,%edx
f0118cbf:	89 d0                	mov    %edx,%eax
f0118cc1:	3d 00 02 00 00       	cmp    $0x200,%eax
f0118cc6:	74 17                	je     f0118cdf <test_kmalloc_nextfit+0xf38>
f0118cc8:	83 ec 04             	sub    $0x4,%esp
f0118ccb:	68 a4 a7 13 f0       	push   $0xf013a7a4
f0118cd0:	68 3f 01 00 00       	push   $0x13f
f0118cd5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118cda:	e8 c7 74 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118cdf:	e8 b0 af fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0118ce4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118ce7:	e8 e4 33 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0118cec:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use new Hole = 2 M - 4 kilo
f0118cef:	83 ec 0c             	sub    $0xc,%esp
f0118cf2:	68 00 04 00 00       	push   $0x400
f0118cf7:	e8 e8 e6 fe ff       	call   f01073e4 <kmalloc>
f0118cfc:	83 c4 10             	add    $0x10,%esp
f0118cff:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E00000)
f0118d05:	c7 85 7c fe ff ff 00 	movl   $0x1000,-0x184(%ebp)
f0118d0c:	10 00 00 
f0118d0f:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0118d15:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118d1a:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
f0118d20:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0118d26:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d2b:	f7 b5 7c fe ff ff    	divl   -0x184(%ebp)
f0118d31:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0118d37:	29 d0                	sub    %edx,%eax
f0118d39:	89 c1                	mov    %eax,%ecx
f0118d3b:	c7 85 74 fe ff ff 00 	movl   $0x1000,-0x18c(%ebp)
f0118d42:	10 00 00 
f0118d45:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118d4a:	0f b6 d0             	movzbl %al,%edx
f0118d4d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0118d53:	01 d0                	add    %edx,%eax
f0118d55:	48                   	dec    %eax
f0118d56:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
f0118d5c:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0118d62:	ba 00 00 00 00       	mov    $0x0,%edx
f0118d67:	f7 b5 74 fe ff ff    	divl   -0x18c(%ebp)
f0118d6d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0118d73:	29 d0                	sub    %edx,%eax
f0118d75:	01 c1                	add    %eax,%ecx
f0118d77:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0118d7e:	10 00 00 
f0118d81:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118d86:	0f b6 c0             	movzbl %al,%eax
f0118d89:	c1 e0 04             	shl    $0x4,%eax
f0118d8c:	89 c2                	mov    %eax,%edx
f0118d8e:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0118d94:	01 d0                	add    %edx,%eax
f0118d96:	48                   	dec    %eax
f0118d97:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0118d9d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0118da3:	ba 00 00 00 00       	mov    $0x0,%edx
f0118da8:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0118dae:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0118db4:	29 d0                	sub    %edx,%eax
f0118db6:	01 c8                	add    %ecx,%eax
f0118db8:	8d 90 00 40 e0 f7    	lea    -0x81fc000(%eax),%edx
f0118dbe:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118dc4:	39 c2                	cmp    %eax,%edx
f0118dc6:	74 17                	je     f0118ddf <test_kmalloc_nextfit+0x1038>
		panic("Next Fit not working correctly");
f0118dc8:	83 ec 04             	sub    $0x4,%esp
f0118dcb:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0118dd0:	68 45 01 00 00       	push   $0x145
f0118dd5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118dda:	e8 c7 73 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118ddf:	e8 b0 ae fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0118de4:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118de7:	74 17                	je     f0118e00 <test_kmalloc_nextfit+0x1059>
f0118de9:	83 ec 04             	sub    $0x4,%esp
f0118dec:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0118df1:	68 46 01 00 00       	push   $0x146
f0118df6:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118dfb:	e8 a6 73 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation");
f0118e00:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118e03:	e8 c8 32 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0118e08:	29 c3                	sub    %eax,%ebx
f0118e0a:	89 d8                	mov    %ebx,%eax
f0118e0c:	83 f8 01             	cmp    $0x1,%eax
f0118e0f:	74 17                	je     f0118e28 <test_kmalloc_nextfit+0x1081>
f0118e11:	83 ec 04             	sub    $0x4,%esp
f0118e14:	68 93 a7 13 f0       	push   $0xf013a793
f0118e19:	68 47 01 00 00       	push   $0x147
f0118e1e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118e23:	e8 7e 73 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118e28:	e8 67 ae fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0118e2d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118e30:	e8 9b 32 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0118e35:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(Mega + 1016*kilo); 	// Use new Hole = 4 kilo
f0118e38:	83 ec 0c             	sub    $0xc,%esp
f0118e3b:	68 00 e0 1f 00       	push   $0x1fe000
f0118e40:	e8 9f e5 fe ff       	call   f01073e4 <kmalloc>
f0118e45:	83 c4 10             	add    $0x10,%esp
f0118e48:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01E01000)
f0118e4e:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0118e55:	10 00 00 
f0118e58:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0118e5e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118e63:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0118e69:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118e6f:	ba 00 00 00 00       	mov    $0x0,%edx
f0118e74:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0118e7a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0118e80:	29 d0                	sub    %edx,%eax
f0118e82:	89 c1                	mov    %eax,%ecx
f0118e84:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0118e8b:	10 00 00 
f0118e8e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118e93:	0f b6 d0             	movzbl %al,%edx
f0118e96:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0118e9c:	01 d0                	add    %edx,%eax
f0118e9e:	48                   	dec    %eax
f0118e9f:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0118ea5:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118eab:	ba 00 00 00 00       	mov    $0x0,%edx
f0118eb0:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0118eb6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0118ebc:	29 d0                	sub    %edx,%eax
f0118ebe:	01 c1                	add    %eax,%ecx
f0118ec0:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f0118ec7:	10 00 00 
f0118eca:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118ecf:	0f b6 c0             	movzbl %al,%eax
f0118ed2:	c1 e0 04             	shl    $0x4,%eax
f0118ed5:	89 c2                	mov    %eax,%edx
f0118ed7:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0118edd:	01 d0                	add    %edx,%eax
f0118edf:	48                   	dec    %eax
f0118ee0:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f0118ee6:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118eec:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ef1:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0118ef7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0118efd:	29 d0                	sub    %edx,%eax
f0118eff:	01 c8                	add    %ecx,%eax
f0118f01:	8d 90 00 50 e0 f7    	lea    -0x81fb000(%eax),%edx
f0118f07:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0118f0d:	39 c2                	cmp    %eax,%edx
f0118f0f:	74 17                	je     f0118f28 <test_kmalloc_nextfit+0x1181>
		panic("Next Fit not working correctly");
f0118f11:	83 ec 04             	sub    $0x4,%esp
f0118f14:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0118f19:	68 4d 01 00 00       	push   $0x14d
f0118f1e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118f23:	e8 7e 72 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0118f28:	e8 67 ad fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0118f2d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0118f30:	74 17                	je     f0118f49 <test_kmalloc_nextfit+0x11a2>
f0118f32:	83 ec 04             	sub    $0x4,%esp
f0118f35:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0118f3a:	68 4e 01 00 00       	push   $0x14e
f0118f3f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118f44:	e8 5d 72 fe ff       	call   f01001a6 <_panic>

	if ((freeFrames - sys_calculate_free_frames()) != (1*Mega+1016*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0118f49:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0118f4c:	e8 7f 31 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0118f51:	29 c3                	sub    %eax,%ebx
f0118f53:	89 d8                	mov    %ebx,%eax
f0118f55:	3d fe 01 00 00       	cmp    $0x1fe,%eax
f0118f5a:	74 17                	je     f0118f73 <test_kmalloc_nextfit+0x11cc>
f0118f5c:	83 ec 04             	sub    $0x4,%esp
f0118f5f:	68 93 a7 13 f0       	push   $0xf013a793
f0118f64:	68 50 01 00 00       	push   $0x150
f0118f69:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0118f6e:	e8 33 72 fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0118f73:	e8 1c ad fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0118f78:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0118f7b:	e8 50 31 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0118f80:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 5 -> Hole 5 = 1.5 M
f0118f83:	83 ec 0c             	sub    $0xc,%esp
f0118f86:	68 00 00 08 00       	push   $0x80000
f0118f8b:	e8 54 e4 fe ff       	call   f01073e4 <kmalloc>
f0118f90:	83 c4 10             	add    $0x10,%esp
f0118f93:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x02800000)
f0118f99:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0118fa0:	10 00 00 
f0118fa3:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0118fa9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0118fae:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0118fb4:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118fba:	ba 00 00 00 00       	mov    $0x0,%edx
f0118fbf:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0118fc5:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0118fcb:	29 d0                	sub    %edx,%eax
f0118fcd:	89 c1                	mov    %eax,%ecx
f0118fcf:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0118fd6:	10 00 00 
f0118fd9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0118fde:	0f b6 d0             	movzbl %al,%edx
f0118fe1:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0118fe7:	01 d0                	add    %edx,%eax
f0118fe9:	48                   	dec    %eax
f0118fea:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0118ff0:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0118ff6:	ba 00 00 00 00       	mov    $0x0,%edx
f0118ffb:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0119001:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0119007:	29 d0                	sub    %edx,%eax
f0119009:	01 c1                	add    %eax,%ecx
f011900b:	c7 85 3c fe ff ff 00 	movl   $0x1000,-0x1c4(%ebp)
f0119012:	10 00 00 
f0119015:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011901a:	0f b6 c0             	movzbl %al,%eax
f011901d:	c1 e0 04             	shl    $0x4,%eax
f0119020:	89 c2                	mov    %eax,%edx
f0119022:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0119028:	01 d0                	add    %edx,%eax
f011902a:	48                   	dec    %eax
f011902b:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
f0119031:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119037:	ba 00 00 00 00       	mov    $0x0,%edx
f011903c:	f7 b5 3c fe ff ff    	divl   -0x1c4(%ebp)
f0119042:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0119048:	29 d0                	sub    %edx,%eax
f011904a:	01 c8                	add    %ecx,%eax
f011904c:	8d 90 00 40 80 f8    	lea    -0x77fc000(%eax),%edx
f0119052:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0119058:	39 c2                	cmp    %eax,%edx
f011905a:	74 17                	je     f0119073 <test_kmalloc_nextfit+0x12cc>
		panic("Next Fit not working correctly");
f011905c:	83 ec 04             	sub    $0x4,%esp
f011905f:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0119064:	68 56 01 00 00       	push   $0x156
f0119069:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011906e:	e8 33 71 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119073:	e8 1c ac fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119078:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011907b:	74 17                	je     f0119094 <test_kmalloc_nextfit+0x12ed>
f011907d:	83 ec 04             	sub    $0x4,%esp
f0119080:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0119085:	68 57 01 00 00       	push   $0x157
f011908a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011908f:	e8 12 71 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f0119094:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f0119097:	e8 34 30 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011909c:	29 c3                	sub    %eax,%ebx
f011909e:	89 d8                	mov    %ebx,%eax
f01190a0:	3d 80 00 00 00       	cmp    $0x80,%eax
f01190a5:	74 17                	je     f01190be <test_kmalloc_nextfit+0x1317>
f01190a7:	83 ec 04             	sub    $0x4,%esp
f01190aa:	68 93 a7 13 f0       	push   $0xf013a793
f01190af:	68 58 01 00 00       	push   $0x158
f01190b4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01190b9:	e8 e8 70 fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE1: (next fit without looping back) is succeeded...\n") ;
f01190be:	83 ec 0c             	sub    $0xc,%esp
f01190c1:	68 04 a8 13 f0       	push   $0xf013a804
f01190c6:	e8 62 7b fe ff       	call   f0100c2d <cprintf>
f01190cb:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit is looping back to check for free space
	freeDiskFrames = pf_calculate_free_frames() ;
f01190ce:	e8 c1 ab fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01190d3:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01190d6:	e8 f5 2f ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01190db:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(3*Mega + 512*kilo); 			   // Use Hole 2 -> Hole 2 = 0.5 M
f01190de:	83 ec 0c             	sub    $0xc,%esp
f01190e1:	68 00 00 38 00       	push   $0x380000
f01190e6:	e8 f9 e2 fe ff       	call   f01073e4 <kmalloc>
f01190eb:	83 c4 10             	add    $0x10,%esp
f01190ee:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f01190f4:	c7 85 34 fe ff ff 00 	movl   $0x1000,-0x1cc(%ebp)
f01190fb:	10 00 00 
f01190fe:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f0119104:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119109:	89 85 30 fe ff ff    	mov    %eax,-0x1d0(%ebp)
f011910f:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119115:	ba 00 00 00 00       	mov    $0x0,%edx
f011911a:	f7 b5 34 fe ff ff    	divl   -0x1cc(%ebp)
f0119120:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0119126:	29 d0                	sub    %edx,%eax
f0119128:	89 c1                	mov    %eax,%ecx
f011912a:	c7 85 2c fe ff ff 00 	movl   $0x1000,-0x1d4(%ebp)
f0119131:	10 00 00 
f0119134:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119139:	0f b6 d0             	movzbl %al,%edx
f011913c:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0119142:	01 d0                	add    %edx,%eax
f0119144:	48                   	dec    %eax
f0119145:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
f011914b:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119151:	ba 00 00 00 00       	mov    $0x0,%edx
f0119156:	f7 b5 2c fe ff ff    	divl   -0x1d4(%ebp)
f011915c:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0119162:	29 d0                	sub    %edx,%eax
f0119164:	01 c1                	add    %eax,%ecx
f0119166:	c7 85 24 fe ff ff 00 	movl   $0x1000,-0x1dc(%ebp)
f011916d:	10 00 00 
f0119170:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119175:	0f b6 c0             	movzbl %al,%eax
f0119178:	c1 e0 04             	shl    $0x4,%eax
f011917b:	89 c2                	mov    %eax,%edx
f011917d:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0119183:	01 d0                	add    %edx,%eax
f0119185:	48                   	dec    %eax
f0119186:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
f011918c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0119192:	ba 00 00 00 00       	mov    $0x0,%edx
f0119197:	f7 b5 24 fe ff ff    	divl   -0x1dc(%ebp)
f011919d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01191a3:	29 d0                	sub    %edx,%eax
f01191a5:	01 c8                	add    %ecx,%eax
f01191a7:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f01191ad:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01191b3:	39 c2                	cmp    %eax,%edx
f01191b5:	74 17                	je     f01191ce <test_kmalloc_nextfit+0x1427>
		panic("Next Fit not working correctly");
f01191b7:	83 ec 04             	sub    $0x4,%esp
f01191ba:	68 e4 a7 13 f0       	push   $0xf013a7e4
f01191bf:	68 62 01 00 00       	push   $0x162
f01191c4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01191c9:	e8 d8 6f fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01191ce:	e8 c1 aa fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01191d3:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f01191d6:	74 17                	je     f01191ef <test_kmalloc_nextfit+0x1448>
f01191d8:	83 ec 04             	sub    $0x4,%esp
f01191db:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01191e0:	68 63 01 00 00       	push   $0x163
f01191e5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01191ea:	e8 b7 6f fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (3*Mega+512*kilo)/PAGE_SIZE) panic("Wrong allocation");
f01191ef:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01191f2:	e8 d9 2e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01191f7:	29 c3                	sub    %eax,%ebx
f01191f9:	89 d8                	mov    %ebx,%eax
f01191fb:	3d 80 03 00 00       	cmp    $0x380,%eax
f0119200:	74 17                	je     f0119219 <test_kmalloc_nextfit+0x1472>
f0119202:	83 ec 04             	sub    $0x4,%esp
f0119205:	68 93 a7 13 f0       	push   $0xf013a793
f011920a:	68 64 01 00 00       	push   $0x164
f011920f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119214:	e8 8d 6f fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119219:	e8 76 aa fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011921e:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119221:	e8 aa 2e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119226:	89 45 f0             	mov    %eax,-0x10(%ebp)
	kfree(ptr_allocations[24]);		// Increase size of Hole 6 to 4 M
f0119229:	8b 85 e8 fb ff ff    	mov    -0x418(%ebp),%eax
f011922f:	83 ec 0c             	sub    $0xc,%esp
f0119232:	50                   	push   %eax
f0119233:	e8 c6 e1 fe ff       	call   f01073fe <kfree>
f0119238:	83 c4 10             	add    $0x10,%esp
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011923b:	e8 54 aa fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119240:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119243:	74 17                	je     f011925c <test_kmalloc_nextfit+0x14b5>
f0119245:	83 ec 04             	sub    $0x4,%esp
f0119248:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011924d:	68 69 01 00 00       	push   $0x169
f0119252:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119257:	e8 4a 6f fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != (2*Mega)/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011925c:	e8 6f 2e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119261:	89 c2                	mov    %eax,%edx
f0119263:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119266:	29 c2                	sub    %eax,%edx
f0119268:	89 d0                	mov    %edx,%eax
f011926a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011926f:	74 17                	je     f0119288 <test_kmalloc_nextfit+0x14e1>
f0119271:	83 ec 04             	sub    $0x4,%esp
f0119274:	68 a4 a7 13 f0       	push   $0xf013a7a4
f0119279:	68 6a 01 00 00       	push   $0x16a
f011927e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119283:	e8 1e 6f fe ff       	call   f01001a6 <_panic>

	freeDiskFrames = pf_calculate_free_frames() ;
f0119288:	e8 07 aa fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011928d:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f0119290:	e8 3b 2e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119295:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(4*Mega-kilo);		// Use Hole 6 -> Hole 6 = 0 M
f0119298:	83 ec 0c             	sub    $0xc,%esp
f011929b:	68 00 fc 3f 00       	push   $0x3ffc00
f01192a0:	e8 3f e1 fe ff       	call   f01073e4 <kmalloc>
f01192a5:	83 c4 10             	add    $0x10,%esp
f01192a8:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03000000)
f01192ae:	c7 85 1c fe ff ff 00 	movl   $0x1000,-0x1e4(%ebp)
f01192b5:	10 00 00 
f01192b8:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01192be:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01192c3:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
f01192c9:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01192cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01192d4:	f7 b5 1c fe ff ff    	divl   -0x1e4(%ebp)
f01192da:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01192e0:	29 d0                	sub    %edx,%eax
f01192e2:	89 c1                	mov    %eax,%ecx
f01192e4:	c7 85 14 fe ff ff 00 	movl   $0x1000,-0x1ec(%ebp)
f01192eb:	10 00 00 
f01192ee:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01192f3:	0f b6 d0             	movzbl %al,%edx
f01192f6:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01192fc:	01 d0                	add    %edx,%eax
f01192fe:	48                   	dec    %eax
f01192ff:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
f0119305:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011930b:	ba 00 00 00 00       	mov    $0x0,%edx
f0119310:	f7 b5 14 fe ff ff    	divl   -0x1ec(%ebp)
f0119316:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f011931c:	29 d0                	sub    %edx,%eax
f011931e:	01 c1                	add    %eax,%ecx
f0119320:	c7 85 0c fe ff ff 00 	movl   $0x1000,-0x1f4(%ebp)
f0119327:	10 00 00 
f011932a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011932f:	0f b6 c0             	movzbl %al,%eax
f0119332:	c1 e0 04             	shl    $0x4,%eax
f0119335:	89 c2                	mov    %eax,%edx
f0119337:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f011933d:	01 d0                	add    %edx,%eax
f011933f:	48                   	dec    %eax
f0119340:	89 85 08 fe ff ff    	mov    %eax,-0x1f8(%ebp)
f0119346:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011934c:	ba 00 00 00 00       	mov    $0x0,%edx
f0119351:	f7 b5 0c fe ff ff    	divl   -0x1f4(%ebp)
f0119357:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f011935d:	29 d0                	sub    %edx,%eax
f011935f:	01 c8                	add    %ecx,%eax
f0119361:	8d 90 00 40 00 f9    	lea    -0x6ffc000(%eax),%edx
f0119367:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011936d:	39 c2                	cmp    %eax,%edx
f011936f:	74 17                	je     f0119388 <test_kmalloc_nextfit+0x15e1>
		panic("Next Fit not working correctly");
f0119371:	83 ec 04             	sub    $0x4,%esp
f0119374:	68 e4 a7 13 f0       	push   $0xf013a7e4
f0119379:	68 70 01 00 00       	push   $0x170
f011937e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119383:	e8 1e 6e fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119388:	e8 07 a9 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011938d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119390:	74 17                	je     f01193a9 <test_kmalloc_nextfit+0x1602>
f0119392:	83 ec 04             	sub    $0x4,%esp
f0119395:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011939a:	68 71 01 00 00       	push   $0x171
f011939f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01193a4:	e8 fd 6d fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (4*Mega)/PAGE_SIZE) panic("Wrong allocation");
f01193a9:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f01193ac:	e8 1f 2d ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01193b1:	29 c3                	sub    %eax,%ebx
f01193b3:	89 d8                	mov    %ebx,%eax
f01193b5:	3d 00 04 00 00       	cmp    $0x400,%eax
f01193ba:	74 17                	je     f01193d3 <test_kmalloc_nextfit+0x162c>
f01193bc:	83 ec 04             	sub    $0x4,%esp
f01193bf:	68 93 a7 13 f0       	push   $0xf013a793
f01193c4:	68 72 01 00 00       	push   $0x172
f01193c9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01193ce:	e8 d3 6d fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE2: (next fit WITH looping back) is succeeded...\n") ;
f01193d3:	83 ec 0c             	sub    $0xc,%esp
f01193d6:	68 40 a8 13 f0       	push   $0xf013a840
f01193db:	e8 4d 78 fe ff       	call   f0100c2d <cprintf>
f01193e0:	83 c4 10             	add    $0x10,%esp
	/******************************/

	// Check that next fit returns null in case all holes are not free
	freeDiskFrames = pf_calculate_free_frames() ;
f01193e3:	e8 ac a8 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01193e8:	89 45 ec             	mov    %eax,-0x14(%ebp)
	freeFrames = sys_calculate_free_frames() ;
f01193eb:	e8 e0 2c ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01193f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tempAddress = kmalloc(6*Mega); 			   // No Suitable Hole is available
f01193f3:	83 ec 0c             	sub    $0xc,%esp
f01193f6:	68 00 00 60 00       	push   $0x600000
f01193fb:	e8 e4 df fe ff       	call   f01073e4 <kmalloc>
f0119400:	83 c4 10             	add    $0x10,%esp
f0119403:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
	if((uint32)tempAddress != 0x0)
f0119409:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011940f:	85 c0                	test   %eax,%eax
f0119411:	74 17                	je     f011942a <test_kmalloc_nextfit+0x1683>
		panic("Next Fit not working correctly");
f0119413:	83 ec 04             	sub    $0x4,%esp
f0119416:	68 e4 a7 13 f0       	push   $0xf013a7e4
f011941b:	68 7c 01 00 00       	push   $0x17c
f0119420:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119425:	e8 7c 6d fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011942a:	e8 65 a8 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011942f:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f0119432:	74 17                	je     f011944b <test_kmalloc_nextfit+0x16a4>
f0119434:	83 ec 04             	sub    $0x4,%esp
f0119437:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011943c:	68 7d 01 00 00       	push   $0x17d
f0119441:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119446:	e8 5b 6d fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != 0) panic("Wrong allocation");
f011944b:	e8 80 2c ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119450:	89 c2                	mov    %eax,%edx
f0119452:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0119455:	39 c2                	cmp    %eax,%edx
f0119457:	74 17                	je     f0119470 <test_kmalloc_nextfit+0x16c9>
f0119459:	83 ec 04             	sub    $0x4,%esp
f011945c:	68 93 a7 13 f0       	push   $0xf013a793
f0119461:	68 7e 01 00 00       	push   $0x17e
f0119466:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011946b:	e8 36 6d fe ff       	call   f01001a6 <_panic>

	cprintf("\nCASE3: (next fit with insufficient space) is succeeded...\n") ;
f0119470:	83 ec 0c             	sub    $0xc,%esp
f0119473:	68 78 a8 13 f0       	push   $0xf013a878
f0119478:	e8 b0 77 fe ff       	call   f0100c2d <cprintf>
f011947d:	83 c4 10             	add    $0x10,%esp
	/******************************/

	cprintf("Congratulations!! test Next Fit completed successfully.\n");
f0119480:	83 ec 0c             	sub    $0xc,%esp
f0119483:	68 b4 a8 13 f0       	push   $0xf013a8b4
f0119488:	e8 a0 77 fe ff       	call   f0100c2d <cprintf>
f011948d:	83 c4 10             	add    $0x10,%esp
	return 1;
f0119490:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0119495:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0119498:	5b                   	pop    %ebx
f0119499:	5f                   	pop    %edi
f011949a:	5d                   	pop    %ebp
f011949b:	c3                   	ret    

f011949c <test_kmalloc_bestfit1>:

int test_kmalloc_bestfit1()
{
f011949c:	55                   	push   %ebp
f011949d:	89 e5                	mov    %esp,%ebp
f011949f:	57                   	push   %edi
f01194a0:	53                   	push   %ebx
f01194a1:	81 ec 90 01 00 00    	sub    $0x190,%esp
	cprintf("==============================================\n");
f01194a7:	83 ec 0c             	sub    $0xc,%esp
f01194aa:	68 18 a4 13 f0       	push   $0xf013a418
f01194af:	e8 79 77 fe ff       	call   f0100c2d <cprintf>
f01194b4:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01194b7:	83 ec 0c             	sub    $0xc,%esp
f01194ba:	68 48 a4 13 f0       	push   $0xf013a448
f01194bf:	e8 69 77 fe ff       	call   f0100c2d <cprintf>
f01194c4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01194c7:	83 ec 0c             	sub    $0xc,%esp
f01194ca:	68 18 a4 13 f0       	push   $0xf013a418
f01194cf:	e8 59 77 fe ff       	call   f0100c2d <cprintf>
f01194d4:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f01194d7:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01194dd:	b9 14 00 00 00       	mov    $0x14,%ecx
f01194e2:	b8 00 00 00 00       	mov    $0x0,%eax
f01194e7:	89 d7                	mov    %edx,%edi
f01194e9:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01194eb:	e8 e0 2b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01194f0:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01194f3:	e8 9c a7 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01194f8:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(3*Mega-kilo);
f01194fb:	83 ec 0c             	sub    $0xc,%esp
f01194fe:	68 00 fc 2f 00       	push   $0x2ffc00
f0119503:	e8 dc de fe ff       	call   f01073e4 <kmalloc>
f0119508:	83 c4 10             	add    $0x10,%esp
f011950b:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f0119511:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0119517:	89 c1                	mov    %eax,%ecx
f0119519:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f0119520:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0119523:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119528:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011952b:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011952e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119533:	f7 75 ec             	divl   -0x14(%ebp)
f0119536:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0119539:	29 d0                	sub    %edx,%eax
f011953b:	89 c3                	mov    %eax,%ebx
f011953d:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f0119544:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119549:	0f b6 d0             	movzbl %al,%edx
f011954c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011954f:	01 d0                	add    %edx,%eax
f0119551:	48                   	dec    %eax
f0119552:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0119555:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119558:	ba 00 00 00 00       	mov    $0x0,%edx
f011955d:	f7 75 e4             	divl   -0x1c(%ebp)
f0119560:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0119563:	29 d0                	sub    %edx,%eax
f0119565:	01 c3                	add    %eax,%ebx
f0119567:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011956e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119573:	0f b6 c0             	movzbl %al,%eax
f0119576:	c1 e0 04             	shl    $0x4,%eax
f0119579:	89 c2                	mov    %eax,%edx
f011957b:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011957e:	01 d0                	add    %edx,%eax
f0119580:	48                   	dec    %eax
f0119581:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0119584:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119587:	ba 00 00 00 00       	mov    $0x0,%edx
f011958c:	f7 75 dc             	divl   -0x24(%ebp)
f011958f:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0119592:	29 d0                	sub    %edx,%eax
f0119594:	01 d8                	add    %ebx,%eax
f0119596:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011959b:	39 c1                	cmp    %eax,%ecx
f011959d:	74 17                	je     f01195b6 <test_kmalloc_bestfit1+0x11a>
f011959f:	83 ec 04             	sub    $0x4,%esp
f01195a2:	68 f0 a8 13 f0       	push   $0xf013a8f0
f01195a7:	68 98 01 00 00       	push   $0x198
f01195ac:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01195b1:	e8 f0 6b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01195b6:	e8 d9 a6 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01195bb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01195be:	74 17                	je     f01195d7 <test_kmalloc_bestfit1+0x13b>
f01195c0:	83 ec 04             	sub    $0x4,%esp
f01195c3:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01195c8:	68 99 01 00 00       	push   $0x199
f01195cd:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01195d2:	e8 cf 6b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f01195d7:	e8 f4 2a ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01195dc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01195df:	29 c2                	sub    %eax,%edx
f01195e1:	89 d0                	mov    %edx,%eax
f01195e3:	3d 00 03 00 00       	cmp    $0x300,%eax
f01195e8:	74 17                	je     f0119601 <test_kmalloc_bestfit1+0x165>
f01195ea:	83 ec 04             	sub    $0x4,%esp
f01195ed:	68 20 a9 13 f0       	push   $0xf013a920
f01195f2:	68 9a 01 00 00       	push   $0x19a
f01195f7:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01195fc:	e8 a5 6b fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0119601:	e8 ca 2a ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119606:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119609:	e8 86 a6 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011960e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(3*Mega-kilo);
f0119611:	83 ec 0c             	sub    $0xc,%esp
f0119614:	68 00 fc 2f 00       	push   $0x2ffc00
f0119619:	e8 c6 dd fe ff       	call   f01073e4 <kmalloc>
f011961e:	83 c4 10             	add    $0x10,%esp
f0119621:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[1] !=  (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f0119627:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011962d:	89 c1                	mov    %eax,%ecx
f011962f:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0119636:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0119639:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011963e:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0119641:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0119644:	ba 00 00 00 00       	mov    $0x0,%edx
f0119649:	f7 75 d4             	divl   -0x2c(%ebp)
f011964c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011964f:	29 d0                	sub    %edx,%eax
f0119651:	89 c3                	mov    %eax,%ebx
f0119653:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011965a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011965f:	0f b6 d0             	movzbl %al,%edx
f0119662:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0119665:	01 d0                	add    %edx,%eax
f0119667:	48                   	dec    %eax
f0119668:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011966b:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011966e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119673:	f7 75 cc             	divl   -0x34(%ebp)
f0119676:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0119679:	29 d0                	sub    %edx,%eax
f011967b:	01 c3                	add    %eax,%ebx
f011967d:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0119684:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119689:	0f b6 c0             	movzbl %al,%eax
f011968c:	c1 e0 04             	shl    $0x4,%eax
f011968f:	89 c2                	mov    %eax,%edx
f0119691:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0119694:	01 d0                	add    %edx,%eax
f0119696:	48                   	dec    %eax
f0119697:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011969a:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011969d:	ba 00 00 00 00       	mov    $0x0,%edx
f01196a2:	f7 75 c4             	divl   -0x3c(%ebp)
f01196a5:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01196a8:	29 d0                	sub    %edx,%eax
f01196aa:	01 d8                	add    %ebx,%eax
f01196ac:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f01196b1:	39 c1                	cmp    %eax,%ecx
f01196b3:	74 17                	je     f01196cc <test_kmalloc_bestfit1+0x230>
f01196b5:	83 ec 04             	sub    $0x4,%esp
f01196b8:	68 f0 a8 13 f0       	push   $0xf013a8f0
f01196bd:	68 a0 01 00 00       	push   $0x1a0
f01196c2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01196c7:	e8 da 6a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01196cc:	e8 c3 a5 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01196d1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01196d4:	74 17                	je     f01196ed <test_kmalloc_bestfit1+0x251>
f01196d6:	83 ec 04             	sub    $0x4,%esp
f01196d9:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01196de:	68 a1 01 00 00       	push   $0x1a1
f01196e3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01196e8:	e8 b9 6a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((3*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f01196ed:	e8 de 29 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f01196f2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01196f5:	29 c2                	sub    %eax,%edx
f01196f7:	89 d0                	mov    %edx,%eax
f01196f9:	3d 00 03 00 00       	cmp    $0x300,%eax
f01196fe:	74 17                	je     f0119717 <test_kmalloc_bestfit1+0x27b>
f0119700:	83 ec 04             	sub    $0x4,%esp
f0119703:	68 20 a9 13 f0       	push   $0xf013a920
f0119708:	68 a2 01 00 00       	push   $0x1a2
f011970d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119712:	e8 8f 6a fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0119717:	e8 b4 29 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011971c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011971f:	e8 70 a5 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119724:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(2*Mega-kilo);
f0119727:	83 ec 0c             	sub    $0xc,%esp
f011972a:	68 00 fc 1f 00       	push   $0x1ffc00
f011972f:	e8 b0 dc fe ff       	call   f01073e4 <kmalloc>
f0119734:	83 c4 10             	add    $0x10,%esp
f0119737:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[2] !=  (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011973d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0119743:	89 c1                	mov    %eax,%ecx
f0119745:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011974c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011974f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119754:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0119757:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011975a:	ba 00 00 00 00       	mov    $0x0,%edx
f011975f:	f7 75 bc             	divl   -0x44(%ebp)
f0119762:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0119765:	29 d0                	sub    %edx,%eax
f0119767:	89 c3                	mov    %eax,%ebx
f0119769:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0119770:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119775:	0f b6 d0             	movzbl %al,%edx
f0119778:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011977b:	01 d0                	add    %edx,%eax
f011977d:	48                   	dec    %eax
f011977e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0119781:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0119784:	ba 00 00 00 00       	mov    $0x0,%edx
f0119789:	f7 75 b4             	divl   -0x4c(%ebp)
f011978c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011978f:	29 d0                	sub    %edx,%eax
f0119791:	01 c3                	add    %eax,%ebx
f0119793:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011979a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011979f:	0f b6 c0             	movzbl %al,%eax
f01197a2:	c1 e0 04             	shl    $0x4,%eax
f01197a5:	89 c2                	mov    %eax,%edx
f01197a7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01197aa:	01 d0                	add    %edx,%eax
f01197ac:	48                   	dec    %eax
f01197ad:	89 45 a8             	mov    %eax,-0x58(%ebp)
f01197b0:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01197b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01197b8:	f7 75 ac             	divl   -0x54(%ebp)
f01197bb:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01197be:	29 d0                	sub    %edx,%eax
f01197c0:	01 d8                	add    %ebx,%eax
f01197c2:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f01197c7:	39 c1                	cmp    %eax,%ecx
f01197c9:	74 17                	je     f01197e2 <test_kmalloc_bestfit1+0x346>
f01197cb:	83 ec 04             	sub    $0x4,%esp
f01197ce:	68 f0 a8 13 f0       	push   $0xf013a8f0
f01197d3:	68 a8 01 00 00       	push   $0x1a8
f01197d8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01197dd:	e8 c4 69 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01197e2:	e8 ad a4 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01197e7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01197ea:	74 17                	je     f0119803 <test_kmalloc_bestfit1+0x367>
f01197ec:	83 ec 04             	sub    $0x4,%esp
f01197ef:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01197f4:	68 a9 01 00 00       	push   $0x1a9
f01197f9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01197fe:	e8 a3 69 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119803:	e8 c8 28 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119808:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011980b:	29 c2                	sub    %eax,%edx
f011980d:	89 d0                	mov    %edx,%eax
f011980f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119814:	74 17                	je     f011982d <test_kmalloc_bestfit1+0x391>
f0119816:	83 ec 04             	sub    $0x4,%esp
f0119819:	68 20 a9 13 f0       	push   $0xf013a920
f011981e:	68 aa 01 00 00       	push   $0x1aa
f0119823:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119828:	e8 79 69 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011982d:	e8 9e 28 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119832:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119835:	e8 5a a4 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011983a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(2*Mega-kilo);
f011983d:	83 ec 0c             	sub    $0xc,%esp
f0119840:	68 00 fc 1f 00       	push   $0x1ffc00
f0119845:	e8 9a db fe ff       	call   f01073e4 <kmalloc>
f011984a:	83 c4 10             	add    $0x10,%esp
f011984d:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f0119853:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119859:	89 c1                	mov    %eax,%ecx
f011985b:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0119862:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0119865:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011986a:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011986d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0119870:	ba 00 00 00 00       	mov    $0x0,%edx
f0119875:	f7 75 a4             	divl   -0x5c(%ebp)
f0119878:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011987b:	29 d0                	sub    %edx,%eax
f011987d:	89 c3                	mov    %eax,%ebx
f011987f:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0119886:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011988b:	0f b6 d0             	movzbl %al,%edx
f011988e:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0119891:	01 d0                	add    %edx,%eax
f0119893:	48                   	dec    %eax
f0119894:	89 45 98             	mov    %eax,-0x68(%ebp)
f0119897:	8b 45 98             	mov    -0x68(%ebp),%eax
f011989a:	ba 00 00 00 00       	mov    $0x0,%edx
f011989f:	f7 75 9c             	divl   -0x64(%ebp)
f01198a2:	8b 45 98             	mov    -0x68(%ebp),%eax
f01198a5:	29 d0                	sub    %edx,%eax
f01198a7:	01 c3                	add    %eax,%ebx
f01198a9:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f01198b0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01198b5:	0f b6 c0             	movzbl %al,%eax
f01198b8:	c1 e0 04             	shl    $0x4,%eax
f01198bb:	89 c2                	mov    %eax,%edx
f01198bd:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01198c0:	01 d0                	add    %edx,%eax
f01198c2:	48                   	dec    %eax
f01198c3:	89 45 90             	mov    %eax,-0x70(%ebp)
f01198c6:	8b 45 90             	mov    -0x70(%ebp),%eax
f01198c9:	ba 00 00 00 00       	mov    $0x0,%edx
f01198ce:	f7 75 94             	divl   -0x6c(%ebp)
f01198d1:	8b 45 90             	mov    -0x70(%ebp),%eax
f01198d4:	29 d0                	sub    %edx,%eax
f01198d6:	01 d8                	add    %ebx,%eax
f01198d8:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f01198dd:	39 c1                	cmp    %eax,%ecx
f01198df:	74 17                	je     f01198f8 <test_kmalloc_bestfit1+0x45c>
f01198e1:	83 ec 04             	sub    $0x4,%esp
f01198e4:	68 f0 a8 13 f0       	push   $0xf013a8f0
f01198e9:	68 b0 01 00 00       	push   $0x1b0
f01198ee:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01198f3:	e8 ae 68 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01198f8:	e8 97 a3 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01198fd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119900:	74 17                	je     f0119919 <test_kmalloc_bestfit1+0x47d>
f0119902:	83 ec 04             	sub    $0x4,%esp
f0119905:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011990a:	68 b1 01 00 00       	push   $0x1b1
f011990f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119914:	e8 8d 68 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((2*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f0119919:	e8 b2 27 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011991e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119921:	29 c2                	sub    %eax,%edx
f0119923:	89 d0                	mov    %edx,%eax
f0119925:	3d 00 02 00 00       	cmp    $0x200,%eax
f011992a:	74 17                	je     f0119943 <test_kmalloc_bestfit1+0x4a7>
f011992c:	83 ec 04             	sub    $0x4,%esp
f011992f:	68 20 a9 13 f0       	push   $0xf013a920
f0119934:	68 b2 01 00 00       	push   $0x1b2
f0119939:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011993e:	e8 63 68 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119943:	e8 88 27 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119948:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011994b:	e8 44 a3 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119950:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(1*Mega-kilo);
f0119953:	83 ec 0c             	sub    $0xc,%esp
f0119956:	68 00 fc 0f 00       	push   $0xffc00
f011995b:	e8 84 da fe ff       	call   f01073e4 <kmalloc>
f0119960:	83 c4 10             	add    $0x10,%esp
f0119963:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[4] !=  (ACTUAL_START + 10*Mega)) panic("Wrong start address for the allocated space... ");
f0119969:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011996f:	89 c1                	mov    %eax,%ecx
f0119971:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f0119978:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011997b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119980:	89 45 88             	mov    %eax,-0x78(%ebp)
f0119983:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119986:	ba 00 00 00 00       	mov    $0x0,%edx
f011998b:	f7 75 8c             	divl   -0x74(%ebp)
f011998e:	8b 45 88             	mov    -0x78(%ebp),%eax
f0119991:	29 d0                	sub    %edx,%eax
f0119993:	89 c3                	mov    %eax,%ebx
f0119995:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011999c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01199a1:	0f b6 d0             	movzbl %al,%edx
f01199a4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01199a7:	01 d0                	add    %edx,%eax
f01199a9:	48                   	dec    %eax
f01199aa:	89 45 80             	mov    %eax,-0x80(%ebp)
f01199ad:	8b 45 80             	mov    -0x80(%ebp),%eax
f01199b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01199b5:	f7 75 84             	divl   -0x7c(%ebp)
f01199b8:	8b 45 80             	mov    -0x80(%ebp),%eax
f01199bb:	29 d0                	sub    %edx,%eax
f01199bd:	01 c3                	add    %eax,%ebx
f01199bf:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01199c6:	10 00 00 
f01199c9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01199ce:	0f b6 c0             	movzbl %al,%eax
f01199d1:	c1 e0 04             	shl    $0x4,%eax
f01199d4:	89 c2                	mov    %eax,%edx
f01199d6:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01199dc:	01 d0                	add    %edx,%eax
f01199de:	48                   	dec    %eax
f01199df:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01199e5:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01199eb:	ba 00 00 00 00       	mov    $0x0,%edx
f01199f0:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01199f6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01199fc:	29 d0                	sub    %edx,%eax
f01199fe:	01 d8                	add    %ebx,%eax
f0119a00:	2d 00 c0 5f 09       	sub    $0x95fc000,%eax
f0119a05:	39 c1                	cmp    %eax,%ecx
f0119a07:	74 17                	je     f0119a20 <test_kmalloc_bestfit1+0x584>
f0119a09:	83 ec 04             	sub    $0x4,%esp
f0119a0c:	68 f0 a8 13 f0       	push   $0xf013a8f0
f0119a11:	68 b8 01 00 00       	push   $0x1b8
f0119a16:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119a1b:	e8 86 67 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119a20:	e8 6f a2 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119a25:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119a28:	74 17                	je     f0119a41 <test_kmalloc_bestfit1+0x5a5>
f0119a2a:	83 ec 04             	sub    $0x4,%esp
f0119a2d:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0119a32:	68 b9 01 00 00       	push   $0x1b9
f0119a37:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119a3c:	e8 65 67 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119a41:	e8 8a 26 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119a46:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119a49:	29 c2                	sub    %eax,%edx
f0119a4b:	89 d0                	mov    %edx,%eax
f0119a4d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119a52:	74 17                	je     f0119a6b <test_kmalloc_bestfit1+0x5cf>
f0119a54:	83 ec 04             	sub    $0x4,%esp
f0119a57:	68 20 a9 13 f0       	push   $0xf013a920
f0119a5c:	68 ba 01 00 00       	push   $0x1ba
f0119a61:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119a66:	e8 3b 67 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119a6b:	e8 60 26 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119a70:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119a73:	e8 1c a2 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119a78:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(1*Mega-kilo);
f0119a7b:	83 ec 0c             	sub    $0xc,%esp
f0119a7e:	68 00 fc 0f 00       	push   $0xffc00
f0119a83:	e8 5c d9 fe ff       	call   f01073e4 <kmalloc>
f0119a88:	83 c4 10             	add    $0x10,%esp
f0119a8b:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f0119a91:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119a97:	89 c1                	mov    %eax,%ecx
f0119a99:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0119aa0:	10 00 00 
f0119aa3:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0119aa9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119aae:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0119ab4:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119aba:	ba 00 00 00 00       	mov    $0x0,%edx
f0119abf:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0119ac5:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0119acb:	29 d0                	sub    %edx,%eax
f0119acd:	89 c3                	mov    %eax,%ebx
f0119acf:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0119ad6:	10 00 00 
f0119ad9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119ade:	0f b6 d0             	movzbl %al,%edx
f0119ae1:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0119ae7:	01 d0                	add    %edx,%eax
f0119ae9:	48                   	dec    %eax
f0119aea:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0119af0:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119af6:	ba 00 00 00 00       	mov    $0x0,%edx
f0119afb:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0119b01:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0119b07:	29 d0                	sub    %edx,%eax
f0119b09:	01 c3                	add    %eax,%ebx
f0119b0b:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0119b12:	10 00 00 
f0119b15:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119b1a:	0f b6 c0             	movzbl %al,%eax
f0119b1d:	c1 e0 04             	shl    $0x4,%eax
f0119b20:	89 c2                	mov    %eax,%edx
f0119b22:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0119b28:	01 d0                	add    %edx,%eax
f0119b2a:	48                   	dec    %eax
f0119b2b:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0119b31:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119b37:	ba 00 00 00 00       	mov    $0x0,%edx
f0119b3c:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0119b42:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0119b48:	29 d0                	sub    %edx,%eax
f0119b4a:	01 d8                	add    %ebx,%eax
f0119b4c:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f0119b51:	39 c1                	cmp    %eax,%ecx
f0119b53:	74 17                	je     f0119b6c <test_kmalloc_bestfit1+0x6d0>
f0119b55:	83 ec 04             	sub    $0x4,%esp
f0119b58:	68 f0 a8 13 f0       	push   $0xf013a8f0
f0119b5d:	68 c0 01 00 00       	push   $0x1c0
f0119b62:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119b67:	e8 3a 66 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119b6c:	e8 23 a1 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119b71:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119b74:	74 17                	je     f0119b8d <test_kmalloc_bestfit1+0x6f1>
f0119b76:	83 ec 04             	sub    $0x4,%esp
f0119b79:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0119b7e:	68 c1 01 00 00       	push   $0x1c1
f0119b83:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119b88:	e8 19 66 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119b8d:	e8 3e 25 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119b92:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119b95:	29 c2                	sub    %eax,%edx
f0119b97:	89 d0                	mov    %edx,%eax
f0119b99:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119b9e:	74 17                	je     f0119bb7 <test_kmalloc_bestfit1+0x71b>
f0119ba0:	83 ec 04             	sub    $0x4,%esp
f0119ba3:	68 20 a9 13 f0       	push   $0xf013a920
f0119ba8:	68 c2 01 00 00       	push   $0x1c2
f0119bad:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119bb2:	e8 ef 65 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119bb7:	e8 14 25 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119bbc:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119bbf:	e8 d0 a0 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119bc4:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(1*Mega-kilo);
f0119bc7:	83 ec 0c             	sub    $0xc,%esp
f0119bca:	68 00 fc 0f 00       	push   $0xffc00
f0119bcf:	e8 10 d8 fe ff       	call   f01073e4 <kmalloc>
f0119bd4:	83 c4 10             	add    $0x10,%esp
f0119bd7:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 12*Mega)) panic("Wrong start address for the allocated space... ");
f0119bdd:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0119be3:	89 c1                	mov    %eax,%ecx
f0119be5:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0119bec:	10 00 00 
f0119bef:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0119bf5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119bfa:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0119c00:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119c06:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c0b:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0119c11:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0119c17:	29 d0                	sub    %edx,%eax
f0119c19:	89 c3                	mov    %eax,%ebx
f0119c1b:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0119c22:	10 00 00 
f0119c25:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119c2a:	0f b6 d0             	movzbl %al,%edx
f0119c2d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0119c33:	01 d0                	add    %edx,%eax
f0119c35:	48                   	dec    %eax
f0119c36:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0119c3c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119c42:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c47:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0119c4d:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0119c53:	29 d0                	sub    %edx,%eax
f0119c55:	01 c3                	add    %eax,%ebx
f0119c57:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0119c5e:	10 00 00 
f0119c61:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119c66:	0f b6 c0             	movzbl %al,%eax
f0119c69:	c1 e0 04             	shl    $0x4,%eax
f0119c6c:	89 c2                	mov    %eax,%edx
f0119c6e:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0119c74:	01 d0                	add    %edx,%eax
f0119c76:	48                   	dec    %eax
f0119c77:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0119c7d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119c83:	ba 00 00 00 00       	mov    $0x0,%edx
f0119c88:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0119c8e:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0119c94:	29 d0                	sub    %edx,%eax
f0119c96:	01 d8                	add    %ebx,%eax
f0119c98:	2d 00 c0 3f 09       	sub    $0x93fc000,%eax
f0119c9d:	39 c1                	cmp    %eax,%ecx
f0119c9f:	74 17                	je     f0119cb8 <test_kmalloc_bestfit1+0x81c>
f0119ca1:	83 ec 04             	sub    $0x4,%esp
f0119ca4:	68 f0 a8 13 f0       	push   $0xf013a8f0
f0119ca9:	68 c8 01 00 00       	push   $0x1c8
f0119cae:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119cb3:	e8 ee 64 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119cb8:	e8 d7 9f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119cbd:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119cc0:	74 17                	je     f0119cd9 <test_kmalloc_bestfit1+0x83d>
f0119cc2:	83 ec 04             	sub    $0x4,%esp
f0119cc5:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0119cca:	68 c9 01 00 00       	push   $0x1c9
f0119ccf:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119cd4:	e8 cd 64 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119cd9:	e8 f2 23 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119cde:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119ce1:	29 c2                	sub    %eax,%edx
f0119ce3:	89 d0                	mov    %edx,%eax
f0119ce5:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119cea:	74 17                	je     f0119d03 <test_kmalloc_bestfit1+0x867>
f0119cec:	83 ec 04             	sub    $0x4,%esp
f0119cef:	68 20 a9 13 f0       	push   $0xf013a920
f0119cf4:	68 ca 01 00 00       	push   $0x1ca
f0119cf9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119cfe:	e8 a3 64 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0119d03:	e8 c8 23 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119d08:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119d0b:	e8 84 9f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119d10:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(1*Mega-kilo);
f0119d13:	83 ec 0c             	sub    $0xc,%esp
f0119d16:	68 00 fc 0f 00       	push   $0xffc00
f0119d1b:	e8 c4 d6 fe ff       	call   f01073e4 <kmalloc>
f0119d20:	83 c4 10             	add    $0x10,%esp
f0119d23:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega)) panic("Wrong start address for the allocated space... ");
f0119d29:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0119d2f:	89 c1                	mov    %eax,%ecx
f0119d31:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0119d38:	10 00 00 
f0119d3b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0119d41:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119d46:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0119d4c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119d52:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d57:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0119d5d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0119d63:	29 d0                	sub    %edx,%eax
f0119d65:	89 c3                	mov    %eax,%ebx
f0119d67:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0119d6e:	10 00 00 
f0119d71:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119d76:	0f b6 d0             	movzbl %al,%edx
f0119d79:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0119d7f:	01 d0                	add    %edx,%eax
f0119d81:	48                   	dec    %eax
f0119d82:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0119d88:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119d8e:	ba 00 00 00 00       	mov    $0x0,%edx
f0119d93:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0119d99:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0119d9f:	29 d0                	sub    %edx,%eax
f0119da1:	01 c3                	add    %eax,%ebx
f0119da3:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0119daa:	10 00 00 
f0119dad:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119db2:	0f b6 c0             	movzbl %al,%eax
f0119db5:	c1 e0 04             	shl    $0x4,%eax
f0119db8:	89 c2                	mov    %eax,%edx
f0119dba:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0119dc0:	01 d0                	add    %edx,%eax
f0119dc2:	48                   	dec    %eax
f0119dc3:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0119dc9:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119dcf:	ba 00 00 00 00       	mov    $0x0,%edx
f0119dd4:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0119dda:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0119de0:	29 d0                	sub    %edx,%eax
f0119de2:	01 d8                	add    %ebx,%eax
f0119de4:	2d 00 c0 2f 09       	sub    $0x92fc000,%eax
f0119de9:	39 c1                	cmp    %eax,%ecx
f0119deb:	74 17                	je     f0119e04 <test_kmalloc_bestfit1+0x968>
f0119ded:	83 ec 04             	sub    $0x4,%esp
f0119df0:	68 f0 a8 13 f0       	push   $0xf013a8f0
f0119df5:	68 d0 01 00 00       	push   $0x1d0
f0119dfa:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119dff:	e8 a2 63 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e04:	e8 8b 9e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119e09:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119e0c:	74 17                	je     f0119e25 <test_kmalloc_bestfit1+0x989>
f0119e0e:	83 ec 04             	sub    $0x4,%esp
f0119e11:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0119e16:	68 d1 01 00 00       	push   $0x1d1
f0119e1b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119e20:	e8 81 63 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f0119e25:	e8 a6 22 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119e2a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0119e2d:	29 c2                	sub    %eax,%edx
f0119e2f:	89 d0                	mov    %edx,%eax
f0119e31:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119e36:	74 17                	je     f0119e4f <test_kmalloc_bestfit1+0x9b3>
f0119e38:	83 ec 04             	sub    $0x4,%esp
f0119e3b:	68 20 a9 13 f0       	push   $0xf013a920
f0119e40:	68 d2 01 00 00       	push   $0x1d2
f0119e45:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119e4a:	e8 57 63 fe ff       	call   f01001a6 <_panic>
	}

	//[2] Free some to create holes
	{
		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0119e4f:	e8 7c 22 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119e54:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119e57:	e8 38 9e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119e5c:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f0119e5f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0119e65:	83 ec 0c             	sub    $0xc,%esp
f0119e68:	50                   	push   %eax
f0119e69:	e8 90 d5 fe ff       	call   f01073fe <kfree>
f0119e6e:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119e71:	e8 1e 9e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119e76:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119e79:	74 17                	je     f0119e92 <test_kmalloc_bestfit1+0x9f6>
f0119e7b:	83 ec 04             	sub    $0x4,%esp
f0119e7e:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0119e83:	68 db 01 00 00       	push   $0x1db
f0119e88:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119e8d:	e8 14 63 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((3*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f0119e92:	e8 39 22 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119e97:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0119e9a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0119e9f:	74 17                	je     f0119eb8 <test_kmalloc_bestfit1+0xa1c>
f0119ea1:	83 ec 04             	sub    $0x4,%esp
f0119ea4:	68 33 a9 13 f0       	push   $0xf013a933
f0119ea9:	68 dc 01 00 00       	push   $0x1dc
f0119eae:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119eb3:	e8 ee 62 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0119eb8:	e8 13 22 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119ebd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119ec0:	e8 cf 9d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119ec5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f0119ec8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0119ece:	83 ec 0c             	sub    $0xc,%esp
f0119ed1:	50                   	push   %eax
f0119ed2:	e8 27 d5 fe ff       	call   f01073fe <kfree>
f0119ed7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119eda:	e8 b5 9d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119edf:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119ee2:	74 17                	je     f0119efb <test_kmalloc_bestfit1+0xa5f>
f0119ee4:	83 ec 04             	sub    $0x4,%esp
f0119ee7:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0119eec:	68 e2 01 00 00       	push   $0x1e2
f0119ef1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119ef6:	e8 ab 62 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != ((2*Mega)/PAGE_SIZE)) panic("Wrong free: ");
f0119efb:	e8 d0 21 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119f00:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0119f03:	3d 00 02 00 00       	cmp    $0x200,%eax
f0119f08:	74 17                	je     f0119f21 <test_kmalloc_bestfit1+0xa85>
f0119f0a:	83 ec 04             	sub    $0x4,%esp
f0119f0d:	68 33 a9 13 f0       	push   $0xf013a933
f0119f12:	68 e3 01 00 00       	push   $0x1e3
f0119f17:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119f1c:	e8 85 62 fe ff       	call   f01001a6 <_panic>

		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f0119f21:	e8 aa 21 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119f26:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119f29:	e8 66 9d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119f2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[5]);
f0119f31:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0119f37:	83 ec 0c             	sub    $0xc,%esp
f0119f3a:	50                   	push   %eax
f0119f3b:	e8 be d4 fe ff       	call   f01073fe <kfree>
f0119f40:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0119f43:	e8 4c 9d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119f48:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0119f4b:	74 17                	je     f0119f64 <test_kmalloc_bestfit1+0xac8>
f0119f4d:	83 ec 04             	sub    $0x4,%esp
f0119f50:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0119f55:	68 e9 01 00 00       	push   $0x1e9
f0119f5a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119f5f:	e8 42 62 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f0119f64:	e8 67 21 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119f69:	2b 45 f4             	sub    -0xc(%ebp),%eax
f0119f6c:	3d 00 01 00 00       	cmp    $0x100,%eax
f0119f71:	74 17                	je     f0119f8a <test_kmalloc_bestfit1+0xaee>
f0119f73:	83 ec 04             	sub    $0x4,%esp
f0119f76:	68 33 a9 13 f0       	push   $0xf013a933
f0119f7b:	68 ea 01 00 00       	push   $0x1ea
f0119f80:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0119f85:	e8 1c 62 fe ff       	call   f01001a6 <_panic>
	}

	//[3] Allocate again [test best fit]
	{
		//Allocate 512 KB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f0119f8a:	e8 41 21 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f0119f8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0119f92:	e8 fd 9c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0119f97:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo);
f0119f9a:	83 ec 0c             	sub    $0xc,%esp
f0119f9d:	68 00 00 08 00       	push   $0x80000
f0119fa2:	e8 3d d4 fe ff       	call   f01073e4 <kmalloc>
f0119fa7:	83 c4 10             	add    $0x10,%esp
f0119faa:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
		if ((uint32) ptr_allocations[8] !=  (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f0119fb0:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0119fb6:	89 c1                	mov    %eax,%ecx
f0119fb8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0119fbf:	10 00 00 
f0119fc2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0119fc8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0119fcd:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0119fd3:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119fd9:	ba 00 00 00 00       	mov    $0x0,%edx
f0119fde:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0119fe4:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0119fea:	29 d0                	sub    %edx,%eax
f0119fec:	89 c3                	mov    %eax,%ebx
f0119fee:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0119ff5:	10 00 00 
f0119ff8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0119ffd:	0f b6 d0             	movzbl %al,%edx
f011a000:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011a006:	01 d0                	add    %edx,%eax
f011a008:	48                   	dec    %eax
f011a009:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011a00f:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a015:	ba 00 00 00 00       	mov    $0x0,%edx
f011a01a:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011a020:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011a026:	29 d0                	sub    %edx,%eax
f011a028:	01 c3                	add    %eax,%ebx
f011a02a:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011a031:	10 00 00 
f011a034:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a039:	0f b6 c0             	movzbl %al,%eax
f011a03c:	c1 e0 04             	shl    $0x4,%eax
f011a03f:	89 c2                	mov    %eax,%edx
f011a041:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011a047:	01 d0                	add    %edx,%eax
f011a049:	48                   	dec    %eax
f011a04a:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011a050:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a056:	ba 00 00 00 00       	mov    $0x0,%edx
f011a05b:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011a061:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011a067:	29 d0                	sub    %edx,%eax
f011a069:	01 d8                	add    %ebx,%eax
f011a06b:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011a070:	39 c1                	cmp    %eax,%ecx
f011a072:	74 17                	je     f011a08b <test_kmalloc_bestfit1+0xbef>
f011a074:	83 ec 04             	sub    $0x4,%esp
f011a077:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011a07c:	68 f3 01 00 00       	push   $0x1f3
f011a081:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a086:	e8 1b 61 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a08b:	e8 04 9c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a090:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a093:	74 17                	je     f011a0ac <test_kmalloc_bestfit1+0xc10>
f011a095:	83 ec 04             	sub    $0x4,%esp
f011a098:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011a09d:	68 f4 01 00 00       	push   $0x1f4
f011a0a2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a0a7:	e8 fa 60 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011a0ac:	e8 1f 20 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a0b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a0b4:	29 c2                	sub    %eax,%edx
f011a0b6:	89 d0                	mov    %edx,%eax
f011a0b8:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a0bd:	74 17                	je     f011a0d6 <test_kmalloc_bestfit1+0xc3a>
f011a0bf:	83 ec 04             	sub    $0x4,%esp
f011a0c2:	68 20 a9 13 f0       	push   $0xf013a920
f011a0c7:	68 f5 01 00 00       	push   $0x1f5
f011a0cc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a0d1:	e8 d0 60 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011a0d6:	e8 f5 1f ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a0db:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a0de:	e8 b1 9b fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a0e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011a0e6:	83 ec 0c             	sub    $0xc,%esp
f011a0e9:	68 00 fc 0f 00       	push   $0xffc00
f011a0ee:	e8 f1 d2 fe ff       	call   f01073e4 <kmalloc>
f011a0f3:	83 c4 10             	add    $0x10,%esp
f011a0f6:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		if ((uint32) ptr_allocations[9] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011a0fc:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011a102:	89 c1                	mov    %eax,%ecx
f011a104:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011a10b:	10 00 00 
f011a10e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011a114:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a119:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011a11f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a125:	ba 00 00 00 00       	mov    $0x0,%edx
f011a12a:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011a130:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011a136:	29 d0                	sub    %edx,%eax
f011a138:	89 c3                	mov    %eax,%ebx
f011a13a:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011a141:	10 00 00 
f011a144:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a149:	0f b6 d0             	movzbl %al,%edx
f011a14c:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011a152:	01 d0                	add    %edx,%eax
f011a154:	48                   	dec    %eax
f011a155:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011a15b:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a161:	ba 00 00 00 00       	mov    $0x0,%edx
f011a166:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011a16c:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011a172:	29 d0                	sub    %edx,%eax
f011a174:	01 c3                	add    %eax,%ebx
f011a176:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011a17d:	10 00 00 
f011a180:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a185:	0f b6 c0             	movzbl %al,%eax
f011a188:	c1 e0 04             	shl    $0x4,%eax
f011a18b:	89 c2                	mov    %eax,%edx
f011a18d:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011a193:	01 d0                	add    %edx,%eax
f011a195:	48                   	dec    %eax
f011a196:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011a19c:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a1a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011a1a7:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011a1ad:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011a1b3:	29 d0                	sub    %edx,%eax
f011a1b5:	01 d8                	add    %ebx,%eax
f011a1b7:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011a1bc:	39 c1                	cmp    %eax,%ecx
f011a1be:	74 17                	je     f011a1d7 <test_kmalloc_bestfit1+0xd3b>
f011a1c0:	83 ec 04             	sub    $0x4,%esp
f011a1c3:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011a1c8:	68 fb 01 00 00       	push   $0x1fb
f011a1cd:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a1d2:	e8 cf 5f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a1d7:	e8 b8 9a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a1dc:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a1df:	74 17                	je     f011a1f8 <test_kmalloc_bestfit1+0xd5c>
f011a1e1:	83 ec 04             	sub    $0x4,%esp
f011a1e4:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011a1e9:	68 fc 01 00 00       	push   $0x1fc
f011a1ee:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a1f3:	e8 ae 5f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011a1f8:	e8 d3 1e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a1fd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a200:	29 c2                	sub    %eax,%edx
f011a202:	89 d0                	mov    %edx,%eax
f011a204:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a209:	74 17                	je     f011a222 <test_kmalloc_bestfit1+0xd86>
f011a20b:	83 ec 04             	sub    $0x4,%esp
f011a20e:	68 20 a9 13 f0       	push   $0xf013a920
f011a213:	68 fd 01 00 00       	push   $0x1fd
f011a218:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a21d:	e8 84 5f fe ff       	call   f01001a6 <_panic>

		//Allocate 256 KB - should be placed in remaining of 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011a222:	e8 a9 1e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a227:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a22a:	e8 65 9a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a22f:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011a232:	83 ec 0c             	sub    $0xc,%esp
f011a235:	68 00 fc 03 00       	push   $0x3fc00
f011a23a:	e8 a5 d1 fe ff       	call   f01073e4 <kmalloc>
f011a23f:	83 c4 10             	add    $0x10,%esp
f011a242:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		if ((uint32) ptr_allocations[10] !=  (ACTUAL_START + 11*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011a248:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011a24e:	89 c1                	mov    %eax,%ecx
f011a250:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011a257:	10 00 00 
f011a25a:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011a260:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a265:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011a26b:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a271:	ba 00 00 00 00       	mov    $0x0,%edx
f011a276:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011a27c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011a282:	29 d0                	sub    %edx,%eax
f011a284:	89 c3                	mov    %eax,%ebx
f011a286:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011a28d:	10 00 00 
f011a290:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a295:	0f b6 d0             	movzbl %al,%edx
f011a298:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011a29e:	01 d0                	add    %edx,%eax
f011a2a0:	48                   	dec    %eax
f011a2a1:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011a2a7:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a2ad:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2b2:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011a2b8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011a2be:	29 d0                	sub    %edx,%eax
f011a2c0:	01 c3                	add    %eax,%ebx
f011a2c2:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011a2c9:	10 00 00 
f011a2cc:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a2d1:	0f b6 c0             	movzbl %al,%eax
f011a2d4:	c1 e0 04             	shl    $0x4,%eax
f011a2d7:	89 c2                	mov    %eax,%edx
f011a2d9:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011a2df:	01 d0                	add    %edx,%eax
f011a2e1:	48                   	dec    %eax
f011a2e2:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011a2e8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a2ee:	ba 00 00 00 00       	mov    $0x0,%edx
f011a2f3:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011a2f9:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011a2ff:	29 d0                	sub    %edx,%eax
f011a301:	01 d8                	add    %ebx,%eax
f011a303:	2d 00 c0 47 09       	sub    $0x947c000,%eax
f011a308:	39 c1                	cmp    %eax,%ecx
f011a30a:	74 17                	je     f011a323 <test_kmalloc_bestfit1+0xe87>
f011a30c:	83 ec 04             	sub    $0x4,%esp
f011a30f:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011a314:	68 03 02 00 00       	push   $0x203
f011a319:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a31e:	e8 83 5e fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a323:	e8 6c 99 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a328:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a32b:	74 17                	je     f011a344 <test_kmalloc_bestfit1+0xea8>
f011a32d:	83 ec 04             	sub    $0x4,%esp
f011a330:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011a335:	68 04 02 00 00       	push   $0x204
f011a33a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a33f:	e8 62 5e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011a344:	e8 87 1d ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a349:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a34c:	29 c2                	sub    %eax,%edx
f011a34e:	89 d0                	mov    %edx,%eax
f011a350:	83 f8 40             	cmp    $0x40,%eax
f011a353:	74 17                	je     f011a36c <test_kmalloc_bestfit1+0xed0>
f011a355:	83 ec 04             	sub    $0x4,%esp
f011a358:	68 20 a9 13 f0       	push   $0xf013a920
f011a35d:	68 05 02 00 00       	push   $0x205
f011a362:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a367:	e8 3a 5e fe ff       	call   f01001a6 <_panic>

		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011a36c:	e8 5f 1d ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a371:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a374:	e8 1b 99 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a379:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega - kilo);
f011a37c:	83 ec 0c             	sub    $0xc,%esp
f011a37f:	68 00 fc 3f 00       	push   $0x3ffc00
f011a384:	e8 5b d0 fe ff       	call   f01073e4 <kmalloc>
f011a389:	83 c4 10             	add    $0x10,%esp
f011a38c:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011a392:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011a398:	89 c1                	mov    %eax,%ecx
f011a39a:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011a3a1:	10 00 00 
f011a3a4:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011a3aa:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a3af:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011a3b5:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a3bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3c0:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011a3c6:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011a3cc:	29 d0                	sub    %edx,%eax
f011a3ce:	89 c3                	mov    %eax,%ebx
f011a3d0:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011a3d7:	10 00 00 
f011a3da:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a3df:	0f b6 d0             	movzbl %al,%edx
f011a3e2:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011a3e8:	01 d0                	add    %edx,%eax
f011a3ea:	48                   	dec    %eax
f011a3eb:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011a3f1:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a3f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011a3fc:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011a402:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011a408:	29 d0                	sub    %edx,%eax
f011a40a:	01 c3                	add    %eax,%ebx
f011a40c:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011a413:	10 00 00 
f011a416:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a41b:	0f b6 c0             	movzbl %al,%eax
f011a41e:	c1 e0 04             	shl    $0x4,%eax
f011a421:	89 c2                	mov    %eax,%edx
f011a423:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011a429:	01 d0                	add    %edx,%eax
f011a42b:	48                   	dec    %eax
f011a42c:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011a432:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a438:	ba 00 00 00 00       	mov    $0x0,%edx
f011a43d:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011a443:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011a449:	29 d0                	sub    %edx,%eax
f011a44b:	01 d8                	add    %ebx,%eax
f011a44d:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011a452:	39 c1                	cmp    %eax,%ecx
f011a454:	74 17                	je     f011a46d <test_kmalloc_bestfit1+0xfd1>
f011a456:	83 ec 04             	sub    $0x4,%esp
f011a459:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011a45e:	68 0b 02 00 00       	push   $0x20b
f011a463:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a468:	e8 39 5d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a46d:	e8 22 98 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a472:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a475:	74 17                	je     f011a48e <test_kmalloc_bestfit1+0xff2>
f011a477:	83 ec 04             	sub    $0x4,%esp
f011a47a:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011a47f:	68 0c 02 00 00       	push   $0x20c
f011a484:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a489:	e8 18 5d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011a48e:	e8 3d 1c ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a493:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a496:	29 c2                	sub    %eax,%edx
f011a498:	89 d0                	mov    %edx,%eax
f011a49a:	3d 00 04 00 00       	cmp    $0x400,%eax
f011a49f:	74 17                	je     f011a4b8 <test_kmalloc_bestfit1+0x101c>
f011a4a1:	83 ec 04             	sub    $0x4,%esp
f011a4a4:	68 20 a9 13 f0       	push   $0xf013a920
f011a4a9:	68 0d 02 00 00       	push   $0x20d
f011a4ae:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a4b3:	e8 ee 5c fe ff       	call   f01001a6 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1M Hole appended to already existing 1M hole in the middle
		freeFrames = sys_calculate_free_frames() ;
f011a4b8:	e8 13 1c ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a4bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a4c0:	e8 cf 97 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a4c5:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011a4c8:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011a4ce:	83 ec 0c             	sub    $0xc,%esp
f011a4d1:	50                   	push   %eax
f011a4d2:	e8 27 cf fe ff       	call   f01073fe <kfree>
f011a4d7:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a4da:	e8 b5 97 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a4df:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a4e2:	74 17                	je     f011a4fb <test_kmalloc_bestfit1+0x105f>
f011a4e4:	83 ec 04             	sub    $0x4,%esp
f011a4e7:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011a4ec:	68 16 02 00 00       	push   $0x216
f011a4f1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a4f6:	e8 ab 5c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011a4fb:	e8 d0 1b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a500:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a503:	3d 00 01 00 00       	cmp    $0x100,%eax
f011a508:	74 17                	je     f011a521 <test_kmalloc_bestfit1+0x1085>
f011a50a:	83 ec 04             	sub    $0x4,%esp
f011a50d:	68 33 a9 13 f0       	push   $0xf013a933
f011a512:	68 17 02 00 00       	push   $0x217
f011a517:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a51c:	e8 85 5c fe ff       	call   f01001a6 <_panic>

		//another 512 KB Hole appended to the hole
		freeFrames = sys_calculate_free_frames() ;
f011a521:	e8 aa 1b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a526:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a529:	e8 66 97 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a52e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[8]);
f011a531:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011a537:	83 ec 0c             	sub    $0xc,%esp
f011a53a:	50                   	push   %eax
f011a53b:	e8 be ce fe ff       	call   f01073fe <kfree>
f011a540:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a543:	e8 4c 97 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a548:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a54b:	74 17                	je     f011a564 <test_kmalloc_bestfit1+0x10c8>
f011a54d:	83 ec 04             	sub    $0x4,%esp
f011a550:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011a555:	68 1d 02 00 00       	push   $0x21d
f011a55a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a55f:	e8 42 5c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 128) panic("Wrong free: ");
f011a564:	e8 67 1b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a569:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011a56c:	3d 80 00 00 00       	cmp    $0x80,%eax
f011a571:	74 17                	je     f011a58a <test_kmalloc_bestfit1+0x10ee>
f011a573:	83 ec 04             	sub    $0x4,%esp
f011a576:	68 33 a9 13 f0       	push   $0xf013a933
f011a57b:	68 1e 02 00 00       	push   $0x21e
f011a580:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a585:	e8 1c 5c fe ff       	call   f01001a6 <_panic>
	}

	//[5] Allocate again [test best fit]
	{
		//Allocate 2 MB - should be placed in the contiguous hole (2 MB + 512 KB)
		freeFrames = sys_calculate_free_frames();
f011a58a:	e8 41 1b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a58f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011a592:	e8 fd 96 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a597:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(2*Mega - kilo);
f011a59a:	83 ec 0c             	sub    $0xc,%esp
f011a59d:	68 00 fc 1f 00       	push   $0x1ffc00
f011a5a2:	e8 3d ce fe ff       	call   f01073e4 <kmalloc>
f011a5a7:	83 c4 10             	add    $0x10,%esp
f011a5aa:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 9*Mega)) panic("Wrong start address for the allocated space... ");
f011a5b0:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011a5b6:	89 c1                	mov    %eax,%ecx
f011a5b8:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011a5bf:	10 00 00 
f011a5c2:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011a5c8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a5cd:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011a5d3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a5d9:	ba 00 00 00 00       	mov    $0x0,%edx
f011a5de:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011a5e4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011a5ea:	29 d0                	sub    %edx,%eax
f011a5ec:	89 c3                	mov    %eax,%ebx
f011a5ee:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011a5f5:	10 00 00 
f011a5f8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a5fd:	0f b6 d0             	movzbl %al,%edx
f011a600:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011a606:	01 d0                	add    %edx,%eax
f011a608:	48                   	dec    %eax
f011a609:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011a60f:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a615:	ba 00 00 00 00       	mov    $0x0,%edx
f011a61a:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011a620:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011a626:	29 d0                	sub    %edx,%eax
f011a628:	01 c3                	add    %eax,%ebx
f011a62a:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011a631:	10 00 00 
f011a634:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a639:	0f b6 c0             	movzbl %al,%eax
f011a63c:	c1 e0 04             	shl    $0x4,%eax
f011a63f:	89 c2                	mov    %eax,%edx
f011a641:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011a647:	01 d0                	add    %edx,%eax
f011a649:	48                   	dec    %eax
f011a64a:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011a650:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a656:	ba 00 00 00 00       	mov    $0x0,%edx
f011a65b:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011a661:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011a667:	29 d0                	sub    %edx,%eax
f011a669:	01 d8                	add    %ebx,%eax
f011a66b:	2d 00 c0 6f 09       	sub    $0x96fc000,%eax
f011a670:	39 c1                	cmp    %eax,%ecx
f011a672:	74 17                	je     f011a68b <test_kmalloc_bestfit1+0x11ef>
f011a674:	83 ec 04             	sub    $0x4,%esp
f011a677:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011a67c:	68 27 02 00 00       	push   $0x227
f011a681:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a686:	e8 1b 5b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a68b:	e8 04 96 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a690:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011a693:	74 17                	je     f011a6ac <test_kmalloc_bestfit1+0x1210>
f011a695:	83 ec 04             	sub    $0x4,%esp
f011a698:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011a69d:	68 28 02 00 00       	push   $0x228
f011a6a2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a6a7:	e8 fa 5a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011a6ac:	e8 1f 1a ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a6b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011a6b4:	29 c2                	sub    %eax,%edx
f011a6b6:	89 d0                	mov    %edx,%eax
f011a6b8:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a6bd:	74 17                	je     f011a6d6 <test_kmalloc_bestfit1+0x123a>
f011a6bf:	83 ec 04             	sub    $0x4,%esp
f011a6c2:	68 20 a9 13 f0       	push   $0xf013a920
f011a6c7:	68 29 02 00 00       	push   $0x229
f011a6cc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a6d1:	e8 d0 5a fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test BEST FIT allocation (1) completed successfully.\n");
f011a6d6:	83 ec 0c             	sub    $0xc,%esp
f011a6d9:	68 40 a9 13 f0       	push   $0xf013a940
f011a6de:	e8 4a 65 fe ff       	call   f0100c2d <cprintf>
f011a6e3:	83 c4 10             	add    $0x10,%esp

	return 1;
f011a6e6:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011a6eb:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011a6ee:	5b                   	pop    %ebx
f011a6ef:	5f                   	pop    %edi
f011a6f0:	5d                   	pop    %ebp
f011a6f1:	c3                   	ret    

f011a6f2 <test_kmalloc_bestfit2>:

int test_kmalloc_bestfit2()
{
f011a6f2:	55                   	push   %ebp
f011a6f3:	89 e5                	mov    %esp,%ebp
f011a6f5:	57                   	push   %edi
f011a6f6:	53                   	push   %ebx
f011a6f7:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011a6fd:	83 ec 0c             	sub    $0xc,%esp
f011a700:	68 18 a4 13 f0       	push   $0xf013a418
f011a705:	e8 23 65 fe ff       	call   f0100c2d <cprintf>
f011a70a:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011a70d:	83 ec 0c             	sub    $0xc,%esp
f011a710:	68 48 a4 13 f0       	push   $0xf013a448
f011a715:	e8 13 65 fe ff       	call   f0100c2d <cprintf>
f011a71a:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011a71d:	83 ec 0c             	sub    $0xc,%esp
f011a720:	68 18 a4 13 f0       	push   $0xf013a418
f011a725:	e8 03 65 fe ff       	call   f0100c2d <cprintf>
f011a72a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011a72d:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011a733:	b9 14 00 00 00       	mov    $0x14,%ecx
f011a738:	b8 00 00 00 00       	mov    $0x0,%eax
f011a73d:	89 d7                	mov    %edx,%edi
f011a73f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011a741:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011a748:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011a74b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a750:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011a753:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a756:	ba 00 00 00 00       	mov    $0x0,%edx
f011a75b:	f7 75 f4             	divl   -0xc(%ebp)
f011a75e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011a761:	29 d0                	sub    %edx,%eax
f011a763:	89 c1                	mov    %eax,%ecx
f011a765:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011a76c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a771:	0f b6 d0             	movzbl %al,%edx
f011a774:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011a777:	01 d0                	add    %edx,%eax
f011a779:	48                   	dec    %eax
f011a77a:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011a77d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a780:	ba 00 00 00 00       	mov    $0x0,%edx
f011a785:	f7 75 ec             	divl   -0x14(%ebp)
f011a788:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011a78b:	29 d0                	sub    %edx,%eax
f011a78d:	01 c1                	add    %eax,%ecx
f011a78f:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011a796:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a79b:	0f b6 c0             	movzbl %al,%eax
f011a79e:	c1 e0 04             	shl    $0x4,%eax
f011a7a1:	89 c2                	mov    %eax,%edx
f011a7a3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011a7a6:	01 d0                	add    %edx,%eax
f011a7a8:	48                   	dec    %eax
f011a7a9:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011a7ac:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a7af:	ba 00 00 00 00       	mov    $0x0,%edx
f011a7b4:	f7 75 e4             	divl   -0x1c(%ebp)
f011a7b7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011a7ba:	29 d0                	sub    %edx,%eax
f011a7bc:	01 c8                	add    %ecx,%eax
f011a7be:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011a7c3:	29 c2                	sub    %eax,%edx
f011a7c5:	89 d0                	mov    %edx,%eax
f011a7c7:	83 ec 0c             	sub    $0xc,%esp
f011a7ca:	50                   	push   %eax
f011a7cb:	e8 14 cc fe ff       	call   f01073e4 <kmalloc>
f011a7d0:	83 c4 10             	add    $0x10,%esp
f011a7d3:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if (ptr_allocations[0] != NULL) panic("Kmalloc: Attempt to allocate more than heap size, should return NULL");
f011a7d9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a7df:	85 c0                	test   %eax,%eax
f011a7e1:	74 17                	je     f011a7fa <test_kmalloc_bestfit2+0x108>
f011a7e3:	83 ec 04             	sub    $0x4,%esp
f011a7e6:	68 88 a9 13 f0       	push   $0xf013a988
f011a7eb:	68 3f 02 00 00       	push   $0x23f
f011a7f0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a7f5:	e8 ac 59 fe ff       	call   f01001a6 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a7fa:	e8 d1 18 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a7ff:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a802:	e8 8d 94 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a807:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011a80a:	83 ec 0c             	sub    $0xc,%esp
f011a80d:	68 00 fc 1f 00       	push   $0x1ffc00
f011a812:	e8 cd cb fe ff       	call   f01073e4 <kmalloc>
f011a817:	83 c4 10             	add    $0x10,%esp
f011a81a:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011a820:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011a826:	89 c1                	mov    %eax,%ecx
f011a828:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011a82f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011a832:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a837:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011a83a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a83d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a842:	f7 75 d4             	divl   -0x2c(%ebp)
f011a845:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011a848:	29 d0                	sub    %edx,%eax
f011a84a:	89 c3                	mov    %eax,%ebx
f011a84c:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011a853:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a858:	0f b6 d0             	movzbl %al,%edx
f011a85b:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011a85e:	01 d0                	add    %edx,%eax
f011a860:	48                   	dec    %eax
f011a861:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011a864:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a867:	ba 00 00 00 00       	mov    $0x0,%edx
f011a86c:	f7 75 cc             	divl   -0x34(%ebp)
f011a86f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011a872:	29 d0                	sub    %edx,%eax
f011a874:	01 c3                	add    %eax,%ebx
f011a876:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011a87d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a882:	0f b6 c0             	movzbl %al,%eax
f011a885:	c1 e0 04             	shl    $0x4,%eax
f011a888:	89 c2                	mov    %eax,%edx
f011a88a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011a88d:	01 d0                	add    %edx,%eax
f011a88f:	48                   	dec    %eax
f011a890:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011a893:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a896:	ba 00 00 00 00       	mov    $0x0,%edx
f011a89b:	f7 75 c4             	divl   -0x3c(%ebp)
f011a89e:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011a8a1:	29 d0                	sub    %edx,%eax
f011a8a3:	01 d8                	add    %ebx,%eax
f011a8a5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011a8aa:	39 c1                	cmp    %eax,%ecx
f011a8ac:	74 17                	je     f011a8c5 <test_kmalloc_bestfit2+0x1d3>
f011a8ae:	83 ec 04             	sub    $0x4,%esp
f011a8b1:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011a8b6:	68 49 02 00 00       	push   $0x249
f011a8bb:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a8c0:	e8 e1 58 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a8c5:	e8 ca 93 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a8ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a8cd:	74 17                	je     f011a8e6 <test_kmalloc_bestfit2+0x1f4>
f011a8cf:	83 ec 04             	sub    $0x4,%esp
f011a8d2:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011a8d7:	68 4a 02 00 00       	push   $0x24a
f011a8dc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a8e1:	e8 c0 58 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011a8e6:	e8 e5 17 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a8eb:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011a8ee:	29 c2                	sub    %eax,%edx
f011a8f0:	89 d0                	mov    %edx,%eax
f011a8f2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011a8f7:	74 17                	je     f011a910 <test_kmalloc_bestfit2+0x21e>
f011a8f9:	83 ec 04             	sub    $0x4,%esp
f011a8fc:	68 20 a9 13 f0       	push   $0xf013a920
f011a901:	68 4b 02 00 00       	push   $0x24b
f011a906:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a90b:	e8 96 58 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011a910:	e8 bb 17 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011a915:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011a918:	e8 77 93 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a91d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011a920:	83 ec 0c             	sub    $0xc,%esp
f011a923:	68 00 fc 1f 00       	push   $0x1ffc00
f011a928:	e8 b7 ca fe ff       	call   f01073e4 <kmalloc>
f011a92d:	83 c4 10             	add    $0x10,%esp
f011a930:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011a936:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011a93c:	89 c1                	mov    %eax,%ecx
f011a93e:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011a945:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011a948:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011a94d:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011a950:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a953:	ba 00 00 00 00       	mov    $0x0,%edx
f011a958:	f7 75 bc             	divl   -0x44(%ebp)
f011a95b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011a95e:	29 d0                	sub    %edx,%eax
f011a960:	89 c3                	mov    %eax,%ebx
f011a962:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011a969:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a96e:	0f b6 d0             	movzbl %al,%edx
f011a971:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011a974:	01 d0                	add    %edx,%eax
f011a976:	48                   	dec    %eax
f011a977:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011a97a:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a97d:	ba 00 00 00 00       	mov    $0x0,%edx
f011a982:	f7 75 b4             	divl   -0x4c(%ebp)
f011a985:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011a988:	29 d0                	sub    %edx,%eax
f011a98a:	01 c3                	add    %eax,%ebx
f011a98c:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011a993:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011a998:	0f b6 c0             	movzbl %al,%eax
f011a99b:	c1 e0 04             	shl    $0x4,%eax
f011a99e:	89 c2                	mov    %eax,%edx
f011a9a0:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011a9a3:	01 d0                	add    %edx,%eax
f011a9a5:	48                   	dec    %eax
f011a9a6:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011a9a9:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a9ac:	ba 00 00 00 00       	mov    $0x0,%edx
f011a9b1:	f7 75 ac             	divl   -0x54(%ebp)
f011a9b4:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011a9b7:	29 d0                	sub    %edx,%eax
f011a9b9:	01 d8                	add    %ebx,%eax
f011a9bb:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011a9c0:	39 c1                	cmp    %eax,%ecx
f011a9c2:	74 17                	je     f011a9db <test_kmalloc_bestfit2+0x2e9>
f011a9c4:	83 ec 04             	sub    $0x4,%esp
f011a9c7:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011a9cc:	68 51 02 00 00       	push   $0x251
f011a9d1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a9d6:	e8 cb 57 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011a9db:	e8 b4 92 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011a9e0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011a9e3:	74 17                	je     f011a9fc <test_kmalloc_bestfit2+0x30a>
f011a9e5:	83 ec 04             	sub    $0x4,%esp
f011a9e8:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011a9ed:	68 52 02 00 00       	push   $0x252
f011a9f2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011a9f7:	e8 aa 57 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation: ");
f011a9fc:	e8 cf 16 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011aa01:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011aa04:	29 c2                	sub    %eax,%edx
f011aa06:	89 d0                	mov    %edx,%eax
f011aa08:	3d 00 02 00 00       	cmp    $0x200,%eax
f011aa0d:	74 17                	je     f011aa26 <test_kmalloc_bestfit2+0x334>
f011aa0f:	83 ec 04             	sub    $0x4,%esp
f011aa12:	68 20 a9 13 f0       	push   $0xf013a920
f011aa17:	68 53 02 00 00       	push   $0x253
f011aa1c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011aa21:	e8 80 57 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011aa26:	e8 a5 16 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011aa2b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011aa2e:	e8 61 92 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011aa33:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011aa36:	83 ec 0c             	sub    $0xc,%esp
f011aa39:	68 00 08 00 00       	push   $0x800
f011aa3e:	e8 a1 c9 fe ff       	call   f01073e4 <kmalloc>
f011aa43:	83 c4 10             	add    $0x10,%esp
f011aa46:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011aa4c:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011aa52:	89 c1                	mov    %eax,%ecx
f011aa54:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011aa5b:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011aa5e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aa63:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011aa66:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011aa69:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa6e:	f7 75 a4             	divl   -0x5c(%ebp)
f011aa71:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011aa74:	29 d0                	sub    %edx,%eax
f011aa76:	89 c3                	mov    %eax,%ebx
f011aa78:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011aa7f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011aa84:	0f b6 d0             	movzbl %al,%edx
f011aa87:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011aa8a:	01 d0                	add    %edx,%eax
f011aa8c:	48                   	dec    %eax
f011aa8d:	89 45 98             	mov    %eax,-0x68(%ebp)
f011aa90:	8b 45 98             	mov    -0x68(%ebp),%eax
f011aa93:	ba 00 00 00 00       	mov    $0x0,%edx
f011aa98:	f7 75 9c             	divl   -0x64(%ebp)
f011aa9b:	8b 45 98             	mov    -0x68(%ebp),%eax
f011aa9e:	29 d0                	sub    %edx,%eax
f011aaa0:	01 c3                	add    %eax,%ebx
f011aaa2:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011aaa9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011aaae:	0f b6 c0             	movzbl %al,%eax
f011aab1:	c1 e0 04             	shl    $0x4,%eax
f011aab4:	89 c2                	mov    %eax,%edx
f011aab6:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011aab9:	01 d0                	add    %edx,%eax
f011aabb:	48                   	dec    %eax
f011aabc:	89 45 90             	mov    %eax,-0x70(%ebp)
f011aabf:	8b 45 90             	mov    -0x70(%ebp),%eax
f011aac2:	ba 00 00 00 00       	mov    $0x0,%edx
f011aac7:	f7 75 94             	divl   -0x6c(%ebp)
f011aaca:	8b 45 90             	mov    -0x70(%ebp),%eax
f011aacd:	29 d0                	sub    %edx,%eax
f011aacf:	01 d8                	add    %ebx,%eax
f011aad1:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011aad6:	39 c1                	cmp    %eax,%ecx
f011aad8:	74 17                	je     f011aaf1 <test_kmalloc_bestfit2+0x3ff>
f011aada:	83 ec 04             	sub    $0x4,%esp
f011aadd:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011aae2:	68 59 02 00 00       	push   $0x259
f011aae7:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011aaec:	e8 b5 56 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011aaf1:	e8 9e 91 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011aaf6:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011aaf9:	74 17                	je     f011ab12 <test_kmalloc_bestfit2+0x420>
f011aafb:	83 ec 04             	sub    $0x4,%esp
f011aafe:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011ab03:	68 5a 02 00 00       	push   $0x25a
f011ab08:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ab0d:	e8 94 56 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011ab12:	e8 b9 15 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ab17:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ab1a:	29 c2                	sub    %eax,%edx
f011ab1c:	89 d0                	mov    %edx,%eax
f011ab1e:	83 f8 01             	cmp    $0x1,%eax
f011ab21:	74 17                	je     f011ab3a <test_kmalloc_bestfit2+0x448>
f011ab23:	83 ec 04             	sub    $0x4,%esp
f011ab26:	68 20 a9 13 f0       	push   $0xf013a920
f011ab2b:	68 5b 02 00 00       	push   $0x25b
f011ab30:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ab35:	e8 6c 56 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011ab3a:	e8 91 15 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ab3f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ab42:	e8 4d 91 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ab47:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011ab4a:	83 ec 0c             	sub    $0xc,%esp
f011ab4d:	68 00 08 00 00       	push   $0x800
f011ab52:	e8 8d c8 fe ff       	call   f01073e4 <kmalloc>
f011ab57:	83 c4 10             	add    $0x10,%esp
f011ab5a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011ab60:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011ab66:	89 c1                	mov    %eax,%ecx
f011ab68:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011ab6f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ab72:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ab77:	89 45 88             	mov    %eax,-0x78(%ebp)
f011ab7a:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ab7d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ab82:	f7 75 8c             	divl   -0x74(%ebp)
f011ab85:	8b 45 88             	mov    -0x78(%ebp),%eax
f011ab88:	29 d0                	sub    %edx,%eax
f011ab8a:	89 c3                	mov    %eax,%ebx
f011ab8c:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011ab93:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ab98:	0f b6 d0             	movzbl %al,%edx
f011ab9b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011ab9e:	01 d0                	add    %edx,%eax
f011aba0:	48                   	dec    %eax
f011aba1:	89 45 80             	mov    %eax,-0x80(%ebp)
f011aba4:	8b 45 80             	mov    -0x80(%ebp),%eax
f011aba7:	ba 00 00 00 00       	mov    $0x0,%edx
f011abac:	f7 75 84             	divl   -0x7c(%ebp)
f011abaf:	8b 45 80             	mov    -0x80(%ebp),%eax
f011abb2:	29 d0                	sub    %edx,%eax
f011abb4:	01 c3                	add    %eax,%ebx
f011abb6:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011abbd:	10 00 00 
f011abc0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011abc5:	0f b6 c0             	movzbl %al,%eax
f011abc8:	c1 e0 04             	shl    $0x4,%eax
f011abcb:	89 c2                	mov    %eax,%edx
f011abcd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011abd3:	01 d0                	add    %edx,%eax
f011abd5:	48                   	dec    %eax
f011abd6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011abdc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011abe2:	ba 00 00 00 00       	mov    $0x0,%edx
f011abe7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011abed:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011abf3:	29 d0                	sub    %edx,%eax
f011abf5:	01 d8                	add    %ebx,%eax
f011abf7:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011abfc:	39 c1                	cmp    %eax,%ecx
f011abfe:	74 17                	je     f011ac17 <test_kmalloc_bestfit2+0x525>
f011ac00:	83 ec 04             	sub    $0x4,%esp
f011ac03:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011ac08:	68 61 02 00 00       	push   $0x261
f011ac0d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ac12:	e8 8f 55 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac17:	e8 78 90 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ac1c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ac1f:	74 17                	je     f011ac38 <test_kmalloc_bestfit2+0x546>
f011ac21:	83 ec 04             	sub    $0x4,%esp
f011ac24:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011ac29:	68 62 02 00 00       	push   $0x262
f011ac2e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ac33:	e8 6e 55 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  1) panic("Wrong allocation: ");
f011ac38:	e8 93 14 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ac3d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011ac40:	29 c2                	sub    %eax,%edx
f011ac42:	89 d0                	mov    %edx,%eax
f011ac44:	83 f8 01             	cmp    $0x1,%eax
f011ac47:	74 17                	je     f011ac60 <test_kmalloc_bestfit2+0x56e>
f011ac49:	83 ec 04             	sub    $0x4,%esp
f011ac4c:	68 20 a9 13 f0       	push   $0xf013a920
f011ac51:	68 63 02 00 00       	push   $0x263
f011ac56:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ac5b:	e8 46 55 fe ff       	call   f01001a6 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ac60:	e8 6b 14 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ac65:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ac68:	e8 27 90 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ac6d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011ac70:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011ac76:	83 ec 0c             	sub    $0xc,%esp
f011ac79:	50                   	push   %eax
f011ac7a:	e8 7f c7 fe ff       	call   f01073fe <kfree>
f011ac7f:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ac82:	e8 0d 90 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ac87:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ac8a:	74 17                	je     f011aca3 <test_kmalloc_bestfit2+0x5b1>
f011ac8c:	83 ec 04             	sub    $0x4,%esp
f011ac8f:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011ac94:	68 69 02 00 00       	push   $0x269
f011ac99:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ac9e:	e8 03 55 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong allocation: ");
f011aca3:	e8 28 14 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011aca8:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011acab:	83 f8 01             	cmp    $0x1,%eax
f011acae:	74 17                	je     f011acc7 <test_kmalloc_bestfit2+0x5d5>
f011acb0:	83 ec 04             	sub    $0x4,%esp
f011acb3:	68 20 a9 13 f0       	push   $0xf013a920
f011acb8:	68 6a 02 00 00       	push   $0x26a
f011acbd:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011acc2:	e8 df 54 fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011acc7:	e8 04 14 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011accc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011accf:	e8 c0 8f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011acd4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011acd7:	83 ec 0c             	sub    $0xc,%esp
f011acda:	68 00 1c 00 00       	push   $0x1c00
f011acdf:	e8 00 c7 fe ff       	call   f01073e4 <kmalloc>
f011ace4:	83 c4 10             	add    $0x10,%esp
f011ace7:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011aced:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011acf3:	89 c1                	mov    %eax,%ecx
f011acf5:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011acfc:	10 00 00 
f011acff:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011ad05:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ad0a:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011ad10:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ad16:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad1b:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011ad21:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011ad27:	29 d0                	sub    %edx,%eax
f011ad29:	89 c3                	mov    %eax,%ebx
f011ad2b:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011ad32:	10 00 00 
f011ad35:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ad3a:	0f b6 d0             	movzbl %al,%edx
f011ad3d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011ad43:	01 d0                	add    %edx,%eax
f011ad45:	48                   	dec    %eax
f011ad46:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011ad4c:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ad52:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad57:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011ad5d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011ad63:	29 d0                	sub    %edx,%eax
f011ad65:	01 c3                	add    %eax,%ebx
f011ad67:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011ad6e:	10 00 00 
f011ad71:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ad76:	0f b6 c0             	movzbl %al,%eax
f011ad79:	c1 e0 04             	shl    $0x4,%eax
f011ad7c:	89 c2                	mov    %eax,%edx
f011ad7e:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011ad84:	01 d0                	add    %edx,%eax
f011ad86:	48                   	dec    %eax
f011ad87:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011ad8d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ad93:	ba 00 00 00 00       	mov    $0x0,%edx
f011ad98:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011ad9e:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011ada4:	29 d0                	sub    %edx,%eax
f011ada6:	01 d8                	add    %ebx,%eax
f011ada8:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011adad:	39 c1                	cmp    %eax,%ecx
f011adaf:	74 17                	je     f011adc8 <test_kmalloc_bestfit2+0x6d6>
f011adb1:	83 ec 04             	sub    $0x4,%esp
f011adb4:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011adb9:	68 70 02 00 00       	push   $0x270
f011adbe:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011adc3:	e8 de 53 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011adc8:	e8 c7 8e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011adcd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011add0:	74 17                	je     f011ade9 <test_kmalloc_bestfit2+0x6f7>
f011add2:	83 ec 04             	sub    $0x4,%esp
f011add5:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011adda:	68 71 02 00 00       	push   $0x271
f011addf:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ade4:	e8 bd 53 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation: ");
f011ade9:	e8 e2 12 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011adee:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011adf1:	29 c2                	sub    %eax,%edx
f011adf3:	89 d0                	mov    %edx,%eax
f011adf5:	83 f8 02             	cmp    $0x2,%eax
f011adf8:	74 17                	je     f011ae11 <test_kmalloc_bestfit2+0x71f>
f011adfa:	83 ec 04             	sub    $0x4,%esp
f011adfd:	68 20 a9 13 f0       	push   $0xf013a920
f011ae02:	68 72 02 00 00       	push   $0x272
f011ae07:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ae0c:	e8 95 53 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011ae11:	e8 ba 12 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ae16:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ae19:	e8 76 8e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ae1e:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011ae21:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ae27:	83 ec 0c             	sub    $0xc,%esp
f011ae2a:	50                   	push   %eax
f011ae2b:	e8 ce c5 fe ff       	call   f01073fe <kfree>
f011ae30:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ae33:	e8 5c 8e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ae38:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011ae3b:	74 17                	je     f011ae54 <test_kmalloc_bestfit2+0x762>
f011ae3d:	83 ec 04             	sub    $0x4,%esp
f011ae40:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011ae45:	68 78 02 00 00       	push   $0x278
f011ae4a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ae4f:	e8 52 53 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: Extra or less pages are removed from main memory");
f011ae54:	e8 77 12 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ae59:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011ae5c:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ae61:	74 17                	je     f011ae7a <test_kmalloc_bestfit2+0x788>
f011ae63:	83 ec 04             	sub    $0x4,%esp
f011ae66:	68 a4 a7 13 f0       	push   $0xf013a7a4
f011ae6b:	68 79 02 00 00       	push   $0x279
f011ae70:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ae75:	e8 2c 53 fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011ae7a:	e8 51 12 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ae7f:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011ae82:	e8 0d 8e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ae87:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011ae8a:	83 ec 0c             	sub    $0xc,%esp
f011ae8d:	68 00 fc 2f 00       	push   $0x2ffc00
f011ae92:	e8 4d c5 fe ff       	call   f01073e4 <kmalloc>
f011ae97:	83 c4 10             	add    $0x10,%esp
f011ae9a:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011aea0:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011aea6:	89 c1                	mov    %eax,%ecx
f011aea8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011aeaf:	10 00 00 
f011aeb2:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011aeb8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011aebd:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011aec3:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011aec9:	ba 00 00 00 00       	mov    $0x0,%edx
f011aece:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011aed4:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011aeda:	29 d0                	sub    %edx,%eax
f011aedc:	89 c3                	mov    %eax,%ebx
f011aede:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011aee5:	10 00 00 
f011aee8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011aeed:	0f b6 d0             	movzbl %al,%edx
f011aef0:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011aef6:	01 d0                	add    %edx,%eax
f011aef8:	48                   	dec    %eax
f011aef9:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011aeff:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011af05:	ba 00 00 00 00       	mov    $0x0,%edx
f011af0a:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011af10:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011af16:	29 d0                	sub    %edx,%eax
f011af18:	01 c3                	add    %eax,%ebx
f011af1a:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011af21:	10 00 00 
f011af24:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011af29:	0f b6 c0             	movzbl %al,%eax
f011af2c:	c1 e0 04             	shl    $0x4,%eax
f011af2f:	89 c2                	mov    %eax,%edx
f011af31:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011af37:	01 d0                	add    %edx,%eax
f011af39:	48                   	dec    %eax
f011af3a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011af40:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011af46:	ba 00 00 00 00       	mov    $0x0,%edx
f011af4b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011af51:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011af57:	29 d0                	sub    %edx,%eax
f011af59:	01 d8                	add    %ebx,%eax
f011af5b:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011af60:	39 c1                	cmp    %eax,%ecx
f011af62:	74 17                	je     f011af7b <test_kmalloc_bestfit2+0x889>
f011af64:	83 ec 04             	sub    $0x4,%esp
f011af67:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011af6c:	68 7f 02 00 00       	push   $0x27f
f011af71:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011af76:	e8 2b 52 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011af7b:	e8 14 8d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011af80:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011af83:	74 17                	je     f011af9c <test_kmalloc_bestfit2+0x8aa>
f011af85:	83 ec 04             	sub    $0x4,%esp
f011af88:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011af8d:	68 80 02 00 00       	push   $0x280
f011af92:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011af97:	e8 0a 52 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  768) panic("Wrong allocation: ");
f011af9c:	e8 2f 11 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011afa1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011afa4:	29 c2                	sub    %eax,%edx
f011afa6:	89 d0                	mov    %edx,%eax
f011afa8:	3d 00 03 00 00       	cmp    $0x300,%eax
f011afad:	74 17                	je     f011afc6 <test_kmalloc_bestfit2+0x8d4>
f011afaf:	83 ec 04             	sub    $0x4,%esp
f011afb2:	68 20 a9 13 f0       	push   $0xf013a920
f011afb7:	68 81 02 00 00       	push   $0x281
f011afbc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011afc1:	e8 e0 51 fe ff       	call   f01001a6 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011afc6:	e8 05 11 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011afcb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011afce:	e8 c1 8c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011afd3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011afd6:	83 ec 0c             	sub    $0xc,%esp
f011afd9:	68 00 18 20 00       	push   $0x201800
f011afde:	e8 01 c4 fe ff       	call   f01073e4 <kmalloc>
f011afe3:	83 c4 10             	add    $0x10,%esp
f011afe6:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011afec:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011aff2:	89 c1                	mov    %eax,%ecx
f011aff4:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011affb:	10 00 00 
f011affe:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011b004:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b009:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011b00f:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b015:	ba 00 00 00 00       	mov    $0x0,%edx
f011b01a:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011b020:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011b026:	29 d0                	sub    %edx,%eax
f011b028:	89 c3                	mov    %eax,%ebx
f011b02a:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011b031:	10 00 00 
f011b034:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b039:	0f b6 d0             	movzbl %al,%edx
f011b03c:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011b042:	01 d0                	add    %edx,%eax
f011b044:	48                   	dec    %eax
f011b045:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011b04b:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b051:	ba 00 00 00 00       	mov    $0x0,%edx
f011b056:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011b05c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011b062:	29 d0                	sub    %edx,%eax
f011b064:	01 c3                	add    %eax,%ebx
f011b066:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011b06d:	10 00 00 
f011b070:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b075:	0f b6 c0             	movzbl %al,%eax
f011b078:	c1 e0 04             	shl    $0x4,%eax
f011b07b:	89 c2                	mov    %eax,%edx
f011b07d:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011b083:	01 d0                	add    %edx,%eax
f011b085:	48                   	dec    %eax
f011b086:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011b08c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b092:	ba 00 00 00 00       	mov    $0x0,%edx
f011b097:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011b09d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011b0a3:	29 d0                	sub    %edx,%eax
f011b0a5:	01 d8                	add    %ebx,%eax
f011b0a7:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b0ac:	39 c1                	cmp    %eax,%ecx
f011b0ae:	74 17                	je     f011b0c7 <test_kmalloc_bestfit2+0x9d5>
f011b0b0:	83 ec 04             	sub    $0x4,%esp
f011b0b3:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011b0b8:	68 87 02 00 00       	push   $0x287
f011b0bd:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b0c2:	e8 df 50 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b0c7:	e8 c8 8b fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b0cc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b0cf:	74 17                	je     f011b0e8 <test_kmalloc_bestfit2+0x9f6>
f011b0d1:	83 ec 04             	sub    $0x4,%esp
f011b0d4:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011b0d9:	68 88 02 00 00       	push   $0x288
f011b0de:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b0e3:	e8 be 50 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011b0e8:	e8 e3 0f ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b0ed:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b0f0:	29 c2                	sub    %eax,%edx
f011b0f2:	89 d0                	mov    %edx,%eax
f011b0f4:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b0f9:	74 17                	je     f011b112 <test_kmalloc_bestfit2+0xa20>
f011b0fb:	83 ec 04             	sub    $0x4,%esp
f011b0fe:	68 20 a9 13 f0       	push   $0xf013a920
f011b103:	68 89 02 00 00       	push   $0x289
f011b108:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b10d:	e8 94 50 fe ff       	call   f01001a6 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011b112:	e8 b9 0f ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b117:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b11a:	e8 75 8b fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b11f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011b122:	83 ec 0c             	sub    $0xc,%esp
f011b125:	68 00 fc 4f 00       	push   $0x4ffc00
f011b12a:	e8 b5 c2 fe ff       	call   f01073e4 <kmalloc>
f011b12f:	83 c4 10             	add    $0x10,%esp
f011b132:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011b138:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011b13e:	89 c1                	mov    %eax,%ecx
f011b140:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011b147:	10 00 00 
f011b14a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011b150:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b155:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011b15b:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b161:	ba 00 00 00 00       	mov    $0x0,%edx
f011b166:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011b16c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011b172:	29 d0                	sub    %edx,%eax
f011b174:	89 c3                	mov    %eax,%ebx
f011b176:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011b17d:	10 00 00 
f011b180:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b185:	0f b6 d0             	movzbl %al,%edx
f011b188:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011b18e:	01 d0                	add    %edx,%eax
f011b190:	48                   	dec    %eax
f011b191:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011b197:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b19d:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1a2:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011b1a8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011b1ae:	29 d0                	sub    %edx,%eax
f011b1b0:	01 c3                	add    %eax,%ebx
f011b1b2:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011b1b9:	10 00 00 
f011b1bc:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b1c1:	0f b6 c0             	movzbl %al,%eax
f011b1c4:	c1 e0 04             	shl    $0x4,%eax
f011b1c7:	89 c2                	mov    %eax,%edx
f011b1c9:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011b1cf:	01 d0                	add    %edx,%eax
f011b1d1:	48                   	dec    %eax
f011b1d2:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011b1d8:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b1de:	ba 00 00 00 00       	mov    $0x0,%edx
f011b1e3:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011b1e9:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011b1ef:	29 d0                	sub    %edx,%eax
f011b1f1:	01 d8                	add    %ebx,%eax
f011b1f3:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011b1f8:	39 c1                	cmp    %eax,%ecx
f011b1fa:	74 17                	je     f011b213 <test_kmalloc_bestfit2+0xb21>
f011b1fc:	83 ec 04             	sub    $0x4,%esp
f011b1ff:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011b204:	68 8f 02 00 00       	push   $0x28f
f011b209:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b20e:	e8 93 4f fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b213:	e8 7c 8a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b218:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b21b:	74 17                	je     f011b234 <test_kmalloc_bestfit2+0xb42>
f011b21d:	83 ec 04             	sub    $0x4,%esp
f011b220:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011b225:	68 90 02 00 00       	push   $0x290
f011b22a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b22f:	e8 72 4f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((5*Mega)/PAGE_SIZE)) panic("Wrong allocation: ");
f011b234:	e8 97 0e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b239:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b23c:	29 c2                	sub    %eax,%edx
f011b23e:	89 d0                	mov    %edx,%eax
f011b240:	3d 00 05 00 00       	cmp    $0x500,%eax
f011b245:	74 17                	je     f011b25e <test_kmalloc_bestfit2+0xb6c>
f011b247:	83 ec 04             	sub    $0x4,%esp
f011b24a:	68 20 a9 13 f0       	push   $0xf013a920
f011b24f:	68 91 02 00 00       	push   $0x291
f011b254:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b259:	e8 48 4f fe ff       	call   f01001a6 <_panic>

		//2 MB + 8 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b25e:	e8 6d 0e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b263:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b266:	e8 29 8a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b26b:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f011b26e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011b274:	83 ec 0c             	sub    $0xc,%esp
f011b277:	50                   	push   %eax
f011b278:	e8 81 c1 fe ff       	call   f01073fe <kfree>
f011b27d:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b280:	e8 0f 8a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b285:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b288:	74 17                	je     f011b2a1 <test_kmalloc_bestfit2+0xbaf>
f011b28a:	83 ec 04             	sub    $0x4,%esp
f011b28d:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011b292:	68 97 02 00 00       	push   $0x297
f011b297:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b29c:	e8 05 4f fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  514) panic("Wrong free: Extra or less pages are removed from main memory");
f011b2a1:	e8 2a 0e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b2a6:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b2a9:	3d 02 02 00 00       	cmp    $0x202,%eax
f011b2ae:	74 17                	je     f011b2c7 <test_kmalloc_bestfit2+0xbd5>
f011b2b0:	83 ec 04             	sub    $0x4,%esp
f011b2b3:	68 a4 a7 13 f0       	push   $0xf013a7a4
f011b2b8:	68 98 02 00 00       	push   $0x298
f011b2bd:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b2c2:	e8 df 4e fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b2c7:	e8 04 0e ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b2cc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b2cf:	e8 c0 89 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b2d4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011b2d7:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011b2dd:	83 ec 0c             	sub    $0xc,%esp
f011b2e0:	50                   	push   %eax
f011b2e1:	e8 18 c1 fe ff       	call   f01073fe <kfree>
f011b2e6:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b2e9:	e8 a6 89 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b2ee:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b2f1:	74 17                	je     f011b30a <test_kmalloc_bestfit2+0xc18>
f011b2f3:	83 ec 04             	sub    $0x4,%esp
f011b2f6:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011b2fb:	68 9e 02 00 00       	push   $0x29e
f011b300:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b305:	e8 9c 4e fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  512) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b30a:	e8 c1 0d ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b30f:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b312:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b317:	74 17                	je     f011b330 <test_kmalloc_bestfit2+0xc3e>
f011b319:	83 ec 04             	sub    $0x4,%esp
f011b31c:	68 d0 a9 13 f0       	push   $0xf013a9d0
f011b321:	68 9f 02 00 00       	push   $0x29f
f011b326:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b32b:	e8 76 4e fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011b330:	e8 9b 0d ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b335:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b338:	e8 57 89 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b33d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(2*Mega-kilo);
f011b340:	83 ec 0c             	sub    $0xc,%esp
f011b343:	68 00 fc 1f 00       	push   $0x1ffc00
f011b348:	e8 97 c0 fe ff       	call   f01073e4 <kmalloc>
f011b34d:	83 c4 10             	add    $0x10,%esp
f011b350:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b356:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011b35c:	89 c1                	mov    %eax,%ecx
f011b35e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011b365:	10 00 00 
f011b368:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011b36e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b373:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011b379:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b37f:	ba 00 00 00 00       	mov    $0x0,%edx
f011b384:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011b38a:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011b390:	29 d0                	sub    %edx,%eax
f011b392:	89 c3                	mov    %eax,%ebx
f011b394:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011b39b:	10 00 00 
f011b39e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b3a3:	0f b6 d0             	movzbl %al,%edx
f011b3a6:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011b3ac:	01 d0                	add    %edx,%eax
f011b3ae:	48                   	dec    %eax
f011b3af:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011b3b5:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b3bb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b3c0:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011b3c6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011b3cc:	29 d0                	sub    %edx,%eax
f011b3ce:	01 c3                	add    %eax,%ebx
f011b3d0:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011b3d7:	10 00 00 
f011b3da:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b3df:	0f b6 c0             	movzbl %al,%eax
f011b3e2:	c1 e0 04             	shl    $0x4,%eax
f011b3e5:	89 c2                	mov    %eax,%edx
f011b3e7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011b3ed:	01 d0                	add    %edx,%eax
f011b3ef:	48                   	dec    %eax
f011b3f0:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011b3f6:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b3fc:	ba 00 00 00 00       	mov    $0x0,%edx
f011b401:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011b407:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011b40d:	29 d0                	sub    %edx,%eax
f011b40f:	01 d8                	add    %ebx,%eax
f011b411:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011b416:	39 c1                	cmp    %eax,%ecx
f011b418:	74 17                	je     f011b431 <test_kmalloc_bestfit2+0xd3f>
f011b41a:	83 ec 04             	sub    $0x4,%esp
f011b41d:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011b422:	68 a5 02 00 00       	push   $0x2a5
f011b427:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b42c:	e8 75 4d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b431:	e8 5e 88 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b436:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b439:	74 17                	je     f011b452 <test_kmalloc_bestfit2+0xd60>
f011b43b:	83 ec 04             	sub    $0x4,%esp
f011b43e:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011b443:	68 a6 02 00 00       	push   $0x2a6
f011b448:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b44d:	e8 54 4d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  512) panic("Wrong allocation:");
f011b452:	e8 79 0c ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b457:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b45a:	29 c2                	sub    %eax,%edx
f011b45c:	89 d0                	mov    %edx,%eax
f011b45e:	3d 00 02 00 00       	cmp    $0x200,%eax
f011b463:	74 17                	je     f011b47c <test_kmalloc_bestfit2+0xd8a>
f011b465:	83 ec 04             	sub    $0x4,%esp
f011b468:	68 0e aa 13 f0       	push   $0xf013aa0e
f011b46d:	68 a7 02 00 00       	push   $0x2a7
f011b472:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b477:	e8 2a 4d fe ff       	call   f01001a6 <_panic>

		//6 KB
		freeFrames = sys_calculate_free_frames() ;
f011b47c:	e8 4f 0c ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b481:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b484:	e8 0b 88 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b489:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[9] = kmalloc(6*kilo);
f011b48c:	83 ec 0c             	sub    $0xc,%esp
f011b48f:	68 00 18 00 00       	push   $0x1800
f011b494:	e8 4b bf fe ff       	call   f01073e4 <kmalloc>
f011b499:	83 c4 10             	add    $0x10,%esp
f011b49c:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 9*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b4a2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011b4a8:	89 c1                	mov    %eax,%ecx
f011b4aa:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011b4b1:	10 00 00 
f011b4b4:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011b4ba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b4bf:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011b4c5:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b4cb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b4d0:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011b4d6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011b4dc:	29 d0                	sub    %edx,%eax
f011b4de:	89 c3                	mov    %eax,%ebx
f011b4e0:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011b4e7:	10 00 00 
f011b4ea:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b4ef:	0f b6 d0             	movzbl %al,%edx
f011b4f2:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011b4f8:	01 d0                	add    %edx,%eax
f011b4fa:	48                   	dec    %eax
f011b4fb:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011b501:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b507:	ba 00 00 00 00       	mov    $0x0,%edx
f011b50c:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011b512:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011b518:	29 d0                	sub    %edx,%eax
f011b51a:	01 c3                	add    %eax,%ebx
f011b51c:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011b523:	10 00 00 
f011b526:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b52b:	0f b6 c0             	movzbl %al,%eax
f011b52e:	c1 e0 04             	shl    $0x4,%eax
f011b531:	89 c2                	mov    %eax,%edx
f011b533:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011b539:	01 d0                	add    %edx,%eax
f011b53b:	48                   	dec    %eax
f011b53c:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011b542:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b548:	ba 00 00 00 00       	mov    $0x0,%edx
f011b54d:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011b553:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011b559:	29 d0                	sub    %edx,%eax
f011b55b:	01 d8                	add    %ebx,%eax
f011b55d:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f011b562:	39 c1                	cmp    %eax,%ecx
f011b564:	74 17                	je     f011b57d <test_kmalloc_bestfit2+0xe8b>
f011b566:	83 ec 04             	sub    $0x4,%esp
f011b569:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011b56e:	68 ad 02 00 00       	push   $0x2ad
f011b573:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b578:	e8 29 4c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b57d:	e8 12 87 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b582:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b585:	74 17                	je     f011b59e <test_kmalloc_bestfit2+0xeac>
f011b587:	83 ec 04             	sub    $0x4,%esp
f011b58a:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011b58f:	68 ae 02 00 00       	push   $0x2ae
f011b594:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b599:	e8 08 4c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  2) panic("Wrong allocation:");
f011b59e:	e8 2d 0b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b5a3:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b5a6:	29 c2                	sub    %eax,%edx
f011b5a8:	89 d0                	mov    %edx,%eax
f011b5aa:	83 f8 02             	cmp    $0x2,%eax
f011b5ad:	74 17                	je     f011b5c6 <test_kmalloc_bestfit2+0xed4>
f011b5af:	83 ec 04             	sub    $0x4,%esp
f011b5b2:	68 0e aa 13 f0       	push   $0xf013aa0e
f011b5b7:	68 af 02 00 00       	push   $0x2af
f011b5bc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b5c1:	e8 e0 4b fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011b5c6:	e8 05 0b ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b5cb:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b5ce:	e8 c1 86 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b5d3:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011b5d6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011b5dc:	83 ec 0c             	sub    $0xc,%esp
f011b5df:	50                   	push   %eax
f011b5e0:	e8 19 be fe ff       	call   f01073fe <kfree>
f011b5e5:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b5e8:	e8 a7 86 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b5ed:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b5f0:	74 17                	je     f011b609 <test_kmalloc_bestfit2+0xf17>
f011b5f2:	83 ec 04             	sub    $0x4,%esp
f011b5f5:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011b5fa:	68 b5 02 00 00       	push   $0x2b5
f011b5ff:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b604:	e8 9d 4b fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) !=  768) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b609:	e8 c2 0a ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b60e:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011b611:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b616:	74 17                	je     f011b62f <test_kmalloc_bestfit2+0xf3d>
f011b618:	83 ec 04             	sub    $0x4,%esp
f011b61b:	68 d0 a9 13 f0       	push   $0xf013a9d0
f011b620:	68 b6 02 00 00       	push   $0x2b6
f011b625:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b62a:	e8 77 4b fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011b62f:	e8 9c 0a ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b634:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b637:	e8 58 86 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b63c:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[10] = kmalloc(3*Mega-kilo);
f011b63f:	83 ec 0c             	sub    $0xc,%esp
f011b642:	68 00 fc 2f 00       	push   $0x2ffc00
f011b647:	e8 98 bd fe ff       	call   f01073e4 <kmalloc>
f011b64c:	83 c4 10             	add    $0x10,%esp
f011b64f:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011b655:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011b65b:	89 c1                	mov    %eax,%ecx
f011b65d:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011b664:	10 00 00 
f011b667:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011b66d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b672:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011b678:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b67e:	ba 00 00 00 00       	mov    $0x0,%edx
f011b683:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011b689:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011b68f:	29 d0                	sub    %edx,%eax
f011b691:	89 c3                	mov    %eax,%ebx
f011b693:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011b69a:	10 00 00 
f011b69d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b6a2:	0f b6 d0             	movzbl %al,%edx
f011b6a5:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011b6ab:	01 d0                	add    %edx,%eax
f011b6ad:	48                   	dec    %eax
f011b6ae:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011b6b4:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b6ba:	ba 00 00 00 00       	mov    $0x0,%edx
f011b6bf:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011b6c5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011b6cb:	29 d0                	sub    %edx,%eax
f011b6cd:	01 c3                	add    %eax,%ebx
f011b6cf:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011b6d6:	10 00 00 
f011b6d9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b6de:	0f b6 c0             	movzbl %al,%eax
f011b6e1:	c1 e0 04             	shl    $0x4,%eax
f011b6e4:	89 c2                	mov    %eax,%edx
f011b6e6:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011b6ec:	01 d0                	add    %edx,%eax
f011b6ee:	48                   	dec    %eax
f011b6ef:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011b6f5:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b6fb:	ba 00 00 00 00       	mov    $0x0,%edx
f011b700:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011b706:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011b70c:	29 d0                	sub    %edx,%eax
f011b70e:	01 d8                	add    %ebx,%eax
f011b710:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011b715:	39 c1                	cmp    %eax,%ecx
f011b717:	74 17                	je     f011b730 <test_kmalloc_bestfit2+0x103e>
f011b719:	83 ec 04             	sub    $0x4,%esp
f011b71c:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011b721:	68 bc 02 00 00       	push   $0x2bc
f011b726:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b72b:	e8 76 4a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b730:	e8 5f 85 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b735:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b738:	74 17                	je     f011b751 <test_kmalloc_bestfit2+0x105f>
f011b73a:	83 ec 04             	sub    $0x4,%esp
f011b73d:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011b742:	68 bd 02 00 00       	push   $0x2bd
f011b747:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b74c:	e8 55 4a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  ((3*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b751:	e8 7a 09 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b756:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b759:	29 c2                	sub    %eax,%edx
f011b75b:	89 d0                	mov    %edx,%eax
f011b75d:	3d 00 03 00 00       	cmp    $0x300,%eax
f011b762:	74 17                	je     f011b77b <test_kmalloc_bestfit2+0x1089>
f011b764:	83 ec 04             	sub    $0x4,%esp
f011b767:	68 d0 a9 13 f0       	push   $0xf013a9d0
f011b76c:	68 be 02 00 00       	push   $0x2be
f011b771:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b776:	e8 2b 4a fe ff       	call   f01001a6 <_panic>

		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f011b77b:	e8 50 09 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b780:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f011b783:	e8 0c 85 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b788:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[11] = kmalloc(4*Mega-kilo);
f011b78b:	83 ec 0c             	sub    $0xc,%esp
f011b78e:	68 00 fc 3f 00       	push   $0x3ffc00
f011b793:	e8 4c bc fe ff       	call   f01073e4 <kmalloc>
f011b798:	83 c4 10             	add    $0x10,%esp
f011b79b:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011b7a1:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011b7a7:	89 c1                	mov    %eax,%ecx
f011b7a9:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011b7b0:	10 00 00 
f011b7b3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011b7b9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b7be:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011b7c4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b7ca:	ba 00 00 00 00       	mov    $0x0,%edx
f011b7cf:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011b7d5:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011b7db:	29 d0                	sub    %edx,%eax
f011b7dd:	89 c3                	mov    %eax,%ebx
f011b7df:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011b7e6:	10 00 00 
f011b7e9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b7ee:	0f b6 d0             	movzbl %al,%edx
f011b7f1:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011b7f7:	01 d0                	add    %edx,%eax
f011b7f9:	48                   	dec    %eax
f011b7fa:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011b800:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b806:	ba 00 00 00 00       	mov    $0x0,%edx
f011b80b:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011b811:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011b817:	29 d0                	sub    %edx,%eax
f011b819:	01 c3                	add    %eax,%ebx
f011b81b:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011b822:	10 00 00 
f011b825:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b82a:	0f b6 c0             	movzbl %al,%eax
f011b82d:	c1 e0 04             	shl    $0x4,%eax
f011b830:	89 c2                	mov    %eax,%edx
f011b832:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011b838:	01 d0                	add    %edx,%eax
f011b83a:	48                   	dec    %eax
f011b83b:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011b841:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b847:	ba 00 00 00 00       	mov    $0x0,%edx
f011b84c:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011b852:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011b858:	29 d0                	sub    %edx,%eax
f011b85a:	01 d8                	add    %ebx,%eax
f011b85c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011b861:	39 c1                	cmp    %eax,%ecx
f011b863:	74 17                	je     f011b87c <test_kmalloc_bestfit2+0x118a>
f011b865:	83 ec 04             	sub    $0x4,%esp
f011b868:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011b86d:	68 c4 02 00 00       	push   $0x2c4
f011b872:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b877:	e8 2a 49 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011b87c:	e8 13 84 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011b881:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011b884:	74 17                	je     f011b89d <test_kmalloc_bestfit2+0x11ab>
f011b886:	83 ec 04             	sub    $0x4,%esp
f011b889:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011b88e:	68 c5 02 00 00       	push   $0x2c5
f011b893:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b898:	e8 09 49 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != ((4*Mega)/4096)) panic("Wrong free: Extra or less pages are removed from main memory.");
f011b89d:	e8 2e 08 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011b8a2:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011b8a5:	29 c2                	sub    %eax,%edx
f011b8a7:	89 d0                	mov    %edx,%eax
f011b8a9:	3d 00 04 00 00       	cmp    $0x400,%eax
f011b8ae:	74 17                	je     f011b8c7 <test_kmalloc_bestfit2+0x11d5>
f011b8b0:	83 ec 04             	sub    $0x4,%esp
f011b8b3:	68 d0 a9 13 f0       	push   $0xf013a9d0
f011b8b8:	68 c6 02 00 00       	push   $0x2c6
f011b8bd:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b8c2:	e8 df 48 fe ff       	call   f01001a6 <_panic>
	}

	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[12] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011b8c7:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011b8ce:	10 00 00 
f011b8d1:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011b8d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011b8dc:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011b8e2:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011b8e8:	ba 00 00 00 00       	mov    $0x0,%edx
f011b8ed:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011b8f3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011b8f9:	29 d0                	sub    %edx,%eax
f011b8fb:	89 c1                	mov    %eax,%ecx
f011b8fd:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011b904:	10 00 00 
f011b907:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b90c:	0f b6 d0             	movzbl %al,%edx
f011b90f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011b915:	01 d0                	add    %edx,%eax
f011b917:	48                   	dec    %eax
f011b918:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011b91e:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011b924:	ba 00 00 00 00       	mov    $0x0,%edx
f011b929:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011b92f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011b935:	29 d0                	sub    %edx,%eax
f011b937:	01 c1                	add    %eax,%ecx
f011b939:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011b940:	10 00 00 
f011b943:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011b948:	0f b6 c0             	movzbl %al,%eax
f011b94b:	c1 e0 04             	shl    $0x4,%eax
f011b94e:	89 c2                	mov    %eax,%edx
f011b950:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011b956:	01 d0                	add    %edx,%eax
f011b958:	48                   	dec    %eax
f011b959:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011b95f:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011b965:	ba 00 00 00 00       	mov    $0x0,%edx
f011b96a:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011b970:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011b976:	29 d0                	sub    %edx,%eax
f011b978:	01 c8                	add    %ecx,%eax
f011b97a:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011b97f:	29 c2                	sub    %eax,%edx
f011b981:	89 d0                	mov    %edx,%eax
f011b983:	83 ec 0c             	sub    $0xc,%esp
f011b986:	50                   	push   %eax
f011b987:	e8 58 ba fe ff       	call   f01073e4 <kmalloc>
f011b98c:	83 c4 10             	add    $0x10,%esp
f011b98f:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if (ptr_allocations[12] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011b995:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011b99b:	85 c0                	test   %eax,%eax
f011b99d:	74 17                	je     f011b9b6 <test_kmalloc_bestfit2+0x12c4>
f011b99f:	83 ec 04             	sub    $0x4,%esp
f011b9a2:	68 20 aa 13 f0       	push   $0xf013aa20
f011b9a7:	68 ce 02 00 00       	push   $0x2ce
f011b9ac:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011b9b1:	e8 f0 47 fe ff       	call   f01001a6 <_panic>

		cprintf("Congratulations!! test BEST FIT allocation (2) completed successfully.\n");
f011b9b6:	83 ec 0c             	sub    $0xc,%esp
f011b9b9:	68 84 aa 13 f0       	push   $0xf013aa84
f011b9be:	e8 6a 52 fe ff       	call   f0100c2d <cprintf>
f011b9c3:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011b9c6:	b8 01 00 00 00       	mov    $0x1,%eax

}
f011b9cb:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011b9ce:	5b                   	pop    %ebx
f011b9cf:	5f                   	pop    %edi
f011b9d0:	5d                   	pop    %ebp
f011b9d1:	c3                   	ret    

f011b9d2 <test_kmalloc_firstfit1>:

int test_kmalloc_firstfit1()
{
f011b9d2:	55                   	push   %ebp
f011b9d3:	89 e5                	mov    %esp,%ebp
f011b9d5:	57                   	push   %edi
f011b9d6:	53                   	push   %ebx
f011b9d7:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	cprintf("==============================================\n");
f011b9dd:	83 ec 0c             	sub    $0xc,%esp
f011b9e0:	68 18 a4 13 f0       	push   $0xf013a418
f011b9e5:	e8 43 52 fe ff       	call   f0100c2d <cprintf>
f011b9ea:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011b9ed:	83 ec 0c             	sub    $0xc,%esp
f011b9f0:	68 48 a4 13 f0       	push   $0xf013a448
f011b9f5:	e8 33 52 fe ff       	call   f0100c2d <cprintf>
f011b9fa:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011b9fd:	83 ec 0c             	sub    $0xc,%esp
f011ba00:	68 18 a4 13 f0       	push   $0xf013a418
f011ba05:	e8 23 52 fe ff       	call   f0100c2d <cprintf>
f011ba0a:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011ba0d:	8d 95 50 fe ff ff    	lea    -0x1b0(%ebp),%edx
f011ba13:	b9 14 00 00 00       	mov    $0x14,%ecx
f011ba18:	b8 00 00 00 00       	mov    $0x0,%eax
f011ba1d:	89 d7                	mov    %edx,%edi
f011ba1f:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeDiskFrames;

	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011ba21:	e8 aa 06 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ba26:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ba29:	e8 66 82 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ba2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[0] = kmalloc(1*Mega-kilo);
f011ba31:	83 ec 0c             	sub    $0xc,%esp
f011ba34:	68 00 fc 0f 00       	push   $0xffc00
f011ba39:	e8 a6 b9 fe ff       	call   f01073e4 <kmalloc>
f011ba3e:	83 c4 10             	add    $0x10,%esp
f011ba41:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011ba47:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ba4d:	89 c1                	mov    %eax,%ecx
f011ba4f:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011ba56:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011ba59:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ba5e:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011ba61:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ba64:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba69:	f7 75 ec             	divl   -0x14(%ebp)
f011ba6c:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ba6f:	29 d0                	sub    %edx,%eax
f011ba71:	89 c3                	mov    %eax,%ebx
f011ba73:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ba7a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ba7f:	0f b6 d0             	movzbl %al,%edx
f011ba82:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ba85:	01 d0                	add    %edx,%eax
f011ba87:	48                   	dec    %eax
f011ba88:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ba8b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ba8e:	ba 00 00 00 00       	mov    $0x0,%edx
f011ba93:	f7 75 e4             	divl   -0x1c(%ebp)
f011ba96:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ba99:	29 d0                	sub    %edx,%eax
f011ba9b:	01 c3                	add    %eax,%ebx
f011ba9d:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011baa4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011baa9:	0f b6 c0             	movzbl %al,%eax
f011baac:	c1 e0 04             	shl    $0x4,%eax
f011baaf:	89 c2                	mov    %eax,%edx
f011bab1:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011bab4:	01 d0                	add    %edx,%eax
f011bab6:	48                   	dec    %eax
f011bab7:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011baba:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011babd:	ba 00 00 00 00       	mov    $0x0,%edx
f011bac2:	f7 75 dc             	divl   -0x24(%ebp)
f011bac5:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011bac8:	29 d0                	sub    %edx,%eax
f011baca:	01 d8                	add    %ebx,%eax
f011bacc:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011bad1:	39 c1                	cmp    %eax,%ecx
f011bad3:	74 17                	je     f011baec <test_kmalloc_firstfit1+0x11a>
f011bad5:	83 ec 04             	sub    $0x4,%esp
f011bad8:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011badd:	68 e6 02 00 00       	push   $0x2e6
f011bae2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011bae7:	e8 ba 46 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011baec:	e8 a3 81 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011baf1:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011baf4:	74 17                	je     f011bb0d <test_kmalloc_firstfit1+0x13b>
f011baf6:	83 ec 04             	sub    $0x4,%esp
f011baf9:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011bafe:	68 e7 02 00 00       	push   $0x2e7
f011bb03:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011bb08:	e8 99 46 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011bb0d:	e8 be 05 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011bb12:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bb15:	29 c2                	sub    %eax,%edx
f011bb17:	89 d0                	mov    %edx,%eax
f011bb19:	3d 00 01 00 00       	cmp    $0x100,%eax
f011bb1e:	74 17                	je     f011bb37 <test_kmalloc_firstfit1+0x165>
f011bb20:	83 ec 04             	sub    $0x4,%esp
f011bb23:	68 20 a9 13 f0       	push   $0xf013a920
f011bb28:	68 e8 02 00 00       	push   $0x2e8
f011bb2d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011bb32:	e8 6f 46 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011bb37:	e8 94 05 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011bb3c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bb3f:	e8 50 81 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011bb44:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[1] = kmalloc(1*Mega-kilo);
f011bb47:	83 ec 0c             	sub    $0xc,%esp
f011bb4a:	68 00 fc 0f 00       	push   $0xffc00
f011bb4f:	e8 90 b8 fe ff       	call   f01073e4 <kmalloc>
f011bb54:	83 c4 10             	add    $0x10,%esp
f011bb57:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011bb5d:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011bb63:	89 c1                	mov    %eax,%ecx
f011bb65:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011bb6c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011bb6f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bb74:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011bb77:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bb7a:	ba 00 00 00 00       	mov    $0x0,%edx
f011bb7f:	f7 75 d4             	divl   -0x2c(%ebp)
f011bb82:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011bb85:	29 d0                	sub    %edx,%eax
f011bb87:	89 c3                	mov    %eax,%ebx
f011bb89:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011bb90:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bb95:	0f b6 d0             	movzbl %al,%edx
f011bb98:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011bb9b:	01 d0                	add    %edx,%eax
f011bb9d:	48                   	dec    %eax
f011bb9e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011bba1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bba4:	ba 00 00 00 00       	mov    $0x0,%edx
f011bba9:	f7 75 cc             	divl   -0x34(%ebp)
f011bbac:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011bbaf:	29 d0                	sub    %edx,%eax
f011bbb1:	01 c3                	add    %eax,%ebx
f011bbb3:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011bbba:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bbbf:	0f b6 c0             	movzbl %al,%eax
f011bbc2:	c1 e0 04             	shl    $0x4,%eax
f011bbc5:	89 c2                	mov    %eax,%edx
f011bbc7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011bbca:	01 d0                	add    %edx,%eax
f011bbcc:	48                   	dec    %eax
f011bbcd:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011bbd0:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bbd3:	ba 00 00 00 00       	mov    $0x0,%edx
f011bbd8:	f7 75 c4             	divl   -0x3c(%ebp)
f011bbdb:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011bbde:	29 d0                	sub    %edx,%eax
f011bbe0:	01 d8                	add    %ebx,%eax
f011bbe2:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011bbe7:	39 c1                	cmp    %eax,%ecx
f011bbe9:	74 17                	je     f011bc02 <test_kmalloc_firstfit1+0x230>
f011bbeb:	83 ec 04             	sub    $0x4,%esp
f011bbee:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011bbf3:	68 ee 02 00 00       	push   $0x2ee
f011bbf8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011bbfd:	e8 a4 45 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bc02:	e8 8d 80 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011bc07:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bc0a:	74 17                	je     f011bc23 <test_kmalloc_firstfit1+0x251>
f011bc0c:	83 ec 04             	sub    $0x4,%esp
f011bc0f:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011bc14:	68 ef 02 00 00       	push   $0x2ef
f011bc19:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011bc1e:	e8 83 45 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011bc23:	e8 a8 04 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011bc28:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bc2b:	29 c2                	sub    %eax,%edx
f011bc2d:	89 d0                	mov    %edx,%eax
f011bc2f:	3d 00 01 00 00       	cmp    $0x100,%eax
f011bc34:	74 17                	je     f011bc4d <test_kmalloc_firstfit1+0x27b>
f011bc36:	83 ec 04             	sub    $0x4,%esp
f011bc39:	68 20 a9 13 f0       	push   $0xf013a920
f011bc3e:	68 f0 02 00 00       	push   $0x2f0
f011bc43:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011bc48:	e8 59 45 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011bc4d:	e8 7e 04 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011bc52:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bc55:	e8 3a 80 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011bc5a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[2] = kmalloc(1*Mega-kilo);
f011bc5d:	83 ec 0c             	sub    $0xc,%esp
f011bc60:	68 00 fc 0f 00       	push   $0xffc00
f011bc65:	e8 7a b7 fe ff       	call   f01073e4 <kmalloc>
f011bc6a:	83 c4 10             	add    $0x10,%esp
f011bc6d:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011bc73:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011bc79:	89 c1                	mov    %eax,%ecx
f011bc7b:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011bc82:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011bc85:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bc8a:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011bc8d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bc90:	ba 00 00 00 00       	mov    $0x0,%edx
f011bc95:	f7 75 bc             	divl   -0x44(%ebp)
f011bc98:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011bc9b:	29 d0                	sub    %edx,%eax
f011bc9d:	89 c3                	mov    %eax,%ebx
f011bc9f:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011bca6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bcab:	0f b6 d0             	movzbl %al,%edx
f011bcae:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011bcb1:	01 d0                	add    %edx,%eax
f011bcb3:	48                   	dec    %eax
f011bcb4:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011bcb7:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bcba:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcbf:	f7 75 b4             	divl   -0x4c(%ebp)
f011bcc2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011bcc5:	29 d0                	sub    %edx,%eax
f011bcc7:	01 c3                	add    %eax,%ebx
f011bcc9:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011bcd0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bcd5:	0f b6 c0             	movzbl %al,%eax
f011bcd8:	c1 e0 04             	shl    $0x4,%eax
f011bcdb:	89 c2                	mov    %eax,%edx
f011bcdd:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011bce0:	01 d0                	add    %edx,%eax
f011bce2:	48                   	dec    %eax
f011bce3:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011bce6:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bce9:	ba 00 00 00 00       	mov    $0x0,%edx
f011bcee:	f7 75 ac             	divl   -0x54(%ebp)
f011bcf1:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011bcf4:	29 d0                	sub    %edx,%eax
f011bcf6:	01 d8                	add    %ebx,%eax
f011bcf8:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011bcfd:	39 c1                	cmp    %eax,%ecx
f011bcff:	74 17                	je     f011bd18 <test_kmalloc_firstfit1+0x346>
f011bd01:	83 ec 04             	sub    $0x4,%esp
f011bd04:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011bd09:	68 f6 02 00 00       	push   $0x2f6
f011bd0e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011bd13:	e8 8e 44 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bd18:	e8 77 7f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011bd1d:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bd20:	74 17                	je     f011bd39 <test_kmalloc_firstfit1+0x367>
f011bd22:	83 ec 04             	sub    $0x4,%esp
f011bd25:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011bd2a:	68 f7 02 00 00       	push   $0x2f7
f011bd2f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011bd34:	e8 6d 44 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011bd39:	e8 92 03 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011bd3e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bd41:	29 c2                	sub    %eax,%edx
f011bd43:	89 d0                	mov    %edx,%eax
f011bd45:	3d 00 01 00 00       	cmp    $0x100,%eax
f011bd4a:	74 17                	je     f011bd63 <test_kmalloc_firstfit1+0x391>
f011bd4c:	83 ec 04             	sub    $0x4,%esp
f011bd4f:	68 20 a9 13 f0       	push   $0xf013a920
f011bd54:	68 f8 02 00 00       	push   $0x2f8
f011bd59:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011bd5e:	e8 43 44 fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames() ;
f011bd63:	e8 68 03 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011bd68:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bd6b:	e8 24 7f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011bd70:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[3] = kmalloc(1*Mega-kilo);
f011bd73:	83 ec 0c             	sub    $0xc,%esp
f011bd76:	68 00 fc 0f 00       	push   $0xffc00
f011bd7b:	e8 64 b6 fe ff       	call   f01073e4 <kmalloc>
f011bd80:	83 c4 10             	add    $0x10,%esp
f011bd83:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... ");
f011bd89:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011bd8f:	89 c1                	mov    %eax,%ecx
f011bd91:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011bd98:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011bd9b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bda0:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011bda3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bda6:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdab:	f7 75 a4             	divl   -0x5c(%ebp)
f011bdae:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011bdb1:	29 d0                	sub    %edx,%eax
f011bdb3:	89 c3                	mov    %eax,%ebx
f011bdb5:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011bdbc:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bdc1:	0f b6 d0             	movzbl %al,%edx
f011bdc4:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011bdc7:	01 d0                	add    %edx,%eax
f011bdc9:	48                   	dec    %eax
f011bdca:	89 45 98             	mov    %eax,-0x68(%ebp)
f011bdcd:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bdd0:	ba 00 00 00 00       	mov    $0x0,%edx
f011bdd5:	f7 75 9c             	divl   -0x64(%ebp)
f011bdd8:	8b 45 98             	mov    -0x68(%ebp),%eax
f011bddb:	29 d0                	sub    %edx,%eax
f011bddd:	01 c3                	add    %eax,%ebx
f011bddf:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011bde6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bdeb:	0f b6 c0             	movzbl %al,%eax
f011bdee:	c1 e0 04             	shl    $0x4,%eax
f011bdf1:	89 c2                	mov    %eax,%edx
f011bdf3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011bdf6:	01 d0                	add    %edx,%eax
f011bdf8:	48                   	dec    %eax
f011bdf9:	89 45 90             	mov    %eax,-0x70(%ebp)
f011bdfc:	8b 45 90             	mov    -0x70(%ebp),%eax
f011bdff:	ba 00 00 00 00       	mov    $0x0,%edx
f011be04:	f7 75 94             	divl   -0x6c(%ebp)
f011be07:	8b 45 90             	mov    -0x70(%ebp),%eax
f011be0a:	29 d0                	sub    %edx,%eax
f011be0c:	01 d8                	add    %ebx,%eax
f011be0e:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f011be13:	39 c1                	cmp    %eax,%ecx
f011be15:	74 17                	je     f011be2e <test_kmalloc_firstfit1+0x45c>
f011be17:	83 ec 04             	sub    $0x4,%esp
f011be1a:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011be1f:	68 fe 02 00 00       	push   $0x2fe
f011be24:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011be29:	e8 78 43 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011be2e:	e8 61 7e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011be33:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011be36:	74 17                	je     f011be4f <test_kmalloc_firstfit1+0x47d>
f011be38:	83 ec 04             	sub    $0x4,%esp
f011be3b:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011be40:	68 ff 02 00 00       	push   $0x2ff
f011be45:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011be4a:	e8 57 43 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011be4f:	e8 7c 02 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011be54:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011be57:	29 c2                	sub    %eax,%edx
f011be59:	89 d0                	mov    %edx,%eax
f011be5b:	3d 00 01 00 00       	cmp    $0x100,%eax
f011be60:	74 17                	je     f011be79 <test_kmalloc_firstfit1+0x4a7>
f011be62:	83 ec 04             	sub    $0x4,%esp
f011be65:	68 20 a9 13 f0       	push   $0xf013a920
f011be6a:	68 00 03 00 00       	push   $0x300
f011be6f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011be74:	e8 2d 43 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011be79:	e8 52 02 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011be7e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011be81:	e8 0e 7e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011be86:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[4] = kmalloc(2*Mega-kilo);
f011be89:	83 ec 0c             	sub    $0xc,%esp
f011be8c:	68 00 fc 1f 00       	push   $0x1ffc00
f011be91:	e8 4e b5 fe ff       	call   f01073e4 <kmalloc>
f011be96:	83 c4 10             	add    $0x10,%esp
f011be99:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011be9f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011bea5:	89 c1                	mov    %eax,%ecx
f011bea7:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011beae:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011beb1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011beb6:	89 45 88             	mov    %eax,-0x78(%ebp)
f011beb9:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bebc:	ba 00 00 00 00       	mov    $0x0,%edx
f011bec1:	f7 75 8c             	divl   -0x74(%ebp)
f011bec4:	8b 45 88             	mov    -0x78(%ebp),%eax
f011bec7:	29 d0                	sub    %edx,%eax
f011bec9:	89 c3                	mov    %eax,%ebx
f011becb:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011bed2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bed7:	0f b6 d0             	movzbl %al,%edx
f011beda:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011bedd:	01 d0                	add    %edx,%eax
f011bedf:	48                   	dec    %eax
f011bee0:	89 45 80             	mov    %eax,-0x80(%ebp)
f011bee3:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bee6:	ba 00 00 00 00       	mov    $0x0,%edx
f011beeb:	f7 75 84             	divl   -0x7c(%ebp)
f011beee:	8b 45 80             	mov    -0x80(%ebp),%eax
f011bef1:	29 d0                	sub    %edx,%eax
f011bef3:	01 c3                	add    %eax,%ebx
f011bef5:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011befc:	10 00 00 
f011beff:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011bf04:	0f b6 c0             	movzbl %al,%eax
f011bf07:	c1 e0 04             	shl    $0x4,%eax
f011bf0a:	89 c2                	mov    %eax,%edx
f011bf0c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011bf12:	01 d0                	add    %edx,%eax
f011bf14:	48                   	dec    %eax
f011bf15:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011bf1b:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bf21:	ba 00 00 00 00       	mov    $0x0,%edx
f011bf26:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011bf2c:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011bf32:	29 d0                	sub    %edx,%eax
f011bf34:	01 d8                	add    %ebx,%eax
f011bf36:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011bf3b:	39 c1                	cmp    %eax,%ecx
f011bf3d:	74 17                	je     f011bf56 <test_kmalloc_firstfit1+0x584>
f011bf3f:	83 ec 04             	sub    $0x4,%esp
f011bf42:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011bf47:	68 06 03 00 00       	push   $0x306
f011bf4c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011bf51:	e8 50 42 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011bf56:	e8 39 7d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011bf5b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011bf5e:	74 17                	je     f011bf77 <test_kmalloc_firstfit1+0x5a5>
f011bf60:	83 ec 04             	sub    $0x4,%esp
f011bf63:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011bf68:	68 07 03 00 00       	push   $0x307
f011bf6d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011bf72:	e8 2f 42 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011bf77:	e8 54 01 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011bf7c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011bf7f:	29 c2                	sub    %eax,%edx
f011bf81:	89 d0                	mov    %edx,%eax
f011bf83:	3d 00 02 00 00       	cmp    $0x200,%eax
f011bf88:	74 17                	je     f011bfa1 <test_kmalloc_firstfit1+0x5cf>
f011bf8a:	83 ec 04             	sub    $0x4,%esp
f011bf8d:	68 20 a9 13 f0       	push   $0xf013a920
f011bf92:	68 08 03 00 00       	push   $0x308
f011bf97:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011bf9c:	e8 05 42 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011bfa1:	e8 2a 01 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011bfa6:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011bfa9:	e8 e6 7c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011bfae:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[5] = kmalloc(2*Mega-kilo);
f011bfb1:	83 ec 0c             	sub    $0xc,%esp
f011bfb4:	68 00 fc 1f 00       	push   $0x1ffc00
f011bfb9:	e8 26 b4 fe ff       	call   f01073e4 <kmalloc>
f011bfbe:	83 c4 10             	add    $0x10,%esp
f011bfc1:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 6*Mega)) panic("Wrong start address for the allocated space... ");
f011bfc7:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011bfcd:	89 c1                	mov    %eax,%ecx
f011bfcf:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011bfd6:	10 00 00 
f011bfd9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011bfdf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011bfe4:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011bfea:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011bff0:	ba 00 00 00 00       	mov    $0x0,%edx
f011bff5:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011bffb:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011c001:	29 d0                	sub    %edx,%eax
f011c003:	89 c3                	mov    %eax,%ebx
f011c005:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011c00c:	10 00 00 
f011c00f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c014:	0f b6 d0             	movzbl %al,%edx
f011c017:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011c01d:	01 d0                	add    %edx,%eax
f011c01f:	48                   	dec    %eax
f011c020:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011c026:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c02c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c031:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011c037:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011c03d:	29 d0                	sub    %edx,%eax
f011c03f:	01 c3                	add    %eax,%ebx
f011c041:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011c048:	10 00 00 
f011c04b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c050:	0f b6 c0             	movzbl %al,%eax
f011c053:	c1 e0 04             	shl    $0x4,%eax
f011c056:	89 c2                	mov    %eax,%edx
f011c058:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011c05e:	01 d0                	add    %edx,%eax
f011c060:	48                   	dec    %eax
f011c061:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011c067:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c06d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c072:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011c078:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011c07e:	29 d0                	sub    %edx,%eax
f011c080:	01 d8                	add    %ebx,%eax
f011c082:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f011c087:	39 c1                	cmp    %eax,%ecx
f011c089:	74 17                	je     f011c0a2 <test_kmalloc_firstfit1+0x6d0>
f011c08b:	83 ec 04             	sub    $0x4,%esp
f011c08e:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011c093:	68 0e 03 00 00       	push   $0x30e
f011c098:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c09d:	e8 04 41 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c0a2:	e8 ed 7b fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c0a7:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c0aa:	74 17                	je     f011c0c3 <test_kmalloc_firstfit1+0x6f1>
f011c0ac:	83 ec 04             	sub    $0x4,%esp
f011c0af:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011c0b4:	68 0f 03 00 00       	push   $0x30f
f011c0b9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c0be:	e8 e3 40 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c0c3:	e8 08 00 ff ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c0c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c0cb:	29 c2                	sub    %eax,%edx
f011c0cd:	89 d0                	mov    %edx,%eax
f011c0cf:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c0d4:	74 17                	je     f011c0ed <test_kmalloc_firstfit1+0x71b>
f011c0d6:	83 ec 04             	sub    $0x4,%esp
f011c0d9:	68 20 a9 13 f0       	push   $0xf013a920
f011c0de:	68 10 03 00 00       	push   $0x310
f011c0e3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c0e8:	e8 b9 40 fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c0ed:	e8 de ff fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c0f2:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c0f5:	e8 9a 7b fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c0fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[6] = kmalloc(3*Mega-kilo);
f011c0fd:	83 ec 0c             	sub    $0xc,%esp
f011c100:	68 00 fc 2f 00       	push   $0x2ffc00
f011c105:	e8 da b2 fe ff       	call   f01073e4 <kmalloc>
f011c10a:	83 c4 10             	add    $0x10,%esp
f011c10d:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[6] !=  (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c113:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c119:	89 c1                	mov    %eax,%ecx
f011c11b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011c122:	10 00 00 
f011c125:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011c12b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c130:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011c136:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c13c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c141:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011c147:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011c14d:	29 d0                	sub    %edx,%eax
f011c14f:	89 c3                	mov    %eax,%ebx
f011c151:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011c158:	10 00 00 
f011c15b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c160:	0f b6 d0             	movzbl %al,%edx
f011c163:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011c169:	01 d0                	add    %edx,%eax
f011c16b:	48                   	dec    %eax
f011c16c:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011c172:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c178:	ba 00 00 00 00       	mov    $0x0,%edx
f011c17d:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011c183:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011c189:	29 d0                	sub    %edx,%eax
f011c18b:	01 c3                	add    %eax,%ebx
f011c18d:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011c194:	10 00 00 
f011c197:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c19c:	0f b6 c0             	movzbl %al,%eax
f011c19f:	c1 e0 04             	shl    $0x4,%eax
f011c1a2:	89 c2                	mov    %eax,%edx
f011c1a4:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011c1aa:	01 d0                	add    %edx,%eax
f011c1ac:	48                   	dec    %eax
f011c1ad:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011c1b3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c1b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011c1be:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011c1c4:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011c1ca:	29 d0                	sub    %edx,%eax
f011c1cc:	01 d8                	add    %ebx,%eax
f011c1ce:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011c1d3:	39 c1                	cmp    %eax,%ecx
f011c1d5:	74 17                	je     f011c1ee <test_kmalloc_firstfit1+0x81c>
f011c1d7:	83 ec 04             	sub    $0x4,%esp
f011c1da:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011c1df:	68 16 03 00 00       	push   $0x316
f011c1e4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c1e9:	e8 b8 3f fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c1ee:	e8 a1 7a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c1f3:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c1f6:	74 17                	je     f011c20f <test_kmalloc_firstfit1+0x83d>
f011c1f8:	83 ec 04             	sub    $0x4,%esp
f011c1fb:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011c200:	68 17 03 00 00       	push   $0x317
f011c205:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c20a:	e8 97 3f fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c20f:	e8 bc fe fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c214:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c217:	29 c2                	sub    %eax,%edx
f011c219:	89 d0                	mov    %edx,%eax
f011c21b:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c220:	74 17                	je     f011c239 <test_kmalloc_firstfit1+0x867>
f011c222:	83 ec 04             	sub    $0x4,%esp
f011c225:	68 20 a9 13 f0       	push   $0xf013a920
f011c22a:	68 18 03 00 00       	push   $0x318
f011c22f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c234:	e8 6d 3f fe ff       	call   f01001a6 <_panic>

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames() ;
f011c239:	e8 92 fe fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c23e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c241:	e8 4e 7a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c246:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[7] = kmalloc(3*Mega-kilo);
f011c249:	83 ec 0c             	sub    $0xc,%esp
f011c24c:	68 00 fc 2f 00       	push   $0x2ffc00
f011c251:	e8 8e b1 fe ff       	call   f01073e4 <kmalloc>
f011c256:	83 c4 10             	add    $0x10,%esp
f011c259:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 11*Mega)) panic("Wrong start address for the allocated space... ");
f011c25f:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011c265:	89 c1                	mov    %eax,%ecx
f011c267:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011c26e:	10 00 00 
f011c271:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011c277:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c27c:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011c282:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c288:	ba 00 00 00 00       	mov    $0x0,%edx
f011c28d:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011c293:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011c299:	29 d0                	sub    %edx,%eax
f011c29b:	89 c3                	mov    %eax,%ebx
f011c29d:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011c2a4:	10 00 00 
f011c2a7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c2ac:	0f b6 d0             	movzbl %al,%edx
f011c2af:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011c2b5:	01 d0                	add    %edx,%eax
f011c2b7:	48                   	dec    %eax
f011c2b8:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011c2be:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c2c4:	ba 00 00 00 00       	mov    $0x0,%edx
f011c2c9:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011c2cf:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011c2d5:	29 d0                	sub    %edx,%eax
f011c2d7:	01 c3                	add    %eax,%ebx
f011c2d9:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011c2e0:	10 00 00 
f011c2e3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c2e8:	0f b6 c0             	movzbl %al,%eax
f011c2eb:	c1 e0 04             	shl    $0x4,%eax
f011c2ee:	89 c2                	mov    %eax,%edx
f011c2f0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011c2f6:	01 d0                	add    %edx,%eax
f011c2f8:	48                   	dec    %eax
f011c2f9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011c2ff:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c305:	ba 00 00 00 00       	mov    $0x0,%edx
f011c30a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011c310:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011c316:	29 d0                	sub    %edx,%eax
f011c318:	01 d8                	add    %ebx,%eax
f011c31a:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f011c31f:	39 c1                	cmp    %eax,%ecx
f011c321:	74 17                	je     f011c33a <test_kmalloc_firstfit1+0x968>
f011c323:	83 ec 04             	sub    $0x4,%esp
f011c326:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011c32b:	68 1e 03 00 00       	push   $0x31e
f011c330:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c335:	e8 6c 3e fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c33a:	e8 55 79 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c33f:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c342:	74 17                	je     f011c35b <test_kmalloc_firstfit1+0x989>
f011c344:	83 ec 04             	sub    $0x4,%esp
f011c347:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011c34c:	68 1f 03 00 00       	push   $0x31f
f011c351:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c356:	e8 4b 3e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: ");
f011c35b:	e8 70 fd fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c360:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c363:	29 c2                	sub    %eax,%edx
f011c365:	89 d0                	mov    %edx,%eax
f011c367:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c36c:	74 17                	je     f011c385 <test_kmalloc_firstfit1+0x9b3>
f011c36e:	83 ec 04             	sub    $0x4,%esp
f011c371:	68 20 a9 13 f0       	push   $0xf013a920
f011c376:	68 20 03 00 00       	push   $0x320
f011c37b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c380:	e8 21 3e fe ff       	call   f01001a6 <_panic>
	}

	//[2] Free some to create holes
	{
		//1 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c385:	e8 46 fd fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c38a:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c38d:	e8 02 79 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c392:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[1]);
f011c395:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011c39b:	83 ec 0c             	sub    $0xc,%esp
f011c39e:	50                   	push   %eax
f011c39f:	e8 5a b0 fe ff       	call   f01073fe <kfree>
f011c3a4:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c3a7:	e8 e8 78 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c3ac:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c3af:	74 17                	je     f011c3c8 <test_kmalloc_firstfit1+0x9f6>
f011c3b1:	83 ec 04             	sub    $0x4,%esp
f011c3b4:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011c3b9:	68 29 03 00 00       	push   $0x329
f011c3be:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c3c3:	e8 de 3d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011c3c8:	e8 03 fd fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c3cd:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c3d0:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c3d5:	74 17                	je     f011c3ee <test_kmalloc_firstfit1+0xa1c>
f011c3d7:	83 ec 04             	sub    $0x4,%esp
f011c3da:	68 33 a9 13 f0       	push   $0xf013a933
f011c3df:	68 2a 03 00 00       	push   $0x32a
f011c3e4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c3e9:	e8 b8 3d fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c3ee:	e8 dd fc fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c3f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c3f6:	e8 99 78 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c3fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[4]);
f011c3fe:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011c404:	83 ec 0c             	sub    $0xc,%esp
f011c407:	50                   	push   %eax
f011c408:	e8 f1 af fe ff       	call   f01073fe <kfree>
f011c40d:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c410:	e8 7f 78 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c415:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c418:	74 17                	je     f011c431 <test_kmalloc_firstfit1+0xa5f>
f011c41a:	83 ec 04             	sub    $0x4,%esp
f011c41d:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011c422:	68 30 03 00 00       	push   $0x330
f011c427:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c42c:	e8 75 3d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011c431:	e8 9a fc fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c436:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c439:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c43e:	74 17                	je     f011c457 <test_kmalloc_firstfit1+0xa85>
f011c440:	83 ec 04             	sub    $0x4,%esp
f011c443:	68 33 a9 13 f0       	push   $0xf013a933
f011c448:	68 31 03 00 00       	push   $0x331
f011c44d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c452:	e8 4f 3d fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011c457:	e8 74 fc fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c45c:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c45f:	e8 30 78 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c464:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[6]);
f011c467:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011c46d:	83 ec 0c             	sub    $0xc,%esp
f011c470:	50                   	push   %eax
f011c471:	e8 88 af fe ff       	call   f01073fe <kfree>
f011c476:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c479:	e8 16 78 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c47e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c481:	74 17                	je     f011c49a <test_kmalloc_firstfit1+0xac8>
f011c483:	83 ec 04             	sub    $0x4,%esp
f011c486:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011c48b:	68 37 03 00 00       	push   $0x337
f011c490:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c495:	e8 0c 3d fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011c49a:	e8 31 fc fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c49f:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011c4a2:	3d 00 03 00 00       	cmp    $0x300,%eax
f011c4a7:	74 17                	je     f011c4c0 <test_kmalloc_firstfit1+0xaee>
f011c4a9:	83 ec 04             	sub    $0x4,%esp
f011c4ac:	68 33 a9 13 f0       	push   $0xf013a933
f011c4b1:	68 38 03 00 00       	push   $0x338
f011c4b6:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c4bb:	e8 e6 3c fe ff       	call   f01001a6 <_panic>
	}

	//[3] Allocate again [test first fit]
	{
		//Allocate 512 KB - should be placed in 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011c4c0:	e8 0b fc fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c4c5:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c4c8:	e8 c7 77 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c4cd:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[8] = kmalloc(512*kilo - kilo);
f011c4d0:	83 ec 0c             	sub    $0xc,%esp
f011c4d3:	68 00 fc 07 00       	push   $0x7fc00
f011c4d8:	e8 07 af fe ff       	call   f01073e4 <kmalloc>
f011c4dd:	83 c4 10             	add    $0x10,%esp
f011c4e0:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 1*Mega)) panic("Wrong start address for the allocated space... ");
f011c4e6:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011c4ec:	89 c1                	mov    %eax,%ecx
f011c4ee:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011c4f5:	10 00 00 
f011c4f8:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011c4fe:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c503:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011c509:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c50f:	ba 00 00 00 00       	mov    $0x0,%edx
f011c514:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011c51a:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011c520:	29 d0                	sub    %edx,%eax
f011c522:	89 c3                	mov    %eax,%ebx
f011c524:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011c52b:	10 00 00 
f011c52e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c533:	0f b6 d0             	movzbl %al,%edx
f011c536:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011c53c:	01 d0                	add    %edx,%eax
f011c53e:	48                   	dec    %eax
f011c53f:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011c545:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c54b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c550:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011c556:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011c55c:	29 d0                	sub    %edx,%eax
f011c55e:	01 c3                	add    %eax,%ebx
f011c560:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011c567:	10 00 00 
f011c56a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c56f:	0f b6 c0             	movzbl %al,%eax
f011c572:	c1 e0 04             	shl    $0x4,%eax
f011c575:	89 c2                	mov    %eax,%edx
f011c577:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011c57d:	01 d0                	add    %edx,%eax
f011c57f:	48                   	dec    %eax
f011c580:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011c586:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c58c:	ba 00 00 00 00       	mov    $0x0,%edx
f011c591:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011c597:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011c59d:	29 d0                	sub    %edx,%eax
f011c59f:	01 d8                	add    %ebx,%eax
f011c5a1:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f011c5a6:	39 c1                	cmp    %eax,%ecx
f011c5a8:	74 17                	je     f011c5c1 <test_kmalloc_firstfit1+0xbef>
f011c5aa:	83 ec 04             	sub    $0x4,%esp
f011c5ad:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011c5b2:	68 41 03 00 00       	push   $0x341
f011c5b7:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c5bc:	e8 e5 3b fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c5c1:	e8 ce 76 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c5c6:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c5c9:	74 17                	je     f011c5e2 <test_kmalloc_firstfit1+0xc10>
f011c5cb:	83 ec 04             	sub    $0x4,%esp
f011c5ce:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011c5d3:	68 42 03 00 00       	push   $0x342
f011c5d8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c5dd:	e8 c4 3b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 128) panic("Wrong allocation: ");
f011c5e2:	e8 e9 fa fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c5e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c5ea:	29 c2                	sub    %eax,%edx
f011c5ec:	89 d0                	mov    %edx,%eax
f011c5ee:	3d 80 00 00 00       	cmp    $0x80,%eax
f011c5f3:	74 17                	je     f011c60c <test_kmalloc_firstfit1+0xc3a>
f011c5f5:	83 ec 04             	sub    $0x4,%esp
f011c5f8:	68 20 a9 13 f0       	push   $0xf013a920
f011c5fd:	68 43 03 00 00       	push   $0x343
f011c602:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c607:	e8 9a 3b fe ff       	call   f01001a6 <_panic>

		//Allocate 1 MB - should be placed in 2nd hole
		freeFrames = sys_calculate_free_frames() ;
f011c60c:	e8 bf fa fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c611:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c614:	e8 7b 76 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c619:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega - kilo);
f011c61c:	83 ec 0c             	sub    $0xc,%esp
f011c61f:	68 00 fc 0f 00       	push   $0xffc00
f011c624:	e8 bb ad fe ff       	call   f01073e4 <kmalloc>
f011c629:	83 c4 10             	add    $0x10,%esp
f011c62c:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011c632:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011c638:	89 c1                	mov    %eax,%ecx
f011c63a:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011c641:	10 00 00 
f011c644:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011c64a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c64f:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011c655:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c65b:	ba 00 00 00 00       	mov    $0x0,%edx
f011c660:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011c666:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011c66c:	29 d0                	sub    %edx,%eax
f011c66e:	89 c3                	mov    %eax,%ebx
f011c670:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011c677:	10 00 00 
f011c67a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c67f:	0f b6 d0             	movzbl %al,%edx
f011c682:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011c688:	01 d0                	add    %edx,%eax
f011c68a:	48                   	dec    %eax
f011c68b:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011c691:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c697:	ba 00 00 00 00       	mov    $0x0,%edx
f011c69c:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011c6a2:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011c6a8:	29 d0                	sub    %edx,%eax
f011c6aa:	01 c3                	add    %eax,%ebx
f011c6ac:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011c6b3:	10 00 00 
f011c6b6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c6bb:	0f b6 c0             	movzbl %al,%eax
f011c6be:	c1 e0 04             	shl    $0x4,%eax
f011c6c1:	89 c2                	mov    %eax,%edx
f011c6c3:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011c6c9:	01 d0                	add    %edx,%eax
f011c6cb:	48                   	dec    %eax
f011c6cc:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011c6d2:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c6d8:	ba 00 00 00 00       	mov    $0x0,%edx
f011c6dd:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011c6e3:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011c6e9:	29 d0                	sub    %edx,%eax
f011c6eb:	01 d8                	add    %ebx,%eax
f011c6ed:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011c6f2:	39 c1                	cmp    %eax,%ecx
f011c6f4:	74 17                	je     f011c70d <test_kmalloc_firstfit1+0xd3b>
f011c6f6:	83 ec 04             	sub    $0x4,%esp
f011c6f9:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011c6fe:	68 49 03 00 00       	push   $0x349
f011c703:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c708:	e8 99 3a fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c70d:	e8 82 75 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c712:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c715:	74 17                	je     f011c72e <test_kmalloc_firstfit1+0xd5c>
f011c717:	83 ec 04             	sub    $0x4,%esp
f011c71a:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011c71f:	68 4a 03 00 00       	push   $0x34a
f011c724:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c729:	e8 78 3a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011c72e:	e8 9d f9 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c733:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c736:	29 c2                	sub    %eax,%edx
f011c738:	89 d0                	mov    %edx,%eax
f011c73a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011c73f:	74 17                	je     f011c758 <test_kmalloc_firstfit1+0xd86>
f011c741:	83 ec 04             	sub    $0x4,%esp
f011c744:	68 20 a9 13 f0       	push   $0xf013a920
f011c749:	68 4b 03 00 00       	push   $0x34b
f011c74e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c753:	e8 4e 3a fe ff       	call   f01001a6 <_panic>


		//Allocate 256 KB - should be placed in remaining of 1st hole
		freeFrames = sys_calculate_free_frames() ;
f011c758:	e8 73 f9 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c75d:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c760:	e8 2f 75 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c765:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[10] = kmalloc(256*kilo - kilo);
f011c768:	83 ec 0c             	sub    $0xc,%esp
f011c76b:	68 00 fc 03 00       	push   $0x3fc00
f011c770:	e8 6f ac fe ff       	call   f01073e4 <kmalloc>
f011c775:	83 c4 10             	add    $0x10,%esp
f011c778:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 1*Mega + 512*kilo)) panic("Wrong start address for the allocated space... ");
f011c77e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011c784:	89 c1                	mov    %eax,%ecx
f011c786:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011c78d:	10 00 00 
f011c790:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011c796:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c79b:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011c7a1:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c7a7:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7ac:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011c7b2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011c7b8:	29 d0                	sub    %edx,%eax
f011c7ba:	89 c3                	mov    %eax,%ebx
f011c7bc:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011c7c3:	10 00 00 
f011c7c6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c7cb:	0f b6 d0             	movzbl %al,%edx
f011c7ce:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011c7d4:	01 d0                	add    %edx,%eax
f011c7d6:	48                   	dec    %eax
f011c7d7:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011c7dd:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c7e3:	ba 00 00 00 00       	mov    $0x0,%edx
f011c7e8:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011c7ee:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011c7f4:	29 d0                	sub    %edx,%eax
f011c7f6:	01 c3                	add    %eax,%ebx
f011c7f8:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011c7ff:	10 00 00 
f011c802:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c807:	0f b6 c0             	movzbl %al,%eax
f011c80a:	c1 e0 04             	shl    $0x4,%eax
f011c80d:	89 c2                	mov    %eax,%edx
f011c80f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011c815:	01 d0                	add    %edx,%eax
f011c817:	48                   	dec    %eax
f011c818:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011c81e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c824:	ba 00 00 00 00       	mov    $0x0,%edx
f011c829:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011c82f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011c835:	29 d0                	sub    %edx,%eax
f011c837:	01 d8                	add    %ebx,%eax
f011c839:	2d 00 c0 e7 09       	sub    $0x9e7c000,%eax
f011c83e:	39 c1                	cmp    %eax,%ecx
f011c840:	74 17                	je     f011c859 <test_kmalloc_firstfit1+0xe87>
f011c842:	83 ec 04             	sub    $0x4,%esp
f011c845:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011c84a:	68 52 03 00 00       	push   $0x352
f011c84f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c854:	e8 4d 39 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c859:	e8 36 74 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c85e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c861:	74 17                	je     f011c87a <test_kmalloc_firstfit1+0xea8>
f011c863:	83 ec 04             	sub    $0x4,%esp
f011c866:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011c86b:	68 53 03 00 00       	push   $0x353
f011c870:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c875:	e8 2c 39 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 64) panic("Wrong allocation: ");
f011c87a:	e8 51 f8 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c87f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c882:	29 c2                	sub    %eax,%edx
f011c884:	89 d0                	mov    %edx,%eax
f011c886:	83 f8 40             	cmp    $0x40,%eax
f011c889:	74 17                	je     f011c8a2 <test_kmalloc_firstfit1+0xed0>
f011c88b:	83 ec 04             	sub    $0x4,%esp
f011c88e:	68 20 a9 13 f0       	push   $0xf013a920
f011c893:	68 54 03 00 00       	push   $0x354
f011c898:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c89d:	e8 04 39 fe ff       	call   f01001a6 <_panic>

		//Allocate 2 MB - should be placed in 3rd hole
		freeFrames = sys_calculate_free_frames() ;
f011c8a2:	e8 29 f8 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c8a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c8aa:	e8 e5 73 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c8af:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[11] = kmalloc(2*Mega);
f011c8b2:	83 ec 0c             	sub    $0xc,%esp
f011c8b5:	68 00 00 20 00       	push   $0x200000
f011c8ba:	e8 25 ab fe ff       	call   f01073e4 <kmalloc>
f011c8bf:	83 c4 10             	add    $0x10,%esp
f011c8c2:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 8*Mega)) panic("Wrong start address for the allocated space... ");
f011c8c8:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011c8ce:	89 c1                	mov    %eax,%ecx
f011c8d0:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f011c8d7:	10 00 00 
f011c8da:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011c8e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011c8e5:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f011c8eb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c8f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011c8f6:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f011c8fc:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011c902:	29 d0                	sub    %edx,%eax
f011c904:	89 c3                	mov    %eax,%ebx
f011c906:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f011c90d:	10 00 00 
f011c910:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c915:	0f b6 d0             	movzbl %al,%edx
f011c918:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011c91e:	01 d0                	add    %edx,%eax
f011c920:	48                   	dec    %eax
f011c921:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f011c927:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c92d:	ba 00 00 00 00       	mov    $0x0,%edx
f011c932:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f011c938:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011c93e:	29 d0                	sub    %edx,%eax
f011c940:	01 c3                	add    %eax,%ebx
f011c942:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f011c949:	10 00 00 
f011c94c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011c951:	0f b6 c0             	movzbl %al,%eax
f011c954:	c1 e0 04             	shl    $0x4,%eax
f011c957:	89 c2                	mov    %eax,%edx
f011c959:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011c95f:	01 d0                	add    %edx,%eax
f011c961:	48                   	dec    %eax
f011c962:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f011c968:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c96e:	ba 00 00 00 00       	mov    $0x0,%edx
f011c973:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f011c979:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011c97f:	29 d0                	sub    %edx,%eax
f011c981:	01 d8                	add    %ebx,%eax
f011c983:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f011c988:	39 c1                	cmp    %eax,%ecx
f011c98a:	74 17                	je     f011c9a3 <test_kmalloc_firstfit1+0xfd1>
f011c98c:	83 ec 04             	sub    $0x4,%esp
f011c98f:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011c994:	68 5a 03 00 00       	push   $0x35a
f011c999:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c99e:	e8 03 38 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011c9a3:	e8 28 f7 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c9a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011c9ab:	29 c2                	sub    %eax,%edx
f011c9ad:	89 d0                	mov    %edx,%eax
f011c9af:	3d 00 02 00 00       	cmp    $0x200,%eax
f011c9b4:	74 17                	je     f011c9cd <test_kmalloc_firstfit1+0xffb>
f011c9b6:	83 ec 04             	sub    $0x4,%esp
f011c9b9:	68 20 a9 13 f0       	push   $0xf013a920
f011c9be:	68 5b 03 00 00       	push   $0x35b
f011c9c3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c9c8:	e8 d9 37 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011c9cd:	e8 c2 72 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c9d2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011c9d5:	74 17                	je     f011c9ee <test_kmalloc_firstfit1+0x101c>
f011c9d7:	83 ec 04             	sub    $0x4,%esp
f011c9da:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011c9df:	68 5c 03 00 00       	push   $0x35c
f011c9e4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011c9e9:	e8 b8 37 fe ff       	call   f01001a6 <_panic>


		//Allocate 4 MB - should be placed in end of all allocations
		freeFrames = sys_calculate_free_frames() ;
f011c9ee:	e8 dd f6 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011c9f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011c9f6:	e8 99 72 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011c9fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[12] = kmalloc(4*Mega - kilo);
f011c9fe:	83 ec 0c             	sub    $0xc,%esp
f011ca01:	68 00 fc 3f 00       	push   $0x3ffc00
f011ca06:	e8 d9 a9 fe ff       	call   f01073e4 <kmalloc>
f011ca0b:	83 c4 10             	add    $0x10,%esp
f011ca0e:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 14*Mega)) panic("Wrong start address for the allocated space... ");
f011ca14:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011ca1a:	89 c1                	mov    %eax,%ecx
f011ca1c:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f011ca23:	10 00 00 
f011ca26:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011ca2c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ca31:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f011ca37:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ca3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca42:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f011ca48:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011ca4e:	29 d0                	sub    %edx,%eax
f011ca50:	89 c3                	mov    %eax,%ebx
f011ca52:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f011ca59:	10 00 00 
f011ca5c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ca61:	0f b6 d0             	movzbl %al,%edx
f011ca64:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011ca6a:	01 d0                	add    %edx,%eax
f011ca6c:	48                   	dec    %eax
f011ca6d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f011ca73:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ca79:	ba 00 00 00 00       	mov    $0x0,%edx
f011ca7e:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f011ca84:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011ca8a:	29 d0                	sub    %edx,%eax
f011ca8c:	01 c3                	add    %eax,%ebx
f011ca8e:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f011ca95:	10 00 00 
f011ca98:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ca9d:	0f b6 c0             	movzbl %al,%eax
f011caa0:	c1 e0 04             	shl    $0x4,%eax
f011caa3:	89 c2                	mov    %eax,%edx
f011caa5:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011caab:	01 d0                	add    %edx,%eax
f011caad:	48                   	dec    %eax
f011caae:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f011cab4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011caba:	ba 00 00 00 00       	mov    $0x0,%edx
f011cabf:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f011cac5:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011cacb:	29 d0                	sub    %edx,%eax
f011cacd:	01 d8                	add    %ebx,%eax
f011cacf:	2d 00 c0 1f 09       	sub    $0x91fc000,%eax
f011cad4:	39 c1                	cmp    %eax,%ecx
f011cad6:	74 17                	je     f011caef <test_kmalloc_firstfit1+0x111d>
f011cad8:	83 ec 04             	sub    $0x4,%esp
f011cadb:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011cae0:	68 63 03 00 00       	push   $0x363
f011cae5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011caea:	e8 b7 36 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011caef:	e8 a0 71 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011caf4:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011caf7:	74 17                	je     f011cb10 <test_kmalloc_firstfit1+0x113e>
f011caf9:	83 ec 04             	sub    $0x4,%esp
f011cafc:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011cb01:	68 64 03 00 00       	push   $0x364
f011cb06:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011cb0b:	e8 96 36 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1024) panic("Wrong allocation: ");
f011cb10:	e8 bb f5 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011cb15:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cb18:	29 c2                	sub    %eax,%edx
f011cb1a:	89 d0                	mov    %edx,%eax
f011cb1c:	3d 00 04 00 00       	cmp    $0x400,%eax
f011cb21:	74 17                	je     f011cb3a <test_kmalloc_firstfit1+0x1168>
f011cb23:	83 ec 04             	sub    $0x4,%esp
f011cb26:	68 20 a9 13 f0       	push   $0xf013a920
f011cb2b:	68 65 03 00 00       	push   $0x365
f011cb30:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011cb35:	e8 6c 36 fe ff       	call   f01001a6 <_panic>
	}

	//[4] Free contiguous allocations
	{
		//1 MB Hole appended to previous 256 KB hole
		freeFrames = sys_calculate_free_frames() ;
f011cb3a:	e8 91 f5 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011cb3f:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cb42:	e8 4d 71 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011cb47:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[2]);
f011cb4a:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011cb50:	83 ec 0c             	sub    $0xc,%esp
f011cb53:	50                   	push   %eax
f011cb54:	e8 a5 a8 fe ff       	call   f01073fe <kfree>
f011cb59:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cb5c:	e8 33 71 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011cb61:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cb64:	74 17                	je     f011cb7d <test_kmalloc_firstfit1+0x11ab>
f011cb66:	83 ec 04             	sub    $0x4,%esp
f011cb69:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011cb6e:	68 6e 03 00 00       	push   $0x36e
f011cb73:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011cb78:	e8 29 36 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011cb7d:	e8 4e f5 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011cb82:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cb85:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cb8a:	74 17                	je     f011cba3 <test_kmalloc_firstfit1+0x11d1>
f011cb8c:	83 ec 04             	sub    $0x4,%esp
f011cb8f:	68 33 a9 13 f0       	push   $0xf013a933
f011cb94:	68 6f 03 00 00       	push   $0x36f
f011cb99:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011cb9e:	e8 03 36 fe ff       	call   f01001a6 <_panic>

		//Next 1 MB Hole appended also
		freeFrames = sys_calculate_free_frames() ;
f011cba3:	e8 28 f5 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011cba8:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cbab:	e8 e4 70 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011cbb0:	89 45 f0             	mov    %eax,-0x10(%ebp)
		kfree(ptr_allocations[3]);
f011cbb3:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011cbb9:	83 ec 0c             	sub    $0xc,%esp
f011cbbc:	50                   	push   %eax
f011cbbd:	e8 3c a8 fe ff       	call   f01073fe <kfree>
f011cbc2:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cbc5:	e8 ca 70 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011cbca:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cbcd:	74 17                	je     f011cbe6 <test_kmalloc_firstfit1+0x1214>
f011cbcf:	83 ec 04             	sub    $0x4,%esp
f011cbd2:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011cbd7:	68 75 03 00 00       	push   $0x375
f011cbdc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011cbe1:	e8 c0 35 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong free: ");
f011cbe6:	e8 e5 f4 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011cbeb:	2b 45 f4             	sub    -0xc(%ebp),%eax
f011cbee:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cbf3:	74 17                	je     f011cc0c <test_kmalloc_firstfit1+0x123a>
f011cbf5:	83 ec 04             	sub    $0x4,%esp
f011cbf8:	68 33 a9 13 f0       	push   $0xf013a933
f011cbfd:	68 76 03 00 00       	push   $0x376
f011cc02:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011cc07:	e8 9a 35 fe ff       	call   f01001a6 <_panic>

	//[5] Allocate again [test first fit]
	{
		//[FIRST FIT Case]
		//Allocate 1 MB - should be placed in the contiguous hole (256 KB + 2 MB)
		freeFrames = sys_calculate_free_frames() ;
f011cc0c:	e8 bf f4 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011cc11:	89 45 f4             	mov    %eax,-0xc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cc14:	e8 7b 70 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011cc19:	89 45 f0             	mov    %eax,-0x10(%ebp)
		ptr_allocations[13] = kmalloc(1*Mega);
f011cc1c:	83 ec 0c             	sub    $0xc,%esp
f011cc1f:	68 00 00 10 00       	push   $0x100000
f011cc24:	e8 bb a7 fe ff       	call   f01073e4 <kmalloc>
f011cc29:	83 c4 10             	add    $0x10,%esp
f011cc2c:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 1*Mega + 768*kilo)) panic("Wrong start address for the allocated space... ");
f011cc32:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011cc38:	89 c1                	mov    %eax,%ecx
f011cc3a:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f011cc41:	10 00 00 
f011cc44:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011cc4a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cc4f:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f011cc55:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cc5b:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc60:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f011cc66:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011cc6c:	29 d0                	sub    %edx,%eax
f011cc6e:	89 c3                	mov    %eax,%ebx
f011cc70:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f011cc77:	10 00 00 
f011cc7a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011cc7f:	0f b6 d0             	movzbl %al,%edx
f011cc82:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011cc88:	01 d0                	add    %edx,%eax
f011cc8a:	48                   	dec    %eax
f011cc8b:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f011cc91:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cc97:	ba 00 00 00 00       	mov    $0x0,%edx
f011cc9c:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f011cca2:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011cca8:	29 d0                	sub    %edx,%eax
f011ccaa:	01 c3                	add    %eax,%ebx
f011ccac:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f011ccb3:	10 00 00 
f011ccb6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ccbb:	0f b6 c0             	movzbl %al,%eax
f011ccbe:	c1 e0 04             	shl    $0x4,%eax
f011ccc1:	89 c2                	mov    %eax,%edx
f011ccc3:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011ccc9:	01 d0                	add    %edx,%eax
f011cccb:	48                   	dec    %eax
f011cccc:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f011ccd2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011ccd8:	ba 00 00 00 00       	mov    $0x0,%edx
f011ccdd:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f011cce3:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011cce9:	29 d0                	sub    %edx,%eax
f011cceb:	01 d8                	add    %ebx,%eax
f011cced:	2d 00 c0 e3 09       	sub    $0x9e3c000,%eax
f011ccf2:	39 c1                	cmp    %eax,%ecx
f011ccf4:	74 17                	je     f011cd0d <test_kmalloc_firstfit1+0x133b>
f011ccf6:	83 ec 04             	sub    $0x4,%esp
f011ccf9:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011ccfe:	68 80 03 00 00       	push   $0x380
f011cd03:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011cd08:	e8 99 34 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cd0d:	e8 82 6f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011cd12:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f011cd15:	74 17                	je     f011cd2e <test_kmalloc_firstfit1+0x135c>
f011cd17:	83 ec 04             	sub    $0x4,%esp
f011cd1a:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011cd1f:	68 81 03 00 00       	push   $0x381
f011cd24:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011cd29:	e8 78 34 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: ");
f011cd2e:	e8 9d f3 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011cd33:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011cd36:	29 c2                	sub    %eax,%edx
f011cd38:	89 d0                	mov    %edx,%eax
f011cd3a:	3d 00 01 00 00       	cmp    $0x100,%eax
f011cd3f:	74 17                	je     f011cd58 <test_kmalloc_firstfit1+0x1386>
f011cd41:	83 ec 04             	sub    $0x4,%esp
f011cd44:	68 20 a9 13 f0       	push   $0xf013a920
f011cd49:	68 82 03 00 00       	push   $0x382
f011cd4e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011cd53:	e8 4e 34 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("Congratulations!! test FIRST FIT allocation (1) completed successfully.\n");
f011cd58:	83 ec 0c             	sub    $0xc,%esp
f011cd5b:	68 cc aa 13 f0       	push   $0xf013aacc
f011cd60:	e8 c8 3e fe ff       	call   f0100c2d <cprintf>
f011cd65:	83 c4 10             	add    $0x10,%esp

	return 1;
f011cd68:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011cd6d:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011cd70:	5b                   	pop    %ebx
f011cd71:	5f                   	pop    %edi
f011cd72:	5d                   	pop    %ebp
f011cd73:	c3                   	ret    

f011cd74 <test_kmalloc_firstfit2>:

int test_kmalloc_firstfit2()
{
f011cd74:	55                   	push   %ebp
f011cd75:	89 e5                	mov    %esp,%ebp
f011cd77:	57                   	push   %edi
f011cd78:	53                   	push   %ebx
f011cd79:	81 ec 60 01 00 00    	sub    $0x160,%esp
	cprintf("==============================================\n");
f011cd7f:	83 ec 0c             	sub    $0xc,%esp
f011cd82:	68 18 a4 13 f0       	push   $0xf013a418
f011cd87:	e8 a1 3e fe ff       	call   f0100c2d <cprintf>
f011cd8c:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011cd8f:	83 ec 0c             	sub    $0xc,%esp
f011cd92:	68 48 a4 13 f0       	push   $0xf013a448
f011cd97:	e8 91 3e fe ff       	call   f0100c2d <cprintf>
f011cd9c:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011cd9f:	83 ec 0c             	sub    $0xc,%esp
f011cda2:	68 18 a4 13 f0       	push   $0xf013a418
f011cda7:	e8 81 3e fe ff       	call   f0100c2d <cprintf>
f011cdac:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[20] = {0};
f011cdaf:	8d 95 98 fe ff ff    	lea    -0x168(%ebp),%edx
f011cdb5:	b9 14 00 00 00       	mov    $0x14,%ecx
f011cdba:	b8 00 00 00 00       	mov    $0x0,%eax
f011cdbf:	89 d7                	mov    %edx,%edi
f011cdc1:	f3 ab                	rep stos %eax,%es:(%edi)
	uint32 freeFrames;
	uint32 freeDiskFrames;

	//[1] Attempt to allocate more than heap size
	{
		ptr_allocations[0] = kmalloc(KERNEL_HEAP_MAX - ACTUAL_START + 1);
f011cdc3:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
f011cdca:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011cdcd:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cdd2:	89 45 f0             	mov    %eax,-0x10(%ebp)
f011cdd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011cdd8:	ba 00 00 00 00       	mov    $0x0,%edx
f011cddd:	f7 75 f4             	divl   -0xc(%ebp)
f011cde0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011cde3:	29 d0                	sub    %edx,%eax
f011cde5:	89 c1                	mov    %eax,%ecx
f011cde7:	c7 45 ec 00 10 00 00 	movl   $0x1000,-0x14(%ebp)
f011cdee:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011cdf3:	0f b6 d0             	movzbl %al,%edx
f011cdf6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f011cdf9:	01 d0                	add    %edx,%eax
f011cdfb:	48                   	dec    %eax
f011cdfc:	89 45 e8             	mov    %eax,-0x18(%ebp)
f011cdff:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ce02:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce07:	f7 75 ec             	divl   -0x14(%ebp)
f011ce0a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f011ce0d:	29 d0                	sub    %edx,%eax
f011ce0f:	01 c1                	add    %eax,%ecx
f011ce11:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011ce18:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ce1d:	0f b6 c0             	movzbl %al,%eax
f011ce20:	c1 e0 04             	shl    $0x4,%eax
f011ce23:	89 c2                	mov    %eax,%edx
f011ce25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011ce28:	01 d0                	add    %edx,%eax
f011ce2a:	48                   	dec    %eax
f011ce2b:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011ce2e:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ce31:	ba 00 00 00 00       	mov    $0x0,%edx
f011ce36:	f7 75 e4             	divl   -0x1c(%ebp)
f011ce39:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011ce3c:	29 d0                	sub    %edx,%eax
f011ce3e:	01 c8                	add    %ecx,%eax
f011ce40:	ba 01 b0 ff 09       	mov    $0x9ffb001,%edx
f011ce45:	29 c2                	sub    %eax,%edx
f011ce47:	89 d0                	mov    %edx,%eax
f011ce49:	83 ec 0c             	sub    $0xc,%esp
f011ce4c:	50                   	push   %eax
f011ce4d:	e8 92 a5 fe ff       	call   f01073e4 <kmalloc>
f011ce52:	83 c4 10             	add    $0x10,%esp
f011ce55:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if (ptr_allocations[0] != NULL) panic("kmalloc: Attempt to allocate more than heap size, should return NULL");
f011ce5b:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011ce61:	85 c0                	test   %eax,%eax
f011ce63:	74 17                	je     f011ce7c <test_kmalloc_firstfit2+0x108>
f011ce65:	83 ec 04             	sub    $0x4,%esp
f011ce68:	68 18 ab 13 f0       	push   $0xf013ab18
f011ce6d:	68 97 03 00 00       	push   $0x397
f011ce72:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ce77:	e8 2a 33 fe ff       	call   f01001a6 <_panic>

	//[2] Attempt to allocate space more than any available fragment
	//	a) Create Fragments
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011ce7c:	e8 4f f2 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ce81:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ce84:	e8 0b 6e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ce89:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011ce8c:	83 ec 0c             	sub    $0xc,%esp
f011ce8f:	68 00 fc 1f 00       	push   $0x1ffc00
f011ce94:	e8 4b a5 fe ff       	call   f01073e4 <kmalloc>
f011ce99:	83 c4 10             	add    $0x10,%esp
f011ce9c:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
		if ((uint32) ptr_allocations[0] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011cea2:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011cea8:	89 c1                	mov    %eax,%ecx
f011ceaa:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011ceb1:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011ceb4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ceb9:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011cebc:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011cebf:	ba 00 00 00 00       	mov    $0x0,%edx
f011cec4:	f7 75 d4             	divl   -0x2c(%ebp)
f011cec7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011ceca:	29 d0                	sub    %edx,%eax
f011cecc:	89 c3                	mov    %eax,%ebx
f011cece:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011ced5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ceda:	0f b6 d0             	movzbl %al,%edx
f011cedd:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011cee0:	01 d0                	add    %edx,%eax
f011cee2:	48                   	dec    %eax
f011cee3:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011cee6:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cee9:	ba 00 00 00 00       	mov    $0x0,%edx
f011ceee:	f7 75 cc             	divl   -0x34(%ebp)
f011cef1:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011cef4:	29 d0                	sub    %edx,%eax
f011cef6:	01 c3                	add    %eax,%ebx
f011cef8:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011ceff:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011cf04:	0f b6 c0             	movzbl %al,%eax
f011cf07:	c1 e0 04             	shl    $0x4,%eax
f011cf0a:	89 c2                	mov    %eax,%edx
f011cf0c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011cf0f:	01 d0                	add    %edx,%eax
f011cf11:	48                   	dec    %eax
f011cf12:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011cf15:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cf18:	ba 00 00 00 00       	mov    $0x0,%edx
f011cf1d:	f7 75 c4             	divl   -0x3c(%ebp)
f011cf20:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011cf23:	29 d0                	sub    %edx,%eax
f011cf25:	01 d8                	add    %ebx,%eax
f011cf27:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011cf2c:	39 c1                	cmp    %eax,%ecx
f011cf2e:	74 17                	je     f011cf47 <test_kmalloc_firstfit2+0x1d3>
f011cf30:	83 ec 04             	sub    $0x4,%esp
f011cf33:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011cf38:	68 a1 03 00 00       	push   $0x3a1
f011cf3d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011cf42:	e8 5f 32 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011cf47:	e8 48 6d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011cf4c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011cf4f:	74 17                	je     f011cf68 <test_kmalloc_firstfit2+0x1f4>
f011cf51:	83 ec 04             	sub    $0x4,%esp
f011cf54:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011cf59:	68 a2 03 00 00       	push   $0x3a2
f011cf5e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011cf63:	e8 3e 32 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011cf68:	e8 63 f1 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011cf6d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011cf70:	29 c2                	sub    %eax,%edx
f011cf72:	89 d0                	mov    %edx,%eax
f011cf74:	3d 00 02 00 00       	cmp    $0x200,%eax
f011cf79:	74 17                	je     f011cf92 <test_kmalloc_firstfit2+0x21e>
f011cf7b:	83 ec 04             	sub    $0x4,%esp
f011cf7e:	68 20 a9 13 f0       	push   $0xf013a920
f011cf83:	68 a3 03 00 00       	push   $0x3a3
f011cf88:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011cf8d:	e8 14 32 fe ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011cf92:	e8 39 f1 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011cf97:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011cf9a:	e8 f5 6c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011cf9f:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011cfa2:	83 ec 0c             	sub    $0xc,%esp
f011cfa5:	68 00 fc 1f 00       	push   $0x1ffc00
f011cfaa:	e8 35 a4 fe ff       	call   f01073e4 <kmalloc>
f011cfaf:	83 c4 10             	add    $0x10,%esp
f011cfb2:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... ");
f011cfb8:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011cfbe:	89 c1                	mov    %eax,%ecx
f011cfc0:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011cfc7:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011cfca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011cfcf:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011cfd2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cfd5:	ba 00 00 00 00       	mov    $0x0,%edx
f011cfda:	f7 75 bc             	divl   -0x44(%ebp)
f011cfdd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011cfe0:	29 d0                	sub    %edx,%eax
f011cfe2:	89 c3                	mov    %eax,%ebx
f011cfe4:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011cfeb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011cff0:	0f b6 d0             	movzbl %al,%edx
f011cff3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011cff6:	01 d0                	add    %edx,%eax
f011cff8:	48                   	dec    %eax
f011cff9:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011cffc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011cfff:	ba 00 00 00 00       	mov    $0x0,%edx
f011d004:	f7 75 b4             	divl   -0x4c(%ebp)
f011d007:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011d00a:	29 d0                	sub    %edx,%eax
f011d00c:	01 c3                	add    %eax,%ebx
f011d00e:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011d015:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d01a:	0f b6 c0             	movzbl %al,%eax
f011d01d:	c1 e0 04             	shl    $0x4,%eax
f011d020:	89 c2                	mov    %eax,%edx
f011d022:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011d025:	01 d0                	add    %edx,%eax
f011d027:	48                   	dec    %eax
f011d028:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011d02b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d02e:	ba 00 00 00 00       	mov    $0x0,%edx
f011d033:	f7 75 ac             	divl   -0x54(%ebp)
f011d036:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011d039:	29 d0                	sub    %edx,%eax
f011d03b:	01 d8                	add    %ebx,%eax
f011d03d:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011d042:	39 c1                	cmp    %eax,%ecx
f011d044:	74 17                	je     f011d05d <test_kmalloc_firstfit2+0x2e9>
f011d046:	83 ec 04             	sub    $0x4,%esp
f011d049:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011d04e:	68 a9 03 00 00       	push   $0x3a9
f011d053:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d058:	e8 49 31 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d05d:	e8 32 6c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d062:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d065:	74 17                	je     f011d07e <test_kmalloc_firstfit2+0x30a>
f011d067:	83 ec 04             	sub    $0x4,%esp
f011d06a:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011d06f:	68 aa 03 00 00       	push   $0x3aa
f011d074:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d079:	e8 28 31 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: ");
f011d07e:	e8 4d f0 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d083:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d086:	29 c2                	sub    %eax,%edx
f011d088:	89 d0                	mov    %edx,%eax
f011d08a:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d08f:	74 17                	je     f011d0a8 <test_kmalloc_firstfit2+0x334>
f011d091:	83 ec 04             	sub    $0x4,%esp
f011d094:	68 20 a9 13 f0       	push   $0xf013a920
f011d099:	68 ab 03 00 00       	push   $0x3ab
f011d09e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d0a3:	e8 fe 30 fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d0a8:	e8 23 f0 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d0ad:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d0b0:	e8 df 6b fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d0b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011d0b8:	83 ec 0c             	sub    $0xc,%esp
f011d0bb:	68 00 08 00 00       	push   $0x800
f011d0c0:	e8 1f a3 fe ff       	call   f01073e4 <kmalloc>
f011d0c5:	83 c4 10             	add    $0x10,%esp
f011d0c8:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
		if ((uint32) ptr_allocations[2] < (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... ");
f011d0ce:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d0d4:	89 c1                	mov    %eax,%ecx
f011d0d6:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011d0dd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011d0e0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d0e5:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011d0e8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d0eb:	ba 00 00 00 00       	mov    $0x0,%edx
f011d0f0:	f7 75 a4             	divl   -0x5c(%ebp)
f011d0f3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011d0f6:	29 d0                	sub    %edx,%eax
f011d0f8:	89 c3                	mov    %eax,%ebx
f011d0fa:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011d101:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d106:	0f b6 d0             	movzbl %al,%edx
f011d109:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011d10c:	01 d0                	add    %edx,%eax
f011d10e:	48                   	dec    %eax
f011d10f:	89 45 98             	mov    %eax,-0x68(%ebp)
f011d112:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d115:	ba 00 00 00 00       	mov    $0x0,%edx
f011d11a:	f7 75 9c             	divl   -0x64(%ebp)
f011d11d:	8b 45 98             	mov    -0x68(%ebp),%eax
f011d120:	29 d0                	sub    %edx,%eax
f011d122:	01 c3                	add    %eax,%ebx
f011d124:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011d12b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d130:	0f b6 c0             	movzbl %al,%eax
f011d133:	c1 e0 04             	shl    $0x4,%eax
f011d136:	89 c2                	mov    %eax,%edx
f011d138:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011d13b:	01 d0                	add    %edx,%eax
f011d13d:	48                   	dec    %eax
f011d13e:	89 45 90             	mov    %eax,-0x70(%ebp)
f011d141:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d144:	ba 00 00 00 00       	mov    $0x0,%edx
f011d149:	f7 75 94             	divl   -0x6c(%ebp)
f011d14c:	8b 45 90             	mov    -0x70(%ebp),%eax
f011d14f:	29 d0                	sub    %edx,%eax
f011d151:	01 d8                	add    %ebx,%eax
f011d153:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011d158:	39 c1                	cmp    %eax,%ecx
f011d15a:	73 17                	jae    f011d173 <test_kmalloc_firstfit2+0x3ff>
f011d15c:	83 ec 04             	sub    $0x4,%esp
f011d15f:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011d164:	68 b1 03 00 00       	push   $0x3b1
f011d169:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d16e:	e8 33 30 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d173:	e8 1c 6b fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d178:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d17b:	74 17                	je     f011d194 <test_kmalloc_firstfit2+0x420>
f011d17d:	83 ec 04             	sub    $0x4,%esp
f011d180:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011d185:	68 b2 03 00 00       	push   $0x3b2
f011d18a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d18f:	e8 12 30 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d194:	e8 37 ef fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d199:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d19c:	29 c2                	sub    %eax,%edx
f011d19e:	89 d0                	mov    %edx,%eax
f011d1a0:	83 f8 01             	cmp    $0x1,%eax
f011d1a3:	74 17                	je     f011d1bc <test_kmalloc_firstfit2+0x448>
f011d1a5:	83 ec 04             	sub    $0x4,%esp
f011d1a8:	68 20 a9 13 f0       	push   $0xf013a920
f011d1ad:	68 b3 03 00 00       	push   $0x3b3
f011d1b2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d1b7:	e8 ea 2f fe ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011d1bc:	e8 0f ef fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d1c1:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d1c4:	e8 cb 6a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d1c9:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011d1cc:	83 ec 0c             	sub    $0xc,%esp
f011d1cf:	68 00 08 00 00       	push   $0x800
f011d1d4:	e8 0b a2 fe ff       	call   f01073e4 <kmalloc>
f011d1d9:	83 c4 10             	add    $0x10,%esp
f011d1dc:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... ");
f011d1e2:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011d1e8:	89 c1                	mov    %eax,%ecx
f011d1ea:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011d1f1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011d1f4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d1f9:	89 45 88             	mov    %eax,-0x78(%ebp)
f011d1fc:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d1ff:	ba 00 00 00 00       	mov    $0x0,%edx
f011d204:	f7 75 8c             	divl   -0x74(%ebp)
f011d207:	8b 45 88             	mov    -0x78(%ebp),%eax
f011d20a:	29 d0                	sub    %edx,%eax
f011d20c:	89 c3                	mov    %eax,%ebx
f011d20e:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011d215:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d21a:	0f b6 d0             	movzbl %al,%edx
f011d21d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011d220:	01 d0                	add    %edx,%eax
f011d222:	48                   	dec    %eax
f011d223:	89 45 80             	mov    %eax,-0x80(%ebp)
f011d226:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d229:	ba 00 00 00 00       	mov    $0x0,%edx
f011d22e:	f7 75 84             	divl   -0x7c(%ebp)
f011d231:	8b 45 80             	mov    -0x80(%ebp),%eax
f011d234:	29 d0                	sub    %edx,%eax
f011d236:	01 c3                	add    %eax,%ebx
f011d238:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011d23f:	10 00 00 
f011d242:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d247:	0f b6 c0             	movzbl %al,%eax
f011d24a:	c1 e0 04             	shl    $0x4,%eax
f011d24d:	89 c2                	mov    %eax,%edx
f011d24f:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011d255:	01 d0                	add    %edx,%eax
f011d257:	48                   	dec    %eax
f011d258:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011d25e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d264:	ba 00 00 00 00       	mov    $0x0,%edx
f011d269:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011d26f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011d275:	29 d0                	sub    %edx,%eax
f011d277:	01 d8                	add    %ebx,%eax
f011d279:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011d27e:	39 c1                	cmp    %eax,%ecx
f011d280:	74 17                	je     f011d299 <test_kmalloc_firstfit2+0x525>
f011d282:	83 ec 04             	sub    $0x4,%esp
f011d285:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011d28a:	68 b9 03 00 00       	push   $0x3b9
f011d28f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d294:	e8 0d 2f fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d299:	e8 f6 69 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d29e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d2a1:	74 17                	je     f011d2ba <test_kmalloc_firstfit2+0x546>
f011d2a3:	83 ec 04             	sub    $0x4,%esp
f011d2a6:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011d2ab:	68 ba 03 00 00       	push   $0x3ba
f011d2b0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d2b5:	e8 ec 2e fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: ");
f011d2ba:	e8 11 ee fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d2bf:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d2c2:	29 c2                	sub    %eax,%edx
f011d2c4:	89 d0                	mov    %edx,%eax
f011d2c6:	83 f8 01             	cmp    $0x1,%eax
f011d2c9:	74 17                	je     f011d2e2 <test_kmalloc_firstfit2+0x56e>
f011d2cb:	83 ec 04             	sub    $0x4,%esp
f011d2ce:	68 20 a9 13 f0       	push   $0xf013a920
f011d2d3:	68 bb 03 00 00       	push   $0x3bb
f011d2d8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d2dd:	e8 c4 2e fe ff       	call   f01001a6 <_panic>

		//4 KB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d2e2:	e8 e9 ed fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d2e7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d2ea:	e8 a5 69 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d2ef:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[2]);
f011d2f2:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011d2f8:	83 ec 0c             	sub    $0xc,%esp
f011d2fb:	50                   	push   %eax
f011d2fc:	e8 fd a0 fe ff       	call   f01073fe <kfree>
f011d301:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d304:	e8 8b 69 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d309:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d30c:	74 17                	je     f011d325 <test_kmalloc_firstfit2+0x5b1>
f011d30e:	83 ec 04             	sub    $0x4,%esp
f011d311:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011d316:	68 c1 03 00 00       	push   $0x3c1
f011d31b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d320:	e8 81 2e fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong free: ");
f011d325:	e8 a6 ed fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d32a:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d32d:	83 f8 01             	cmp    $0x1,%eax
f011d330:	74 17                	je     f011d349 <test_kmalloc_firstfit2+0x5d5>
f011d332:	83 ec 04             	sub    $0x4,%esp
f011d335:	68 33 a9 13 f0       	push   $0xf013a933
f011d33a:	68 c2 03 00 00       	push   $0x3c2
f011d33f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d344:	e8 5d 2e fe ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011d349:	e8 82 ed fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d34e:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d351:	e8 3e 69 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d356:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011d359:	83 ec 0c             	sub    $0xc,%esp
f011d35c:	68 00 1c 00 00       	push   $0x1c00
f011d361:	e8 7e a0 fe ff       	call   f01073e4 <kmalloc>
f011d366:	83 c4 10             	add    $0x10,%esp
f011d369:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... ");
f011d36f:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011d375:	89 c1                	mov    %eax,%ecx
f011d377:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011d37e:	10 00 00 
f011d381:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011d387:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d38c:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011d392:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d398:	ba 00 00 00 00       	mov    $0x0,%edx
f011d39d:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011d3a3:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011d3a9:	29 d0                	sub    %edx,%eax
f011d3ab:	89 c3                	mov    %eax,%ebx
f011d3ad:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011d3b4:	10 00 00 
f011d3b7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d3bc:	0f b6 d0             	movzbl %al,%edx
f011d3bf:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011d3c5:	01 d0                	add    %edx,%eax
f011d3c7:	48                   	dec    %eax
f011d3c8:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011d3ce:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d3d4:	ba 00 00 00 00       	mov    $0x0,%edx
f011d3d9:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011d3df:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011d3e5:	29 d0                	sub    %edx,%eax
f011d3e7:	01 c3                	add    %eax,%ebx
f011d3e9:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011d3f0:	10 00 00 
f011d3f3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d3f8:	0f b6 c0             	movzbl %al,%eax
f011d3fb:	c1 e0 04             	shl    $0x4,%eax
f011d3fe:	89 c2                	mov    %eax,%edx
f011d400:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011d406:	01 d0                	add    %edx,%eax
f011d408:	48                   	dec    %eax
f011d409:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011d40f:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d415:	ba 00 00 00 00       	mov    $0x0,%edx
f011d41a:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011d420:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011d426:	29 d0                	sub    %edx,%eax
f011d428:	01 d8                	add    %ebx,%eax
f011d42a:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011d42f:	39 c1                	cmp    %eax,%ecx
f011d431:	74 17                	je     f011d44a <test_kmalloc_firstfit2+0x6d6>
f011d433:	83 ec 04             	sub    $0x4,%esp
f011d436:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011d43b:	68 c8 03 00 00       	push   $0x3c8
f011d440:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d445:	e8 5c 2d fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d44a:	e8 45 68 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d44f:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d452:	74 17                	je     f011d46b <test_kmalloc_firstfit2+0x6f7>
f011d454:	83 ec 04             	sub    $0x4,%esp
f011d457:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011d45c:	68 c9 03 00 00       	push   $0x3c9
f011d461:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d466:	e8 3b 2d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: ");
f011d46b:	e8 60 ec fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d470:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d473:	29 c2                	sub    %eax,%edx
f011d475:	89 d0                	mov    %edx,%eax
f011d477:	83 f8 02             	cmp    $0x2,%eax
f011d47a:	74 17                	je     f011d493 <test_kmalloc_firstfit2+0x71f>
f011d47c:	83 ec 04             	sub    $0x4,%esp
f011d47f:	68 20 a9 13 f0       	push   $0xf013a920
f011d484:	68 ca 03 00 00       	push   $0x3ca
f011d489:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d48e:	e8 13 2d fe ff       	call   f01001a6 <_panic>

		//2 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d493:	e8 38 ec fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d498:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d49b:	e8 f4 67 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d4a0:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[0]);
f011d4a3:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011d4a9:	83 ec 0c             	sub    $0xc,%esp
f011d4ac:	50                   	push   %eax
f011d4ad:	e8 4c 9f fe ff       	call   f01073fe <kfree>
f011d4b2:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d4b5:	e8 da 67 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d4ba:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d4bd:	74 17                	je     f011d4d6 <test_kmalloc_firstfit2+0x762>
f011d4bf:	83 ec 04             	sub    $0x4,%esp
f011d4c2:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011d4c7:	68 d0 03 00 00       	push   $0x3d0
f011d4cc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d4d1:	e8 d0 2c fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d4d6:	e8 f5 eb fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d4db:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d4de:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d4e3:	74 17                	je     f011d4fc <test_kmalloc_firstfit2+0x788>
f011d4e5:	83 ec 04             	sub    $0x4,%esp
f011d4e8:	68 33 a9 13 f0       	push   $0xf013a933
f011d4ed:	68 d1 03 00 00       	push   $0x3d1
f011d4f2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d4f7:	e8 aa 2c fe ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d4fc:	e8 cf eb fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d501:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d504:	e8 8b 67 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d509:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011d50c:	83 ec 0c             	sub    $0xc,%esp
f011d50f:	68 00 fc 2f 00       	push   $0x2ffc00
f011d514:	e8 cb 9e fe ff       	call   f01073e4 <kmalloc>
f011d519:	83 c4 10             	add    $0x10,%esp
f011d51c:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011d522:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d528:	89 c1                	mov    %eax,%ecx
f011d52a:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011d531:	10 00 00 
f011d534:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011d53a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d53f:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011d545:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d54b:	ba 00 00 00 00       	mov    $0x0,%edx
f011d550:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011d556:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011d55c:	29 d0                	sub    %edx,%eax
f011d55e:	89 c3                	mov    %eax,%ebx
f011d560:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011d567:	10 00 00 
f011d56a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d56f:	0f b6 d0             	movzbl %al,%edx
f011d572:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011d578:	01 d0                	add    %edx,%eax
f011d57a:	48                   	dec    %eax
f011d57b:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011d581:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d587:	ba 00 00 00 00       	mov    $0x0,%edx
f011d58c:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011d592:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011d598:	29 d0                	sub    %edx,%eax
f011d59a:	01 c3                	add    %eax,%ebx
f011d59c:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011d5a3:	10 00 00 
f011d5a6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d5ab:	0f b6 c0             	movzbl %al,%eax
f011d5ae:	c1 e0 04             	shl    $0x4,%eax
f011d5b1:	89 c2                	mov    %eax,%edx
f011d5b3:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011d5b9:	01 d0                	add    %edx,%eax
f011d5bb:	48                   	dec    %eax
f011d5bc:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011d5c2:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d5c8:	ba 00 00 00 00       	mov    $0x0,%edx
f011d5cd:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011d5d3:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011d5d9:	29 d0                	sub    %edx,%eax
f011d5db:	01 d8                	add    %ebx,%eax
f011d5dd:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011d5e2:	39 c1                	cmp    %eax,%ecx
f011d5e4:	74 17                	je     f011d5fd <test_kmalloc_firstfit2+0x889>
f011d5e6:	83 ec 04             	sub    $0x4,%esp
f011d5e9:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011d5ee:	68 d7 03 00 00       	push   $0x3d7
f011d5f3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d5f8:	e8 a9 2b fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d5fd:	e8 92 66 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d602:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d605:	74 17                	je     f011d61e <test_kmalloc_firstfit2+0x8aa>
f011d607:	83 ec 04             	sub    $0x4,%esp
f011d60a:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011d60f:	68 d8 03 00 00       	push   $0x3d8
f011d614:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d619:	e8 88 2b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011d61e:	e8 ad ea fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d623:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d626:	29 c2                	sub    %eax,%edx
f011d628:	89 d0                	mov    %edx,%eax
f011d62a:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d62f:	74 17                	je     f011d648 <test_kmalloc_firstfit2+0x8d4>
f011d631:	83 ec 04             	sub    $0x4,%esp
f011d634:	68 20 a9 13 f0       	push   $0xf013a920
f011d639:	68 d9 03 00 00       	push   $0x3d9
f011d63e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d643:	e8 5e 2b fe ff       	call   f01001a6 <_panic>

		//2 MB + 6 KB
		freeFrames = sys_calculate_free_frames() ;
f011d648:	e8 83 ea fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d64d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d650:	e8 3f 66 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d655:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(2*Mega + 6*kilo);
f011d658:	83 ec 0c             	sub    $0xc,%esp
f011d65b:	68 00 18 20 00       	push   $0x201800
f011d660:	e8 7f 9d fe ff       	call   f01073e4 <kmalloc>
f011d665:	83 c4 10             	add    $0x10,%esp
f011d668:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... ");
f011d66e:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011d674:	89 c1                	mov    %eax,%ecx
f011d676:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011d67d:	10 00 00 
f011d680:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011d686:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d68b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011d691:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d697:	ba 00 00 00 00       	mov    $0x0,%edx
f011d69c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011d6a2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011d6a8:	29 d0                	sub    %edx,%eax
f011d6aa:	89 c3                	mov    %eax,%ebx
f011d6ac:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011d6b3:	10 00 00 
f011d6b6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d6bb:	0f b6 d0             	movzbl %al,%edx
f011d6be:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011d6c4:	01 d0                	add    %edx,%eax
f011d6c6:	48                   	dec    %eax
f011d6c7:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011d6cd:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d6d3:	ba 00 00 00 00       	mov    $0x0,%edx
f011d6d8:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011d6de:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011d6e4:	29 d0                	sub    %edx,%eax
f011d6e6:	01 c3                	add    %eax,%ebx
f011d6e8:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011d6ef:	10 00 00 
f011d6f2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d6f7:	0f b6 c0             	movzbl %al,%eax
f011d6fa:	c1 e0 04             	shl    $0x4,%eax
f011d6fd:	89 c2                	mov    %eax,%edx
f011d6ff:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011d705:	01 d0                	add    %edx,%eax
f011d707:	48                   	dec    %eax
f011d708:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011d70e:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d714:	ba 00 00 00 00       	mov    $0x0,%edx
f011d719:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011d71f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011d725:	29 d0                	sub    %edx,%eax
f011d727:	01 d8                	add    %ebx,%eax
f011d729:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011d72e:	39 c1                	cmp    %eax,%ecx
f011d730:	74 17                	je     f011d749 <test_kmalloc_firstfit2+0x9d5>
f011d732:	83 ec 04             	sub    $0x4,%esp
f011d735:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011d73a:	68 df 03 00 00       	push   $0x3df
f011d73f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d744:	e8 5d 2a fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d749:	e8 46 65 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d74e:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d751:	74 17                	je     f011d76a <test_kmalloc_firstfit2+0x9f6>
f011d753:	83 ec 04             	sub    $0x4,%esp
f011d756:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011d75b:	68 e0 03 00 00       	push   $0x3e0
f011d760:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d765:	e8 3c 2a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=  514) panic("Wrong allocation: ");
f011d76a:	e8 61 e9 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d76f:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d772:	29 c2                	sub    %eax,%edx
f011d774:	89 d0                	mov    %edx,%eax
f011d776:	3d 02 02 00 00       	cmp    $0x202,%eax
f011d77b:	74 17                	je     f011d794 <test_kmalloc_firstfit2+0xa20>
f011d77d:	83 ec 04             	sub    $0x4,%esp
f011d780:	68 20 a9 13 f0       	push   $0xf013a920
f011d785:	68 e1 03 00 00       	push   $0x3e1
f011d78a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d78f:	e8 12 2a fe ff       	call   f01001a6 <_panic>

		//3 MB Hole
		freeFrames = sys_calculate_free_frames() ;
f011d794:	e8 37 e9 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d799:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d79c:	e8 f3 64 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d7a1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[5]);
f011d7a4:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011d7aa:	83 ec 0c             	sub    $0xc,%esp
f011d7ad:	50                   	push   %eax
f011d7ae:	e8 4b 9c fe ff       	call   f01073fe <kfree>
f011d7b3:	83 c4 10             	add    $0x10,%esp
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d7b6:	e8 d9 64 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d7bb:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d7be:	74 17                	je     f011d7d7 <test_kmalloc_firstfit2+0xa63>
f011d7c0:	83 ec 04             	sub    $0x4,%esp
f011d7c3:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011d7c8:	68 e7 03 00 00       	push   $0x3e7
f011d7cd:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d7d2:	e8 cf 29 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 768) panic("Wrong free: ");
f011d7d7:	e8 f4 e8 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d7dc:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d7df:	3d 00 03 00 00       	cmp    $0x300,%eax
f011d7e4:	74 17                	je     f011d7fd <test_kmalloc_firstfit2+0xa89>
f011d7e6:	83 ec 04             	sub    $0x4,%esp
f011d7e9:	68 33 a9 13 f0       	push   $0xf013a933
f011d7ee:	68 e8 03 00 00       	push   $0x3e8
f011d7f3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d7f8:	e8 a9 29 fe ff       	call   f01001a6 <_panic>

		//2 MB Hole [Resulting Hole = 2 MB + 2 MB + 4 KB = 4 MB + 4 KB]
		freeFrames = sys_calculate_free_frames() ;
f011d7fd:	e8 ce e8 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d802:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d805:	e8 8a 64 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d80a:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[1]);
f011d80d:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011d813:	83 ec 0c             	sub    $0xc,%esp
f011d816:	50                   	push   %eax
f011d817:	e8 e2 9b fe ff       	call   f01073fe <kfree>
f011d81c:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong free: ");
f011d81f:	e8 ac e8 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d824:	2b 45 dc             	sub    -0x24(%ebp),%eax
f011d827:	3d 00 02 00 00       	cmp    $0x200,%eax
f011d82c:	74 17                	je     f011d845 <test_kmalloc_firstfit2+0xad1>
f011d82e:	83 ec 04             	sub    $0x4,%esp
f011d831:	68 33 a9 13 f0       	push   $0xf013a933
f011d836:	68 ee 03 00 00       	push   $0x3ee
f011d83b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d840:	e8 61 29 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d845:	e8 4a 64 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d84a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d84d:	74 17                	je     f011d866 <test_kmalloc_firstfit2+0xaf2>
f011d84f:	83 ec 04             	sub    $0x4,%esp
f011d852:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011d857:	68 ef 03 00 00       	push   $0x3ef
f011d85c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d861:	e8 40 29 fe ff       	call   f01001a6 <_panic>

		//5 MB
		freeFrames = sys_calculate_free_frames() ;
f011d866:	e8 65 e8 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d86b:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d86e:	e8 21 64 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d873:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(5*Mega-kilo);
f011d876:	83 ec 0c             	sub    $0xc,%esp
f011d879:	68 00 fc 4f 00       	push   $0x4ffc00
f011d87e:	e8 61 9b fe ff       	call   f01073e4 <kmalloc>
f011d883:	83 c4 10             	add    $0x10,%esp
f011d886:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 9*Mega + 24*kilo)) panic("Wrong start address for the allocated space... ");
f011d88c:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011d892:	89 c1                	mov    %eax,%ecx
f011d894:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011d89b:	10 00 00 
f011d89e:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011d8a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d8a9:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011d8af:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d8b5:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8ba:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011d8c0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011d8c6:	29 d0                	sub    %edx,%eax
f011d8c8:	89 c3                	mov    %eax,%ebx
f011d8ca:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011d8d1:	10 00 00 
f011d8d4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d8d9:	0f b6 d0             	movzbl %al,%edx
f011d8dc:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011d8e2:	01 d0                	add    %edx,%eax
f011d8e4:	48                   	dec    %eax
f011d8e5:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011d8eb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d8f1:	ba 00 00 00 00       	mov    $0x0,%edx
f011d8f6:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011d8fc:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011d902:	29 d0                	sub    %edx,%eax
f011d904:	01 c3                	add    %eax,%ebx
f011d906:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011d90d:	10 00 00 
f011d910:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011d915:	0f b6 c0             	movzbl %al,%eax
f011d918:	c1 e0 04             	shl    $0x4,%eax
f011d91b:	89 c2                	mov    %eax,%edx
f011d91d:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011d923:	01 d0                	add    %edx,%eax
f011d925:	48                   	dec    %eax
f011d926:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011d92c:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d932:	ba 00 00 00 00       	mov    $0x0,%edx
f011d937:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011d93d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011d943:	29 d0                	sub    %edx,%eax
f011d945:	01 d8                	add    %ebx,%eax
f011d947:	2d 00 60 6f 09       	sub    $0x96f6000,%eax
f011d94c:	39 c1                	cmp    %eax,%ecx
f011d94e:	74 17                	je     f011d967 <test_kmalloc_firstfit2+0xbf3>
f011d950:	83 ec 04             	sub    $0x4,%esp
f011d953:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011d958:	68 f5 03 00 00       	push   $0x3f5
f011d95d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d962:	e8 3f 28 fe ff       	call   f01001a6 <_panic>
		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011d967:	e8 28 63 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d96c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011d96f:	74 17                	je     f011d988 <test_kmalloc_firstfit2+0xc14>
f011d971:	83 ec 04             	sub    $0x4,%esp
f011d974:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011d979:	68 f6 03 00 00       	push   $0x3f6
f011d97e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d983:	e8 1e 28 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   5*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011d988:	e8 43 e7 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d98d:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011d990:	29 c2                	sub    %eax,%edx
f011d992:	89 d0                	mov    %edx,%eax
f011d994:	3d 00 05 00 00       	cmp    $0x500,%eax
f011d999:	74 17                	je     f011d9b2 <test_kmalloc_firstfit2+0xc3e>
f011d99b:	83 ec 04             	sub    $0x4,%esp
f011d99e:	68 20 a9 13 f0       	push   $0xf013a920
f011d9a3:	68 f7 03 00 00       	push   $0x3f7
f011d9a8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011d9ad:	e8 f4 27 fe ff       	call   f01001a6 <_panic>
//		if((pf_calculate_free_frames() - freeDiskFrames) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
//		if ((sys_calculate_free_frames() - freeFrames) != 514) panic("Wrong free: ");

		//[FIRST FIT Case]
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011d9b2:	e8 19 e7 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011d9b7:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011d9ba:	e8 d5 62 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011d9bf:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega-kilo);
f011d9c2:	83 ec 0c             	sub    $0xc,%esp
f011d9c5:	68 00 fc 2f 00       	push   $0x2ffc00
f011d9ca:	e8 15 9a fe ff       	call   f01073e4 <kmalloc>
f011d9cf:	83 c4 10             	add    $0x10,%esp
f011d9d2:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... ");
f011d9d8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011d9de:	89 c1                	mov    %eax,%ecx
f011d9e0:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011d9e7:	10 00 00 
f011d9ea:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011d9f0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011d9f5:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011d9fb:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011da01:	ba 00 00 00 00       	mov    $0x0,%edx
f011da06:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011da0c:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011da12:	29 d0                	sub    %edx,%eax
f011da14:	89 c3                	mov    %eax,%ebx
f011da16:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011da1d:	10 00 00 
f011da20:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011da25:	0f b6 d0             	movzbl %al,%edx
f011da28:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011da2e:	01 d0                	add    %edx,%eax
f011da30:	48                   	dec    %eax
f011da31:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011da37:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011da3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011da42:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011da48:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011da4e:	29 d0                	sub    %edx,%eax
f011da50:	01 c3                	add    %eax,%ebx
f011da52:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f011da59:	10 00 00 
f011da5c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011da61:	0f b6 c0             	movzbl %al,%eax
f011da64:	c1 e0 04             	shl    $0x4,%eax
f011da67:	89 c2                	mov    %eax,%edx
f011da69:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011da6f:	01 d0                	add    %edx,%eax
f011da71:	48                   	dec    %eax
f011da72:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f011da78:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011da7e:	ba 00 00 00 00       	mov    $0x0,%edx
f011da83:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f011da89:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011da8f:	29 d0                	sub    %edx,%eax
f011da91:	01 d8                	add    %ebx,%eax
f011da93:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011da98:	39 c1                	cmp    %eax,%ecx
f011da9a:	74 17                	je     f011dab3 <test_kmalloc_firstfit2+0xd3f>
f011da9c:	83 ec 04             	sub    $0x4,%esp
f011da9f:	68 f0 a8 13 f0       	push   $0xf013a8f0
f011daa4:	68 05 04 00 00       	push   $0x405
f011daa9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011daae:	e8 f3 26 fe ff       	call   f01001a6 <_panic>
		if((freeDiskFrames - pf_calculate_free_frames()) !=  0)  panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011dab3:	e8 dc 61 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011dab8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f011dabb:	74 17                	je     f011dad4 <test_kmalloc_firstfit2+0xd60>
f011dabd:	83 ec 04             	sub    $0x4,%esp
f011dac0:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011dac5:	68 06 04 00 00       	push   $0x406
f011daca:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011dacf:	e8 d2 26 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) !=   3*Mega/PAGE_SIZE) panic("Wrong allocation: ");
f011dad4:	e8 f7 e5 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011dad9:	8b 55 dc             	mov    -0x24(%ebp),%edx
f011dadc:	29 c2                	sub    %eax,%edx
f011dade:	89 d0                	mov    %edx,%eax
f011dae0:	3d 00 03 00 00       	cmp    $0x300,%eax
f011dae5:	74 17                	je     f011dafe <test_kmalloc_firstfit2+0xd8a>
f011dae7:	83 ec 04             	sub    $0x4,%esp
f011daea:	68 20 a9 13 f0       	push   $0xf013a920
f011daef:	68 07 04 00 00       	push   $0x407
f011daf4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011daf9:	e8 a8 26 fe ff       	call   f01001a6 <_panic>
	}
	//	b) Attempt to allocate large segment with no suitable fragment to fit on
	{
		//Large Allocation
		ptr_allocations[9] = kmalloc((KERNEL_HEAP_MAX - ACTUAL_START - 14*Mega));
f011dafe:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f011db05:	10 00 00 
f011db08:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011db0e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011db13:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f011db19:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011db1f:	ba 00 00 00 00       	mov    $0x0,%edx
f011db24:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f011db2a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011db30:	29 d0                	sub    %edx,%eax
f011db32:	89 c1                	mov    %eax,%ecx
f011db34:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f011db3b:	10 00 00 
f011db3e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011db43:	0f b6 d0             	movzbl %al,%edx
f011db46:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011db4c:	01 d0                	add    %edx,%eax
f011db4e:	48                   	dec    %eax
f011db4f:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f011db55:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011db5b:	ba 00 00 00 00       	mov    $0x0,%edx
f011db60:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f011db66:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011db6c:	29 d0                	sub    %edx,%eax
f011db6e:	01 c1                	add    %eax,%ecx
f011db70:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f011db77:	10 00 00 
f011db7a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011db7f:	0f b6 c0             	movzbl %al,%eax
f011db82:	c1 e0 04             	shl    $0x4,%eax
f011db85:	89 c2                	mov    %eax,%edx
f011db87:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011db8d:	01 d0                	add    %edx,%eax
f011db8f:	48                   	dec    %eax
f011db90:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f011db96:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011db9c:	ba 00 00 00 00       	mov    $0x0,%edx
f011dba1:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f011dba7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011dbad:	29 d0                	sub    %edx,%eax
f011dbaf:	01 c8                	add    %ecx,%eax
f011dbb1:	ba 00 b0 1f 09       	mov    $0x91fb000,%edx
f011dbb6:	29 c2                	sub    %eax,%edx
f011dbb8:	89 d0                	mov    %edx,%eax
f011dbba:	83 ec 0c             	sub    $0xc,%esp
f011dbbd:	50                   	push   %eax
f011dbbe:	e8 21 98 fe ff       	call   f01073e4 <kmalloc>
f011dbc3:	83 c4 10             	add    $0x10,%esp
f011dbc6:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
		if (ptr_allocations[9] != NULL) panic("Kmalloc: Attempt to allocate large segment with no suitable fragment to fit on, should return NULL");
f011dbcc:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011dbd2:	85 c0                	test   %eax,%eax
f011dbd4:	74 17                	je     f011dbed <test_kmalloc_firstfit2+0xe79>
f011dbd6:	83 ec 04             	sub    $0x4,%esp
f011dbd9:	68 20 aa 13 f0       	push   $0xf013aa20
f011dbde:	68 0d 04 00 00       	push   $0x40d
f011dbe3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011dbe8:	e8 b9 25 fe ff       	call   f01001a6 <_panic>

		cprintf("Congratulations!! test FIRST FIT allocation (2) completed successfully.\n");
f011dbed:	83 ec 0c             	sub    $0xc,%esp
f011dbf0:	68 60 ab 13 f0       	push   $0xf013ab60
f011dbf5:	e8 33 30 fe ff       	call   f0100c2d <cprintf>
f011dbfa:	83 c4 10             	add    $0x10,%esp
	}
	return 1;
f011dbfd:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011dc02:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011dc05:	5b                   	pop    %ebx
f011dc06:	5f                   	pop    %edi
f011dc07:	5d                   	pop    %ebp
f011dc08:	c3                   	ret    

f011dc09 <test_kmalloc_worstfit>:

int test_kmalloc_worstfit()
{
f011dc09:	55                   	push   %ebp
f011dc0a:	89 e5                	mov    %esp,%ebp
f011dc0c:	57                   	push   %edi
f011dc0d:	53                   	push   %ebx
f011dc0e:	81 ec 50 04 00 00    	sub    $0x450,%esp
	cprintf("==============================================\n");
f011dc14:	83 ec 0c             	sub    $0xc,%esp
f011dc17:	68 18 a4 13 f0       	push   $0xf013a418
f011dc1c:	e8 0c 30 fe ff       	call   f0100c2d <cprintf>
f011dc21:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011dc24:	83 ec 0c             	sub    $0xc,%esp
f011dc27:	68 48 a4 13 f0       	push   $0xf013a448
f011dc2c:	e8 fc 2f fe ff       	call   f0100c2d <cprintf>
f011dc31:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011dc34:	83 ec 0c             	sub    $0xc,%esp
f011dc37:	68 18 a4 13 f0       	push   $0xf013a418
f011dc3c:	e8 ec 2f fe ff       	call   f0100c2d <cprintf>
f011dc41:	83 c4 10             	add    $0x10,%esp

	void* ptr_allocations[160] = {0};
f011dc44:	8d 95 b4 fb ff ff    	lea    -0x44c(%ebp),%edx
f011dc4a:	b9 a0 00 00 00       	mov    $0xa0,%ecx
f011dc4f:	b8 00 00 00 00       	mov    $0x0,%eax
f011dc54:	89 d7                	mov    %edx,%edi
f011dc56:	f3 ab                	rep stos %eax,%es:(%edi)

	// allocate pages
	int freeFrames = sys_calculate_free_frames() ;
f011dc58:	e8 73 e4 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011dc5d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int freeDiskFrames = pf_calculate_free_frames() ;
f011dc60:	e8 2f 60 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011dc65:	89 45 ec             	mov    %eax,-0x14(%ebp)

	int count = 0;
f011dc68:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
	int i;
	for(i = 0; i< 79 ;i++)
f011dc6f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011dc76:	eb 1f                	jmp    f011dc97 <test_kmalloc_worstfit+0x8e>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
f011dc78:	83 ec 0c             	sub    $0xc,%esp
f011dc7b:	68 00 00 20 00       	push   $0x200000
f011dc80:	e8 5f 97 fe ff       	call   f01073e4 <kmalloc>
f011dc85:	83 c4 10             	add    $0x10,%esp
f011dc88:	89 c2                	mov    %eax,%edx
f011dc8a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f011dc8d:	89 94 85 b4 fb ff ff 	mov    %edx,-0x44c(%ebp,%eax,4)
	int freeFrames = sys_calculate_free_frames() ;
	int freeDiskFrames = pf_calculate_free_frames() ;

	int count = 0;
	int i;
	for(i = 0; i< 79 ;i++)
f011dc94:	ff 45 f4             	incl   -0xc(%ebp)
f011dc97:	83 7d f4 4e          	cmpl   $0x4e,-0xc(%ebp)
f011dc9b:	7e db                	jle    f011dc78 <test_kmalloc_worstfit+0x6f>
	{
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);
f011dc9d:	83 ec 0c             	sub    $0xc,%esp
f011dca0:	68 00 b0 1f 00       	push   $0x1fb000
f011dca5:	e8 3a 97 fe ff       	call   f01073e4 <kmalloc>
f011dcaa:	83 c4 10             	add    $0x10,%esp
f011dcad:	89 85 f0 fc ff ff    	mov    %eax,-0x310(%ebp)

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011dcb3:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011dcb9:	89 c1                	mov    %eax,%ecx
f011dcbb:	c7 45 e4 00 10 00 00 	movl   $0x1000,-0x1c(%ebp)
f011dcc2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f011dcc5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dcca:	89 45 e0             	mov    %eax,-0x20(%ebp)
f011dccd:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dcd0:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcd5:	f7 75 e4             	divl   -0x1c(%ebp)
f011dcd8:	8b 45 e0             	mov    -0x20(%ebp),%eax
f011dcdb:	29 d0                	sub    %edx,%eax
f011dcdd:	89 c3                	mov    %eax,%ebx
f011dcdf:	c7 45 dc 00 10 00 00 	movl   $0x1000,-0x24(%ebp)
f011dce6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011dceb:	0f b6 d0             	movzbl %al,%edx
f011dcee:	8b 45 dc             	mov    -0x24(%ebp),%eax
f011dcf1:	01 d0                	add    %edx,%eax
f011dcf3:	48                   	dec    %eax
f011dcf4:	89 45 d8             	mov    %eax,-0x28(%ebp)
f011dcf7:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011dcfa:	ba 00 00 00 00       	mov    $0x0,%edx
f011dcff:	f7 75 dc             	divl   -0x24(%ebp)
f011dd02:	8b 45 d8             	mov    -0x28(%ebp),%eax
f011dd05:	29 d0                	sub    %edx,%eax
f011dd07:	01 c3                	add    %eax,%ebx
f011dd09:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f011dd10:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011dd15:	0f b6 c0             	movzbl %al,%eax
f011dd18:	c1 e0 04             	shl    $0x4,%eax
f011dd1b:	89 c2                	mov    %eax,%edx
f011dd1d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f011dd20:	01 d0                	add    %edx,%eax
f011dd22:	48                   	dec    %eax
f011dd23:	89 45 d0             	mov    %eax,-0x30(%ebp)
f011dd26:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011dd29:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd2e:	f7 75 d4             	divl   -0x2c(%ebp)
f011dd31:	8b 45 d0             	mov    -0x30(%ebp),%eax
f011dd34:	29 d0                	sub    %edx,%eax
f011dd36:	01 d8                	add    %ebx,%eax
f011dd38:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011dd3d:	39 c1                	cmp    %eax,%ecx
f011dd3f:	0f 85 c0 04 00 00    	jne    f011e205 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011dd45:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011dd4b:	89 c1                	mov    %eax,%ecx
f011dd4d:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f011dd54:	8b 45 cc             	mov    -0x34(%ebp),%eax
f011dd57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dd5c:	89 45 c8             	mov    %eax,-0x38(%ebp)
f011dd5f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011dd62:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd67:	f7 75 cc             	divl   -0x34(%ebp)
f011dd6a:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011dd6d:	29 d0                	sub    %edx,%eax
f011dd6f:	89 c3                	mov    %eax,%ebx
f011dd71:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f011dd78:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011dd7d:	0f b6 d0             	movzbl %al,%edx
f011dd80:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011dd83:	01 d0                	add    %edx,%eax
f011dd85:	48                   	dec    %eax
f011dd86:	89 45 c0             	mov    %eax,-0x40(%ebp)
f011dd89:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011dd8c:	ba 00 00 00 00       	mov    $0x0,%edx
f011dd91:	f7 75 c4             	divl   -0x3c(%ebp)
f011dd94:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011dd97:	29 d0                	sub    %edx,%eax
f011dd99:	01 c3                	add    %eax,%ebx
f011dd9b:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f011dda2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011dda7:	0f b6 c0             	movzbl %al,%eax
f011ddaa:	c1 e0 04             	shl    $0x4,%eax
f011ddad:	89 c2                	mov    %eax,%edx
f011ddaf:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011ddb2:	01 d0                	add    %edx,%eax
f011ddb4:	48                   	dec    %eax
f011ddb5:	89 45 b8             	mov    %eax,-0x48(%ebp)
f011ddb8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ddbb:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddc0:	f7 75 bc             	divl   -0x44(%ebp)
f011ddc3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011ddc6:	29 d0                	sub    %edx,%eax
f011ddc8:	01 d8                	add    %ebx,%eax
f011ddca:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
		ptr_allocations[i] = kmalloc(2*Mega);
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
f011ddcf:	39 c1                	cmp    %eax,%ecx
f011ddd1:	0f 85 2e 04 00 00    	jne    f011e205 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011ddd7:	8b 85 d4 fb ff ff    	mov    -0x42c(%ebp),%eax
f011dddd:	89 c1                	mov    %eax,%ecx
f011dddf:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f011dde6:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011dde9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ddee:	89 45 b0             	mov    %eax,-0x50(%ebp)
f011ddf1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ddf4:	ba 00 00 00 00       	mov    $0x0,%edx
f011ddf9:	f7 75 b4             	divl   -0x4c(%ebp)
f011ddfc:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011ddff:	29 d0                	sub    %edx,%eax
f011de01:	89 c3                	mov    %eax,%ebx
f011de03:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f011de0a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011de0f:	0f b6 d0             	movzbl %al,%edx
f011de12:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011de15:	01 d0                	add    %edx,%eax
f011de17:	48                   	dec    %eax
f011de18:	89 45 a8             	mov    %eax,-0x58(%ebp)
f011de1b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011de1e:	ba 00 00 00 00       	mov    $0x0,%edx
f011de23:	f7 75 ac             	divl   -0x54(%ebp)
f011de26:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011de29:	29 d0                	sub    %edx,%eax
f011de2b:	01 c3                	add    %eax,%ebx
f011de2d:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f011de34:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011de39:	0f b6 c0             	movzbl %al,%eax
f011de3c:	c1 e0 04             	shl    $0x4,%eax
f011de3f:	89 c2                	mov    %eax,%edx
f011de41:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011de44:	01 d0                	add    %edx,%eax
f011de46:	48                   	dec    %eax
f011de47:	89 45 a0             	mov    %eax,-0x60(%ebp)
f011de4a:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011de4d:	ba 00 00 00 00       	mov    $0x0,%edx
f011de52:	f7 75 a4             	divl   -0x5c(%ebp)
f011de55:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011de58:	29 d0                	sub    %edx,%eax
f011de5a:	01 d8                	add    %ebx,%eax
f011de5c:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
	}
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
f011de61:	39 c1                	cmp    %eax,%ecx
f011de63:	0f 85 9c 03 00 00    	jne    f011e205 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011de69:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011de6f:	89 c1                	mov    %eax,%ecx
f011de71:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f011de78:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011de7b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011de80:	89 45 98             	mov    %eax,-0x68(%ebp)
f011de83:	8b 45 98             	mov    -0x68(%ebp),%eax
f011de86:	ba 00 00 00 00       	mov    $0x0,%edx
f011de8b:	f7 75 9c             	divl   -0x64(%ebp)
f011de8e:	8b 45 98             	mov    -0x68(%ebp),%eax
f011de91:	29 d0                	sub    %edx,%eax
f011de93:	89 c3                	mov    %eax,%ebx
f011de95:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f011de9c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011dea1:	0f b6 d0             	movzbl %al,%edx
f011dea4:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011dea7:	01 d0                	add    %edx,%eax
f011dea9:	48                   	dec    %eax
f011deaa:	89 45 90             	mov    %eax,-0x70(%ebp)
f011dead:	8b 45 90             	mov    -0x70(%ebp),%eax
f011deb0:	ba 00 00 00 00       	mov    $0x0,%edx
f011deb5:	f7 75 94             	divl   -0x6c(%ebp)
f011deb8:	8b 45 90             	mov    -0x70(%ebp),%eax
f011debb:	29 d0                	sub    %edx,%eax
f011debd:	01 c3                	add    %eax,%ebx
f011debf:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f011dec6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011decb:	0f b6 c0             	movzbl %al,%eax
f011dece:	c1 e0 04             	shl    $0x4,%eax
f011ded1:	89 c2                	mov    %eax,%edx
f011ded3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011ded6:	01 d0                	add    %edx,%eax
f011ded8:	48                   	dec    %eax
f011ded9:	89 45 88             	mov    %eax,-0x78(%ebp)
f011dedc:	8b 45 88             	mov    -0x78(%ebp),%eax
f011dedf:	ba 00 00 00 00       	mov    $0x0,%edx
f011dee4:	f7 75 8c             	divl   -0x74(%ebp)
f011dee7:	8b 45 88             	mov    -0x78(%ebp),%eax
f011deea:	29 d0                	sub    %edx,%eax
f011deec:	01 d8                	add    %ebx,%eax
f011deee:	2d 00 c0 bf 08       	sub    $0x8bfc000,%eax
	ptr_allocations[79] = kmalloc(2*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE);

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
f011def3:	39 c1                	cmp    %eax,%ecx
f011def5:	0f 85 0a 03 00 00    	jne    f011e205 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011defb:	8b 85 f0 fb ff ff    	mov    -0x410(%ebp),%eax
f011df01:	89 c1                	mov    %eax,%ecx
f011df03:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f011df0a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011df0d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011df12:	89 45 80             	mov    %eax,-0x80(%ebp)
f011df15:	8b 45 80             	mov    -0x80(%ebp),%eax
f011df18:	ba 00 00 00 00       	mov    $0x0,%edx
f011df1d:	f7 75 84             	divl   -0x7c(%ebp)
f011df20:	8b 45 80             	mov    -0x80(%ebp),%eax
f011df23:	29 d0                	sub    %edx,%eax
f011df25:	89 c3                	mov    %eax,%ebx
f011df27:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011df2e:	10 00 00 
f011df31:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011df36:	0f b6 d0             	movzbl %al,%edx
f011df39:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011df3f:	01 d0                	add    %edx,%eax
f011df41:	48                   	dec    %eax
f011df42:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011df48:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011df4e:	ba 00 00 00 00       	mov    $0x0,%edx
f011df53:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011df59:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011df5f:	29 d0                	sub    %edx,%eax
f011df61:	01 c3                	add    %eax,%ebx
f011df63:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011df6a:	10 00 00 
f011df6d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011df72:	0f b6 c0             	movzbl %al,%eax
f011df75:	c1 e0 04             	shl    $0x4,%eax
f011df78:	89 c2                	mov    %eax,%edx
f011df7a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011df80:	01 d0                	add    %edx,%eax
f011df82:	48                   	dec    %eax
f011df83:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011df89:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011df8f:	ba 00 00 00 00       	mov    $0x0,%edx
f011df94:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011df9a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011dfa0:	29 d0                	sub    %edx,%eax
f011dfa2:	01 d8                	add    %ebx,%eax
f011dfa4:	2d 00 c0 1f 08       	sub    $0x81fc000,%eax

	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
f011dfa9:	39 c1                	cmp    %eax,%ecx
f011dfab:	0f 85 54 02 00 00    	jne    f011e205 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011dfb1:	8b 85 04 fc ff ff    	mov    -0x3fc(%ebp),%eax
f011dfb7:	89 c1                	mov    %eax,%ecx
f011dfb9:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011dfc0:	10 00 00 
f011dfc3:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011dfc9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011dfce:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011dfd4:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dfda:	ba 00 00 00 00       	mov    $0x0,%edx
f011dfdf:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011dfe5:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011dfeb:	29 d0                	sub    %edx,%eax
f011dfed:	89 c3                	mov    %eax,%ebx
f011dfef:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011dff6:	10 00 00 
f011dff9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011dffe:	0f b6 d0             	movzbl %al,%edx
f011e001:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011e007:	01 d0                	add    %edx,%eax
f011e009:	48                   	dec    %eax
f011e00a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011e010:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e016:	ba 00 00 00 00       	mov    $0x0,%edx
f011e01b:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011e021:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011e027:	29 d0                	sub    %edx,%eax
f011e029:	01 c3                	add    %eax,%ebx
f011e02b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011e032:	10 00 00 
f011e035:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e03a:	0f b6 c0             	movzbl %al,%eax
f011e03d:	c1 e0 04             	shl    $0x4,%eax
f011e040:	89 c2                	mov    %eax,%edx
f011e042:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011e048:	01 d0                	add    %edx,%eax
f011e04a:	48                   	dec    %eax
f011e04b:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011e051:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e057:	ba 00 00 00 00       	mov    $0x0,%edx
f011e05c:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011e062:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011e068:	29 d0                	sub    %edx,%eax
f011e06a:	01 d8                	add    %ebx,%eax
f011e06c:	2d 00 c0 7f 07       	sub    $0x77fc000,%eax
	// randomly check the addresses of the allocation
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
f011e071:	39 c1                	cmp    %eax,%ecx
f011e073:	0f 85 8c 01 00 00    	jne    f011e205 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e079:	8b 85 7c fc ff ff    	mov    -0x384(%ebp),%eax
f011e07f:	89 c1                	mov    %eax,%ecx
f011e081:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011e088:	10 00 00 
f011e08b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011e091:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e096:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011e09c:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e0a2:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0a7:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011e0ad:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011e0b3:	29 d0                	sub    %edx,%eax
f011e0b5:	89 c3                	mov    %eax,%ebx
f011e0b7:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011e0be:	10 00 00 
f011e0c1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e0c6:	0f b6 d0             	movzbl %al,%edx
f011e0c9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011e0cf:	01 d0                	add    %edx,%eax
f011e0d1:	48                   	dec    %eax
f011e0d2:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011e0d8:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e0de:	ba 00 00 00 00       	mov    $0x0,%edx
f011e0e3:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011e0e9:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011e0ef:	29 d0                	sub    %edx,%eax
f011e0f1:	01 c3                	add    %eax,%ebx
f011e0f3:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011e0fa:	10 00 00 
f011e0fd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e102:	0f b6 c0             	movzbl %al,%eax
f011e105:	c1 e0 04             	shl    $0x4,%eax
f011e108:	89 c2                	mov    %eax,%edx
f011e10a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011e110:	01 d0                	add    %edx,%eax
f011e112:	48                   	dec    %eax
f011e113:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011e119:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e11f:	ba 00 00 00 00       	mov    $0x0,%edx
f011e124:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011e12a:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011e130:	29 d0                	sub    %edx,%eax
f011e132:	01 d8                	add    %ebx,%eax
f011e134:	2d 00 c0 bf 03       	sub    $0x3bfc000,%eax
	if( 	(uint32)ptr_allocations[0] != ACTUAL_START ||
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
f011e139:	39 c1                	cmp    %eax,%ecx
f011e13b:	0f 85 c4 00 00 00    	jne    f011e205 <test_kmalloc_worstfit+0x5fc>
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
f011e141:	8b 85 f0 fc ff ff    	mov    -0x310(%ebp),%eax
f011e147:	89 c1                	mov    %eax,%ecx
f011e149:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011e150:	10 00 00 
f011e153:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011e159:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e15e:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011e164:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e16a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e16f:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011e175:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011e17b:	29 d0                	sub    %edx,%eax
f011e17d:	89 c3                	mov    %eax,%ebx
f011e17f:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011e186:	10 00 00 
f011e189:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e18e:	0f b6 d0             	movzbl %al,%edx
f011e191:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011e197:	01 d0                	add    %edx,%eax
f011e199:	48                   	dec    %eax
f011e19a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011e1a0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e1a6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1ab:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011e1b1:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011e1b7:	29 d0                	sub    %edx,%eax
f011e1b9:	01 c3                	add    %eax,%ebx
f011e1bb:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011e1c2:	10 00 00 
f011e1c5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e1ca:	0f b6 c0             	movzbl %al,%eax
f011e1cd:	c1 e0 04             	shl    $0x4,%eax
f011e1d0:	89 c2                	mov    %eax,%edx
f011e1d2:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011e1d8:	01 d0                	add    %edx,%eax
f011e1da:	48                   	dec    %eax
f011e1db:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011e1e1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e1e7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e1ec:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011e1f2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011e1f8:	29 d0                	sub    %edx,%eax
f011e1fa:	01 d8                	add    %ebx,%eax
f011e1fc:	2d 00 c0 1f 00       	sub    $0x1fc000,%eax
			(uint32)ptr_allocations[2] != (ACTUAL_START + 4*Mega) ||
			(uint32)ptr_allocations[8] != (ACTUAL_START + 16*Mega) ||
			(uint32)ptr_allocations[10] != (ACTUAL_START + 20*Mega) ||
			(uint32)ptr_allocations[15] != (ACTUAL_START + 30*Mega) ||
			(uint32)ptr_allocations[20] != (ACTUAL_START + 40*Mega) ||
			(uint32)ptr_allocations[50] != (ACTUAL_START + 100*Mega) ||
f011e201:	39 c1                	cmp    %eax,%ecx
f011e203:	74 17                	je     f011e21c <test_kmalloc_worstfit+0x613>
			(uint32)ptr_allocations[79] != (ACTUAL_START + 158*Mega))
		panic("Wrong allocation, Check worst fitting strategy is working correctly");
f011e205:	83 ec 04             	sub    $0x4,%esp
f011e208:	68 ac ab 13 f0       	push   $0xf013abac
f011e20d:	68 31 04 00 00       	push   $0x431
f011e212:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e217:	e8 8a 1f fe ff       	call   f01001a6 <_panic>

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e21c:	e8 73 5a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011e221:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e224:	74 17                	je     f011e23d <test_kmalloc_worstfit+0x634>
f011e226:	83 ec 04             	sub    $0x4,%esp
f011e229:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011e22e:	68 33 04 00 00       	push   $0x433
f011e233:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e238:	e8 69 1f fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) != (160*Mega - PAGE_SIZE - KERNEL_SHARES_ARR_INIT_SIZE - KERNEL_SEMAPHORES_ARR_INIT_SIZE)/(PAGE_SIZE) ) panic("Wrong allocation");
f011e23d:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e240:	e8 8b de fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011e245:	29 c3                	sub    %eax,%ebx
f011e247:	89 d8                	mov    %ebx,%eax
f011e249:	3d fb 9f 00 00       	cmp    $0x9ffb,%eax
f011e24e:	74 17                	je     f011e267 <test_kmalloc_worstfit+0x65e>
f011e250:	83 ec 04             	sub    $0x4,%esp
f011e253:	68 93 a7 13 f0       	push   $0xf013a793
f011e258:	68 34 04 00 00       	push   $0x434
f011e25d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e262:	e8 3f 1f fe ff       	call   f01001a6 <_panic>

	//make memory holes
	freeFrames = sys_calculate_free_frames() ;
f011e267:	e8 64 de fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011e26c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames() ;
f011e26f:	e8 20 5a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011e274:	89 45 ec             	mov    %eax,-0x14(%ebp)

	kfree(ptr_allocations[0]);		//Hole 1 = 2 M
f011e277:	8b 85 b4 fb ff ff    	mov    -0x44c(%ebp),%eax
f011e27d:	83 ec 0c             	sub    $0xc,%esp
f011e280:	50                   	push   %eax
f011e281:	e8 78 91 fe ff       	call   f01073fe <kfree>
f011e286:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[2]);		//Hole 2 = 4 M
f011e289:	8b 85 bc fb ff ff    	mov    -0x444(%ebp),%eax
f011e28f:	83 ec 0c             	sub    $0xc,%esp
f011e292:	50                   	push   %eax
f011e293:	e8 66 91 fe ff       	call   f01073fe <kfree>
f011e298:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[3]);
f011e29b:	8b 85 c0 fb ff ff    	mov    -0x440(%ebp),%eax
f011e2a1:	83 ec 0c             	sub    $0xc,%esp
f011e2a4:	50                   	push   %eax
f011e2a5:	e8 54 91 fe ff       	call   f01073fe <kfree>
f011e2aa:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[10]);		//Hole 3 = 6 M
f011e2ad:	8b 85 dc fb ff ff    	mov    -0x424(%ebp),%eax
f011e2b3:	83 ec 0c             	sub    $0xc,%esp
f011e2b6:	50                   	push   %eax
f011e2b7:	e8 42 91 fe ff       	call   f01073fe <kfree>
f011e2bc:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[12]);
f011e2bf:	8b 85 e4 fb ff ff    	mov    -0x41c(%ebp),%eax
f011e2c5:	83 ec 0c             	sub    $0xc,%esp
f011e2c8:	50                   	push   %eax
f011e2c9:	e8 30 91 fe ff       	call   f01073fe <kfree>
f011e2ce:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[11]);
f011e2d1:	8b 85 e0 fb ff ff    	mov    -0x420(%ebp),%eax
f011e2d7:	83 ec 0c             	sub    $0xc,%esp
f011e2da:	50                   	push   %eax
f011e2db:	e8 1e 91 fe ff       	call   f01073fe <kfree>
f011e2e0:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[30]);		//Hole 4 = 10 M
f011e2e3:	8b 85 2c fc ff ff    	mov    -0x3d4(%ebp),%eax
f011e2e9:	83 ec 0c             	sub    $0xc,%esp
f011e2ec:	50                   	push   %eax
f011e2ed:	e8 0c 91 fe ff       	call   f01073fe <kfree>
f011e2f2:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[31]);
f011e2f5:	8b 85 30 fc ff ff    	mov    -0x3d0(%ebp),%eax
f011e2fb:	83 ec 0c             	sub    $0xc,%esp
f011e2fe:	50                   	push   %eax
f011e2ff:	e8 fa 90 fe ff       	call   f01073fe <kfree>
f011e304:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[32]);
f011e307:	8b 85 34 fc ff ff    	mov    -0x3cc(%ebp),%eax
f011e30d:	83 ec 0c             	sub    $0xc,%esp
f011e310:	50                   	push   %eax
f011e311:	e8 e8 90 fe ff       	call   f01073fe <kfree>
f011e316:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[33]);
f011e319:	8b 85 38 fc ff ff    	mov    -0x3c8(%ebp),%eax
f011e31f:	83 ec 0c             	sub    $0xc,%esp
f011e322:	50                   	push   %eax
f011e323:	e8 d6 90 fe ff       	call   f01073fe <kfree>
f011e328:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[34]);
f011e32b:	8b 85 3c fc ff ff    	mov    -0x3c4(%ebp),%eax
f011e331:	83 ec 0c             	sub    $0xc,%esp
f011e334:	50                   	push   %eax
f011e335:	e8 c4 90 fe ff       	call   f01073fe <kfree>
f011e33a:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[70]); 	//Hole 5 = 8 M
f011e33d:	8b 85 cc fc ff ff    	mov    -0x334(%ebp),%eax
f011e343:	83 ec 0c             	sub    $0xc,%esp
f011e346:	50                   	push   %eax
f011e347:	e8 b2 90 fe ff       	call   f01073fe <kfree>
f011e34c:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[71]);
f011e34f:	8b 85 d0 fc ff ff    	mov    -0x330(%ebp),%eax
f011e355:	83 ec 0c             	sub    $0xc,%esp
f011e358:	50                   	push   %eax
f011e359:	e8 a0 90 fe ff       	call   f01073fe <kfree>
f011e35e:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[72]);
f011e361:	8b 85 d4 fc ff ff    	mov    -0x32c(%ebp),%eax
f011e367:	83 ec 0c             	sub    $0xc,%esp
f011e36a:	50                   	push   %eax
f011e36b:	e8 8e 90 fe ff       	call   f01073fe <kfree>
f011e370:	83 c4 10             	add    $0x10,%esp
	kfree(ptr_allocations[73]);
f011e373:	8b 85 d8 fc ff ff    	mov    -0x328(%ebp),%eax
f011e379:	83 ec 0c             	sub    $0xc,%esp
f011e37c:	50                   	push   %eax
f011e37d:	e8 7c 90 fe ff       	call   f01073fe <kfree>
f011e382:	83 c4 10             	add    $0x10,%esp

	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e385:	e8 0a 59 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011e38a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e38d:	74 17                	je     f011e3a6 <test_kmalloc_worstfit+0x79d>
f011e38f:	83 ec 04             	sub    $0x4,%esp
f011e392:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011e397:	68 4a 04 00 00       	push   $0x44a
f011e39c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e3a1:	e8 00 1e fe ff       	call   f01001a6 <_panic>
	if ((sys_calculate_free_frames() - freeFrames) != ((15*2*Mega))/PAGE_SIZE) panic("Wrong free: Extra or less pages are removed from main memory");
f011e3a6:	e8 25 dd fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011e3ab:	89 c2                	mov    %eax,%edx
f011e3ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011e3b0:	29 c2                	sub    %eax,%edx
f011e3b2:	89 d0                	mov    %edx,%eax
f011e3b4:	3d 00 1e 00 00       	cmp    $0x1e00,%eax
f011e3b9:	74 17                	je     f011e3d2 <test_kmalloc_worstfit+0x7c9>
f011e3bb:	83 ec 04             	sub    $0x4,%esp
f011e3be:	68 a4 a7 13 f0       	push   $0xf013a7a4
f011e3c3:	68 4b 04 00 00       	push   $0x44b
f011e3c8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e3cd:	e8 d4 1d fe ff       	call   f01001a6 <_panic>

	// Test worst fit
	freeFrames = sys_calculate_free_frames() ;
f011e3d2:	e8 f9 dc fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011e3d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e3da:	e8 b5 58 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011e3df:	89 45 ec             	mov    %eax,-0x14(%ebp)
	void* tempAddress = kmalloc(Mega);		//Use Hole 4 -> Hole 4 = 9 M
f011e3e2:	83 ec 0c             	sub    $0xc,%esp
f011e3e5:	68 00 00 10 00       	push   $0x100000
f011e3ea:	e8 f5 8f fe ff       	call   f01073e4 <kmalloc>
f011e3ef:	83 c4 10             	add    $0x10,%esp
f011e3f2:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03C00000)
f011e3f8:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f011e3ff:	10 00 00 
f011e402:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011e408:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e40d:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f011e413:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e419:	ba 00 00 00 00       	mov    $0x0,%edx
f011e41e:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f011e424:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011e42a:	29 d0                	sub    %edx,%eax
f011e42c:	89 c1                	mov    %eax,%ecx
f011e42e:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f011e435:	10 00 00 
f011e438:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e43d:	0f b6 d0             	movzbl %al,%edx
f011e440:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011e446:	01 d0                	add    %edx,%eax
f011e448:	48                   	dec    %eax
f011e449:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f011e44f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e455:	ba 00 00 00 00       	mov    $0x0,%edx
f011e45a:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f011e460:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011e466:	29 d0                	sub    %edx,%eax
f011e468:	01 c1                	add    %eax,%ecx
f011e46a:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f011e471:	10 00 00 
f011e474:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e479:	0f b6 c0             	movzbl %al,%eax
f011e47c:	c1 e0 04             	shl    $0x4,%eax
f011e47f:	89 c2                	mov    %eax,%edx
f011e481:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011e487:	01 d0                	add    %edx,%eax
f011e489:	48                   	dec    %eax
f011e48a:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f011e490:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e496:	ba 00 00 00 00       	mov    $0x0,%edx
f011e49b:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f011e4a1:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011e4a7:	29 d0                	sub    %edx,%eax
f011e4a9:	01 c8                	add    %ecx,%eax
f011e4ab:	8d 90 00 40 c0 f9    	lea    -0x63fc000(%eax),%edx
f011e4b1:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e4b7:	39 c2                	cmp    %eax,%edx
f011e4b9:	74 17                	je     f011e4d2 <test_kmalloc_worstfit+0x8c9>
		panic("Worst Fit not working correctly");
f011e4bb:	83 ec 04             	sub    $0x4,%esp
f011e4be:	68 f0 ab 13 f0       	push   $0xf013abf0
f011e4c3:	68 52 04 00 00       	push   $0x452
f011e4c8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e4cd:	e8 d4 1c fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e4d2:	e8 bd 57 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011e4d7:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e4da:	74 17                	je     f011e4f3 <test_kmalloc_worstfit+0x8ea>
f011e4dc:	83 ec 04             	sub    $0x4,%esp
f011e4df:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011e4e4:	68 53 04 00 00       	push   $0x453
f011e4e9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e4ee:	e8 b3 1c fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  1*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e4f3:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e4f6:	e8 d5 db fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011e4fb:	29 c3                	sub    %eax,%ebx
f011e4fd:	89 d8                	mov    %ebx,%eax
f011e4ff:	3d 00 01 00 00       	cmp    $0x100,%eax
f011e504:	74 17                	je     f011e51d <test_kmalloc_worstfit+0x914>
f011e506:	83 ec 04             	sub    $0x4,%esp
f011e509:	68 0e aa 13 f0       	push   $0xf013aa0e
f011e50e:	68 54 04 00 00       	push   $0x454
f011e513:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e518:	e8 89 1c fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e51d:	ff 45 e8             	incl   -0x18(%ebp)
f011e520:	83 ec 08             	sub    $0x8,%esp
f011e523:	ff 75 e8             	pushl  -0x18(%ebp)
f011e526:	68 10 ac 13 f0       	push   $0xf013ac10
f011e52b:	e8 fd 26 fe ff       	call   f0100c2d <cprintf>
f011e530:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e533:	e8 98 db fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011e538:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e53b:	e8 54 57 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011e540:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4 * Mega);			//Use Hole 4 -> Hole 4 = 5 M
f011e543:	83 ec 0c             	sub    $0xc,%esp
f011e546:	68 00 00 40 00       	push   $0x400000
f011e54b:	e8 94 8e fe ff       	call   f01073e4 <kmalloc>
f011e550:	83 c4 10             	add    $0x10,%esp
f011e553:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x03D00000)
f011e559:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f011e560:	10 00 00 
f011e563:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011e569:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e56e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f011e574:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e57a:	ba 00 00 00 00       	mov    $0x0,%edx
f011e57f:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f011e585:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011e58b:	29 d0                	sub    %edx,%eax
f011e58d:	89 c1                	mov    %eax,%ecx
f011e58f:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f011e596:	10 00 00 
f011e599:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e59e:	0f b6 d0             	movzbl %al,%edx
f011e5a1:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f011e5a7:	01 d0                	add    %edx,%eax
f011e5a9:	48                   	dec    %eax
f011e5aa:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f011e5b0:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e5b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5bb:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f011e5c1:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f011e5c7:	29 d0                	sub    %edx,%eax
f011e5c9:	01 c1                	add    %eax,%ecx
f011e5cb:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f011e5d2:	10 00 00 
f011e5d5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e5da:	0f b6 c0             	movzbl %al,%eax
f011e5dd:	c1 e0 04             	shl    $0x4,%eax
f011e5e0:	89 c2                	mov    %eax,%edx
f011e5e2:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f011e5e8:	01 d0                	add    %edx,%eax
f011e5ea:	48                   	dec    %eax
f011e5eb:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f011e5f1:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e5f7:	ba 00 00 00 00       	mov    $0x0,%edx
f011e5fc:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f011e602:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f011e608:	29 d0                	sub    %edx,%eax
f011e60a:	01 c8                	add    %ecx,%eax
f011e60c:	8d 90 00 40 d0 f9    	lea    -0x62fc000(%eax),%edx
f011e612:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e618:	39 c2                	cmp    %eax,%edx
f011e61a:	74 17                	je     f011e633 <test_kmalloc_worstfit+0xa2a>
		panic("Worst Fit not working correctly");
f011e61c:	83 ec 04             	sub    $0x4,%esp
f011e61f:	68 f0 ab 13 f0       	push   $0xf013abf0
f011e624:	68 5b 04 00 00       	push   $0x45b
f011e629:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e62e:	e8 73 1b fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e633:	e8 5c 56 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011e638:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e63b:	74 17                	je     f011e654 <test_kmalloc_worstfit+0xa4b>
f011e63d:	83 ec 04             	sub    $0x4,%esp
f011e640:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011e645:	68 5c 04 00 00       	push   $0x45c
f011e64a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e64f:	e8 52 1b fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e654:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e657:	e8 74 da fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011e65c:	29 c3                	sub    %eax,%ebx
f011e65e:	89 d8                	mov    %ebx,%eax
f011e660:	3d 00 04 00 00       	cmp    $0x400,%eax
f011e665:	74 17                	je     f011e67e <test_kmalloc_worstfit+0xa75>
f011e667:	83 ec 04             	sub    $0x4,%esp
f011e66a:	68 0e aa 13 f0       	push   $0xf013aa0e
f011e66f:	68 5d 04 00 00       	push   $0x45d
f011e674:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e679:	e8 28 1b fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e67e:	ff 45 e8             	incl   -0x18(%ebp)
f011e681:	83 ec 08             	sub    $0x8,%esp
f011e684:	ff 75 e8             	pushl  -0x18(%ebp)
f011e687:	68 10 ac 13 f0       	push   $0xf013ac10
f011e68c:	e8 9c 25 fe ff       	call   f0100c2d <cprintf>
f011e691:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e694:	e8 37 da fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011e699:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e69c:	e8 f3 55 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011e6a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(6*Mega); 			   //Use Hole 5 -> Hole 5 = 2 M
f011e6a4:	83 ec 0c             	sub    $0xc,%esp
f011e6a7:	68 00 00 60 00       	push   $0x600000
f011e6ac:	e8 33 8d fe ff       	call   f01073e4 <kmalloc>
f011e6b1:	83 c4 10             	add    $0x10,%esp
f011e6b4:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x08C00000)
f011e6ba:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f011e6c1:	10 00 00 
f011e6c4:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f011e6ca:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e6cf:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f011e6d5:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e6db:	ba 00 00 00 00       	mov    $0x0,%edx
f011e6e0:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f011e6e6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f011e6ec:	29 d0                	sub    %edx,%eax
f011e6ee:	89 c1                	mov    %eax,%ecx
f011e6f0:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f011e6f7:	10 00 00 
f011e6fa:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e6ff:	0f b6 d0             	movzbl %al,%edx
f011e702:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f011e708:	01 d0                	add    %edx,%eax
f011e70a:	48                   	dec    %eax
f011e70b:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f011e711:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011e717:	ba 00 00 00 00       	mov    $0x0,%edx
f011e71c:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f011e722:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f011e728:	29 d0                	sub    %edx,%eax
f011e72a:	01 c1                	add    %eax,%ecx
f011e72c:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f011e733:	10 00 00 
f011e736:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e73b:	0f b6 c0             	movzbl %al,%eax
f011e73e:	c1 e0 04             	shl    $0x4,%eax
f011e741:	89 c2                	mov    %eax,%edx
f011e743:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f011e749:	01 d0                	add    %edx,%eax
f011e74b:	48                   	dec    %eax
f011e74c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f011e752:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011e758:	ba 00 00 00 00       	mov    $0x0,%edx
f011e75d:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f011e763:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f011e769:	29 d0                	sub    %edx,%eax
f011e76b:	01 c8                	add    %ecx,%eax
f011e76d:	8d 90 00 40 c0 fe    	lea    -0x13fc000(%eax),%edx
f011e773:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e779:	39 c2                	cmp    %eax,%edx
f011e77b:	74 17                	je     f011e794 <test_kmalloc_worstfit+0xb8b>
		panic("Worst Fit not working correctly");
f011e77d:	83 ec 04             	sub    $0x4,%esp
f011e780:	68 f0 ab 13 f0       	push   $0xf013abf0
f011e785:	68 64 04 00 00       	push   $0x464
f011e78a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e78f:	e8 12 1a fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e794:	e8 fb 54 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011e799:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e79c:	74 17                	je     f011e7b5 <test_kmalloc_worstfit+0xbac>
f011e79e:	83 ec 04             	sub    $0x4,%esp
f011e7a1:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011e7a6:	68 65 04 00 00       	push   $0x465
f011e7ab:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e7b0:	e8 f1 19 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  6*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e7b5:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e7b8:	e8 13 d9 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011e7bd:	29 c3                	sub    %eax,%ebx
f011e7bf:	89 d8                	mov    %ebx,%eax
f011e7c1:	3d 00 06 00 00       	cmp    $0x600,%eax
f011e7c6:	74 17                	je     f011e7df <test_kmalloc_worstfit+0xbd6>
f011e7c8:	83 ec 04             	sub    $0x4,%esp
f011e7cb:	68 0e aa 13 f0       	push   $0xf013aa0e
f011e7d0:	68 66 04 00 00       	push   $0x466
f011e7d5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e7da:	e8 c7 19 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e7df:	ff 45 e8             	incl   -0x18(%ebp)
f011e7e2:	83 ec 08             	sub    $0x8,%esp
f011e7e5:	ff 75 e8             	pushl  -0x18(%ebp)
f011e7e8:	68 10 ac 13 f0       	push   $0xf013ac10
f011e7ed:	e8 3b 24 fe ff       	call   f0100c2d <cprintf>
f011e7f2:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e7f5:	e8 d6 d8 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011e7fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e7fd:	e8 92 54 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011e802:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(5*Mega); 			   //Use Hole 3 -> Hole 3 = 1 M
f011e805:	83 ec 0c             	sub    $0xc,%esp
f011e808:	68 00 00 50 00       	push   $0x500000
f011e80d:	e8 d2 8b fe ff       	call   f01073e4 <kmalloc>
f011e812:	83 c4 10             	add    $0x10,%esp
f011e815:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x01400000)
f011e81b:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f011e822:	10 00 00 
f011e825:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f011e82b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e830:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f011e836:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011e83c:	ba 00 00 00 00       	mov    $0x0,%edx
f011e841:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f011e847:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f011e84d:	29 d0                	sub    %edx,%eax
f011e84f:	89 c1                	mov    %eax,%ecx
f011e851:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f011e858:	10 00 00 
f011e85b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e860:	0f b6 d0             	movzbl %al,%edx
f011e863:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f011e869:	01 d0                	add    %edx,%eax
f011e86b:	48                   	dec    %eax
f011e86c:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f011e872:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011e878:	ba 00 00 00 00       	mov    $0x0,%edx
f011e87d:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f011e883:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f011e889:	29 d0                	sub    %edx,%eax
f011e88b:	01 c1                	add    %eax,%ecx
f011e88d:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f011e894:	10 00 00 
f011e897:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e89c:	0f b6 c0             	movzbl %al,%eax
f011e89f:	c1 e0 04             	shl    $0x4,%eax
f011e8a2:	89 c2                	mov    %eax,%edx
f011e8a4:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f011e8aa:	01 d0                	add    %edx,%eax
f011e8ac:	48                   	dec    %eax
f011e8ad:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f011e8b3:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011e8b9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e8be:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f011e8c4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f011e8ca:	29 d0                	sub    %edx,%eax
f011e8cc:	01 c8                	add    %ecx,%eax
f011e8ce:	8d 90 00 40 40 f7    	lea    -0x8bfc000(%eax),%edx
f011e8d4:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011e8da:	39 c2                	cmp    %eax,%edx
f011e8dc:	74 17                	je     f011e8f5 <test_kmalloc_worstfit+0xcec>
		panic("Worst Fit not working correctly");
f011e8de:	83 ec 04             	sub    $0x4,%esp
f011e8e1:	68 f0 ab 13 f0       	push   $0xf013abf0
f011e8e6:	68 6d 04 00 00       	push   $0x46d
f011e8eb:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e8f0:	e8 b1 18 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011e8f5:	e8 9a 53 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011e8fa:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011e8fd:	74 17                	je     f011e916 <test_kmalloc_worstfit+0xd0d>
f011e8ff:	83 ec 04             	sub    $0x4,%esp
f011e902:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011e907:	68 6e 04 00 00       	push   $0x46e
f011e90c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e911:	e8 90 18 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  5*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011e916:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011e919:	e8 b2 d7 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011e91e:	29 c3                	sub    %eax,%ebx
f011e920:	89 d8                	mov    %ebx,%eax
f011e922:	3d 00 05 00 00       	cmp    $0x500,%eax
f011e927:	74 17                	je     f011e940 <test_kmalloc_worstfit+0xd37>
f011e929:	83 ec 04             	sub    $0x4,%esp
f011e92c:	68 0e aa 13 f0       	push   $0xf013aa0e
f011e931:	68 6f 04 00 00       	push   $0x46f
f011e936:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011e93b:	e8 66 18 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011e940:	ff 45 e8             	incl   -0x18(%ebp)
f011e943:	83 ec 08             	sub    $0x8,%esp
f011e946:	ff 75 e8             	pushl  -0x18(%ebp)
f011e949:	68 10 ac 13 f0       	push   $0xf013ac10
f011e94e:	e8 da 22 fe ff       	call   f0100c2d <cprintf>
f011e953:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011e956:	e8 75 d7 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011e95b:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011e95e:	e8 31 53 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011e963:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 			   // Use Hole 4 -> Hole 4 = 1 M
f011e966:	83 ec 0c             	sub    $0xc,%esp
f011e969:	68 00 00 40 00       	push   $0x400000
f011e96e:	e8 71 8a fe ff       	call   f01073e4 <kmalloc>
f011e973:	83 c4 10             	add    $0x10,%esp
f011e976:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x04100000)
f011e97c:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f011e983:	10 00 00 
f011e986:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f011e98c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011e991:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f011e997:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e99d:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9a2:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f011e9a8:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f011e9ae:	29 d0                	sub    %edx,%eax
f011e9b0:	89 c1                	mov    %eax,%ecx
f011e9b2:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f011e9b9:	10 00 00 
f011e9bc:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e9c1:	0f b6 d0             	movzbl %al,%edx
f011e9c4:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f011e9ca:	01 d0                	add    %edx,%eax
f011e9cc:	48                   	dec    %eax
f011e9cd:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f011e9d3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e9d9:	ba 00 00 00 00       	mov    $0x0,%edx
f011e9de:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f011e9e4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f011e9ea:	29 d0                	sub    %edx,%eax
f011e9ec:	01 c1                	add    %eax,%ecx
f011e9ee:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f011e9f5:	10 00 00 
f011e9f8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011e9fd:	0f b6 c0             	movzbl %al,%eax
f011ea00:	c1 e0 04             	shl    $0x4,%eax
f011ea03:	89 c2                	mov    %eax,%edx
f011ea05:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f011ea0b:	01 d0                	add    %edx,%eax
f011ea0d:	48                   	dec    %eax
f011ea0e:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f011ea14:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011ea1a:	ba 00 00 00 00       	mov    $0x0,%edx
f011ea1f:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f011ea25:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f011ea2b:	29 d0                	sub    %edx,%eax
f011ea2d:	01 c8                	add    %ecx,%eax
f011ea2f:	8d 90 00 40 10 fa    	lea    -0x5efc000(%eax),%edx
f011ea35:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ea3b:	39 c2                	cmp    %eax,%edx
f011ea3d:	74 17                	je     f011ea56 <test_kmalloc_worstfit+0xe4d>
		panic("Worst Fit not working correctly");
f011ea3f:	83 ec 04             	sub    $0x4,%esp
f011ea42:	68 f0 ab 13 f0       	push   $0xf013abf0
f011ea47:	68 76 04 00 00       	push   $0x476
f011ea4c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ea51:	e8 50 17 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ea56:	e8 39 52 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ea5b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ea5e:	74 17                	je     f011ea77 <test_kmalloc_worstfit+0xe6e>
f011ea60:	83 ec 04             	sub    $0x4,%esp
f011ea63:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011ea68:	68 77 04 00 00       	push   $0x477
f011ea6d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ea72:	e8 2f 17 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  4*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ea77:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ea7a:	e8 51 d6 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ea7f:	29 c3                	sub    %eax,%ebx
f011ea81:	89 d8                	mov    %ebx,%eax
f011ea83:	3d 00 04 00 00       	cmp    $0x400,%eax
f011ea88:	74 17                	je     f011eaa1 <test_kmalloc_worstfit+0xe98>
f011ea8a:	83 ec 04             	sub    $0x4,%esp
f011ea8d:	68 0e aa 13 f0       	push   $0xf013aa0e
f011ea92:	68 78 04 00 00       	push   $0x478
f011ea97:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ea9c:	e8 05 17 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eaa1:	ff 45 e8             	incl   -0x18(%ebp)
f011eaa4:	83 ec 08             	sub    $0x8,%esp
f011eaa7:	ff 75 e8             	pushl  -0x18(%ebp)
f011eaaa:	68 10 ac 13 f0       	push   $0xf013ac10
f011eaaf:	e8 79 21 fe ff       	call   f0100c2d <cprintf>
f011eab4:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eab7:	e8 14 d6 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011eabc:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eabf:	e8 d0 51 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011eac4:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2 * Mega); 			// Use Hole 2 -> Hole 2 = 2 M
f011eac7:	83 ec 0c             	sub    $0xc,%esp
f011eaca:	68 00 00 20 00       	push   $0x200000
f011eacf:	e8 10 89 fe ff       	call   f01073e4 <kmalloc>
f011ead4:	83 c4 10             	add    $0x10,%esp
f011ead7:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00400000)
f011eadd:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f011eae4:	10 00 00 
f011eae7:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f011eaed:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011eaf2:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f011eaf8:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011eafe:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb03:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f011eb09:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f011eb0f:	29 d0                	sub    %edx,%eax
f011eb11:	89 c1                	mov    %eax,%ecx
f011eb13:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f011eb1a:	10 00 00 
f011eb1d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011eb22:	0f b6 d0             	movzbl %al,%edx
f011eb25:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f011eb2b:	01 d0                	add    %edx,%eax
f011eb2d:	48                   	dec    %eax
f011eb2e:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f011eb34:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011eb3a:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb3f:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f011eb45:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f011eb4b:	29 d0                	sub    %edx,%eax
f011eb4d:	01 c1                	add    %eax,%ecx
f011eb4f:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f011eb56:	10 00 00 
f011eb59:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011eb5e:	0f b6 c0             	movzbl %al,%eax
f011eb61:	c1 e0 04             	shl    $0x4,%eax
f011eb64:	89 c2                	mov    %eax,%edx
f011eb66:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f011eb6c:	01 d0                	add    %edx,%eax
f011eb6e:	48                   	dec    %eax
f011eb6f:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f011eb75:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011eb7b:	ba 00 00 00 00       	mov    $0x0,%edx
f011eb80:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f011eb86:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f011eb8c:	29 d0                	sub    %edx,%eax
f011eb8e:	01 c8                	add    %ecx,%eax
f011eb90:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f011eb96:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011eb9c:	39 c2                	cmp    %eax,%edx
f011eb9e:	74 17                	je     f011ebb7 <test_kmalloc_worstfit+0xfae>
		panic("Worst Fit not working correctly");
f011eba0:	83 ec 04             	sub    $0x4,%esp
f011eba3:	68 f0 ab 13 f0       	push   $0xf013abf0
f011eba8:	68 7f 04 00 00       	push   $0x47f
f011ebad:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ebb2:	e8 ef 15 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ebb7:	e8 d8 50 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ebbc:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ebbf:	74 17                	je     f011ebd8 <test_kmalloc_worstfit+0xfcf>
f011ebc1:	83 ec 04             	sub    $0x4,%esp
f011ebc4:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011ebc9:	68 80 04 00 00       	push   $0x480
f011ebce:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ebd3:	e8 ce 15 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  2*Mega/PAGE_SIZE) panic("Wrong allocation:");
f011ebd8:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ebdb:	e8 f0 d4 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ebe0:	29 c3                	sub    %eax,%ebx
f011ebe2:	89 d8                	mov    %ebx,%eax
f011ebe4:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ebe9:	74 17                	je     f011ec02 <test_kmalloc_worstfit+0xff9>
f011ebeb:	83 ec 04             	sub    $0x4,%esp
f011ebee:	68 0e aa 13 f0       	push   $0xf013aa0e
f011ebf3:	68 81 04 00 00       	push   $0x481
f011ebf8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ebfd:	e8 a4 15 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ec02:	ff 45 e8             	incl   -0x18(%ebp)
f011ec05:	83 ec 08             	sub    $0x8,%esp
f011ec08:	ff 75 e8             	pushl  -0x18(%ebp)
f011ec0b:	68 10 ac 13 f0       	push   $0xf013ac10
f011ec10:	e8 18 20 fe ff       	call   f0100c2d <cprintf>
f011ec15:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ec18:	e8 b3 d4 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ec1d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ec20:	e8 6f 50 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ec25:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(1*Mega + 512*kilo);    // Use Hole 1 -> Hole 1 = 0.5 M
f011ec28:	83 ec 0c             	sub    $0xc,%esp
f011ec2b:	68 00 00 18 00       	push   $0x180000
f011ec30:	e8 af 87 fe ff       	call   f01073e4 <kmalloc>
f011ec35:	83 c4 10             	add    $0x10,%esp
f011ec38:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START)
f011ec3e:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f011ec45:	10 00 00 
f011ec48:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f011ec4e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ec53:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f011ec59:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011ec5f:	ba 00 00 00 00       	mov    $0x0,%edx
f011ec64:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f011ec6a:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f011ec70:	29 d0                	sub    %edx,%eax
f011ec72:	89 c1                	mov    %eax,%ecx
f011ec74:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f011ec7b:	10 00 00 
f011ec7e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ec83:	0f b6 d0             	movzbl %al,%edx
f011ec86:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f011ec8c:	01 d0                	add    %edx,%eax
f011ec8e:	48                   	dec    %eax
f011ec8f:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f011ec95:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ec9b:	ba 00 00 00 00       	mov    $0x0,%edx
f011eca0:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f011eca6:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f011ecac:	29 d0                	sub    %edx,%eax
f011ecae:	01 c1                	add    %eax,%ecx
f011ecb0:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f011ecb7:	10 00 00 
f011ecba:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ecbf:	0f b6 c0             	movzbl %al,%eax
f011ecc2:	c1 e0 04             	shl    $0x4,%eax
f011ecc5:	89 c2                	mov    %eax,%edx
f011ecc7:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f011eccd:	01 d0                	add    %edx,%eax
f011eccf:	48                   	dec    %eax
f011ecd0:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f011ecd6:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011ecdc:	ba 00 00 00 00       	mov    $0x0,%edx
f011ece1:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f011ece7:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f011eced:	29 d0                	sub    %edx,%eax
f011ecef:	01 c8                	add    %ecx,%eax
f011ecf1:	8d 90 00 40 00 f6    	lea    -0x9ffc000(%eax),%edx
f011ecf7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ecfd:	39 c2                	cmp    %eax,%edx
f011ecff:	74 17                	je     f011ed18 <test_kmalloc_worstfit+0x110f>
		panic("Worst Fit not working correctly");
f011ed01:	83 ec 04             	sub    $0x4,%esp
f011ed04:	68 f0 ab 13 f0       	push   $0xf013abf0
f011ed09:	68 88 04 00 00       	push   $0x488
f011ed0e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ed13:	e8 8e 14 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ed18:	e8 77 4f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ed1d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ed20:	74 17                	je     f011ed39 <test_kmalloc_worstfit+0x1130>
f011ed22:	83 ec 04             	sub    $0x4,%esp
f011ed25:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011ed2a:	68 89 04 00 00       	push   $0x489
f011ed2f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ed34:	e8 6d 14 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (1*Mega + 512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011ed39:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ed3c:	e8 8f d3 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ed41:	29 c3                	sub    %eax,%ebx
f011ed43:	89 d8                	mov    %ebx,%eax
f011ed45:	3d 80 01 00 00       	cmp    $0x180,%eax
f011ed4a:	74 17                	je     f011ed63 <test_kmalloc_worstfit+0x115a>
f011ed4c:	83 ec 04             	sub    $0x4,%esp
f011ed4f:	68 0e aa 13 f0       	push   $0xf013aa0e
f011ed54:	68 8a 04 00 00       	push   $0x48a
f011ed59:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ed5e:	e8 43 14 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011ed63:	ff 45 e8             	incl   -0x18(%ebp)
f011ed66:	83 ec 08             	sub    $0x8,%esp
f011ed69:	ff 75 e8             	pushl  -0x18(%ebp)
f011ed6c:	68 10 ac 13 f0       	push   $0xf013ac10
f011ed71:	e8 b7 1e fe ff       	call   f0100c2d <cprintf>
f011ed76:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011ed79:	e8 52 d3 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ed7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011ed81:	e8 0e 4f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ed86:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(512*kilo); 			   // Use Hole 2 -> Hole 2 = 1.5 M
f011ed89:	83 ec 0c             	sub    $0xc,%esp
f011ed8c:	68 00 00 08 00       	push   $0x80000
f011ed91:	e8 4e 86 fe ff       	call   f01073e4 <kmalloc>
f011ed96:	83 c4 10             	add    $0x10,%esp
f011ed99:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x00600000)
f011ed9f:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f011eda6:	10 00 00 
f011eda9:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f011edaf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011edb4:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f011edba:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011edc0:	ba 00 00 00 00       	mov    $0x0,%edx
f011edc5:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f011edcb:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f011edd1:	29 d0                	sub    %edx,%eax
f011edd3:	89 c1                	mov    %eax,%ecx
f011edd5:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f011eddc:	10 00 00 
f011eddf:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ede4:	0f b6 d0             	movzbl %al,%edx
f011ede7:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f011eded:	01 d0                	add    %edx,%eax
f011edef:	48                   	dec    %eax
f011edf0:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f011edf6:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011edfc:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee01:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f011ee07:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f011ee0d:	29 d0                	sub    %edx,%eax
f011ee0f:	01 c1                	add    %eax,%ecx
f011ee11:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f011ee18:	10 00 00 
f011ee1b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ee20:	0f b6 c0             	movzbl %al,%eax
f011ee23:	c1 e0 04             	shl    $0x4,%eax
f011ee26:	89 c2                	mov    %eax,%edx
f011ee28:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f011ee2e:	01 d0                	add    %edx,%eax
f011ee30:	48                   	dec    %eax
f011ee31:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f011ee37:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011ee3d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ee42:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f011ee48:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f011ee4e:	29 d0                	sub    %edx,%eax
f011ee50:	01 c8                	add    %ecx,%eax
f011ee52:	8d 90 00 40 60 f6    	lea    -0x99fc000(%eax),%edx
f011ee58:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011ee5e:	39 c2                	cmp    %eax,%edx
f011ee60:	74 17                	je     f011ee79 <test_kmalloc_worstfit+0x1270>
		panic("Worst Fit not working correctly");
f011ee62:	83 ec 04             	sub    $0x4,%esp
f011ee65:	68 f0 ab 13 f0       	push   $0xf013abf0
f011ee6a:	68 91 04 00 00       	push   $0x491
f011ee6f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ee74:	e8 2d 13 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ee79:	e8 16 4e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ee7e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011ee81:	74 17                	je     f011ee9a <test_kmalloc_worstfit+0x1291>
f011ee83:	83 ec 04             	sub    $0x4,%esp
f011ee86:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011ee8b:	68 92 04 00 00       	push   $0x492
f011ee90:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ee95:	e8 0c 13 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (512*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011ee9a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011ee9d:	e8 2e d2 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011eea2:	29 c3                	sub    %eax,%ebx
f011eea4:	89 d8                	mov    %ebx,%eax
f011eea6:	3d 80 00 00 00       	cmp    $0x80,%eax
f011eeab:	74 17                	je     f011eec4 <test_kmalloc_worstfit+0x12bb>
f011eead:	83 ec 04             	sub    $0x4,%esp
f011eeb0:	68 0e aa 13 f0       	push   $0xf013aa0e
f011eeb5:	68 93 04 00 00       	push   $0x493
f011eeba:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011eebf:	e8 e2 12 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011eec4:	ff 45 e8             	incl   -0x18(%ebp)
f011eec7:	83 ec 08             	sub    $0x8,%esp
f011eeca:	ff 75 e8             	pushl  -0x18(%ebp)
f011eecd:	68 10 ac 13 f0       	push   $0xf013ac10
f011eed2:	e8 56 1d fe ff       	call   f0100c2d <cprintf>
f011eed7:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011eeda:	e8 f1 d1 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011eedf:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011eee2:	e8 ad 4d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011eee7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(kilo); 			   // Use Hole 5 -> Hole 5 = 2 M - K
f011eeea:	83 ec 0c             	sub    $0xc,%esp
f011eeed:	68 00 04 00 00       	push   $0x400
f011eef2:	e8 ed 84 fe ff       	call   f01073e4 <kmalloc>
f011eef7:	83 c4 10             	add    $0x10,%esp
f011eefa:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09200000)
f011ef00:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f011ef07:	10 00 00 
f011ef0a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f011ef10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011ef15:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f011ef1b:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011ef21:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef26:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f011ef2c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f011ef32:	29 d0                	sub    %edx,%eax
f011ef34:	89 c1                	mov    %eax,%ecx
f011ef36:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f011ef3d:	10 00 00 
f011ef40:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ef45:	0f b6 d0             	movzbl %al,%edx
f011ef48:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f011ef4e:	01 d0                	add    %edx,%eax
f011ef50:	48                   	dec    %eax
f011ef51:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f011ef57:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011ef5d:	ba 00 00 00 00       	mov    $0x0,%edx
f011ef62:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f011ef68:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f011ef6e:	29 d0                	sub    %edx,%eax
f011ef70:	01 c1                	add    %eax,%ecx
f011ef72:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f011ef79:	10 00 00 
f011ef7c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011ef81:	0f b6 c0             	movzbl %al,%eax
f011ef84:	c1 e0 04             	shl    $0x4,%eax
f011ef87:	89 c2                	mov    %eax,%edx
f011ef89:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f011ef8f:	01 d0                	add    %edx,%eax
f011ef91:	48                   	dec    %eax
f011ef92:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f011ef98:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011ef9e:	ba 00 00 00 00       	mov    $0x0,%edx
f011efa3:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f011efa9:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f011efaf:	29 d0                	sub    %edx,%eax
f011efb1:	01 c8                	add    %ecx,%eax
f011efb3:	8d 90 00 40 20 ff    	lea    -0xdfc000(%eax),%edx
f011efb9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011efbf:	39 c2                	cmp    %eax,%edx
f011efc1:	74 17                	je     f011efda <test_kmalloc_worstfit+0x13d1>
		panic("Worst Fit not working correctly");
f011efc3:	83 ec 04             	sub    $0x4,%esp
f011efc6:	68 f0 ab 13 f0       	push   $0xf013abf0
f011efcb:	68 9a 04 00 00       	push   $0x49a
f011efd0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011efd5:	e8 cc 11 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011efda:	e8 b5 4c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011efdf:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011efe2:	74 17                	je     f011effb <test_kmalloc_worstfit+0x13f2>
f011efe4:	83 ec 04             	sub    $0x4,%esp
f011efe7:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011efec:	68 9b 04 00 00       	push   $0x49b
f011eff1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011eff6:	e8 ab 11 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011effb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011effe:	e8 cd d0 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f003:	29 c3                	sub    %eax,%ebx
f011f005:	89 d8                	mov    %ebx,%eax
f011f007:	83 f8 01             	cmp    $0x1,%eax
f011f00a:	74 17                	je     f011f023 <test_kmalloc_worstfit+0x141a>
f011f00c:	83 ec 04             	sub    $0x4,%esp
f011f00f:	68 0e aa 13 f0       	push   $0xf013aa0e
f011f014:	68 9c 04 00 00       	push   $0x49c
f011f019:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f01e:	e8 83 11 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f023:	ff 45 e8             	incl   -0x18(%ebp)
f011f026:	83 ec 08             	sub    $0x8,%esp
f011f029:	ff 75 e8             	pushl  -0x18(%ebp)
f011f02c:	68 10 ac 13 f0       	push   $0xf013ac10
f011f031:	e8 f7 1b fe ff       	call   f0100c2d <cprintf>
f011f036:	83 c4 10             	add    $0x10,%esp

	freeFrames = sys_calculate_free_frames() ;
f011f039:	e8 92 d0 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f03e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f041:	e8 4e 4c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f046:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(2*Mega - 4*kilo); 		// Use Hole 5 -> Hole 5 = 0
f011f049:	83 ec 0c             	sub    $0xc,%esp
f011f04c:	68 00 f0 1f 00       	push   $0x1ff000
f011f051:	e8 8e 83 fe ff       	call   f01073e4 <kmalloc>
f011f056:	83 c4 10             	add    $0x10,%esp
f011f059:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != ACTUAL_START + 0x09201000)
f011f05f:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f011f066:	10 00 00 
f011f069:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f011f06f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f074:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f011f07a:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f080:	ba 00 00 00 00       	mov    $0x0,%edx
f011f085:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f011f08b:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f011f091:	29 d0                	sub    %edx,%eax
f011f093:	89 c1                	mov    %eax,%ecx
f011f095:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f011f09c:	10 00 00 
f011f09f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f0a4:	0f b6 d0             	movzbl %al,%edx
f011f0a7:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f011f0ad:	01 d0                	add    %edx,%eax
f011f0af:	48                   	dec    %eax
f011f0b0:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f011f0b6:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f0bc:	ba 00 00 00 00       	mov    $0x0,%edx
f011f0c1:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f011f0c7:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f011f0cd:	29 d0                	sub    %edx,%eax
f011f0cf:	01 c1                	add    %eax,%ecx
f011f0d1:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f011f0d8:	10 00 00 
f011f0db:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f0e0:	0f b6 c0             	movzbl %al,%eax
f011f0e3:	c1 e0 04             	shl    $0x4,%eax
f011f0e6:	89 c2                	mov    %eax,%edx
f011f0e8:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f011f0ee:	01 d0                	add    %edx,%eax
f011f0f0:	48                   	dec    %eax
f011f0f1:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f011f0f7:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f0fd:	ba 00 00 00 00       	mov    $0x0,%edx
f011f102:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f011f108:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f011f10e:	29 d0                	sub    %edx,%eax
f011f110:	01 c8                	add    %ecx,%eax
f011f112:	8d 90 00 50 20 ff    	lea    -0xdfb000(%eax),%edx
f011f118:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f11e:	39 c2                	cmp    %eax,%edx
f011f120:	74 17                	je     f011f139 <test_kmalloc_worstfit+0x1530>
		panic("Worst Fit not working correctly");
f011f122:	83 ec 04             	sub    $0x4,%esp
f011f125:	68 f0 ab 13 f0       	push   $0xf013abf0
f011f12a:	68 a3 04 00 00       	push   $0x4a3
f011f12f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f134:	e8 6d 10 fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f139:	e8 56 4b fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f13e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f141:	74 17                	je     f011f15a <test_kmalloc_worstfit+0x1551>
f011f143:	83 ec 04             	sub    $0x4,%esp
f011f146:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011f14b:	68 a4 04 00 00       	push   $0x4a4
f011f150:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f155:	e8 4c 10 fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  (2*Mega - 4*kilo)/PAGE_SIZE) panic("Wrong allocation:");
f011f15a:	8b 5d f0             	mov    -0x10(%ebp),%ebx
f011f15d:	e8 6e cf fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f162:	29 c3                	sub    %eax,%ebx
f011f164:	89 d8                	mov    %ebx,%eax
f011f166:	3d ff 01 00 00       	cmp    $0x1ff,%eax
f011f16b:	74 17                	je     f011f184 <test_kmalloc_worstfit+0x157b>
f011f16d:	83 ec 04             	sub    $0x4,%esp
f011f170:	68 0e aa 13 f0       	push   $0xf013aa0e
f011f175:	68 a5 04 00 00       	push   $0x4a5
f011f17a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f17f:	e8 22 10 fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f184:	ff 45 e8             	incl   -0x18(%ebp)
f011f187:	83 ec 08             	sub    $0x8,%esp
f011f18a:	ff 75 e8             	pushl  -0x18(%ebp)
f011f18d:	68 10 ac 13 f0       	push   $0xf013ac10
f011f192:	e8 96 1a fe ff       	call   f0100c2d <cprintf>
f011f197:	83 c4 10             	add    $0x10,%esp

	// Check that worst fit returns null in case all holes are not free
	freeFrames = sys_calculate_free_frames() ;
f011f19a:	e8 31 cf fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f19f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	freeDiskFrames = pf_calculate_free_frames();
f011f1a2:	e8 ed 4a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f1a7:	89 45 ec             	mov    %eax,-0x14(%ebp)
	tempAddress = kmalloc(4*Mega); 		//No Suitable hole
f011f1aa:	83 ec 0c             	sub    $0xc,%esp
f011f1ad:	68 00 00 40 00       	push   $0x400000
f011f1b2:	e8 2d 82 fe ff       	call   f01073e4 <kmalloc>
f011f1b7:	83 c4 10             	add    $0x10,%esp
f011f1ba:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
	if((uint32)tempAddress != 0x0)
f011f1c0:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011f1c6:	85 c0                	test   %eax,%eax
f011f1c8:	74 17                	je     f011f1e1 <test_kmalloc_worstfit+0x15d8>
		panic("Worst Fit not working correctly");
f011f1ca:	83 ec 04             	sub    $0x4,%esp
f011f1cd:	68 f0 ab 13 f0       	push   $0xf013abf0
f011f1d2:	68 ad 04 00 00       	push   $0x4ad
f011f1d7:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f1dc:	e8 c5 0f fe ff       	call   f01001a6 <_panic>
	if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f1e1:	e8 ae 4a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f1e6:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f011f1e9:	74 17                	je     f011f202 <test_kmalloc_worstfit+0x15f9>
f011f1eb:	83 ec 04             	sub    $0x4,%esp
f011f1ee:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011f1f3:	68 ae 04 00 00       	push   $0x4ae
f011f1f8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f1fd:	e8 a4 0f fe ff       	call   f01001a6 <_panic>
	if ((freeFrames - sys_calculate_free_frames()) !=  0) panic("Wrong allocation:");
f011f202:	e8 c9 ce fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f207:	89 c2                	mov    %eax,%edx
f011f209:	8b 45 f0             	mov    -0x10(%ebp),%eax
f011f20c:	39 c2                	cmp    %eax,%edx
f011f20e:	74 17                	je     f011f227 <test_kmalloc_worstfit+0x161e>
f011f210:	83 ec 04             	sub    $0x4,%esp
f011f213:	68 0e aa 13 f0       	push   $0xf013aa0e
f011f218:	68 af 04 00 00       	push   $0x4af
f011f21d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f222:	e8 7f 0f fe ff       	call   f01001a6 <_panic>
	cprintf("Test %d Passed \n", ++count);
f011f227:	ff 45 e8             	incl   -0x18(%ebp)
f011f22a:	83 ec 08             	sub    $0x8,%esp
f011f22d:	ff 75 e8             	pushl  -0x18(%ebp)
f011f230:	68 10 ac 13 f0       	push   $0xf013ac10
f011f235:	e8 f3 19 fe ff       	call   f0100c2d <cprintf>
f011f23a:	83 c4 10             	add    $0x10,%esp

	cprintf("Congratulations!! test Worst Fit completed successfully.\n");
f011f23d:	83 ec 0c             	sub    $0xc,%esp
f011f240:	68 24 ac 13 f0       	push   $0xf013ac24
f011f245:	e8 e3 19 fe ff       	call   f0100c2d <cprintf>
f011f24a:	83 c4 10             	add    $0x10,%esp


	return 1;
f011f24d:	b8 01 00 00 00       	mov    $0x1,%eax
}
f011f252:	8d 65 f8             	lea    -0x8(%ebp),%esp
f011f255:	5b                   	pop    %ebx
f011f256:	5f                   	pop    %edi
f011f257:	5d                   	pop    %ebp
f011f258:	c3                   	ret    

f011f259 <test_kfree>:

int test_kfree()
{
f011f259:	55                   	push   %ebp
f011f25a:	89 e5                	mov    %esp,%ebp
f011f25c:	57                   	push   %edi
f011f25d:	53                   	push   %ebx
f011f25e:	81 ec c0 02 00 00    	sub    $0x2c0,%esp
	cprintf("==============================================\n");
f011f264:	83 ec 0c             	sub    $0xc,%esp
f011f267:	68 18 a4 13 f0       	push   $0xf013a418
f011f26c:	e8 bc 19 fe ff       	call   f0100c2d <cprintf>
f011f271:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f011f274:	83 ec 0c             	sub    $0xc,%esp
f011f277:	68 48 a4 13 f0       	push   $0xf013a448
f011f27c:	e8 ac 19 fe ff       	call   f0100c2d <cprintf>
f011f281:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f011f284:	83 ec 0c             	sub    $0xc,%esp
f011f287:	68 18 a4 13 f0       	push   $0xf013a418
f011f28c:	e8 9c 19 fe ff       	call   f0100c2d <cprintf>
f011f291:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f011f294:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f011f298:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f011f29c:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f011f2a2:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f011f2a8:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f011f2af:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f011f2b6:	e8 15 ce fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f2bb:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f011f2be:	8d 95 e8 fd ff ff    	lea    -0x218(%ebp),%edx
f011f2c4:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f2c9:	b8 00 00 00 00       	mov    $0x0,%eax
f011f2ce:	89 d7                	mov    %edx,%edi
f011f2d0:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f011f2d2:	8d 95 98 fd ff ff    	lea    -0x268(%ebp),%edx
f011f2d8:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f2dd:	b8 00 00 00 00       	mov    $0x0,%eax
f011f2e2:	89 d7                	mov    %edx,%edi
f011f2e4:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f011f2e6:	8d 95 48 fd ff ff    	lea    -0x2b8(%ebp),%edx
f011f2ec:	b9 14 00 00 00       	mov    $0x14,%ecx
f011f2f1:	b8 00 00 00 00       	mov    $0x0,%eax
f011f2f6:	89 d7                	mov    %edx,%edi
f011f2f8:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f2fa:	e8 d1 cd fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f2ff:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f302:	e8 8d 49 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f307:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f011f30a:	83 ec 0c             	sub    $0xc,%esp
f011f30d:	68 00 fc 1f 00       	push   $0x1ffc00
f011f312:	e8 cd 80 fe ff       	call   f01073e4 <kmalloc>
f011f317:	83 c4 10             	add    $0x10,%esp
f011f31a:	89 85 48 fd ff ff    	mov    %eax,-0x2b8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f320:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011f326:	89 c1                	mov    %eax,%ecx
f011f328:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f011f32f:	8b 45 c8             	mov    -0x38(%ebp),%eax
f011f332:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f337:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f011f33a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f33d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f342:	f7 75 c8             	divl   -0x38(%ebp)
f011f345:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f011f348:	29 d0                	sub    %edx,%eax
f011f34a:	89 c3                	mov    %eax,%ebx
f011f34c:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f011f353:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f358:	0f b6 d0             	movzbl %al,%edx
f011f35b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f011f35e:	01 d0                	add    %edx,%eax
f011f360:	48                   	dec    %eax
f011f361:	89 45 bc             	mov    %eax,-0x44(%ebp)
f011f364:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f367:	ba 00 00 00 00       	mov    $0x0,%edx
f011f36c:	f7 75 c0             	divl   -0x40(%ebp)
f011f36f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f011f372:	29 d0                	sub    %edx,%eax
f011f374:	01 c3                	add    %eax,%ebx
f011f376:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f011f37d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f382:	0f b6 c0             	movzbl %al,%eax
f011f385:	c1 e0 04             	shl    $0x4,%eax
f011f388:	89 c2                	mov    %eax,%edx
f011f38a:	8b 45 b8             	mov    -0x48(%ebp),%eax
f011f38d:	01 d0                	add    %edx,%eax
f011f38f:	48                   	dec    %eax
f011f390:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f011f393:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f396:	ba 00 00 00 00       	mov    $0x0,%edx
f011f39b:	f7 75 b8             	divl   -0x48(%ebp)
f011f39e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f011f3a1:	29 d0                	sub    %edx,%eax
f011f3a3:	01 d8                	add    %ebx,%eax
f011f3a5:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f011f3aa:	39 c1                	cmp    %eax,%ecx
f011f3ac:	74 17                	je     f011f3c5 <test_kfree+0x16c>
f011f3ae:	83 ec 04             	sub    $0x4,%esp
f011f3b1:	68 bc a5 13 f0       	push   $0xf013a5bc
f011f3b6:	68 d7 04 00 00       	push   $0x4d7
f011f3bb:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f3c0:	e8 e1 0d fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f3c5:	e8 ca 48 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f3ca:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f3cd:	74 17                	je     f011f3e6 <test_kfree+0x18d>
f011f3cf:	83 ec 04             	sub    $0x4,%esp
f011f3d2:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011f3d7:	68 d8 04 00 00       	push   $0x4d8
f011f3dc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f3e1:	e8 c0 0d fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f3e6:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f3e9:	e8 e2 cc fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f3ee:	29 c3                	sub    %eax,%ebx
f011f3f0:	89 d8                	mov    %ebx,%eax
f011f3f2:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f3f7:	74 17                	je     f011f410 <test_kfree+0x1b7>
f011f3f9:	83 ec 04             	sub    $0x4,%esp
f011f3fc:	68 58 a5 13 f0       	push   $0xf013a558
f011f401:	68 d9 04 00 00       	push   $0x4d9
f011f406:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f40b:	e8 96 0d fe ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f011f410:	c7 85 e8 fd ff ff ff 	movl   $0x1ffbff,-0x218(%ebp)
f011f417:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f011f41a:	e8 b1 cc fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f41f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f422:	e8 6d 48 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f427:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f011f42a:	83 ec 0c             	sub    $0xc,%esp
f011f42d:	68 00 fc 1f 00       	push   $0x1ffc00
f011f432:	e8 ad 7f fe ff       	call   f01073e4 <kmalloc>
f011f437:	83 c4 10             	add    $0x10,%esp
f011f43a:	89 85 4c fd ff ff    	mov    %eax,-0x2b4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f440:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011f446:	89 c1                	mov    %eax,%ecx
f011f448:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f011f44f:	8b 45 b0             	mov    -0x50(%ebp),%eax
f011f452:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f457:	89 45 ac             	mov    %eax,-0x54(%ebp)
f011f45a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f45d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f462:	f7 75 b0             	divl   -0x50(%ebp)
f011f465:	8b 45 ac             	mov    -0x54(%ebp),%eax
f011f468:	29 d0                	sub    %edx,%eax
f011f46a:	89 c3                	mov    %eax,%ebx
f011f46c:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f011f473:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f478:	0f b6 d0             	movzbl %al,%edx
f011f47b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f011f47e:	01 d0                	add    %edx,%eax
f011f480:	48                   	dec    %eax
f011f481:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f011f484:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f487:	ba 00 00 00 00       	mov    $0x0,%edx
f011f48c:	f7 75 a8             	divl   -0x58(%ebp)
f011f48f:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f011f492:	29 d0                	sub    %edx,%eax
f011f494:	01 c3                	add    %eax,%ebx
f011f496:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f011f49d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f4a2:	0f b6 c0             	movzbl %al,%eax
f011f4a5:	c1 e0 04             	shl    $0x4,%eax
f011f4a8:	89 c2                	mov    %eax,%edx
f011f4aa:	8b 45 a0             	mov    -0x60(%ebp),%eax
f011f4ad:	01 d0                	add    %edx,%eax
f011f4af:	48                   	dec    %eax
f011f4b0:	89 45 9c             	mov    %eax,-0x64(%ebp)
f011f4b3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f4b6:	ba 00 00 00 00       	mov    $0x0,%edx
f011f4bb:	f7 75 a0             	divl   -0x60(%ebp)
f011f4be:	8b 45 9c             	mov    -0x64(%ebp),%eax
f011f4c1:	29 d0                	sub    %edx,%eax
f011f4c3:	01 d8                	add    %ebx,%eax
f011f4c5:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f011f4ca:	39 c1                	cmp    %eax,%ecx
f011f4cc:	74 17                	je     f011f4e5 <test_kfree+0x28c>
f011f4ce:	83 ec 04             	sub    $0x4,%esp
f011f4d1:	68 bc a5 13 f0       	push   $0xf013a5bc
f011f4d6:	68 e0 04 00 00       	push   $0x4e0
f011f4db:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f4e0:	e8 c1 0c fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f4e5:	e8 aa 47 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f4ea:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f4ed:	74 17                	je     f011f506 <test_kfree+0x2ad>
f011f4ef:	83 ec 04             	sub    $0x4,%esp
f011f4f2:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011f4f7:	68 e1 04 00 00       	push   $0x4e1
f011f4fc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f501:	e8 a0 0c fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f506:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f509:	e8 c2 cb fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f50e:	29 c3                	sub    %eax,%ebx
f011f510:	89 d8                	mov    %ebx,%eax
f011f512:	3d 00 02 00 00       	cmp    $0x200,%eax
f011f517:	74 17                	je     f011f530 <test_kfree+0x2d7>
f011f519:	83 ec 04             	sub    $0x4,%esp
f011f51c:	68 58 a5 13 f0       	push   $0xf013a558
f011f521:	68 e2 04 00 00       	push   $0x4e2
f011f526:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f52b:	e8 76 0c fe ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f011f530:	c7 85 ec fd ff ff ff 	movl   $0x1ffbff,-0x214(%ebp)
f011f537:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f53a:	e8 91 cb fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f53f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f542:	e8 4d 47 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f547:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f011f54a:	83 ec 0c             	sub    $0xc,%esp
f011f54d:	68 00 08 00 00       	push   $0x800
f011f552:	e8 8d 7e fe ff       	call   f01073e4 <kmalloc>
f011f557:	83 c4 10             	add    $0x10,%esp
f011f55a:	89 85 50 fd ff ff    	mov    %eax,-0x2b0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f560:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011f566:	89 c1                	mov    %eax,%ecx
f011f568:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f011f56f:	8b 45 98             	mov    -0x68(%ebp),%eax
f011f572:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f577:	89 45 94             	mov    %eax,-0x6c(%ebp)
f011f57a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f57d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f582:	f7 75 98             	divl   -0x68(%ebp)
f011f585:	8b 45 94             	mov    -0x6c(%ebp),%eax
f011f588:	29 d0                	sub    %edx,%eax
f011f58a:	89 c3                	mov    %eax,%ebx
f011f58c:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f011f593:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f598:	0f b6 d0             	movzbl %al,%edx
f011f59b:	8b 45 90             	mov    -0x70(%ebp),%eax
f011f59e:	01 d0                	add    %edx,%eax
f011f5a0:	48                   	dec    %eax
f011f5a1:	89 45 8c             	mov    %eax,-0x74(%ebp)
f011f5a4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f5a7:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5ac:	f7 75 90             	divl   -0x70(%ebp)
f011f5af:	8b 45 8c             	mov    -0x74(%ebp),%eax
f011f5b2:	29 d0                	sub    %edx,%eax
f011f5b4:	01 c3                	add    %eax,%ebx
f011f5b6:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f011f5bd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f5c2:	0f b6 c0             	movzbl %al,%eax
f011f5c5:	c1 e0 04             	shl    $0x4,%eax
f011f5c8:	89 c2                	mov    %eax,%edx
f011f5ca:	8b 45 88             	mov    -0x78(%ebp),%eax
f011f5cd:	01 d0                	add    %edx,%eax
f011f5cf:	48                   	dec    %eax
f011f5d0:	89 45 84             	mov    %eax,-0x7c(%ebp)
f011f5d3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f5d6:	ba 00 00 00 00       	mov    $0x0,%edx
f011f5db:	f7 75 88             	divl   -0x78(%ebp)
f011f5de:	8b 45 84             	mov    -0x7c(%ebp),%eax
f011f5e1:	29 d0                	sub    %edx,%eax
f011f5e3:	01 d8                	add    %ebx,%eax
f011f5e5:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f011f5ea:	39 c1                	cmp    %eax,%ecx
f011f5ec:	74 17                	je     f011f605 <test_kfree+0x3ac>
f011f5ee:	83 ec 04             	sub    $0x4,%esp
f011f5f1:	68 bc a5 13 f0       	push   $0xf013a5bc
f011f5f6:	68 e9 04 00 00       	push   $0x4e9
f011f5fb:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f600:	e8 a1 0b fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f605:	e8 8a 46 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f60a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f60d:	74 17                	je     f011f626 <test_kfree+0x3cd>
f011f60f:	83 ec 04             	sub    $0x4,%esp
f011f612:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011f617:	68 ea 04 00 00       	push   $0x4ea
f011f61c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f621:	e8 80 0b fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f626:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f629:	e8 a2 ca fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f62e:	29 c3                	sub    %eax,%ebx
f011f630:	89 d8                	mov    %ebx,%eax
f011f632:	83 f8 01             	cmp    $0x1,%eax
f011f635:	74 17                	je     f011f64e <test_kfree+0x3f5>
f011f637:	83 ec 04             	sub    $0x4,%esp
f011f63a:	68 58 a5 13 f0       	push   $0xf013a558
f011f63f:	68 eb 04 00 00       	push   $0x4eb
f011f644:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f649:	e8 58 0b fe ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f011f64e:	c7 85 f0 fd ff ff ff 	movl   $0x7ff,-0x210(%ebp)
f011f655:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f011f658:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011f65e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f011f661:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f668:	eb 0e                	jmp    f011f678 <test_kfree+0x41f>
		{
			ptr[i] = 2 ;
f011f66a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f66d:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f670:	01 d0                	add    %edx,%eax
f011f672:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f011f675:	ff 45 f4             	incl   -0xc(%ebp)
f011f678:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f011f67e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f681:	7f e7                	jg     f011f66a <test_kfree+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f011f683:	e8 48 ca fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f688:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f68b:	e8 04 46 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f690:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f011f693:	83 ec 0c             	sub    $0xc,%esp
f011f696:	68 00 08 00 00       	push   $0x800
f011f69b:	e8 44 7d fe ff       	call   f01073e4 <kmalloc>
f011f6a0:	83 c4 10             	add    $0x10,%esp
f011f6a3:	89 85 54 fd ff ff    	mov    %eax,-0x2ac(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f6a9:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011f6af:	89 c1                	mov    %eax,%ecx
f011f6b1:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f011f6b8:	10 00 00 
f011f6bb:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f011f6c1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f6c6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f011f6cc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f6d2:	ba 00 00 00 00       	mov    $0x0,%edx
f011f6d7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f011f6dd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f011f6e3:	29 d0                	sub    %edx,%eax
f011f6e5:	89 c3                	mov    %eax,%ebx
f011f6e7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f011f6ee:	10 00 00 
f011f6f1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f6f6:	0f b6 d0             	movzbl %al,%edx
f011f6f9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f011f6ff:	01 d0                	add    %edx,%eax
f011f701:	48                   	dec    %eax
f011f702:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f011f708:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f70e:	ba 00 00 00 00       	mov    $0x0,%edx
f011f713:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f011f719:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f011f71f:	29 d0                	sub    %edx,%eax
f011f721:	01 c3                	add    %eax,%ebx
f011f723:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f011f72a:	10 00 00 
f011f72d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f732:	0f b6 c0             	movzbl %al,%eax
f011f735:	c1 e0 04             	shl    $0x4,%eax
f011f738:	89 c2                	mov    %eax,%edx
f011f73a:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f011f740:	01 d0                	add    %edx,%eax
f011f742:	48                   	dec    %eax
f011f743:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f011f749:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f74f:	ba 00 00 00 00       	mov    $0x0,%edx
f011f754:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f011f75a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f011f760:	29 d0                	sub    %edx,%eax
f011f762:	01 d8                	add    %ebx,%eax
f011f764:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f011f769:	39 c1                	cmp    %eax,%ecx
f011f76b:	74 17                	je     f011f784 <test_kfree+0x52b>
f011f76d:	83 ec 04             	sub    $0x4,%esp
f011f770:	68 bc a5 13 f0       	push   $0xf013a5bc
f011f775:	68 f7 04 00 00       	push   $0x4f7
f011f77a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f77f:	e8 22 0a fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f784:	e8 0b 45 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f789:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f78c:	74 17                	je     f011f7a5 <test_kfree+0x54c>
f011f78e:	83 ec 04             	sub    $0x4,%esp
f011f791:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011f796:	68 f8 04 00 00       	push   $0x4f8
f011f79b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f7a0:	e8 01 0a fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f7a5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f7a8:	e8 23 c9 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f7ad:	29 c3                	sub    %eax,%ebx
f011f7af:	89 d8                	mov    %ebx,%eax
f011f7b1:	83 f8 01             	cmp    $0x1,%eax
f011f7b4:	74 17                	je     f011f7cd <test_kfree+0x574>
f011f7b6:	83 ec 04             	sub    $0x4,%esp
f011f7b9:	68 58 a5 13 f0       	push   $0xf013a558
f011f7be:	68 f9 04 00 00       	push   $0x4f9
f011f7c3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f7c8:	e8 d9 09 fe ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f011f7cd:	c7 85 f4 fd ff ff ff 	movl   $0x7ff,-0x20c(%ebp)
f011f7d4:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f011f7d7:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011f7dd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011f7e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f7e7:	eb 0e                	jmp    f011f7f7 <test_kfree+0x59e>
		{
			ptr[i] = 3 ;
f011f7e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f7ec:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f7ef:	01 d0                	add    %edx,%eax
f011f7f1:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011f7f4:	ff 45 f4             	incl   -0xc(%ebp)
f011f7f7:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f011f7fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f800:	7f e7                	jg     f011f7e9 <test_kfree+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f011f802:	e8 c9 c8 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f807:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f80a:	e8 85 44 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f80f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f011f812:	83 ec 0c             	sub    $0xc,%esp
f011f815:	68 00 1c 00 00       	push   $0x1c00
f011f81a:	e8 c5 7b fe ff       	call   f01073e4 <kmalloc>
f011f81f:	83 c4 10             	add    $0x10,%esp
f011f822:	89 85 58 fd ff ff    	mov    %eax,-0x2a8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f828:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011f82e:	89 c1                	mov    %eax,%ecx
f011f830:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f011f837:	10 00 00 
f011f83a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f011f840:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f845:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f011f84b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f851:	ba 00 00 00 00       	mov    $0x0,%edx
f011f856:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f011f85c:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f011f862:	29 d0                	sub    %edx,%eax
f011f864:	89 c3                	mov    %eax,%ebx
f011f866:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f011f86d:	10 00 00 
f011f870:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f875:	0f b6 d0             	movzbl %al,%edx
f011f878:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f011f87e:	01 d0                	add    %edx,%eax
f011f880:	48                   	dec    %eax
f011f881:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f011f887:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f88d:	ba 00 00 00 00       	mov    $0x0,%edx
f011f892:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f011f898:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f011f89e:	29 d0                	sub    %edx,%eax
f011f8a0:	01 c3                	add    %eax,%ebx
f011f8a2:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f011f8a9:	10 00 00 
f011f8ac:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f8b1:	0f b6 c0             	movzbl %al,%eax
f011f8b4:	c1 e0 04             	shl    $0x4,%eax
f011f8b7:	89 c2                	mov    %eax,%edx
f011f8b9:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f011f8bf:	01 d0                	add    %edx,%eax
f011f8c1:	48                   	dec    %eax
f011f8c2:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f011f8c8:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f8ce:	ba 00 00 00 00       	mov    $0x0,%edx
f011f8d3:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f011f8d9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f011f8df:	29 d0                	sub    %edx,%eax
f011f8e1:	01 d8                	add    %ebx,%eax
f011f8e3:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f011f8e8:	39 c1                	cmp    %eax,%ecx
f011f8ea:	74 17                	je     f011f903 <test_kfree+0x6aa>
f011f8ec:	83 ec 04             	sub    $0x4,%esp
f011f8ef:	68 bc a5 13 f0       	push   $0xf013a5bc
f011f8f4:	68 05 05 00 00       	push   $0x505
f011f8f9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f8fe:	e8 a3 08 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011f903:	e8 8c 43 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f908:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011f90b:	74 17                	je     f011f924 <test_kfree+0x6cb>
f011f90d:	83 ec 04             	sub    $0x4,%esp
f011f910:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011f915:	68 06 05 00 00       	push   $0x506
f011f91a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f91f:	e8 82 08 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f011f924:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011f927:	e8 a4 c7 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f92c:	29 c3                	sub    %eax,%ebx
f011f92e:	89 d8                	mov    %ebx,%eax
f011f930:	83 f8 02             	cmp    $0x2,%eax
f011f933:	74 17                	je     f011f94c <test_kfree+0x6f3>
f011f935:	83 ec 04             	sub    $0x4,%esp
f011f938:	68 58 a5 13 f0       	push   $0xf013a558
f011f93d:	68 07 05 00 00       	push   $0x507
f011f942:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011f947:	e8 5a 08 fe ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f011f94c:	c7 85 f8 fd ff ff ff 	movl   $0x1bff,-0x208(%ebp)
f011f953:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f011f956:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f011f95c:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f011f95f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011f966:	eb 0e                	jmp    f011f976 <test_kfree+0x71d>
		{
			ptr[i] = 4 ;
f011f968:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011f96b:	8b 45 80             	mov    -0x80(%ebp),%eax
f011f96e:	01 d0                	add    %edx,%eax
f011f970:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f011f973:	ff 45 f4             	incl   -0xc(%ebp)
f011f976:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f011f97c:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011f97f:	7f e7                	jg     f011f968 <test_kfree+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f011f981:	e8 4a c7 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011f986:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011f989:	e8 06 43 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011f98e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f011f991:	83 ec 0c             	sub    $0xc,%esp
f011f994:	68 00 fc 2f 00       	push   $0x2ffc00
f011f999:	e8 46 7a fe ff       	call   f01073e4 <kmalloc>
f011f99e:	83 c4 10             	add    $0x10,%esp
f011f9a1:	89 85 5c fd ff ff    	mov    %eax,-0x2a4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011f9a7:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011f9ad:	89 c1                	mov    %eax,%ecx
f011f9af:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f011f9b6:	10 00 00 
f011f9b9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f011f9bf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011f9c4:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f011f9ca:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f9d0:	ba 00 00 00 00       	mov    $0x0,%edx
f011f9d5:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f011f9db:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f011f9e1:	29 d0                	sub    %edx,%eax
f011f9e3:	89 c3                	mov    %eax,%ebx
f011f9e5:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f011f9ec:	10 00 00 
f011f9ef:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011f9f4:	0f b6 d0             	movzbl %al,%edx
f011f9f7:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f011f9fd:	01 d0                	add    %edx,%eax
f011f9ff:	48                   	dec    %eax
f011fa00:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f011fa06:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011fa0c:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa11:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f011fa17:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f011fa1d:	29 d0                	sub    %edx,%eax
f011fa1f:	01 c3                	add    %eax,%ebx
f011fa21:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f011fa28:	10 00 00 
f011fa2b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011fa30:	0f b6 c0             	movzbl %al,%eax
f011fa33:	c1 e0 04             	shl    $0x4,%eax
f011fa36:	89 c2                	mov    %eax,%edx
f011fa38:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f011fa3e:	01 d0                	add    %edx,%eax
f011fa40:	48                   	dec    %eax
f011fa41:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f011fa47:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011fa4d:	ba 00 00 00 00       	mov    $0x0,%edx
f011fa52:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f011fa58:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f011fa5e:	29 d0                	sub    %edx,%eax
f011fa60:	01 d8                	add    %ebx,%eax
f011fa62:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f011fa67:	39 c1                	cmp    %eax,%ecx
f011fa69:	74 17                	je     f011fa82 <test_kfree+0x829>
f011fa6b:	83 ec 04             	sub    $0x4,%esp
f011fa6e:	68 bc a5 13 f0       	push   $0xf013a5bc
f011fa73:	68 13 05 00 00       	push   $0x513
f011fa78:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011fa7d:	e8 24 07 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fa82:	e8 0d 42 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011fa87:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fa8a:	74 17                	je     f011faa3 <test_kfree+0x84a>
f011fa8c:	83 ec 04             	sub    $0x4,%esp
f011fa8f:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011fa94:	68 14 05 00 00       	push   $0x514
f011fa99:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011fa9e:	e8 03 07 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f011faa3:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011faa6:	e8 25 c6 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011faab:	29 c3                	sub    %eax,%ebx
f011faad:	89 d8                	mov    %ebx,%eax
f011faaf:	3d 00 03 00 00       	cmp    $0x300,%eax
f011fab4:	74 17                	je     f011facd <test_kfree+0x874>
f011fab6:	83 ec 04             	sub    $0x4,%esp
f011fab9:	68 58 a5 13 f0       	push   $0xf013a558
f011fabe:	68 15 05 00 00       	push   $0x515
f011fac3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011fac8:	e8 d9 06 fe ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f011facd:	c7 85 fc fd ff ff ff 	movl   $0x2ffbff,-0x204(%ebp)
f011fad4:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f011fad7:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f011fadd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f011fae0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fae7:	eb 0e                	jmp    f011faf7 <test_kfree+0x89e>
		{
			ptr[i] = 5 ;
f011fae9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011faec:	8b 45 80             	mov    -0x80(%ebp),%eax
f011faef:	01 d0                	add    %edx,%eax
f011faf1:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f011faf4:	ff 45 f4             	incl   -0xc(%ebp)
f011faf7:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f011fafd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fb00:	7f e7                	jg     f011fae9 <test_kfree+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f011fb02:	e8 c9 c5 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011fb07:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fb0a:	e8 85 41 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011fb0f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f011fb12:	83 ec 0c             	sub    $0xc,%esp
f011fb15:	68 00 fc 5f 00       	push   $0x5ffc00
f011fb1a:	e8 c5 78 fe ff       	call   f01073e4 <kmalloc>
f011fb1f:	83 c4 10             	add    $0x10,%esp
f011fb22:	89 85 60 fd ff ff    	mov    %eax,-0x2a0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fb28:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011fb2e:	89 c1                	mov    %eax,%ecx
f011fb30:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f011fb37:	10 00 00 
f011fb3a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f011fb40:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fb45:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f011fb4b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011fb51:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb56:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f011fb5c:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f011fb62:	29 d0                	sub    %edx,%eax
f011fb64:	89 c3                	mov    %eax,%ebx
f011fb66:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f011fb6d:	10 00 00 
f011fb70:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011fb75:	0f b6 d0             	movzbl %al,%edx
f011fb78:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f011fb7e:	01 d0                	add    %edx,%eax
f011fb80:	48                   	dec    %eax
f011fb81:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f011fb87:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011fb8d:	ba 00 00 00 00       	mov    $0x0,%edx
f011fb92:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f011fb98:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f011fb9e:	29 d0                	sub    %edx,%eax
f011fba0:	01 c3                	add    %eax,%ebx
f011fba2:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f011fba9:	10 00 00 
f011fbac:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011fbb1:	0f b6 c0             	movzbl %al,%eax
f011fbb4:	c1 e0 04             	shl    $0x4,%eax
f011fbb7:	89 c2                	mov    %eax,%edx
f011fbb9:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f011fbbf:	01 d0                	add    %edx,%eax
f011fbc1:	48                   	dec    %eax
f011fbc2:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f011fbc8:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011fbce:	ba 00 00 00 00       	mov    $0x0,%edx
f011fbd3:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f011fbd9:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f011fbdf:	29 d0                	sub    %edx,%eax
f011fbe1:	01 d8                	add    %ebx,%eax
f011fbe3:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f011fbe8:	39 c1                	cmp    %eax,%ecx
f011fbea:	74 17                	je     f011fc03 <test_kfree+0x9aa>
f011fbec:	83 ec 04             	sub    $0x4,%esp
f011fbef:	68 bc a5 13 f0       	push   $0xf013a5bc
f011fbf4:	68 21 05 00 00       	push   $0x521
f011fbf9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011fbfe:	e8 a3 05 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fc03:	e8 8c 40 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011fc08:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fc0b:	74 17                	je     f011fc24 <test_kfree+0x9cb>
f011fc0d:	83 ec 04             	sub    $0x4,%esp
f011fc10:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011fc15:	68 22 05 00 00       	push   $0x522
f011fc1a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011fc1f:	e8 82 05 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fc24:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fc27:	e8 a4 c4 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011fc2c:	29 c3                	sub    %eax,%ebx
f011fc2e:	89 d8                	mov    %ebx,%eax
f011fc30:	3d 00 06 00 00       	cmp    $0x600,%eax
f011fc35:	74 17                	je     f011fc4e <test_kfree+0x9f5>
f011fc37:	83 ec 04             	sub    $0x4,%esp
f011fc3a:	68 58 a5 13 f0       	push   $0xf013a558
f011fc3f:	68 23 05 00 00       	push   $0x523
f011fc44:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011fc49:	e8 58 05 fe ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f011fc4e:	c7 85 00 fe ff ff ff 	movl   $0x5ffbff,-0x200(%ebp)
f011fc55:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f011fc58:	e8 73 c4 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011fc5d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fc60:	e8 2f 40 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011fc65:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f011fc68:	83 ec 0c             	sub    $0xc,%esp
f011fc6b:	68 00 38 00 00       	push   $0x3800
f011fc70:	e8 6f 77 fe ff       	call   f01073e4 <kmalloc>
f011fc75:	83 c4 10             	add    $0x10,%esp
f011fc78:	89 85 64 fd ff ff    	mov    %eax,-0x29c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f011fc7e:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011fc84:	89 c1                	mov    %eax,%ecx
f011fc86:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f011fc8d:	10 00 00 
f011fc90:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f011fc96:	05 ef ff 09 00       	add    $0x9ffef,%eax
f011fc9b:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f011fca1:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011fca7:	ba 00 00 00 00       	mov    $0x0,%edx
f011fcac:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f011fcb2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f011fcb8:	29 d0                	sub    %edx,%eax
f011fcba:	89 c3                	mov    %eax,%ebx
f011fcbc:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f011fcc3:	10 00 00 
f011fcc6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011fccb:	0f b6 d0             	movzbl %al,%edx
f011fcce:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f011fcd4:	01 d0                	add    %edx,%eax
f011fcd6:	48                   	dec    %eax
f011fcd7:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f011fcdd:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011fce3:	ba 00 00 00 00       	mov    $0x0,%edx
f011fce8:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f011fcee:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f011fcf4:	29 d0                	sub    %edx,%eax
f011fcf6:	01 c3                	add    %eax,%ebx
f011fcf8:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f011fcff:	10 00 00 
f011fd02:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f011fd07:	0f b6 c0             	movzbl %al,%eax
f011fd0a:	c1 e0 04             	shl    $0x4,%eax
f011fd0d:	89 c2                	mov    %eax,%edx
f011fd0f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f011fd15:	01 d0                	add    %edx,%eax
f011fd17:	48                   	dec    %eax
f011fd18:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f011fd1e:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011fd24:	ba 00 00 00 00       	mov    $0x0,%edx
f011fd29:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f011fd2f:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f011fd35:	29 d0                	sub    %edx,%eax
f011fd37:	01 d8                	add    %ebx,%eax
f011fd39:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f011fd3e:	39 c1                	cmp    %eax,%ecx
f011fd40:	74 17                	je     f011fd59 <test_kfree+0xb00>
f011fd42:	83 ec 04             	sub    $0x4,%esp
f011fd45:	68 bc a5 13 f0       	push   $0xf013a5bc
f011fd4a:	68 2a 05 00 00       	push   $0x52a
f011fd4f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011fd54:	e8 4d 04 fe ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fd59:	e8 36 3f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011fd5e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f011fd61:	74 17                	je     f011fd7a <test_kfree+0xb21>
f011fd63:	83 ec 04             	sub    $0x4,%esp
f011fd66:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011fd6b:	68 2b 05 00 00       	push   $0x52b
f011fd70:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011fd75:	e8 2c 04 fe ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f011fd7a:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f011fd7d:	e8 4e c3 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011fd82:	29 c3                	sub    %eax,%ebx
f011fd84:	89 d8                	mov    %ebx,%eax
f011fd86:	83 f8 04             	cmp    $0x4,%eax
f011fd89:	74 17                	je     f011fda2 <test_kfree+0xb49>
f011fd8b:	83 ec 04             	sub    $0x4,%esp
f011fd8e:	68 58 a5 13 f0       	push   $0xf013a558
f011fd93:	68 2c 05 00 00       	push   $0x52c
f011fd98:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011fd9d:	e8 04 04 fe ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f011fda2:	c7 85 04 fe ff ff ff 	movl   $0x37ff,-0x1fc(%ebp)
f011fda9:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f011fdac:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f011fdb2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f011fdb5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011fdbc:	eb 0e                	jmp    f011fdcc <test_kfree+0xb73>
		{
			ptr[i] = 7 ;
f011fdbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
f011fdc1:	8b 45 80             	mov    -0x80(%ebp),%eax
f011fdc4:	01 d0                	add    %edx,%eax
f011fdc6:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f011fdc9:	ff 45 f4             	incl   -0xc(%ebp)
f011fdcc:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f011fdd2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f011fdd5:	7f e7                	jg     f011fdbe <test_kfree+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f011fdd7:	e8 f4 c2 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011fddc:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f011fde2:	e8 ad 3e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011fde7:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f011fded:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f011fdf3:	83 ec 0c             	sub    $0xc,%esp
f011fdf6:	50                   	push   %eax
f011fdf7:	e8 02 76 fe ff       	call   f01073fe <kfree>
f011fdfc:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fdff:	e8 90 3e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011fe04:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011fe0a:	74 17                	je     f011fe23 <test_kfree+0xbca>
f011fe0c:	83 ec 04             	sub    $0x4,%esp
f011fe0f:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011fe14:	68 3b 05 00 00       	push   $0x53b
f011fe19:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011fe1e:	e8 83 03 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011fe23:	e8 a8 c2 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011fe28:	89 c2                	mov    %eax,%edx
f011fe2a:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011fe30:	29 c2                	sub    %eax,%edx
f011fe32:	89 d0                	mov    %edx,%eax
f011fe34:	3d 00 02 00 00       	cmp    $0x200,%eax
f011fe39:	74 17                	je     f011fe52 <test_kfree+0xbf9>
f011fe3b:	83 ec 04             	sub    $0x4,%esp
f011fe3e:	68 60 ac 13 f0       	push   $0xf013ac60
f011fe43:	68 3c 05 00 00       	push   $0x53c
f011fe48:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011fe4d:	e8 54 03 fe ff       	call   f01001a6 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f011fe52:	e8 79 c2 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011fe57:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fe5d:	e8 32 3e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011fe62:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f011fe68:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f011fe6e:	83 ec 0c             	sub    $0xc,%esp
f011fe71:	50                   	push   %eax
f011fe72:	e8 87 75 fe ff       	call   f01073fe <kfree>
f011fe77:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fe7a:	e8 15 3e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011fe7f:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011fe85:	74 17                	je     f011fe9e <test_kfree+0xc45>
f011fe87:	83 ec 04             	sub    $0x4,%esp
f011fe8a:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011fe8f:	68 42 05 00 00       	push   $0x542
f011fe94:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011fe99:	e8 08 03 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f011fe9e:	e8 2d c2 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011fea3:	89 c2                	mov    %eax,%edx
f011fea5:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011feab:	29 c2                	sub    %eax,%edx
f011fead:	89 d0                	mov    %edx,%eax
f011feaf:	83 f8 01             	cmp    $0x1,%eax
f011feb2:	74 17                	je     f011fecb <test_kfree+0xc72>
f011feb4:	83 ec 04             	sub    $0x4,%esp
f011feb7:	68 60 ac 13 f0       	push   $0xf013ac60
f011febc:	68 43 05 00 00       	push   $0x543
f011fec1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011fec6:	e8 db 02 fe ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f011fecb:	e8 00 c2 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011fed0:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011fed6:	e8 b9 3d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011fedb:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f011fee1:	8b 85 4c fd ff ff    	mov    -0x2b4(%ebp),%eax
f011fee7:	83 ec 0c             	sub    $0xc,%esp
f011feea:	50                   	push   %eax
f011feeb:	e8 0e 75 fe ff       	call   f01073fe <kfree>
f011fef0:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011fef3:	e8 9c 3d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011fef8:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011fefe:	74 17                	je     f011ff17 <test_kfree+0xcbe>
f011ff00:	83 ec 04             	sub    $0x4,%esp
f011ff03:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011ff08:	68 49 05 00 00       	push   $0x549
f011ff0d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ff12:	e8 8f 02 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f011ff17:	e8 b4 c1 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ff1c:	89 c2                	mov    %eax,%edx
f011ff1e:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ff24:	29 c2                	sub    %eax,%edx
f011ff26:	89 d0                	mov    %edx,%eax
f011ff28:	3d 00 02 00 00       	cmp    $0x200,%eax
f011ff2d:	74 17                	je     f011ff46 <test_kfree+0xced>
f011ff2f:	83 ec 04             	sub    $0x4,%esp
f011ff32:	68 60 ac 13 f0       	push   $0xf013ac60
f011ff37:	68 4a 05 00 00       	push   $0x54a
f011ff3c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ff41:	e8 60 02 fe ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f011ff46:	e8 85 c1 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ff4b:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f011ff51:	e8 3e 3d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ff56:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f011ff5c:	8b 85 60 fd ff ff    	mov    -0x2a0(%ebp),%eax
f011ff62:	83 ec 0c             	sub    $0xc,%esp
f011ff65:	50                   	push   %eax
f011ff66:	e8 93 74 fe ff       	call   f01073fe <kfree>
f011ff6b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f011ff6e:	e8 21 3d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f011ff73:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f011ff79:	74 17                	je     f011ff92 <test_kfree+0xd39>
f011ff7b:	83 ec 04             	sub    $0x4,%esp
f011ff7e:	68 f0 a4 13 f0       	push   $0xf013a4f0
f011ff83:	68 50 05 00 00       	push   $0x550
f011ff88:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ff8d:	e8 14 02 fe ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f011ff92:	e8 39 c1 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f011ff97:	89 c2                	mov    %eax,%edx
f011ff99:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f011ff9f:	29 c2                	sub    %eax,%edx
f011ffa1:	89 d0                	mov    %edx,%eax
f011ffa3:	3d 00 06 00 00       	cmp    $0x600,%eax
f011ffa8:	74 17                	je     f011ffc1 <test_kfree+0xd68>
f011ffaa:	83 ec 04             	sub    $0x4,%esp
f011ffad:	68 60 ac 13 f0       	push   $0xf013ac60
f011ffb2:	68 51 05 00 00       	push   $0x551
f011ffb7:	68 d6 a4 13 f0       	push   $0xf013a4d6
f011ffbc:	e8 e5 01 fe ff       	call   f01001a6 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f011ffc1:	83 ec 0c             	sub    $0xc,%esp
f011ffc4:	68 98 ac 13 f0       	push   $0xf013ac98
f011ffc9:	e8 5f 0c fe ff       	call   f0100c2d <cprintf>
f011ffce:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f011ffd1:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f011ffd7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f011ffda:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f011ffe1:	eb 1e                	jmp    f0120001 <test_kfree+0xda8>
		{
			sums[3] += ptr[i] ;
f011ffe3:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f011ffe9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f011ffec:	8b 45 80             	mov    -0x80(%ebp),%eax
f011ffef:	01 c8                	add    %ecx,%eax
f011fff1:	8a 00                	mov    (%eax),%al
f011fff3:	0f be c0             	movsbl %al,%eax
f011fff6:	01 d0                	add    %edx,%eax
f011fff8:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f011fffe:	ff 45 f4             	incl   -0xc(%ebp)
f0120001:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120007:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012000a:	7f d7                	jg     f011ffe3 <test_kfree+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012000c:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f0120012:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0120018:	89 c1                	mov    %eax,%ecx
f012001a:	01 c9                	add    %ecx,%ecx
f012001c:	01 c8                	add    %ecx,%eax
f012001e:	39 c2                	cmp    %eax,%edx
f0120020:	74 17                	je     f0120039 <test_kfree+0xde0>
f0120022:	83 ec 04             	sub    $0x4,%esp
f0120025:	68 bc ac 13 f0       	push   $0xf013acbc
f012002a:	68 5e 05 00 00       	push   $0x55e
f012002f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120034:	e8 6d 01 fe ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0120039:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f012003f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0120042:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120049:	eb 1e                	jmp    f0120069 <test_kfree+0xe10>
		{
			sums[4] += ptr[i] ;
f012004b:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f0120051:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120054:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120057:	01 c8                	add    %ecx,%eax
f0120059:	8a 00                	mov    (%eax),%al
f012005b:	0f be c0             	movsbl %al,%eax
f012005e:	01 d0                	add    %edx,%eax
f0120060:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0120066:	ff 45 f4             	incl   -0xc(%ebp)
f0120069:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012006f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120072:	7f d7                	jg     f012004b <test_kfree+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0120074:	8b 85 a8 fd ff ff    	mov    -0x258(%ebp),%eax
f012007a:	8b 95 f8 fd ff ff    	mov    -0x208(%ebp),%edx
f0120080:	c1 e2 02             	shl    $0x2,%edx
f0120083:	39 d0                	cmp    %edx,%eax
f0120085:	74 17                	je     f012009e <test_kfree+0xe45>
f0120087:	83 ec 04             	sub    $0x4,%esp
f012008a:	68 bc ac 13 f0       	push   $0xf013acbc
f012008f:	68 66 05 00 00       	push   $0x566
f0120094:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120099:	e8 08 01 fe ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012009e:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f01200a4:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01200a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01200ae:	eb 1e                	jmp    f01200ce <test_kfree+0xe75>
		{
			sums[5] += ptr[i] ;
f01200b0:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f01200b6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01200b9:	8b 45 80             	mov    -0x80(%ebp),%eax
f01200bc:	01 c8                	add    %ecx,%eax
f01200be:	8a 00                	mov    (%eax),%al
f01200c0:	0f be c0             	movsbl %al,%eax
f01200c3:	01 d0                	add    %edx,%eax
f01200c5:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01200cb:	ff 45 f4             	incl   -0xc(%ebp)
f01200ce:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f01200d4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01200d7:	7f d7                	jg     f01200b0 <test_kfree+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01200d9:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f01200df:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f01200e5:	89 d0                	mov    %edx,%eax
f01200e7:	c1 e0 02             	shl    $0x2,%eax
f01200ea:	01 d0                	add    %edx,%eax
f01200ec:	39 c1                	cmp    %eax,%ecx
f01200ee:	74 17                	je     f0120107 <test_kfree+0xeae>
f01200f0:	83 ec 04             	sub    $0x4,%esp
f01200f3:	68 bc ac 13 f0       	push   $0xf013acbc
f01200f8:	68 6e 05 00 00       	push   $0x56e
f01200fd:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120102:	e8 9f 00 fe ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0120107:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f012010d:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0120110:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120117:	eb 1e                	jmp    f0120137 <test_kfree+0xede>
		{
			sums[7] += ptr[i] ;
f0120119:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012011f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0120122:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120125:	01 c8                	add    %ecx,%eax
f0120127:	8a 00                	mov    (%eax),%al
f0120129:	0f be c0             	movsbl %al,%eax
f012012c:	01 d0                	add    %edx,%eax
f012012e:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0120134:	ff 45 f4             	incl   -0xc(%ebp)
f0120137:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012013d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120140:	7f d7                	jg     f0120119 <test_kfree+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0120142:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f0120148:	8b 95 04 fe ff ff    	mov    -0x1fc(%ebp),%edx
f012014e:	89 d0                	mov    %edx,%eax
f0120150:	01 c0                	add    %eax,%eax
f0120152:	01 d0                	add    %edx,%eax
f0120154:	01 c0                	add    %eax,%eax
f0120156:	01 d0                	add    %edx,%eax
f0120158:	39 c1                	cmp    %eax,%ecx
f012015a:	74 17                	je     f0120173 <test_kfree+0xf1a>
f012015c:	83 ec 04             	sub    $0x4,%esp
f012015f:	68 bc ac 13 f0       	push   $0xf013acbc
f0120164:	68 76 05 00 00       	push   $0x576
f0120169:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012016e:	e8 33 00 fe ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b30%");
f0120173:	83 ec 0c             	sub    $0xc,%esp
f0120176:	68 ef ac 13 f0       	push   $0xf013acef
f012017b:	e8 ad 0a fe ff       	call   f0100c2d <cprintf>
f0120180:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120183:	e8 48 bf fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120188:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012018b:	e8 04 3b fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120190:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0120193:	83 ec 0c             	sub    $0xc,%esp
f0120196:	68 00 50 00 00       	push   $0x5000
f012019b:	e8 44 72 fe ff       	call   f01073e4 <kmalloc>
f01201a0:	83 c4 10             	add    $0x10,%esp
f01201a3:	89 85 68 fd ff ff    	mov    %eax,-0x298(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01201a9:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01201af:	89 c1                	mov    %eax,%ecx
f01201b1:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f01201b8:	10 00 00 
f01201bb:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f01201c1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01201c6:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f01201cc:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01201d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01201d7:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01201dd:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01201e3:	29 d0                	sub    %edx,%eax
f01201e5:	89 c3                	mov    %eax,%ebx
f01201e7:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01201ee:	10 00 00 
f01201f1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01201f6:	0f b6 d0             	movzbl %al,%edx
f01201f9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01201ff:	01 d0                	add    %edx,%eax
f0120201:	48                   	dec    %eax
f0120202:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0120208:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012020e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120213:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0120219:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012021f:	29 d0                	sub    %edx,%eax
f0120221:	01 c3                	add    %eax,%ebx
f0120223:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012022a:	10 00 00 
f012022d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120232:	0f b6 c0             	movzbl %al,%eax
f0120235:	c1 e0 04             	shl    $0x4,%eax
f0120238:	89 c2                	mov    %eax,%edx
f012023a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0120240:	01 d0                	add    %edx,%eax
f0120242:	48                   	dec    %eax
f0120243:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0120249:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012024f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120254:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012025a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0120260:	29 d0                	sub    %edx,%eax
f0120262:	01 d8                	add    %ebx,%eax
f0120264:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0120269:	39 c1                	cmp    %eax,%ecx
f012026b:	74 17                	je     f0120284 <test_kfree+0x102b>
f012026d:	83 ec 04             	sub    $0x4,%esp
f0120270:	68 bc a5 13 f0       	push   $0xf013a5bc
f0120275:	68 80 05 00 00       	push   $0x580
f012027a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012027f:	e8 22 ff fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120284:	e8 0b 3a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120289:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012028c:	74 17                	je     f01202a5 <test_kfree+0x104c>
f012028e:	83 ec 04             	sub    $0x4,%esp
f0120291:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0120296:	68 81 05 00 00       	push   $0x581
f012029b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01202a0:	e8 01 ff fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f01202a5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01202a8:	e8 23 be fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01202ad:	29 c3                	sub    %eax,%ebx
f01202af:	89 d8                	mov    %ebx,%eax
f01202b1:	83 f8 05             	cmp    $0x5,%eax
f01202b4:	74 17                	je     f01202cd <test_kfree+0x1074>
f01202b6:	83 ec 04             	sub    $0x4,%esp
f01202b9:	68 58 a5 13 f0       	push   $0xf013a558
f01202be:	68 82 05 00 00       	push   $0x582
f01202c3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01202c8:	e8 d9 fe fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f01202cd:	c7 85 08 fe ff ff ff 	movl   $0x4fff,-0x1f8(%ebp)
f01202d4:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01202d7:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f01202dd:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01202e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01202e7:	eb 0e                	jmp    f01202f7 <test_kfree+0x109e>
		{
			ptr[i] = 8 ;
f01202e9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01202ec:	8b 45 80             	mov    -0x80(%ebp),%eax
f01202ef:	01 d0                	add    %edx,%eax
f01202f1:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01202f4:	ff 45 f4             	incl   -0xc(%ebp)
f01202f7:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f01202fd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120300:	7f e7                	jg     f01202e9 <test_kfree+0x1090>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120302:	e8 c9 bd fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120307:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012030a:	e8 85 39 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012030f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0120312:	83 ec 0c             	sub    $0xc,%esp
f0120315:	68 00 00 10 00       	push   $0x100000
f012031a:	e8 c5 70 fe ff       	call   f01073e4 <kmalloc>
f012031f:	83 c4 10             	add    $0x10,%esp
f0120322:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120328:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012032e:	89 c1                	mov    %eax,%ecx
f0120330:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0120337:	10 00 00 
f012033a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0120340:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120345:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012034b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120351:	ba 00 00 00 00       	mov    $0x0,%edx
f0120356:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f012035c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0120362:	29 d0                	sub    %edx,%eax
f0120364:	89 c3                	mov    %eax,%ebx
f0120366:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f012036d:	10 00 00 
f0120370:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120375:	0f b6 d0             	movzbl %al,%edx
f0120378:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f012037e:	01 d0                	add    %edx,%eax
f0120380:	48                   	dec    %eax
f0120381:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0120387:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012038d:	ba 00 00 00 00       	mov    $0x0,%edx
f0120392:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0120398:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012039e:	29 d0                	sub    %edx,%eax
f01203a0:	01 c3                	add    %eax,%ebx
f01203a2:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01203a9:	10 00 00 
f01203ac:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01203b1:	0f b6 c0             	movzbl %al,%eax
f01203b4:	c1 e0 04             	shl    $0x4,%eax
f01203b7:	89 c2                	mov    %eax,%edx
f01203b9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01203bf:	01 d0                	add    %edx,%eax
f01203c1:	48                   	dec    %eax
f01203c2:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f01203c8:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01203ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01203d3:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f01203d9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01203df:	29 d0                	sub    %edx,%eax
f01203e1:	01 d8                	add    %ebx,%eax
f01203e3:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f01203e8:	39 c1                	cmp    %eax,%ecx
f01203ea:	74 17                	je     f0120403 <test_kfree+0x11aa>
f01203ec:	83 ec 04             	sub    $0x4,%esp
f01203ef:	68 bc a5 13 f0       	push   $0xf013a5bc
f01203f4:	68 8e 05 00 00       	push   $0x58e
f01203f9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01203fe:	e8 a3 fd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120403:	e8 8c 38 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120408:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012040b:	74 17                	je     f0120424 <test_kfree+0x11cb>
f012040d:	83 ec 04             	sub    $0x4,%esp
f0120410:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0120415:	68 8f 05 00 00       	push   $0x58f
f012041a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012041f:	e8 82 fd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120424:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120427:	e8 a4 bc fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012042c:	29 c3                	sub    %eax,%ebx
f012042e:	89 d8                	mov    %ebx,%eax
f0120430:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120435:	74 17                	je     f012044e <test_kfree+0x11f5>
f0120437:	83 ec 04             	sub    $0x4,%esp
f012043a:	68 58 a5 13 f0       	push   $0xf013a558
f012043f:	68 90 05 00 00       	push   $0x590
f0120444:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120449:	e8 58 fd fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f012044e:	c7 85 0c fe ff ff ff 	movl   $0xfffff,-0x1f4(%ebp)
f0120455:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0120458:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012045e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0120461:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120468:	eb 0e                	jmp    f0120478 <test_kfree+0x121f>
		{
			ptr[i] = 9 ;
f012046a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012046d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120470:	01 d0                	add    %edx,%eax
f0120472:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0120475:	ff 45 f4             	incl   -0xc(%ebp)
f0120478:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012047e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120481:	7f e7                	jg     f012046a <test_kfree+0x1211>
		{
			ptr[i] = 9 ;
		}

		if (isKHeapPlacementStrategyNEXTFIT())
f0120483:	e8 ac 66 ff ff       	call   f0116b34 <isKHeapPlacementStrategyNEXTFIT>
f0120488:	84 c0                	test   %al,%al
f012048a:	0f 84 ac 06 00 00    	je     f0120b3c <test_kfree+0x18e3>
		{
			//Allocate Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120490:	e8 3b bc fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120495:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120498:	e8 f7 37 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012049d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f01204a0:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f01204a7:	10 00 00 
f01204aa:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01204b0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01204b5:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f01204bb:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01204c1:	ba 00 00 00 00       	mov    $0x0,%edx
f01204c6:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f01204cc:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01204d2:	29 d0                	sub    %edx,%eax
f01204d4:	89 c1                	mov    %eax,%ecx
f01204d6:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f01204dd:	10 00 00 
f01204e0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01204e5:	0f b6 d0             	movzbl %al,%edx
f01204e8:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f01204ee:	01 d0                	add    %edx,%eax
f01204f0:	48                   	dec    %eax
f01204f1:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f01204f7:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f01204fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0120502:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0120508:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012050e:	29 d0                	sub    %edx,%eax
f0120510:	01 c1                	add    %eax,%ecx
f0120512:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0120519:	10 00 00 
f012051c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120521:	0f b6 c0             	movzbl %al,%eax
f0120524:	c1 e0 04             	shl    $0x4,%eax
f0120527:	89 c2                	mov    %eax,%edx
f0120529:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012052f:	01 d0                	add    %edx,%eax
f0120531:	48                   	dec    %eax
f0120532:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0120538:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012053e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120543:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0120549:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012054f:	29 d0                	sub    %edx,%eax
f0120551:	01 c8                	add    %ecx,%eax
f0120553:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120558:	29 c2                	sub    %eax,%edx
f012055a:	89 d0                	mov    %edx,%eax
f012055c:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
			ptr_allocations[10] = kmalloc(reqAllocatedSpace);
f0120562:	83 ec 0c             	sub    $0xc,%esp
f0120565:	ff b5 b4 fe ff ff    	pushl  -0x14c(%ebp)
f012056b:	e8 74 6e fe ff       	call   f01073e4 <kmalloc>
f0120570:	83 c4 10             	add    $0x10,%esp
f0120573:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
			if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120579:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f012057f:	89 c1                	mov    %eax,%ecx
f0120581:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f0120588:	10 00 00 
f012058b:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0120591:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120596:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012059c:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01205a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01205a7:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f01205ad:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01205b3:	29 d0                	sub    %edx,%eax
f01205b5:	89 c3                	mov    %eax,%ebx
f01205b7:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f01205be:	10 00 00 
f01205c1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01205c6:	0f b6 d0             	movzbl %al,%edx
f01205c9:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f01205cf:	01 d0                	add    %edx,%eax
f01205d1:	48                   	dec    %eax
f01205d2:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f01205d8:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01205de:	ba 00 00 00 00       	mov    $0x0,%edx
f01205e3:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f01205e9:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f01205ef:	29 d0                	sub    %edx,%eax
f01205f1:	01 c3                	add    %eax,%ebx
f01205f3:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f01205fa:	10 00 00 
f01205fd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120602:	0f b6 c0             	movzbl %al,%eax
f0120605:	c1 e0 04             	shl    $0x4,%eax
f0120608:	89 c2                	mov    %eax,%edx
f012060a:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0120610:	01 d0                	add    %edx,%eax
f0120612:	48                   	dec    %eax
f0120613:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0120619:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012061f:	ba 00 00 00 00       	mov    $0x0,%edx
f0120624:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012062a:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0120630:	29 d0                	sub    %edx,%eax
f0120632:	01 d8                	add    %ebx,%eax
f0120634:	2d 00 f0 1e 09       	sub    $0x91ef000,%eax
f0120639:	39 c1                	cmp    %eax,%ecx
f012063b:	74 17                	je     f0120654 <test_kfree+0x13fb>
f012063d:	83 ec 04             	sub    $0x4,%esp
f0120640:	68 bc a5 13 f0       	push   $0xf013a5bc
f0120645:	68 9f 05 00 00       	push   $0x59f
f012064a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012064f:	e8 52 fb fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120654:	e8 3b 36 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120659:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012065c:	74 17                	je     f0120675 <test_kfree+0x141c>
f012065e:	83 ec 04             	sub    $0x4,%esp
f0120661:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0120666:	68 a0 05 00 00       	push   $0x5a0
f012066b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120670:	e8 31 fb fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120675:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120678:	e8 53 ba fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012067d:	29 c3                	sub    %eax,%ebx
f012067f:	89 da                	mov    %ebx,%edx
f0120681:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0120687:	c1 e8 0c             	shr    $0xc,%eax
f012068a:	39 c2                	cmp    %eax,%edx
f012068c:	74 17                	je     f01206a5 <test_kfree+0x144c>
f012068e:	83 ec 04             	sub    $0x4,%esp
f0120691:	68 58 a5 13 f0       	push   $0xf013a558
f0120696:	68 a1 05 00 00       	push   $0x5a1
f012069b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01206a0:	e8 01 fb fd ff       	call   f01001a6 <_panic>
			lastIndices[10] = (reqAllocatedSpace)/sizeof(char) - 1;
f01206a5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01206ab:	48                   	dec    %eax
f01206ac:	89 85 10 fe ff ff    	mov    %eax,-0x1f0(%ebp)
			ptr = (char*)ptr_allocations[10];
f01206b2:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01206b8:	89 45 80             	mov    %eax,-0x80(%ebp)
//				ptr[i] = 10;
//			}

			//Allocate in merged freed space FROM the beginning
			//3 MB
			freeFrames = sys_calculate_free_frames() ;
f01206bb:	e8 10 ba fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01206c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01206c3:	e8 cc 35 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01206c8:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[11] = kmalloc(3*Mega);
f01206cb:	83 ec 0c             	sub    $0xc,%esp
f01206ce:	68 00 00 30 00       	push   $0x300000
f01206d3:	e8 0c 6d fe ff       	call   f01073e4 <kmalloc>
f01206d8:	83 c4 10             	add    $0x10,%esp
f01206db:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01206e1:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01206e7:	89 c1                	mov    %eax,%ecx
f01206e9:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f01206f0:	10 00 00 
f01206f3:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f01206f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01206fe:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0120704:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012070a:	ba 00 00 00 00       	mov    $0x0,%edx
f012070f:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0120715:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012071b:	29 d0                	sub    %edx,%eax
f012071d:	89 c3                	mov    %eax,%ebx
f012071f:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f0120726:	10 00 00 
f0120729:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012072e:	0f b6 d0             	movzbl %al,%edx
f0120731:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0120737:	01 d0                	add    %edx,%eax
f0120739:	48                   	dec    %eax
f012073a:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f0120740:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120746:	ba 00 00 00 00       	mov    $0x0,%edx
f012074b:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f0120751:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0120757:	29 d0                	sub    %edx,%eax
f0120759:	01 c3                	add    %eax,%ebx
f012075b:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0120762:	10 00 00 
f0120765:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012076a:	0f b6 c0             	movzbl %al,%eax
f012076d:	c1 e0 04             	shl    $0x4,%eax
f0120770:	89 c2                	mov    %eax,%edx
f0120772:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0120778:	01 d0                	add    %edx,%eax
f012077a:	48                   	dec    %eax
f012077b:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0120781:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120787:	ba 00 00 00 00       	mov    $0x0,%edx
f012078c:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0120792:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0120798:	29 d0                	sub    %edx,%eax
f012079a:	01 d8                	add    %ebx,%eax
f012079c:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01207a1:	39 c1                	cmp    %eax,%ecx
f01207a3:	74 17                	je     f01207bc <test_kfree+0x1563>
f01207a5:	83 ec 04             	sub    $0x4,%esp
f01207a8:	68 bc a5 13 f0       	push   $0xf013a5bc
f01207ad:	68 ae 05 00 00       	push   $0x5ae
f01207b2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01207b7:	e8 ea f9 fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01207bc:	e8 d3 34 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01207c1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01207c4:	74 17                	je     f01207dd <test_kfree+0x1584>
f01207c6:	83 ec 04             	sub    $0x4,%esp
f01207c9:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01207ce:	68 af 05 00 00       	push   $0x5af
f01207d3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01207d8:	e8 c9 f9 fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01207dd:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01207e0:	e8 eb b8 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01207e5:	29 c3                	sub    %eax,%ebx
f01207e7:	89 d8                	mov    %ebx,%eax
f01207e9:	3d 00 03 00 00       	cmp    $0x300,%eax
f01207ee:	74 17                	je     f0120807 <test_kfree+0x15ae>
f01207f0:	83 ec 04             	sub    $0x4,%esp
f01207f3:	68 58 a5 13 f0       	push   $0xf013a558
f01207f8:	68 b0 05 00 00       	push   $0x5b0
f01207fd:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120802:	e8 9f f9 fd ff       	call   f01001a6 <_panic>
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
f0120807:	c7 85 14 fe ff ff ff 	movl   $0x2fffff,-0x1ec(%ebp)
f012080e:	ff 2f 00 
			ptr = (char*)ptr_allocations[11];
f0120811:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120817:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[11]; ++i)
f012081a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120821:	eb 0e                	jmp    f0120831 <test_kfree+0x15d8>
			{
				ptr[i] = 8 ;
f0120823:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120826:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120829:	01 d0                	add    %edx,%eax
f012082b:	c6 00 08             	movb   $0x8,(%eax)
			if ((uint32) ptr_allocations[11] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[11] = (3*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[11];
			for (i = 0; i < lastIndices[11]; ++i)
f012082e:	ff 45 f4             	incl   -0xc(%ebp)
f0120831:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f0120837:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012083a:	7f e7                	jg     f0120823 <test_kfree+0x15ca>
			{
				ptr[i] = 8 ;
			}

			//2 KB
			freeFrames = sys_calculate_free_frames() ;
f012083c:	e8 8f b8 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120841:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120844:	e8 4b 34 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120849:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[12] = kmalloc(2*kilo);
f012084c:	83 ec 0c             	sub    $0xc,%esp
f012084f:	68 00 08 00 00       	push   $0x800
f0120854:	e8 8b 6b fe ff       	call   f01073e4 <kmalloc>
f0120859:	83 c4 10             	add    $0x10,%esp
f012085c:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0120862:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120868:	89 c1                	mov    %eax,%ecx
f012086a:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0120871:	10 00 00 
f0120874:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012087a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012087f:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0120885:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012088b:	ba 00 00 00 00       	mov    $0x0,%edx
f0120890:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0120896:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012089c:	29 d0                	sub    %edx,%eax
f012089e:	89 c3                	mov    %eax,%ebx
f01208a0:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01208a7:	10 00 00 
f01208aa:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01208af:	0f b6 d0             	movzbl %al,%edx
f01208b2:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01208b8:	01 d0                	add    %edx,%eax
f01208ba:	48                   	dec    %eax
f01208bb:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01208c1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01208c7:	ba 00 00 00 00       	mov    $0x0,%edx
f01208cc:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01208d2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01208d8:	29 d0                	sub    %edx,%eax
f01208da:	01 c3                	add    %eax,%ebx
f01208dc:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f01208e3:	10 00 00 
f01208e6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01208eb:	0f b6 c0             	movzbl %al,%eax
f01208ee:	c1 e0 04             	shl    $0x4,%eax
f01208f1:	89 c2                	mov    %eax,%edx
f01208f3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01208f9:	01 d0                	add    %edx,%eax
f01208fb:	48                   	dec    %eax
f01208fc:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f0120902:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120908:	ba 00 00 00 00       	mov    $0x0,%edx
f012090d:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f0120913:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0120919:	29 d0                	sub    %edx,%eax
f012091b:	01 d8                	add    %ebx,%eax
f012091d:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f0120922:	39 c1                	cmp    %eax,%ecx
f0120924:	74 17                	je     f012093d <test_kfree+0x16e4>
f0120926:	83 ec 04             	sub    $0x4,%esp
f0120929:	68 bc a5 13 f0       	push   $0xf013a5bc
f012092e:	68 bc 05 00 00       	push   $0x5bc
f0120933:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120938:	e8 69 f8 fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012093d:	e8 52 33 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120942:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120945:	74 17                	je     f012095e <test_kfree+0x1705>
f0120947:	83 ec 04             	sub    $0x4,%esp
f012094a:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012094f:	68 bd 05 00 00       	push   $0x5bd
f0120954:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120959:	e8 48 f8 fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f012095e:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120961:	e8 6a b7 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120966:	29 c3                	sub    %eax,%ebx
f0120968:	89 d8                	mov    %ebx,%eax
f012096a:	83 f8 01             	cmp    $0x1,%eax
f012096d:	74 17                	je     f0120986 <test_kfree+0x172d>
f012096f:	83 ec 04             	sub    $0x4,%esp
f0120972:	68 58 a5 13 f0       	push   $0xf013a558
f0120977:	68 be 05 00 00       	push   $0x5be
f012097c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120981:	e8 20 f8 fd ff       	call   f01001a6 <_panic>
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
f0120986:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012098d:	07 00 00 
			ptr = (char*)ptr_allocations[12];
f0120990:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120996:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[12]; ++i)
f0120999:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01209a0:	eb 0e                	jmp    f01209b0 <test_kfree+0x1757>
			{
				ptr[i] = 9 ;
f01209a2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01209a5:	8b 45 80             	mov    -0x80(%ebp),%eax
f01209a8:	01 d0                	add    %edx,%eax
f01209aa:	c6 00 09             	movb   $0x9,(%eax)
			if ((uint32) ptr_allocations[12] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[12] = (2*kilo)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[12];
			for (i = 0; i < lastIndices[12]; ++i)
f01209ad:	ff 45 f4             	incl   -0xc(%ebp)
f01209b0:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f01209b6:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01209b9:	7f e7                	jg     f01209a2 <test_kfree+0x1749>
			{
				ptr[i] = 9 ;
			}

			//1 MB
			freeFrames = sys_calculate_free_frames() ;
f01209bb:	e8 10 b7 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01209c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f01209c3:	e8 cc 32 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01209c8:	89 45 cc             	mov    %eax,-0x34(%ebp)
			ptr_allocations[13] = kmalloc(1*Mega);
f01209cb:	83 ec 0c             	sub    $0xc,%esp
f01209ce:	68 00 00 10 00       	push   $0x100000
f01209d3:	e8 0c 6a fe ff       	call   f01073e4 <kmalloc>
f01209d8:	83 c4 10             	add    $0x10,%esp
f01209db:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01209e1:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01209e7:	89 c1                	mov    %eax,%ecx
f01209e9:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f01209f0:	10 00 00 
f01209f3:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01209f9:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01209fe:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f0120a04:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0120a0a:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a0f:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f0120a15:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0120a1b:	29 d0                	sub    %edx,%eax
f0120a1d:	89 c3                	mov    %eax,%ebx
f0120a1f:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f0120a26:	10 00 00 
f0120a29:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120a2e:	0f b6 d0             	movzbl %al,%edx
f0120a31:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0120a37:	01 d0                	add    %edx,%eax
f0120a39:	48                   	dec    %eax
f0120a3a:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f0120a40:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0120a46:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a4b:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f0120a51:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0120a57:	29 d0                	sub    %edx,%eax
f0120a59:	01 c3                	add    %eax,%ebx
f0120a5b:	c7 85 58 fe ff ff 00 	movl   $0x1000,-0x1a8(%ebp)
f0120a62:	10 00 00 
f0120a65:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120a6a:	0f b6 c0             	movzbl %al,%eax
f0120a6d:	c1 e0 04             	shl    $0x4,%eax
f0120a70:	89 c2                	mov    %eax,%edx
f0120a72:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0120a78:	01 d0                	add    %edx,%eax
f0120a7a:	48                   	dec    %eax
f0120a7b:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
f0120a81:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0120a87:	ba 00 00 00 00       	mov    $0x0,%edx
f0120a8c:	f7 b5 58 fe ff ff    	divl   -0x1a8(%ebp)
f0120a92:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0120a98:	29 d0                	sub    %edx,%eax
f0120a9a:	01 d8                	add    %ebx,%eax
f0120a9c:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f0120aa1:	39 c1                	cmp    %eax,%ecx
f0120aa3:	74 17                	je     f0120abc <test_kfree+0x1863>
f0120aa5:	83 ec 04             	sub    $0x4,%esp
f0120aa8:	68 bc a5 13 f0       	push   $0xf013a5bc
f0120aad:	68 ca 05 00 00       	push   $0x5ca
f0120ab2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120ab7:	e8 ea f6 fd ff       	call   f01001a6 <_panic>
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120abc:	e8 d3 31 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120ac1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ac4:	74 17                	je     f0120add <test_kfree+0x1884>
f0120ac6:	83 ec 04             	sub    $0x4,%esp
f0120ac9:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0120ace:	68 cb 05 00 00       	push   $0x5cb
f0120ad3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120ad8:	e8 c9 f6 fd ff       	call   f01001a6 <_panic>
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0120add:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0120ae0:	e8 eb b5 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120ae5:	29 c3                	sub    %eax,%ebx
f0120ae7:	89 d8                	mov    %ebx,%eax
f0120ae9:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120aee:	74 17                	je     f0120b07 <test_kfree+0x18ae>
f0120af0:	83 ec 04             	sub    $0x4,%esp
f0120af3:	68 58 a5 13 f0       	push   $0xf013a558
f0120af8:	68 cc 05 00 00       	push   $0x5cc
f0120afd:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120b02:	e8 9f f6 fd ff       	call   f01001a6 <_panic>
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
f0120b07:	c7 85 1c fe ff ff ff 	movl   $0xfffff,-0x1e4(%ebp)
f0120b0e:	ff 0f 00 
			ptr = (char*)ptr_allocations[13];
f0120b11:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0120b17:	89 45 80             	mov    %eax,-0x80(%ebp)
			for (i = 0; i < lastIndices[13]; ++i)
f0120b1a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0120b21:	eb 0e                	jmp    f0120b31 <test_kfree+0x18d8>
			{
				ptr[i] = 10 ;
f0120b23:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0120b26:	8b 45 80             	mov    -0x80(%ebp),%eax
f0120b29:	01 d0                	add    %edx,%eax
f0120b2b:	c6 00 0a             	movb   $0xa,(%eax)
			if ((uint32) ptr_allocations[13] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
			if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
			if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
			lastIndices[13] = (1*Mega)/sizeof(char) - 1;
			ptr = (char*)ptr_allocations[13];
			for (i = 0; i < lastIndices[13]; ++i)
f0120b2e:	ff 45 f4             	incl   -0xc(%ebp)
f0120b31:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0120b37:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0120b3a:	7f e7                	jg     f0120b23 <test_kfree+0x18ca>
			{
				ptr[i] = 10 ;
			}
		}
	}
	cprintf("\b\b\b45%");
f0120b3c:	83 ec 0c             	sub    $0xc,%esp
f0120b3f:	68 f6 ac 13 f0       	push   $0xf013acf6
f0120b44:	e8 e4 00 fe ff       	call   f0100c2d <cprintf>
f0120b49:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0120b4c:	e8 7f b5 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120b51:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120b54:	e8 3b 31 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120b59:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0120b5c:	8b 85 58 fd ff ff    	mov    -0x2a8(%ebp),%eax
f0120b62:	83 ec 0c             	sub    $0xc,%esp
f0120b65:	50                   	push   %eax
f0120b66:	e8 93 68 fe ff       	call   f01073fe <kfree>
f0120b6b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120b6e:	e8 21 31 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120b73:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120b76:	74 17                	je     f0120b8f <test_kfree+0x1936>
f0120b78:	83 ec 04             	sub    $0x4,%esp
f0120b7b:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0120b80:	68 dd 05 00 00       	push   $0x5dd
f0120b85:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120b8a:	e8 17 f6 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f0120b8f:	e8 3c b5 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120b94:	89 c2                	mov    %eax,%edx
f0120b96:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120b99:	29 c2                	sub    %eax,%edx
f0120b9b:	89 d0                	mov    %edx,%eax
f0120b9d:	83 f8 02             	cmp    $0x2,%eax
f0120ba0:	74 17                	je     f0120bb9 <test_kfree+0x1960>
f0120ba2:	83 ec 04             	sub    $0x4,%esp
f0120ba5:	68 60 ac 13 f0       	push   $0xf013ac60
f0120baa:	68 de 05 00 00       	push   $0x5de
f0120baf:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120bb4:	e8 ed f5 fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f0120bb9:	e8 12 b5 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120bbe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120bc1:	e8 ce 30 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120bc6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f0120bc9:	8b 85 5c fd ff ff    	mov    -0x2a4(%ebp),%eax
f0120bcf:	83 ec 0c             	sub    $0xc,%esp
f0120bd2:	50                   	push   %eax
f0120bd3:	e8 26 68 fe ff       	call   f01073fe <kfree>
f0120bd8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120bdb:	e8 b4 30 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120be0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120be3:	74 17                	je     f0120bfc <test_kfree+0x19a3>
f0120be5:	83 ec 04             	sub    $0x4,%esp
f0120be8:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0120bed:	68 e4 05 00 00       	push   $0x5e4
f0120bf2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120bf7:	e8 aa f5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120bfc:	e8 cf b4 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120c01:	89 c2                	mov    %eax,%edx
f0120c03:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c06:	29 c2                	sub    %eax,%edx
f0120c08:	89 d0                	mov    %edx,%eax
f0120c0a:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120c0f:	74 17                	je     f0120c28 <test_kfree+0x19cf>
f0120c11:	83 ec 04             	sub    $0x4,%esp
f0120c14:	68 60 ac 13 f0       	push   $0xf013ac60
f0120c19:	68 e5 05 00 00       	push   $0x5e5
f0120c1e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120c23:	e8 7e f5 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0120c28:	e8 a3 b4 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120c2d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c30:	e8 5f 30 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120c35:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0120c38:	8b 85 54 fd ff ff    	mov    -0x2ac(%ebp),%eax
f0120c3e:	83 ec 0c             	sub    $0xc,%esp
f0120c41:	50                   	push   %eax
f0120c42:	e8 b7 67 fe ff       	call   f01073fe <kfree>
f0120c47:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120c4a:	e8 45 30 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120c4f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120c52:	74 17                	je     f0120c6b <test_kfree+0x1a12>
f0120c54:	83 ec 04             	sub    $0x4,%esp
f0120c57:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0120c5c:	68 eb 05 00 00       	push   $0x5eb
f0120c61:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120c66:	e8 3b f5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120c6b:	e8 60 b4 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120c70:	89 c2                	mov    %eax,%edx
f0120c72:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120c75:	29 c2                	sub    %eax,%edx
f0120c77:	89 d0                	mov    %edx,%eax
f0120c79:	83 f8 01             	cmp    $0x1,%eax
f0120c7c:	74 17                	je     f0120c95 <test_kfree+0x1a3c>
f0120c7e:	83 ec 04             	sub    $0x4,%esp
f0120c81:	68 60 ac 13 f0       	push   $0xf013ac60
f0120c86:	68 ec 05 00 00       	push   $0x5ec
f0120c8b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120c90:	e8 11 f5 fd ff       	call   f01001a6 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f0120c95:	e8 36 b4 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120c9a:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120c9d:	e8 f2 2f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120ca2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f0120ca5:	8b 85 64 fd ff ff    	mov    -0x29c(%ebp),%eax
f0120cab:	83 ec 0c             	sub    $0xc,%esp
f0120cae:	50                   	push   %eax
f0120caf:	e8 4a 67 fe ff       	call   f01073fe <kfree>
f0120cb4:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120cb7:	e8 d8 2f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120cbc:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120cbf:	74 17                	je     f0120cd8 <test_kfree+0x1a7f>
f0120cc1:	83 ec 04             	sub    $0x4,%esp
f0120cc4:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0120cc9:	68 f2 05 00 00       	push   $0x5f2
f0120cce:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120cd3:	e8 ce f4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f0120cd8:	e8 f3 b3 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120cdd:	89 c2                	mov    %eax,%edx
f0120cdf:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120ce2:	29 c2                	sub    %eax,%edx
f0120ce4:	89 d0                	mov    %edx,%eax
f0120ce6:	83 f8 04             	cmp    $0x4,%eax
f0120ce9:	74 17                	je     f0120d02 <test_kfree+0x1aa9>
f0120ceb:	83 ec 04             	sub    $0x4,%esp
f0120cee:	68 60 ac 13 f0       	push   $0xf013ac60
f0120cf3:	68 f3 05 00 00       	push   $0x5f3
f0120cf8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120cfd:	e8 a4 f4 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0120d02:	e8 c9 b3 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120d07:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d0a:	e8 85 2f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120d0f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0120d12:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0120d18:	83 ec 0c             	sub    $0xc,%esp
f0120d1b:	50                   	push   %eax
f0120d1c:	e8 dd 66 fe ff       	call   f01073fe <kfree>
f0120d21:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d24:	e8 6b 2f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120d29:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d2c:	74 17                	je     f0120d45 <test_kfree+0x1aec>
f0120d2e:	83 ec 04             	sub    $0x4,%esp
f0120d31:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0120d36:	68 f9 05 00 00       	push   $0x5f9
f0120d3b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120d40:	e8 61 f4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 5) panic("Wrong kfree: pages in memory are not freed correctly");
f0120d45:	e8 86 b3 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120d4a:	89 c2                	mov    %eax,%edx
f0120d4c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120d4f:	29 c2                	sub    %eax,%edx
f0120d51:	89 d0                	mov    %edx,%eax
f0120d53:	83 f8 05             	cmp    $0x5,%eax
f0120d56:	74 17                	je     f0120d6f <test_kfree+0x1b16>
f0120d58:	83 ec 04             	sub    $0x4,%esp
f0120d5b:	68 60 ac 13 f0       	push   $0xf013ac60
f0120d60:	68 fa 05 00 00       	push   $0x5fa
f0120d65:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120d6a:	e8 37 f4 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0120d6f:	e8 5c b3 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120d74:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0120d77:	e8 18 2f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120d7c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0120d7f:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0120d85:	83 ec 0c             	sub    $0xc,%esp
f0120d88:	50                   	push   %eax
f0120d89:	e8 70 66 fe ff       	call   f01073fe <kfree>
f0120d8e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120d91:	e8 fe 2e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120d96:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120d99:	74 17                	je     f0120db2 <test_kfree+0x1b59>
f0120d9b:	83 ec 04             	sub    $0x4,%esp
f0120d9e:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0120da3:	68 00 06 00 00       	push   $0x600
f0120da8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120dad:	e8 f4 f3 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0120db2:	e8 19 b3 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120db7:	89 c2                	mov    %eax,%edx
f0120db9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120dbc:	29 c2                	sub    %eax,%edx
f0120dbe:	89 d0                	mov    %edx,%eax
f0120dc0:	3d 00 01 00 00       	cmp    $0x100,%eax
f0120dc5:	74 17                	je     f0120dde <test_kfree+0x1b85>
f0120dc7:	83 ec 04             	sub    $0x4,%esp
f0120dca:	68 60 ac 13 f0       	push   $0xf013ac60
f0120dcf:	68 01 06 00 00       	push   $0x601
f0120dd4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120dd9:	e8 c8 f3 fd ff       	call   f01001a6 <_panic>

		if (isKHeapPlacementStrategyNEXTFIT())
f0120dde:	e8 51 5d ff ff       	call   f0116b34 <isKHeapPlacementStrategyNEXTFIT>
f0120de3:	84 c0                	test   %al,%al
f0120de5:	0f 84 80 02 00 00    	je     f012106b <test_kfree+0x1e12>
		{
			//cprintf("FREE in NEXT FIT\n");
			//kfree Remaining MBs
			freeFrames = sys_calculate_free_frames() ;
f0120deb:	e8 e0 b2 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120df0:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120df3:	e8 9c 2e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120df8:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[10]);
f0120dfb:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0120e01:	83 ec 0c             	sub    $0xc,%esp
f0120e04:	50                   	push   %eax
f0120e05:	e8 f4 65 fe ff       	call   f01073fe <kfree>
f0120e0a:	83 c4 10             	add    $0x10,%esp
			uint32 reqAllocatedSpace = KERNEL_HEAP_MAX - (ACTUAL_START + 13*Mega + 52*kilo + 1*Mega);
f0120e0d:	c7 85 50 fe ff ff 00 	movl   $0x1000,-0x1b0(%ebp)
f0120e14:	10 00 00 
f0120e17:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0120e1d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0120e22:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
f0120e28:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120e2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e33:	f7 b5 50 fe ff ff    	divl   -0x1b0(%ebp)
f0120e39:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0120e3f:	29 d0                	sub    %edx,%eax
f0120e41:	89 c1                	mov    %eax,%ecx
f0120e43:	c7 85 48 fe ff ff 00 	movl   $0x1000,-0x1b8(%ebp)
f0120e4a:	10 00 00 
f0120e4d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120e52:	0f b6 d0             	movzbl %al,%edx
f0120e55:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0120e5b:	01 d0                	add    %edx,%eax
f0120e5d:	48                   	dec    %eax
f0120e5e:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
f0120e64:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0120e6a:	ba 00 00 00 00       	mov    $0x0,%edx
f0120e6f:	f7 b5 48 fe ff ff    	divl   -0x1b8(%ebp)
f0120e75:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f0120e7b:	29 d0                	sub    %edx,%eax
f0120e7d:	01 c1                	add    %eax,%ecx
f0120e7f:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0120e86:	10 00 00 
f0120e89:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0120e8e:	0f b6 c0             	movzbl %al,%eax
f0120e91:	c1 e0 04             	shl    $0x4,%eax
f0120e94:	89 c2                	mov    %eax,%edx
f0120e96:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0120e9c:	01 d0                	add    %edx,%eax
f0120e9e:	48                   	dec    %eax
f0120e9f:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0120ea5:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120eab:	ba 00 00 00 00       	mov    $0x0,%edx
f0120eb0:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0120eb6:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0120ebc:	29 d0                	sub    %edx,%eax
f0120ebe:	01 c8                	add    %ecx,%eax
f0120ec0:	ba 00 e0 1e 09       	mov    $0x91ee000,%edx
f0120ec5:	29 c2                	sub    %eax,%edx
f0120ec7:	89 d0                	mov    %edx,%eax
f0120ec9:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120ecf:	e8 c0 2d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120ed4:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120ed7:	74 17                	je     f0120ef0 <test_kfree+0x1c97>
f0120ed9:	83 ec 04             	sub    $0x4,%esp
f0120edc:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0120ee1:	68 0b 06 00 00       	push   $0x60b
f0120ee6:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120eeb:	e8 b6 f2 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != reqAllocatedSpace/PAGE_SIZE) panic("Wrong kfree: pages in memory are not freed correctly");
f0120ef0:	e8 db b1 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120ef5:	89 c2                	mov    %eax,%edx
f0120ef7:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120efa:	29 c2                	sub    %eax,%edx
f0120efc:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0120f02:	c1 e8 0c             	shr    $0xc,%eax
f0120f05:	39 c2                	cmp    %eax,%edx
f0120f07:	74 17                	je     f0120f20 <test_kfree+0x1cc7>
f0120f09:	83 ec 04             	sub    $0x4,%esp
f0120f0c:	68 60 ac 13 f0       	push   $0xf013ac60
f0120f11:	68 0c 06 00 00       	push   $0x60c
f0120f16:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120f1b:	e8 86 f2 fd ff       	call   f01001a6 <_panic>

			//kfree 3 MB
			freeFrames = sys_calculate_free_frames() ;
f0120f20:	e8 ab b1 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120f25:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f28:	e8 67 2d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120f2d:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[11]);
f0120f30:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0120f36:	83 ec 0c             	sub    $0xc,%esp
f0120f39:	50                   	push   %eax
f0120f3a:	e8 bf 64 fe ff       	call   f01073fe <kfree>
f0120f3f:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120f42:	e8 4d 2d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120f47:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120f4a:	74 17                	je     f0120f63 <test_kfree+0x1d0a>
f0120f4c:	83 ec 04             	sub    $0x4,%esp
f0120f4f:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0120f54:	68 12 06 00 00       	push   $0x612
f0120f59:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120f5e:	e8 43 f2 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0120f63:	e8 68 b1 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120f68:	89 c2                	mov    %eax,%edx
f0120f6a:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120f6d:	29 c2                	sub    %eax,%edx
f0120f6f:	89 d0                	mov    %edx,%eax
f0120f71:	3d 00 03 00 00       	cmp    $0x300,%eax
f0120f76:	74 17                	je     f0120f8f <test_kfree+0x1d36>
f0120f78:	83 ec 04             	sub    $0x4,%esp
f0120f7b:	68 60 ac 13 f0       	push   $0xf013ac60
f0120f80:	68 13 06 00 00       	push   $0x613
f0120f85:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120f8a:	e8 17 f2 fd ff       	call   f01001a6 <_panic>

			//kfree 2 KB
			freeFrames = sys_calculate_free_frames() ;
f0120f8f:	e8 3c b1 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120f94:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0120f97:	e8 f8 2c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120f9c:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[12]);
f0120f9f:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0120fa5:	83 ec 0c             	sub    $0xc,%esp
f0120fa8:	50                   	push   %eax
f0120fa9:	e8 50 64 fe ff       	call   f01073fe <kfree>
f0120fae:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0120fb1:	e8 de 2c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0120fb6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0120fb9:	74 17                	je     f0120fd2 <test_kfree+0x1d79>
f0120fbb:	83 ec 04             	sub    $0x4,%esp
f0120fbe:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0120fc3:	68 19 06 00 00       	push   $0x619
f0120fc8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120fcd:	e8 d4 f1 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0120fd2:	e8 f9 b0 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0120fd7:	89 c2                	mov    %eax,%edx
f0120fd9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0120fdc:	29 c2                	sub    %eax,%edx
f0120fde:	89 d0                	mov    %edx,%eax
f0120fe0:	83 f8 01             	cmp    $0x1,%eax
f0120fe3:	74 17                	je     f0120ffc <test_kfree+0x1da3>
f0120fe5:	83 ec 04             	sub    $0x4,%esp
f0120fe8:	68 60 ac 13 f0       	push   $0xf013ac60
f0120fed:	68 1a 06 00 00       	push   $0x61a
f0120ff2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0120ff7:	e8 aa f1 fd ff       	call   f01001a6 <_panic>

			//kfree 1 MB
			freeFrames = sys_calculate_free_frames() ;
f0120ffc:	e8 cf b0 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121001:	89 45 d0             	mov    %eax,-0x30(%ebp)
			freeDiskFrames = pf_calculate_free_frames() ;
f0121004:	e8 8b 2c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121009:	89 45 cc             	mov    %eax,-0x34(%ebp)
			kfree(ptr_allocations[13]);
f012100c:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0121012:	83 ec 0c             	sub    $0xc,%esp
f0121015:	50                   	push   %eax
f0121016:	e8 e3 63 fe ff       	call   f01073fe <kfree>
f012101b:	83 c4 10             	add    $0x10,%esp
			if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012101e:	e8 71 2c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121023:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121026:	74 17                	je     f012103f <test_kfree+0x1de6>
f0121028:	83 ec 04             	sub    $0x4,%esp
f012102b:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0121030:	68 20 06 00 00       	push   $0x620
f0121035:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012103a:	e8 67 f1 fd ff       	call   f01001a6 <_panic>
			if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012103f:	e8 8c b0 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121044:	89 c2                	mov    %eax,%edx
f0121046:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121049:	29 c2                	sub    %eax,%edx
f012104b:	89 d0                	mov    %edx,%eax
f012104d:	3d 00 01 00 00       	cmp    $0x100,%eax
f0121052:	74 17                	je     f012106b <test_kfree+0x1e12>
f0121054:	83 ec 04             	sub    $0x4,%esp
f0121057:	68 60 ac 13 f0       	push   $0xf013ac60
f012105c:	68 21 06 00 00       	push   $0x621
f0121061:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121066:	e8 3b f1 fd ff       	call   f01001a6 <_panic>

		}
		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f012106b:	e8 60 b0 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121070:	89 c2                	mov    %eax,%edx
f0121072:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0121075:	39 c2                	cmp    %eax,%edx
f0121077:	74 17                	je     f0121090 <test_kfree+0x1e37>
f0121079:	83 ec 04             	sub    $0x4,%esp
f012107c:	68 00 ad 13 f0       	push   $0xf013ad00
f0121081:	68 24 06 00 00       	push   $0x624
f0121086:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012108b:	e8 16 f1 fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b60%");
f0121090:	83 ec 0c             	sub    $0xc,%esp
f0121093:	68 34 ad 13 f0       	push   $0xf013ad34
f0121098:	e8 90 fb fd ff       	call   f0100c2d <cprintf>
f012109d:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f01210a0:	83 ec 0c             	sub    $0xc,%esp
f01210a3:	6a 03                	push   $0x3
f01210a5:	e8 cf b4 fe ff       	call   f010c579 <sys_bypassPageFault>
f01210aa:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f01210ad:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01210b4:	e9 82 00 00 00       	jmp    f012113b <test_kfree+0x1ee2>
		{
			ptr = (char *) ptr_allocations[i];
f01210b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01210bc:	8b 84 85 48 fd ff ff 	mov    -0x2b8(%ebp,%eax,4),%eax
f01210c3:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f01210c6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01210c9:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f01210cc:	e8 96 b4 fe ff       	call   f010c567 <sys_rcr2>
f01210d1:	89 c2                	mov    %eax,%edx
f01210d3:	8b 45 80             	mov    -0x80(%ebp),%eax
f01210d6:	39 c2                	cmp    %eax,%edx
f01210d8:	74 17                	je     f01210f1 <test_kfree+0x1e98>
f01210da:	83 ec 04             	sub    $0x4,%esp
f01210dd:	68 3c ad 13 f0       	push   $0xf013ad3c
f01210e2:	68 33 06 00 00       	push   $0x633
f01210e7:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01210ec:	e8 b5 f0 fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f01210f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01210f4:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f01210fb:	89 c2                	mov    %eax,%edx
f01210fd:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121100:	01 d0                	add    %edx,%eax
f0121102:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0121105:	e8 5d b4 fe ff       	call   f010c567 <sys_rcr2>
f012110a:	89 c2                	mov    %eax,%edx
f012110c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012110f:	8b 84 85 e8 fd ff ff 	mov    -0x218(%ebp,%eax,4),%eax
f0121116:	89 c1                	mov    %eax,%ecx
f0121118:	8b 45 80             	mov    -0x80(%ebp),%eax
f012111b:	01 c8                	add    %ecx,%eax
f012111d:	39 c2                	cmp    %eax,%edx
f012111f:	74 17                	je     f0121138 <test_kfree+0x1edf>
f0121121:	83 ec 04             	sub    $0x4,%esp
f0121124:	68 3c ad 13 f0       	push   $0xf013ad3c
f0121129:	68 35 06 00 00       	push   $0x635
f012112e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121133:	e8 6e f0 fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0121138:	ff 45 f4             	incl   -0xc(%ebp)
f012113b:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f012113f:	0f 8e 74 ff ff ff    	jle    f01210b9 <test_kfree+0x1e60>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0121145:	83 ec 0c             	sub    $0xc,%esp
f0121148:	6a 00                	push   $0x0
f012114a:	e8 2a b4 fe ff       	call   f010c579 <sys_bypassPageFault>
f012114f:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0121152:	83 ec 0c             	sub    $0xc,%esp
f0121155:	68 81 ad 13 f0       	push   $0xf013ad81
f012115a:	e8 ce fa fd ff       	call   f0100c2d <cprintf>
f012115f:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0121162:	e8 69 af fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121167:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012116a:	e8 25 2b fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012116f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0121172:	8b 85 48 fd ff ff    	mov    -0x2b8(%ebp),%eax
f0121178:	83 ec 0c             	sub    $0xc,%esp
f012117b:	50                   	push   %eax
f012117c:	e8 7d 62 fe ff       	call   f01073fe <kfree>
f0121181:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121184:	e8 0b 2b fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121189:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012118c:	74 17                	je     f01211a5 <test_kfree+0x1f4c>
f012118e:	83 ec 04             	sub    $0x4,%esp
f0121191:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0121196:	68 43 06 00 00       	push   $0x643
f012119b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01211a0:	e8 01 f0 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01211a5:	e8 26 af fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01211aa:	89 c2                	mov    %eax,%edx
f01211ac:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01211af:	39 c2                	cmp    %eax,%edx
f01211b1:	74 17                	je     f01211ca <test_kfree+0x1f71>
f01211b3:	83 ec 04             	sub    $0x4,%esp
f01211b6:	68 88 ad 13 f0       	push   $0xf013ad88
f01211bb:	68 44 06 00 00       	push   $0x644
f01211c0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01211c5:	e8 dc ef fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f01211ca:	e8 01 af fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01211cf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01211d2:	e8 bd 2a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01211d7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f01211da:	8b 85 50 fd ff ff    	mov    -0x2b0(%ebp),%eax
f01211e0:	83 ec 0c             	sub    $0xc,%esp
f01211e3:	50                   	push   %eax
f01211e4:	e8 15 62 fe ff       	call   f01073fe <kfree>
f01211e9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01211ec:	e8 a3 2a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01211f1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01211f4:	74 17                	je     f012120d <test_kfree+0x1fb4>
f01211f6:	83 ec 04             	sub    $0x4,%esp
f01211f9:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01211fe:	68 4a 06 00 00       	push   $0x64a
f0121203:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121208:	e8 99 ef fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f012120d:	e8 be ae fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121212:	89 c2                	mov    %eax,%edx
f0121214:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0121217:	39 c2                	cmp    %eax,%edx
f0121219:	74 17                	je     f0121232 <test_kfree+0x1fd9>
f012121b:	83 ec 04             	sub    $0x4,%esp
f012121e:	68 88 ad 13 f0       	push   $0xf013ad88
f0121223:	68 4b 06 00 00       	push   $0x64b
f0121228:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012122d:	e8 74 ef fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0121232:	e8 99 ae fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121237:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012123a:	e8 55 2a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012123f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0121242:	8b 85 68 fd ff ff    	mov    -0x298(%ebp),%eax
f0121248:	83 ec 0c             	sub    $0xc,%esp
f012124b:	50                   	push   %eax
f012124c:	e8 ad 61 fe ff       	call   f01073fe <kfree>
f0121251:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121254:	e8 3b 2a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121259:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012125c:	74 17                	je     f0121275 <test_kfree+0x201c>
f012125e:	83 ec 04             	sub    $0x4,%esp
f0121261:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0121266:	68 51 06 00 00       	push   $0x651
f012126b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121270:	e8 31 ef fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0121275:	e8 56 ae fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012127a:	89 c2                	mov    %eax,%edx
f012127c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012127f:	39 c2                	cmp    %eax,%edx
f0121281:	74 17                	je     f012129a <test_kfree+0x2041>
f0121283:	83 ec 04             	sub    $0x4,%esp
f0121286:	68 88 ad 13 f0       	push   $0xf013ad88
f012128b:	68 52 06 00 00       	push   $0x652
f0121290:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121295:	e8 0c ef fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012129a:	e8 31 ae fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012129f:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01212a2:	e8 ed 29 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01212a7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f01212aa:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f01212b0:	83 ec 0c             	sub    $0xc,%esp
f01212b3:	50                   	push   %eax
f01212b4:	e8 45 61 fe ff       	call   f01073fe <kfree>
f01212b9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01212bc:	e8 d3 29 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01212c1:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01212c4:	74 17                	je     f01212dd <test_kfree+0x2084>
f01212c6:	83 ec 04             	sub    $0x4,%esp
f01212c9:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01212ce:	68 58 06 00 00       	push   $0x658
f01212d3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01212d8:	e8 c9 ee fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f01212dd:	e8 ee ad fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01212e2:	89 c2                	mov    %eax,%edx
f01212e4:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01212e7:	39 c2                	cmp    %eax,%edx
f01212e9:	74 17                	je     f0121302 <test_kfree+0x20a9>
f01212eb:	83 ec 04             	sub    $0x4,%esp
f01212ee:	68 88 ad 13 f0       	push   $0xf013ad88
f01212f3:	68 59 06 00 00       	push   $0x659
f01212f8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01212fd:	e8 a4 ee fd ff       	call   f01001a6 <_panic>

	}
	cprintf("\b\b\b85%");
f0121302:	83 ec 0c             	sub    $0xc,%esp
f0121305:	68 cf ad 13 f0       	push   $0xf013adcf
f012130a:	e8 1e f9 fd ff       	call   f0100c2d <cprintf>
f012130f:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0121312:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0121319:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0121320:	eb 48                	jmp    f012136a <test_kfree+0x2111>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0121322:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0121325:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012132a:	83 ec 04             	sub    $0x4,%esp
f012132d:	8d 8d 44 fd ff ff    	lea    -0x2bc(%ebp),%ecx
f0121333:	51                   	push   %ecx
f0121334:	52                   	push   %edx
f0121335:	50                   	push   %eax
f0121336:	e8 36 56 fe ff       	call   f0106971 <get_page_table>
f012133b:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012133e:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0121344:	85 c0                	test   %eax,%eax
f0121346:	75 17                	jne    f012135f <test_kfree+0x2106>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0121348:	83 ec 04             	sub    $0x4,%esp
f012134b:	68 d8 ad 13 f0       	push   $0xf013add8
f0121350:	68 67 06 00 00       	push   $0x667
f0121355:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012135a:	e8 47 ee fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012135f:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0121366:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f012136a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012136e:	78 b2                	js     f0121322 <test_kfree+0x20c9>
f0121370:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0121374:	7f 09                	jg     f012137f <test_kfree+0x2126>
f0121376:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012137d:	76 a3                	jbe    f0121322 <test_kfree+0x20c9>
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012137f:	83 ec 0c             	sub    $0xc,%esp
f0121382:	68 ba a6 13 f0       	push   $0xf013a6ba
f0121387:	e8 a1 f8 fd ff       	call   f0100c2d <cprintf>
f012138c:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f012138f:	83 ec 0c             	sub    $0xc,%esp
f0121392:	68 40 ae 13 f0       	push   $0xf013ae40
f0121397:	e8 91 f8 fd ff       	call   f0100c2d <cprintf>
f012139c:	83 c4 10             	add    $0x10,%esp

	return 1;
f012139f:	b8 01 00 00 00       	mov    $0x1,%eax

}
f01213a4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f01213a7:	5b                   	pop    %ebx
f01213a8:	5f                   	pop    %edi
f01213a9:	5d                   	pop    %ebp
f01213aa:	c3                   	ret    

f01213ab <test_kfree_bestfirstfit>:

int test_kfree_bestfirstfit()
{
f01213ab:	55                   	push   %ebp
f01213ac:	89 e5                	mov    %esp,%ebp
f01213ae:	57                   	push   %edi
f01213af:	53                   	push   %ebx
f01213b0:	81 ec 40 02 00 00    	sub    $0x240,%esp
	cprintf("==============================================\n");
f01213b6:	83 ec 0c             	sub    $0xc,%esp
f01213b9:	68 18 a4 13 f0       	push   $0xf013a418
f01213be:	e8 6a f8 fd ff       	call   f0100c2d <cprintf>
f01213c3:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f01213c6:	83 ec 0c             	sub    $0xc,%esp
f01213c9:	68 48 a4 13 f0       	push   $0xf013a448
f01213ce:	e8 5a f8 fd ff       	call   f0100c2d <cprintf>
f01213d3:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01213d6:	83 ec 0c             	sub    $0xc,%esp
f01213d9:	68 18 a4 13 f0       	push   $0xf013a418
f01213de:	e8 4a f8 fd ff       	call   f0100c2d <cprintf>
f01213e3:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01213e6:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f01213ea:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01213ee:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01213f4:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01213fa:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f0121401:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0121408:	e8 c3 ac fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012140d:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0121410:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f0121416:	b9 14 00 00 00       	mov    $0x14,%ecx
f012141b:	b8 00 00 00 00       	mov    $0x0,%eax
f0121420:	89 d7                	mov    %edx,%edi
f0121422:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0121424:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f012142a:	b9 14 00 00 00       	mov    $0x14,%ecx
f012142f:	b8 00 00 00 00       	mov    $0x0,%eax
f0121434:	89 d7                	mov    %edx,%edi
f0121436:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0121438:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f012143e:	b9 14 00 00 00       	mov    $0x14,%ecx
f0121443:	b8 00 00 00 00       	mov    $0x0,%eax
f0121448:	89 d7                	mov    %edx,%edi
f012144a:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012144c:	e8 7f ac fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121451:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121454:	e8 3b 28 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121459:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012145c:	83 ec 0c             	sub    $0xc,%esp
f012145f:	68 00 fc 1f 00       	push   $0x1ffc00
f0121464:	e8 7b 5f fe ff       	call   f01073e4 <kmalloc>
f0121469:	83 c4 10             	add    $0x10,%esp
f012146c:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121472:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121478:	89 c1                	mov    %eax,%ecx
f012147a:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0121481:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0121484:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121489:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f012148c:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012148f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121494:	f7 75 c8             	divl   -0x38(%ebp)
f0121497:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012149a:	29 d0                	sub    %edx,%eax
f012149c:	89 c3                	mov    %eax,%ebx
f012149e:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f01214a5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01214aa:	0f b6 d0             	movzbl %al,%edx
f01214ad:	8b 45 c0             	mov    -0x40(%ebp),%eax
f01214b0:	01 d0                	add    %edx,%eax
f01214b2:	48                   	dec    %eax
f01214b3:	89 45 bc             	mov    %eax,-0x44(%ebp)
f01214b6:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01214b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01214be:	f7 75 c0             	divl   -0x40(%ebp)
f01214c1:	8b 45 bc             	mov    -0x44(%ebp),%eax
f01214c4:	29 d0                	sub    %edx,%eax
f01214c6:	01 c3                	add    %eax,%ebx
f01214c8:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f01214cf:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01214d4:	0f b6 c0             	movzbl %al,%eax
f01214d7:	c1 e0 04             	shl    $0x4,%eax
f01214da:	89 c2                	mov    %eax,%edx
f01214dc:	8b 45 b8             	mov    -0x48(%ebp),%eax
f01214df:	01 d0                	add    %edx,%eax
f01214e1:	48                   	dec    %eax
f01214e2:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f01214e5:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01214e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01214ed:	f7 75 b8             	divl   -0x48(%ebp)
f01214f0:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f01214f3:	29 d0                	sub    %edx,%eax
f01214f5:	01 d8                	add    %ebx,%eax
f01214f7:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01214fc:	39 c1                	cmp    %eax,%ecx
f01214fe:	74 17                	je     f0121517 <test_kfree_bestfirstfit+0x16c>
f0121500:	83 ec 04             	sub    $0x4,%esp
f0121503:	68 bc a5 13 f0       	push   $0xf013a5bc
f0121508:	68 95 06 00 00       	push   $0x695
f012150d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121512:	e8 8f ec fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121517:	e8 78 27 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012151c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012151f:	74 17                	je     f0121538 <test_kfree_bestfirstfit+0x18d>
f0121521:	83 ec 04             	sub    $0x4,%esp
f0121524:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0121529:	68 96 06 00 00       	push   $0x696
f012152e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121533:	e8 6e ec fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121538:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012153b:	e8 90 ab fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121540:	29 c3                	sub    %eax,%ebx
f0121542:	89 d8                	mov    %ebx,%eax
f0121544:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121549:	74 17                	je     f0121562 <test_kfree_bestfirstfit+0x1b7>
f012154b:	83 ec 04             	sub    $0x4,%esp
f012154e:	68 58 a5 13 f0       	push   $0xf013a558
f0121553:	68 97 06 00 00       	push   $0x697
f0121558:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012155d:	e8 44 ec fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0121562:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0121569:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012156c:	e8 5f ab fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121571:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121574:	e8 1b 27 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121579:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f012157c:	83 ec 0c             	sub    $0xc,%esp
f012157f:	68 00 fc 1f 00       	push   $0x1ffc00
f0121584:	e8 5b 5e fe ff       	call   f01073e4 <kmalloc>
f0121589:	83 c4 10             	add    $0x10,%esp
f012158c:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121592:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0121598:	89 c1                	mov    %eax,%ecx
f012159a:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f01215a1:	8b 45 b0             	mov    -0x50(%ebp),%eax
f01215a4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01215a9:	89 45 ac             	mov    %eax,-0x54(%ebp)
f01215ac:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01215af:	ba 00 00 00 00       	mov    $0x0,%edx
f01215b4:	f7 75 b0             	divl   -0x50(%ebp)
f01215b7:	8b 45 ac             	mov    -0x54(%ebp),%eax
f01215ba:	29 d0                	sub    %edx,%eax
f01215bc:	89 c3                	mov    %eax,%ebx
f01215be:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f01215c5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01215ca:	0f b6 d0             	movzbl %al,%edx
f01215cd:	8b 45 a8             	mov    -0x58(%ebp),%eax
f01215d0:	01 d0                	add    %edx,%eax
f01215d2:	48                   	dec    %eax
f01215d3:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f01215d6:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01215d9:	ba 00 00 00 00       	mov    $0x0,%edx
f01215de:	f7 75 a8             	divl   -0x58(%ebp)
f01215e1:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01215e4:	29 d0                	sub    %edx,%eax
f01215e6:	01 c3                	add    %eax,%ebx
f01215e8:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f01215ef:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01215f4:	0f b6 c0             	movzbl %al,%eax
f01215f7:	c1 e0 04             	shl    $0x4,%eax
f01215fa:	89 c2                	mov    %eax,%edx
f01215fc:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01215ff:	01 d0                	add    %edx,%eax
f0121601:	48                   	dec    %eax
f0121602:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0121605:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121608:	ba 00 00 00 00       	mov    $0x0,%edx
f012160d:	f7 75 a0             	divl   -0x60(%ebp)
f0121610:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0121613:	29 d0                	sub    %edx,%eax
f0121615:	01 d8                	add    %ebx,%eax
f0121617:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012161c:	39 c1                	cmp    %eax,%ecx
f012161e:	74 17                	je     f0121637 <test_kfree_bestfirstfit+0x28c>
f0121620:	83 ec 04             	sub    $0x4,%esp
f0121623:	68 bc a5 13 f0       	push   $0xf013a5bc
f0121628:	68 9e 06 00 00       	push   $0x69e
f012162d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121632:	e8 6f eb fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121637:	e8 58 26 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012163c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012163f:	74 17                	je     f0121658 <test_kfree_bestfirstfit+0x2ad>
f0121641:	83 ec 04             	sub    $0x4,%esp
f0121644:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0121649:	68 9f 06 00 00       	push   $0x69f
f012164e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121653:	e8 4e eb fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121658:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012165b:	e8 70 aa fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121660:	29 c3                	sub    %eax,%ebx
f0121662:	89 d8                	mov    %ebx,%eax
f0121664:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121669:	74 17                	je     f0121682 <test_kfree_bestfirstfit+0x2d7>
f012166b:	83 ec 04             	sub    $0x4,%esp
f012166e:	68 58 a5 13 f0       	push   $0xf013a558
f0121673:	68 a0 06 00 00       	push   $0x6a0
f0121678:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012167d:	e8 24 eb fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0121682:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0121689:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f012168c:	e8 3f aa fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121691:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121694:	e8 fb 25 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121699:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f012169c:	83 ec 0c             	sub    $0xc,%esp
f012169f:	68 00 08 00 00       	push   $0x800
f01216a4:	e8 3b 5d fe ff       	call   f01073e4 <kmalloc>
f01216a9:	83 c4 10             	add    $0x10,%esp
f01216ac:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01216b2:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01216b8:	89 c1                	mov    %eax,%ecx
f01216ba:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f01216c1:	8b 45 98             	mov    -0x68(%ebp),%eax
f01216c4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01216c9:	89 45 94             	mov    %eax,-0x6c(%ebp)
f01216cc:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01216cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01216d4:	f7 75 98             	divl   -0x68(%ebp)
f01216d7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01216da:	29 d0                	sub    %edx,%eax
f01216dc:	89 c3                	mov    %eax,%ebx
f01216de:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f01216e5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01216ea:	0f b6 d0             	movzbl %al,%edx
f01216ed:	8b 45 90             	mov    -0x70(%ebp),%eax
f01216f0:	01 d0                	add    %edx,%eax
f01216f2:	48                   	dec    %eax
f01216f3:	89 45 8c             	mov    %eax,-0x74(%ebp)
f01216f6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01216f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01216fe:	f7 75 90             	divl   -0x70(%ebp)
f0121701:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0121704:	29 d0                	sub    %edx,%eax
f0121706:	01 c3                	add    %eax,%ebx
f0121708:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f012170f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121714:	0f b6 c0             	movzbl %al,%eax
f0121717:	c1 e0 04             	shl    $0x4,%eax
f012171a:	89 c2                	mov    %eax,%edx
f012171c:	8b 45 88             	mov    -0x78(%ebp),%eax
f012171f:	01 d0                	add    %edx,%eax
f0121721:	48                   	dec    %eax
f0121722:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0121725:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121728:	ba 00 00 00 00       	mov    $0x0,%edx
f012172d:	f7 75 88             	divl   -0x78(%ebp)
f0121730:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0121733:	29 d0                	sub    %edx,%eax
f0121735:	01 d8                	add    %ebx,%eax
f0121737:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012173c:	39 c1                	cmp    %eax,%ecx
f012173e:	74 17                	je     f0121757 <test_kfree_bestfirstfit+0x3ac>
f0121740:	83 ec 04             	sub    $0x4,%esp
f0121743:	68 bc a5 13 f0       	push   $0xf013a5bc
f0121748:	68 a7 06 00 00       	push   $0x6a7
f012174d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121752:	e8 4f ea fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121757:	e8 38 25 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012175c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012175f:	74 17                	je     f0121778 <test_kfree_bestfirstfit+0x3cd>
f0121761:	83 ec 04             	sub    $0x4,%esp
f0121764:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0121769:	68 a8 06 00 00       	push   $0x6a8
f012176e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121773:	e8 2e ea fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121778:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012177b:	e8 50 a9 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121780:	29 c3                	sub    %eax,%ebx
f0121782:	89 d8                	mov    %ebx,%eax
f0121784:	83 f8 01             	cmp    $0x1,%eax
f0121787:	74 17                	je     f01217a0 <test_kfree_bestfirstfit+0x3f5>
f0121789:	83 ec 04             	sub    $0x4,%esp
f012178c:	68 58 a5 13 f0       	push   $0xf013a558
f0121791:	68 a9 06 00 00       	push   $0x6a9
f0121796:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012179b:	e8 06 ea fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01217a0:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f01217a7:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01217aa:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f01217b0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01217b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01217ba:	eb 0e                	jmp    f01217ca <test_kfree_bestfirstfit+0x41f>
		{
			ptr[i] = 2 ;
f01217bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01217bf:	8b 45 80             	mov    -0x80(%ebp),%eax
f01217c2:	01 d0                	add    %edx,%eax
f01217c4:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01217c7:	ff 45 f4             	incl   -0xc(%ebp)
f01217ca:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f01217d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01217d3:	7f e7                	jg     f01217bc <test_kfree_bestfirstfit+0x411>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01217d5:	e8 f6 a8 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01217da:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01217dd:	e8 b2 24 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01217e2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01217e5:	83 ec 0c             	sub    $0xc,%esp
f01217e8:	68 00 08 00 00       	push   $0x800
f01217ed:	e8 f2 5b fe ff       	call   f01073e4 <kmalloc>
f01217f2:	83 c4 10             	add    $0x10,%esp
f01217f5:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01217fb:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0121801:	89 c1                	mov    %eax,%ecx
f0121803:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012180a:	10 00 00 
f012180d:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0121813:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121818:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012181e:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121824:	ba 00 00 00 00       	mov    $0x0,%edx
f0121829:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012182f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0121835:	29 d0                	sub    %edx,%eax
f0121837:	89 c3                	mov    %eax,%ebx
f0121839:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0121840:	10 00 00 
f0121843:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121848:	0f b6 d0             	movzbl %al,%edx
f012184b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0121851:	01 d0                	add    %edx,%eax
f0121853:	48                   	dec    %eax
f0121854:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012185a:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121860:	ba 00 00 00 00       	mov    $0x0,%edx
f0121865:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012186b:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0121871:	29 d0                	sub    %edx,%eax
f0121873:	01 c3                	add    %eax,%ebx
f0121875:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012187c:	10 00 00 
f012187f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121884:	0f b6 c0             	movzbl %al,%eax
f0121887:	c1 e0 04             	shl    $0x4,%eax
f012188a:	89 c2                	mov    %eax,%edx
f012188c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0121892:	01 d0                	add    %edx,%eax
f0121894:	48                   	dec    %eax
f0121895:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012189b:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01218a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01218a6:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01218ac:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01218b2:	29 d0                	sub    %edx,%eax
f01218b4:	01 d8                	add    %ebx,%eax
f01218b6:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01218bb:	39 c1                	cmp    %eax,%ecx
f01218bd:	74 17                	je     f01218d6 <test_kfree_bestfirstfit+0x52b>
f01218bf:	83 ec 04             	sub    $0x4,%esp
f01218c2:	68 bc a5 13 f0       	push   $0xf013a5bc
f01218c7:	68 b5 06 00 00       	push   $0x6b5
f01218cc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01218d1:	e8 d0 e8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01218d6:	e8 b9 23 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01218db:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01218de:	74 17                	je     f01218f7 <test_kfree_bestfirstfit+0x54c>
f01218e0:	83 ec 04             	sub    $0x4,%esp
f01218e3:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01218e8:	68 b6 06 00 00       	push   $0x6b6
f01218ed:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01218f2:	e8 af e8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01218f7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01218fa:	e8 d1 a7 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01218ff:	29 c3                	sub    %eax,%ebx
f0121901:	89 d8                	mov    %ebx,%eax
f0121903:	83 f8 01             	cmp    $0x1,%eax
f0121906:	74 17                	je     f012191f <test_kfree_bestfirstfit+0x574>
f0121908:	83 ec 04             	sub    $0x4,%esp
f012190b:	68 58 a5 13 f0       	push   $0xf013a558
f0121910:	68 b7 06 00 00       	push   $0x6b7
f0121915:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012191a:	e8 87 e8 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012191f:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0121926:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0121929:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f012192f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0121932:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121939:	eb 0e                	jmp    f0121949 <test_kfree_bestfirstfit+0x59e>
		{
			ptr[i] = 3 ;
f012193b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012193e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121941:	01 d0                	add    %edx,%eax
f0121943:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0121946:	ff 45 f4             	incl   -0xc(%ebp)
f0121949:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012194f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121952:	7f e7                	jg     f012193b <test_kfree_bestfirstfit+0x590>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0121954:	e8 77 a7 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121959:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012195c:	e8 33 23 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121961:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0121964:	83 ec 0c             	sub    $0xc,%esp
f0121967:	68 00 1c 00 00       	push   $0x1c00
f012196c:	e8 73 5a fe ff       	call   f01073e4 <kmalloc>
f0121971:	83 c4 10             	add    $0x10,%esp
f0121974:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012197a:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121980:	89 c1                	mov    %eax,%ecx
f0121982:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0121989:	10 00 00 
f012198c:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0121992:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121997:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012199d:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01219a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01219a8:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f01219ae:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01219b4:	29 d0                	sub    %edx,%eax
f01219b6:	89 c3                	mov    %eax,%ebx
f01219b8:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f01219bf:	10 00 00 
f01219c2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01219c7:	0f b6 d0             	movzbl %al,%edx
f01219ca:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01219d0:	01 d0                	add    %edx,%eax
f01219d2:	48                   	dec    %eax
f01219d3:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f01219d9:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01219df:	ba 00 00 00 00       	mov    $0x0,%edx
f01219e4:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f01219ea:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f01219f0:	29 d0                	sub    %edx,%eax
f01219f2:	01 c3                	add    %eax,%ebx
f01219f4:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f01219fb:	10 00 00 
f01219fe:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121a03:	0f b6 c0             	movzbl %al,%eax
f0121a06:	c1 e0 04             	shl    $0x4,%eax
f0121a09:	89 c2                	mov    %eax,%edx
f0121a0b:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0121a11:	01 d0                	add    %edx,%eax
f0121a13:	48                   	dec    %eax
f0121a14:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0121a1a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121a20:	ba 00 00 00 00       	mov    $0x0,%edx
f0121a25:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0121a2b:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0121a31:	29 d0                	sub    %edx,%eax
f0121a33:	01 d8                	add    %ebx,%eax
f0121a35:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0121a3a:	39 c1                	cmp    %eax,%ecx
f0121a3c:	74 17                	je     f0121a55 <test_kfree_bestfirstfit+0x6aa>
f0121a3e:	83 ec 04             	sub    $0x4,%esp
f0121a41:	68 bc a5 13 f0       	push   $0xf013a5bc
f0121a46:	68 c3 06 00 00       	push   $0x6c3
f0121a4b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121a50:	e8 51 e7 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121a55:	e8 3a 22 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121a5a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121a5d:	74 17                	je     f0121a76 <test_kfree_bestfirstfit+0x6cb>
f0121a5f:	83 ec 04             	sub    $0x4,%esp
f0121a62:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0121a67:	68 c4 06 00 00       	push   $0x6c4
f0121a6c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121a71:	e8 30 e7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121a76:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121a79:	e8 52 a6 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121a7e:	29 c3                	sub    %eax,%ebx
f0121a80:	89 d8                	mov    %ebx,%eax
f0121a82:	83 f8 02             	cmp    $0x2,%eax
f0121a85:	74 17                	je     f0121a9e <test_kfree_bestfirstfit+0x6f3>
f0121a87:	83 ec 04             	sub    $0x4,%esp
f0121a8a:	68 58 a5 13 f0       	push   $0xf013a558
f0121a8f:	68 c5 06 00 00       	push   $0x6c5
f0121a94:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121a99:	e8 08 e7 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0121a9e:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0121aa5:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0121aa8:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0121aae:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0121ab1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121ab8:	eb 0e                	jmp    f0121ac8 <test_kfree_bestfirstfit+0x71d>
		{
			ptr[i] = 4 ;
f0121aba:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121abd:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121ac0:	01 d0                	add    %edx,%eax
f0121ac2:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0121ac5:	ff 45 f4             	incl   -0xc(%ebp)
f0121ac8:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0121ace:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121ad1:	7f e7                	jg     f0121aba <test_kfree_bestfirstfit+0x70f>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0121ad3:	e8 f8 a5 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121ad8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121adb:	e8 b4 21 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121ae0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0121ae3:	83 ec 0c             	sub    $0xc,%esp
f0121ae6:	68 00 fc 2f 00       	push   $0x2ffc00
f0121aeb:	e8 f4 58 fe ff       	call   f01073e4 <kmalloc>
f0121af0:	83 c4 10             	add    $0x10,%esp
f0121af3:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121af9:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0121aff:	89 c1                	mov    %eax,%ecx
f0121b01:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0121b08:	10 00 00 
f0121b0b:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0121b11:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121b16:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0121b1c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121b22:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b27:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0121b2d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0121b33:	29 d0                	sub    %edx,%eax
f0121b35:	89 c3                	mov    %eax,%ebx
f0121b37:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0121b3e:	10 00 00 
f0121b41:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121b46:	0f b6 d0             	movzbl %al,%edx
f0121b49:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0121b4f:	01 d0                	add    %edx,%eax
f0121b51:	48                   	dec    %eax
f0121b52:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0121b58:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0121b5e:	ba 00 00 00 00       	mov    $0x0,%edx
f0121b63:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f0121b69:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0121b6f:	29 d0                	sub    %edx,%eax
f0121b71:	01 c3                	add    %eax,%ebx
f0121b73:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f0121b7a:	10 00 00 
f0121b7d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121b82:	0f b6 c0             	movzbl %al,%eax
f0121b85:	c1 e0 04             	shl    $0x4,%eax
f0121b88:	89 c2                	mov    %eax,%edx
f0121b8a:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0121b90:	01 d0                	add    %edx,%eax
f0121b92:	48                   	dec    %eax
f0121b93:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f0121b99:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0121b9f:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ba4:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f0121baa:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0121bb0:	29 d0                	sub    %edx,%eax
f0121bb2:	01 d8                	add    %ebx,%eax
f0121bb4:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0121bb9:	39 c1                	cmp    %eax,%ecx
f0121bbb:	74 17                	je     f0121bd4 <test_kfree_bestfirstfit+0x829>
f0121bbd:	83 ec 04             	sub    $0x4,%esp
f0121bc0:	68 bc a5 13 f0       	push   $0xf013a5bc
f0121bc5:	68 d1 06 00 00       	push   $0x6d1
f0121bca:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121bcf:	e8 d2 e5 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121bd4:	e8 bb 20 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121bd9:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121bdc:	74 17                	je     f0121bf5 <test_kfree_bestfirstfit+0x84a>
f0121bde:	83 ec 04             	sub    $0x4,%esp
f0121be1:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0121be6:	68 d2 06 00 00       	push   $0x6d2
f0121beb:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121bf0:	e8 b1 e5 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121bf5:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121bf8:	e8 d3 a4 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121bfd:	29 c3                	sub    %eax,%ebx
f0121bff:	89 d8                	mov    %ebx,%eax
f0121c01:	3d 00 03 00 00       	cmp    $0x300,%eax
f0121c06:	74 17                	je     f0121c1f <test_kfree_bestfirstfit+0x874>
f0121c08:	83 ec 04             	sub    $0x4,%esp
f0121c0b:	68 58 a5 13 f0       	push   $0xf013a558
f0121c10:	68 d3 06 00 00       	push   $0x6d3
f0121c15:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121c1a:	e8 87 e5 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0121c1f:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f0121c26:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0121c29:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0121c2f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0121c32:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121c39:	eb 0e                	jmp    f0121c49 <test_kfree_bestfirstfit+0x89e>
		{
			ptr[i] = 5 ;
f0121c3b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121c3e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121c41:	01 d0                	add    %edx,%eax
f0121c43:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0121c46:	ff 45 f4             	incl   -0xc(%ebp)
f0121c49:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0121c4f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121c52:	7f e7                	jg     f0121c3b <test_kfree_bestfirstfit+0x890>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0121c54:	e8 77 a4 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121c59:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121c5c:	e8 33 20 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121c61:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0121c64:	83 ec 0c             	sub    $0xc,%esp
f0121c67:	68 00 fc 5f 00       	push   $0x5ffc00
f0121c6c:	e8 73 57 fe ff       	call   f01073e4 <kmalloc>
f0121c71:	83 c4 10             	add    $0x10,%esp
f0121c74:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121c7a:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0121c80:	89 c1                	mov    %eax,%ecx
f0121c82:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0121c89:	10 00 00 
f0121c8c:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0121c92:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121c97:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0121c9d:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0121ca3:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ca8:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0121cae:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0121cb4:	29 d0                	sub    %edx,%eax
f0121cb6:	89 c3                	mov    %eax,%ebx
f0121cb8:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0121cbf:	10 00 00 
f0121cc2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121cc7:	0f b6 d0             	movzbl %al,%edx
f0121cca:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0121cd0:	01 d0                	add    %edx,%eax
f0121cd2:	48                   	dec    %eax
f0121cd3:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f0121cd9:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0121cdf:	ba 00 00 00 00       	mov    $0x0,%edx
f0121ce4:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f0121cea:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0121cf0:	29 d0                	sub    %edx,%eax
f0121cf2:	01 c3                	add    %eax,%ebx
f0121cf4:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0121cfb:	10 00 00 
f0121cfe:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121d03:	0f b6 c0             	movzbl %al,%eax
f0121d06:	c1 e0 04             	shl    $0x4,%eax
f0121d09:	89 c2                	mov    %eax,%edx
f0121d0b:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0121d11:	01 d0                	add    %edx,%eax
f0121d13:	48                   	dec    %eax
f0121d14:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0121d1a:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0121d20:	ba 00 00 00 00       	mov    $0x0,%edx
f0121d25:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0121d2b:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0121d31:	29 d0                	sub    %edx,%eax
f0121d33:	01 d8                	add    %ebx,%eax
f0121d35:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0121d3a:	39 c1                	cmp    %eax,%ecx
f0121d3c:	74 17                	je     f0121d55 <test_kfree_bestfirstfit+0x9aa>
f0121d3e:	83 ec 04             	sub    $0x4,%esp
f0121d41:	68 bc a5 13 f0       	push   $0xf013a5bc
f0121d46:	68 df 06 00 00       	push   $0x6df
f0121d4b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121d50:	e8 51 e4 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121d55:	e8 3a 1f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121d5a:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121d5d:	74 17                	je     f0121d76 <test_kfree_bestfirstfit+0x9cb>
f0121d5f:	83 ec 04             	sub    $0x4,%esp
f0121d62:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0121d67:	68 e0 06 00 00       	push   $0x6e0
f0121d6c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121d71:	e8 30 e4 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121d76:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121d79:	e8 52 a3 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121d7e:	29 c3                	sub    %eax,%ebx
f0121d80:	89 d8                	mov    %ebx,%eax
f0121d82:	3d 00 06 00 00       	cmp    $0x600,%eax
f0121d87:	74 17                	je     f0121da0 <test_kfree_bestfirstfit+0x9f5>
f0121d89:	83 ec 04             	sub    $0x4,%esp
f0121d8c:	68 58 a5 13 f0       	push   $0xf013a558
f0121d91:	68 e1 06 00 00       	push   $0x6e1
f0121d96:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121d9b:	e8 06 e4 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0121da0:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f0121da7:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0121daa:	e8 21 a3 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121daf:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121db2:	e8 dd 1e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121db7:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0121dba:	83 ec 0c             	sub    $0xc,%esp
f0121dbd:	68 00 38 00 00       	push   $0x3800
f0121dc2:	e8 1d 56 fe ff       	call   f01073e4 <kmalloc>
f0121dc7:	83 c4 10             	add    $0x10,%esp
f0121dca:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0121dd0:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0121dd6:	89 c1                	mov    %eax,%ecx
f0121dd8:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0121ddf:	10 00 00 
f0121de2:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0121de8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0121ded:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0121df3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0121df9:	ba 00 00 00 00       	mov    $0x0,%edx
f0121dfe:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0121e04:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0121e0a:	29 d0                	sub    %edx,%eax
f0121e0c:	89 c3                	mov    %eax,%ebx
f0121e0e:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0121e15:	10 00 00 
f0121e18:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121e1d:	0f b6 d0             	movzbl %al,%edx
f0121e20:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0121e26:	01 d0                	add    %edx,%eax
f0121e28:	48                   	dec    %eax
f0121e29:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0121e2f:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0121e35:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e3a:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0121e40:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0121e46:	29 d0                	sub    %edx,%eax
f0121e48:	01 c3                	add    %eax,%ebx
f0121e4a:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0121e51:	10 00 00 
f0121e54:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0121e59:	0f b6 c0             	movzbl %al,%eax
f0121e5c:	c1 e0 04             	shl    $0x4,%eax
f0121e5f:	89 c2                	mov    %eax,%edx
f0121e61:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0121e67:	01 d0                	add    %edx,%eax
f0121e69:	48                   	dec    %eax
f0121e6a:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0121e70:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0121e76:	ba 00 00 00 00       	mov    $0x0,%edx
f0121e7b:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0121e81:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0121e87:	29 d0                	sub    %edx,%eax
f0121e89:	01 d8                	add    %ebx,%eax
f0121e8b:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0121e90:	39 c1                	cmp    %eax,%ecx
f0121e92:	74 17                	je     f0121eab <test_kfree_bestfirstfit+0xb00>
f0121e94:	83 ec 04             	sub    $0x4,%esp
f0121e97:	68 bc a5 13 f0       	push   $0xf013a5bc
f0121e9c:	68 e8 06 00 00       	push   $0x6e8
f0121ea1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121ea6:	e8 fb e2 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121eab:	e8 e4 1d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121eb0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0121eb3:	74 17                	je     f0121ecc <test_kfree_bestfirstfit+0xb21>
f0121eb5:	83 ec 04             	sub    $0x4,%esp
f0121eb8:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0121ebd:	68 e9 06 00 00       	push   $0x6e9
f0121ec2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121ec7:	e8 da e2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0121ecc:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0121ecf:	e8 fc a1 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121ed4:	29 c3                	sub    %eax,%ebx
f0121ed6:	89 d8                	mov    %ebx,%eax
f0121ed8:	83 f8 04             	cmp    $0x4,%eax
f0121edb:	74 17                	je     f0121ef4 <test_kfree_bestfirstfit+0xb49>
f0121edd:	83 ec 04             	sub    $0x4,%esp
f0121ee0:	68 58 a5 13 f0       	push   $0xf013a558
f0121ee5:	68 ea 06 00 00       	push   $0x6ea
f0121eea:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121eef:	e8 b2 e2 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f0121ef4:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f0121efb:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0121efe:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0121f04:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0121f07:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0121f0e:	eb 0e                	jmp    f0121f1e <test_kfree_bestfirstfit+0xb73>
		{
			ptr[i] = 7 ;
f0121f10:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0121f13:	8b 45 80             	mov    -0x80(%ebp),%eax
f0121f16:	01 d0                	add    %edx,%eax
f0121f18:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0121f1b:	ff 45 f4             	incl   -0xc(%ebp)
f0121f1e:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0121f24:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0121f27:	7f e7                	jg     f0121f10 <test_kfree_bestfirstfit+0xb65>
	}

	//kfree some of the allocated spaces [15%]
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0121f29:	e8 a2 a1 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121f2e:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0121f34:	e8 5b 1d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121f39:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f0121f3f:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0121f45:	83 ec 0c             	sub    $0xc,%esp
f0121f48:	50                   	push   %eax
f0121f49:	e8 b0 54 fe ff       	call   f01073fe <kfree>
f0121f4e:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121f51:	e8 3e 1d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121f56:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121f5c:	74 17                	je     f0121f75 <test_kfree_bestfirstfit+0xbca>
f0121f5e:	83 ec 04             	sub    $0x4,%esp
f0121f61:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0121f66:	68 f9 06 00 00       	push   $0x6f9
f0121f6b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121f70:	e8 31 e2 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121f75:	e8 56 a1 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121f7a:	89 c2                	mov    %eax,%edx
f0121f7c:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121f82:	29 c2                	sub    %eax,%edx
f0121f84:	89 d0                	mov    %edx,%eax
f0121f86:	3d 00 02 00 00       	cmp    $0x200,%eax
f0121f8b:	74 17                	je     f0121fa4 <test_kfree_bestfirstfit+0xbf9>
f0121f8d:	83 ec 04             	sub    $0x4,%esp
f0121f90:	68 60 ac 13 f0       	push   $0xf013ac60
f0121f95:	68 fa 06 00 00       	push   $0x6fa
f0121f9a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121f9f:	e8 02 e2 fd ff       	call   f01001a6 <_panic>

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0121fa4:	e8 27 a1 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121fa9:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0121faf:	e8 e0 1c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121fb4:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[2]);
f0121fba:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0121fc0:	83 ec 0c             	sub    $0xc,%esp
f0121fc3:	50                   	push   %eax
f0121fc4:	e8 35 54 fe ff       	call   f01073fe <kfree>
f0121fc9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0121fcc:	e8 c3 1c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0121fd1:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0121fd7:	74 17                	je     f0121ff0 <test_kfree_bestfirstfit+0xc45>
f0121fd9:	83 ec 04             	sub    $0x4,%esp
f0121fdc:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0121fe1:	68 00 07 00 00       	push   $0x700
f0121fe6:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0121feb:	e8 b6 e1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0121ff0:	e8 db a0 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0121ff5:	89 c2                	mov    %eax,%edx
f0121ff7:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0121ffd:	29 c2                	sub    %eax,%edx
f0121fff:	89 d0                	mov    %edx,%eax
f0122001:	83 f8 01             	cmp    $0x1,%eax
f0122004:	74 17                	je     f012201d <test_kfree_bestfirstfit+0xc72>
f0122006:	83 ec 04             	sub    $0x4,%esp
f0122009:	68 60 ac 13 f0       	push   $0xf013ac60
f012200e:	68 01 07 00 00       	push   $0x701
f0122013:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122018:	e8 89 e1 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012201d:	e8 ae a0 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122022:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122028:	e8 67 1c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012202d:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f0122033:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0122039:	83 ec 0c             	sub    $0xc,%esp
f012203c:	50                   	push   %eax
f012203d:	e8 bc 53 fe ff       	call   f01073fe <kfree>
f0122042:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122045:	e8 4a 1c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012204a:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0122050:	74 17                	je     f0122069 <test_kfree_bestfirstfit+0xcbe>
f0122052:	83 ec 04             	sub    $0x4,%esp
f0122055:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012205a:	68 07 07 00 00       	push   $0x707
f012205f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122064:	e8 3d e1 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0122069:	e8 62 a0 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012206e:	89 c2                	mov    %eax,%edx
f0122070:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0122076:	29 c2                	sub    %eax,%edx
f0122078:	89 d0                	mov    %edx,%eax
f012207a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012207f:	74 17                	je     f0122098 <test_kfree_bestfirstfit+0xced>
f0122081:	83 ec 04             	sub    $0x4,%esp
f0122084:	68 60 ac 13 f0       	push   $0xf013ac60
f0122089:	68 08 07 00 00       	push   $0x708
f012208e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122093:	e8 0e e1 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0122098:	e8 33 a0 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012209d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01220a3:	e8 ec 1b fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01220a8:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01220ae:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01220b4:	83 ec 0c             	sub    $0xc,%esp
f01220b7:	50                   	push   %eax
f01220b8:	e8 41 53 fe ff       	call   f01073fe <kfree>
f01220bd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01220c0:	e8 cf 1b fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01220c5:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f01220cb:	74 17                	je     f01220e4 <test_kfree_bestfirstfit+0xd39>
f01220cd:	83 ec 04             	sub    $0x4,%esp
f01220d0:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01220d5:	68 0e 07 00 00       	push   $0x70e
f01220da:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01220df:	e8 c2 e0 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01220e4:	e8 e7 9f fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01220e9:	89 c2                	mov    %eax,%edx
f01220eb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01220f1:	29 c2                	sub    %eax,%edx
f01220f3:	89 d0                	mov    %edx,%eax
f01220f5:	3d 00 06 00 00       	cmp    $0x600,%eax
f01220fa:	74 17                	je     f0122113 <test_kfree_bestfirstfit+0xd68>
f01220fc:	83 ec 04             	sub    $0x4,%esp
f01220ff:	68 60 ac 13 f0       	push   $0xf013ac60
f0122104:	68 0f 07 00 00       	push   $0x70f
f0122109:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012210e:	e8 93 e0 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nkfree: current evaluation = 15%");
f0122113:	83 ec 0c             	sub    $0xc,%esp
f0122116:	68 98 ac 13 f0       	push   $0xf013ac98
f012211b:	e8 0d eb fd ff       	call   f0100c2d <cprintf>
f0122120:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
f0122123:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122129:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f012212c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122133:	eb 1e                	jmp    f0122153 <test_kfree_bestfirstfit+0xda8>
		{
			sums[3] += ptr[i] ;
f0122135:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f012213b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012213e:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122141:	01 c8                	add    %ecx,%eax
f0122143:	8a 00                	mov    (%eax),%al
f0122145:	0f be c0             	movsbl %al,%eax
f0122148:	01 d0                	add    %edx,%eax
f012214a:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)

	//Check memory access after kfree [15%]
	{
		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0122150:	ff 45 f4             	incl   -0xc(%ebp)
f0122153:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0122159:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012215c:	7f d7                	jg     f0122135 <test_kfree_bestfirstfit+0xd8a>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f012215e:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f0122164:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012216a:	89 c1                	mov    %eax,%ecx
f012216c:	01 c9                	add    %ecx,%ecx
f012216e:	01 c8                	add    %ecx,%eax
f0122170:	39 c2                	cmp    %eax,%edx
f0122172:	74 17                	je     f012218b <test_kfree_bestfirstfit+0xde0>
f0122174:	83 ec 04             	sub    $0x4,%esp
f0122177:	68 bc ac 13 f0       	push   $0xf013acbc
f012217c:	68 1c 07 00 00       	push   $0x71c
f0122181:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122186:	e8 1b e0 fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f012218b:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0122191:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0122194:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012219b:	eb 1e                	jmp    f01221bb <test_kfree_bestfirstfit+0xe10>
		{
			sums[4] += ptr[i] ;
f012219d:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f01221a3:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01221a6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01221a9:	01 c8                	add    %ecx,%eax
f01221ab:	8a 00                	mov    (%eax),%al
f01221ad:	0f be c0             	movsbl %al,%eax
f01221b0:	01 d0                	add    %edx,%eax
f01221b2:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01221b8:	ff 45 f4             	incl   -0xc(%ebp)
f01221bb:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01221c1:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01221c4:	7f d7                	jg     f012219d <test_kfree_bestfirstfit+0xdf2>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f01221c6:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01221cc:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f01221d2:	c1 e2 02             	shl    $0x2,%edx
f01221d5:	39 d0                	cmp    %edx,%eax
f01221d7:	74 17                	je     f01221f0 <test_kfree_bestfirstfit+0xe45>
f01221d9:	83 ec 04             	sub    $0x4,%esp
f01221dc:	68 bc ac 13 f0       	push   $0xf013acbc
f01221e1:	68 24 07 00 00       	push   $0x724
f01221e6:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01221eb:	e8 b6 df fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f01221f0:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01221f6:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01221f9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122200:	eb 1e                	jmp    f0122220 <test_kfree_bestfirstfit+0xe75>
		{
			sums[5] += ptr[i] ;
f0122202:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0122208:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012220b:	8b 45 80             	mov    -0x80(%ebp),%eax
f012220e:	01 c8                	add    %ecx,%eax
f0122210:	8a 00                	mov    (%eax),%al
f0122212:	0f be c0             	movsbl %al,%eax
f0122215:	01 d0                	add    %edx,%eax
f0122217:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012221d:	ff 45 f4             	incl   -0xc(%ebp)
f0122220:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0122226:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122229:	7f d7                	jg     f0122202 <test_kfree_bestfirstfit+0xe57>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f012222b:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f0122231:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f0122237:	89 d0                	mov    %edx,%eax
f0122239:	c1 e0 02             	shl    $0x2,%eax
f012223c:	01 d0                	add    %edx,%eax
f012223e:	39 c1                	cmp    %eax,%ecx
f0122240:	74 17                	je     f0122259 <test_kfree_bestfirstfit+0xeae>
f0122242:	83 ec 04             	sub    $0x4,%esp
f0122245:	68 bc ac 13 f0       	push   $0xf013acbc
f012224a:	68 2c 07 00 00       	push   $0x72c
f012224f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122254:	e8 4d df fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0122259:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f012225f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0122262:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122269:	eb 1e                	jmp    f0122289 <test_kfree_bestfirstfit+0xede>
		{
			sums[7] += ptr[i] ;
f012226b:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f0122271:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0122274:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122277:	01 c8                	add    %ecx,%eax
f0122279:	8a 00                	mov    (%eax),%al
f012227b:	0f be c0             	movsbl %al,%eax
f012227e:	01 d0                	add    %edx,%eax
f0122280:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0122286:	ff 45 f4             	incl   -0xc(%ebp)
f0122289:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012228f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122292:	7f d7                	jg     f012226b <test_kfree_bestfirstfit+0xec0>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0122294:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f012229a:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f01222a0:	89 d0                	mov    %edx,%eax
f01222a2:	01 c0                	add    %eax,%eax
f01222a4:	01 d0                	add    %edx,%eax
f01222a6:	01 c0                	add    %eax,%eax
f01222a8:	01 d0                	add    %edx,%eax
f01222aa:	39 c1                	cmp    %eax,%ecx
f01222ac:	74 17                	je     f01222c5 <test_kfree_bestfirstfit+0xf1a>
f01222ae:	83 ec 04             	sub    $0x4,%esp
f01222b1:	68 bc ac 13 f0       	push   $0xf013acbc
f01222b6:	68 34 07 00 00       	push   $0x734
f01222bb:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01222c0:	e8 e1 de fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b30%");
f01222c5:	83 ec 0c             	sub    $0xc,%esp
f01222c8:	68 ef ac 13 f0       	push   $0xf013acef
f01222cd:	e8 5b e9 fd ff       	call   f0100c2d <cprintf>
f01222d2:	83 c4 10             	add    $0x10,%esp

	//Allocate after kfree [15%]
	{
		//Allocate in merged freed space
		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01222d5:	e8 f6 9d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01222da:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01222dd:	e8 b2 19 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01222e2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(3*Mega);
f01222e5:	83 ec 0c             	sub    $0xc,%esp
f01222e8:	68 00 00 30 00       	push   $0x300000
f01222ed:	e8 f2 50 fe ff       	call   f01073e4 <kmalloc>
f01222f2:	83 c4 10             	add    $0x10,%esp
f01222f5:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01222fb:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122301:	89 c1                	mov    %eax,%ecx
f0122303:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012230a:	10 00 00 
f012230d:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0122313:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122318:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012231e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122324:	ba 00 00 00 00       	mov    $0x0,%edx
f0122329:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012232f:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0122335:	29 d0                	sub    %edx,%eax
f0122337:	89 c3                	mov    %eax,%ebx
f0122339:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0122340:	10 00 00 
f0122343:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122348:	0f b6 d0             	movzbl %al,%edx
f012234b:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0122351:	01 d0                	add    %edx,%eax
f0122353:	48                   	dec    %eax
f0122354:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f012235a:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122360:	ba 00 00 00 00       	mov    $0x0,%edx
f0122365:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f012236b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0122371:	29 d0                	sub    %edx,%eax
f0122373:	01 c3                	add    %eax,%ebx
f0122375:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f012237c:	10 00 00 
f012237f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122384:	0f b6 c0             	movzbl %al,%eax
f0122387:	c1 e0 04             	shl    $0x4,%eax
f012238a:	89 c2                	mov    %eax,%edx
f012238c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0122392:	01 d0                	add    %edx,%eax
f0122394:	48                   	dec    %eax
f0122395:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f012239b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01223a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01223a6:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f01223ac:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01223b2:	29 d0                	sub    %edx,%eax
f01223b4:	01 d8                	add    %ebx,%eax
f01223b6:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01223bb:	39 c1                	cmp    %eax,%ecx
f01223bd:	74 17                	je     f01223d6 <test_kfree_bestfirstfit+0x102b>
f01223bf:	83 ec 04             	sub    $0x4,%esp
f01223c2:	68 bc a5 13 f0       	push   $0xf013a5bc
f01223c7:	68 3f 07 00 00       	push   $0x73f
f01223cc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01223d1:	e8 d0 dd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01223d6:	e8 b9 18 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01223db:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01223de:	74 17                	je     f01223f7 <test_kfree_bestfirstfit+0x104c>
f01223e0:	83 ec 04             	sub    $0x4,%esp
f01223e3:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01223e8:	68 40 07 00 00       	push   $0x740
f01223ed:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01223f2:	e8 af dd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01223f7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01223fa:	e8 d1 9c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01223ff:	29 c3                	sub    %eax,%ebx
f0122401:	89 d8                	mov    %ebx,%eax
f0122403:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122408:	74 17                	je     f0122421 <test_kfree_bestfirstfit+0x1076>
f012240a:	83 ec 04             	sub    $0x4,%esp
f012240d:	68 58 a5 13 f0       	push   $0xf013a558
f0122412:	68 41 07 00 00       	push   $0x741
f0122417:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012241c:	e8 85 dd fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
f0122421:	c7 85 88 fe ff ff ff 	movl   $0x2fffff,-0x178(%ebp)
f0122428:	ff 2f 00 
		ptr = (char*)ptr_allocations[8];
f012242b:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122431:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0122434:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012243b:	eb 0e                	jmp    f012244b <test_kfree_bestfirstfit+0x10a0>
		{
			ptr[i] = 8 ;
f012243d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122440:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122443:	01 d0                	add    %edx,%eax
f0122445:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (3*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0122448:	ff 45 f4             	incl   -0xc(%ebp)
f012244b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0122451:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122454:	7f e7                	jg     f012243d <test_kfree_bestfirstfit+0x1092>
		{
			ptr[i] = 8 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122456:	e8 75 9c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012245b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012245e:	e8 31 18 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122463:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(2*kilo);
f0122466:	83 ec 0c             	sub    $0xc,%esp
f0122469:	68 00 08 00 00       	push   $0x800
f012246e:	e8 71 4f fe ff       	call   f01073e4 <kmalloc>
f0122473:	83 c4 10             	add    $0x10,%esp
f0122476:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012247c:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122482:	89 c1                	mov    %eax,%ecx
f0122484:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f012248b:	10 00 00 
f012248e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0122494:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122499:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f012249f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01224a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01224aa:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f01224b0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f01224b6:	29 d0                	sub    %edx,%eax
f01224b8:	89 c3                	mov    %eax,%ebx
f01224ba:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f01224c1:	10 00 00 
f01224c4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01224c9:	0f b6 d0             	movzbl %al,%edx
f01224cc:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f01224d2:	01 d0                	add    %edx,%eax
f01224d4:	48                   	dec    %eax
f01224d5:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f01224db:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01224e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01224e6:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f01224ec:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01224f2:	29 d0                	sub    %edx,%eax
f01224f4:	01 c3                	add    %eax,%ebx
f01224f6:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f01224fd:	10 00 00 
f0122500:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122505:	0f b6 c0             	movzbl %al,%eax
f0122508:	c1 e0 04             	shl    $0x4,%eax
f012250b:	89 c2                	mov    %eax,%edx
f012250d:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0122513:	01 d0                	add    %edx,%eax
f0122515:	48                   	dec    %eax
f0122516:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012251c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122522:	ba 00 00 00 00       	mov    $0x0,%edx
f0122527:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012252d:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0122533:	29 d0                	sub    %edx,%eax
f0122535:	01 d8                	add    %ebx,%eax
f0122537:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012253c:	39 c1                	cmp    %eax,%ecx
f012253e:	74 17                	je     f0122557 <test_kfree_bestfirstfit+0x11ac>
f0122540:	83 ec 04             	sub    $0x4,%esp
f0122543:	68 bc a5 13 f0       	push   $0xf013a5bc
f0122548:	68 4d 07 00 00       	push   $0x74d
f012254d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122552:	e8 4f dc fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122557:	e8 38 17 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012255c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012255f:	74 17                	je     f0122578 <test_kfree_bestfirstfit+0x11cd>
f0122561:	83 ec 04             	sub    $0x4,%esp
f0122564:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0122569:	68 4e 07 00 00       	push   $0x74e
f012256e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122573:	e8 2e dc fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122578:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012257b:	e8 50 9b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122580:	29 c3                	sub    %eax,%ebx
f0122582:	89 d8                	mov    %ebx,%eax
f0122584:	83 f8 01             	cmp    $0x1,%eax
f0122587:	74 17                	je     f01225a0 <test_kfree_bestfirstfit+0x11f5>
f0122589:	83 ec 04             	sub    $0x4,%esp
f012258c:	68 58 a5 13 f0       	push   $0xf013a558
f0122591:	68 4f 07 00 00       	push   $0x74f
f0122596:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012259b:	e8 06 dc fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
f01225a0:	c7 85 8c fe ff ff ff 	movl   $0x7ff,-0x174(%ebp)
f01225a7:	07 00 00 
		ptr = (char*)ptr_allocations[9];
f01225aa:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01225b0:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f01225b3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01225ba:	eb 0e                	jmp    f01225ca <test_kfree_bestfirstfit+0x121f>
		{
			ptr[i] = 9 ;
f01225bc:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01225bf:	8b 45 80             	mov    -0x80(%ebp),%eax
f01225c2:	01 d0                	add    %edx,%eax
f01225c4:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 3*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f01225c7:	ff 45 f4             	incl   -0xc(%ebp)
f01225ca:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f01225d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01225d3:	7f e7                	jg     f01225bc <test_kfree_bestfirstfit+0x1211>
		{
			ptr[i] = 9 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01225d5:	e8 f6 9a fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01225da:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01225dd:	e8 b2 16 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01225e2:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(1*Mega);
f01225e5:	83 ec 0c             	sub    $0xc,%esp
f01225e8:	68 00 00 10 00       	push   $0x100000
f01225ed:	e8 f2 4d fe ff       	call   f01073e4 <kmalloc>
f01225f2:	83 c4 10             	add    $0x10,%esp
f01225f5:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01225fb:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122601:	89 c1                	mov    %eax,%ecx
f0122603:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012260a:	10 00 00 
f012260d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0122613:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122618:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012261e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122624:	ba 00 00 00 00       	mov    $0x0,%edx
f0122629:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012262f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0122635:	29 d0                	sub    %edx,%eax
f0122637:	89 c3                	mov    %eax,%ebx
f0122639:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0122640:	10 00 00 
f0122643:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122648:	0f b6 d0             	movzbl %al,%edx
f012264b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0122651:	01 d0                	add    %edx,%eax
f0122653:	48                   	dec    %eax
f0122654:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012265a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122660:	ba 00 00 00 00       	mov    $0x0,%edx
f0122665:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012266b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0122671:	29 d0                	sub    %edx,%eax
f0122673:	01 c3                	add    %eax,%ebx
f0122675:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012267c:	10 00 00 
f012267f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122684:	0f b6 c0             	movzbl %al,%eax
f0122687:	c1 e0 04             	shl    $0x4,%eax
f012268a:	89 c2                	mov    %eax,%edx
f012268c:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0122692:	01 d0                	add    %edx,%eax
f0122694:	48                   	dec    %eax
f0122695:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012269b:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01226a1:	ba 00 00 00 00       	mov    $0x0,%edx
f01226a6:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f01226ac:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f01226b2:	29 d0                	sub    %edx,%eax
f01226b4:	01 d8                	add    %ebx,%eax
f01226b6:	2d 00 b0 cf 09       	sub    $0x9cfb000,%eax
f01226bb:	39 c1                	cmp    %eax,%ecx
f01226bd:	74 17                	je     f01226d6 <test_kfree_bestfirstfit+0x132b>
f01226bf:	83 ec 04             	sub    $0x4,%esp
f01226c2:	68 bc a5 13 f0       	push   $0xf013a5bc
f01226c7:	68 5b 07 00 00       	push   $0x75b
f01226cc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01226d1:	e8 d0 da fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01226d6:	e8 b9 15 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01226db:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01226de:	74 17                	je     f01226f7 <test_kfree_bestfirstfit+0x134c>
f01226e0:	83 ec 04             	sub    $0x4,%esp
f01226e3:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01226e8:	68 5c 07 00 00       	push   $0x75c
f01226ed:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01226f2:	e8 af da fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f01226f7:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01226fa:	e8 d1 99 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01226ff:	29 c3                	sub    %eax,%ebx
f0122701:	89 d8                	mov    %ebx,%eax
f0122703:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122708:	74 17                	je     f0122721 <test_kfree_bestfirstfit+0x1376>
f012270a:	83 ec 04             	sub    $0x4,%esp
f012270d:	68 58 a5 13 f0       	push   $0xf013a558
f0122712:	68 5d 07 00 00       	push   $0x75d
f0122717:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012271c:	e8 85 da fd ff       	call   f01001a6 <_panic>
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
f0122721:	c7 85 90 fe ff ff ff 	movl   $0xfffff,-0x170(%ebp)
f0122728:	ff 0f 00 
		ptr = (char*)ptr_allocations[10];
f012272b:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122731:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f0122734:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012273b:	eb 0e                	jmp    f012274b <test_kfree_bestfirstfit+0x13a0>
		{
			ptr[i] = 10 ;
f012273d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0122740:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122743:	01 d0                	add    %edx,%eax
f0122745:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 3*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f0122748:	ff 45 f4             	incl   -0xc(%ebp)
f012274b:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0122751:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0122754:	7f e7                	jg     f012273d <test_kfree_bestfirstfit+0x1392>
		{
			ptr[i] = 10 ;
		}
	}
	cprintf("\b\b\b45%");
f0122756:	83 ec 0c             	sub    $0xc,%esp
f0122759:	68 f6 ac 13 f0       	push   $0xf013acf6
f012275e:	e8 ca e4 fd ff       	call   f0100c2d <cprintf>
f0122763:	83 c4 10             	add    $0x10,%esp

	//kfree remaining allocated spaces [15%]
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f0122766:	e8 65 99 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012276b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012276e:	e8 21 15 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122773:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[4]);
f0122776:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012277c:	83 ec 0c             	sub    $0xc,%esp
f012277f:	50                   	push   %eax
f0122780:	e8 79 4c fe ff       	call   f01073fe <kfree>
f0122785:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122788:	e8 07 15 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012278d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122790:	74 17                	je     f01227a9 <test_kfree_bestfirstfit+0x13fe>
f0122792:	83 ec 04             	sub    $0x4,%esp
f0122795:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012279a:	68 6d 07 00 00       	push   $0x76d
f012279f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01227a4:	e8 fd d9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 2) panic("Wrong kfree: pages in memory are not freed correctly");
f01227a9:	e8 22 99 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01227ae:	89 c2                	mov    %eax,%edx
f01227b0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01227b3:	29 c2                	sub    %eax,%edx
f01227b5:	89 d0                	mov    %edx,%eax
f01227b7:	83 f8 02             	cmp    $0x2,%eax
f01227ba:	74 17                	je     f01227d3 <test_kfree_bestfirstfit+0x1428>
f01227bc:	83 ec 04             	sub    $0x4,%esp
f01227bf:	68 60 ac 13 f0       	push   $0xf013ac60
f01227c4:	68 6e 07 00 00       	push   $0x76e
f01227c9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01227ce:	e8 d3 d9 fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f01227d3:	e8 f8 98 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01227d8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01227db:	e8 b4 14 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01227e0:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[5]);
f01227e3:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01227e9:	83 ec 0c             	sub    $0xc,%esp
f01227ec:	50                   	push   %eax
f01227ed:	e8 0c 4c fe ff       	call   f01073fe <kfree>
f01227f2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01227f5:	e8 9a 14 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01227fa:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01227fd:	74 17                	je     f0122816 <test_kfree_bestfirstfit+0x146b>
f01227ff:	83 ec 04             	sub    $0x4,%esp
f0122802:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0122807:	68 74 07 00 00       	push   $0x774
f012280c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122811:	e8 90 d9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122816:	e8 b5 98 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012281b:	89 c2                	mov    %eax,%edx
f012281d:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122820:	29 c2                	sub    %eax,%edx
f0122822:	89 d0                	mov    %edx,%eax
f0122824:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122829:	74 17                	je     f0122842 <test_kfree_bestfirstfit+0x1497>
f012282b:	83 ec 04             	sub    $0x4,%esp
f012282e:	68 60 ac 13 f0       	push   $0xf013ac60
f0122833:	68 75 07 00 00       	push   $0x775
f0122838:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012283d:	e8 64 d9 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122842:	e8 89 98 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122847:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012284a:	e8 45 14 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012284f:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[3]);
f0122852:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0122858:	83 ec 0c             	sub    $0xc,%esp
f012285b:	50                   	push   %eax
f012285c:	e8 9d 4b fe ff       	call   f01073fe <kfree>
f0122861:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122864:	e8 2b 14 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122869:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012286c:	74 17                	je     f0122885 <test_kfree_bestfirstfit+0x14da>
f012286e:	83 ec 04             	sub    $0x4,%esp
f0122871:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0122876:	68 7b 07 00 00       	push   $0x77b
f012287b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122880:	e8 21 d9 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f0122885:	e8 46 98 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012288a:	89 c2                	mov    %eax,%edx
f012288c:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012288f:	29 c2                	sub    %eax,%edx
f0122891:	89 d0                	mov    %edx,%eax
f0122893:	83 f8 01             	cmp    $0x1,%eax
f0122896:	74 17                	je     f01228af <test_kfree_bestfirstfit+0x1504>
f0122898:	83 ec 04             	sub    $0x4,%esp
f012289b:	68 60 ac 13 f0       	push   $0xf013ac60
f01228a0:	68 7c 07 00 00       	push   $0x77c
f01228a5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01228aa:	e8 f7 d8 fd ff       	call   f01001a6 <_panic>

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f01228af:	e8 1c 98 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01228b4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01228b7:	e8 d8 13 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01228bc:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[7]);
f01228bf:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01228c5:	83 ec 0c             	sub    $0xc,%esp
f01228c8:	50                   	push   %eax
f01228c9:	e8 30 4b fe ff       	call   f01073fe <kfree>
f01228ce:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01228d1:	e8 be 13 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01228d6:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01228d9:	74 17                	je     f01228f2 <test_kfree_bestfirstfit+0x1547>
f01228db:	83 ec 04             	sub    $0x4,%esp
f01228de:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01228e3:	68 82 07 00 00       	push   $0x782
f01228e8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01228ed:	e8 b4 d8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 4) panic("Wrong kfree: pages in memory are not freed correctly");
f01228f2:	e8 d9 97 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01228f7:	89 c2                	mov    %eax,%edx
f01228f9:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01228fc:	29 c2                	sub    %eax,%edx
f01228fe:	89 d0                	mov    %edx,%eax
f0122900:	83 f8 04             	cmp    $0x4,%eax
f0122903:	74 17                	je     f012291c <test_kfree_bestfirstfit+0x1571>
f0122905:	83 ec 04             	sub    $0x4,%esp
f0122908:	68 60 ac 13 f0       	push   $0xf013ac60
f012290d:	68 83 07 00 00       	push   $0x783
f0122912:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122917:	e8 8a d8 fd ff       	call   f01001a6 <_panic>

		//kfree 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012291c:	e8 af 97 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122921:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122924:	e8 6b 13 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122929:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f012292c:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122932:	83 ec 0c             	sub    $0xc,%esp
f0122935:	50                   	push   %eax
f0122936:	e8 c3 4a fe ff       	call   f01073fe <kfree>
f012293b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012293e:	e8 51 13 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122943:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122946:	74 17                	je     f012295f <test_kfree_bestfirstfit+0x15b4>
f0122948:	83 ec 04             	sub    $0x4,%esp
f012294b:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0122950:	68 89 07 00 00       	push   $0x789
f0122955:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012295a:	e8 47 d8 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012295f:	e8 6c 97 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122964:	89 c2                	mov    %eax,%edx
f0122966:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122969:	29 c2                	sub    %eax,%edx
f012296b:	89 d0                	mov    %edx,%eax
f012296d:	3d 00 03 00 00       	cmp    $0x300,%eax
f0122972:	74 17                	je     f012298b <test_kfree_bestfirstfit+0x15e0>
f0122974:	83 ec 04             	sub    $0x4,%esp
f0122977:	68 60 ac 13 f0       	push   $0xf013ac60
f012297c:	68 8a 07 00 00       	push   $0x78a
f0122981:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122986:	e8 1b d8 fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012298b:	e8 40 97 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122990:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122993:	e8 fc 12 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122998:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f012299b:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01229a1:	83 ec 0c             	sub    $0xc,%esp
f01229a4:	50                   	push   %eax
f01229a5:	e8 54 4a fe ff       	call   f01073fe <kfree>
f01229aa:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01229ad:	e8 e2 12 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01229b2:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f01229b5:	74 17                	je     f01229ce <test_kfree_bestfirstfit+0x1623>
f01229b7:	83 ec 04             	sub    $0x4,%esp
f01229ba:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01229bf:	68 90 07 00 00       	push   $0x790
f01229c4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01229c9:	e8 d8 d7 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1) panic("Wrong kfree: pages in memory are not freed correctly");
f01229ce:	e8 fd 96 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01229d3:	89 c2                	mov    %eax,%edx
f01229d5:	8b 45 d0             	mov    -0x30(%ebp),%eax
f01229d8:	29 c2                	sub    %eax,%edx
f01229da:	89 d0                	mov    %edx,%eax
f01229dc:	83 f8 01             	cmp    $0x1,%eax
f01229df:	74 17                	je     f01229f8 <test_kfree_bestfirstfit+0x164d>
f01229e1:	83 ec 04             	sub    $0x4,%esp
f01229e4:	68 60 ac 13 f0       	push   $0xf013ac60
f01229e9:	68 91 07 00 00       	push   $0x791
f01229ee:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01229f3:	e8 ae d7 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f01229f8:	e8 d3 96 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01229fd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122a00:	e8 8f 12 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122a05:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[10]);
f0122a08:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0122a0e:	83 ec 0c             	sub    $0xc,%esp
f0122a11:	50                   	push   %eax
f0122a12:	e8 e7 49 fe ff       	call   f01073fe <kfree>
f0122a17:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122a1a:	e8 75 12 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122a1f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122a22:	74 17                	je     f0122a3b <test_kfree_bestfirstfit+0x1690>
f0122a24:	83 ec 04             	sub    $0x4,%esp
f0122a27:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0122a2c:	68 97 07 00 00       	push   $0x797
f0122a31:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122a36:	e8 6b d7 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 1*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0122a3b:	e8 90 96 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122a40:	89 c2                	mov    %eax,%edx
f0122a42:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122a45:	29 c2                	sub    %eax,%edx
f0122a47:	89 d0                	mov    %edx,%eax
f0122a49:	3d 00 01 00 00       	cmp    $0x100,%eax
f0122a4e:	74 17                	je     f0122a67 <test_kfree_bestfirstfit+0x16bc>
f0122a50:	83 ec 04             	sub    $0x4,%esp
f0122a53:	68 60 ac 13 f0       	push   $0xf013ac60
f0122a58:	68 98 07 00 00       	push   $0x798
f0122a5d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122a62:	e8 3f d7 fd ff       	call   f01001a6 <_panic>

		if(start_freeFrames != (sys_calculate_free_frames())) {panic("Wrong kfree: not all pages removed correctly at end");}
f0122a67:	e8 64 96 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122a6c:	89 c2                	mov    %eax,%edx
f0122a6e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0122a71:	39 c2                	cmp    %eax,%edx
f0122a73:	74 17                	je     f0122a8c <test_kfree_bestfirstfit+0x16e1>
f0122a75:	83 ec 04             	sub    $0x4,%esp
f0122a78:	68 00 ad 13 f0       	push   $0xf013ad00
f0122a7d:	68 9a 07 00 00       	push   $0x79a
f0122a82:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122a87:	e8 1a d7 fd ff       	call   f01001a6 <_panic>
	}
	cprintf("\b\b\b60%");
f0122a8c:	83 ec 0c             	sub    $0xc,%esp
f0122a8f:	68 34 ad 13 f0       	push   $0xf013ad34
f0122a94:	e8 94 e1 fd ff       	call   f0100c2d <cprintf>
f0122a99:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree [15%]
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0122a9c:	83 ec 0c             	sub    $0xc,%esp
f0122a9f:	6a 03                	push   $0x3
f0122aa1:	e8 d3 9a fe ff       	call   f010c579 <sys_bypassPageFault>
f0122aa6:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0122aa9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0122ab0:	e9 82 00 00 00       	jmp    f0122b37 <test_kfree_bestfirstfit+0x178c>
		{
			ptr = (char *) ptr_allocations[i];
f0122ab5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122ab8:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0122abf:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0122ac2:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122ac5:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122ac8:	e8 9a 9a fe ff       	call   f010c567 <sys_rcr2>
f0122acd:	89 c2                	mov    %eax,%edx
f0122acf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122ad2:	39 c2                	cmp    %eax,%edx
f0122ad4:	74 17                	je     f0122aed <test_kfree_bestfirstfit+0x1742>
f0122ad6:	83 ec 04             	sub    $0x4,%esp
f0122ad9:	68 3c ad 13 f0       	push   $0xf013ad3c
f0122ade:	68 a9 07 00 00       	push   $0x7a9
f0122ae3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122ae8:	e8 b9 d6 fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f0122aed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122af0:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0122af7:	89 c2                	mov    %eax,%edx
f0122af9:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122afc:	01 d0                	add    %edx,%eax
f0122afe:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0122b01:	e8 61 9a fe ff       	call   f010c567 <sys_rcr2>
f0122b06:	89 c2                	mov    %eax,%edx
f0122b08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0122b0b:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0122b12:	89 c1                	mov    %eax,%ecx
f0122b14:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122b17:	01 c8                	add    %ecx,%eax
f0122b19:	39 c2                	cmp    %eax,%edx
f0122b1b:	74 17                	je     f0122b34 <test_kfree_bestfirstfit+0x1789>
f0122b1d:	83 ec 04             	sub    $0x4,%esp
f0122b20:	68 3c ad 13 f0       	push   $0xf013ad3c
f0122b25:	68 ab 07 00 00       	push   $0x7ab
f0122b2a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122b2f:	e8 72 d6 fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0122b34:	ff 45 f4             	incl   -0xc(%ebp)
f0122b37:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0122b3b:	0f 8e 74 ff ff ff    	jle    f0122ab5 <test_kfree_bestfirstfit+0x170a>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0122b41:	83 ec 0c             	sub    $0xc,%esp
f0122b44:	6a 00                	push   $0x0
f0122b46:	e8 2e 9a fe ff       	call   f010c579 <sys_bypassPageFault>
f0122b4b:	83 c4 10             	add    $0x10,%esp
	}
	cprintf("\b\b\b75%");
f0122b4e:	83 ec 0c             	sub    $0xc,%esp
f0122b51:	68 81 ad 13 f0       	push   $0xf013ad81
f0122b56:	e8 d2 e0 fd ff       	call   f0100c2d <cprintf>
f0122b5b:	83 c4 10             	add    $0x10,%esp

	//kfree non-exist item [10%]
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122b5e:	e8 6d 95 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122b63:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122b66:	e8 29 11 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122b6b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[0]);
f0122b6e:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0122b74:	83 ec 0c             	sub    $0xc,%esp
f0122b77:	50                   	push   %eax
f0122b78:	e8 81 48 fe ff       	call   f01073fe <kfree>
f0122b7d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122b80:	e8 0f 11 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122b85:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122b88:	74 17                	je     f0122ba1 <test_kfree_bestfirstfit+0x17f6>
f0122b8a:	83 ec 04             	sub    $0x4,%esp
f0122b8d:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0122b92:	68 b9 07 00 00       	push   $0x7b9
f0122b97:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122b9c:	e8 05 d6 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122ba1:	e8 2a 95 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122ba6:	89 c2                	mov    %eax,%edx
f0122ba8:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122bab:	39 c2                	cmp    %eax,%edx
f0122bad:	74 17                	je     f0122bc6 <test_kfree_bestfirstfit+0x181b>
f0122baf:	83 ec 04             	sub    $0x4,%esp
f0122bb2:	68 88 ad 13 f0       	push   $0xf013ad88
f0122bb7:	68 ba 07 00 00       	push   $0x7ba
f0122bbc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122bc1:	e8 e0 d5 fd ff       	call   f01001a6 <_panic>

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0122bc6:	e8 05 95 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122bcb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122bce:	e8 c1 10 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122bd3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0122bd6:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0122bdc:	83 ec 0c             	sub    $0xc,%esp
f0122bdf:	50                   	push   %eax
f0122be0:	e8 19 48 fe ff       	call   f01073fe <kfree>
f0122be5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122be8:	e8 a7 10 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122bed:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122bf0:	74 17                	je     f0122c09 <test_kfree_bestfirstfit+0x185e>
f0122bf2:	83 ec 04             	sub    $0x4,%esp
f0122bf5:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0122bfa:	68 c0 07 00 00       	push   $0x7c0
f0122bff:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122c04:	e8 9d d5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122c09:	e8 c2 94 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122c0e:	89 c2                	mov    %eax,%edx
f0122c10:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122c13:	39 c2                	cmp    %eax,%edx
f0122c15:	74 17                	je     f0122c2e <test_kfree_bestfirstfit+0x1883>
f0122c17:	83 ec 04             	sub    $0x4,%esp
f0122c1a:	68 88 ad 13 f0       	push   $0xf013ad88
f0122c1f:	68 c1 07 00 00       	push   $0x7c1
f0122c24:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122c29:	e8 78 d5 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0122c2e:	e8 9d 94 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122c33:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c36:	e8 59 10 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122c3b:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0122c3e:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0122c44:	83 ec 0c             	sub    $0xc,%esp
f0122c47:	50                   	push   %eax
f0122c48:	e8 b1 47 fe ff       	call   f01073fe <kfree>
f0122c4d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122c50:	e8 3f 10 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122c55:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122c58:	74 17                	je     f0122c71 <test_kfree_bestfirstfit+0x18c6>
f0122c5a:	83 ec 04             	sub    $0x4,%esp
f0122c5d:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0122c62:	68 c7 07 00 00       	push   $0x7c7
f0122c67:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122c6c:	e8 35 d5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122c71:	e8 5a 94 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122c76:	89 c2                	mov    %eax,%edx
f0122c78:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122c7b:	39 c2                	cmp    %eax,%edx
f0122c7d:	74 17                	je     f0122c96 <test_kfree_bestfirstfit+0x18eb>
f0122c7f:	83 ec 04             	sub    $0x4,%esp
f0122c82:	68 88 ad 13 f0       	push   $0xf013ad88
f0122c87:	68 c8 07 00 00       	push   $0x7c8
f0122c8c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122c91:	e8 10 d5 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0122c96:	e8 35 94 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122c9b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122c9e:	e8 f1 0f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122ca3:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0122ca6:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0122cac:	83 ec 0c             	sub    $0xc,%esp
f0122caf:	50                   	push   %eax
f0122cb0:	e8 49 47 fe ff       	call   f01073fe <kfree>
f0122cb5:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122cb8:	e8 d7 0f fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122cbd:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0122cc0:	74 17                	je     f0122cd9 <test_kfree_bestfirstfit+0x192e>
f0122cc2:	83 ec 04             	sub    $0x4,%esp
f0122cc5:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0122cca:	68 ce 07 00 00       	push   $0x7ce
f0122ccf:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122cd4:	e8 cd d4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0122cd9:	e8 f2 93 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122cde:	89 c2                	mov    %eax,%edx
f0122ce0:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0122ce3:	39 c2                	cmp    %eax,%edx
f0122ce5:	74 17                	je     f0122cfe <test_kfree_bestfirstfit+0x1953>
f0122ce7:	83 ec 04             	sub    $0x4,%esp
f0122cea:	68 88 ad 13 f0       	push   $0xf013ad88
f0122cef:	68 cf 07 00 00       	push   $0x7cf
f0122cf4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122cf9:	e8 a8 d4 fd ff       	call   f01001a6 <_panic>

	}
	cprintf("\b\b\b85%");
f0122cfe:	83 ec 0c             	sub    $0xc,%esp
f0122d01:	68 cf ad 13 f0       	push   $0xf013adcf
f0122d06:	e8 22 df fd ff       	call   f0100c2d <cprintf>
f0122d0b:	83 c4 10             	add    $0x10,%esp

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122d0e:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0122d15:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0122d1c:	eb 48                	jmp    f0122d66 <test_kfree_bestfirstfit+0x19bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0122d1e:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0122d21:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0122d26:	83 ec 04             	sub    $0x4,%esp
f0122d29:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0122d2f:	51                   	push   %ecx
f0122d30:	52                   	push   %edx
f0122d31:	50                   	push   %eax
f0122d32:	e8 3a 3c fe ff       	call   f0106971 <get_page_table>
f0122d37:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0122d3a:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0122d40:	85 c0                	test   %eax,%eax
f0122d42:	75 17                	jne    f0122d5b <test_kfree_bestfirstfit+0x19b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0122d44:	83 ec 04             	sub    $0x4,%esp
f0122d47:	68 d8 ad 13 f0       	push   $0xf013add8
f0122d4c:	68 dd 07 00 00       	push   $0x7dd
f0122d51:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122d56:	e8 4b d4 fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b85%");

	//check tables	[15%]
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0122d5b:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0122d62:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0122d66:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122d6a:	78 b2                	js     f0122d1e <test_kfree_bestfirstfit+0x1973>
f0122d6c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0122d70:	7f 09                	jg     f0122d7b <test_kfree_bestfirstfit+0x19d0>
f0122d72:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f0122d79:	76 a3                	jbe    f0122d1e <test_kfree_bestfirstfit+0x1973>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
			}
		}
	}
	cprintf("\b\b\b100%\n");
f0122d7b:	83 ec 0c             	sub    $0xc,%esp
f0122d7e:	68 ba a6 13 f0       	push   $0xf013a6ba
f0122d83:	e8 a5 de fd ff       	call   f0100c2d <cprintf>
f0122d88:	83 c4 10             	add    $0x10,%esp



	cprintf("\nCongratulations!! test kfree completed successfully.\n");
f0122d8b:	83 ec 0c             	sub    $0xc,%esp
f0122d8e:	68 40 ae 13 f0       	push   $0xf013ae40
f0122d93:	e8 95 de fd ff       	call   f0100c2d <cprintf>
f0122d98:	83 c4 10             	add    $0x10,%esp

	return 1;
f0122d9b:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0122da0:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0122da3:	5b                   	pop    %ebx
f0122da4:	5f                   	pop    %edi
f0122da5:	5d                   	pop    %ebp
f0122da6:	c3                   	ret    

f0122da7 <test_kheap_phys_addr>:

int test_kheap_phys_addr()
{
f0122da7:	55                   	push   %ebp
f0122da8:	89 e5                	mov    %esp,%ebp
f0122daa:	57                   	push   %edi
f0122dab:	56                   	push   %esi
f0122dac:	53                   	push   %ebx
f0122dad:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
	cprintf("==============================================\n");
f0122db3:	83 ec 0c             	sub    $0xc,%esp
f0122db6:	68 18 a4 13 f0       	push   $0xf013a418
f0122dbb:	e8 6d de fd ff       	call   f0100c2d <cprintf>
f0122dc0:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0122dc3:	83 ec 0c             	sub    $0xc,%esp
f0122dc6:	68 48 a4 13 f0       	push   $0xf013a448
f0122dcb:	e8 5d de fd ff       	call   f0100c2d <cprintf>
f0122dd0:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f0122dd3:	83 ec 0c             	sub    $0xc,%esp
f0122dd6:	68 18 a4 13 f0       	push   $0xf013a418
f0122ddb:	e8 4d de fd ff       	call   f0100c2d <cprintf>
f0122de0:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f0122de3:	c6 45 bf 80          	movb   $0x80,-0x41(%ebp)
	char maxByte = 0x7F;
f0122de7:	c6 45 be 7f          	movb   $0x7f,-0x42(%ebp)
	short minShort = 1<<15 ;
f0122deb:	66 c7 45 bc 00 80    	movw   $0x8000,-0x44(%ebp)
	short maxShort = 0x7FFF;
f0122df1:	66 c7 45 ba ff 7f    	movw   $0x7fff,-0x46(%ebp)
	int minInt = 1<<31 ;
f0122df7:	c7 45 b4 00 00 00 80 	movl   $0x80000000,-0x4c(%ebp)
	int maxInt = 0x7FFFFFFF;
f0122dfe:	c7 45 b0 ff ff ff 7f 	movl   $0x7fffffff,-0x50(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0122e05:	e8 c6 92 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122e0a:	89 45 ac             	mov    %eax,-0x54(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0122e0d:	8d 95 c4 fd ff ff    	lea    -0x23c(%ebp),%edx
f0122e13:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122e18:	b8 00 00 00 00       	mov    $0x0,%eax
f0122e1d:	89 d7                	mov    %edx,%edi
f0122e1f:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0122e21:	8d 95 74 fd ff ff    	lea    -0x28c(%ebp),%edx
f0122e27:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122e2c:	b8 00 00 00 00       	mov    $0x0,%eax
f0122e31:	89 d7                	mov    %edx,%edi
f0122e33:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0122e35:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0122e3b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0122e40:	b8 00 00 00 00       	mov    $0x0,%eax
f0122e45:	89 d7                	mov    %edx,%edi
f0122e47:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122e49:	e8 82 92 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122e4e:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122e51:	e8 3e 0e fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122e56:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0122e59:	83 ec 0c             	sub    $0xc,%esp
f0122e5c:	68 00 fc 1f 00       	push   $0x1ffc00
f0122e61:	e8 7e 45 fe ff       	call   f01073e4 <kmalloc>
f0122e66:	83 c4 10             	add    $0x10,%esp
f0122e69:	89 85 24 fd ff ff    	mov    %eax,-0x2dc(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122e6f:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0122e75:	89 c1                	mov    %eax,%ecx
f0122e77:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0122e7e:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0122e81:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122e86:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0122e89:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122e8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0122e91:	f7 75 a0             	divl   -0x60(%ebp)
f0122e94:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0122e97:	29 d0                	sub    %edx,%eax
f0122e99:	89 c3                	mov    %eax,%ebx
f0122e9b:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0122ea2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122ea7:	0f b6 d0             	movzbl %al,%edx
f0122eaa:	8b 45 98             	mov    -0x68(%ebp),%eax
f0122ead:	01 d0                	add    %edx,%eax
f0122eaf:	48                   	dec    %eax
f0122eb0:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0122eb3:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122eb6:	ba 00 00 00 00       	mov    $0x0,%edx
f0122ebb:	f7 75 98             	divl   -0x68(%ebp)
f0122ebe:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0122ec1:	29 d0                	sub    %edx,%eax
f0122ec3:	01 c3                	add    %eax,%ebx
f0122ec5:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0122ecc:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122ed1:	0f b6 c0             	movzbl %al,%eax
f0122ed4:	c1 e0 04             	shl    $0x4,%eax
f0122ed7:	89 c2                	mov    %eax,%edx
f0122ed9:	8b 45 90             	mov    -0x70(%ebp),%eax
f0122edc:	01 d0                	add    %edx,%eax
f0122ede:	48                   	dec    %eax
f0122edf:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0122ee2:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122ee5:	ba 00 00 00 00       	mov    $0x0,%edx
f0122eea:	f7 75 90             	divl   -0x70(%ebp)
f0122eed:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0122ef0:	29 d0                	sub    %edx,%eax
f0122ef2:	01 d8                	add    %ebx,%eax
f0122ef4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0122ef9:	39 c1                	cmp    %eax,%ecx
f0122efb:	74 17                	je     f0122f14 <test_kheap_phys_addr+0x16d>
f0122efd:	83 ec 04             	sub    $0x4,%esp
f0122f00:	68 bc a5 13 f0       	push   $0xf013a5bc
f0122f05:	68 0a 08 00 00       	push   $0x80a
f0122f0a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122f0f:	e8 92 d2 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0122f14:	e8 7b 0d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122f19:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0122f1c:	74 17                	je     f0122f35 <test_kheap_phys_addr+0x18e>
f0122f1e:	83 ec 04             	sub    $0x4,%esp
f0122f21:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0122f26:	68 0b 08 00 00       	push   $0x80b
f0122f2b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122f30:	e8 71 d2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0122f35:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0122f38:	e8 93 91 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122f3d:	29 c3                	sub    %eax,%ebx
f0122f3f:	89 d8                	mov    %ebx,%eax
f0122f41:	3d 00 02 00 00       	cmp    $0x200,%eax
f0122f46:	74 17                	je     f0122f5f <test_kheap_phys_addr+0x1b8>
f0122f48:	83 ec 04             	sub    $0x4,%esp
f0122f4b:	68 58 a5 13 f0       	push   $0xf013a558
f0122f50:	68 0c 08 00 00       	push   $0x80c
f0122f55:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0122f5a:	e8 47 d2 fd ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0122f5f:	e8 6c 91 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0122f64:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0122f67:	e8 28 0d fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0122f6c:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0122f6f:	83 ec 0c             	sub    $0xc,%esp
f0122f72:	68 00 fc 1f 00       	push   $0x1ffc00
f0122f77:	e8 68 44 fe ff       	call   f01073e4 <kmalloc>
f0122f7c:	83 c4 10             	add    $0x10,%esp
f0122f7f:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0122f85:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0122f8b:	89 c1                	mov    %eax,%ecx
f0122f8d:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0122f94:	8b 45 88             	mov    -0x78(%ebp),%eax
f0122f97:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0122f9c:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0122f9f:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122fa2:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fa7:	f7 75 88             	divl   -0x78(%ebp)
f0122faa:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0122fad:	29 d0                	sub    %edx,%eax
f0122faf:	89 c3                	mov    %eax,%ebx
f0122fb1:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0122fb8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122fbd:	0f b6 d0             	movzbl %al,%edx
f0122fc0:	8b 45 80             	mov    -0x80(%ebp),%eax
f0122fc3:	01 d0                	add    %edx,%eax
f0122fc5:	48                   	dec    %eax
f0122fc6:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0122fcc:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122fd2:	ba 00 00 00 00       	mov    $0x0,%edx
f0122fd7:	f7 75 80             	divl   -0x80(%ebp)
f0122fda:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0122fe0:	29 d0                	sub    %edx,%eax
f0122fe2:	01 c3                	add    %eax,%ebx
f0122fe4:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0122feb:	10 00 00 
f0122fee:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0122ff3:	0f b6 c0             	movzbl %al,%eax
f0122ff6:	c1 e0 04             	shl    $0x4,%eax
f0122ff9:	89 c2                	mov    %eax,%edx
f0122ffb:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0123001:	01 d0                	add    %edx,%eax
f0123003:	48                   	dec    %eax
f0123004:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012300a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123010:	ba 00 00 00 00       	mov    $0x0,%edx
f0123015:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012301b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0123021:	29 d0                	sub    %edx,%eax
f0123023:	01 d8                	add    %ebx,%eax
f0123025:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012302a:	39 c1                	cmp    %eax,%ecx
f012302c:	74 17                	je     f0123045 <test_kheap_phys_addr+0x29e>
f012302e:	83 ec 04             	sub    $0x4,%esp
f0123031:	68 bc a5 13 f0       	push   $0xf013a5bc
f0123036:	68 12 08 00 00       	push   $0x812
f012303b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123040:	e8 61 d1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123045:	e8 4a 0c fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012304a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012304d:	74 17                	je     f0123066 <test_kheap_phys_addr+0x2bf>
f012304f:	83 ec 04             	sub    $0x4,%esp
f0123052:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0123057:	68 13 08 00 00       	push   $0x813
f012305c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123061:	e8 40 d1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123066:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123069:	e8 62 90 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012306e:	29 c3                	sub    %eax,%ebx
f0123070:	89 d8                	mov    %ebx,%eax
f0123072:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123077:	74 17                	je     f0123090 <test_kheap_phys_addr+0x2e9>
f0123079:	83 ec 04             	sub    $0x4,%esp
f012307c:	68 58 a5 13 f0       	push   $0xf013a558
f0123081:	68 14 08 00 00       	push   $0x814
f0123086:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012308b:	e8 16 d1 fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0123090:	e8 3b 90 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0123095:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123098:	e8 f7 0b fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012309d:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01230a0:	83 ec 0c             	sub    $0xc,%esp
f01230a3:	68 00 08 00 00       	push   $0x800
f01230a8:	e8 37 43 fe ff       	call   f01073e4 <kmalloc>
f01230ad:	83 c4 10             	add    $0x10,%esp
f01230b0:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01230b6:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01230bc:	89 c1                	mov    %eax,%ecx
f01230be:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01230c5:	10 00 00 
f01230c8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f01230ce:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01230d3:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f01230d9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01230df:	ba 00 00 00 00       	mov    $0x0,%edx
f01230e4:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01230ea:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01230f0:	29 d0                	sub    %edx,%eax
f01230f2:	89 c3                	mov    %eax,%ebx
f01230f4:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01230fb:	10 00 00 
f01230fe:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123103:	0f b6 d0             	movzbl %al,%edx
f0123106:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012310c:	01 d0                	add    %edx,%eax
f012310e:	48                   	dec    %eax
f012310f:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0123115:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012311b:	ba 00 00 00 00       	mov    $0x0,%edx
f0123120:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f0123126:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012312c:	29 d0                	sub    %edx,%eax
f012312e:	01 c3                	add    %eax,%ebx
f0123130:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f0123137:	10 00 00 
f012313a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012313f:	0f b6 c0             	movzbl %al,%eax
f0123142:	c1 e0 04             	shl    $0x4,%eax
f0123145:	89 c2                	mov    %eax,%edx
f0123147:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012314d:	01 d0                	add    %edx,%eax
f012314f:	48                   	dec    %eax
f0123150:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f0123156:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012315c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123161:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f0123167:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012316d:	29 d0                	sub    %edx,%eax
f012316f:	01 d8                	add    %ebx,%eax
f0123171:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0123176:	39 c1                	cmp    %eax,%ecx
f0123178:	74 17                	je     f0123191 <test_kheap_phys_addr+0x3ea>
f012317a:	83 ec 04             	sub    $0x4,%esp
f012317d:	68 bc a5 13 f0       	push   $0xf013a5bc
f0123182:	68 1a 08 00 00       	push   $0x81a
f0123187:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012318c:	e8 15 d0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123191:	e8 fe 0a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0123196:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123199:	74 17                	je     f01231b2 <test_kheap_phys_addr+0x40b>
f012319b:	83 ec 04             	sub    $0x4,%esp
f012319e:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01231a3:	68 1b 08 00 00       	push   $0x81b
f01231a8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01231ad:	e8 f4 cf fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01231b2:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01231b5:	e8 16 8f fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01231ba:	29 c3                	sub    %eax,%ebx
f01231bc:	89 d8                	mov    %ebx,%eax
f01231be:	83 f8 01             	cmp    $0x1,%eax
f01231c1:	74 17                	je     f01231da <test_kheap_phys_addr+0x433>
f01231c3:	83 ec 04             	sub    $0x4,%esp
f01231c6:	68 58 a5 13 f0       	push   $0xf013a558
f01231cb:	68 1c 08 00 00       	push   $0x81c
f01231d0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01231d5:	e8 cc cf fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01231da:	e8 f1 8e fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01231df:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01231e2:	e8 ad 0a fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01231e7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01231ea:	83 ec 0c             	sub    $0xc,%esp
f01231ed:	68 00 08 00 00       	push   $0x800
f01231f2:	e8 ed 41 fe ff       	call   f01073e4 <kmalloc>
f01231f7:	83 c4 10             	add    $0x10,%esp
f01231fa:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123200:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0123206:	89 c1                	mov    %eax,%ecx
f0123208:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f012320f:	10 00 00 
f0123212:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0123218:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012321d:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f0123223:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0123229:	ba 00 00 00 00       	mov    $0x0,%edx
f012322e:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f0123234:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012323a:	29 d0                	sub    %edx,%eax
f012323c:	89 c3                	mov    %eax,%ebx
f012323e:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f0123245:	10 00 00 
f0123248:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012324d:	0f b6 d0             	movzbl %al,%edx
f0123250:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0123256:	01 d0                	add    %edx,%eax
f0123258:	48                   	dec    %eax
f0123259:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f012325f:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123265:	ba 00 00 00 00       	mov    $0x0,%edx
f012326a:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0123270:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0123276:	29 d0                	sub    %edx,%eax
f0123278:	01 c3                	add    %eax,%ebx
f012327a:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0123281:	10 00 00 
f0123284:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123289:	0f b6 c0             	movzbl %al,%eax
f012328c:	c1 e0 04             	shl    $0x4,%eax
f012328f:	89 c2                	mov    %eax,%edx
f0123291:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0123297:	01 d0                	add    %edx,%eax
f0123299:	48                   	dec    %eax
f012329a:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f01232a0:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01232a6:	ba 00 00 00 00       	mov    $0x0,%edx
f01232ab:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f01232b1:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01232b7:	29 d0                	sub    %edx,%eax
f01232b9:	01 d8                	add    %ebx,%eax
f01232bb:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01232c0:	39 c1                	cmp    %eax,%ecx
f01232c2:	74 17                	je     f01232db <test_kheap_phys_addr+0x534>
f01232c4:	83 ec 04             	sub    $0x4,%esp
f01232c7:	68 bc a5 13 f0       	push   $0xf013a5bc
f01232cc:	68 22 08 00 00       	push   $0x822
f01232d1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01232d6:	e8 cb ce fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01232db:	e8 b4 09 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01232e0:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01232e3:	74 17                	je     f01232fc <test_kheap_phys_addr+0x555>
f01232e5:	83 ec 04             	sub    $0x4,%esp
f01232e8:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01232ed:	68 23 08 00 00       	push   $0x823
f01232f2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01232f7:	e8 aa ce fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01232fc:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01232ff:	e8 cc 8d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0123304:	29 c3                	sub    %eax,%ebx
f0123306:	89 d8                	mov    %ebx,%eax
f0123308:	83 f8 01             	cmp    $0x1,%eax
f012330b:	74 17                	je     f0123324 <test_kheap_phys_addr+0x57d>
f012330d:	83 ec 04             	sub    $0x4,%esp
f0123310:	68 58 a5 13 f0       	push   $0xf013a558
f0123315:	68 24 08 00 00       	push   $0x824
f012331a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012331f:	e8 82 ce fd ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0123324:	e8 a7 8d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0123329:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012332c:	e8 63 09 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0123331:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0123334:	83 ec 0c             	sub    $0xc,%esp
f0123337:	68 00 1c 00 00       	push   $0x1c00
f012333c:	e8 a3 40 fe ff       	call   f01073e4 <kmalloc>
f0123341:	83 c4 10             	add    $0x10,%esp
f0123344:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012334a:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f0123350:	89 c1                	mov    %eax,%ecx
f0123352:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f0123359:	10 00 00 
f012335c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0123362:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123367:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012336d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123373:	ba 00 00 00 00       	mov    $0x0,%edx
f0123378:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012337e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0123384:	29 d0                	sub    %edx,%eax
f0123386:	89 c3                	mov    %eax,%ebx
f0123388:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012338f:	10 00 00 
f0123392:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123397:	0f b6 d0             	movzbl %al,%edx
f012339a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01233a0:	01 d0                	add    %edx,%eax
f01233a2:	48                   	dec    %eax
f01233a3:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01233a9:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01233af:	ba 00 00 00 00       	mov    $0x0,%edx
f01233b4:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01233ba:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01233c0:	29 d0                	sub    %edx,%eax
f01233c2:	01 c3                	add    %eax,%ebx
f01233c4:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01233cb:	10 00 00 
f01233ce:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01233d3:	0f b6 c0             	movzbl %al,%eax
f01233d6:	c1 e0 04             	shl    $0x4,%eax
f01233d9:	89 c2                	mov    %eax,%edx
f01233db:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01233e1:	01 d0                	add    %edx,%eax
f01233e3:	48                   	dec    %eax
f01233e4:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01233ea:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01233f0:	ba 00 00 00 00       	mov    $0x0,%edx
f01233f5:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01233fb:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0123401:	29 d0                	sub    %edx,%eax
f0123403:	01 d8                	add    %ebx,%eax
f0123405:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012340a:	39 c1                	cmp    %eax,%ecx
f012340c:	74 17                	je     f0123425 <test_kheap_phys_addr+0x67e>
f012340e:	83 ec 04             	sub    $0x4,%esp
f0123411:	68 bc a5 13 f0       	push   $0xf013a5bc
f0123416:	68 2a 08 00 00       	push   $0x82a
f012341b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123420:	e8 81 cd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123425:	e8 6a 08 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012342a:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012342d:	74 17                	je     f0123446 <test_kheap_phys_addr+0x69f>
f012342f:	83 ec 04             	sub    $0x4,%esp
f0123432:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0123437:	68 2b 08 00 00       	push   $0x82b
f012343c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123441:	e8 60 cd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123446:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123449:	e8 82 8c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012344e:	29 c3                	sub    %eax,%ebx
f0123450:	89 d8                	mov    %ebx,%eax
f0123452:	83 f8 02             	cmp    $0x2,%eax
f0123455:	74 17                	je     f012346e <test_kheap_phys_addr+0x6c7>
f0123457:	83 ec 04             	sub    $0x4,%esp
f012345a:	68 58 a5 13 f0       	push   $0xf013a558
f012345f:	68 2c 08 00 00       	push   $0x82c
f0123464:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123469:	e8 38 cd fd ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012346e:	e8 5d 8c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0123473:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123476:	e8 19 08 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012347b:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f012347e:	83 ec 0c             	sub    $0xc,%esp
f0123481:	68 00 fc 2f 00       	push   $0x2ffc00
f0123486:	e8 59 3f fe ff       	call   f01073e4 <kmalloc>
f012348b:	83 c4 10             	add    $0x10,%esp
f012348e:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0123494:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f012349a:	89 c1                	mov    %eax,%ecx
f012349c:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01234a3:	10 00 00 
f01234a6:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01234ac:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01234b1:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f01234b7:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01234bd:	ba 00 00 00 00       	mov    $0x0,%edx
f01234c2:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f01234c8:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01234ce:	29 d0                	sub    %edx,%eax
f01234d0:	89 c3                	mov    %eax,%ebx
f01234d2:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01234d9:	10 00 00 
f01234dc:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01234e1:	0f b6 d0             	movzbl %al,%edx
f01234e4:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01234ea:	01 d0                	add    %edx,%eax
f01234ec:	48                   	dec    %eax
f01234ed:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01234f3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01234f9:	ba 00 00 00 00       	mov    $0x0,%edx
f01234fe:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0123504:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012350a:	29 d0                	sub    %edx,%eax
f012350c:	01 c3                	add    %eax,%ebx
f012350e:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0123515:	10 00 00 
f0123518:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012351d:	0f b6 c0             	movzbl %al,%eax
f0123520:	c1 e0 04             	shl    $0x4,%eax
f0123523:	89 c2                	mov    %eax,%edx
f0123525:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012352b:	01 d0                	add    %edx,%eax
f012352d:	48                   	dec    %eax
f012352e:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0123534:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012353a:	ba 00 00 00 00       	mov    $0x0,%edx
f012353f:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0123545:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012354b:	29 d0                	sub    %edx,%eax
f012354d:	01 d8                	add    %ebx,%eax
f012354f:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0123554:	39 c1                	cmp    %eax,%ecx
f0123556:	74 17                	je     f012356f <test_kheap_phys_addr+0x7c8>
f0123558:	83 ec 04             	sub    $0x4,%esp
f012355b:	68 bc a5 13 f0       	push   $0xf013a5bc
f0123560:	68 32 08 00 00       	push   $0x832
f0123565:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012356a:	e8 37 cc fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012356f:	e8 20 07 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0123574:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f0123577:	74 17                	je     f0123590 <test_kheap_phys_addr+0x7e9>
f0123579:	83 ec 04             	sub    $0x4,%esp
f012357c:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0123581:	68 33 08 00 00       	push   $0x833
f0123586:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012358b:	e8 16 cc fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123590:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f0123593:	e8 38 8b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0123598:	29 c3                	sub    %eax,%ebx
f012359a:	89 d8                	mov    %ebx,%eax
f012359c:	3d 00 03 00 00       	cmp    $0x300,%eax
f01235a1:	74 17                	je     f01235ba <test_kheap_phys_addr+0x813>
f01235a3:	83 ec 04             	sub    $0x4,%esp
f01235a6:	68 58 a5 13 f0       	push   $0xf013a558
f01235ab:	68 34 08 00 00       	push   $0x834
f01235b0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01235b5:	e8 ec cb fd ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01235ba:	e8 11 8b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01235bf:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01235c2:	e8 cd 06 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01235c7:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f01235ca:	83 ec 0c             	sub    $0xc,%esp
f01235cd:	68 00 fc 5f 00       	push   $0x5ffc00
f01235d2:	e8 0d 3e fe ff       	call   f01073e4 <kmalloc>
f01235d7:	83 c4 10             	add    $0x10,%esp
f01235da:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01235e0:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f01235e6:	89 c1                	mov    %eax,%ecx
f01235e8:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f01235ef:	10 00 00 
f01235f2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01235f8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01235fd:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0123603:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0123609:	ba 00 00 00 00       	mov    $0x0,%edx
f012360e:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0123614:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012361a:	29 d0                	sub    %edx,%eax
f012361c:	89 c3                	mov    %eax,%ebx
f012361e:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0123625:	10 00 00 
f0123628:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012362d:	0f b6 d0             	movzbl %al,%edx
f0123630:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0123636:	01 d0                	add    %edx,%eax
f0123638:	48                   	dec    %eax
f0123639:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f012363f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123645:	ba 00 00 00 00       	mov    $0x0,%edx
f012364a:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0123650:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0123656:	29 d0                	sub    %edx,%eax
f0123658:	01 c3                	add    %eax,%ebx
f012365a:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0123661:	10 00 00 
f0123664:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123669:	0f b6 c0             	movzbl %al,%eax
f012366c:	c1 e0 04             	shl    $0x4,%eax
f012366f:	89 c2                	mov    %eax,%edx
f0123671:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0123677:	01 d0                	add    %edx,%eax
f0123679:	48                   	dec    %eax
f012367a:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0123680:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123686:	ba 00 00 00 00       	mov    $0x0,%edx
f012368b:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0123691:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0123697:	29 d0                	sub    %edx,%eax
f0123699:	01 d8                	add    %ebx,%eax
f012369b:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01236a0:	39 c1                	cmp    %eax,%ecx
f01236a2:	74 17                	je     f01236bb <test_kheap_phys_addr+0x914>
f01236a4:	83 ec 04             	sub    $0x4,%esp
f01236a7:	68 bc a5 13 f0       	push   $0xf013a5bc
f01236ac:	68 3a 08 00 00       	push   $0x83a
f01236b1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01236b6:	e8 eb ca fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01236bb:	e8 d4 05 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f01236c0:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f01236c3:	74 17                	je     f01236dc <test_kheap_phys_addr+0x935>
f01236c5:	83 ec 04             	sub    $0x4,%esp
f01236c8:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01236cd:	68 3b 08 00 00       	push   $0x83b
f01236d2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01236d7:	e8 ca ca fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01236dc:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f01236df:	e8 ec 89 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01236e4:	29 c3                	sub    %eax,%ebx
f01236e6:	89 d8                	mov    %ebx,%eax
f01236e8:	3d 00 06 00 00       	cmp    $0x600,%eax
f01236ed:	74 17                	je     f0123706 <test_kheap_phys_addr+0x95f>
f01236ef:	83 ec 04             	sub    $0x4,%esp
f01236f2:	68 58 a5 13 f0       	push   $0xf013a558
f01236f7:	68 3c 08 00 00       	push   $0x83c
f01236fc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123701:	e8 a0 ca fd ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0123706:	e8 c5 89 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012370b:	89 45 a8             	mov    %eax,-0x58(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012370e:	e8 81 05 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0123713:	89 45 a4             	mov    %eax,-0x5c(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0123716:	83 ec 0c             	sub    $0xc,%esp
f0123719:	68 00 38 00 00       	push   $0x3800
f012371e:	e8 c1 3c fe ff       	call   f01073e4 <kmalloc>
f0123723:	83 c4 10             	add    $0x10,%esp
f0123726:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012372c:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0123732:	89 c1                	mov    %eax,%ecx
f0123734:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f012373b:	10 00 00 
f012373e:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0123744:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123749:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f012374f:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123755:	ba 00 00 00 00       	mov    $0x0,%edx
f012375a:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0123760:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0123766:	29 d0                	sub    %edx,%eax
f0123768:	89 c3                	mov    %eax,%ebx
f012376a:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0123771:	10 00 00 
f0123774:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123779:	0f b6 d0             	movzbl %al,%edx
f012377c:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0123782:	01 d0                	add    %edx,%eax
f0123784:	48                   	dec    %eax
f0123785:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f012378b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0123791:	ba 00 00 00 00       	mov    $0x0,%edx
f0123796:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f012379c:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f01237a2:	29 d0                	sub    %edx,%eax
f01237a4:	01 c3                	add    %eax,%ebx
f01237a6:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f01237ad:	10 00 00 
f01237b0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01237b5:	0f b6 c0             	movzbl %al,%eax
f01237b8:	c1 e0 04             	shl    $0x4,%eax
f01237bb:	89 c2                	mov    %eax,%edx
f01237bd:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f01237c3:	01 d0                	add    %edx,%eax
f01237c5:	48                   	dec    %eax
f01237c6:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f01237cc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01237d2:	ba 00 00 00 00       	mov    $0x0,%edx
f01237d7:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f01237dd:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f01237e3:	29 d0                	sub    %edx,%eax
f01237e5:	01 d8                	add    %ebx,%eax
f01237e7:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f01237ec:	39 c1                	cmp    %eax,%ecx
f01237ee:	74 17                	je     f0123807 <test_kheap_phys_addr+0xa60>
f01237f0:	83 ec 04             	sub    $0x4,%esp
f01237f3:	68 bc a5 13 f0       	push   $0xf013a5bc
f01237f8:	68 42 08 00 00       	push   $0x842
f01237fd:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123802:	e8 9f c9 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123807:	e8 88 04 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f012380c:	3b 45 a4             	cmp    -0x5c(%ebp),%eax
f012380f:	74 17                	je     f0123828 <test_kheap_phys_addr+0xa81>
f0123811:	83 ec 04             	sub    $0x4,%esp
f0123814:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0123819:	68 43 08 00 00       	push   $0x843
f012381e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123823:	e8 7e c9 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0123828:	8b 5d a8             	mov    -0x58(%ebp),%ebx
f012382b:	e8 a0 88 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0123830:	29 c3                	sub    %eax,%ebx
f0123832:	89 d8                	mov    %ebx,%eax
f0123834:	83 f8 04             	cmp    $0x4,%eax
f0123837:	74 17                	je     f0123850 <test_kheap_phys_addr+0xaa9>
f0123839:	83 ec 04             	sub    $0x4,%esp
f012383c:	68 58 a5 13 f0       	push   $0xf013a558
f0123841:	68 44 08 00 00       	push   $0x844
f0123846:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012384b:	e8 56 c9 fd ff       	call   f01001a6 <_panic>
	}

	//test kheap_physical_address after kmalloc only [40%]
	{
f0123850:	89 e0                	mov    %esp,%eax
f0123852:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123854:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f012385b:	10 00 00 
f012385e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0123864:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123869:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f012386f:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123875:	ba 00 00 00 00       	mov    $0x0,%edx
f012387a:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0123880:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0123886:	29 d0                	sub    %edx,%eax
f0123888:	89 c1                	mov    %eax,%ecx
f012388a:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0123891:	10 00 00 
f0123894:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123899:	0f b6 d0             	movzbl %al,%edx
f012389c:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f01238a2:	01 d0                	add    %edx,%eax
f01238a4:	48                   	dec    %eax
f01238a5:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f01238ab:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01238b1:	ba 00 00 00 00       	mov    $0x0,%edx
f01238b6:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f01238bc:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f01238c2:	29 d0                	sub    %edx,%eax
f01238c4:	01 c1                	add    %eax,%ecx
f01238c6:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f01238cd:	10 00 00 
f01238d0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01238d5:	0f b6 c0             	movzbl %al,%eax
f01238d8:	c1 e0 04             	shl    $0x4,%eax
f01238db:	89 c2                	mov    %eax,%edx
f01238dd:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01238e3:	01 d0                	add    %edx,%eax
f01238e5:	48                   	dec    %eax
f01238e6:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f01238ec:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f01238f2:	ba 00 00 00 00       	mov    $0x0,%edx
f01238f7:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f01238fd:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0123903:	29 d0                	sub    %edx,%eax
f0123905:	01 c8                	add    %ecx,%eax
f0123907:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012390c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123912:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0123919:	10 00 00 
f012391c:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0123922:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123927:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012392d:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123933:	ba 00 00 00 00       	mov    $0x0,%edx
f0123938:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012393e:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0123944:	29 d0                	sub    %edx,%eax
f0123946:	89 c1                	mov    %eax,%ecx
f0123948:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012394f:	10 00 00 
f0123952:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123957:	0f b6 d0             	movzbl %al,%edx
f012395a:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0123960:	01 d0                	add    %edx,%eax
f0123962:	48                   	dec    %eax
f0123963:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0123969:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012396f:	ba 00 00 00 00       	mov    $0x0,%edx
f0123974:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012397a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0123980:	29 d0                	sub    %edx,%eax
f0123982:	01 c1                	add    %eax,%ecx
f0123984:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012398b:	10 00 00 
f012398e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123993:	0f b6 c0             	movzbl %al,%eax
f0123996:	c1 e0 04             	shl    $0x4,%eax
f0123999:	89 c2                	mov    %eax,%edx
f012399b:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01239a1:	01 d0                	add    %edx,%eax
f01239a3:	48                   	dec    %eax
f01239a4:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f01239aa:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01239b0:	ba 00 00 00 00       	mov    $0x0,%edx
f01239b5:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f01239bb:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f01239c1:	29 d0                	sub    %edx,%eax
f01239c3:	01 c8                	add    %ecx,%eax
f01239c5:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f01239ca:	c1 e8 0c             	shr    $0xc,%eax
f01239cd:	89 c2                	mov    %eax,%edx
f01239cf:	4a                   	dec    %edx
f01239d0:	89 95 ac fe ff ff    	mov    %edx,-0x154(%ebp)
f01239d6:	c1 e0 02             	shl    $0x2,%eax
f01239d9:	8d 50 03             	lea    0x3(%eax),%edx
f01239dc:	b8 10 00 00 00       	mov    $0x10,%eax
f01239e1:	48                   	dec    %eax
f01239e2:	01 d0                	add    %edx,%eax
f01239e4:	bf 10 00 00 00       	mov    $0x10,%edi
f01239e9:	ba 00 00 00 00       	mov    $0x0,%edx
f01239ee:	f7 f7                	div    %edi
f01239f0:	6b c0 10             	imul   $0x10,%eax,%eax
f01239f3:	29 c4                	sub    %eax,%esp
f01239f5:	89 e0                	mov    %esp,%eax
f01239f7:	83 c0 03             	add    $0x3,%eax
f01239fa:	c1 e8 02             	shr    $0x2,%eax
f01239fd:	c1 e0 02             	shl    $0x2,%eax
f0123a00:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
		i = 0;
f0123a06:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123a0d:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f0123a14:	10 00 00 
f0123a17:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0123a1d:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123a22:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f0123a28:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123a2e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123a33:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f0123a39:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0123a3f:	29 d0                	sub    %edx,%eax
f0123a41:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123a46:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0123a49:	eb 29                	jmp    f0123a74 <test_kheap_phys_addr+0xccd>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123a4b:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123a4e:	8d 43 01             	lea    0x1(%ebx),%eax
f0123a51:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123a54:	83 ec 0c             	sub    $0xc,%esp
f0123a57:	ff 75 e0             	pushl  -0x20(%ebp)
f0123a5a:	e8 d3 39 fe ff       	call   f0107432 <kheap_physical_address>
f0123a5f:	83 c4 10             	add    $0x10,%esp
f0123a62:	89 c2                	mov    %eax,%edx
f0123a64:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123a6a:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123a6d:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
f0123a74:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123a77:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0123a7d:	72 cc                	jb     f0123a4b <test_kheap_phys_addr+0xca4>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123a7f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123a82:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
		i = 0;
f0123a88:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123a8f:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0123a96:	10 00 00 
f0123a99:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0123a9f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123aa4:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0123aaa:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0123ab0:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ab5:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0123abb:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0123ac1:	29 d0                	sub    %edx,%eax
f0123ac3:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123ac8:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0123acb:	e9 ab 00 00 00       	jmp    f0123b7b <test_kheap_phys_addr+0xdd4>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123ad0:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0123ad5:	83 ec 04             	sub    $0x4,%esp
f0123ad8:	8d 95 20 fd ff ff    	lea    -0x2e0(%ebp),%edx
f0123ade:	52                   	push   %edx
f0123adf:	ff 75 e0             	pushl  -0x20(%ebp)
f0123ae2:	50                   	push   %eax
f0123ae3:	e8 89 2e fe ff       	call   f0106971 <get_page_table>
f0123ae8:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123aeb:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0123af1:	85 c0                	test   %eax,%eax
f0123af3:	75 17                	jne    f0123b0c <test_kheap_phys_addr+0xd65>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123af5:	83 ec 04             	sub    $0x4,%esp
f0123af8:	68 78 ae 13 f0       	push   $0xf013ae78
f0123afd:	68 59 08 00 00       	push   $0x859
f0123b02:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123b07:	e8 9a c6 fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123b0c:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123b0f:	c1 e8 0c             	shr    $0xc,%eax
f0123b12:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123b17:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0123b1a:	eb 4b                	jmp    f0123b67 <test_kheap_phys_addr+0xdc0>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123b1c:	8b 85 20 fd ff ff    	mov    -0x2e0(%ebp),%eax
f0123b22:	8b 55 dc             	mov    -0x24(%ebp),%edx
f0123b25:	c1 e2 02             	shl    $0x2,%edx
f0123b28:	01 d0                	add    %edx,%eax
f0123b2a:	8b 00                	mov    (%eax),%eax
f0123b2c:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123b31:	89 c1                	mov    %eax,%ecx
f0123b33:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0123b39:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123b3c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123b3f:	39 c1                	cmp    %eax,%ecx
f0123b41:	74 17                	je     f0123b5a <test_kheap_phys_addr+0xdb3>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0123b43:	83 ec 04             	sub    $0x4,%esp
f0123b46:	68 d1 ae 13 f0       	push   $0xf013aed1
f0123b4b:	68 60 08 00 00       	push   $0x860
f0123b50:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123b55:	e8 4c c6 fd ff       	call   f01001a6 <_panic>
				}
				va+=PAGE_SIZE;
f0123b5a:	81 45 e0 00 10 00 00 	addl   $0x1000,-0x20(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123b61:	ff 45 dc             	incl   -0x24(%ebp)
f0123b64:	ff 45 e4             	incl   -0x1c(%ebp)
f0123b67:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123b6a:	3b 85 9c fe ff ff    	cmp    -0x164(%ebp),%eax
f0123b70:	7d 09                	jge    f0123b7b <test_kheap_phys_addr+0xdd4>
f0123b72:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f0123b79:	7e a1                	jle    f0123b1c <test_kheap_phys_addr+0xd75>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123b7b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f0123b7e:	3b 85 c8 fe ff ff    	cmp    -0x138(%ebp),%eax
f0123b84:	0f 82 46 ff ff ff    	jb     f0123ad0 <test_kheap_phys_addr+0xd29>
f0123b8a:	89 f4                	mov    %esi,%esp
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_physical_address: current evaluation = 40%");
f0123b8c:	83 ec 0c             	sub    $0xc,%esp
f0123b8f:	68 f0 ae 13 f0       	push   $0xf013aef0
f0123b94:	e8 94 d0 fd ff       	call   f0100c2d <cprintf>
f0123b99:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0123b9c:	e8 2f 85 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0123ba1:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0123ba7:	e8 e8 00 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0123bac:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[0]);
f0123bb2:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0123bb8:	83 ec 0c             	sub    $0xc,%esp
f0123bbb:	50                   	push   %eax
f0123bbc:	e8 3d 38 fe ff       	call   f01073fe <kfree>
f0123bc1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123bc4:	e8 cb 00 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0123bc9:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0123bcf:	74 17                	je     f0123be8 <test_kheap_phys_addr+0xe41>
f0123bd1:	83 ec 04             	sub    $0x4,%esp
f0123bd4:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0123bd9:	68 6e 08 00 00       	push   $0x86e
f0123bde:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123be3:	e8 be c5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0123be8:	e8 e3 84 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0123bed:	89 c2                	mov    %eax,%edx
f0123bef:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123bf5:	29 c2                	sub    %eax,%edx
f0123bf7:	89 d0                	mov    %edx,%eax
f0123bf9:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123bfe:	74 17                	je     f0123c17 <test_kheap_phys_addr+0xe70>
f0123c00:	83 ec 04             	sub    $0x4,%esp
f0123c03:	68 60 ac 13 f0       	push   $0xf013ac60
f0123c08:	68 6f 08 00 00       	push   $0x86f
f0123c0d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123c12:	e8 8f c5 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0123c17:	e8 b4 84 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0123c1c:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c22:	e8 6d 00 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0123c27:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[1]);
f0123c2d:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0123c33:	83 ec 0c             	sub    $0xc,%esp
f0123c36:	50                   	push   %eax
f0123c37:	e8 c2 37 fe ff       	call   f01073fe <kfree>
f0123c3c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123c3f:	e8 50 00 fe ff       	call   f0103c94 <pf_calculate_free_frames>
f0123c44:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0123c4a:	74 17                	je     f0123c63 <test_kheap_phys_addr+0xebc>
f0123c4c:	83 ec 04             	sub    $0x4,%esp
f0123c4f:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0123c54:	68 75 08 00 00       	push   $0x875
f0123c59:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123c5e:	e8 43 c5 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0123c63:	e8 68 84 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0123c68:	89 c2                	mov    %eax,%edx
f0123c6a:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123c70:	29 c2                	sub    %eax,%edx
f0123c72:	89 d0                	mov    %edx,%eax
f0123c74:	3d 00 02 00 00       	cmp    $0x200,%eax
f0123c79:	74 17                	je     f0123c92 <test_kheap_phys_addr+0xeeb>
f0123c7b:	83 ec 04             	sub    $0x4,%esp
f0123c7e:	68 60 ac 13 f0       	push   $0xf013ac60
f0123c83:	68 76 08 00 00       	push   $0x876
f0123c88:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123c8d:	e8 14 c5 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0123c92:	e8 39 84 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0123c97:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0123c9d:	e8 f2 ff fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0123ca2:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
		kfree(ptr_allocations[6]);
f0123ca8:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0123cae:	83 ec 0c             	sub    $0xc,%esp
f0123cb1:	50                   	push   %eax
f0123cb2:	e8 47 37 fe ff       	call   f01073fe <kfree>
f0123cb7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0123cba:	e8 d5 ff fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0123cbf:	3b 85 8c fe ff ff    	cmp    -0x174(%ebp),%eax
f0123cc5:	74 17                	je     f0123cde <test_kheap_phys_addr+0xf37>
f0123cc7:	83 ec 04             	sub    $0x4,%esp
f0123cca:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0123ccf:	68 7c 08 00 00       	push   $0x87c
f0123cd4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123cd9:	e8 c8 c4 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f0123cde:	e8 ed 83 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0123ce3:	89 c2                	mov    %eax,%edx
f0123ce5:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f0123ceb:	29 c2                	sub    %eax,%edx
f0123ced:	89 d0                	mov    %edx,%eax
f0123cef:	3d 00 06 00 00       	cmp    $0x600,%eax
f0123cf4:	74 17                	je     f0123d0d <test_kheap_phys_addr+0xf66>
f0123cf6:	83 ec 04             	sub    $0x4,%esp
f0123cf9:	68 60 ac 13 f0       	push   $0xf013ac60
f0123cfe:	68 7d 08 00 00       	push   $0x87d
f0123d03:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123d08:	e8 99 c4 fd ff       	call   f01001a6 <_panic>
	}


	//test kheap_physical_address after kmalloc and kfree [40%]
	{
f0123d0d:	89 e0                	mov    %esp,%eax
f0123d0f:	89 c6                	mov    %eax,%esi
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0123d11:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f0123d18:	10 00 00 
f0123d1b:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0123d21:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123d26:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f0123d2c:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0123d32:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d37:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f0123d3d:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0123d43:	29 d0                	sub    %edx,%eax
f0123d45:	89 c1                	mov    %eax,%ecx
f0123d47:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f0123d4e:	10 00 00 
f0123d51:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123d56:	0f b6 d0             	movzbl %al,%edx
f0123d59:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0123d5f:	01 d0                	add    %edx,%eax
f0123d61:	48                   	dec    %eax
f0123d62:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f0123d68:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0123d6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0123d73:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f0123d79:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0123d7f:	29 d0                	sub    %edx,%eax
f0123d81:	01 c1                	add    %eax,%ecx
f0123d83:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f0123d8a:	10 00 00 
f0123d8d:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123d92:	0f b6 c0             	movzbl %al,%eax
f0123d95:	c1 e0 04             	shl    $0x4,%eax
f0123d98:	89 c2                	mov    %eax,%edx
f0123d9a:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0123da0:	01 d0                	add    %edx,%eax
f0123da2:	48                   	dec    %eax
f0123da3:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f0123da9:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123daf:	ba 00 00 00 00       	mov    $0x0,%edx
f0123db4:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f0123dba:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0123dc0:	29 d0                	sub    %edx,%eax
f0123dc2:	01 c8                	add    %ecx,%eax
f0123dc4:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0123dc9:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
f0123dcf:	c7 85 6c fe ff ff 00 	movl   $0x1000,-0x194(%ebp)
f0123dd6:	10 00 00 
f0123dd9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0123ddf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123de4:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
f0123dea:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0123df0:	ba 00 00 00 00       	mov    $0x0,%edx
f0123df5:	f7 b5 6c fe ff ff    	divl   -0x194(%ebp)
f0123dfb:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0123e01:	29 d0                	sub    %edx,%eax
f0123e03:	89 c1                	mov    %eax,%ecx
f0123e05:	c7 85 64 fe ff ff 00 	movl   $0x1000,-0x19c(%ebp)
f0123e0c:	10 00 00 
f0123e0f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123e14:	0f b6 d0             	movzbl %al,%edx
f0123e17:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0123e1d:	01 d0                	add    %edx,%eax
f0123e1f:	48                   	dec    %eax
f0123e20:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
f0123e26:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0123e2c:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e31:	f7 b5 64 fe ff ff    	divl   -0x19c(%ebp)
f0123e37:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0123e3d:	29 d0                	sub    %edx,%eax
f0123e3f:	01 c1                	add    %eax,%ecx
f0123e41:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f0123e48:	10 00 00 
f0123e4b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0123e50:	0f b6 c0             	movzbl %al,%eax
f0123e53:	c1 e0 04             	shl    $0x4,%eax
f0123e56:	89 c2                	mov    %eax,%edx
f0123e58:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f0123e5e:	01 d0                	add    %edx,%eax
f0123e60:	48                   	dec    %eax
f0123e61:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f0123e67:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0123e6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123e72:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f0123e78:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0123e7e:	29 d0                	sub    %edx,%eax
f0123e80:	01 c8                	add    %ecx,%eax
f0123e82:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0123e87:	c1 e8 0c             	shr    $0xc,%eax
f0123e8a:	89 c2                	mov    %eax,%edx
f0123e8c:	4a                   	dec    %edx
f0123e8d:	89 95 54 fe ff ff    	mov    %edx,-0x1ac(%ebp)
f0123e93:	c1 e0 02             	shl    $0x2,%eax
f0123e96:	8d 50 03             	lea    0x3(%eax),%edx
f0123e99:	b8 10 00 00 00       	mov    $0x10,%eax
f0123e9e:	48                   	dec    %eax
f0123e9f:	01 d0                	add    %edx,%eax
f0123ea1:	bf 10 00 00 00       	mov    $0x10,%edi
f0123ea6:	ba 00 00 00 00       	mov    $0x0,%edx
f0123eab:	f7 f7                	div    %edi
f0123ead:	6b c0 10             	imul   $0x10,%eax,%eax
f0123eb0:	29 c4                	sub    %eax,%esp
f0123eb2:	89 e0                	mov    %esp,%eax
f0123eb4:	83 c0 03             	add    $0x3,%eax
f0123eb7:	c1 e8 02             	shr    $0x2,%eax
f0123eba:	c1 e0 02             	shl    $0x2,%eax
f0123ebd:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		i = 0;
f0123ec3:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123eca:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0123ed1:	10 00 00 
f0123ed4:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0123eda:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123edf:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0123ee5:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0123eeb:	ba 00 00 00 00       	mov    $0x0,%edx
f0123ef0:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0123ef6:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0123efc:	29 d0                	sub    %edx,%eax
f0123efe:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123f03:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0123f06:	eb 29                	jmp    f0123f31 <test_kheap_phys_addr+0x118a>
		{
			allPAs[i++] = kheap_physical_address(va);
f0123f08:	8b 5d e4             	mov    -0x1c(%ebp),%ebx
f0123f0b:	8d 43 01             	lea    0x1(%ebx),%eax
f0123f0e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f0123f11:	83 ec 0c             	sub    $0xc,%esp
f0123f14:	ff 75 d8             	pushl  -0x28(%ebp)
f0123f17:	e8 16 35 fe ff       	call   f0107432 <kheap_physical_address>
f0123f1c:	83 c4 10             	add    $0x10,%esp
f0123f1f:	89 c2                	mov    %eax,%edx
f0123f21:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0123f27:	89 14 98             	mov    %edx,(%eax,%ebx,4)
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		uint32 allPAs[(13*Mega + 32*kilo+INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE] ;
		i = 0;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; va+=PAGE_SIZE)
f0123f2a:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
f0123f31:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123f34:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0123f3a:	72 cc                	jb     f0123f08 <test_kheap_phys_addr+0x1161>
		{
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
f0123f3c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0123f3f:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		i = 0;
f0123f45:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0123f4c:	c7 85 40 fe ff ff 00 	movl   $0x1000,-0x1c0(%ebp)
f0123f53:	10 00 00 
f0123f56:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f0123f5c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0123f61:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
f0123f67:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0123f6d:	ba 00 00 00 00       	mov    $0x0,%edx
f0123f72:	f7 b5 40 fe ff ff    	divl   -0x1c0(%ebp)
f0123f78:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0123f7e:	29 d0                	sub    %edx,%eax
f0123f80:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0123f85:	89 45 d8             	mov    %eax,-0x28(%ebp)
f0123f88:	e9 ab 00 00 00       	jmp    f0124038 <test_kheap_phys_addr+0x1291>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0123f8d:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0123f92:	83 ec 04             	sub    $0x4,%esp
f0123f95:	8d 95 1c fd ff ff    	lea    -0x2e4(%ebp),%edx
f0123f9b:	52                   	push   %edx
f0123f9c:	ff 75 d8             	pushl  -0x28(%ebp)
f0123f9f:	50                   	push   %eax
f0123fa0:	e8 cc 29 fe ff       	call   f0106971 <get_page_table>
f0123fa5:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f0123fa8:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0123fae:	85 c0                	test   %eax,%eax
f0123fb0:	75 17                	jne    f0123fc9 <test_kheap_phys_addr+0x1222>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0123fb2:	83 ec 04             	sub    $0x4,%esp
f0123fb5:	68 78 ae 13 f0       	push   $0xf013ae78
f0123fba:	68 93 08 00 00       	push   $0x893
f0123fbf:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0123fc4:	e8 dd c1 fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f0123fc9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0123fcc:	c1 e8 0c             	shr    $0xc,%eax
f0123fcf:	25 ff 03 00 00       	and    $0x3ff,%eax
f0123fd4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
f0123fd7:	eb 4b                	jmp    f0124024 <test_kheap_phys_addr+0x127d>
			{
				if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
f0123fd9:	8b 85 1c fd ff ff    	mov    -0x2e4(%ebp),%eax
f0123fdf:	8b 55 d4             	mov    -0x2c(%ebp),%edx
f0123fe2:	c1 e2 02             	shl    $0x2,%edx
f0123fe5:	01 d0                	add    %edx,%eax
f0123fe7:	8b 00                	mov    (%eax),%eax
f0123fe9:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0123fee:	89 c1                	mov    %eax,%ecx
f0123ff0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0123ff6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0123ff9:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0123ffc:	39 c1                	cmp    %eax,%ecx
f0123ffe:	74 17                	je     f0124017 <test_kheap_phys_addr+0x1270>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f0124000:	83 ec 04             	sub    $0x4,%esp
f0124003:	68 d1 ae 13 f0       	push   $0xf013aed1
f0124008:	68 9a 08 00 00       	push   $0x89a
f012400d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124012:	e8 8f c1 fd ff       	call   f01001a6 <_panic>
				}
				va += PAGE_SIZE;
f0124017:	81 45 d8 00 10 00 00 	addl   $0x1000,-0x28(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < ii && j < 1024; ++j, ++i)
f012401e:	ff 45 d4             	incl   -0x2c(%ebp)
f0124021:	ff 45 e4             	incl   -0x1c(%ebp)
f0124024:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124027:	3b 85 44 fe ff ff    	cmp    -0x1bc(%ebp),%eax
f012402d:	7d 09                	jge    f0124038 <test_kheap_phys_addr+0x1291>
f012402f:	81 7d d4 ff 03 00 00 	cmpl   $0x3ff,-0x2c(%ebp)
f0124036:	7e a1                	jle    f0123fd9 <test_kheap_phys_addr+0x1232>
			allPAs[i++] = kheap_physical_address(va);
		}
		int ii = i ;
		i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124038:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012403b:	3b 85 70 fe ff ff    	cmp    -0x190(%ebp),%eax
f0124041:	0f 82 46 ff ff ff    	jb     f0123f8d <test_kheap_phys_addr+0x11e6>
f0124047:	89 f4                	mov    %esi,%esp
				va += PAGE_SIZE;
			}
		}
	}

	cprintf("\b\b\b80%");
f0124049:	83 ec 0c             	sub    $0xc,%esp
f012404c:	68 61 a6 13 f0       	push   $0xf013a661
f0124051:	e8 d7 cb fd ff       	call   f0100c2d <cprintf>
f0124056:	83 c4 10             	add    $0x10,%esp

	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
f0124059:	c7 85 38 fe ff ff 00 	movl   $0x1000,-0x1c8(%ebp)
f0124060:	10 00 00 
f0124063:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f0124069:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012406e:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
f0124074:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012407a:	ba 00 00 00 00       	mov    $0x0,%edx
f012407f:	f7 b5 38 fe ff ff    	divl   -0x1c8(%ebp)
f0124085:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012408b:	29 d0                	sub    %edx,%eax
f012408d:	89 c1                	mov    %eax,%ecx
f012408f:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0124096:	10 00 00 
f0124099:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012409e:	0f b6 d0             	movzbl %al,%edx
f01240a1:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f01240a7:	01 d0                	add    %edx,%eax
f01240a9:	48                   	dec    %eax
f01240aa:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f01240b0:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01240b6:	ba 00 00 00 00       	mov    $0x0,%edx
f01240bb:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f01240c1:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f01240c7:	29 d0                	sub    %edx,%eax
f01240c9:	01 c1                	add    %eax,%ecx
f01240cb:	c7 85 28 fe ff ff 00 	movl   $0x1000,-0x1d8(%ebp)
f01240d2:	10 00 00 
f01240d5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01240da:	0f b6 c0             	movzbl %al,%eax
f01240dd:	c1 e0 04             	shl    $0x4,%eax
f01240e0:	89 c2                	mov    %eax,%edx
f01240e2:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f01240e8:	01 d0                	add    %edx,%eax
f01240ea:	48                   	dec    %eax
f01240eb:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
f01240f1:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f01240f7:	ba 00 00 00 00       	mov    $0x0,%edx
f01240fc:	f7 b5 28 fe ff ff    	divl   -0x1d8(%ebp)
f0124102:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f0124108:	29 d0                	sub    %edx,%eax
f012410a:	01 c8                	add    %ecx,%eax
f012410c:	2d 00 c0 ff 08       	sub    $0x8ffc000,%eax
f0124111:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)
		i = 0;
f0124117:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f012411e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124124:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0124127:	eb 0a                	jmp    f0124133 <test_kheap_phys_addr+0x138c>
		{
			i++;
f0124129:	ff 45 e4             	incl   -0x1c(%ebp)
	//test kheap_physical_address on non-mapped area [20%]
	{
		uint32 va;
		uint32 startVA = ACTUAL_START + 16*Mega;
		i = 0;
		for (va = startVA; va < KERNEL_HEAP_MAX; va+=PAGE_SIZE)
f012412c:	81 45 d0 00 10 00 00 	addl   $0x1000,-0x30(%ebp)
f0124133:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012413a:	76 ed                	jbe    f0124129 <test_kheap_phys_addr+0x1382>
		{
			i++;
		}
		int ii = i ;
f012413c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012413f:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
		i = 0;
f0124145:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f012414c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0124152:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0124155:	c7 45 c4 00 00 00 00 	movl   $0x0,-0x3c(%ebp)
f012415c:	e9 cc 00 00 00       	jmp    f012422d <test_kheap_phys_addr+0x1486>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
f0124161:	8b 55 c0             	mov    -0x40(%ebp),%edx
f0124164:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0124169:	83 ec 04             	sub    $0x4,%esp
f012416c:	8d 8d 18 fd ff ff    	lea    -0x2e8(%ebp),%ecx
f0124172:	51                   	push   %ecx
f0124173:	52                   	push   %edx
f0124174:	50                   	push   %eax
f0124175:	e8 f7 27 fe ff       	call   f0106971 <get_page_table>
f012417a:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012417d:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f0124183:	85 c0                	test   %eax,%eax
f0124185:	75 17                	jne    f012419e <test_kheap_phys_addr+0x13f7>
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0124187:	83 ec 04             	sub    $0x4,%esp
f012418a:	68 78 ae 13 f0       	push   $0xf013ae78
f012418f:	68 b6 08 00 00       	push   $0x8b6
f0124194:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124199:	e8 08 c0 fd ff       	call   f01001a6 <_panic>
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f012419e:	c7 45 cc 00 00 00 00 	movl   $0x0,-0x34(%ebp)
f01241a5:	eb 67                	jmp    f012420e <test_kheap_phys_addr+0x1467>
			{
				//if ((ptr_table[j] & 0xFFFFF000) != allPAs[i])
				unsigned int page_va = startVA+i*PAGE_SIZE;
f01241a7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f01241aa:	c1 e0 0c             	shl    $0xc,%eax
f01241ad:	89 c2                	mov    %eax,%edx
f01241af:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f01241b5:	01 d0                	add    %edx,%eax
f01241b7:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
				unsigned int supposed_kheap_phys_add = kheap_physical_address(page_va);
f01241bd:	83 ec 0c             	sub    $0xc,%esp
f01241c0:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f01241c6:	e8 67 32 fe ff       	call   f0107432 <kheap_physical_address>
f01241cb:	83 c4 10             	add    $0x10,%esp
f01241ce:	89 85 14 fe ff ff    	mov    %eax,-0x1ec(%ebp)
				if ((ptr_table[j] & 0xFFFFF000) != supposed_kheap_phys_add)
f01241d4:	8b 85 18 fd ff ff    	mov    -0x2e8(%ebp),%eax
f01241da:	8b 55 cc             	mov    -0x34(%ebp),%edx
f01241dd:	c1 e2 02             	shl    $0x2,%edx
f01241e0:	01 d0                	add    %edx,%eax
f01241e2:	8b 00                	mov    (%eax),%eax
f01241e4:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f01241e9:	3b 85 14 fe ff ff    	cmp    -0x1ec(%ebp),%eax
f01241ef:	74 17                	je     f0124208 <test_kheap_phys_addr+0x1461>
				{
					//cprintf("\nVA = %x, table entry = %x, khep_pa = %x\n",va2 + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
					panic("Wrong kheap_physical_address");
f01241f1:	83 ec 04             	sub    $0x4,%esp
f01241f4:	68 d1 ae 13 f0       	push   $0xf013aed1
f01241f9:	68 c0 08 00 00       	push   $0x8c0
f01241fe:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124203:	e8 9e bf fd ff       	call   f01001a6 <_panic>
			get_page_table(ptr_page_directory, (uint32)va2, &ptr_table);
			if (ptr_table == NULL)
			{
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
			}
			for (j = 0; i < ii && j < 1024; ++j, ++i)
f0124208:	ff 45 cc             	incl   -0x34(%ebp)
f012420b:	ff 45 e4             	incl   -0x1c(%ebp)
f012420e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0124211:	3b 85 1c fe ff ff    	cmp    -0x1e4(%ebp),%eax
f0124217:	7d 09                	jge    f0124222 <test_kheap_phys_addr+0x147b>
f0124219:	81 7d cc ff 03 00 00 	cmpl   $0x3ff,-0x34(%ebp)
f0124220:	7e 85                	jle    f01241a7 <test_kheap_phys_addr+0x1400>
		}
		int ii = i ;
		i = 0;
		int j;
		long long va2;
		for (va2 = startVA; va2 < (long long)KERNEL_HEAP_MAX; va2+=PTSIZE)
f0124222:	81 45 c0 00 00 40 00 	addl   $0x400000,-0x40(%ebp)
f0124229:	83 55 c4 00          	adcl   $0x0,-0x3c(%ebp)
f012422d:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f0124231:	0f 88 2a ff ff ff    	js     f0124161 <test_kheap_phys_addr+0x13ba>
f0124237:	83 7d c4 00          	cmpl   $0x0,-0x3c(%ebp)
f012423b:	7f 0d                	jg     f012424a <test_kheap_phys_addr+0x14a3>
f012423d:	81 7d c0 ff ef ff ff 	cmpl   $0xffffefff,-0x40(%ebp)
f0124244:	0f 86 17 ff ff ff    	jbe    f0124161 <test_kheap_phys_addr+0x13ba>
				}
			}
		}
	}

	cprintf("\b\b\b100%\n");
f012424a:	83 ec 0c             	sub    $0xc,%esp
f012424d:	68 ba a6 13 f0       	push   $0xf013a6ba
f0124252:	e8 d6 c9 fd ff       	call   f0100c2d <cprintf>
f0124257:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_physical_address completed successfully.\n");
f012425a:	83 ec 0c             	sub    $0xc,%esp
f012425d:	68 24 af 13 f0       	push   $0xf013af24
f0124262:	e8 c6 c9 fd ff       	call   f0100c2d <cprintf>
f0124267:	83 c4 10             	add    $0x10,%esp

	return 1;
f012426a:	b8 01 00 00 00       	mov    $0x1,%eax

}
f012426f:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0124272:	5b                   	pop    %ebx
f0124273:	5e                   	pop    %esi
f0124274:	5f                   	pop    %edi
f0124275:	5d                   	pop    %ebp
f0124276:	c3                   	ret    

f0124277 <test_kheap_virt_addr>:

int test_kheap_virt_addr()
{
f0124277:	55                   	push   %ebp
f0124278:	89 e5                	mov    %esp,%ebp
f012427a:	57                   	push   %edi
f012427b:	56                   	push   %esi
f012427c:	53                   	push   %ebx
f012427d:	81 ec dc 02 00 00    	sub    $0x2dc,%esp
f0124283:	89 e0                	mov    %esp,%eax
f0124285:	89 c6                	mov    %eax,%esi
	cprintf("==============================================\n");
f0124287:	83 ec 0c             	sub    $0xc,%esp
f012428a:	68 18 a4 13 f0       	push   $0xf013a418
f012428f:	e8 99 c9 fd ff       	call   f0100c2d <cprintf>
f0124294:	83 c4 10             	add    $0x10,%esp
	cprintf("MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
f0124297:	83 ec 0c             	sub    $0xc,%esp
f012429a:	68 48 a4 13 f0       	push   $0xf013a448
f012429f:	e8 89 c9 fd ff       	call   f0100c2d <cprintf>
f01242a4:	83 c4 10             	add    $0x10,%esp
	cprintf("==============================================\n");
f01242a7:	83 ec 0c             	sub    $0xc,%esp
f01242aa:	68 18 a4 13 f0       	push   $0xf013a418
f01242af:	e8 79 c9 fd ff       	call   f0100c2d <cprintf>
f01242b4:	83 c4 10             	add    $0x10,%esp

	char minByte = 1<<7;
f01242b7:	c6 45 d3 80          	movb   $0x80,-0x2d(%ebp)
	char maxByte = 0x7F;
f01242bb:	c6 45 d2 7f          	movb   $0x7f,-0x2e(%ebp)
	short minShort = 1<<15 ;
f01242bf:	66 c7 45 d0 00 80    	movw   $0x8000,-0x30(%ebp)
	short maxShort = 0x7FFF;
f01242c5:	66 c7 45 ce ff 7f    	movw   $0x7fff,-0x32(%ebp)
	int minInt = 1<<31 ;
f01242cb:	c7 45 c8 00 00 00 80 	movl   $0x80000000,-0x38(%ebp)
	int maxInt = 0x7FFFFFFF;
f01242d2:	c7 45 c4 ff ff ff 7f 	movl   $0x7fffffff,-0x3c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01242d9:	e8 f2 7d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01242de:	89 45 c0             	mov    %eax,-0x40(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01242e1:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01242e7:	b9 14 00 00 00       	mov    $0x14,%ecx
f01242ec:	b8 00 00 00 00       	mov    $0x0,%eax
f01242f1:	89 d7                	mov    %edx,%edi
f01242f3:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01242f5:	8d 95 78 fd ff ff    	lea    -0x288(%ebp),%edx
f01242fb:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124300:	b8 00 00 00 00       	mov    $0x0,%eax
f0124305:	89 d7                	mov    %edx,%edi
f0124307:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0124309:	8d 95 28 fd ff ff    	lea    -0x2d8(%ebp),%edx
f012430f:	b9 14 00 00 00       	mov    $0x14,%ecx
f0124314:	b8 00 00 00 00       	mov    $0x0,%eax
f0124319:	89 d7                	mov    %edx,%edi
f012431b:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f012431d:	e8 ae 7d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0124322:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124325:	e8 6a f9 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012432a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f012432d:	83 ec 0c             	sub    $0xc,%esp
f0124330:	68 00 fc 1f 00       	push   $0x1ffc00
f0124335:	e8 aa 30 fe ff       	call   f01073e4 <kmalloc>
f012433a:	83 c4 10             	add    $0x10,%esp
f012433d:	89 85 28 fd ff ff    	mov    %eax,-0x2d8(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124343:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f0124349:	89 c1                	mov    %eax,%ecx
f012434b:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0124352:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0124355:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012435a:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012435d:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0124360:	ba 00 00 00 00       	mov    $0x0,%edx
f0124365:	f7 75 b4             	divl   -0x4c(%ebp)
f0124368:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012436b:	29 d0                	sub    %edx,%eax
f012436d:	89 c3                	mov    %eax,%ebx
f012436f:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0124376:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012437b:	0f b6 d0             	movzbl %al,%edx
f012437e:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0124381:	01 d0                	add    %edx,%eax
f0124383:	48                   	dec    %eax
f0124384:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0124387:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012438a:	ba 00 00 00 00       	mov    $0x0,%edx
f012438f:	f7 75 ac             	divl   -0x54(%ebp)
f0124392:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0124395:	29 d0                	sub    %edx,%eax
f0124397:	01 c3                	add    %eax,%ebx
f0124399:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01243a0:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01243a5:	0f b6 c0             	movzbl %al,%eax
f01243a8:	c1 e0 04             	shl    $0x4,%eax
f01243ab:	89 c2                	mov    %eax,%edx
f01243ad:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01243b0:	01 d0                	add    %edx,%eax
f01243b2:	48                   	dec    %eax
f01243b3:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01243b6:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01243b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01243be:	f7 75 a4             	divl   -0x5c(%ebp)
f01243c1:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01243c4:	29 d0                	sub    %edx,%eax
f01243c6:	01 d8                	add    %ebx,%eax
f01243c8:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f01243cd:	39 c1                	cmp    %eax,%ecx
f01243cf:	74 17                	je     f01243e8 <test_kheap_virt_addr+0x171>
f01243d1:	83 ec 04             	sub    $0x4,%esp
f01243d4:	68 bc a5 13 f0       	push   $0xf013a5bc
f01243d9:	68 ed 08 00 00       	push   $0x8ed
f01243de:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01243e3:	e8 be bd fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01243e8:	e8 a7 f8 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01243ed:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01243f0:	74 17                	je     f0124409 <test_kheap_virt_addr+0x192>
f01243f2:	83 ec 04             	sub    $0x4,%esp
f01243f5:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01243fa:	68 ee 08 00 00       	push   $0x8ee
f01243ff:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124404:	e8 9d bd fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124409:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012440c:	e8 bf 7c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0124411:	29 c3                	sub    %eax,%ebx
f0124413:	89 d8                	mov    %ebx,%eax
f0124415:	3d 00 02 00 00       	cmp    $0x200,%eax
f012441a:	74 17                	je     f0124433 <test_kheap_virt_addr+0x1bc>
f012441c:	83 ec 04             	sub    $0x4,%esp
f012441f:	68 58 a5 13 f0       	push   $0xf013a558
f0124424:	68 ef 08 00 00       	push   $0x8ef
f0124429:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012442e:	e8 73 bd fd ff       	call   f01001a6 <_panic>

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0124433:	e8 98 7c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0124438:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012443b:	e8 54 f8 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0124440:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0124443:	83 ec 0c             	sub    $0xc,%esp
f0124446:	68 00 fc 1f 00       	push   $0x1ffc00
f012444b:	e8 94 2f fe ff       	call   f01073e4 <kmalloc>
f0124450:	83 c4 10             	add    $0x10,%esp
f0124453:	89 85 2c fd ff ff    	mov    %eax,-0x2d4(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124459:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f012445f:	89 c1                	mov    %eax,%ecx
f0124461:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0124468:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012446b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124470:	89 45 98             	mov    %eax,-0x68(%ebp)
f0124473:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124476:	ba 00 00 00 00       	mov    $0x0,%edx
f012447b:	f7 75 9c             	divl   -0x64(%ebp)
f012447e:	8b 45 98             	mov    -0x68(%ebp),%eax
f0124481:	29 d0                	sub    %edx,%eax
f0124483:	89 c3                	mov    %eax,%ebx
f0124485:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012448c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124491:	0f b6 d0             	movzbl %al,%edx
f0124494:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0124497:	01 d0                	add    %edx,%eax
f0124499:	48                   	dec    %eax
f012449a:	89 45 90             	mov    %eax,-0x70(%ebp)
f012449d:	8b 45 90             	mov    -0x70(%ebp),%eax
f01244a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01244a5:	f7 75 94             	divl   -0x6c(%ebp)
f01244a8:	8b 45 90             	mov    -0x70(%ebp),%eax
f01244ab:	29 d0                	sub    %edx,%eax
f01244ad:	01 c3                	add    %eax,%ebx
f01244af:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f01244b6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01244bb:	0f b6 c0             	movzbl %al,%eax
f01244be:	c1 e0 04             	shl    $0x4,%eax
f01244c1:	89 c2                	mov    %eax,%edx
f01244c3:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01244c6:	01 d0                	add    %edx,%eax
f01244c8:	48                   	dec    %eax
f01244c9:	89 45 88             	mov    %eax,-0x78(%ebp)
f01244cc:	8b 45 88             	mov    -0x78(%ebp),%eax
f01244cf:	ba 00 00 00 00       	mov    $0x0,%edx
f01244d4:	f7 75 8c             	divl   -0x74(%ebp)
f01244d7:	8b 45 88             	mov    -0x78(%ebp),%eax
f01244da:	29 d0                	sub    %edx,%eax
f01244dc:	01 d8                	add    %ebx,%eax
f01244de:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01244e3:	39 c1                	cmp    %eax,%ecx
f01244e5:	74 17                	je     f01244fe <test_kheap_virt_addr+0x287>
f01244e7:	83 ec 04             	sub    $0x4,%esp
f01244ea:	68 bc a5 13 f0       	push   $0xf013a5bc
f01244ef:	68 f5 08 00 00       	push   $0x8f5
f01244f4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01244f9:	e8 a8 bc fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01244fe:	e8 91 f7 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0124503:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124506:	74 17                	je     f012451f <test_kheap_virt_addr+0x2a8>
f0124508:	83 ec 04             	sub    $0x4,%esp
f012450b:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0124510:	68 f6 08 00 00       	push   $0x8f6
f0124515:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012451a:	e8 87 bc fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f012451f:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124522:	e8 a9 7b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0124527:	29 c3                	sub    %eax,%ebx
f0124529:	89 d8                	mov    %ebx,%eax
f012452b:	3d 00 02 00 00       	cmp    $0x200,%eax
f0124530:	74 17                	je     f0124549 <test_kheap_virt_addr+0x2d2>
f0124532:	83 ec 04             	sub    $0x4,%esp
f0124535:	68 58 a5 13 f0       	push   $0xf013a558
f012453a:	68 f7 08 00 00       	push   $0x8f7
f012453f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124544:	e8 5d bc fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124549:	e8 82 7b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012454e:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124551:	e8 3e f7 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0124556:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0124559:	83 ec 0c             	sub    $0xc,%esp
f012455c:	68 00 08 00 00       	push   $0x800
f0124561:	e8 7e 2e fe ff       	call   f01073e4 <kmalloc>
f0124566:	83 c4 10             	add    $0x10,%esp
f0124569:	89 85 30 fd ff ff    	mov    %eax,-0x2d0(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012456f:	8b 85 30 fd ff ff    	mov    -0x2d0(%ebp),%eax
f0124575:	89 c1                	mov    %eax,%ecx
f0124577:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012457e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0124581:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124586:	89 45 80             	mov    %eax,-0x80(%ebp)
f0124589:	8b 45 80             	mov    -0x80(%ebp),%eax
f012458c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124591:	f7 75 84             	divl   -0x7c(%ebp)
f0124594:	8b 45 80             	mov    -0x80(%ebp),%eax
f0124597:	29 d0                	sub    %edx,%eax
f0124599:	89 c3                	mov    %eax,%ebx
f012459b:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f01245a2:	10 00 00 
f01245a5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01245aa:	0f b6 d0             	movzbl %al,%edx
f01245ad:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01245b3:	01 d0                	add    %edx,%eax
f01245b5:	48                   	dec    %eax
f01245b6:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f01245bc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01245c2:	ba 00 00 00 00       	mov    $0x0,%edx
f01245c7:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f01245cd:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f01245d3:	29 d0                	sub    %edx,%eax
f01245d5:	01 c3                	add    %eax,%ebx
f01245d7:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f01245de:	10 00 00 
f01245e1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01245e6:	0f b6 c0             	movzbl %al,%eax
f01245e9:	c1 e0 04             	shl    $0x4,%eax
f01245ec:	89 c2                	mov    %eax,%edx
f01245ee:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01245f4:	01 d0                	add    %edx,%eax
f01245f6:	48                   	dec    %eax
f01245f7:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f01245fd:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124603:	ba 00 00 00 00       	mov    $0x0,%edx
f0124608:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012460e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0124614:	29 d0                	sub    %edx,%eax
f0124616:	01 d8                	add    %ebx,%eax
f0124618:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012461d:	39 c1                	cmp    %eax,%ecx
f012461f:	74 17                	je     f0124638 <test_kheap_virt_addr+0x3c1>
f0124621:	83 ec 04             	sub    $0x4,%esp
f0124624:	68 bc a5 13 f0       	push   $0xf013a5bc
f0124629:	68 fd 08 00 00       	push   $0x8fd
f012462e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124633:	e8 6e bb fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124638:	e8 57 f6 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012463d:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124640:	74 17                	je     f0124659 <test_kheap_virt_addr+0x3e2>
f0124642:	83 ec 04             	sub    $0x4,%esp
f0124645:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012464a:	68 fe 08 00 00       	push   $0x8fe
f012464f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124654:	e8 4d bb fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124659:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f012465c:	e8 6f 7a fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0124661:	29 c3                	sub    %eax,%ebx
f0124663:	89 d8                	mov    %ebx,%eax
f0124665:	83 f8 01             	cmp    $0x1,%eax
f0124668:	74 17                	je     f0124681 <test_kheap_virt_addr+0x40a>
f012466a:	83 ec 04             	sub    $0x4,%esp
f012466d:	68 58 a5 13 f0       	push   $0xf013a558
f0124672:	68 ff 08 00 00       	push   $0x8ff
f0124677:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012467c:	e8 25 bb fd ff       	call   f01001a6 <_panic>

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0124681:	e8 4a 7a fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0124686:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124689:	e8 06 f6 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012468e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0124691:	83 ec 0c             	sub    $0xc,%esp
f0124694:	68 00 08 00 00       	push   $0x800
f0124699:	e8 46 2d fe ff       	call   f01073e4 <kmalloc>
f012469e:	83 c4 10             	add    $0x10,%esp
f01246a1:	89 85 34 fd ff ff    	mov    %eax,-0x2cc(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01246a7:	8b 85 34 fd ff ff    	mov    -0x2cc(%ebp),%eax
f01246ad:	89 c1                	mov    %eax,%ecx
f01246af:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f01246b6:	10 00 00 
f01246b9:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01246bf:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01246c4:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f01246ca:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01246d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01246d5:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f01246db:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01246e1:	29 d0                	sub    %edx,%eax
f01246e3:	89 c3                	mov    %eax,%ebx
f01246e5:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f01246ec:	10 00 00 
f01246ef:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01246f4:	0f b6 d0             	movzbl %al,%edx
f01246f7:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01246fd:	01 d0                	add    %edx,%eax
f01246ff:	48                   	dec    %eax
f0124700:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0124706:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012470c:	ba 00 00 00 00       	mov    $0x0,%edx
f0124711:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0124717:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012471d:	29 d0                	sub    %edx,%eax
f012471f:	01 c3                	add    %eax,%ebx
f0124721:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0124728:	10 00 00 
f012472b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124730:	0f b6 c0             	movzbl %al,%eax
f0124733:	c1 e0 04             	shl    $0x4,%eax
f0124736:	89 c2                	mov    %eax,%edx
f0124738:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012473e:	01 d0                	add    %edx,%eax
f0124740:	48                   	dec    %eax
f0124741:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0124747:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012474d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124752:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0124758:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012475e:	29 d0                	sub    %edx,%eax
f0124760:	01 d8                	add    %ebx,%eax
f0124762:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0124767:	39 c1                	cmp    %eax,%ecx
f0124769:	74 17                	je     f0124782 <test_kheap_virt_addr+0x50b>
f012476b:	83 ec 04             	sub    $0x4,%esp
f012476e:	68 bc a5 13 f0       	push   $0xf013a5bc
f0124773:	68 05 09 00 00       	push   $0x905
f0124778:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012477d:	e8 24 ba fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124782:	e8 0d f5 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0124787:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f012478a:	74 17                	je     f01247a3 <test_kheap_virt_addr+0x52c>
f012478c:	83 ec 04             	sub    $0x4,%esp
f012478f:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0124794:	68 06 09 00 00       	push   $0x906
f0124799:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012479e:	e8 03 ba fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01247a3:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01247a6:	e8 25 79 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01247ab:	29 c3                	sub    %eax,%ebx
f01247ad:	89 d8                	mov    %ebx,%eax
f01247af:	83 f8 01             	cmp    $0x1,%eax
f01247b2:	74 17                	je     f01247cb <test_kheap_virt_addr+0x554>
f01247b4:	83 ec 04             	sub    $0x4,%esp
f01247b7:	68 58 a5 13 f0       	push   $0xf013a558
f01247bc:	68 07 09 00 00       	push   $0x907
f01247c1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01247c6:	e8 db b9 fd ff       	call   f01001a6 <_panic>

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01247cb:	e8 00 79 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01247d0:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01247d3:	e8 bc f4 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01247d8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01247db:	83 ec 0c             	sub    $0xc,%esp
f01247de:	68 00 1c 00 00       	push   $0x1c00
f01247e3:	e8 fc 2b fe ff       	call   f01073e4 <kmalloc>
f01247e8:	83 c4 10             	add    $0x10,%esp
f01247eb:	89 85 38 fd ff ff    	mov    %eax,-0x2c8(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01247f1:	8b 85 38 fd ff ff    	mov    -0x2c8(%ebp),%eax
f01247f7:	89 c1                	mov    %eax,%ecx
f01247f9:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0124800:	10 00 00 
f0124803:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0124809:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012480e:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0124814:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012481a:	ba 00 00 00 00       	mov    $0x0,%edx
f012481f:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0124825:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012482b:	29 d0                	sub    %edx,%eax
f012482d:	89 c3                	mov    %eax,%ebx
f012482f:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f0124836:	10 00 00 
f0124839:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012483e:	0f b6 d0             	movzbl %al,%edx
f0124841:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0124847:	01 d0                	add    %edx,%eax
f0124849:	48                   	dec    %eax
f012484a:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f0124850:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124856:	ba 00 00 00 00       	mov    $0x0,%edx
f012485b:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f0124861:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0124867:	29 d0                	sub    %edx,%eax
f0124869:	01 c3                	add    %eax,%ebx
f012486b:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f0124872:	10 00 00 
f0124875:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012487a:	0f b6 c0             	movzbl %al,%eax
f012487d:	c1 e0 04             	shl    $0x4,%eax
f0124880:	89 c2                	mov    %eax,%edx
f0124882:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0124888:	01 d0                	add    %edx,%eax
f012488a:	48                   	dec    %eax
f012488b:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f0124891:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0124897:	ba 00 00 00 00       	mov    $0x0,%edx
f012489c:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f01248a2:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f01248a8:	29 d0                	sub    %edx,%eax
f01248aa:	01 d8                	add    %ebx,%eax
f01248ac:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01248b1:	39 c1                	cmp    %eax,%ecx
f01248b3:	74 17                	je     f01248cc <test_kheap_virt_addr+0x655>
f01248b5:	83 ec 04             	sub    $0x4,%esp
f01248b8:	68 bc a5 13 f0       	push   $0xf013a5bc
f01248bd:	68 0d 09 00 00       	push   $0x90d
f01248c2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01248c7:	e8 da b8 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01248cc:	e8 c3 f3 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01248d1:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f01248d4:	74 17                	je     f01248ed <test_kheap_virt_addr+0x676>
f01248d6:	83 ec 04             	sub    $0x4,%esp
f01248d9:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01248de:	68 0e 09 00 00       	push   $0x90e
f01248e3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01248e8:	e8 b9 b8 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01248ed:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f01248f0:	e8 db 77 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01248f5:	29 c3                	sub    %eax,%ebx
f01248f7:	89 d8                	mov    %ebx,%eax
f01248f9:	83 f8 02             	cmp    $0x2,%eax
f01248fc:	74 17                	je     f0124915 <test_kheap_virt_addr+0x69e>
f01248fe:	83 ec 04             	sub    $0x4,%esp
f0124901:	68 58 a5 13 f0       	push   $0xf013a558
f0124906:	68 0f 09 00 00       	push   $0x90f
f012490b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124910:	e8 91 b8 fd ff       	call   f01001a6 <_panic>

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0124915:	e8 b6 77 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012491a:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012491d:	e8 72 f3 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0124922:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0124925:	83 ec 0c             	sub    $0xc,%esp
f0124928:	68 00 fc 2f 00       	push   $0x2ffc00
f012492d:	e8 b2 2a fe ff       	call   f01073e4 <kmalloc>
f0124932:	83 c4 10             	add    $0x10,%esp
f0124935:	89 85 3c fd ff ff    	mov    %eax,-0x2c4(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012493b:	8b 85 3c fd ff ff    	mov    -0x2c4(%ebp),%eax
f0124941:	89 c1                	mov    %eax,%ecx
f0124943:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012494a:	10 00 00 
f012494d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0124953:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124958:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012495e:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124964:	ba 00 00 00 00       	mov    $0x0,%edx
f0124969:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012496f:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0124975:	29 d0                	sub    %edx,%eax
f0124977:	89 c3                	mov    %eax,%ebx
f0124979:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f0124980:	10 00 00 
f0124983:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124988:	0f b6 d0             	movzbl %al,%edx
f012498b:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0124991:	01 d0                	add    %edx,%eax
f0124993:	48                   	dec    %eax
f0124994:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012499a:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01249a0:	ba 00 00 00 00       	mov    $0x0,%edx
f01249a5:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f01249ab:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01249b1:	29 d0                	sub    %edx,%eax
f01249b3:	01 c3                	add    %eax,%ebx
f01249b5:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f01249bc:	10 00 00 
f01249bf:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01249c4:	0f b6 c0             	movzbl %al,%eax
f01249c7:	c1 e0 04             	shl    $0x4,%eax
f01249ca:	89 c2                	mov    %eax,%edx
f01249cc:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01249d2:	01 d0                	add    %edx,%eax
f01249d4:	48                   	dec    %eax
f01249d5:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f01249db:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01249e1:	ba 00 00 00 00       	mov    $0x0,%edx
f01249e6:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f01249ec:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01249f2:	29 d0                	sub    %edx,%eax
f01249f4:	01 d8                	add    %ebx,%eax
f01249f6:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01249fb:	39 c1                	cmp    %eax,%ecx
f01249fd:	74 17                	je     f0124a16 <test_kheap_virt_addr+0x79f>
f01249ff:	83 ec 04             	sub    $0x4,%esp
f0124a02:	68 bc a5 13 f0       	push   $0xf013a5bc
f0124a07:	68 15 09 00 00       	push   $0x915
f0124a0c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124a11:	e8 90 b7 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124a16:	e8 79 f2 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0124a1b:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124a1e:	74 17                	je     f0124a37 <test_kheap_virt_addr+0x7c0>
f0124a20:	83 ec 04             	sub    $0x4,%esp
f0124a23:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0124a28:	68 16 09 00 00       	push   $0x916
f0124a2d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124a32:	e8 6f b7 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124a37:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124a3a:	e8 91 76 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0124a3f:	29 c3                	sub    %eax,%ebx
f0124a41:	89 d8                	mov    %ebx,%eax
f0124a43:	3d 00 03 00 00       	cmp    $0x300,%eax
f0124a48:	74 17                	je     f0124a61 <test_kheap_virt_addr+0x7ea>
f0124a4a:	83 ec 04             	sub    $0x4,%esp
f0124a4d:	68 58 a5 13 f0       	push   $0xf013a558
f0124a52:	68 17 09 00 00       	push   $0x917
f0124a57:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124a5c:	e8 45 b7 fd ff       	call   f01001a6 <_panic>

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0124a61:	e8 6a 76 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0124a66:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124a69:	e8 26 f2 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0124a6e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0124a71:	83 ec 0c             	sub    $0xc,%esp
f0124a74:	68 00 fc 5f 00       	push   $0x5ffc00
f0124a79:	e8 66 29 fe ff       	call   f01073e4 <kmalloc>
f0124a7e:	83 c4 10             	add    $0x10,%esp
f0124a81:	89 85 40 fd ff ff    	mov    %eax,-0x2c0(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124a87:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0124a8d:	89 c1                	mov    %eax,%ecx
f0124a8f:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f0124a96:	10 00 00 
f0124a99:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0124a9f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124aa4:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f0124aaa:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124ab0:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ab5:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f0124abb:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0124ac1:	29 d0                	sub    %edx,%eax
f0124ac3:	89 c3                	mov    %eax,%ebx
f0124ac5:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0124acc:	10 00 00 
f0124acf:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124ad4:	0f b6 d0             	movzbl %al,%edx
f0124ad7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0124add:	01 d0                	add    %edx,%eax
f0124adf:	48                   	dec    %eax
f0124ae0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f0124ae6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124aec:	ba 00 00 00 00       	mov    $0x0,%edx
f0124af1:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f0124af7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0124afd:	29 d0                	sub    %edx,%eax
f0124aff:	01 c3                	add    %eax,%ebx
f0124b01:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f0124b08:	10 00 00 
f0124b0b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124b10:	0f b6 c0             	movzbl %al,%eax
f0124b13:	c1 e0 04             	shl    $0x4,%eax
f0124b16:	89 c2                	mov    %eax,%edx
f0124b18:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0124b1e:	01 d0                	add    %edx,%eax
f0124b20:	48                   	dec    %eax
f0124b21:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f0124b27:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124b2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124b32:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f0124b38:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0124b3e:	29 d0                	sub    %edx,%eax
f0124b40:	01 d8                	add    %ebx,%eax
f0124b42:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f0124b47:	39 c1                	cmp    %eax,%ecx
f0124b49:	74 17                	je     f0124b62 <test_kheap_virt_addr+0x8eb>
f0124b4b:	83 ec 04             	sub    $0x4,%esp
f0124b4e:	68 bc a5 13 f0       	push   $0xf013a5bc
f0124b53:	68 1d 09 00 00       	push   $0x91d
f0124b58:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124b5d:	e8 44 b6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124b62:	e8 2d f1 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0124b67:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124b6a:	74 17                	je     f0124b83 <test_kheap_virt_addr+0x90c>
f0124b6c:	83 ec 04             	sub    $0x4,%esp
f0124b6f:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0124b74:	68 1e 09 00 00       	push   $0x91e
f0124b79:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124b7e:	e8 23 b6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124b83:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124b86:	e8 45 75 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0124b8b:	29 c3                	sub    %eax,%ebx
f0124b8d:	89 d8                	mov    %ebx,%eax
f0124b8f:	3d 00 06 00 00       	cmp    $0x600,%eax
f0124b94:	74 17                	je     f0124bad <test_kheap_virt_addr+0x936>
f0124b96:	83 ec 04             	sub    $0x4,%esp
f0124b99:	68 58 a5 13 f0       	push   $0xf013a558
f0124b9e:	68 1f 09 00 00       	push   $0x91f
f0124ba3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124ba8:	e8 f9 b5 fd ff       	call   f01001a6 <_panic>

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f0124bad:	e8 1e 75 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0124bb2:	89 45 bc             	mov    %eax,-0x44(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0124bb5:	e8 da f0 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0124bba:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f0124bbd:	83 ec 0c             	sub    $0xc,%esp
f0124bc0:	68 00 38 00 00       	push   $0x3800
f0124bc5:	e8 1a 28 fe ff       	call   f01073e4 <kmalloc>
f0124bca:	83 c4 10             	add    $0x10,%esp
f0124bcd:	89 85 44 fd ff ff    	mov    %eax,-0x2bc(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0124bd3:	8b 85 44 fd ff ff    	mov    -0x2bc(%ebp),%eax
f0124bd9:	89 c1                	mov    %eax,%ecx
f0124bdb:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0124be2:	10 00 00 
f0124be5:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0124beb:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124bf0:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0124bf6:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124bfc:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c01:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0124c07:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0124c0d:	29 d0                	sub    %edx,%eax
f0124c0f:	89 c3                	mov    %eax,%ebx
f0124c11:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f0124c18:	10 00 00 
f0124c1b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124c20:	0f b6 d0             	movzbl %al,%edx
f0124c23:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0124c29:	01 d0                	add    %edx,%eax
f0124c2b:	48                   	dec    %eax
f0124c2c:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f0124c32:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124c38:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c3d:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f0124c43:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0124c49:	29 d0                	sub    %edx,%eax
f0124c4b:	01 c3                	add    %eax,%ebx
f0124c4d:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0124c54:	10 00 00 
f0124c57:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124c5c:	0f b6 c0             	movzbl %al,%eax
f0124c5f:	c1 e0 04             	shl    $0x4,%eax
f0124c62:	89 c2                	mov    %eax,%edx
f0124c64:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0124c6a:	01 d0                	add    %edx,%eax
f0124c6c:	48                   	dec    %eax
f0124c6d:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f0124c73:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124c79:	ba 00 00 00 00       	mov    $0x0,%edx
f0124c7e:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f0124c84:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0124c8a:	29 d0                	sub    %edx,%eax
f0124c8c:	01 d8                	add    %ebx,%eax
f0124c8e:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0124c93:	39 c1                	cmp    %eax,%ecx
f0124c95:	74 17                	je     f0124cae <test_kheap_virt_addr+0xa37>
f0124c97:	83 ec 04             	sub    $0x4,%esp
f0124c9a:	68 bc a5 13 f0       	push   $0xf013a5bc
f0124c9f:	68 25 09 00 00       	push   $0x925
f0124ca4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124ca9:	e8 f8 b4 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0124cae:	e8 e1 ef fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0124cb3:	3b 45 b8             	cmp    -0x48(%ebp),%eax
f0124cb6:	74 17                	je     f0124ccf <test_kheap_virt_addr+0xa58>
f0124cb8:	83 ec 04             	sub    $0x4,%esp
f0124cbb:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0124cc0:	68 26 09 00 00       	push   $0x926
f0124cc5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124cca:	e8 d7 b4 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f0124ccf:	8b 5d bc             	mov    -0x44(%ebp),%ebx
f0124cd2:	e8 f9 73 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0124cd7:	29 c3                	sub    %eax,%ebx
f0124cd9:	89 d8                	mov    %ebx,%eax
f0124cdb:	83 f8 04             	cmp    $0x4,%eax
f0124cde:	74 17                	je     f0124cf7 <test_kheap_virt_addr+0xa80>
f0124ce0:	83 ec 04             	sub    $0x4,%esp
f0124ce3:	68 58 a5 13 f0       	push   $0xf013a558
f0124ce8:	68 27 09 00 00       	push   $0x927
f0124ced:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0124cf2:	e8 af b4 fd ff       	call   f01001a6 <_panic>
	}

	uint32 allPAs[(13*Mega + 32*kilo+ (INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE] ;
f0124cf7:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f0124cfe:	10 00 00 
f0124d01:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0124d07:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124d0c:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f0124d12:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124d18:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d1d:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f0124d23:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0124d29:	29 d0                	sub    %edx,%eax
f0124d2b:	89 c1                	mov    %eax,%ecx
f0124d2d:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f0124d34:	10 00 00 
f0124d37:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124d3c:	0f b6 d0             	movzbl %al,%edx
f0124d3f:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0124d45:	01 d0                	add    %edx,%eax
f0124d47:	48                   	dec    %eax
f0124d48:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0124d4e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124d54:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d59:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f0124d5f:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0124d65:	29 d0                	sub    %edx,%eax
f0124d67:	01 c1                	add    %eax,%ecx
f0124d69:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0124d70:	10 00 00 
f0124d73:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124d78:	0f b6 c0             	movzbl %al,%eax
f0124d7b:	c1 e0 04             	shl    $0x4,%eax
f0124d7e:	89 c2                	mov    %eax,%edx
f0124d80:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0124d86:	01 d0                	add    %edx,%eax
f0124d88:	48                   	dec    %eax
f0124d89:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0124d8f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124d95:	ba 00 00 00 00       	mov    $0x0,%edx
f0124d9a:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0124da0:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0124da6:	29 d0                	sub    %edx,%eax
f0124da8:	01 c1                	add    %eax,%ecx
f0124daa:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0124db1:	10 00 00 
f0124db4:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0124dba:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124dbf:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0124dc5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124dcb:	ba 00 00 00 00       	mov    $0x0,%edx
f0124dd0:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0124dd6:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0124ddc:	29 d0                	sub    %edx,%eax
f0124dde:	29 c1                	sub    %eax,%ecx
f0124de0:	89 c8                	mov    %ecx,%eax
f0124de2:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124de7:	c1 e8 0c             	shr    $0xc,%eax
f0124dea:	89 c2                	mov    %eax,%edx
f0124dec:	4a                   	dec    %edx
f0124ded:	89 95 d4 fe ff ff    	mov    %edx,-0x12c(%ebp)
f0124df3:	c1 e0 02             	shl    $0x2,%eax
f0124df6:	8d 50 03             	lea    0x3(%eax),%edx
f0124df9:	b8 10 00 00 00       	mov    $0x10,%eax
f0124dfe:	48                   	dec    %eax
f0124dff:	01 d0                	add    %edx,%eax
f0124e01:	bf 10 00 00 00       	mov    $0x10,%edi
f0124e06:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e0b:	f7 f7                	div    %edi
f0124e0d:	6b c0 10             	imul   $0x10,%eax,%eax
f0124e10:	29 c4                	sub    %eax,%esp
f0124e12:	89 e0                	mov    %esp,%eax
f0124e14:	83 c0 03             	add    $0x3,%eax
f0124e17:	c1 e8 02             	shr    $0x2,%eax
f0124e1a:	c1 e0 02             	shl    $0x2,%eax
f0124e1d:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
	int numOfFrames = (13*Mega + 32*kilo+(INITIAL_KHEAP_ALLOCATIONS-DYNAMIC_ALLOCATOR_DS))/PAGE_SIZE ;
f0124e23:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0124e2a:	10 00 00 
f0124e2d:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0124e33:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124e38:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0124e3e:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124e44:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e49:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0124e4f:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0124e55:	29 d0                	sub    %edx,%eax
f0124e57:	89 c1                	mov    %eax,%ecx
f0124e59:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0124e60:	10 00 00 
f0124e63:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124e68:	0f b6 d0             	movzbl %al,%edx
f0124e6b:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0124e71:	01 d0                	add    %edx,%eax
f0124e73:	48                   	dec    %eax
f0124e74:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0124e7a:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124e80:	ba 00 00 00 00       	mov    $0x0,%edx
f0124e85:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0124e8b:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0124e91:	29 d0                	sub    %edx,%eax
f0124e93:	01 c1                	add    %eax,%ecx
f0124e95:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0124e9c:	10 00 00 
f0124e9f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124ea4:	0f b6 c0             	movzbl %al,%eax
f0124ea7:	c1 e0 04             	shl    $0x4,%eax
f0124eaa:	89 c2                	mov    %eax,%edx
f0124eac:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0124eb2:	01 d0                	add    %edx,%eax
f0124eb4:	48                   	dec    %eax
f0124eb5:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0124ebb:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124ec1:	ba 00 00 00 00       	mov    $0x0,%edx
f0124ec6:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0124ecc:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0124ed2:	29 d0                	sub    %edx,%eax
f0124ed4:	01 c1                	add    %eax,%ecx
f0124ed6:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f0124edd:	10 00 00 
f0124ee0:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f0124ee6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124eeb:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f0124ef1:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124ef7:	ba 00 00 00 00       	mov    $0x0,%edx
f0124efc:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f0124f02:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0124f08:	29 d0                	sub    %edx,%eax
f0124f0a:	29 c1                	sub    %eax,%ecx
f0124f0c:	89 c8                	mov    %ecx,%eax
f0124f0e:	05 00 c0 d0 00       	add    $0xd0c000,%eax
f0124f13:	c1 e8 0c             	shr    $0xc,%eax
f0124f16:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)

	//test kheap_virtual_address after kmalloc only [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f0124f1c:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f0124f23:	10 00 00 
f0124f26:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f0124f2c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124f31:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f0124f37:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124f3d:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f42:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f0124f48:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f0124f4e:	29 d0                	sub    %edx,%eax
f0124f50:	89 c1                	mov    %eax,%ecx
f0124f52:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f0124f59:	10 00 00 
f0124f5c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124f61:	0f b6 d0             	movzbl %al,%edx
f0124f64:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f0124f6a:	01 d0                	add    %edx,%eax
f0124f6c:	48                   	dec    %eax
f0124f6d:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f0124f73:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0124f79:	ba 00 00 00 00       	mov    $0x0,%edx
f0124f7e:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f0124f84:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f0124f8a:	29 d0                	sub    %edx,%eax
f0124f8c:	01 c1                	add    %eax,%ecx
f0124f8e:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f0124f95:	10 00 00 
f0124f98:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0124f9d:	0f b6 c0             	movzbl %al,%eax
f0124fa0:	c1 e0 04             	shl    $0x4,%eax
f0124fa3:	89 c2                	mov    %eax,%edx
f0124fa5:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f0124fab:	01 d0                	add    %edx,%eax
f0124fad:	48                   	dec    %eax
f0124fae:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f0124fb4:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124fba:	ba 00 00 00 00       	mov    $0x0,%edx
f0124fbf:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f0124fc5:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f0124fcb:	29 d0                	sub    %edx,%eax
f0124fcd:	01 c8                	add    %ecx,%eax
f0124fcf:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0124fd4:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
		int i = 0;
f0124fda:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0124fe1:	c7 85 8c fe ff ff 00 	movl   $0x1000,-0x174(%ebp)
f0124fe8:	10 00 00 
f0124feb:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0124ff1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0124ff6:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)
f0124ffc:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125002:	ba 00 00 00 00       	mov    $0x0,%edx
f0125007:	f7 b5 8c fe ff ff    	divl   -0x174(%ebp)
f012500d:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0125013:	29 d0                	sub    %edx,%eax
f0125015:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f012501a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012501d:	e9 21 01 00 00       	jmp    f0125143 <test_kheap_virt_addr+0xecc>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
f0125022:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0125027:	83 ec 04             	sub    $0x4,%esp
f012502a:	8d 95 24 fd ff ff    	lea    -0x2dc(%ebp),%edx
f0125030:	52                   	push   %edx
f0125031:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125034:	50                   	push   %eax
f0125035:	e8 37 19 fe ff       	call   f0106971 <get_page_table>
f012503a:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012503d:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125043:	85 c0                	test   %eax,%eax
f0125045:	75 17                	jne    f012505e <test_kheap_virt_addr+0xde7>
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");
f0125047:	83 ec 04             	sub    $0x4,%esp
f012504a:	68 78 ae 13 f0       	push   $0xf013ae78
f012504f:	68 38 09 00 00       	push   $0x938
f0125054:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125059:	e8 48 b1 fd ff       	call   f01001a6 <_panic>

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f012505e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125061:	c1 e8 0c             	shr    $0xc,%eax
f0125064:	25 ff 03 00 00       	and    $0x3ff,%eax
f0125069:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012506c:	e9 ba 00 00 00       	jmp    f012512b <test_kheap_virt_addr+0xeb4>
			{
				allPAs[i] = (ptr_table[j] & 0xFFFFF000);
f0125071:	8b 85 24 fd ff ff    	mov    -0x2dc(%ebp),%eax
f0125077:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012507a:	c1 e2 02             	shl    $0x2,%edx
f012507d:	01 d0                	add    %edx,%eax
f012507f:	8b 00                	mov    (%eax),%eax
f0125081:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f0125086:	89 c1                	mov    %eax,%ecx
f0125088:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012508e:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0125091:	89 0c 90             	mov    %ecx,(%eax,%edx,4)
				uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125094:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012509a:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012509d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01250a0:	83 ec 0c             	sub    $0xc,%esp
f01250a3:	50                   	push   %eax
f01250a4:	e8 6f 23 fe ff       	call   f0107418 <kheap_virtual_address>
f01250a9:	83 c4 10             	add    $0x10,%esp
f01250ac:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
				//cprintf("va to check = %x\n", va);
				if (retrievedVA != (va))
f01250b2:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01250b8:	3b 45 e4             	cmp    -0x1c(%ebp),%eax
f01250bb:	74 61                	je     f012511e <test_kheap_virt_addr+0xea7>
				{
					cprintf("\nretrievedVA = %x, Actual VA = %x, table entry = %x, khep_pa = %x\n",retrievedVA, va + j*PAGE_SIZE, (ptr_table[j] & 0xFFFFF000) , allPAs[i]);
f01250bd:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01250c3:	8b 55 e0             	mov    -0x20(%ebp),%edx
f01250c6:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01250c9:	8b 95 24 fd ff ff    	mov    -0x2dc(%ebp),%edx
f01250cf:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f01250d2:	c1 e1 02             	shl    $0x2,%ecx
f01250d5:	01 ca                	add    %ecx,%edx
f01250d7:	8b 12                	mov    (%edx),%edx
f01250d9:	89 d1                	mov    %edx,%ecx
f01250db:	81 e1 00 f0 ff ff    	and    $0xfffff000,%ecx
f01250e1:	8b 55 dc             	mov    -0x24(%ebp),%edx
f01250e4:	c1 e2 0c             	shl    $0xc,%edx
f01250e7:	89 d3                	mov    %edx,%ebx
f01250e9:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f01250ec:	01 da                	add    %ebx,%edx
f01250ee:	83 ec 0c             	sub    $0xc,%esp
f01250f1:	50                   	push   %eax
f01250f2:	51                   	push   %ecx
f01250f3:	52                   	push   %edx
f01250f4:	ff b5 84 fe ff ff    	pushl  -0x17c(%ebp)
f01250fa:	68 6c af 13 f0       	push   $0xf013af6c
f01250ff:	e8 29 bb fd ff       	call   f0100c2d <cprintf>
f0125104:	83 c4 20             	add    $0x20,%esp
					panic("Wrong kheap_virtual_address");
f0125107:	83 ec 04             	sub    $0x4,%esp
f012510a:	68 af af 13 f0       	push   $0xf013afaf
f012510f:	68 42 09 00 00       	push   $0x942
f0125114:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125119:	e8 88 b0 fd ff       	call   f01001a6 <_panic>
				}
				va+=PAGE_SIZE;
f012511e:	81 45 e4 00 10 00 00 	addl   $0x1000,-0x1c(%ebp)
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, va, &ptr_table);
			if (ptr_table == NULL)
				panic("one of the kernel tables is wrongly removed! Tables of Kernel Heap should not be removed");

			for (j = PTX(va); i < numOfFrames && j < 1024; ++j, ++i)
f0125125:	ff 45 dc             	incl   -0x24(%ebp)
f0125128:	ff 45 e0             	incl   -0x20(%ebp)
f012512b:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012512e:	3b 85 ac fe ff ff    	cmp    -0x154(%ebp),%eax
f0125134:	7d 0d                	jge    f0125143 <test_kheap_virt_addr+0xecc>
f0125136:	81 7d dc ff 03 00 00 	cmpl   $0x3ff,-0x24(%ebp)
f012513d:	0f 8e 2e ff ff ff    	jle    f0125071 <test_kheap_virt_addr+0xdfa>
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		for (va = (KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS); va < endVA; )
f0125143:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f0125146:	3b 85 90 fe ff ff    	cmp    -0x170(%ebp),%eax
f012514c:	0f 82 d0 fe ff ff    	jb     f0125022 <test_kheap_virt_addr+0xdab>
				}
				va+=PAGE_SIZE;
			}
		}
	}
	cprintf("\nkheap_virtual_address: current evaluation = 40%");
f0125152:	83 ec 0c             	sub    $0xc,%esp
f0125155:	68 cc af 13 f0       	push   $0xf013afcc
f012515a:	e8 ce ba fd ff       	call   f0100c2d <cprintf>
f012515f:	83 c4 10             	add    $0x10,%esp

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f0125162:	e8 69 6f fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0125167:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f012516d:	e8 22 eb fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0125172:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[0]);
f0125178:	8b 85 28 fd ff ff    	mov    -0x2d8(%ebp),%eax
f012517e:	83 ec 0c             	sub    $0xc,%esp
f0125181:	50                   	push   %eax
f0125182:	e8 77 22 fe ff       	call   f01073fe <kfree>
f0125187:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012518a:	e8 05 eb fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012518f:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125195:	74 17                	je     f01251ae <test_kheap_virt_addr+0xf37>
f0125197:	83 ec 04             	sub    $0x4,%esp
f012519a:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012519f:	68 50 09 00 00       	push   $0x950
f01251a4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01251a9:	e8 f8 af fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f01251ae:	e8 1d 6f fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01251b3:	89 c2                	mov    %eax,%edx
f01251b5:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01251bb:	29 c2                	sub    %eax,%edx
f01251bd:	89 d0                	mov    %edx,%eax
f01251bf:	3d 00 02 00 00       	cmp    $0x200,%eax
f01251c4:	74 17                	je     f01251dd <test_kheap_virt_addr+0xf66>
f01251c6:	83 ec 04             	sub    $0x4,%esp
f01251c9:	68 60 ac 13 f0       	push   $0xf013ac60
f01251ce:	68 51 09 00 00       	push   $0x951
f01251d3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01251d8:	e8 c9 af fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01251dd:	e8 ee 6e fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01251e2:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01251e8:	e8 a7 ea fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01251ed:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[1]);
f01251f3:	8b 85 2c fd ff ff    	mov    -0x2d4(%ebp),%eax
f01251f9:	83 ec 0c             	sub    $0xc,%esp
f01251fc:	50                   	push   %eax
f01251fd:	e8 fc 21 fe ff       	call   f01073fe <kfree>
f0125202:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125205:	e8 8a ea fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012520a:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f0125210:	74 17                	je     f0125229 <test_kheap_virt_addr+0xfb2>
f0125212:	83 ec 04             	sub    $0x4,%esp
f0125215:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012521a:	68 57 09 00 00       	push   $0x957
f012521f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125224:	e8 7d af fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f0125229:	e8 a2 6e fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012522e:	89 c2                	mov    %eax,%edx
f0125230:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f0125236:	29 c2                	sub    %eax,%edx
f0125238:	89 d0                	mov    %edx,%eax
f012523a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012523f:	74 17                	je     f0125258 <test_kheap_virt_addr+0xfe1>
f0125241:	83 ec 04             	sub    $0x4,%esp
f0125244:	68 60 ac 13 f0       	push   $0xf013ac60
f0125249:	68 58 09 00 00       	push   $0x958
f012524e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125253:	e8 4e af fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0125258:	e8 73 6e fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012525d:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125263:	e8 2c ea fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0125268:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		kfree(ptr_allocations[6]);
f012526e:	8b 85 40 fd ff ff    	mov    -0x2c0(%ebp),%eax
f0125274:	83 ec 0c             	sub    $0xc,%esp
f0125277:	50                   	push   %eax
f0125278:	e8 81 21 fe ff       	call   f01073fe <kfree>
f012527d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125280:	e8 0f ea fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0125285:	3b 85 7c fe ff ff    	cmp    -0x184(%ebp),%eax
f012528b:	74 17                	je     f01252a4 <test_kheap_virt_addr+0x102d>
f012528d:	83 ec 04             	sub    $0x4,%esp
f0125290:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0125295:	68 5e 09 00 00       	push   $0x95e
f012529a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012529f:	e8 02 af fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f01252a4:	e8 27 6e fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01252a9:	89 c2                	mov    %eax,%edx
f01252ab:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f01252b1:	29 c2                	sub    %eax,%edx
f01252b3:	89 d0                	mov    %edx,%eax
f01252b5:	3d 00 06 00 00       	cmp    $0x600,%eax
f01252ba:	74 17                	je     f01252d3 <test_kheap_virt_addr+0x105c>
f01252bc:	83 ec 04             	sub    $0x4,%esp
f01252bf:	68 60 ac 13 f0       	push   $0xf013ac60
f01252c4:	68 5f 09 00 00       	push   $0x95f
f01252c9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01252ce:	e8 d3 ae fd ff       	call   f01001a6 <_panic>


	//test kheap_virtual_address after kmalloc and kfree [40%]
	{
		uint32 va;
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
f01252d3:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f01252da:	10 00 00 
f01252dd:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f01252e3:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01252e8:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f01252ee:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01252f4:	ba 00 00 00 00       	mov    $0x0,%edx
f01252f9:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f01252ff:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125305:	29 d0                	sub    %edx,%eax
f0125307:	89 c1                	mov    %eax,%ecx
f0125309:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f0125310:	10 00 00 
f0125313:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125318:	0f b6 d0             	movzbl %al,%edx
f012531b:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125321:	01 d0                	add    %edx,%eax
f0125323:	48                   	dec    %eax
f0125324:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012532a:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125330:	ba 00 00 00 00       	mov    $0x0,%edx
f0125335:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012533b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0125341:	29 d0                	sub    %edx,%eax
f0125343:	01 c1                	add    %eax,%ecx
f0125345:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012534c:	10 00 00 
f012534f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125354:	0f b6 c0             	movzbl %al,%eax
f0125357:	c1 e0 04             	shl    $0x4,%eax
f012535a:	89 c2                	mov    %eax,%edx
f012535c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0125362:	01 d0                	add    %edx,%eax
f0125364:	48                   	dec    %eax
f0125365:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012536b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125371:	ba 00 00 00 00       	mov    $0x0,%edx
f0125376:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012537c:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0125382:	29 d0                	sub    %edx,%eax
f0125384:	01 c8                	add    %ecx,%eax
f0125386:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f012538b:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		int i = 0;
f0125391:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
f0125398:	c7 85 5c fe ff ff 00 	movl   $0x1000,-0x1a4(%ebp)
f012539f:	10 00 00 
f01253a2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01253a8:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01253ad:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
f01253b3:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01253b9:	ba 00 00 00 00       	mov    $0x0,%edx
f01253be:	f7 b5 5c fe ff ff    	divl   -0x1a4(%ebp)
f01253c4:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f01253ca:	29 d0                	sub    %edx,%eax
f01253cc:	89 c1                	mov    %eax,%ecx
f01253ce:	c7 85 54 fe ff ff 00 	movl   $0x1000,-0x1ac(%ebp)
f01253d5:	10 00 00 
f01253d8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01253dd:	0f b6 d0             	movzbl %al,%edx
f01253e0:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f01253e6:	01 d0                	add    %edx,%eax
f01253e8:	48                   	dec    %eax
f01253e9:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
f01253ef:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f01253f5:	ba 00 00 00 00       	mov    $0x0,%edx
f01253fa:	f7 b5 54 fe ff ff    	divl   -0x1ac(%ebp)
f0125400:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f0125406:	29 d0                	sub    %edx,%eax
f0125408:	01 c1                	add    %eax,%ecx
f012540a:	c7 85 4c fe ff ff 00 	movl   $0x1000,-0x1b4(%ebp)
f0125411:	10 00 00 
f0125414:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125419:	0f b6 c0             	movzbl %al,%eax
f012541c:	c1 e0 04             	shl    $0x4,%eax
f012541f:	89 c2                	mov    %eax,%edx
f0125421:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f0125427:	01 d0                	add    %edx,%eax
f0125429:	48                   	dec    %eax
f012542a:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
f0125430:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125436:	ba 00 00 00 00       	mov    $0x0,%edx
f012543b:	f7 b5 4c fe ff ff    	divl   -0x1b4(%ebp)
f0125441:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f0125447:	29 d0                	sub    %edx,%eax
f0125449:	01 c1                	add    %eax,%ecx
f012544b:	c7 85 44 fe ff ff 00 	movl   $0x1000,-0x1bc(%ebp)
f0125452:	10 00 00 
f0125455:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012545b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125460:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
f0125466:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012546c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125471:	f7 b5 44 fe ff ff    	divl   -0x1bc(%ebp)
f0125477:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012547d:	29 d0                	sub    %edx,%eax
f012547f:	29 c1                	sub    %eax,%ecx
f0125481:	89 c8                	mov    %ecx,%eax
f0125483:	05 00 40 00 00       	add    $0x4000,%eax
f0125488:	c1 e8 0c             	shr    $0xc,%eax
f012548b:	89 85 3c fe ff ff    	mov    %eax,-0x1c4(%ebp)
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f0125491:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125497:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012549a:	eb 41                	jmp    f01254dd <test_kheap_virt_addr+0x1266>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f012549c:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01254a2:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01254a5:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01254a8:	83 ec 0c             	sub    $0xc,%esp
f01254ab:	50                   	push   %eax
f01254ac:	e8 67 1f fe ff       	call   f0107418 <kheap_virtual_address>
f01254b1:	83 c4 10             	add    $0x10,%esp
f01254b4:	89 85 38 fe ff ff    	mov    %eax,-0x1c8(%ebp)
			if (retrievedVA != 0)
f01254ba:	83 bd 38 fe ff ff 00 	cmpl   $0x0,-0x1c8(%ebp)
f01254c1:	74 17                	je     f01254da <test_kheap_virt_addr+0x1263>
			{
				panic("Wrong kheap_virtual_address");
f01254c3:	83 ec 04             	sub    $0x4,%esp
f01254c6:	68 af af 13 f0       	push   $0xf013afaf
f01254cb:	68 70 09 00 00       	push   $0x970
f01254d0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01254d5:	e8 cc ac fd ff       	call   f01001a6 <_panic>
		uint32 endVA = ACTUAL_START + 13*Mega + 32*kilo;
		int i = 0;
		int j;
		//frames of first 4 MB
		uint32 startIndex = (INITIAL_KHEAP_ALLOCATIONS - DYNAMIC_ALLOCATOR_DS) / PAGE_SIZE;
		for (i = startIndex ; i < startIndex + 4*Mega/PAGE_SIZE; ++i)
f01254da:	ff 45 d8             	incl   -0x28(%ebp)
f01254dd:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01254e3:	8d 90 00 04 00 00    	lea    0x400(%eax),%edx
f01254e9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01254ec:	39 c2                	cmp    %eax,%edx
f01254ee:	77 ac                	ja     f012549c <test_kheap_virt_addr+0x1225>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01254f0:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01254f6:	05 00 04 00 00       	add    $0x400,%eax
f01254fb:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01254fe:	e9 83 00 00 00       	jmp    f0125586 <test_kheap_virt_addr+0x130f>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125503:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0125509:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012550c:	8b 04 90             	mov    (%eax,%edx,4),%eax
f012550f:	83 ec 0c             	sub    $0xc,%esp
f0125512:	50                   	push   %eax
f0125513:	e8 00 1f fe ff       	call   f0107418 <kheap_virtual_address>
f0125518:	83 c4 10             	add    $0x10,%esp
f012551b:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125521:	c7 85 30 fe ff ff 00 	movl   $0x1000,-0x1d0(%ebp)
f0125528:	10 00 00 
f012552b:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0125531:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125536:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
f012553c:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125542:	ba 00 00 00 00       	mov    $0x0,%edx
f0125547:	f7 b5 30 fe ff ff    	divl   -0x1d0(%ebp)
f012554d:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0125553:	29 d0                	sub    %edx,%eax
f0125555:	89 c2                	mov    %eax,%edx
f0125557:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012555a:	c1 e0 0c             	shl    $0xc,%eax
f012555d:	01 d0                	add    %edx,%eax
f012555f:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125564:	3b 85 34 fe ff ff    	cmp    -0x1cc(%ebp),%eax
f012556a:	74 17                	je     f0125583 <test_kheap_virt_addr+0x130c>
			{
				panic("Wrong kheap_virtual_address");
f012556c:	83 ec 04             	sub    $0x4,%esp
f012556f:	68 af af 13 f0       	push   $0xf013afaf
f0125574:	68 7a 09 00 00       	push   $0x97a
f0125579:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012557e:	e8 23 ac fd ff       	call   f01001a6 <_panic>
				panic("Wrong kheap_virtual_address");
			}

		}
		//next frames until 6 MB
		for (i = startIndex + 4*Mega/PAGE_SIZE; i < startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; ++i)
f0125583:	ff 45 d8             	incl   -0x28(%ebp)
f0125586:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012558c:	8d 90 04 07 00 00    	lea    0x704(%eax),%edx
f0125592:	8b 45 d8             	mov    -0x28(%ebp),%eax
f0125595:	39 c2                	cmp    %eax,%edx
f0125597:	0f 87 66 ff ff ff    	ja     f0125503 <test_kheap_virt_addr+0x128c>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f012559d:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01255a3:	05 04 07 00 00       	add    $0x704,%eax
f01255a8:	89 45 d8             	mov    %eax,-0x28(%ebp)
f01255ab:	eb 41                	jmp    f01255ee <test_kheap_virt_addr+0x1377>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f01255ad:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01255b3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f01255b6:	8b 04 90             	mov    (%eax,%edx,4),%eax
f01255b9:	83 ec 0c             	sub    $0xc,%esp
f01255bc:	50                   	push   %eax
f01255bd:	e8 56 1e fe ff       	call   f0107418 <kheap_virtual_address>
f01255c2:	83 c4 10             	add    $0x10,%esp
f01255c5:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
			if (retrievedVA != 0)
f01255cb:	83 bd 28 fe ff ff 00 	cmpl   $0x0,-0x1d8(%ebp)
f01255d2:	74 17                	je     f01255eb <test_kheap_virt_addr+0x1374>
			{
				panic("Wrong kheap_virtual_address");
f01255d4:	83 ec 04             	sub    $0x4,%esp
f01255d7:	68 af af 13 f0       	push   $0xf013afaf
f01255dc:	68 83 09 00 00       	push   $0x983
f01255e1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01255e6:	e8 bb ab fd ff       	call   f01001a6 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of 6 MB
		for (i = startIndex + (7*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; ++i)
f01255eb:	ff 45 d8             	incl   -0x28(%ebp)
f01255ee:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f01255f4:	8d 90 04 0d 00 00    	lea    0xd04(%eax),%edx
f01255fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01255fd:	39 c2                	cmp    %eax,%edx
f01255ff:	77 ac                	ja     f01255ad <test_kheap_virt_addr+0x1336>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125601:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f0125607:	05 04 0d 00 00       	add    $0xd04,%eax
f012560c:	89 45 d8             	mov    %eax,-0x28(%ebp)
f012560f:	e9 83 00 00 00       	jmp    f0125697 <test_kheap_virt_addr+0x1420>
		{
			uint32 retrievedVA = kheap_virtual_address(allPAs[i]);
f0125614:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012561a:	8b 55 d8             	mov    -0x28(%ebp),%edx
f012561d:	8b 04 90             	mov    (%eax,%edx,4),%eax
f0125620:	83 ec 0c             	sub    $0xc,%esp
f0125623:	50                   	push   %eax
f0125624:	e8 ef 1d fe ff       	call   f0107418 <kheap_virtual_address>
f0125629:	83 c4 10             	add    $0x10,%esp
f012562c:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
			if (retrievedVA != KERNEL_HEAP_START + DYNAMIC_ALLOCATOR_DS + i*PAGE_SIZE)
f0125632:	c7 85 20 fe ff ff 00 	movl   $0x1000,-0x1e0(%ebp)
f0125639:	10 00 00 
f012563c:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0125642:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125647:	89 85 1c fe ff ff    	mov    %eax,-0x1e4(%ebp)
f012564d:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125653:	ba 00 00 00 00       	mov    $0x0,%edx
f0125658:	f7 b5 20 fe ff ff    	divl   -0x1e0(%ebp)
f012565e:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0125664:	29 d0                	sub    %edx,%eax
f0125666:	89 c2                	mov    %eax,%edx
f0125668:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012566b:	c1 e0 0c             	shl    $0xc,%eax
f012566e:	01 d0                	add    %edx,%eax
f0125670:	2d 00 00 00 0a       	sub    $0xa000000,%eax
f0125675:	3b 85 24 fe ff ff    	cmp    -0x1dc(%ebp),%eax
f012567b:	74 17                	je     f0125694 <test_kheap_virt_addr+0x141d>
			{
				panic("Wrong kheap_virtual_address");
f012567d:	83 ec 04             	sub    $0x4,%esp
f0125680:	68 af af 13 f0       	push   $0xf013afaf
f0125685:	68 8c 09 00 00       	push   $0x98c
f012568a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012568f:	e8 12 ab fd ff       	call   f01001a6 <_panic>
			{
				panic("Wrong kheap_virtual_address");
			}
		}
		//frames of last allocation (14 KB)
		for (i = startIndex + (13*Mega + 16*kilo)/PAGE_SIZE; i < startIndex + (13*Mega + 32*kilo)/PAGE_SIZE; ++i)
f0125694:	ff 45 d8             	incl   -0x28(%ebp)
f0125697:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012569d:	8d 90 08 0d 00 00    	lea    0xd08(%eax),%edx
f01256a3:	8b 45 d8             	mov    -0x28(%ebp),%eax
f01256a6:	39 c2                	cmp    %eax,%edx
f01256a8:	0f 87 66 ff ff ff    	ja     f0125614 <test_kheap_virt_addr+0x139d>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b80%");
f01256ae:	83 ec 0c             	sub    $0xc,%esp
f01256b1:	68 61 a6 13 f0       	push   $0xf013a661
f01256b6:	e8 72 b5 fd ff       	call   f0100c2d <cprintf>
f01256bb:	83 c4 10             	add    $0x10,%esp

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f01256be:	c7 45 d4 00 00 10 00 	movl   $0x100000,-0x2c(%ebp)
f01256c5:	eb 54                	jmp    f012571b <test_kheap_virt_addr+0x14a4>
		{
			uint32 retrievedVA = kheap_virtual_address(i);
f01256c7:	83 ec 0c             	sub    $0xc,%esp
f01256ca:	ff 75 d4             	pushl  -0x2c(%ebp)
f01256cd:	e8 46 1d fe ff       	call   f0107418 <kheap_virtual_address>
f01256d2:	83 c4 10             	add    $0x10,%esp
f01256d5:	89 85 18 fe ff ff    	mov    %eax,-0x1e8(%ebp)
			if (retrievedVA != 0)
f01256db:	83 bd 18 fe ff ff 00 	cmpl   $0x0,-0x1e8(%ebp)
f01256e2:	74 30                	je     f0125714 <test_kheap_virt_addr+0x149d>
			{
				cprintf("\nPA = %x, retrievedVA = %x\n", i, retrievedVA);
f01256e4:	83 ec 04             	sub    $0x4,%esp
f01256e7:	ff b5 18 fe ff ff    	pushl  -0x1e8(%ebp)
f01256ed:	ff 75 d4             	pushl  -0x2c(%ebp)
f01256f0:	68 fd af 13 f0       	push   $0xf013affd
f01256f5:	e8 33 b5 fd ff       	call   f0100c2d <cprintf>
f01256fa:	83 c4 10             	add    $0x10,%esp
				panic("Wrong kheap_virtual_address");
f01256fd:	83 ec 04             	sub    $0x4,%esp
f0125700:	68 af af 13 f0       	push   $0xf013afaf
f0125705:	68 9c 09 00 00       	push   $0x99c
f012570a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012570f:	e8 92 aa fd ff       	call   f01001a6 <_panic>
	cprintf("\b\b\b80%");

	//test kheap_virtual_address on frames of KERNEL CODE [20%]
	{
		uint32 i;
		for (i = 1*Mega; i < (uint32)(end_of_kernel - KERNEL_BASE); i+=PAGE_SIZE)
f0125714:	81 45 d4 00 10 00 00 	addl   $0x1000,-0x2c(%ebp)
f012571b:	b8 1c 86 6e 00       	mov    $0x6e861c,%eax
f0125720:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
f0125723:	72 a2                	jb     f01256c7 <test_kheap_virt_addr+0x1450>
				panic("Wrong kheap_virtual_address");
			}
		}
	}

	cprintf("\b\b\b100%\n");
f0125725:	83 ec 0c             	sub    $0xc,%esp
f0125728:	68 ba a6 13 f0       	push   $0xf013a6ba
f012572d:	e8 fb b4 fd ff       	call   f0100c2d <cprintf>
f0125732:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test kheap_virtual_address completed successfully.\n");
f0125735:	83 ec 0c             	sub    $0xc,%esp
f0125738:	68 1c b0 13 f0       	push   $0xf013b01c
f012573d:	e8 eb b4 fd ff       	call   f0100c2d <cprintf>
f0125742:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125745:	b8 01 00 00 00       	mov    $0x1,%eax
f012574a:	89 f4                	mov    %esi,%esp

}
f012574c:	8d 65 f4             	lea    -0xc(%ebp),%esp
f012574f:	5b                   	pop    %ebx
f0125750:	5e                   	pop    %esi
f0125751:	5f                   	pop    %edi
f0125752:	5d                   	pop    %ebp
f0125753:	c3                   	ret    

f0125754 <test_three_creation_functions>:

int initFreeFrames;
int initFreeDiskFrames ;
uint8 firstCall = 1 ;
int test_three_creation_functions()
{
f0125754:	55                   	push   %ebp
f0125755:	89 e5                	mov    %esp,%ebp
f0125757:	57                   	push   %edi
f0125758:	56                   	push   %esi
f0125759:	53                   	push   %ebx
f012575a:	81 ec ac 00 00 00    	sub    $0xac,%esp
	if (firstCall)
f0125760:	a0 cf 0c 19 f0       	mov    0xf0190ccf,%al
f0125765:	84 c0                	test   %al,%al
f0125767:	74 56                	je     f01257bf <test_three_creation_functions+0x6b>
	{
		firstCall = 0;
f0125769:	c6 05 cf 0c 19 f0 00 	movb   $0x0,0xf0190ccf
		initFreeFrames = sys_calculate_free_frames() ;
f0125770:	e8 5b 69 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0125775:	a3 18 86 6e f0       	mov    %eax,0xf06e8618
		initFreeDiskFrames = pf_calculate_free_frames() ;
f012577a:	e8 15 e5 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012577f:	a3 14 86 6e f0       	mov    %eax,0xf06e8614
		//Run simple user program
		{
			char command[100] = "run fos_add 4096";
f0125784:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f012578a:	bb 79 b1 13 f0       	mov    $0xf013b179,%ebx
f012578f:	ba 11 00 00 00       	mov    $0x11,%edx
f0125794:	89 c7                	mov    %eax,%edi
f0125796:	89 de                	mov    %ebx,%esi
f0125798:	89 d1                	mov    %edx,%ecx
f012579a:	f3 a4                	rep movsb %ds:(%esi),%es:(%edi)
f012579c:	8d 95 65 ff ff ff    	lea    -0x9b(%ebp),%edx
f01257a2:	b9 53 00 00 00       	mov    $0x53,%ecx
f01257a7:	b0 00                	mov    $0x0,%al
f01257a9:	89 d7                	mov    %edx,%edi
f01257ab:	f3 aa                	rep stos %al,%es:(%edi)
			execute_command(command) ;
f01257ad:	83 ec 0c             	sub    $0xc,%esp
f01257b0:	8d 85 54 ff ff ff    	lea    -0xac(%ebp),%eax
f01257b6:	50                   	push   %eax
f01257b7:	e8 d3 b4 fd ff       	call   f0100c8f <execute_command>
f01257bc:	83 c4 10             	add    $0x10,%esp
		}
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
f01257bf:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
		struct Env * ptr_env = NULL;
f01257c6:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01257cd:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f01257d2:	89 45 e0             	mov    %eax,-0x20(%ebp)
f01257d5:	eb 2d                	jmp    f0125804 <test_three_creation_functions+0xb0>
		{
			if (strcmp(ptr_env->prog_name, "fos_add") == 0)
f01257d7:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01257da:	05 18 da 01 00       	add    $0x1da18,%eax
f01257df:	83 ec 08             	sub    $0x8,%esp
f01257e2:	68 63 b0 13 f0       	push   $0xf013b063
f01257e7:	50                   	push   %eax
f01257e8:	e8 5c ad 00 00       	call   f0130549 <strcmp>
f01257ed:	83 c4 10             	add    $0x10,%esp
f01257f0:	85 c0                	test   %eax,%eax
f01257f2:	75 08                	jne    f01257fc <test_three_creation_functions+0xa8>
			{
				e = ptr_env ;
f01257f4:	8b 45 e0             	mov    -0x20(%ebp),%eax
f01257f7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
				break;
f01257fa:	eb 2f                	jmp    f012582b <test_three_creation_functions+0xd7>
	}
	//Ensure that the user directory, page WS and page tables are allocated in KERNEL HEAP
	{
		struct Env * e = NULL;
		struct Env * ptr_env = NULL;
		LIST_FOREACH(ptr_env, &env_exit_queue)
f01257fc:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f0125801:	89 45 e0             	mov    %eax,-0x20(%ebp)
f0125804:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125808:	74 08                	je     f0125812 <test_three_creation_functions+0xbe>
f012580a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012580d:	8b 40 44             	mov    0x44(%eax),%eax
f0125810:	eb 05                	jmp    f0125817 <test_three_creation_functions+0xc3>
f0125812:	b8 00 00 00 00       	mov    $0x0,%eax
f0125817:	a3 6c 60 6e f0       	mov    %eax,0xf06e606c
f012581c:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f0125821:	85 c0                	test   %eax,%eax
f0125823:	75 b2                	jne    f01257d7 <test_three_creation_functions+0x83>
f0125825:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f0125829:	75 ac                	jne    f01257d7 <test_three_creation_functions+0x83>
			{
				e = ptr_env ;
				break;
			}
		}
		if (e->pageFaultsCounter != 0)
f012582b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012582e:	8b 80 f0 d9 01 00    	mov    0x1d9f0(%eax),%eax
f0125834:	85 c0                	test   %eax,%eax
f0125836:	74 17                	je     f012584f <test_three_creation_functions+0xfb>
			panic("Page fault is occur while not expected to. Review the three creation functions");
f0125838:	83 ec 04             	sub    $0x4,%esp
f012583b:	68 6c b0 13 f0       	push   $0xf013b06c
f0125840:	68 c6 09 00 00       	push   $0x9c6
f0125845:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012584a:	e8 57 a9 fd ff       	call   f01001a6 <_panic>

		int pagesInWS = env_page_ws_get_size(e);
f012584f:	83 ec 0c             	sub    $0xc,%esp
f0125852:	ff 75 e4             	pushl  -0x1c(%ebp)
f0125855:	e8 ca 1e fe ff       	call   f0107724 <env_page_ws_get_size>
f012585a:	83 c4 10             	add    $0x10,%esp
f012585d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		int curFreeFrames = sys_calculate_free_frames() ;
f0125860:	e8 6b 68 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0125865:	89 45 d8             	mov    %eax,-0x28(%ebp)
		int curFreeDiskFrames = pf_calculate_free_frames() ;
f0125868:	e8 27 e4 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012586d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		//cprintf("\ndiff in page file = %d, pages in WS = %d\n", initFreeDiskFrames - curFreeDiskFrames, pagesInWS);
		if ((initFreeDiskFrames - curFreeDiskFrames) != pagesInWS) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125870:	a1 14 86 6e f0       	mov    0xf06e8614,%eax
f0125875:	2b 45 d4             	sub    -0x2c(%ebp),%eax
f0125878:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012587b:	74 17                	je     f0125894 <test_three_creation_functions+0x140>
f012587d:	83 ec 04             	sub    $0x4,%esp
f0125880:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0125885:	68 cc 09 00 00       	push   $0x9cc
f012588a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012588f:	e8 12 a9 fd ff       	call   f01001a6 <_panic>
		//cprintf("\ndiff in mem frames = %d, pages in WS = %d\n", initFreeFrames - curFreeFrames, pagesInWS);
		if ((initFreeFrames - curFreeFrames) != 12/*WS*/ + 2*1/*DIR*/ + 2*3/*Tables*/ + 1 /*user WS table*/ + pagesInWS) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125894:	a1 18 86 6e f0       	mov    0xf06e8618,%eax
f0125899:	2b 45 d8             	sub    -0x28(%ebp),%eax
f012589c:	8b 55 dc             	mov    -0x24(%ebp),%edx
f012589f:	83 c2 15             	add    $0x15,%edx
f01258a2:	39 d0                	cmp    %edx,%eax
f01258a4:	74 17                	je     f01258bd <test_three_creation_functions+0x169>
f01258a6:	83 ec 04             	sub    $0x4,%esp
f01258a9:	68 58 a5 13 f0       	push   $0xf013a558
f01258ae:	68 ce 09 00 00       	push   $0x9ce
f01258b3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01258b8:	e8 e9 a8 fd ff       	call   f01001a6 <_panic>

		//allocate 4 KB
		char *ptr = kmalloc(4*kilo);
f01258bd:	83 ec 0c             	sub    $0xc,%esp
f01258c0:	68 00 10 00 00       	push   $0x1000
f01258c5:	e8 1a 1b fe ff       	call   f01073e4 <kmalloc>
f01258ca:	83 c4 10             	add    $0x10,%esp
f01258cd:	89 45 d0             	mov    %eax,-0x30(%ebp)
		if ((uint32) ptr !=  (ACTUAL_START + (12+2*1+2*3+1)*PAGE_SIZE)) panic("Wrong start address for the allocated space... make sure you create the dir, table and page WS in KERNEL HEAP");
f01258d0:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f01258d7:	8b 45 cc             	mov    -0x34(%ebp),%eax
f01258da:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01258df:	89 45 c8             	mov    %eax,-0x38(%ebp)
f01258e2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01258e5:	ba 00 00 00 00       	mov    $0x0,%edx
f01258ea:	f7 75 cc             	divl   -0x34(%ebp)
f01258ed:	8b 45 c8             	mov    -0x38(%ebp),%eax
f01258f0:	29 d0                	sub    %edx,%eax
f01258f2:	89 c1                	mov    %eax,%ecx
f01258f4:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f01258fb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125900:	0f b6 d0             	movzbl %al,%edx
f0125903:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125906:	01 d0                	add    %edx,%eax
f0125908:	48                   	dec    %eax
f0125909:	89 45 c0             	mov    %eax,-0x40(%ebp)
f012590c:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012590f:	ba 00 00 00 00       	mov    $0x0,%edx
f0125914:	f7 75 c4             	divl   -0x3c(%ebp)
f0125917:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012591a:	29 d0                	sub    %edx,%eax
f012591c:	01 c1                	add    %eax,%ecx
f012591e:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0125925:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012592a:	0f b6 c0             	movzbl %al,%eax
f012592d:	c1 e0 04             	shl    $0x4,%eax
f0125930:	89 c2                	mov    %eax,%edx
f0125932:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125935:	01 d0                	add    %edx,%eax
f0125937:	48                   	dec    %eax
f0125938:	89 45 b8             	mov    %eax,-0x48(%ebp)
f012593b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012593e:	ba 00 00 00 00       	mov    $0x0,%edx
f0125943:	f7 75 bc             	divl   -0x44(%ebp)
f0125946:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125949:	29 d0                	sub    %edx,%eax
f012594b:	01 c8                	add    %ecx,%eax
f012594d:	8d 90 00 90 01 f6    	lea    -0x9fe7000(%eax),%edx
f0125953:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0125956:	39 c2                	cmp    %eax,%edx
f0125958:	74 17                	je     f0125971 <test_three_creation_functions+0x21d>
f012595a:	83 ec 04             	sub    $0x4,%esp
f012595d:	68 bc b0 13 f0       	push   $0xf013b0bc
f0125962:	68 d2 09 00 00       	push   $0x9d2
f0125967:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012596c:	e8 35 a8 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! test the 3 creation functions is completed successfully.\n");
f0125971:	83 ec 0c             	sub    $0xc,%esp
f0125974:	68 2c b1 13 f0       	push   $0xf013b12c
f0125979:	e8 af b2 fd ff       	call   f0100c2d <cprintf>
f012597e:	83 c4 10             	add    $0x10,%esp

	return 1;
f0125981:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0125986:	8d 65 f4             	lea    -0xc(%ebp),%esp
f0125989:	5b                   	pop    %ebx
f012598a:	5e                   	pop    %esi
f012598b:	5f                   	pop    %edi
f012598c:	5d                   	pop    %ebp
f012598d:	c3                   	ret    

f012598e <test_kfreeall>:


extern void kfreeall() ;

int test_kfreeall()
{
f012598e:	55                   	push   %ebp
f012598f:	89 e5                	mov    %esp,%ebp
f0125991:	57                   	push   %edi
f0125992:	53                   	push   %ebx
f0125993:	81 ec 40 02 00 00    	sub    $0x240,%esp
	char minByte = 1<<7;
f0125999:	c6 45 e7 80          	movb   $0x80,-0x19(%ebp)
	char maxByte = 0x7F;
f012599d:	c6 45 e6 7f          	movb   $0x7f,-0x1a(%ebp)
	short minShort = 1<<15 ;
f01259a1:	66 c7 45 e4 00 80    	movw   $0x8000,-0x1c(%ebp)
	short maxShort = 0x7FFF;
f01259a7:	66 c7 45 e2 ff 7f    	movw   $0x7fff,-0x1e(%ebp)
	int minInt = 1<<31 ;
f01259ad:	c7 45 dc 00 00 00 80 	movl   $0x80000000,-0x24(%ebp)
	int maxInt = 0x7FFFFFFF;
f01259b4:	c7 45 d8 ff ff ff 7f 	movl   $0x7fffffff,-0x28(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01259bb:	e8 10 67 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01259c0:	89 45 d4             	mov    %eax,-0x2c(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01259c3:	8d 95 68 fe ff ff    	lea    -0x198(%ebp),%edx
f01259c9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01259ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01259d3:	89 d7                	mov    %edx,%edi
f01259d5:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f01259d7:	8d 95 18 fe ff ff    	lea    -0x1e8(%ebp),%edx
f01259dd:	b9 14 00 00 00       	mov    $0x14,%ecx
f01259e2:	b8 00 00 00 00       	mov    $0x0,%eax
f01259e7:	89 d7                	mov    %edx,%edi
f01259e9:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f01259eb:	8d 95 c8 fd ff ff    	lea    -0x238(%ebp),%edx
f01259f1:	b9 14 00 00 00       	mov    $0x14,%ecx
f01259f6:	b8 00 00 00 00       	mov    $0x0,%eax
f01259fb:	89 d7                	mov    %edx,%edi
f01259fd:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01259ff:	e8 cc 66 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0125a04:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125a07:	e8 88 e2 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0125a0c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0125a0f:	83 ec 0c             	sub    $0xc,%esp
f0125a12:	68 00 fc 1f 00       	push   $0x1ffc00
f0125a17:	e8 c8 19 fe ff       	call   f01073e4 <kmalloc>
f0125a1c:	83 c4 10             	add    $0x10,%esp
f0125a1f:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125a25:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f0125a2b:	89 c1                	mov    %eax,%ecx
f0125a2d:	c7 45 c8 00 10 00 00 	movl   $0x1000,-0x38(%ebp)
f0125a34:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0125a37:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125a3c:	89 45 c4             	mov    %eax,-0x3c(%ebp)
f0125a3f:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125a42:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a47:	f7 75 c8             	divl   -0x38(%ebp)
f0125a4a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0125a4d:	29 d0                	sub    %edx,%eax
f0125a4f:	89 c3                	mov    %eax,%ebx
f0125a51:	c7 45 c0 00 10 00 00 	movl   $0x1000,-0x40(%ebp)
f0125a58:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125a5d:	0f b6 d0             	movzbl %al,%edx
f0125a60:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0125a63:	01 d0                	add    %edx,%eax
f0125a65:	48                   	dec    %eax
f0125a66:	89 45 bc             	mov    %eax,-0x44(%ebp)
f0125a69:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125a6c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125a71:	f7 75 c0             	divl   -0x40(%ebp)
f0125a74:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0125a77:	29 d0                	sub    %edx,%eax
f0125a79:	01 c3                	add    %eax,%ebx
f0125a7b:	c7 45 b8 00 10 00 00 	movl   $0x1000,-0x48(%ebp)
f0125a82:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125a87:	0f b6 c0             	movzbl %al,%eax
f0125a8a:	c1 e0 04             	shl    $0x4,%eax
f0125a8d:	89 c2                	mov    %eax,%edx
f0125a8f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0125a92:	01 d0                	add    %edx,%eax
f0125a94:	48                   	dec    %eax
f0125a95:	89 45 b4             	mov    %eax,-0x4c(%ebp)
f0125a98:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125a9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0125aa0:	f7 75 b8             	divl   -0x48(%ebp)
f0125aa3:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0125aa6:	29 d0                	sub    %edx,%eax
f0125aa8:	01 d8                	add    %ebx,%eax
f0125aaa:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0125aaf:	39 c1                	cmp    %eax,%ecx
f0125ab1:	74 17                	je     f0125aca <test_kfreeall+0x13c>
f0125ab3:	83 ec 04             	sub    $0x4,%esp
f0125ab6:	68 bc a5 13 f0       	push   $0xf013a5bc
f0125abb:	68 f9 09 00 00       	push   $0x9f9
f0125ac0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125ac5:	e8 dc a6 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125aca:	e8 c5 e1 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0125acf:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125ad2:	74 17                	je     f0125aeb <test_kfreeall+0x15d>
f0125ad4:	83 ec 04             	sub    $0x4,%esp
f0125ad7:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0125adc:	68 fa 09 00 00       	push   $0x9fa
f0125ae1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125ae6:	e8 bb a6 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125aeb:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125aee:	e8 dd 65 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0125af3:	29 c3                	sub    %eax,%ebx
f0125af5:	89 d8                	mov    %ebx,%eax
f0125af7:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125afc:	74 17                	je     f0125b15 <test_kfreeall+0x187>
f0125afe:	83 ec 04             	sub    $0x4,%esp
f0125b01:	68 58 a5 13 f0       	push   $0xf013a558
f0125b06:	68 fb 09 00 00       	push   $0x9fb
f0125b0b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125b10:	e8 91 a6 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0125b15:	c7 85 68 fe ff ff ff 	movl   $0x1ffbff,-0x198(%ebp)
f0125b1c:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0125b1f:	e8 ac 65 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0125b24:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125b27:	e8 68 e1 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0125b2c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0125b2f:	83 ec 0c             	sub    $0xc,%esp
f0125b32:	68 00 fc 1f 00       	push   $0x1ffc00
f0125b37:	e8 a8 18 fe ff       	call   f01073e4 <kmalloc>
f0125b3c:	83 c4 10             	add    $0x10,%esp
f0125b3f:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125b45:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0125b4b:	89 c1                	mov    %eax,%ecx
f0125b4d:	c7 45 b0 00 10 00 00 	movl   $0x1000,-0x50(%ebp)
f0125b54:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0125b57:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125b5c:	89 45 ac             	mov    %eax,-0x54(%ebp)
f0125b5f:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125b62:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b67:	f7 75 b0             	divl   -0x50(%ebp)
f0125b6a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0125b6d:	29 d0                	sub    %edx,%eax
f0125b6f:	89 c3                	mov    %eax,%ebx
f0125b71:	c7 45 a8 00 10 00 00 	movl   $0x1000,-0x58(%ebp)
f0125b78:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125b7d:	0f b6 d0             	movzbl %al,%edx
f0125b80:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0125b83:	01 d0                	add    %edx,%eax
f0125b85:	48                   	dec    %eax
f0125b86:	89 45 a4             	mov    %eax,-0x5c(%ebp)
f0125b89:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0125b8c:	ba 00 00 00 00       	mov    $0x0,%edx
f0125b91:	f7 75 a8             	divl   -0x58(%ebp)
f0125b94:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0125b97:	29 d0                	sub    %edx,%eax
f0125b99:	01 c3                	add    %eax,%ebx
f0125b9b:	c7 45 a0 00 10 00 00 	movl   $0x1000,-0x60(%ebp)
f0125ba2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125ba7:	0f b6 c0             	movzbl %al,%eax
f0125baa:	c1 e0 04             	shl    $0x4,%eax
f0125bad:	89 c2                	mov    %eax,%edx
f0125baf:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0125bb2:	01 d0                	add    %edx,%eax
f0125bb4:	48                   	dec    %eax
f0125bb5:	89 45 9c             	mov    %eax,-0x64(%ebp)
f0125bb8:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125bbb:	ba 00 00 00 00       	mov    $0x0,%edx
f0125bc0:	f7 75 a0             	divl   -0x60(%ebp)
f0125bc3:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0125bc6:	29 d0                	sub    %edx,%eax
f0125bc8:	01 d8                	add    %ebx,%eax
f0125bca:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0125bcf:	39 c1                	cmp    %eax,%ecx
f0125bd1:	74 17                	je     f0125bea <test_kfreeall+0x25c>
f0125bd3:	83 ec 04             	sub    $0x4,%esp
f0125bd6:	68 bc a5 13 f0       	push   $0xf013a5bc
f0125bdb:	68 02 0a 00 00       	push   $0xa02
f0125be0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125be5:	e8 bc a5 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125bea:	e8 a5 e0 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0125bef:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125bf2:	74 17                	je     f0125c0b <test_kfreeall+0x27d>
f0125bf4:	83 ec 04             	sub    $0x4,%esp
f0125bf7:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0125bfc:	68 03 0a 00 00       	push   $0xa03
f0125c01:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125c06:	e8 9b a5 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125c0b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125c0e:	e8 bd 64 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0125c13:	29 c3                	sub    %eax,%ebx
f0125c15:	89 d8                	mov    %ebx,%eax
f0125c17:	3d 00 02 00 00       	cmp    $0x200,%eax
f0125c1c:	74 17                	je     f0125c35 <test_kfreeall+0x2a7>
f0125c1e:	83 ec 04             	sub    $0x4,%esp
f0125c21:	68 58 a5 13 f0       	push   $0xf013a558
f0125c26:	68 04 0a 00 00       	push   $0xa04
f0125c2b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125c30:	e8 71 a5 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0125c35:	c7 85 6c fe ff ff ff 	movl   $0x1ffbff,-0x194(%ebp)
f0125c3c:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125c3f:	e8 8c 64 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0125c44:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125c47:	e8 48 e0 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0125c4c:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0125c4f:	83 ec 0c             	sub    $0xc,%esp
f0125c52:	68 00 08 00 00       	push   $0x800
f0125c57:	e8 88 17 fe ff       	call   f01073e4 <kmalloc>
f0125c5c:	83 c4 10             	add    $0x10,%esp
f0125c5f:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125c65:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0125c6b:	89 c1                	mov    %eax,%ecx
f0125c6d:	c7 45 98 00 10 00 00 	movl   $0x1000,-0x68(%ebp)
f0125c74:	8b 45 98             	mov    -0x68(%ebp),%eax
f0125c77:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125c7c:	89 45 94             	mov    %eax,-0x6c(%ebp)
f0125c7f:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0125c82:	ba 00 00 00 00       	mov    $0x0,%edx
f0125c87:	f7 75 98             	divl   -0x68(%ebp)
f0125c8a:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0125c8d:	29 d0                	sub    %edx,%eax
f0125c8f:	89 c3                	mov    %eax,%ebx
f0125c91:	c7 45 90 00 10 00 00 	movl   $0x1000,-0x70(%ebp)
f0125c98:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125c9d:	0f b6 d0             	movzbl %al,%edx
f0125ca0:	8b 45 90             	mov    -0x70(%ebp),%eax
f0125ca3:	01 d0                	add    %edx,%eax
f0125ca5:	48                   	dec    %eax
f0125ca6:	89 45 8c             	mov    %eax,-0x74(%ebp)
f0125ca9:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125cac:	ba 00 00 00 00       	mov    $0x0,%edx
f0125cb1:	f7 75 90             	divl   -0x70(%ebp)
f0125cb4:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0125cb7:	29 d0                	sub    %edx,%eax
f0125cb9:	01 c3                	add    %eax,%ebx
f0125cbb:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0125cc2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125cc7:	0f b6 c0             	movzbl %al,%eax
f0125cca:	c1 e0 04             	shl    $0x4,%eax
f0125ccd:	89 c2                	mov    %eax,%edx
f0125ccf:	8b 45 88             	mov    -0x78(%ebp),%eax
f0125cd2:	01 d0                	add    %edx,%eax
f0125cd4:	48                   	dec    %eax
f0125cd5:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0125cd8:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125cdb:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ce0:	f7 75 88             	divl   -0x78(%ebp)
f0125ce3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0125ce6:	29 d0                	sub    %edx,%eax
f0125ce8:	01 d8                	add    %ebx,%eax
f0125cea:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0125cef:	39 c1                	cmp    %eax,%ecx
f0125cf1:	74 17                	je     f0125d0a <test_kfreeall+0x37c>
f0125cf3:	83 ec 04             	sub    $0x4,%esp
f0125cf6:	68 bc a5 13 f0       	push   $0xf013a5bc
f0125cfb:	68 0b 0a 00 00       	push   $0xa0b
f0125d00:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125d05:	e8 9c a4 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125d0a:	e8 85 df fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0125d0f:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125d12:	74 17                	je     f0125d2b <test_kfreeall+0x39d>
f0125d14:	83 ec 04             	sub    $0x4,%esp
f0125d17:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0125d1c:	68 0c 0a 00 00       	push   $0xa0c
f0125d21:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125d26:	e8 7b a4 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125d2b:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125d2e:	e8 9d 63 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0125d33:	29 c3                	sub    %eax,%ebx
f0125d35:	89 d8                	mov    %ebx,%eax
f0125d37:	83 f8 01             	cmp    $0x1,%eax
f0125d3a:	74 17                	je     f0125d53 <test_kfreeall+0x3c5>
f0125d3c:	83 ec 04             	sub    $0x4,%esp
f0125d3f:	68 58 a5 13 f0       	push   $0xf013a558
f0125d44:	68 0d 0a 00 00       	push   $0xa0d
f0125d49:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125d4e:	e8 53 a4 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f0125d53:	c7 85 70 fe ff ff ff 	movl   $0x7ff,-0x190(%ebp)
f0125d5a:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0125d5d:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0125d63:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0125d66:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125d6d:	eb 0e                	jmp    f0125d7d <test_kfreeall+0x3ef>
		{
			ptr[i] = 2 ;
f0125d6f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125d72:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125d75:	01 d0                	add    %edx,%eax
f0125d77:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0125d7a:	ff 45 f4             	incl   -0xc(%ebp)
f0125d7d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0125d83:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125d86:	7f e7                	jg     f0125d6f <test_kfreeall+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0125d88:	e8 43 63 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0125d8d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125d90:	e8 ff de fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0125d95:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0125d98:	83 ec 0c             	sub    $0xc,%esp
f0125d9b:	68 00 08 00 00       	push   $0x800
f0125da0:	e8 3f 16 fe ff       	call   f01073e4 <kmalloc>
f0125da5:	83 c4 10             	add    $0x10,%esp
f0125da8:	89 85 d4 fd ff ff    	mov    %eax,-0x22c(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125dae:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0125db4:	89 c1                	mov    %eax,%ecx
f0125db6:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f0125dbd:	10 00 00 
f0125dc0:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0125dc6:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125dcb:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f0125dd1:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125dd7:	ba 00 00 00 00       	mov    $0x0,%edx
f0125ddc:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f0125de2:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0125de8:	29 d0                	sub    %edx,%eax
f0125dea:	89 c3                	mov    %eax,%ebx
f0125dec:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f0125df3:	10 00 00 
f0125df6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125dfb:	0f b6 d0             	movzbl %al,%edx
f0125dfe:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0125e04:	01 d0                	add    %edx,%eax
f0125e06:	48                   	dec    %eax
f0125e07:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f0125e0d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125e13:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e18:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f0125e1e:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0125e24:	29 d0                	sub    %edx,%eax
f0125e26:	01 c3                	add    %eax,%ebx
f0125e28:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f0125e2f:	10 00 00 
f0125e32:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125e37:	0f b6 c0             	movzbl %al,%eax
f0125e3a:	c1 e0 04             	shl    $0x4,%eax
f0125e3d:	89 c2                	mov    %eax,%edx
f0125e3f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0125e45:	01 d0                	add    %edx,%eax
f0125e47:	48                   	dec    %eax
f0125e48:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f0125e4e:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125e54:	ba 00 00 00 00       	mov    $0x0,%edx
f0125e59:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f0125e5f:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0125e65:	29 d0                	sub    %edx,%eax
f0125e67:	01 d8                	add    %ebx,%eax
f0125e69:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f0125e6e:	39 c1                	cmp    %eax,%ecx
f0125e70:	74 17                	je     f0125e89 <test_kfreeall+0x4fb>
f0125e72:	83 ec 04             	sub    $0x4,%esp
f0125e75:	68 bc a5 13 f0       	push   $0xf013a5bc
f0125e7a:	68 19 0a 00 00       	push   $0xa19
f0125e7f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125e84:	e8 1d a3 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0125e89:	e8 06 de fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0125e8e:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0125e91:	74 17                	je     f0125eaa <test_kfreeall+0x51c>
f0125e93:	83 ec 04             	sub    $0x4,%esp
f0125e96:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0125e9b:	68 1a 0a 00 00       	push   $0xa1a
f0125ea0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125ea5:	e8 fc a2 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0125eaa:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0125ead:	e8 1e 62 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0125eb2:	29 c3                	sub    %eax,%ebx
f0125eb4:	89 d8                	mov    %ebx,%eax
f0125eb6:	83 f8 01             	cmp    $0x1,%eax
f0125eb9:	74 17                	je     f0125ed2 <test_kfreeall+0x544>
f0125ebb:	83 ec 04             	sub    $0x4,%esp
f0125ebe:	68 58 a5 13 f0       	push   $0xf013a558
f0125ec3:	68 1b 0a 00 00       	push   $0xa1b
f0125ec8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0125ecd:	e8 d4 a2 fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0125ed2:	c7 85 74 fe ff ff ff 	movl   $0x7ff,-0x18c(%ebp)
f0125ed9:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0125edc:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f0125ee2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0125ee5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0125eec:	eb 0e                	jmp    f0125efc <test_kfreeall+0x56e>
		{
			ptr[i] = 3 ;
f0125eee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0125ef1:	8b 45 80             	mov    -0x80(%ebp),%eax
f0125ef4:	01 d0                	add    %edx,%eax
f0125ef6:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0125ef9:	ff 45 f4             	incl   -0xc(%ebp)
f0125efc:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0125f02:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0125f05:	7f e7                	jg     f0125eee <test_kfreeall+0x560>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0125f07:	e8 c4 61 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0125f0c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0125f0f:	e8 80 dd fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0125f14:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0125f17:	83 ec 0c             	sub    $0xc,%esp
f0125f1a:	68 00 1c 00 00       	push   $0x1c00
f0125f1f:	e8 c0 14 fe ff       	call   f01073e4 <kmalloc>
f0125f24:	83 c4 10             	add    $0x10,%esp
f0125f27:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0125f2d:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0125f33:	89 c1                	mov    %eax,%ecx
f0125f35:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f0125f3c:	10 00 00 
f0125f3f:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0125f45:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0125f4a:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f0125f50:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125f56:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f5b:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f0125f61:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0125f67:	29 d0                	sub    %edx,%eax
f0125f69:	89 c3                	mov    %eax,%ebx
f0125f6b:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f0125f72:	10 00 00 
f0125f75:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125f7a:	0f b6 d0             	movzbl %al,%edx
f0125f7d:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0125f83:	01 d0                	add    %edx,%eax
f0125f85:	48                   	dec    %eax
f0125f86:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f0125f8c:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125f92:	ba 00 00 00 00       	mov    $0x0,%edx
f0125f97:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f0125f9d:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0125fa3:	29 d0                	sub    %edx,%eax
f0125fa5:	01 c3                	add    %eax,%ebx
f0125fa7:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f0125fae:	10 00 00 
f0125fb1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0125fb6:	0f b6 c0             	movzbl %al,%eax
f0125fb9:	c1 e0 04             	shl    $0x4,%eax
f0125fbc:	89 c2                	mov    %eax,%edx
f0125fbe:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0125fc4:	01 d0                	add    %edx,%eax
f0125fc6:	48                   	dec    %eax
f0125fc7:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f0125fcd:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125fd3:	ba 00 00 00 00       	mov    $0x0,%edx
f0125fd8:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f0125fde:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0125fe4:	29 d0                	sub    %edx,%eax
f0125fe6:	01 d8                	add    %ebx,%eax
f0125fe8:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f0125fed:	39 c1                	cmp    %eax,%ecx
f0125fef:	74 17                	je     f0126008 <test_kfreeall+0x67a>
f0125ff1:	83 ec 04             	sub    $0x4,%esp
f0125ff4:	68 bc a5 13 f0       	push   $0xf013a5bc
f0125ff9:	68 27 0a 00 00       	push   $0xa27
f0125ffe:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126003:	e8 9e a1 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126008:	e8 87 dc fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012600d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126010:	74 17                	je     f0126029 <test_kfreeall+0x69b>
f0126012:	83 ec 04             	sub    $0x4,%esp
f0126015:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012601a:	68 28 0a 00 00       	push   $0xa28
f012601f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126024:	e8 7d a1 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126029:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012602c:	e8 9f 60 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126031:	29 c3                	sub    %eax,%ebx
f0126033:	89 d8                	mov    %ebx,%eax
f0126035:	83 f8 02             	cmp    $0x2,%eax
f0126038:	74 17                	je     f0126051 <test_kfreeall+0x6c3>
f012603a:	83 ec 04             	sub    $0x4,%esp
f012603d:	68 58 a5 13 f0       	push   $0xf013a558
f0126042:	68 29 0a 00 00       	push   $0xa29
f0126047:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012604c:	e8 55 a1 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f0126051:	c7 85 78 fe ff ff ff 	movl   $0x1bff,-0x188(%ebp)
f0126058:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f012605b:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f0126061:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126064:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012606b:	eb 0e                	jmp    f012607b <test_kfreeall+0x6ed>
		{
			ptr[i] = 4 ;
f012606d:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126070:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126073:	01 d0                	add    %edx,%eax
f0126075:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126078:	ff 45 f4             	incl   -0xc(%ebp)
f012607b:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f0126081:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126084:	7f e7                	jg     f012606d <test_kfreeall+0x6df>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0126086:	e8 45 60 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012608b:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012608e:	e8 01 dc fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126093:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0126096:	83 ec 0c             	sub    $0xc,%esp
f0126099:	68 00 fc 2f 00       	push   $0x2ffc00
f012609e:	e8 41 13 fe ff       	call   f01073e4 <kmalloc>
f01260a3:	83 c4 10             	add    $0x10,%esp
f01260a6:	89 85 dc fd ff ff    	mov    %eax,-0x224(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01260ac:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01260b2:	89 c1                	mov    %eax,%ecx
f01260b4:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f01260bb:	10 00 00 
f01260be:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01260c4:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01260c9:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f01260cf:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01260d5:	ba 00 00 00 00       	mov    $0x0,%edx
f01260da:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f01260e0:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f01260e6:	29 d0                	sub    %edx,%eax
f01260e8:	89 c3                	mov    %eax,%ebx
f01260ea:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f01260f1:	10 00 00 
f01260f4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01260f9:	0f b6 d0             	movzbl %al,%edx
f01260fc:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0126102:	01 d0                	add    %edx,%eax
f0126104:	48                   	dec    %eax
f0126105:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012610b:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126111:	ba 00 00 00 00       	mov    $0x0,%edx
f0126116:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012611c:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0126122:	29 d0                	sub    %edx,%eax
f0126124:	01 c3                	add    %eax,%ebx
f0126126:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012612d:	10 00 00 
f0126130:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0126135:	0f b6 c0             	movzbl %al,%eax
f0126138:	c1 e0 04             	shl    $0x4,%eax
f012613b:	89 c2                	mov    %eax,%edx
f012613d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0126143:	01 d0                	add    %edx,%eax
f0126145:	48                   	dec    %eax
f0126146:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012614c:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126152:	ba 00 00 00 00       	mov    $0x0,%edx
f0126157:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012615d:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0126163:	29 d0                	sub    %edx,%eax
f0126165:	01 d8                	add    %ebx,%eax
f0126167:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f012616c:	39 c1                	cmp    %eax,%ecx
f012616e:	74 17                	je     f0126187 <test_kfreeall+0x7f9>
f0126170:	83 ec 04             	sub    $0x4,%esp
f0126173:	68 bc a5 13 f0       	push   $0xf013a5bc
f0126178:	68 35 0a 00 00       	push   $0xa35
f012617d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126182:	e8 1f a0 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126187:	e8 08 db fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012618c:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012618f:	74 17                	je     f01261a8 <test_kfreeall+0x81a>
f0126191:	83 ec 04             	sub    $0x4,%esp
f0126194:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0126199:	68 36 0a 00 00       	push   $0xa36
f012619e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01261a3:	e8 fe 9f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01261a8:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f01261ab:	e8 20 5f fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01261b0:	29 c3                	sub    %eax,%ebx
f01261b2:	89 d8                	mov    %ebx,%eax
f01261b4:	3d 00 03 00 00       	cmp    $0x300,%eax
f01261b9:	74 17                	je     f01261d2 <test_kfreeall+0x844>
f01261bb:	83 ec 04             	sub    $0x4,%esp
f01261be:	68 58 a5 13 f0       	push   $0xf013a558
f01261c3:	68 37 0a 00 00       	push   $0xa37
f01261c8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01261cd:	e8 d4 9f fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f01261d2:	c7 85 7c fe ff ff ff 	movl   $0x2ffbff,-0x184(%ebp)
f01261d9:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f01261dc:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f01261e2:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01261e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01261ec:	eb 0e                	jmp    f01261fc <test_kfreeall+0x86e>
		{
			ptr[i] = 5 ;
f01261ee:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01261f1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01261f4:	01 d0                	add    %edx,%eax
f01261f6:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01261f9:	ff 45 f4             	incl   -0xc(%ebp)
f01261fc:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f0126202:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126205:	7f e7                	jg     f01261ee <test_kfreeall+0x860>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0126207:	e8 c4 5e fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012620c:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012620f:	e8 80 da fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126214:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0126217:	83 ec 0c             	sub    $0xc,%esp
f012621a:	68 00 fc 5f 00       	push   $0x5ffc00
f012621f:	e8 c0 11 fe ff       	call   f01073e4 <kmalloc>
f0126224:	83 c4 10             	add    $0x10,%esp
f0126227:	89 85 e0 fd ff ff    	mov    %eax,-0x220(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012622d:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f0126233:	89 c1                	mov    %eax,%ecx
f0126235:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012623c:	10 00 00 
f012623f:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0126245:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012624a:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f0126250:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126256:	ba 00 00 00 00       	mov    $0x0,%edx
f012625b:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f0126261:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0126267:	29 d0                	sub    %edx,%eax
f0126269:	89 c3                	mov    %eax,%ebx
f012626b:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f0126272:	10 00 00 
f0126275:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012627a:	0f b6 d0             	movzbl %al,%edx
f012627d:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0126283:	01 d0                	add    %edx,%eax
f0126285:	48                   	dec    %eax
f0126286:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012628c:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0126292:	ba 00 00 00 00       	mov    $0x0,%edx
f0126297:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012629d:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01262a3:	29 d0                	sub    %edx,%eax
f01262a5:	01 c3                	add    %eax,%ebx
f01262a7:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f01262ae:	10 00 00 
f01262b1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01262b6:	0f b6 c0             	movzbl %al,%eax
f01262b9:	c1 e0 04             	shl    $0x4,%eax
f01262bc:	89 c2                	mov    %eax,%edx
f01262be:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f01262c4:	01 d0                	add    %edx,%eax
f01262c6:	48                   	dec    %eax
f01262c7:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f01262cd:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01262d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01262d8:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f01262de:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01262e4:	29 d0                	sub    %edx,%eax
f01262e6:	01 d8                	add    %ebx,%eax
f01262e8:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01262ed:	39 c1                	cmp    %eax,%ecx
f01262ef:	74 17                	je     f0126308 <test_kfreeall+0x97a>
f01262f1:	83 ec 04             	sub    $0x4,%esp
f01262f4:	68 bc a5 13 f0       	push   $0xf013a5bc
f01262f9:	68 43 0a 00 00       	push   $0xa43
f01262fe:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126303:	e8 9e 9e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126308:	e8 87 d9 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012630d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126310:	74 17                	je     f0126329 <test_kfreeall+0x99b>
f0126312:	83 ec 04             	sub    $0x4,%esp
f0126315:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012631a:	68 44 0a 00 00       	push   $0xa44
f012631f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126324:	e8 7d 9e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126329:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f012632c:	e8 9f 5d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126331:	29 c3                	sub    %eax,%ebx
f0126333:	89 d8                	mov    %ebx,%eax
f0126335:	3d 00 06 00 00       	cmp    $0x600,%eax
f012633a:	74 17                	je     f0126353 <test_kfreeall+0x9c5>
f012633c:	83 ec 04             	sub    $0x4,%esp
f012633f:	68 58 a5 13 f0       	push   $0xf013a558
f0126344:	68 45 0a 00 00       	push   $0xa45
f0126349:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012634e:	e8 53 9e fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f0126353:	c7 85 80 fe ff ff ff 	movl   $0x5ffbff,-0x180(%ebp)
f012635a:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f012635d:	e8 6e 5d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126362:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126365:	e8 2a d9 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012636a:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f012636d:	83 ec 0c             	sub    $0xc,%esp
f0126370:	68 00 38 00 00       	push   $0x3800
f0126375:	e8 6a 10 fe ff       	call   f01073e4 <kmalloc>
f012637a:	83 c4 10             	add    $0x10,%esp
f012637d:	89 85 e4 fd ff ff    	mov    %eax,-0x21c(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126383:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f0126389:	89 c1                	mov    %eax,%ecx
f012638b:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f0126392:	10 00 00 
f0126395:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012639b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01263a0:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f01263a6:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01263ac:	ba 00 00 00 00       	mov    $0x0,%edx
f01263b1:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f01263b7:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f01263bd:	29 d0                	sub    %edx,%eax
f01263bf:	89 c3                	mov    %eax,%ebx
f01263c1:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f01263c8:	10 00 00 
f01263cb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01263d0:	0f b6 d0             	movzbl %al,%edx
f01263d3:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f01263d9:	01 d0                	add    %edx,%eax
f01263db:	48                   	dec    %eax
f01263dc:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f01263e2:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01263e8:	ba 00 00 00 00       	mov    $0x0,%edx
f01263ed:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f01263f3:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f01263f9:	29 d0                	sub    %edx,%eax
f01263fb:	01 c3                	add    %eax,%ebx
f01263fd:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f0126404:	10 00 00 
f0126407:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012640c:	0f b6 c0             	movzbl %al,%eax
f012640f:	c1 e0 04             	shl    $0x4,%eax
f0126412:	89 c2                	mov    %eax,%edx
f0126414:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012641a:	01 d0                	add    %edx,%eax
f012641c:	48                   	dec    %eax
f012641d:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f0126423:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0126429:	ba 00 00 00 00       	mov    $0x0,%edx
f012642e:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f0126434:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012643a:	29 d0                	sub    %edx,%eax
f012643c:	01 d8                	add    %ebx,%eax
f012643e:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0126443:	39 c1                	cmp    %eax,%ecx
f0126445:	74 17                	je     f012645e <test_kfreeall+0xad0>
f0126447:	83 ec 04             	sub    $0x4,%esp
f012644a:	68 bc a5 13 f0       	push   $0xf013a5bc
f012644f:	68 4c 0a 00 00       	push   $0xa4c
f0126454:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126459:	e8 48 9d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012645e:	e8 31 d8 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126463:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126466:	74 17                	je     f012647f <test_kfreeall+0xaf1>
f0126468:	83 ec 04             	sub    $0x4,%esp
f012646b:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0126470:	68 4d 0a 00 00       	push   $0xa4d
f0126475:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012647a:	e8 27 9d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f012647f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126482:	e8 49 5c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126487:	29 c3                	sub    %eax,%ebx
f0126489:	89 d8                	mov    %ebx,%eax
f012648b:	83 f8 04             	cmp    $0x4,%eax
f012648e:	74 17                	je     f01264a7 <test_kfreeall+0xb19>
f0126490:	83 ec 04             	sub    $0x4,%esp
f0126493:	68 58 a5 13 f0       	push   $0xf013a558
f0126498:	68 4e 0a 00 00       	push   $0xa4e
f012649d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01264a2:	e8 ff 9c fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01264a7:	c7 85 84 fe ff ff ff 	movl   $0x37ff,-0x17c(%ebp)
f01264ae:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f01264b1:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01264b7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01264ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01264c1:	eb 0e                	jmp    f01264d1 <test_kfreeall+0xb43>
		{
			ptr[i] = 7 ;
f01264c3:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01264c6:	8b 45 80             	mov    -0x80(%ebp),%eax
f01264c9:	01 d0                	add    %edx,%eax
f01264cb:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f01264ce:	ff 45 f4             	incl   -0xc(%ebp)
f01264d1:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01264d7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01264da:	7f e7                	jg     f01264c3 <test_kfreeall+0xb35>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f01264dc:	e8 ef 5b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01264e1:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f01264e7:	e8 a8 d7 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01264ec:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[0]);
f01264f2:	8b 85 c8 fd ff ff    	mov    -0x238(%ebp),%eax
f01264f8:	83 ec 0c             	sub    $0xc,%esp
f01264fb:	50                   	push   %eax
f01264fc:	e8 fd 0e fe ff       	call   f01073fe <kfree>
f0126501:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126504:	e8 8b d7 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126509:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012650f:	74 17                	je     f0126528 <test_kfreeall+0xb9a>
f0126511:	83 ec 04             	sub    $0x4,%esp
f0126514:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0126519:	68 5d 0a 00 00       	push   $0xa5d
f012651e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126523:	e8 7e 9c fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0126528:	e8 a3 5b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012652d:	89 c2                	mov    %eax,%edx
f012652f:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0126535:	29 c2                	sub    %eax,%edx
f0126537:	89 d0                	mov    %edx,%eax
f0126539:	3d 00 02 00 00       	cmp    $0x200,%eax
f012653e:	74 17                	je     f0126557 <test_kfreeall+0xbc9>
f0126540:	83 ec 04             	sub    $0x4,%esp
f0126543:	68 60 ac 13 f0       	push   $0xf013ac60
f0126548:	68 5e 0a 00 00       	push   $0xa5e
f012654d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126552:	e8 4f 9c fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f0126557:	e8 74 5b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012655c:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126562:	e8 2d d7 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126567:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[1]);
f012656d:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0126573:	83 ec 0c             	sub    $0xc,%esp
f0126576:	50                   	push   %eax
f0126577:	e8 82 0e fe ff       	call   f01073fe <kfree>
f012657c:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012657f:	e8 10 d7 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126584:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f012658a:	74 17                	je     f01265a3 <test_kfreeall+0xc15>
f012658c:	83 ec 04             	sub    $0x4,%esp
f012658f:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0126594:	68 64 0a 00 00       	push   $0xa64
f0126599:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012659e:	e8 03 9c fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01265a3:	e8 28 5b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01265a8:	89 c2                	mov    %eax,%edx
f01265aa:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f01265b0:	29 c2                	sub    %eax,%edx
f01265b2:	89 d0                	mov    %edx,%eax
f01265b4:	3d 00 02 00 00       	cmp    $0x200,%eax
f01265b9:	74 17                	je     f01265d2 <test_kfreeall+0xc44>
f01265bb:	83 ec 04             	sub    $0x4,%esp
f01265be:	68 60 ac 13 f0       	push   $0xf013ac60
f01265c3:	68 65 0a 00 00       	push   $0xa65
f01265c8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01265cd:	e8 d4 9b fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f01265d2:	e8 f9 5a fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01265d7:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01265dd:	e8 b2 d6 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01265e2:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
		kfree(ptr_allocations[6]);
f01265e8:	8b 85 e0 fd ff ff    	mov    -0x220(%ebp),%eax
f01265ee:	83 ec 0c             	sub    $0xc,%esp
f01265f1:	50                   	push   %eax
f01265f2:	e8 07 0e fe ff       	call   f01073fe <kfree>
f01265f7:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01265fa:	e8 95 d6 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01265ff:	3b 85 00 ff ff ff    	cmp    -0x100(%ebp),%eax
f0126605:	74 17                	je     f012661e <test_kfreeall+0xc90>
f0126607:	83 ec 04             	sub    $0x4,%esp
f012660a:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012660f:	68 6b 0a 00 00       	push   $0xa6b
f0126614:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126619:	e8 88 9b fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012661e:	e8 ad 5a fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126623:	89 c2                	mov    %eax,%edx
f0126625:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012662b:	29 c2                	sub    %eax,%edx
f012662d:	89 d0                	mov    %edx,%eax
f012662f:	3d 00 06 00 00       	cmp    $0x600,%eax
f0126634:	74 17                	je     f012664d <test_kfreeall+0xcbf>
f0126636:	83 ec 04             	sub    $0x4,%esp
f0126639:	68 60 ac 13 f0       	push   $0xf013ac60
f012663e:	68 6c 0a 00 00       	push   $0xa6c
f0126643:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126648:	e8 59 9b fd ff       	call   f01001a6 <_panic>


	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012664d:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126653:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f0126656:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012665d:	eb 1e                	jmp    f012667d <test_kfreeall+0xcef>
		{
			sums[2] += ptr[i] ;
f012665f:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0126665:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126668:	8b 45 80             	mov    -0x80(%ebp),%eax
f012666b:	01 c8                	add    %ecx,%eax
f012666d:	8a 00                	mov    (%eax),%al
f012666f:	0f be c0             	movsbl %al,%eax
f0126672:	01 d0                	add    %edx,%eax
f0126674:	89 85 20 fe ff ff    	mov    %eax,-0x1e0(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f012667a:	ff 45 f4             	incl   -0xc(%ebp)
f012667d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126683:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126686:	7f d7                	jg     f012665f <test_kfreeall+0xcd1>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f0126688:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f012668e:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0126694:	01 c0                	add    %eax,%eax
f0126696:	39 c2                	cmp    %eax,%edx
f0126698:	74 17                	je     f01266b1 <test_kfreeall+0xd23>
f012669a:	83 ec 04             	sub    $0x4,%esp
f012669d:	68 bc ac 13 f0       	push   $0xf013acbc
f01266a2:	68 78 0a 00 00       	push   $0xa78
f01266a7:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01266ac:	e8 f5 9a fd ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f01266b1:	8b 85 d4 fd ff ff    	mov    -0x22c(%ebp),%eax
f01266b7:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01266ba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01266c1:	eb 1e                	jmp    f01266e1 <test_kfreeall+0xd53>
		{
			sums[3] += ptr[i] ;
f01266c3:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01266c9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01266cc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01266cf:	01 c8                	add    %ecx,%eax
f01266d1:	8a 00                	mov    (%eax),%al
f01266d3:	0f be c0             	movsbl %al,%eax
f01266d6:	01 d0                	add    %edx,%eax
f01266d8:	89 85 24 fe ff ff    	mov    %eax,-0x1dc(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01266de:	ff 45 f4             	incl   -0xc(%ebp)
f01266e1:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01266e7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01266ea:	7f d7                	jg     f01266c3 <test_kfreeall+0xd35>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f01266ec:	8b 95 24 fe ff ff    	mov    -0x1dc(%ebp),%edx
f01266f2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f01266f8:	89 c1                	mov    %eax,%ecx
f01266fa:	01 c9                	add    %ecx,%ecx
f01266fc:	01 c8                	add    %ecx,%eax
f01266fe:	39 c2                	cmp    %eax,%edx
f0126700:	74 17                	je     f0126719 <test_kfreeall+0xd8b>
f0126702:	83 ec 04             	sub    $0x4,%esp
f0126705:	68 bc ac 13 f0       	push   $0xf013acbc
f012670a:	68 80 0a 00 00       	push   $0xa80
f012670f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126714:	e8 8d 9a fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0126719:	8b 85 d8 fd ff ff    	mov    -0x228(%ebp),%eax
f012671f:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0126722:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126729:	eb 1e                	jmp    f0126749 <test_kfreeall+0xdbb>
		{
			sums[4] += ptr[i] ;
f012672b:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0126731:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126734:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126737:	01 c8                	add    %ecx,%eax
f0126739:	8a 00                	mov    (%eax),%al
f012673b:	0f be c0             	movsbl %al,%eax
f012673e:	01 d0                	add    %edx,%eax
f0126740:	89 85 28 fe ff ff    	mov    %eax,-0x1d8(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0126746:	ff 45 f4             	incl   -0xc(%ebp)
f0126749:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012674f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126752:	7f d7                	jg     f012672b <test_kfreeall+0xd9d>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0126754:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f012675a:	8b 95 78 fe ff ff    	mov    -0x188(%ebp),%edx
f0126760:	c1 e2 02             	shl    $0x2,%edx
f0126763:	39 d0                	cmp    %edx,%eax
f0126765:	74 17                	je     f012677e <test_kfreeall+0xdf0>
f0126767:	83 ec 04             	sub    $0x4,%esp
f012676a:	68 bc ac 13 f0       	push   $0xf013acbc
f012676f:	68 88 0a 00 00       	push   $0xa88
f0126774:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126779:	e8 28 9a fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f012677e:	8b 85 dc fd ff ff    	mov    -0x224(%ebp),%eax
f0126784:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0126787:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012678e:	eb 1e                	jmp    f01267ae <test_kfreeall+0xe20>
		{
			sums[5] += ptr[i] ;
f0126790:	8b 95 2c fe ff ff    	mov    -0x1d4(%ebp),%edx
f0126796:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126799:	8b 45 80             	mov    -0x80(%ebp),%eax
f012679c:	01 c8                	add    %ecx,%eax
f012679e:	8a 00                	mov    (%eax),%al
f01267a0:	0f be c0             	movsbl %al,%eax
f01267a3:	01 d0                	add    %edx,%eax
f01267a5:	89 85 2c fe ff ff    	mov    %eax,-0x1d4(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01267ab:	ff 45 f4             	incl   -0xc(%ebp)
f01267ae:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01267b4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01267b7:	7f d7                	jg     f0126790 <test_kfreeall+0xe02>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f01267b9:	8b 8d 2c fe ff ff    	mov    -0x1d4(%ebp),%ecx
f01267bf:	8b 95 7c fe ff ff    	mov    -0x184(%ebp),%edx
f01267c5:	89 d0                	mov    %edx,%eax
f01267c7:	c1 e0 02             	shl    $0x2,%eax
f01267ca:	01 d0                	add    %edx,%eax
f01267cc:	39 c1                	cmp    %eax,%ecx
f01267ce:	74 17                	je     f01267e7 <test_kfreeall+0xe59>
f01267d0:	83 ec 04             	sub    $0x4,%esp
f01267d3:	68 bc ac 13 f0       	push   $0xf013acbc
f01267d8:	68 90 0a 00 00       	push   $0xa90
f01267dd:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01267e2:	e8 bf 99 fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f01267e7:	8b 85 e4 fd ff ff    	mov    -0x21c(%ebp),%eax
f01267ed:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f01267f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01267f7:	eb 1e                	jmp    f0126817 <test_kfreeall+0xe89>
		{
			sums[7] += ptr[i] ;
f01267f9:	8b 95 34 fe ff ff    	mov    -0x1cc(%ebp),%edx
f01267ff:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0126802:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126805:	01 c8                	add    %ecx,%eax
f0126807:	8a 00                	mov    (%eax),%al
f0126809:	0f be c0             	movsbl %al,%eax
f012680c:	01 d0                	add    %edx,%eax
f012680e:	89 85 34 fe ff ff    	mov    %eax,-0x1cc(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0126814:	ff 45 f4             	incl   -0xc(%ebp)
f0126817:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012681d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126820:	7f d7                	jg     f01267f9 <test_kfreeall+0xe6b>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0126822:	8b 8d 34 fe ff ff    	mov    -0x1cc(%ebp),%ecx
f0126828:	8b 95 84 fe ff ff    	mov    -0x17c(%ebp),%edx
f012682e:	89 d0                	mov    %edx,%eax
f0126830:	01 c0                	add    %eax,%eax
f0126832:	01 d0                	add    %edx,%eax
f0126834:	01 c0                	add    %eax,%eax
f0126836:	01 d0                	add    %edx,%eax
f0126838:	39 c1                	cmp    %eax,%ecx
f012683a:	74 17                	je     f0126853 <test_kfreeall+0xec5>
f012683c:	83 ec 04             	sub    $0x4,%esp
f012683f:	68 bc ac 13 f0       	push   $0xf013acbc
f0126844:	68 98 0a 00 00       	push   $0xa98
f0126849:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012684e:	e8 53 99 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0126853:	e8 78 58 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126858:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012685b:	e8 34 d4 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126860:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0126863:	83 ec 0c             	sub    $0xc,%esp
f0126866:	68 00 50 00 00       	push   $0x5000
f012686b:	e8 74 0b fe ff       	call   f01073e4 <kmalloc>
f0126870:	83 c4 10             	add    $0x10,%esp
f0126873:	89 85 e8 fd ff ff    	mov    %eax,-0x218(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0126879:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f012687f:	89 c1                	mov    %eax,%ecx
f0126881:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f0126888:	10 00 00 
f012688b:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0126891:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126896:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012689c:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01268a2:	ba 00 00 00 00       	mov    $0x0,%edx
f01268a7:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f01268ad:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f01268b3:	29 d0                	sub    %edx,%eax
f01268b5:	89 c3                	mov    %eax,%ebx
f01268b7:	c7 85 f4 fe ff ff 00 	movl   $0x1000,-0x10c(%ebp)
f01268be:	10 00 00 
f01268c1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01268c6:	0f b6 d0             	movzbl %al,%edx
f01268c9:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f01268cf:	01 d0                	add    %edx,%eax
f01268d1:	48                   	dec    %eax
f01268d2:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
f01268d8:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01268de:	ba 00 00 00 00       	mov    $0x0,%edx
f01268e3:	f7 b5 f4 fe ff ff    	divl   -0x10c(%ebp)
f01268e9:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f01268ef:	29 d0                	sub    %edx,%eax
f01268f1:	01 c3                	add    %eax,%ebx
f01268f3:	c7 85 ec fe ff ff 00 	movl   $0x1000,-0x114(%ebp)
f01268fa:	10 00 00 
f01268fd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0126902:	0f b6 c0             	movzbl %al,%eax
f0126905:	c1 e0 04             	shl    $0x4,%eax
f0126908:	89 c2                	mov    %eax,%edx
f012690a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0126910:	01 d0                	add    %edx,%eax
f0126912:	48                   	dec    %eax
f0126913:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
f0126919:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012691f:	ba 00 00 00 00       	mov    $0x0,%edx
f0126924:	f7 b5 ec fe ff ff    	divl   -0x114(%ebp)
f012692a:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0126930:	29 d0                	sub    %edx,%eax
f0126932:	01 d8                	add    %ebx,%eax
f0126934:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0126939:	39 c1                	cmp    %eax,%ecx
f012693b:	74 17                	je     f0126954 <test_kfreeall+0xfc6>
f012693d:	83 ec 04             	sub    $0x4,%esp
f0126940:	68 bc a5 13 f0       	push   $0xf013a5bc
f0126945:	68 a1 0a 00 00       	push   $0xaa1
f012694a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012694f:	e8 52 98 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126954:	e8 3b d3 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126959:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f012695c:	74 17                	je     f0126975 <test_kfreeall+0xfe7>
f012695e:	83 ec 04             	sub    $0x4,%esp
f0126961:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0126966:	68 a2 0a 00 00       	push   $0xaa2
f012696b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126970:	e8 31 98 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126975:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126978:	e8 53 57 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012697d:	29 c3                	sub    %eax,%ebx
f012697f:	89 d8                	mov    %ebx,%eax
f0126981:	83 f8 05             	cmp    $0x5,%eax
f0126984:	74 17                	je     f012699d <test_kfreeall+0x100f>
f0126986:	83 ec 04             	sub    $0x4,%esp
f0126989:	68 58 a5 13 f0       	push   $0xf013a558
f012698e:	68 a3 0a 00 00       	push   $0xaa3
f0126993:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126998:	e8 09 98 fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f012699d:	c7 85 88 fe ff ff ff 	movl   $0x4fff,-0x178(%ebp)
f01269a4:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f01269a7:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f01269ad:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f01269b0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01269b7:	eb 0e                	jmp    f01269c7 <test_kfreeall+0x1039>
		{
			ptr[i] = 8 ;
f01269b9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01269bc:	8b 45 80             	mov    -0x80(%ebp),%eax
f01269bf:	01 d0                	add    %edx,%eax
f01269c1:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f01269c4:	ff 45 f4             	incl   -0xc(%ebp)
f01269c7:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f01269cd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01269d0:	7f e7                	jg     f01269b9 <test_kfreeall+0x102b>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f01269d2:	e8 f9 56 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01269d7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01269da:	e8 b5 d2 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01269df:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f01269e2:	83 ec 0c             	sub    $0xc,%esp
f01269e5:	68 00 00 10 00       	push   $0x100000
f01269ea:	e8 f5 09 fe ff       	call   f01073e4 <kmalloc>
f01269ef:	83 c4 10             	add    $0x10,%esp
f01269f2:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01269f8:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f01269fe:	89 c1                	mov    %eax,%ecx
f0126a00:	c7 85 e4 fe ff ff 00 	movl   $0x1000,-0x11c(%ebp)
f0126a07:	10 00 00 
f0126a0a:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0126a10:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126a15:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
f0126a1b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126a21:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a26:	f7 b5 e4 fe ff ff    	divl   -0x11c(%ebp)
f0126a2c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0126a32:	29 d0                	sub    %edx,%eax
f0126a34:	89 c3                	mov    %eax,%ebx
f0126a36:	c7 85 dc fe ff ff 00 	movl   $0x1000,-0x124(%ebp)
f0126a3d:	10 00 00 
f0126a40:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0126a45:	0f b6 d0             	movzbl %al,%edx
f0126a48:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0126a4e:	01 d0                	add    %edx,%eax
f0126a50:	48                   	dec    %eax
f0126a51:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
f0126a57:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126a5d:	ba 00 00 00 00       	mov    $0x0,%edx
f0126a62:	f7 b5 dc fe ff ff    	divl   -0x124(%ebp)
f0126a68:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0126a6e:	29 d0                	sub    %edx,%eax
f0126a70:	01 c3                	add    %eax,%ebx
f0126a72:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f0126a79:	10 00 00 
f0126a7c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0126a81:	0f b6 c0             	movzbl %al,%eax
f0126a84:	c1 e0 04             	shl    $0x4,%eax
f0126a87:	89 c2                	mov    %eax,%edx
f0126a89:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0126a8f:	01 d0                	add    %edx,%eax
f0126a91:	48                   	dec    %eax
f0126a92:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f0126a98:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126a9e:	ba 00 00 00 00       	mov    $0x0,%edx
f0126aa3:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f0126aa9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0126aaf:	29 d0                	sub    %edx,%eax
f0126ab1:	01 d8                	add    %ebx,%eax
f0126ab3:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0126ab8:	39 c1                	cmp    %eax,%ecx
f0126aba:	74 17                	je     f0126ad3 <test_kfreeall+0x1145>
f0126abc:	83 ec 04             	sub    $0x4,%esp
f0126abf:	68 bc a5 13 f0       	push   $0xf013a5bc
f0126ac4:	68 af 0a 00 00       	push   $0xaaf
f0126ac9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126ace:	e8 d3 96 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126ad3:	e8 bc d1 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126ad8:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126adb:	74 17                	je     f0126af4 <test_kfreeall+0x1166>
f0126add:	83 ec 04             	sub    $0x4,%esp
f0126ae0:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0126ae5:	68 b0 0a 00 00       	push   $0xab0
f0126aea:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126aef:	e8 b2 96 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126af4:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126af7:	e8 d4 55 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126afc:	29 c3                	sub    %eax,%ebx
f0126afe:	89 d8                	mov    %ebx,%eax
f0126b00:	3d 00 01 00 00       	cmp    $0x100,%eax
f0126b05:	74 17                	je     f0126b1e <test_kfreeall+0x1190>
f0126b07:	83 ec 04             	sub    $0x4,%esp
f0126b0a:	68 58 a5 13 f0       	push   $0xf013a558
f0126b0f:	68 b1 0a 00 00       	push   $0xab1
f0126b14:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126b19:	e8 88 96 fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0126b1e:	c7 85 8c fe ff ff ff 	movl   $0xfffff,-0x174(%ebp)
f0126b25:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0126b28:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126b2e:	89 45 80             	mov    %eax,-0x80(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0126b31:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126b38:	eb 0e                	jmp    f0126b48 <test_kfreeall+0x11ba>
		{
			ptr[i] = 9 ;
f0126b3a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0126b3d:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126b40:	01 d0                	add    %edx,%eax
f0126b42:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0126b45:	ff 45 f4             	incl   -0xc(%ebp)
f0126b48:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f0126b4e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0126b51:	7f e7                	jg     f0126b3a <test_kfreeall+0x11ac>
		}
	}

	//kfree entire kernel heap
	{
		freeFrames = sys_calculate_free_frames() ;
f0126b53:	e8 78 55 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126b58:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126b5b:	e8 34 d1 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126b60:	89 45 cc             	mov    %eax,-0x34(%ebp)

		kfreeall();
f0126b63:	e8 e4 08 fe ff       	call   f010744c <kfreeall>

		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126b68:	e8 27 d1 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126b6d:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126b70:	74 17                	je     f0126b89 <test_kfreeall+0x11fb>
f0126b72:	83 ec 04             	sub    $0x4,%esp
f0126b75:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0126b7a:	68 c1 0a 00 00       	push   $0xac1
f0126b7f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126b84:	e8 1d 96 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != (INITIAL_KHEAP_ALLOCATIONS)/PAGE_SIZE+ 2 + 3*Mega/4096 + 1 + 1 + 4 + 5 + 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0126b89:	e8 42 55 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126b8e:	89 c2                	mov    %eax,%edx
f0126b90:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126b93:	89 d1                	mov    %edx,%ecx
f0126b95:	29 c1                	sub    %eax,%ecx
f0126b97:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f0126b9e:	10 00 00 
f0126ba1:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0126ba7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0126bac:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f0126bb2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126bb8:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bbd:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f0126bc3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0126bc9:	29 d0                	sub    %edx,%eax
f0126bcb:	89 c3                	mov    %eax,%ebx
f0126bcd:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f0126bd4:	10 00 00 
f0126bd7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0126bdc:	0f b6 d0             	movzbl %al,%edx
f0126bdf:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0126be5:	01 d0                	add    %edx,%eax
f0126be7:	48                   	dec    %eax
f0126be8:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f0126bee:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126bf4:	ba 00 00 00 00       	mov    $0x0,%edx
f0126bf9:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f0126bff:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0126c05:	29 d0                	sub    %edx,%eax
f0126c07:	01 c3                	add    %eax,%ebx
f0126c09:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f0126c10:	10 00 00 
f0126c13:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0126c18:	0f b6 c0             	movzbl %al,%eax
f0126c1b:	c1 e0 04             	shl    $0x4,%eax
f0126c1e:	89 c2                	mov    %eax,%edx
f0126c20:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0126c26:	01 d0                	add    %edx,%eax
f0126c28:	48                   	dec    %eax
f0126c29:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f0126c2f:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0126c35:	ba 00 00 00 00       	mov    $0x0,%edx
f0126c3a:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f0126c40:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0126c46:	29 d0                	sub    %edx,%eax
f0126c48:	01 d8                	add    %ebx,%eax
f0126c4a:	05 00 40 00 00       	add    $0x4000,%eax
f0126c4f:	c1 e8 0c             	shr    $0xc,%eax
f0126c52:	05 0d 04 00 00       	add    $0x40d,%eax
f0126c57:	39 c1                	cmp    %eax,%ecx
f0126c59:	74 17                	je     f0126c72 <test_kfreeall+0x12e4>
f0126c5b:	83 ec 04             	sub    $0x4,%esp
f0126c5e:	68 60 ac 13 f0       	push   $0xf013ac60
f0126c63:	68 c2 0a 00 00       	push   $0xac2
f0126c68:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126c6d:	e8 34 95 fd ff       	call   f01001a6 <_panic>

	//Check memory access after kfreeall
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f0126c72:	83 ec 0c             	sub    $0xc,%esp
f0126c75:	6a 03                	push   $0x3
f0126c77:	e8 fd 58 fe ff       	call   f010c579 <sys_bypassPageFault>
f0126c7c:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 10; ++i)
f0126c7f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0126c86:	e9 82 00 00 00       	jmp    f0126d0d <test_kfreeall+0x137f>
		{
			ptr = (char *) ptr_allocations[i];
f0126c8b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126c8e:	8b 84 85 c8 fd ff ff 	mov    -0x238(%ebp,%eax,4),%eax
f0126c95:	89 45 80             	mov    %eax,-0x80(%ebp)
			ptr[0] = 10;
f0126c98:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126c9b:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0126c9e:	e8 c4 58 fe ff       	call   f010c567 <sys_rcr2>
f0126ca3:	89 c2                	mov    %eax,%edx
f0126ca5:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126ca8:	39 c2                	cmp    %eax,%edx
f0126caa:	74 17                	je     f0126cc3 <test_kfreeall+0x1335>
f0126cac:	83 ec 04             	sub    $0x4,%esp
f0126caf:	68 3c ad 13 f0       	push   $0xf013ad3c
f0126cb4:	68 d0 0a 00 00       	push   $0xad0
f0126cb9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126cbe:	e8 e3 94 fd ff       	call   f01001a6 <_panic>
			ptr[lastIndices[i]] = 10;
f0126cc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126cc6:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0126ccd:	89 c2                	mov    %eax,%edx
f0126ccf:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126cd2:	01 d0                	add    %edx,%eax
f0126cd4:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
f0126cd7:	e8 8b 58 fe ff       	call   f010c567 <sys_rcr2>
f0126cdc:	89 c2                	mov    %eax,%edx
f0126cde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0126ce1:	8b 84 85 68 fe ff ff 	mov    -0x198(%ebp,%eax,4),%eax
f0126ce8:	89 c1                	mov    %eax,%ecx
f0126cea:	8b 45 80             	mov    -0x80(%ebp),%eax
f0126ced:	01 c8                	add    %ecx,%eax
f0126cef:	39 c2                	cmp    %eax,%edx
f0126cf1:	74 17                	je     f0126d0a <test_kfreeall+0x137c>
f0126cf3:	83 ec 04             	sub    $0x4,%esp
f0126cf6:	68 3c ad 13 f0       	push   $0xf013ad3c
f0126cfb:	68 d2 0a 00 00       	push   $0xad2
f0126d00:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126d05:	e8 9c 94 fd ff       	call   f01001a6 <_panic>
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 10; ++i)
f0126d0a:	ff 45 f4             	incl   -0xc(%ebp)
f0126d0d:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
f0126d11:	0f 8e 74 ff ff ff    	jle    f0126c8b <test_kfreeall+0x12fd>
			if (sys_rcr2() != (uint32)&(ptr[0])) panic("kfree: successful access to freed space!! it should not be succeeded");
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) panic("kfree: successful access to freed space!! it should not be succeeded");
		}
		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0126d17:	83 ec 0c             	sub    $0xc,%esp
f0126d1a:	6a 00                	push   $0x0
f0126d1c:	e8 58 58 fe ff       	call   f010c579 <sys_bypassPageFault>
f0126d21:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfreeall
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0126d24:	e8 a7 53 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126d29:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126d2c:	e8 63 cf fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126d31:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[10] = kmalloc(4*Mega);
f0126d34:	83 ec 0c             	sub    $0xc,%esp
f0126d37:	68 00 00 40 00       	push   $0x400000
f0126d3c:	e8 a3 06 fe ff       	call   f01073e4 <kmalloc>
f0126d41:	83 c4 10             	add    $0x10,%esp
f0126d44:	89 85 f0 fd ff ff    	mov    %eax,-0x210(%ebp)
		if ((uint32) ptr_allocations[10] != (KERNEL_HEAP_START)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0126d4a:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f0126d50:	3d 00 00 00 f6       	cmp    $0xf6000000,%eax
f0126d55:	74 17                	je     f0126d6e <test_kfreeall+0x13e0>
f0126d57:	83 ec 04             	sub    $0x4,%esp
f0126d5a:	68 e0 b1 13 f0       	push   $0xf013b1e0
f0126d5f:	68 de 0a 00 00       	push   $0xade
f0126d64:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126d69:	e8 38 94 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126d6e:	e8 21 cf fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126d73:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126d76:	74 17                	je     f0126d8f <test_kfreeall+0x1401>
f0126d78:	83 ec 04             	sub    $0x4,%esp
f0126d7b:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0126d80:	68 df 0a 00 00       	push   $0xadf
f0126d85:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126d8a:	e8 17 94 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126d8f:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126d92:	e8 39 53 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126d97:	29 c3                	sub    %eax,%ebx
f0126d99:	89 d8                	mov    %ebx,%eax
f0126d9b:	3d 00 04 00 00       	cmp    $0x400,%eax
f0126da0:	74 17                	je     f0126db9 <test_kfreeall+0x142b>
f0126da2:	83 ec 04             	sub    $0x4,%esp
f0126da5:	68 58 a5 13 f0       	push   $0xf013a558
f0126daa:	68 e0 0a 00 00       	push   $0xae0
f0126daf:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126db4:	e8 ed 93 fd ff       	call   f01001a6 <_panic>

		//12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126db9:	e8 12 53 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126dbe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126dc1:	e8 ce ce fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126dc6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		ptr_allocations[11] = kmalloc(12*kilo);
f0126dc9:	83 ec 0c             	sub    $0xc,%esp
f0126dcc:	68 00 30 00 00       	push   $0x3000
f0126dd1:	e8 0e 06 fe ff       	call   f01073e4 <kmalloc>
f0126dd6:	83 c4 10             	add    $0x10,%esp
f0126dd9:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		if ((uint32) ptr_allocations[11] != (KERNEL_HEAP_START + 4*Mega)) panic("Wrong start address after kfreeall()... check return address updating of heap ptr");
f0126ddf:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0126de5:	3d 00 00 40 f6       	cmp    $0xf6400000,%eax
f0126dea:	74 17                	je     f0126e03 <test_kfreeall+0x1475>
f0126dec:	83 ec 04             	sub    $0x4,%esp
f0126def:	68 e0 b1 13 f0       	push   $0xf013b1e0
f0126df4:	68 e6 0a 00 00       	push   $0xae6
f0126df9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126dfe:	e8 a3 93 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e03:	e8 8c ce fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126e08:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126e0b:	74 17                	je     f0126e24 <test_kfreeall+0x1496>
f0126e0d:	83 ec 04             	sub    $0x4,%esp
f0126e10:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0126e15:	68 e7 0a 00 00       	push   $0xae7
f0126e1a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126e1f:	e8 82 93 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 3) panic("Wrong allocation: pages are not loaded successfully into memory");
f0126e24:	8b 5d d0             	mov    -0x30(%ebp),%ebx
f0126e27:	e8 a4 52 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126e2c:	29 c3                	sub    %eax,%ebx
f0126e2e:	89 d8                	mov    %ebx,%eax
f0126e30:	83 f8 03             	cmp    $0x3,%eax
f0126e33:	74 17                	je     f0126e4c <test_kfreeall+0x14be>
f0126e35:	83 ec 04             	sub    $0x4,%esp
f0126e38:	68 58 a5 13 f0       	push   $0xf013a558
f0126e3d:	68 e8 0a 00 00       	push   $0xae8
f0126e42:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126e47:	e8 5a 93 fd ff       	call   f01001a6 <_panic>
	}

	//kfree one of the newly allocated space
	{
		//kfree 12 KB
		freeFrames = sys_calculate_free_frames() ;
f0126e4c:	e8 7f 52 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126e51:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126e54:	e8 3b ce fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126e59:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[11]);
f0126e5c:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f0126e62:	83 ec 0c             	sub    $0xc,%esp
f0126e65:	50                   	push   %eax
f0126e66:	e8 93 05 fe ff       	call   f01073fe <kfree>
f0126e6b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126e6e:	e8 21 ce fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126e73:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126e76:	74 17                	je     f0126e8f <test_kfreeall+0x1501>
f0126e78:	83 ec 04             	sub    $0x4,%esp
f0126e7b:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0126e80:	68 f2 0a 00 00       	push   $0xaf2
f0126e85:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126e8a:	e8 17 93 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 3) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126e8f:	e8 3c 52 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126e94:	89 c2                	mov    %eax,%edx
f0126e96:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126e99:	29 c2                	sub    %eax,%edx
f0126e9b:	89 d0                	mov    %edx,%eax
f0126e9d:	83 f8 03             	cmp    $0x3,%eax
f0126ea0:	74 17                	je     f0126eb9 <test_kfreeall+0x152b>
f0126ea2:	83 ec 04             	sub    $0x4,%esp
f0126ea5:	68 88 ad 13 f0       	push   $0xf013ad88
f0126eaa:	68 f3 0a 00 00       	push   $0xaf3
f0126eaf:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126eb4:	e8 ed 92 fd ff       	call   f01001a6 <_panic>
	}

	//kfree non-exist item
	{
		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f0126eb9:	e8 12 52 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126ebe:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126ec1:	e8 ce cd fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126ec6:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[2]);
f0126ec9:	8b 85 d0 fd ff ff    	mov    -0x230(%ebp),%eax
f0126ecf:	83 ec 0c             	sub    $0xc,%esp
f0126ed2:	50                   	push   %eax
f0126ed3:	e8 26 05 fe ff       	call   f01073fe <kfree>
f0126ed8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126edb:	e8 b4 cd fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126ee0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126ee3:	74 17                	je     f0126efc <test_kfreeall+0x156e>
f0126ee5:	83 ec 04             	sub    $0x4,%esp
f0126ee8:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0126eed:	68 fc 0a 00 00       	push   $0xafc
f0126ef2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126ef7:	e8 aa 92 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126efc:	e8 cf 51 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126f01:	89 c2                	mov    %eax,%edx
f0126f03:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126f06:	39 c2                	cmp    %eax,%edx
f0126f08:	74 17                	je     f0126f21 <test_kfreeall+0x1593>
f0126f0a:	83 ec 04             	sub    $0x4,%esp
f0126f0d:	68 88 ad 13 f0       	push   $0xf013ad88
f0126f12:	68 fd 0a 00 00       	push   $0xafd
f0126f17:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126f1c:	e8 85 92 fd ff       	call   f01001a6 <_panic>

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f0126f21:	e8 aa 51 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126f26:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f29:	e8 66 cd fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126f2e:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[8]);
f0126f31:	8b 85 e8 fd ff ff    	mov    -0x218(%ebp),%eax
f0126f37:	83 ec 0c             	sub    $0xc,%esp
f0126f3a:	50                   	push   %eax
f0126f3b:	e8 be 04 fe ff       	call   f01073fe <kfree>
f0126f40:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126f43:	e8 4c cd fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126f48:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126f4b:	74 17                	je     f0126f64 <test_kfreeall+0x15d6>
f0126f4d:	83 ec 04             	sub    $0x4,%esp
f0126f50:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0126f55:	68 03 0b 00 00       	push   $0xb03
f0126f5a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126f5f:	e8 42 92 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126f64:	e8 67 51 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126f69:	89 c2                	mov    %eax,%edx
f0126f6b:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126f6e:	39 c2                	cmp    %eax,%edx
f0126f70:	74 17                	je     f0126f89 <test_kfreeall+0x15fb>
f0126f72:	83 ec 04             	sub    $0x4,%esp
f0126f75:	68 88 ad 13 f0       	push   $0xf013ad88
f0126f7a:	68 04 0b 00 00       	push   $0xb04
f0126f7f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126f84:	e8 1d 92 fd ff       	call   f01001a6 <_panic>

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0126f89:	e8 42 51 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126f8e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0126f91:	e8 fe cc fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126f96:	89 45 cc             	mov    %eax,-0x34(%ebp)
		kfree(ptr_allocations[9]);
f0126f99:	8b 85 ec fd ff ff    	mov    -0x214(%ebp),%eax
f0126f9f:	83 ec 0c             	sub    $0xc,%esp
f0126fa2:	50                   	push   %eax
f0126fa3:	e8 56 04 fe ff       	call   f01073fe <kfree>
f0126fa8:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0126fab:	e8 e4 cc fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0126fb0:	3b 45 cc             	cmp    -0x34(%ebp),%eax
f0126fb3:	74 17                	je     f0126fcc <test_kfreeall+0x163e>
f0126fb5:	83 ec 04             	sub    $0x4,%esp
f0126fb8:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0126fbd:	68 0a 0b 00 00       	push   $0xb0a
f0126fc2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126fc7:	e8 da 91 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 0) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0126fcc:	e8 ff 50 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0126fd1:	89 c2                	mov    %eax,%edx
f0126fd3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0126fd6:	39 c2                	cmp    %eax,%edx
f0126fd8:	74 17                	je     f0126ff1 <test_kfreeall+0x1663>
f0126fda:	83 ec 04             	sub    $0x4,%esp
f0126fdd:	68 88 ad 13 f0       	push   $0xf013ad88
f0126fe2:	68 0b 0b 00 00       	push   $0xb0b
f0126fe7:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0126fec:	e8 b5 91 fd ff       	call   f01001a6 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f0126ff1:	c7 45 e8 00 00 00 f6 	movl   $0xf6000000,-0x18(%ebp)
f0126ff8:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f0126fff:	eb 48                	jmp    f0127049 <test_kfreeall+0x16bb>
		{
			uint32 *ptr_table ;
			get_page_table(ptr_page_directory, (uint32)va, &ptr_table);
f0127001:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0127004:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f0127009:	83 ec 04             	sub    $0x4,%esp
f012700c:	8d 8d c4 fd ff ff    	lea    -0x23c(%ebp),%ecx
f0127012:	51                   	push   %ecx
f0127013:	52                   	push   %edx
f0127014:	50                   	push   %eax
f0127015:	e8 57 f9 fd ff       	call   f0106971 <get_page_table>
f012701a:	83 c4 10             	add    $0x10,%esp
			if (ptr_table == NULL)
f012701d:	8b 85 c4 fd ff ff    	mov    -0x23c(%ebp),%eax
f0127023:	85 c0                	test   %eax,%eax
f0127025:	75 17                	jne    f012703e <test_kfreeall+0x16b0>
			{
				panic("Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
f0127027:	83 ec 04             	sub    $0x4,%esp
f012702a:	68 d8 ad 13 f0       	push   $0xf013add8
f012702f:	68 18 0b 00 00       	push   $0xb18
f0127034:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127039:	e8 68 91 fd ff       	call   f01001a6 <_panic>
	}

	//check tables
	{
		long long va;
		for (va = KERNEL_HEAP_START; va < (long long)KERNEL_HEAP_MAX; va+=PTSIZE)
f012703e:	81 45 e8 00 00 40 00 	addl   $0x400000,-0x18(%ebp)
f0127045:	83 55 ec 00          	adcl   $0x0,-0x14(%ebp)
f0127049:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012704d:	78 b2                	js     f0127001 <test_kfreeall+0x1673>
f012704f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0127053:	7f 09                	jg     f012705e <test_kfreeall+0x16d0>
f0127055:	81 7d e8 ff ef ff ff 	cmpl   $0xffffefff,-0x18(%ebp)
f012705c:	76 a3                	jbe    f0127001 <test_kfreeall+0x1673>
			}
		}
	}


	cprintf("\nCongratulations!! your modification is run successfully.\n");
f012705e:	83 ec 0c             	sub    $0xc,%esp
f0127061:	68 34 b2 13 f0       	push   $0xf013b234
f0127066:	e8 c2 9b fd ff       	call   f0100c2d <cprintf>
f012706b:	83 c4 10             	add    $0x10,%esp

	return 1;
f012706e:	b8 01 00 00 00       	mov    $0x1,%eax

}
f0127073:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127076:	5b                   	pop    %ebx
f0127077:	5f                   	pop    %edi
f0127078:	5d                   	pop    %ebp
f0127079:	c3                   	ret    

f012707a <test_kexpand>:


extern void kexpand(uint32 newSize) ;

int test_kexpand()
{
f012707a:	55                   	push   %ebp
f012707b:	89 e5                	mov    %esp,%ebp
f012707d:	57                   	push   %edi
f012707e:	53                   	push   %ebx
f012707f:	81 ec 90 01 00 00    	sub    $0x190,%esp
	char minByte = 1<<7;
f0127085:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127089:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f012708d:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127093:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127099:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f01270a0:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f01270a7:	e8 24 50 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01270ac:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f01270af:	8d 95 bc fe ff ff    	lea    -0x144(%ebp),%edx
f01270b5:	b9 14 00 00 00       	mov    $0x14,%ecx
f01270ba:	b8 00 00 00 00       	mov    $0x0,%eax
f01270bf:	89 d7                	mov    %edx,%edi
f01270c1:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f01270c3:	8d 95 6c fe ff ff    	lea    -0x194(%ebp),%edx
f01270c9:	b9 14 00 00 00       	mov    $0x14,%ecx
f01270ce:	b8 00 00 00 00       	mov    $0x0,%eax
f01270d3:	89 d7                	mov    %edx,%edi
f01270d5:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01270d7:	e8 f4 4f fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01270dc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01270df:	e8 b0 cb fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01270e4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f01270e7:	83 ec 0c             	sub    $0xc,%esp
f01270ea:	68 00 fc 1f 00       	push   $0x1ffc00
f01270ef:	e8 f0 02 fe ff       	call   f01073e4 <kmalloc>
f01270f4:	83 c4 10             	add    $0x10,%esp
f01270f7:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01270fd:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0127103:	89 c1                	mov    %eax,%ecx
f0127105:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f012710c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012710f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127114:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0127117:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012711a:	ba 00 00 00 00       	mov    $0x0,%edx
f012711f:	f7 75 d4             	divl   -0x2c(%ebp)
f0127122:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127125:	29 d0                	sub    %edx,%eax
f0127127:	89 c3                	mov    %eax,%ebx
f0127129:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127130:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127135:	0f b6 d0             	movzbl %al,%edx
f0127138:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012713b:	01 d0                	add    %edx,%eax
f012713d:	48                   	dec    %eax
f012713e:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127141:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127144:	ba 00 00 00 00       	mov    $0x0,%edx
f0127149:	f7 75 cc             	divl   -0x34(%ebp)
f012714c:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012714f:	29 d0                	sub    %edx,%eax
f0127151:	01 c3                	add    %eax,%ebx
f0127153:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f012715a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012715f:	0f b6 c0             	movzbl %al,%eax
f0127162:	c1 e0 04             	shl    $0x4,%eax
f0127165:	89 c2                	mov    %eax,%edx
f0127167:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f012716a:	01 d0                	add    %edx,%eax
f012716c:	48                   	dec    %eax
f012716d:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127170:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127173:	ba 00 00 00 00       	mov    $0x0,%edx
f0127178:	f7 75 c4             	divl   -0x3c(%ebp)
f012717b:	8b 45 c0             	mov    -0x40(%ebp),%eax
f012717e:	29 d0                	sub    %edx,%eax
f0127180:	01 d8                	add    %ebx,%eax
f0127182:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127187:	39 c1                	cmp    %eax,%ecx
f0127189:	74 17                	je     f01271a2 <test_kexpand+0x128>
f012718b:	83 ec 04             	sub    $0x4,%esp
f012718e:	68 bc a5 13 f0       	push   $0xf013a5bc
f0127193:	68 43 0b 00 00       	push   $0xb43
f0127198:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012719d:	e8 04 90 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01271a2:	e8 ed ca fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01271a7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01271aa:	74 17                	je     f01271c3 <test_kexpand+0x149>
f01271ac:	83 ec 04             	sub    $0x4,%esp
f01271af:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01271b4:	68 44 0b 00 00       	push   $0xb44
f01271b9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01271be:	e8 e3 8f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01271c3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01271c6:	e8 05 4f fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01271cb:	29 c3                	sub    %eax,%ebx
f01271cd:	89 d8                	mov    %ebx,%eax
f01271cf:	3d 00 02 00 00       	cmp    $0x200,%eax
f01271d4:	74 17                	je     f01271ed <test_kexpand+0x173>
f01271d6:	83 ec 04             	sub    $0x4,%esp
f01271d9:	68 58 a5 13 f0       	push   $0xf013a558
f01271de:	68 45 0b 00 00       	push   $0xb45
f01271e3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01271e8:	e8 b9 8f fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f01271ed:	c7 85 bc fe ff ff ff 	movl   $0x1ffbff,-0x144(%ebp)
f01271f4:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f01271f7:	e8 d4 4e fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01271fc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01271ff:	e8 90 ca fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127204:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127207:	83 ec 0c             	sub    $0xc,%esp
f012720a:	68 00 fc 1f 00       	push   $0x1ffc00
f012720f:	e8 d0 01 fe ff       	call   f01073e4 <kmalloc>
f0127214:	83 c4 10             	add    $0x10,%esp
f0127217:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012721d:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0127223:	89 c1                	mov    %eax,%ecx
f0127225:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f012722c:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012722f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127234:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127237:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012723a:	ba 00 00 00 00       	mov    $0x0,%edx
f012723f:	f7 75 bc             	divl   -0x44(%ebp)
f0127242:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127245:	29 d0                	sub    %edx,%eax
f0127247:	89 c3                	mov    %eax,%ebx
f0127249:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127250:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127255:	0f b6 d0             	movzbl %al,%edx
f0127258:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012725b:	01 d0                	add    %edx,%eax
f012725d:	48                   	dec    %eax
f012725e:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127261:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127264:	ba 00 00 00 00       	mov    $0x0,%edx
f0127269:	f7 75 b4             	divl   -0x4c(%ebp)
f012726c:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012726f:	29 d0                	sub    %edx,%eax
f0127271:	01 c3                	add    %eax,%ebx
f0127273:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012727a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012727f:	0f b6 c0             	movzbl %al,%eax
f0127282:	c1 e0 04             	shl    $0x4,%eax
f0127285:	89 c2                	mov    %eax,%edx
f0127287:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012728a:	01 d0                	add    %edx,%eax
f012728c:	48                   	dec    %eax
f012728d:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0127290:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0127293:	ba 00 00 00 00       	mov    $0x0,%edx
f0127298:	f7 75 ac             	divl   -0x54(%ebp)
f012729b:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012729e:	29 d0                	sub    %edx,%eax
f01272a0:	01 d8                	add    %ebx,%eax
f01272a2:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f01272a7:	39 c1                	cmp    %eax,%ecx
f01272a9:	74 17                	je     f01272c2 <test_kexpand+0x248>
f01272ab:	83 ec 04             	sub    $0x4,%esp
f01272ae:	68 bc a5 13 f0       	push   $0xf013a5bc
f01272b3:	68 4c 0b 00 00       	push   $0xb4c
f01272b8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01272bd:	e8 e4 8e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01272c2:	e8 cd c9 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01272c7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01272ca:	74 17                	je     f01272e3 <test_kexpand+0x269>
f01272cc:	83 ec 04             	sub    $0x4,%esp
f01272cf:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01272d4:	68 4d 0b 00 00       	push   $0xb4d
f01272d9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01272de:	e8 c3 8e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f01272e3:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01272e6:	e8 e5 4d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01272eb:	29 c3                	sub    %eax,%ebx
f01272ed:	89 d8                	mov    %ebx,%eax
f01272ef:	3d 00 02 00 00       	cmp    $0x200,%eax
f01272f4:	74 17                	je     f012730d <test_kexpand+0x293>
f01272f6:	83 ec 04             	sub    $0x4,%esp
f01272f9:	68 58 a5 13 f0       	push   $0xf013a558
f01272fe:	68 4e 0b 00 00       	push   $0xb4e
f0127303:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127308:	e8 99 8e fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012730d:	c7 85 c0 fe ff ff ff 	movl   $0x1ffbff,-0x140(%ebp)
f0127314:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127317:	e8 b4 4d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012731c:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012731f:	e8 70 c9 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127324:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0127327:	83 ec 0c             	sub    $0xc,%esp
f012732a:	68 00 08 00 00       	push   $0x800
f012732f:	e8 b0 00 fe ff       	call   f01073e4 <kmalloc>
f0127334:	83 c4 10             	add    $0x10,%esp
f0127337:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012733d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f0127343:	89 c1                	mov    %eax,%ecx
f0127345:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012734c:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012734f:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127354:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0127357:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012735a:	ba 00 00 00 00       	mov    $0x0,%edx
f012735f:	f7 75 a4             	divl   -0x5c(%ebp)
f0127362:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0127365:	29 d0                	sub    %edx,%eax
f0127367:	89 c3                	mov    %eax,%ebx
f0127369:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0127370:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127375:	0f b6 d0             	movzbl %al,%edx
f0127378:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012737b:	01 d0                	add    %edx,%eax
f012737d:	48                   	dec    %eax
f012737e:	89 45 98             	mov    %eax,-0x68(%ebp)
f0127381:	8b 45 98             	mov    -0x68(%ebp),%eax
f0127384:	ba 00 00 00 00       	mov    $0x0,%edx
f0127389:	f7 75 9c             	divl   -0x64(%ebp)
f012738c:	8b 45 98             	mov    -0x68(%ebp),%eax
f012738f:	29 d0                	sub    %edx,%eax
f0127391:	01 c3                	add    %eax,%ebx
f0127393:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012739a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012739f:	0f b6 c0             	movzbl %al,%eax
f01273a2:	c1 e0 04             	shl    $0x4,%eax
f01273a5:	89 c2                	mov    %eax,%edx
f01273a7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f01273aa:	01 d0                	add    %edx,%eax
f01273ac:	48                   	dec    %eax
f01273ad:	89 45 90             	mov    %eax,-0x70(%ebp)
f01273b0:	8b 45 90             	mov    -0x70(%ebp),%eax
f01273b3:	ba 00 00 00 00       	mov    $0x0,%edx
f01273b8:	f7 75 94             	divl   -0x6c(%ebp)
f01273bb:	8b 45 90             	mov    -0x70(%ebp),%eax
f01273be:	29 d0                	sub    %edx,%eax
f01273c0:	01 d8                	add    %ebx,%eax
f01273c2:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f01273c7:	39 c1                	cmp    %eax,%ecx
f01273c9:	74 17                	je     f01273e2 <test_kexpand+0x368>
f01273cb:	83 ec 04             	sub    $0x4,%esp
f01273ce:	68 bc a5 13 f0       	push   $0xf013a5bc
f01273d3:	68 55 0b 00 00       	push   $0xb55
f01273d8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01273dd:	e8 c4 8d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01273e2:	e8 ad c8 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01273e7:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01273ea:	74 17                	je     f0127403 <test_kexpand+0x389>
f01273ec:	83 ec 04             	sub    $0x4,%esp
f01273ef:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01273f4:	68 56 0b 00 00       	push   $0xb56
f01273f9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01273fe:	e8 a3 8d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127403:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127406:	e8 c5 4c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012740b:	29 c3                	sub    %eax,%ebx
f012740d:	89 d8                	mov    %ebx,%eax
f012740f:	83 f8 01             	cmp    $0x1,%eax
f0127412:	74 17                	je     f012742b <test_kexpand+0x3b1>
f0127414:	83 ec 04             	sub    $0x4,%esp
f0127417:	68 58 a5 13 f0       	push   $0xf013a558
f012741c:	68 57 0b 00 00       	push   $0xb57
f0127421:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127426:	e8 7b 8d fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f012742b:	c7 85 c4 fe ff ff ff 	movl   $0x7ff,-0x13c(%ebp)
f0127432:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f0127435:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012743b:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f012743e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127445:	eb 0e                	jmp    f0127455 <test_kexpand+0x3db>
		{
			ptr[i] = 2 ;
f0127447:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012744a:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012744d:	01 d0                	add    %edx,%eax
f012744f:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f0127452:	ff 45 f4             	incl   -0xc(%ebp)
f0127455:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012745b:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012745e:	7f e7                	jg     f0127447 <test_kexpand+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0127460:	e8 6b 4c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127465:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127468:	e8 27 c8 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012746d:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f0127470:	83 ec 0c             	sub    $0xc,%esp
f0127473:	68 00 08 00 00       	push   $0x800
f0127478:	e8 67 ff fd ff       	call   f01073e4 <kmalloc>
f012747d:	83 c4 10             	add    $0x10,%esp
f0127480:	89 85 78 fe ff ff    	mov    %eax,-0x188(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127486:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012748c:	89 c1                	mov    %eax,%ecx
f012748e:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0127495:	8b 45 88             	mov    -0x78(%ebp),%eax
f0127498:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012749d:	89 45 84             	mov    %eax,-0x7c(%ebp)
f01274a0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01274a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01274a8:	f7 75 88             	divl   -0x78(%ebp)
f01274ab:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01274ae:	29 d0                	sub    %edx,%eax
f01274b0:	89 c3                	mov    %eax,%ebx
f01274b2:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f01274b9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01274be:	0f b6 d0             	movzbl %al,%edx
f01274c1:	8b 45 80             	mov    -0x80(%ebp),%eax
f01274c4:	01 d0                	add    %edx,%eax
f01274c6:	48                   	dec    %eax
f01274c7:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f01274cd:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01274d3:	ba 00 00 00 00       	mov    $0x0,%edx
f01274d8:	f7 75 80             	divl   -0x80(%ebp)
f01274db:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f01274e1:	29 d0                	sub    %edx,%eax
f01274e3:	01 c3                	add    %eax,%ebx
f01274e5:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f01274ec:	10 00 00 
f01274ef:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01274f4:	0f b6 c0             	movzbl %al,%eax
f01274f7:	c1 e0 04             	shl    $0x4,%eax
f01274fa:	89 c2                	mov    %eax,%edx
f01274fc:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0127502:	01 d0                	add    %edx,%eax
f0127504:	48                   	dec    %eax
f0127505:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012750b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127511:	ba 00 00 00 00       	mov    $0x0,%edx
f0127516:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012751c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0127522:	29 d0                	sub    %edx,%eax
f0127524:	01 d8                	add    %ebx,%eax
f0127526:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f012752b:	39 c1                	cmp    %eax,%ecx
f012752d:	74 17                	je     f0127546 <test_kexpand+0x4cc>
f012752f:	83 ec 04             	sub    $0x4,%esp
f0127532:	68 bc a5 13 f0       	push   $0xf013a5bc
f0127537:	68 63 0b 00 00       	push   $0xb63
f012753c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127541:	e8 60 8c fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127546:	e8 49 c7 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012754b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012754e:	74 17                	je     f0127567 <test_kexpand+0x4ed>
f0127550:	83 ec 04             	sub    $0x4,%esp
f0127553:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0127558:	68 64 0b 00 00       	push   $0xb64
f012755d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127562:	e8 3f 8c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127567:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012756a:	e8 61 4b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012756f:	29 c3                	sub    %eax,%ebx
f0127571:	89 d8                	mov    %ebx,%eax
f0127573:	83 f8 01             	cmp    $0x1,%eax
f0127576:	74 17                	je     f012758f <test_kexpand+0x515>
f0127578:	83 ec 04             	sub    $0x4,%esp
f012757b:	68 58 a5 13 f0       	push   $0xf013a558
f0127580:	68 65 0b 00 00       	push   $0xb65
f0127585:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012758a:	e8 17 8c fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f012758f:	c7 85 c8 fe ff ff ff 	movl   $0x7ff,-0x138(%ebp)
f0127596:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f0127599:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012759f:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f01275a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01275a9:	eb 0e                	jmp    f01275b9 <test_kexpand+0x53f>
		{
			ptr[i] = 3 ;
f01275ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01275ae:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01275b1:	01 d0                	add    %edx,%eax
f01275b3:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f01275b6:	ff 45 f4             	incl   -0xc(%ebp)
f01275b9:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f01275bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01275c2:	7f e7                	jg     f01275ab <test_kexpand+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f01275c4:	e8 07 4b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01275c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01275cc:	e8 c3 c6 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01275d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f01275d4:	83 ec 0c             	sub    $0xc,%esp
f01275d7:	68 00 1c 00 00       	push   $0x1c00
f01275dc:	e8 03 fe fd ff       	call   f01073e4 <kmalloc>
f01275e1:	83 c4 10             	add    $0x10,%esp
f01275e4:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01275ea:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f01275f0:	89 c1                	mov    %eax,%ecx
f01275f2:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f01275f9:	10 00 00 
f01275fc:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0127602:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127607:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012760d:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127613:	ba 00 00 00 00       	mov    $0x0,%edx
f0127618:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012761e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0127624:	29 d0                	sub    %edx,%eax
f0127626:	89 c3                	mov    %eax,%ebx
f0127628:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012762f:	10 00 00 
f0127632:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127637:	0f b6 d0             	movzbl %al,%edx
f012763a:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0127640:	01 d0                	add    %edx,%eax
f0127642:	48                   	dec    %eax
f0127643:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f0127649:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012764f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127654:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f012765a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f0127660:	29 d0                	sub    %edx,%eax
f0127662:	01 c3                	add    %eax,%ebx
f0127664:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f012766b:	10 00 00 
f012766e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127673:	0f b6 c0             	movzbl %al,%eax
f0127676:	c1 e0 04             	shl    $0x4,%eax
f0127679:	89 c2                	mov    %eax,%edx
f012767b:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0127681:	01 d0                	add    %edx,%eax
f0127683:	48                   	dec    %eax
f0127684:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012768a:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0127690:	ba 00 00 00 00       	mov    $0x0,%edx
f0127695:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012769b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01276a1:	29 d0                	sub    %edx,%eax
f01276a3:	01 d8                	add    %ebx,%eax
f01276a5:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f01276aa:	39 c1                	cmp    %eax,%ecx
f01276ac:	74 17                	je     f01276c5 <test_kexpand+0x64b>
f01276ae:	83 ec 04             	sub    $0x4,%esp
f01276b1:	68 bc a5 13 f0       	push   $0xf013a5bc
f01276b6:	68 71 0b 00 00       	push   $0xb71
f01276bb:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01276c0:	e8 e1 8a fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01276c5:	e8 ca c5 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01276ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01276cd:	74 17                	je     f01276e6 <test_kexpand+0x66c>
f01276cf:	83 ec 04             	sub    $0x4,%esp
f01276d2:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01276d7:	68 72 0b 00 00       	push   $0xb72
f01276dc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01276e1:	e8 c0 8a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f01276e6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01276e9:	e8 e2 49 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01276ee:	29 c3                	sub    %eax,%ebx
f01276f0:	89 d8                	mov    %ebx,%eax
f01276f2:	83 f8 02             	cmp    $0x2,%eax
f01276f5:	74 17                	je     f012770e <test_kexpand+0x694>
f01276f7:	83 ec 04             	sub    $0x4,%esp
f01276fa:	68 58 a5 13 f0       	push   $0xf013a558
f01276ff:	68 73 0b 00 00       	push   $0xb73
f0127704:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127709:	e8 98 8a fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012770e:	c7 85 cc fe ff ff ff 	movl   $0x1bff,-0x134(%ebp)
f0127715:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0127718:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012771e:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0127721:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127728:	eb 0e                	jmp    f0127738 <test_kexpand+0x6be>
		{
			ptr[i] = 4 ;
f012772a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012772d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0127730:	01 d0                	add    %edx,%eax
f0127732:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0127735:	ff 45 f4             	incl   -0xc(%ebp)
f0127738:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012773e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127741:	7f e7                	jg     f012772a <test_kexpand+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f0127743:	e8 88 49 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127748:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012774b:	e8 44 c5 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127750:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f0127753:	83 ec 0c             	sub    $0xc,%esp
f0127756:	68 00 fc 2f 00       	push   $0x2ffc00
f012775b:	e8 84 fc fd ff       	call   f01073e4 <kmalloc>
f0127760:	83 c4 10             	add    $0x10,%esp
f0127763:	89 85 80 fe ff ff    	mov    %eax,-0x180(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127769:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012776f:	89 c1                	mov    %eax,%ecx
f0127771:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f0127778:	10 00 00 
f012777b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0127781:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127786:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012778c:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0127792:	ba 00 00 00 00       	mov    $0x0,%edx
f0127797:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012779d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f01277a3:	29 d0                	sub    %edx,%eax
f01277a5:	89 c3                	mov    %eax,%ebx
f01277a7:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f01277ae:	10 00 00 
f01277b1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01277b6:	0f b6 d0             	movzbl %al,%edx
f01277b9:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f01277bf:	01 d0                	add    %edx,%eax
f01277c1:	48                   	dec    %eax
f01277c2:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f01277c8:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01277ce:	ba 00 00 00 00       	mov    $0x0,%edx
f01277d3:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f01277d9:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f01277df:	29 d0                	sub    %edx,%eax
f01277e1:	01 c3                	add    %eax,%ebx
f01277e3:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f01277ea:	10 00 00 
f01277ed:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01277f2:	0f b6 c0             	movzbl %al,%eax
f01277f5:	c1 e0 04             	shl    $0x4,%eax
f01277f8:	89 c2                	mov    %eax,%edx
f01277fa:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0127800:	01 d0                	add    %edx,%eax
f0127802:	48                   	dec    %eax
f0127803:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f0127809:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012780f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127814:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012781a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0127820:	29 d0                	sub    %edx,%eax
f0127822:	01 d8                	add    %ebx,%eax
f0127824:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f0127829:	39 c1                	cmp    %eax,%ecx
f012782b:	74 17                	je     f0127844 <test_kexpand+0x7ca>
f012782d:	83 ec 04             	sub    $0x4,%esp
f0127830:	68 bc a5 13 f0       	push   $0xf013a5bc
f0127835:	68 7f 0b 00 00       	push   $0xb7f
f012783a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012783f:	e8 62 89 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127844:	e8 4b c4 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127849:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012784c:	74 17                	je     f0127865 <test_kexpand+0x7eb>
f012784e:	83 ec 04             	sub    $0x4,%esp
f0127851:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0127856:	68 80 0b 00 00       	push   $0xb80
f012785b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127860:	e8 41 89 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127865:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127868:	e8 63 48 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012786d:	29 c3                	sub    %eax,%ebx
f012786f:	89 d8                	mov    %ebx,%eax
f0127871:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127876:	74 17                	je     f012788f <test_kexpand+0x815>
f0127878:	83 ec 04             	sub    $0x4,%esp
f012787b:	68 58 a5 13 f0       	push   $0xf013a558
f0127880:	68 81 0b 00 00       	push   $0xb81
f0127885:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012788a:	e8 17 89 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f012788f:	c7 85 d0 fe ff ff ff 	movl   $0x2ffbff,-0x130(%ebp)
f0127896:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f0127899:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012789f:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f01278a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01278a9:	eb 0e                	jmp    f01278b9 <test_kexpand+0x83f>
		{
			ptr[i] = 5 ;
f01278ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01278ae:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01278b1:	01 d0                	add    %edx,%eax
f01278b3:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f01278b6:	ff 45 f4             	incl   -0xc(%ebp)
f01278b9:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f01278bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01278c2:	7f e7                	jg     f01278ab <test_kexpand+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f01278c4:	e8 07 48 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01278c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01278cc:	e8 c3 c3 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01278d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f01278d4:	83 ec 0c             	sub    $0xc,%esp
f01278d7:	68 00 00 60 00       	push   $0x600000
f01278dc:	e8 03 fb fd ff       	call   f01073e4 <kmalloc>
f01278e1:	83 c4 10             	add    $0x10,%esp
f01278e4:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01278ea:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f01278f0:	89 c1                	mov    %eax,%ecx
f01278f2:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f01278f9:	10 00 00 
f01278fc:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0127902:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127907:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012790d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127913:	ba 00 00 00 00       	mov    $0x0,%edx
f0127918:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012791e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0127924:	29 d0                	sub    %edx,%eax
f0127926:	89 c3                	mov    %eax,%ebx
f0127928:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012792f:	10 00 00 
f0127932:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127937:	0f b6 d0             	movzbl %al,%edx
f012793a:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0127940:	01 d0                	add    %edx,%eax
f0127942:	48                   	dec    %eax
f0127943:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f0127949:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012794f:	ba 00 00 00 00       	mov    $0x0,%edx
f0127954:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f012795a:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f0127960:	29 d0                	sub    %edx,%eax
f0127962:	01 c3                	add    %eax,%ebx
f0127964:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f012796b:	10 00 00 
f012796e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127973:	0f b6 c0             	movzbl %al,%eax
f0127976:	c1 e0 04             	shl    $0x4,%eax
f0127979:	89 c2                	mov    %eax,%edx
f012797b:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0127981:	01 d0                	add    %edx,%eax
f0127983:	48                   	dec    %eax
f0127984:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012798a:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0127990:	ba 00 00 00 00       	mov    $0x0,%edx
f0127995:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012799b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01279a1:	29 d0                	sub    %edx,%eax
f01279a3:	01 d8                	add    %ebx,%eax
f01279a5:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f01279aa:	39 c1                	cmp    %eax,%ecx
f01279ac:	74 17                	je     f01279c5 <test_kexpand+0x94b>
f01279ae:	83 ec 04             	sub    $0x4,%esp
f01279b1:	68 bc a5 13 f0       	push   $0xf013a5bc
f01279b6:	68 8d 0b 00 00       	push   $0xb8d
f01279bb:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01279c0:	e8 e1 87 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01279c5:	e8 ca c2 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01279ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01279cd:	74 17                	je     f01279e6 <test_kexpand+0x96c>
f01279cf:	83 ec 04             	sub    $0x4,%esp
f01279d2:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01279d7:	68 8e 0b 00 00       	push   $0xb8e
f01279dc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01279e1:	e8 c0 87 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f01279e6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01279e9:	e8 e2 46 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01279ee:	29 c3                	sub    %eax,%ebx
f01279f0:	89 d8                	mov    %ebx,%eax
f01279f2:	3d 00 06 00 00       	cmp    $0x600,%eax
f01279f7:	74 17                	je     f0127a10 <test_kexpand+0x996>
f01279f9:	83 ec 04             	sub    $0x4,%esp
f01279fc:	68 58 a5 13 f0       	push   $0xf013a558
f0127a01:	68 8f 0b 00 00       	push   $0xb8f
f0127a06:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127a0b:	e8 96 87 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0127a10:	c7 85 d4 fe ff ff ff 	movl   $0x17ffff,-0x12c(%ebp)
f0127a17:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f0127a1a:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127a20:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f0127a26:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127a2d:	eb 1a                	jmp    f0127a49 <test_kexpand+0x9cf>
		{
			arr[i] = i ;
f0127a2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127a32:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127a39:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127a3f:	01 c2                	add    %eax,%edx
f0127a41:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127a44:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f0127a46:	ff 45 f4             	incl   -0xc(%ebp)
f0127a49:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127a4f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0127a52:	7d db                	jge    f0127a2f <test_kexpand+0x9b5>
			arr[i] = i ;
		}
	}

	//Expand last allocated variable to 7 MB instead of 6 MB
	int newLastIndex = (7*Mega)/sizeof(uint32) - 1;
f0127a54:	c7 85 24 ff ff ff ff 	movl   $0x1bffff,-0xdc(%ebp)
f0127a5b:	ff 1b 00 
	{
		freeFrames = sys_calculate_free_frames() ;
f0127a5e:	e8 6d 46 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127a63:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127a66:	e8 29 c2 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127a6b:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(7*Mega) ;
f0127a6e:	83 ec 0c             	sub    $0xc,%esp
f0127a71:	68 00 00 70 00       	push   $0x700000
f0127a76:	e8 05 fa fd ff       	call   f0107480 <kexpand>
f0127a7b:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127a7e:	e8 11 c2 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127a83:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127a86:	74 19                	je     f0127aa1 <test_kexpand+0xa27>
f0127a88:	68 70 b2 13 f0       	push   $0xf013b270
f0127a8d:	68 a1 b2 13 f0       	push   $0xf013b2a1
f0127a92:	68 a0 0b 00 00       	push   $0xba0
f0127a97:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127a9c:	e8 05 87 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 256) ;
f0127aa1:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127aa4:	e8 27 46 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127aa9:	29 c3                	sub    %eax,%ebx
f0127aab:	89 d8                	mov    %ebx,%eax
f0127aad:	3d 00 01 00 00       	cmp    $0x100,%eax
f0127ab2:	74 19                	je     f0127acd <test_kexpand+0xa53>
f0127ab4:	68 b8 b2 13 f0       	push   $0xf013b2b8
f0127ab9:	68 a1 b2 13 f0       	push   $0xf013b2a1
f0127abe:	68 a1 0b 00 00       	push   $0xba1
f0127ac3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127ac8:	e8 d9 86 fd ff       	call   f01001a6 <_panic>

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0127acd:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0127ad3:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0127ad6:	eb 1a                	jmp    f0127af2 <test_kexpand+0xa78>
		{
			arr[i] = i ;
f0127ad8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127adb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127ae2:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127ae8:	01 c2                	add    %eax,%edx
f0127aea:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127aed:	89 02                	mov    %eax,(%edx)
		kexpand(7*Mega) ;

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
		assert(freeFrames - sys_calculate_free_frames() == 256) ;

		for (i = lastIndices[6]; i < newLastIndex ; ++i)
f0127aef:	ff 45 f4             	incl   -0xc(%ebp)
f0127af2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127af5:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0127afb:	7c db                	jl     f0127ad8 <test_kexpand+0xa5e>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0127afd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0127b04:	eb 37                	jmp    f0127b3d <test_kexpand+0xac3>
		{
			assert(arr[i] ==i);
f0127b06:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127b09:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0127b10:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0127b16:	01 d0                	add    %edx,%eax
f0127b18:	8b 10                	mov    (%eax),%edx
f0127b1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127b1d:	39 c2                	cmp    %eax,%edx
f0127b1f:	74 19                	je     f0127b3a <test_kexpand+0xac0>
f0127b21:	68 e8 b2 13 f0       	push   $0xf013b2e8
f0127b26:	68 a1 b2 13 f0       	push   $0xf013b2a1
f0127b2b:	68 ad 0b 00 00       	push   $0xbad
f0127b30:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127b35:	e8 6c 86 fd ff       	call   f01001a6 <_panic>
		}
	}

	//Access elements after expansion
	{
		for (i = 0; i < newLastIndex ; ++i)
f0127b3a:	ff 45 f4             	incl   -0xc(%ebp)
f0127b3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0127b40:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0127b46:	7c be                	jl     f0127b06 <test_kexpand+0xa8c>
		}
	}

	//Expand it again to 10 MB instead of 7 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127b48:	e8 83 45 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127b4d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127b50:	e8 3f c1 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127b55:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(10*Mega) ;
f0127b58:	83 ec 0c             	sub    $0xc,%esp
f0127b5b:	68 00 00 a0 00       	push   $0xa00000
f0127b60:	e8 1b f9 fd ff       	call   f0107480 <kexpand>
f0127b65:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127b68:	e8 27 c1 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127b6d:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127b70:	74 19                	je     f0127b8b <test_kexpand+0xb11>
f0127b72:	68 70 b2 13 f0       	push   $0xf013b270
f0127b77:	68 a1 b2 13 f0       	push   $0xf013b2a1
f0127b7c:	68 b8 0b 00 00       	push   $0xbb8
f0127b81:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127b86:	e8 1b 86 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames() == 768) ;
f0127b8b:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127b8e:	e8 3d 45 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127b93:	29 c3                	sub    %eax,%ebx
f0127b95:	89 d8                	mov    %ebx,%eax
f0127b97:	3d 00 03 00 00       	cmp    $0x300,%eax
f0127b9c:	74 19                	je     f0127bb7 <test_kexpand+0xb3d>
f0127b9e:	68 f4 b2 13 f0       	push   $0xf013b2f4
f0127ba3:	68 a1 b2 13 f0       	push   $0xf013b2a1
f0127ba8:	68 b9 0b 00 00       	push   $0xbb9
f0127bad:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127bb2:	e8 ef 85 fd ff       	call   f01001a6 <_panic>


	//Allocate after expanding last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f0127bb7:	e8 14 45 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127bbc:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127bbf:	e8 d0 c0 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127bc4:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f0127bc7:	83 ec 0c             	sub    $0xc,%esp
f0127bca:	68 00 00 40 00       	push   $0x400000
f0127bcf:	e8 10 f8 fd ff       	call   f01073e4 <kmalloc>
f0127bd4:	83 c4 10             	add    $0x10,%esp
f0127bd7:	89 85 88 fe ff ff    	mov    %eax,-0x178(%ebp)

		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 10*Mega)) panic("Wrong start address after kexpand()... ");
f0127bdd:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f0127be3:	89 c1                	mov    %eax,%ecx
f0127be5:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f0127bec:	10 00 00 
f0127bef:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0127bf5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127bfa:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0127c00:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0127c06:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c0b:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0127c11:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0127c17:	29 d0                	sub    %edx,%eax
f0127c19:	89 c3                	mov    %eax,%ebx
f0127c1b:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0127c22:	10 00 00 
f0127c25:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127c2a:	0f b6 d0             	movzbl %al,%edx
f0127c2d:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0127c33:	01 d0                	add    %edx,%eax
f0127c35:	48                   	dec    %eax
f0127c36:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0127c3c:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0127c42:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c47:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0127c4d:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0127c53:	29 d0                	sub    %edx,%eax
f0127c55:	01 c3                	add    %eax,%ebx
f0127c57:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0127c5e:	10 00 00 
f0127c61:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127c66:	0f b6 c0             	movzbl %al,%eax
f0127c69:	c1 e0 04             	shl    $0x4,%eax
f0127c6c:	89 c2                	mov    %eax,%edx
f0127c6e:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0127c74:	01 d0                	add    %edx,%eax
f0127c76:	48                   	dec    %eax
f0127c77:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0127c7d:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0127c83:	ba 00 00 00 00       	mov    $0x0,%edx
f0127c88:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0127c8e:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0127c94:	29 d0                	sub    %edx,%eax
f0127c96:	01 d8                	add    %ebx,%eax
f0127c98:	2d 00 80 ef 08       	sub    $0x8ef8000,%eax
f0127c9d:	39 c1                	cmp    %eax,%ecx
f0127c9f:	74 17                	je     f0127cb8 <test_kexpand+0xc3e>
f0127ca1:	83 ec 04             	sub    $0x4,%esp
f0127ca4:	68 24 b3 13 f0       	push   $0xf013b324
f0127ca9:	68 c4 0b 00 00       	push   $0xbc4
f0127cae:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127cb3:	e8 ee 84 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127cb8:	e8 d7 bf fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127cbd:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127cc0:	74 17                	je     f0127cd9 <test_kexpand+0xc5f>
f0127cc2:	83 ec 04             	sub    $0x4,%esp
f0127cc5:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0127cca:	68 c5 0b 00 00       	push   $0xbc5
f0127ccf:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127cd4:	e8 cd 84 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127cd9:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127cdc:	e8 ef 43 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127ce1:	29 c3                	sub    %eax,%ebx
f0127ce3:	89 d8                	mov    %ebx,%eax
f0127ce5:	3d 00 04 00 00       	cmp    $0x400,%eax
f0127cea:	74 17                	je     f0127d03 <test_kexpand+0xc89>
f0127cec:	83 ec 04             	sub    $0x4,%esp
f0127cef:	68 58 a5 13 f0       	push   $0xf013a558
f0127cf4:	68 c6 0b 00 00       	push   $0xbc6
f0127cf9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127cfe:	e8 a3 84 fd ff       	call   f01001a6 <_panic>
	}

	//kfree the expanded variable
	{
		//kfree 10 MB (expanded)
		freeFrames = sys_calculate_free_frames() ;
f0127d03:	e8 c8 43 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127d08:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d0b:	e8 84 bf fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127d10:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0127d13:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f0127d19:	83 ec 0c             	sub    $0xc,%esp
f0127d1c:	50                   	push   %eax
f0127d1d:	e8 dc f6 fd ff       	call   f01073fe <kfree>
f0127d22:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127d25:	e8 6a bf fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127d2a:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127d2d:	74 17                	je     f0127d46 <test_kexpand+0xccc>
f0127d2f:	83 ec 04             	sub    $0x4,%esp
f0127d32:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0127d37:	68 cf 0b 00 00       	push   $0xbcf
f0127d3c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127d41:	e8 60 84 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 10*Mega/PAGE_SIZE) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0127d46:	e8 85 43 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127d4b:	89 c2                	mov    %eax,%edx
f0127d4d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0127d50:	29 c2                	sub    %eax,%edx
f0127d52:	89 d0                	mov    %edx,%eax
f0127d54:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f0127d59:	74 17                	je     f0127d72 <test_kexpand+0xcf8>
f0127d5b:	83 ec 04             	sub    $0x4,%esp
f0127d5e:	68 88 ad 13 f0       	push   $0xf013ad88
f0127d63:	68 d0 0b 00 00       	push   $0xbd0
f0127d68:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127d6d:	e8 34 84 fd ff       	call   f01001a6 <_panic>
	}

	//Expand last allocated variable to 4 MB + 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0127d72:	e8 59 43 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127d77:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127d7a:	e8 15 bf fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127d7f:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kexpand(4*Mega + 20*kilo) ;
f0127d82:	83 ec 0c             	sub    $0xc,%esp
f0127d85:	68 00 50 40 00       	push   $0x405000
f0127d8a:	e8 f1 f6 fd ff       	call   f0107480 <kexpand>
f0127d8f:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0127d92:	e8 fd be fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127d97:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127d9a:	74 19                	je     f0127db5 <test_kexpand+0xd3b>
f0127d9c:	68 70 b2 13 f0       	push   $0xf013b270
f0127da1:	68 a1 b2 13 f0       	push   $0xf013b2a1
f0127da6:	68 da 0b 00 00       	push   $0xbda
f0127dab:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127db0:	e8 f1 83 fd ff       	call   f01001a6 <_panic>
		assert(freeFrames - sys_calculate_free_frames()  == 5) ;
f0127db5:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127db8:	e8 13 43 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127dbd:	29 c3                	sub    %eax,%ebx
f0127dbf:	89 d8                	mov    %ebx,%eax
f0127dc1:	83 f8 05             	cmp    $0x5,%eax
f0127dc4:	74 19                	je     f0127ddf <test_kexpand+0xd65>
f0127dc6:	68 4c b3 13 f0       	push   $0xf013b34c
f0127dcb:	68 a1 b2 13 f0       	push   $0xf013b2a1
f0127dd0:	68 db 0b 00 00       	push   $0xbdb
f0127dd5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127dda:	e8 c7 83 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0127ddf:	83 ec 0c             	sub    $0xc,%esp
f0127de2:	68 34 b2 13 f0       	push   $0xf013b234
f0127de7:	e8 41 8e fd ff       	call   f0100c2d <cprintf>
f0127dec:	83 c4 10             	add    $0x10,%esp

	return 1;
f0127def:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0127df4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0127df7:	5b                   	pop    %ebx
f0127df8:	5f                   	pop    %edi
f0127df9:	5d                   	pop    %ebp
f0127dfa:	c3                   	ret    

f0127dfb <test_kshrink>:

extern void kshrink(uint32 newSize) ;

int test_kshrink()
{
f0127dfb:	55                   	push   %ebp
f0127dfc:	89 e5                	mov    %esp,%ebp
f0127dfe:	57                   	push   %edi
f0127dff:	53                   	push   %ebx
f0127e00:	81 ec b0 01 00 00    	sub    $0x1b0,%esp
	char minByte = 1<<7;
f0127e06:	c6 45 f3 80          	movb   $0x80,-0xd(%ebp)
	char maxByte = 0x7F;
f0127e0a:	c6 45 f2 7f          	movb   $0x7f,-0xe(%ebp)
	short minShort = 1<<15 ;
f0127e0e:	66 c7 45 f0 00 80    	movw   $0x8000,-0x10(%ebp)
	short maxShort = 0x7FFF;
f0127e14:	66 c7 45 ee ff 7f    	movw   $0x7fff,-0x12(%ebp)
	int minInt = 1<<31 ;
f0127e1a:	c7 45 e8 00 00 00 80 	movl   $0x80000000,-0x18(%ebp)
	int maxInt = 0x7FFFFFFF;
f0127e21:	c7 45 e4 ff ff ff 7f 	movl   $0x7fffffff,-0x1c(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0127e28:	e8 a3 42 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127e2d:	89 45 e0             	mov    %eax,-0x20(%ebp)

	//malloc some spaces
	int i, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0127e30:	8d 95 a4 fe ff ff    	lea    -0x15c(%ebp),%edx
f0127e36:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127e3b:	b8 00 00 00 00       	mov    $0x0,%eax
f0127e40:	89 d7                	mov    %edx,%edi
f0127e42:	f3 ab                	rep stos %eax,%es:(%edi)

	uint32 *arr;
	void* ptr_allocations[20] = {0};
f0127e44:	8d 95 54 fe ff ff    	lea    -0x1ac(%ebp),%edx
f0127e4a:	b9 14 00 00 00       	mov    $0x14,%ecx
f0127e4f:	b8 00 00 00 00       	mov    $0x0,%eax
f0127e54:	89 d7                	mov    %edx,%edi
f0127e56:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127e58:	e8 73 42 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127e5d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127e60:	e8 2f be fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127e65:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0127e68:	83 ec 0c             	sub    $0xc,%esp
f0127e6b:	68 00 fc 1f 00       	push   $0x1ffc00
f0127e70:	e8 6f f5 fd ff       	call   f01073e4 <kmalloc>
f0127e75:	83 c4 10             	add    $0x10,%esp
f0127e78:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127e7e:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f0127e84:	89 c1                	mov    %eax,%ecx
f0127e86:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
f0127e8d:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0127e90:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127e95:	89 45 d0             	mov    %eax,-0x30(%ebp)
f0127e98:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127e9b:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ea0:	f7 75 d4             	divl   -0x2c(%ebp)
f0127ea3:	8b 45 d0             	mov    -0x30(%ebp),%eax
f0127ea6:	29 d0                	sub    %edx,%eax
f0127ea8:	89 c3                	mov    %eax,%ebx
f0127eaa:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0127eb1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127eb6:	0f b6 d0             	movzbl %al,%edx
f0127eb9:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0127ebc:	01 d0                	add    %edx,%eax
f0127ebe:	48                   	dec    %eax
f0127ebf:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0127ec2:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127ec5:	ba 00 00 00 00       	mov    $0x0,%edx
f0127eca:	f7 75 cc             	divl   -0x34(%ebp)
f0127ecd:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0127ed0:	29 d0                	sub    %edx,%eax
f0127ed2:	01 c3                	add    %eax,%ebx
f0127ed4:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0127edb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127ee0:	0f b6 c0             	movzbl %al,%eax
f0127ee3:	c1 e0 04             	shl    $0x4,%eax
f0127ee6:	89 c2                	mov    %eax,%edx
f0127ee8:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0127eeb:	01 d0                	add    %edx,%eax
f0127eed:	48                   	dec    %eax
f0127eee:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0127ef1:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127ef4:	ba 00 00 00 00       	mov    $0x0,%edx
f0127ef9:	f7 75 c4             	divl   -0x3c(%ebp)
f0127efc:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0127eff:	29 d0                	sub    %edx,%eax
f0127f01:	01 d8                	add    %ebx,%eax
f0127f03:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0127f08:	39 c1                	cmp    %eax,%ecx
f0127f0a:	74 17                	je     f0127f23 <test_kshrink+0x128>
f0127f0c:	83 ec 04             	sub    $0x4,%esp
f0127f0f:	68 bc a5 13 f0       	push   $0xf013a5bc
f0127f14:	68 01 0c 00 00       	push   $0xc01
f0127f19:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127f1e:	e8 83 82 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0127f23:	e8 6c bd fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127f28:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0127f2b:	74 17                	je     f0127f44 <test_kshrink+0x149>
f0127f2d:	83 ec 04             	sub    $0x4,%esp
f0127f30:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0127f35:	68 02 0c 00 00       	push   $0xc02
f0127f3a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127f3f:	e8 62 82 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0127f44:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0127f47:	e8 84 41 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127f4c:	29 c3                	sub    %eax,%ebx
f0127f4e:	89 d8                	mov    %ebx,%eax
f0127f50:	3d 00 02 00 00       	cmp    $0x200,%eax
f0127f55:	74 17                	je     f0127f6e <test_kshrink+0x173>
f0127f57:	83 ec 04             	sub    $0x4,%esp
f0127f5a:	68 58 a5 13 f0       	push   $0xf013a558
f0127f5f:	68 03 0c 00 00       	push   $0xc03
f0127f64:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0127f69:	e8 38 82 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0127f6e:	c7 85 a4 fe ff ff ff 	movl   $0x1ffbff,-0x15c(%ebp)
f0127f75:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0127f78:	e8 53 41 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0127f7d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0127f80:	e8 0f bd fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0127f85:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0127f88:	83 ec 0c             	sub    $0xc,%esp
f0127f8b:	68 00 fc 1f 00       	push   $0x1ffc00
f0127f90:	e8 4f f4 fd ff       	call   f01073e4 <kmalloc>
f0127f95:	83 c4 10             	add    $0x10,%esp
f0127f98:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0127f9e:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f0127fa4:	89 c1                	mov    %eax,%ecx
f0127fa6:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0127fad:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0127fb0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0127fb5:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0127fb8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127fbb:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fc0:	f7 75 bc             	divl   -0x44(%ebp)
f0127fc3:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0127fc6:	29 d0                	sub    %edx,%eax
f0127fc8:	89 c3                	mov    %eax,%ebx
f0127fca:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0127fd1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0127fd6:	0f b6 d0             	movzbl %al,%edx
f0127fd9:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0127fdc:	01 d0                	add    %edx,%eax
f0127fde:	48                   	dec    %eax
f0127fdf:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0127fe2:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127fe5:	ba 00 00 00 00       	mov    $0x0,%edx
f0127fea:	f7 75 b4             	divl   -0x4c(%ebp)
f0127fed:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0127ff0:	29 d0                	sub    %edx,%eax
f0127ff2:	01 c3                	add    %eax,%ebx
f0127ff4:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0127ffb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128000:	0f b6 c0             	movzbl %al,%eax
f0128003:	c1 e0 04             	shl    $0x4,%eax
f0128006:	89 c2                	mov    %eax,%edx
f0128008:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012800b:	01 d0                	add    %edx,%eax
f012800d:	48                   	dec    %eax
f012800e:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128011:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128014:	ba 00 00 00 00       	mov    $0x0,%edx
f0128019:	f7 75 ac             	divl   -0x54(%ebp)
f012801c:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012801f:	29 d0                	sub    %edx,%eax
f0128021:	01 d8                	add    %ebx,%eax
f0128023:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128028:	39 c1                	cmp    %eax,%ecx
f012802a:	74 17                	je     f0128043 <test_kshrink+0x248>
f012802c:	83 ec 04             	sub    $0x4,%esp
f012802f:	68 bc a5 13 f0       	push   $0xf013a5bc
f0128034:	68 0a 0c 00 00       	push   $0xc0a
f0128039:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012803e:	e8 63 81 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128043:	e8 4c bc fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128048:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012804b:	74 17                	je     f0128064 <test_kshrink+0x269>
f012804d:	83 ec 04             	sub    $0x4,%esp
f0128050:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0128055:	68 0b 0c 00 00       	push   $0xc0b
f012805a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012805f:	e8 42 81 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128064:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128067:	e8 64 40 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012806c:	29 c3                	sub    %eax,%ebx
f012806e:	89 d8                	mov    %ebx,%eax
f0128070:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128075:	74 17                	je     f012808e <test_kshrink+0x293>
f0128077:	83 ec 04             	sub    $0x4,%esp
f012807a:	68 58 a5 13 f0       	push   $0xf013a558
f012807f:	68 0c 0c 00 00       	push   $0xc0c
f0128084:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128089:	e8 18 81 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f012808e:	c7 85 a8 fe ff ff ff 	movl   $0x1ffbff,-0x158(%ebp)
f0128095:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128098:	e8 33 40 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012809d:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01280a0:	e8 ef bb fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01280a5:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f01280a8:	83 ec 0c             	sub    $0xc,%esp
f01280ab:	68 00 08 00 00       	push   $0x800
f01280b0:	e8 2f f3 fd ff       	call   f01073e4 <kmalloc>
f01280b5:	83 c4 10             	add    $0x10,%esp
f01280b8:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01280be:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01280c4:	89 c1                	mov    %eax,%ecx
f01280c6:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f01280cd:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f01280d0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01280d5:	89 45 a0             	mov    %eax,-0x60(%ebp)
f01280d8:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01280db:	ba 00 00 00 00       	mov    $0x0,%edx
f01280e0:	f7 75 a4             	divl   -0x5c(%ebp)
f01280e3:	8b 45 a0             	mov    -0x60(%ebp),%eax
f01280e6:	29 d0                	sub    %edx,%eax
f01280e8:	89 c3                	mov    %eax,%ebx
f01280ea:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f01280f1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01280f6:	0f b6 d0             	movzbl %al,%edx
f01280f9:	8b 45 9c             	mov    -0x64(%ebp),%eax
f01280fc:	01 d0                	add    %edx,%eax
f01280fe:	48                   	dec    %eax
f01280ff:	89 45 98             	mov    %eax,-0x68(%ebp)
f0128102:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128105:	ba 00 00 00 00       	mov    $0x0,%edx
f012810a:	f7 75 9c             	divl   -0x64(%ebp)
f012810d:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128110:	29 d0                	sub    %edx,%eax
f0128112:	01 c3                	add    %eax,%ebx
f0128114:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012811b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128120:	0f b6 c0             	movzbl %al,%eax
f0128123:	c1 e0 04             	shl    $0x4,%eax
f0128126:	89 c2                	mov    %eax,%edx
f0128128:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012812b:	01 d0                	add    %edx,%eax
f012812d:	48                   	dec    %eax
f012812e:	89 45 90             	mov    %eax,-0x70(%ebp)
f0128131:	8b 45 90             	mov    -0x70(%ebp),%eax
f0128134:	ba 00 00 00 00       	mov    $0x0,%edx
f0128139:	f7 75 94             	divl   -0x6c(%ebp)
f012813c:	8b 45 90             	mov    -0x70(%ebp),%eax
f012813f:	29 d0                	sub    %edx,%eax
f0128141:	01 d8                	add    %ebx,%eax
f0128143:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0128148:	39 c1                	cmp    %eax,%ecx
f012814a:	74 17                	je     f0128163 <test_kshrink+0x368>
f012814c:	83 ec 04             	sub    $0x4,%esp
f012814f:	68 bc a5 13 f0       	push   $0xf013a5bc
f0128154:	68 13 0c 00 00       	push   $0xc13
f0128159:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012815e:	e8 43 80 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128163:	e8 2c bb fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128168:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012816b:	74 17                	je     f0128184 <test_kshrink+0x389>
f012816d:	83 ec 04             	sub    $0x4,%esp
f0128170:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0128175:	68 14 0c 00 00       	push   $0xc14
f012817a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012817f:	e8 22 80 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128184:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128187:	e8 44 3f fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012818c:	29 c3                	sub    %eax,%ebx
f012818e:	89 d8                	mov    %ebx,%eax
f0128190:	83 f8 01             	cmp    $0x1,%eax
f0128193:	74 17                	je     f01281ac <test_kshrink+0x3b1>
f0128195:	83 ec 04             	sub    $0x4,%esp
f0128198:	68 58 a5 13 f0       	push   $0xf013a558
f012819d:	68 15 0c 00 00       	push   $0xc15
f01281a2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01281a7:	e8 fa 7f fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01281ac:	c7 85 ac fe ff ff ff 	movl   $0x7ff,-0x154(%ebp)
f01281b3:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01281b6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f01281bc:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01281bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01281c6:	eb 0e                	jmp    f01281d6 <test_kshrink+0x3db>
		{
			ptr[i] = 2 ;
f01281c8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01281cb:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01281ce:	01 d0                	add    %edx,%eax
f01281d0:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01281d3:	ff 45 f4             	incl   -0xc(%ebp)
f01281d6:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f01281dc:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01281df:	7f e7                	jg     f01281c8 <test_kshrink+0x3cd>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01281e1:	e8 ea 3e fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01281e6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01281e9:	e8 a6 ba fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01281ee:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01281f1:	83 ec 0c             	sub    $0xc,%esp
f01281f4:	68 00 08 00 00       	push   $0x800
f01281f9:	e8 e6 f1 fd ff       	call   f01073e4 <kmalloc>
f01281fe:	83 c4 10             	add    $0x10,%esp
f0128201:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128207:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012820d:	89 c1                	mov    %eax,%ecx
f012820f:	c7 45 88 00 10 00 00 	movl   $0x1000,-0x78(%ebp)
f0128216:	8b 45 88             	mov    -0x78(%ebp),%eax
f0128219:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012821e:	89 45 84             	mov    %eax,-0x7c(%ebp)
f0128221:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0128224:	ba 00 00 00 00       	mov    $0x0,%edx
f0128229:	f7 75 88             	divl   -0x78(%ebp)
f012822c:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012822f:	29 d0                	sub    %edx,%eax
f0128231:	89 c3                	mov    %eax,%ebx
f0128233:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f012823a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012823f:	0f b6 d0             	movzbl %al,%edx
f0128242:	8b 45 80             	mov    -0x80(%ebp),%eax
f0128245:	01 d0                	add    %edx,%eax
f0128247:	48                   	dec    %eax
f0128248:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f012824e:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128254:	ba 00 00 00 00       	mov    $0x0,%edx
f0128259:	f7 75 80             	divl   -0x80(%ebp)
f012825c:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0128262:	29 d0                	sub    %edx,%eax
f0128264:	01 c3                	add    %eax,%ebx
f0128266:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f012826d:	10 00 00 
f0128270:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128275:	0f b6 c0             	movzbl %al,%eax
f0128278:	c1 e0 04             	shl    $0x4,%eax
f012827b:	89 c2                	mov    %eax,%edx
f012827d:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0128283:	01 d0                	add    %edx,%eax
f0128285:	48                   	dec    %eax
f0128286:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012828c:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0128292:	ba 00 00 00 00       	mov    $0x0,%edx
f0128297:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012829d:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f01282a3:	29 d0                	sub    %edx,%eax
f01282a5:	01 d8                	add    %ebx,%eax
f01282a7:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01282ac:	39 c1                	cmp    %eax,%ecx
f01282ae:	74 17                	je     f01282c7 <test_kshrink+0x4cc>
f01282b0:	83 ec 04             	sub    $0x4,%esp
f01282b3:	68 bc a5 13 f0       	push   $0xf013a5bc
f01282b8:	68 21 0c 00 00       	push   $0xc21
f01282bd:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01282c2:	e8 df 7e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01282c7:	e8 c8 b9 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01282cc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01282cf:	74 17                	je     f01282e8 <test_kshrink+0x4ed>
f01282d1:	83 ec 04             	sub    $0x4,%esp
f01282d4:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01282d9:	68 22 0c 00 00       	push   $0xc22
f01282de:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01282e3:	e8 be 7e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01282e8:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01282eb:	e8 e0 3d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01282f0:	29 c3                	sub    %eax,%ebx
f01282f2:	89 d8                	mov    %ebx,%eax
f01282f4:	83 f8 01             	cmp    $0x1,%eax
f01282f7:	74 17                	je     f0128310 <test_kshrink+0x515>
f01282f9:	83 ec 04             	sub    $0x4,%esp
f01282fc:	68 58 a5 13 f0       	push   $0xf013a558
f0128301:	68 23 0c 00 00       	push   $0xc23
f0128306:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012830b:	e8 96 7e fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0128310:	c7 85 b0 fe ff ff ff 	movl   $0x7ff,-0x150(%ebp)
f0128317:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012831a:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f0128320:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0128323:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012832a:	eb 0e                	jmp    f012833a <test_kshrink+0x53f>
		{
			ptr[i] = 3 ;
f012832c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012832f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128332:	01 d0                	add    %edx,%eax
f0128334:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0128337:	ff 45 f4             	incl   -0xc(%ebp)
f012833a:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f0128340:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128343:	7f e7                	jg     f012832c <test_kshrink+0x531>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0128345:	e8 86 3d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012834a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012834d:	e8 42 b9 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128352:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0128355:	83 ec 0c             	sub    $0xc,%esp
f0128358:	68 00 1c 00 00       	push   $0x1c00
f012835d:	e8 82 f0 fd ff       	call   f01073e4 <kmalloc>
f0128362:	83 c4 10             	add    $0x10,%esp
f0128365:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012836b:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f0128371:	89 c1                	mov    %eax,%ecx
f0128373:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f012837a:	10 00 00 
f012837d:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0128383:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128388:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012838e:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f0128394:	ba 00 00 00 00       	mov    $0x0,%edx
f0128399:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f012839f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01283a5:	29 d0                	sub    %edx,%eax
f01283a7:	89 c3                	mov    %eax,%ebx
f01283a9:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f01283b0:	10 00 00 
f01283b3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01283b8:	0f b6 d0             	movzbl %al,%edx
f01283bb:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f01283c1:	01 d0                	add    %edx,%eax
f01283c3:	48                   	dec    %eax
f01283c4:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01283ca:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01283d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01283d5:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01283db:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01283e1:	29 d0                	sub    %edx,%eax
f01283e3:	01 c3                	add    %eax,%ebx
f01283e5:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01283ec:	10 00 00 
f01283ef:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01283f4:	0f b6 c0             	movzbl %al,%eax
f01283f7:	c1 e0 04             	shl    $0x4,%eax
f01283fa:	89 c2                	mov    %eax,%edx
f01283fc:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f0128402:	01 d0                	add    %edx,%eax
f0128404:	48                   	dec    %eax
f0128405:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f012840b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128411:	ba 00 00 00 00       	mov    $0x0,%edx
f0128416:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f012841c:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f0128422:	29 d0                	sub    %edx,%eax
f0128424:	01 d8                	add    %ebx,%eax
f0128426:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012842b:	39 c1                	cmp    %eax,%ecx
f012842d:	74 17                	je     f0128446 <test_kshrink+0x64b>
f012842f:	83 ec 04             	sub    $0x4,%esp
f0128432:	68 bc a5 13 f0       	push   $0xf013a5bc
f0128437:	68 2f 0c 00 00       	push   $0xc2f
f012843c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128441:	e8 60 7d fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128446:	e8 49 b8 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012844b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012844e:	74 17                	je     f0128467 <test_kshrink+0x66c>
f0128450:	83 ec 04             	sub    $0x4,%esp
f0128453:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0128458:	68 30 0c 00 00       	push   $0xc30
f012845d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128462:	e8 3f 7d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128467:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012846a:	e8 61 3c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012846f:	29 c3                	sub    %eax,%ebx
f0128471:	89 d8                	mov    %ebx,%eax
f0128473:	83 f8 02             	cmp    $0x2,%eax
f0128476:	74 17                	je     f012848f <test_kshrink+0x694>
f0128478:	83 ec 04             	sub    $0x4,%esp
f012847b:	68 58 a5 13 f0       	push   $0xf013a558
f0128480:	68 31 0c 00 00       	push   $0xc31
f0128485:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012848a:	e8 17 7d fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f012848f:	c7 85 b4 fe ff ff ff 	movl   $0x1bff,-0x14c(%ebp)
f0128496:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f0128499:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012849f:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01284a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01284a9:	eb 0e                	jmp    f01284b9 <test_kshrink+0x6be>
		{
			ptr[i] = 4 ;
f01284ab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01284ae:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01284b1:	01 d0                	add    %edx,%eax
f01284b3:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01284b6:	ff 45 f4             	incl   -0xc(%ebp)
f01284b9:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f01284bf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01284c2:	7f e7                	jg     f01284ab <test_kshrink+0x6b0>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01284c4:	e8 07 3c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01284c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01284cc:	e8 c3 b7 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01284d1:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01284d4:	83 ec 0c             	sub    $0xc,%esp
f01284d7:	68 00 fc 2f 00       	push   $0x2ffc00
f01284dc:	e8 03 ef fd ff       	call   f01073e4 <kmalloc>
f01284e1:	83 c4 10             	add    $0x10,%esp
f01284e4:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01284ea:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f01284f0:	89 c1                	mov    %eax,%ecx
f01284f2:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01284f9:	10 00 00 
f01284fc:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0128502:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128507:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012850d:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128513:	ba 00 00 00 00       	mov    $0x0,%edx
f0128518:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012851e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0128524:	29 d0                	sub    %edx,%eax
f0128526:	89 c3                	mov    %eax,%ebx
f0128528:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012852f:	10 00 00 
f0128532:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128537:	0f b6 d0             	movzbl %al,%edx
f012853a:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0128540:	01 d0                	add    %edx,%eax
f0128542:	48                   	dec    %eax
f0128543:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0128549:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012854f:	ba 00 00 00 00       	mov    $0x0,%edx
f0128554:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f012855a:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0128560:	29 d0                	sub    %edx,%eax
f0128562:	01 c3                	add    %eax,%ebx
f0128564:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f012856b:	10 00 00 
f012856e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128573:	0f b6 c0             	movzbl %al,%eax
f0128576:	c1 e0 04             	shl    $0x4,%eax
f0128579:	89 c2                	mov    %eax,%edx
f012857b:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0128581:	01 d0                	add    %edx,%eax
f0128583:	48                   	dec    %eax
f0128584:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012858a:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0128590:	ba 00 00 00 00       	mov    $0x0,%edx
f0128595:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012859b:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f01285a1:	29 d0                	sub    %edx,%eax
f01285a3:	01 d8                	add    %ebx,%eax
f01285a5:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01285aa:	39 c1                	cmp    %eax,%ecx
f01285ac:	74 17                	je     f01285c5 <test_kshrink+0x7ca>
f01285ae:	83 ec 04             	sub    $0x4,%esp
f01285b1:	68 bc a5 13 f0       	push   $0xf013a5bc
f01285b6:	68 3d 0c 00 00       	push   $0xc3d
f01285bb:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01285c0:	e8 e1 7b fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01285c5:	e8 ca b6 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01285ca:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01285cd:	74 17                	je     f01285e6 <test_kshrink+0x7eb>
f01285cf:	83 ec 04             	sub    $0x4,%esp
f01285d2:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01285d7:	68 3e 0c 00 00       	push   $0xc3e
f01285dc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01285e1:	e8 c0 7b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01285e6:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f01285e9:	e8 e2 3a fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01285ee:	29 c3                	sub    %eax,%ebx
f01285f0:	89 d8                	mov    %ebx,%eax
f01285f2:	3d 00 03 00 00       	cmp    $0x300,%eax
f01285f7:	74 17                	je     f0128610 <test_kshrink+0x815>
f01285f9:	83 ec 04             	sub    $0x4,%esp
f01285fc:	68 58 a5 13 f0       	push   $0xf013a558
f0128601:	68 3f 0c 00 00       	push   $0xc3f
f0128606:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012860b:	e8 96 7b fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0128610:	c7 85 b8 fe ff ff ff 	movl   $0x2ffbff,-0x148(%ebp)
f0128617:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012861a:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f0128620:	89 45 8c             	mov    %eax,-0x74(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0128623:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012862a:	eb 0e                	jmp    f012863a <test_kshrink+0x83f>
		{
			ptr[i] = 5 ;
f012862c:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012862f:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128632:	01 d0                	add    %edx,%eax
f0128634:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0128637:	ff 45 f4             	incl   -0xc(%ebp)
f012863a:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f0128640:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0128643:	7f e7                	jg     f012862c <test_kshrink+0x831>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0128645:	e8 86 3a fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012864a:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012864d:	e8 42 b6 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128652:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega);
f0128655:	83 ec 0c             	sub    $0xc,%esp
f0128658:	68 00 00 60 00       	push   $0x600000
f012865d:	e8 82 ed fd ff       	call   f01073e4 <kmalloc>
f0128662:	83 c4 10             	add    $0x10,%esp
f0128665:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012866b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128671:	89 c1                	mov    %eax,%ecx
f0128673:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012867a:	10 00 00 
f012867d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0128683:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128688:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012868e:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f0128694:	ba 00 00 00 00       	mov    $0x0,%edx
f0128699:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f012869f:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01286a5:	29 d0                	sub    %edx,%eax
f01286a7:	89 c3                	mov    %eax,%ebx
f01286a9:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f01286b0:	10 00 00 
f01286b3:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01286b8:	0f b6 d0             	movzbl %al,%edx
f01286bb:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f01286c1:	01 d0                	add    %edx,%eax
f01286c3:	48                   	dec    %eax
f01286c4:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01286ca:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01286d0:	ba 00 00 00 00       	mov    $0x0,%edx
f01286d5:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01286db:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01286e1:	29 d0                	sub    %edx,%eax
f01286e3:	01 c3                	add    %eax,%ebx
f01286e5:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01286ec:	10 00 00 
f01286ef:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01286f4:	0f b6 c0             	movzbl %al,%eax
f01286f7:	c1 e0 04             	shl    $0x4,%eax
f01286fa:	89 c2                	mov    %eax,%edx
f01286fc:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f0128702:	01 d0                	add    %edx,%eax
f0128704:	48                   	dec    %eax
f0128705:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f012870b:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128711:	ba 00 00 00 00       	mov    $0x0,%edx
f0128716:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f012871c:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f0128722:	29 d0                	sub    %edx,%eax
f0128724:	01 d8                	add    %ebx,%eax
f0128726:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012872b:	39 c1                	cmp    %eax,%ecx
f012872d:	74 17                	je     f0128746 <test_kshrink+0x94b>
f012872f:	83 ec 04             	sub    $0x4,%esp
f0128732:	68 bc a5 13 f0       	push   $0xf013a5bc
f0128737:	68 4b 0c 00 00       	push   $0xc4b
f012873c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128741:	e8 60 7a fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128746:	e8 49 b5 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012874b:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012874e:	74 17                	je     f0128767 <test_kshrink+0x96c>
f0128750:	83 ec 04             	sub    $0x4,%esp
f0128753:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0128758:	68 4c 0c 00 00       	push   $0xc4c
f012875d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128762:	e8 3f 7a fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128767:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f012876a:	e8 61 39 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012876f:	29 c3                	sub    %eax,%ebx
f0128771:	89 d8                	mov    %ebx,%eax
f0128773:	3d 00 06 00 00       	cmp    $0x600,%eax
f0128778:	74 17                	je     f0128791 <test_kshrink+0x996>
f012877a:	83 ec 04             	sub    $0x4,%esp
f012877d:	68 58 a5 13 f0       	push   $0xf013a558
f0128782:	68 4d 0c 00 00       	push   $0xc4d
f0128787:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012878c:	e8 15 7a fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
f0128791:	c7 85 bc fe ff ff ff 	movl   $0x17ffff,-0x144(%ebp)
f0128798:	ff 17 00 
		arr = (uint32*)ptr_allocations[6];
f012879b:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01287a1:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
		for (i = 0; i <= lastIndices[6]; ++i)
f01287a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01287ae:	eb 1a                	jmp    f01287ca <test_kshrink+0x9cf>
		{
			arr[i] = i ;
f01287b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01287b3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f01287ba:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f01287c0:	01 c2                	add    %eax,%edx
f01287c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01287c5:	89 02                	mov    %eax,(%edx)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[6] = (6*Mega)/sizeof(uint32) - 1;
		arr = (uint32*)ptr_allocations[6];
		for (i = 0; i <= lastIndices[6]; ++i)
f01287c7:	ff 45 f4             	incl   -0xc(%ebp)
f01287ca:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f01287d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01287d3:	7d db                	jge    f01287b0 <test_kshrink+0x9b5>
		}
	}

	//Shrink last allocated variable to 5 MB instead of 6 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f01287d5:	e8 f6 38 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01287da:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01287dd:	e8 b2 b4 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01287e2:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(5*Mega) ;
f01287e5:	83 ec 0c             	sub    $0xc,%esp
f01287e8:	68 00 00 50 00       	push   $0x500000
f01287ed:	e8 74 ec fd ff       	call   f0107466 <kshrink>
f01287f2:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f01287f5:	e8 9a b4 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01287fa:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f01287fd:	74 19                	je     f0128818 <test_kshrink+0xa1d>
f01287ff:	68 70 b2 13 f0       	push   $0xf013b270
f0128804:	68 a1 b2 13 f0       	push   $0xf013b2a1
f0128809:	68 5d 0c 00 00       	push   $0xc5d
f012880e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128813:	e8 8e 79 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 256) ;
f0128818:	e8 b3 38 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012881d:	89 c2                	mov    %eax,%edx
f012881f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128822:	29 c2                	sub    %eax,%edx
f0128824:	89 d0                	mov    %edx,%eax
f0128826:	3d 00 01 00 00       	cmp    $0x100,%eax
f012882b:	74 19                	je     f0128846 <test_kshrink+0xa4b>
f012882d:	68 7c b3 13 f0       	push   $0xf013b37c
f0128832:	68 a1 b2 13 f0       	push   $0xf013b2a1
f0128837:	68 5e 0c 00 00       	push   $0xc5e
f012883c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128841:	e8 60 79 fd ff       	call   f01001a6 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
f0128846:	c7 85 24 ff ff ff ff 	movl   $0x13ffff,-0xdc(%ebp)
f012884d:	ff 13 00 
	{
		for (i = 0; i <= newLastIndex ; ++i)
f0128850:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0128857:	eb 37                	jmp    f0128890 <test_kshrink+0xa95>
		{
			assert(arr[i] == i);
f0128859:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012885c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0128863:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0128869:	01 d0                	add    %edx,%eax
f012886b:	8b 10                	mov    (%eax),%edx
f012886d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128870:	39 c2                	cmp    %eax,%edx
f0128872:	74 19                	je     f012888d <test_kshrink+0xa92>
f0128874:	68 ac b3 13 f0       	push   $0xf013b3ac
f0128879:	68 a1 b2 13 f0       	push   $0xf013b2a1
f012887e:	68 66 0c 00 00       	push   $0xc66
f0128883:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128888:	e8 19 79 fd ff       	call   f01001a6 <_panic>
	}

	//Access elements after shrink
	int newLastIndex = (5*Mega)/sizeof(uint32) - 1;
	{
		for (i = 0; i <= newLastIndex ; ++i)
f012888d:	ff 45 f4             	incl   -0xc(%ebp)
f0128890:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0128893:	3b 85 24 ff ff ff    	cmp    -0xdc(%ebp),%eax
f0128899:	7e be                	jle    f0128859 <test_kshrink+0xa5e>
			assert(arr[i] == i);
		}

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012889b:	83 ec 0c             	sub    $0xc,%esp
f012889e:	6a 03                	push   $0x3
f01288a0:	e8 d4 3c fe ff       	call   f010c579 <sys_bypassPageFault>
f01288a5:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[6];
f01288a8:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f01288ae:	89 45 8c             	mov    %eax,-0x74(%ebp)
		ptr[5*Mega] = 10;
f01288b1:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01288b4:	05 00 00 50 00       	add    $0x500000,%eax
f01288b9:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega])) ;
f01288bc:	e8 a6 3c fe ff       	call   f010c567 <sys_rcr2>
f01288c1:	8b 55 8c             	mov    -0x74(%ebp),%edx
f01288c4:	81 c2 00 00 50 00    	add    $0x500000,%edx
f01288ca:	39 d0                	cmp    %edx,%eax
f01288cc:	74 19                	je     f01288e7 <test_kshrink+0xaec>
f01288ce:	68 b8 b3 13 f0       	push   $0xf013b3b8
f01288d3:	68 a1 b2 13 f0       	push   $0xf013b2a1
f01288d8:	68 6f 0c 00 00       	push   $0xc6f
f01288dd:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01288e2:	e8 bf 78 fd ff       	call   f01001a6 <_panic>

		ptr[5*Mega+4*kilo] = 10;
f01288e7:	8b 45 8c             	mov    -0x74(%ebp),%eax
f01288ea:	05 00 10 50 00       	add    $0x501000,%eax
f01288ef:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[5*Mega+4*kilo])) ;
f01288f2:	e8 70 3c fe ff       	call   f010c567 <sys_rcr2>
f01288f7:	8b 55 8c             	mov    -0x74(%ebp),%edx
f01288fa:	81 c2 00 10 50 00    	add    $0x501000,%edx
f0128900:	39 d0                	cmp    %edx,%eax
f0128902:	74 19                	je     f012891d <test_kshrink+0xb22>
f0128904:	68 e0 b3 13 f0       	push   $0xf013b3e0
f0128909:	68 a1 b2 13 f0       	push   $0xf013b2a1
f012890e:	68 72 0c 00 00       	push   $0xc72
f0128913:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128918:	e8 89 78 fd ff       	call   f01001a6 <_panic>

		ptr[6*Mega - kilo] = 10;
f012891d:	8b 45 8c             	mov    -0x74(%ebp),%eax
f0128920:	05 00 fc 5f 00       	add    $0x5ffc00,%eax
f0128925:	c6 00 0a             	movb   $0xa,(%eax)
		assert(sys_rcr2() == (uint32)&(ptr[6*Mega - kilo])) ;
f0128928:	e8 3a 3c fe ff       	call   f010c567 <sys_rcr2>
f012892d:	8b 55 8c             	mov    -0x74(%ebp),%edx
f0128930:	81 c2 00 fc 5f 00    	add    $0x5ffc00,%edx
f0128936:	39 d0                	cmp    %edx,%eax
f0128938:	74 19                	je     f0128953 <test_kshrink+0xb58>
f012893a:	68 0c b4 13 f0       	push   $0xf013b40c
f012893f:	68 a1 b2 13 f0       	push   $0xf013b2a1
f0128944:	68 75 0c 00 00       	push   $0xc75
f0128949:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012894e:	e8 53 78 fd ff       	call   f01001a6 <_panic>

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f0128953:	83 ec 0c             	sub    $0xc,%esp
f0128956:	6a 00                	push   $0x0
f0128958:	e8 1c 3c fe ff       	call   f010c579 <sys_bypassPageFault>
f012895d:	83 c4 10             	add    $0x10,%esp
	}

	//Shrink it again to 2 MB instead of 5 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128960:	e8 6b 37 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0128965:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128968:	e8 27 b3 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012896d:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(2*Mega) ;
f0128970:	83 ec 0c             	sub    $0xc,%esp
f0128973:	68 00 00 20 00       	push   $0x200000
f0128978:	e8 e9 ea fd ff       	call   f0107466 <kshrink>
f012897d:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128980:	e8 0f b3 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128985:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128988:	74 19                	je     f01289a3 <test_kshrink+0xba8>
f012898a:	68 70 b2 13 f0       	push   $0xf013b270
f012898f:	68 a1 b2 13 f0       	push   $0xf013b2a1
f0128994:	68 82 0c 00 00       	push   $0xc82
f0128999:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012899e:	e8 03 78 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 768) ;
f01289a3:	e8 28 37 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01289a8:	89 c2                	mov    %eax,%edx
f01289aa:	8b 45 dc             	mov    -0x24(%ebp),%eax
f01289ad:	29 c2                	sub    %eax,%edx
f01289af:	89 d0                	mov    %edx,%eax
f01289b1:	3d 00 03 00 00       	cmp    $0x300,%eax
f01289b6:	74 19                	je     f01289d1 <test_kshrink+0xbd6>
f01289b8:	68 38 b4 13 f0       	push   $0xf013b438
f01289bd:	68 a1 b2 13 f0       	push   $0xf013b2a1
f01289c2:	68 83 0c 00 00       	push   $0xc83
f01289c7:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01289cc:	e8 d5 77 fd ff       	call   f01001a6 <_panic>


	//Allocate after shrinking last var
	{
		//4 MB
		freeFrames = sys_calculate_free_frames() ;
f01289d1:	e8 fa 36 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01289d6:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01289d9:	e8 b6 b2 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01289de:	89 45 d8             	mov    %eax,-0x28(%ebp)
		ptr_allocations[7] = kmalloc(4*Mega);
f01289e1:	83 ec 0c             	sub    $0xc,%esp
f01289e4:	68 00 00 40 00       	push   $0x400000
f01289e9:	e8 f6 e9 fd ff       	call   f01073e4 <kmalloc>
f01289ee:	83 c4 10             	add    $0x10,%esp
f01289f1:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		cprintf("ACTUAL = %x, DESIRED = %x\n", (uint32) ptr_allocations[7] ,(ACTUAL_START + 7*Mega + 16*kilo + 2*Mega));
f01289f7:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01289fe:	10 00 00 
f0128a01:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f0128a07:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128a0c:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f0128a12:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128a18:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a1d:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0128a23:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f0128a29:	29 d0                	sub    %edx,%eax
f0128a2b:	89 c1                	mov    %eax,%ecx
f0128a2d:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0128a34:	10 00 00 
f0128a37:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128a3c:	0f b6 d0             	movzbl %al,%edx
f0128a3f:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f0128a45:	01 d0                	add    %edx,%eax
f0128a47:	48                   	dec    %eax
f0128a48:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0128a4e:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128a54:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a59:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0128a5f:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0128a65:	29 d0                	sub    %edx,%eax
f0128a67:	01 c1                	add    %eax,%ecx
f0128a69:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0128a70:	10 00 00 
f0128a73:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128a78:	0f b6 c0             	movzbl %al,%eax
f0128a7b:	c1 e0 04             	shl    $0x4,%eax
f0128a7e:	89 c2                	mov    %eax,%edx
f0128a80:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f0128a86:	01 d0                	add    %edx,%eax
f0128a88:	48                   	dec    %eax
f0128a89:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0128a8f:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128a95:	ba 00 00 00 00       	mov    $0x0,%edx
f0128a9a:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0128aa0:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f0128aa6:	29 d0                	sub    %edx,%eax
f0128aa8:	01 c8                	add    %ecx,%eax
f0128aaa:	8d 90 00 80 90 f6    	lea    -0x96f8000(%eax),%edx
f0128ab0:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0128ab6:	83 ec 04             	sub    $0x4,%esp
f0128ab9:	52                   	push   %edx
f0128aba:	50                   	push   %eax
f0128abb:	68 68 b4 13 f0       	push   $0xf013b468
f0128ac0:	e8 68 81 fd ff       	call   f0100c2d <cprintf>
f0128ac5:	83 c4 10             	add    $0x10,%esp
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 7*Mega + 16*kilo + 2*Mega)) panic("Wrong start address after kshrink()... check the updating of your data structures");
f0128ac8:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f0128ace:	89 c1                	mov    %eax,%ecx
f0128ad0:	c7 85 08 ff ff ff 00 	movl   $0x1000,-0xf8(%ebp)
f0128ad7:	10 00 00 
f0128ada:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0128ae0:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128ae5:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
f0128aeb:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128af1:	ba 00 00 00 00       	mov    $0x0,%edx
f0128af6:	f7 b5 08 ff ff ff    	divl   -0xf8(%ebp)
f0128afc:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f0128b02:	29 d0                	sub    %edx,%eax
f0128b04:	89 c3                	mov    %eax,%ebx
f0128b06:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0128b0d:	10 00 00 
f0128b10:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128b15:	0f b6 d0             	movzbl %al,%edx
f0128b18:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0128b1e:	01 d0                	add    %edx,%eax
f0128b20:	48                   	dec    %eax
f0128b21:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0128b27:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128b2d:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b32:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0128b38:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0128b3e:	29 d0                	sub    %edx,%eax
f0128b40:	01 c3                	add    %eax,%ebx
f0128b42:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0128b49:	10 00 00 
f0128b4c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128b51:	0f b6 c0             	movzbl %al,%eax
f0128b54:	c1 e0 04             	shl    $0x4,%eax
f0128b57:	89 c2                	mov    %eax,%edx
f0128b59:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0128b5f:	01 d0                	add    %edx,%eax
f0128b61:	48                   	dec    %eax
f0128b62:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0128b68:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0128b6e:	ba 00 00 00 00       	mov    $0x0,%edx
f0128b73:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0128b79:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0128b7f:	29 d0                	sub    %edx,%eax
f0128b81:	01 d8                	add    %ebx,%eax
f0128b83:	2d 00 80 6f 09       	sub    $0x96f8000,%eax
f0128b88:	39 c1                	cmp    %eax,%ecx
f0128b8a:	74 17                	je     f0128ba3 <test_kshrink+0xda8>
f0128b8c:	83 ec 04             	sub    $0x4,%esp
f0128b8f:	68 84 b4 13 f0       	push   $0xf013b484
f0128b94:	68 8e 0c 00 00       	push   $0xc8e
f0128b99:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128b9e:	e8 03 76 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128ba3:	e8 ec b0 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128ba8:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128bab:	74 17                	je     f0128bc4 <test_kshrink+0xdc9>
f0128bad:	83 ec 04             	sub    $0x4,%esp
f0128bb0:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0128bb5:	68 8f 0c 00 00       	push   $0xc8f
f0128bba:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128bbf:	e8 e2 75 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4*Mega/PAGE_SIZE) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128bc4:	8b 5d dc             	mov    -0x24(%ebp),%ebx
f0128bc7:	e8 04 35 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0128bcc:	29 c3                	sub    %eax,%ebx
f0128bce:	89 d8                	mov    %ebx,%eax
f0128bd0:	3d 00 04 00 00       	cmp    $0x400,%eax
f0128bd5:	74 17                	je     f0128bee <test_kshrink+0xdf3>
f0128bd7:	83 ec 04             	sub    $0x4,%esp
f0128bda:	68 58 a5 13 f0       	push   $0xf013a558
f0128bdf:	68 90 0c 00 00       	push   $0xc90
f0128be4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128be9:	e8 b8 75 fd ff       	call   f01001a6 <_panic>


	//kfree the shrunk variable
	{
		//kfree 2 MB (shrunk)
		freeFrames = sys_calculate_free_frames() ;
f0128bee:	e8 dd 34 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0128bf3:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128bf6:	e8 99 b0 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128bfb:	89 45 d8             	mov    %eax,-0x28(%ebp)
		kfree(ptr_allocations[6]);
f0128bfe:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f0128c04:	83 ec 0c             	sub    $0xc,%esp
f0128c07:	50                   	push   %eax
f0128c08:	e8 f1 e7 fd ff       	call   f01073fe <kfree>
f0128c0d:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128c10:	e8 7f b0 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128c15:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128c18:	74 17                	je     f0128c31 <test_kshrink+0xe36>
f0128c1a:	83 ec 04             	sub    $0x4,%esp
f0128c1d:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0128c22:	68 9a 0c 00 00       	push   $0xc9a
f0128c27:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128c2c:	e8 75 75 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: attempt to kfree a non-existing ptr. It should do nothing");
f0128c31:	e8 9a 34 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0128c36:	89 c2                	mov    %eax,%edx
f0128c38:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128c3b:	29 c2                	sub    %eax,%edx
f0128c3d:	89 d0                	mov    %edx,%eax
f0128c3f:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128c44:	74 17                	je     f0128c5d <test_kshrink+0xe62>
f0128c46:	83 ec 04             	sub    $0x4,%esp
f0128c49:	68 88 ad 13 f0       	push   $0xf013ad88
f0128c4e:	68 9b 0c 00 00       	push   $0xc9b
f0128c53:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128c58:	e8 49 75 fd ff       	call   f01001a6 <_panic>
	}

	//Shrink last allocated variable to 4 MB - 20 kilo instead of 4 MB
	{
		freeFrames = sys_calculate_free_frames() ;
f0128c5d:	e8 6e 34 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0128c62:	89 45 dc             	mov    %eax,-0x24(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128c65:	e8 2a b0 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128c6a:	89 45 d8             	mov    %eax,-0x28(%ebp)

		kshrink(4*Mega - 20*kilo) ;
f0128c6d:	83 ec 0c             	sub    $0xc,%esp
f0128c70:	68 00 b0 3f 00       	push   $0x3fb000
f0128c75:	e8 ec e7 fd ff       	call   f0107466 <kshrink>
f0128c7a:	83 c4 10             	add    $0x10,%esp

		assert(pf_calculate_free_frames() - freeDiskFrames == 0) ;
f0128c7d:	e8 12 b0 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128c82:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f0128c85:	74 19                	je     f0128ca0 <test_kshrink+0xea5>
f0128c87:	68 70 b2 13 f0       	push   $0xf013b270
f0128c8c:	68 a1 b2 13 f0       	push   $0xf013b2a1
f0128c91:	68 a5 0c 00 00       	push   $0xca5
f0128c96:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128c9b:	e8 06 75 fd ff       	call   f01001a6 <_panic>
		assert(sys_calculate_free_frames() - freeFrames == 5) ;
f0128ca0:	e8 2b 34 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0128ca5:	89 c2                	mov    %eax,%edx
f0128ca7:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0128caa:	29 c2                	sub    %eax,%edx
f0128cac:	89 d0                	mov    %edx,%eax
f0128cae:	83 f8 05             	cmp    $0x5,%eax
f0128cb1:	74 19                	je     f0128ccc <test_kshrink+0xed1>
f0128cb3:	68 d8 b4 13 f0       	push   $0xf013b4d8
f0128cb8:	68 a1 b2 13 f0       	push   $0xf013b2a1
f0128cbd:	68 a6 0c 00 00       	push   $0xca6
f0128cc2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128cc7:	e8 da 74 fd ff       	call   f01001a6 <_panic>
	}

	cprintf("\nCongratulations!! your modification is run successfully.\n");
f0128ccc:	83 ec 0c             	sub    $0xc,%esp
f0128ccf:	68 34 b2 13 f0       	push   $0xf013b234
f0128cd4:	e8 54 7f fd ff       	call   f0100c2d <cprintf>
f0128cd9:	83 c4 10             	add    $0x10,%esp

	return 1;
f0128cdc:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0128ce1:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0128ce4:	5b                   	pop    %ebx
f0128ce5:	5f                   	pop    %edi
f0128ce6:	5d                   	pop    %ebp
f0128ce7:	c3                   	ret    

f0128ce8 <test_kfreelast>:


int test_kfreelast()
{
f0128ce8:	55                   	push   %ebp
f0128ce9:	89 e5                	mov    %esp,%ebp
f0128ceb:	57                   	push   %edi
f0128cec:	53                   	push   %ebx
f0128ced:	81 ec 90 02 00 00    	sub    $0x290,%esp
	char minByte = 1<<7;
f0128cf3:	c6 45 eb 80          	movb   $0x80,-0x15(%ebp)
	char maxByte = 0x7F;
f0128cf7:	c6 45 ea 7f          	movb   $0x7f,-0x16(%ebp)
	short minShort = 1<<15 ;
f0128cfb:	66 c7 45 e8 00 80    	movw   $0x8000,-0x18(%ebp)
	short maxShort = 0x7FFF;
f0128d01:	66 c7 45 e6 ff 7f    	movw   $0x7fff,-0x1a(%ebp)
	int minInt = 1<<31 ;
f0128d07:	c7 45 e0 00 00 00 80 	movl   $0x80000000,-0x20(%ebp)
	int maxInt = 0x7FFFFFFF;
f0128d0e:	c7 45 dc ff ff ff 7f 	movl   $0x7fffffff,-0x24(%ebp)
	char *byteArr, *byteArr2 ;
	short *shortArr, *shortArr2 ;
	int *intArr;
	struct MyStruct *structArr ;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2, lastIndexOfInt, lastIndexOfStruct;
	int start_freeFrames = sys_calculate_free_frames() ;
f0128d15:	e8 b6 33 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0128d1a:	89 45 d8             	mov    %eax,-0x28(%ebp)

	//malloc some spaces
	int i, ce, freeFrames, freeDiskFrames ;
	char* ptr;
	int lastIndices[20] = {0};
f0128d1d:	8d 95 0c fe ff ff    	lea    -0x1f4(%ebp),%edx
f0128d23:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128d28:	b8 00 00 00 00       	mov    $0x0,%eax
f0128d2d:	89 d7                	mov    %edx,%edi
f0128d2f:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = {0};
f0128d31:	8d 95 bc fd ff ff    	lea    -0x244(%ebp),%edx
f0128d37:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128d3c:	b8 00 00 00 00       	mov    $0x0,%eax
f0128d41:	89 d7                	mov    %edx,%edi
f0128d43:	f3 ab                	rep stos %eax,%es:(%edi)
	void* ptr_allocations[20] = {0};
f0128d45:	8d 95 6c fd ff ff    	lea    -0x294(%ebp),%edx
f0128d4b:	b9 14 00 00 00       	mov    $0x14,%ecx
f0128d50:	b8 00 00 00 00       	mov    $0x0,%eax
f0128d55:	89 d7                	mov    %edx,%edi
f0128d57:	f3 ab                	rep stos %eax,%es:(%edi)
	{
		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128d59:	e8 72 33 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0128d5e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128d61:	e8 2e af fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128d66:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[0] = kmalloc(2*Mega-kilo);
f0128d69:	83 ec 0c             	sub    $0xc,%esp
f0128d6c:	68 00 fc 1f 00       	push   $0x1ffc00
f0128d71:	e8 6e e6 fd ff       	call   f01073e4 <kmalloc>
f0128d76:	83 c4 10             	add    $0x10,%esp
f0128d79:	89 85 6c fd ff ff    	mov    %eax,-0x294(%ebp)
		if ((uint32) ptr_allocations[0] !=  (ACTUAL_START)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128d7f:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0128d85:	89 c1                	mov    %eax,%ecx
f0128d87:	c7 45 cc 00 10 00 00 	movl   $0x1000,-0x34(%ebp)
f0128d8e:	8b 45 cc             	mov    -0x34(%ebp),%eax
f0128d91:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128d96:	89 45 c8             	mov    %eax,-0x38(%ebp)
f0128d99:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128d9c:	ba 00 00 00 00       	mov    $0x0,%edx
f0128da1:	f7 75 cc             	divl   -0x34(%ebp)
f0128da4:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0128da7:	29 d0                	sub    %edx,%eax
f0128da9:	89 c3                	mov    %eax,%ebx
f0128dab:	c7 45 c4 00 10 00 00 	movl   $0x1000,-0x3c(%ebp)
f0128db2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128db7:	0f b6 d0             	movzbl %al,%edx
f0128dba:	8b 45 c4             	mov    -0x3c(%ebp),%eax
f0128dbd:	01 d0                	add    %edx,%eax
f0128dbf:	48                   	dec    %eax
f0128dc0:	89 45 c0             	mov    %eax,-0x40(%ebp)
f0128dc3:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128dc6:	ba 00 00 00 00       	mov    $0x0,%edx
f0128dcb:	f7 75 c4             	divl   -0x3c(%ebp)
f0128dce:	8b 45 c0             	mov    -0x40(%ebp),%eax
f0128dd1:	29 d0                	sub    %edx,%eax
f0128dd3:	01 c3                	add    %eax,%ebx
f0128dd5:	c7 45 bc 00 10 00 00 	movl   $0x1000,-0x44(%ebp)
f0128ddc:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128de1:	0f b6 c0             	movzbl %al,%eax
f0128de4:	c1 e0 04             	shl    $0x4,%eax
f0128de7:	89 c2                	mov    %eax,%edx
f0128de9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f0128dec:	01 d0                	add    %edx,%eax
f0128dee:	48                   	dec    %eax
f0128def:	89 45 b8             	mov    %eax,-0x48(%ebp)
f0128df2:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128df5:	ba 00 00 00 00       	mov    $0x0,%edx
f0128dfa:	f7 75 bc             	divl   -0x44(%ebp)
f0128dfd:	8b 45 b8             	mov    -0x48(%ebp),%eax
f0128e00:	29 d0                	sub    %edx,%eax
f0128e02:	01 d8                	add    %ebx,%eax
f0128e04:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f0128e09:	39 c1                	cmp    %eax,%ecx
f0128e0b:	74 17                	je     f0128e24 <test_kfreelast+0x13c>
f0128e0d:	83 ec 04             	sub    $0x4,%esp
f0128e10:	68 bc a5 13 f0       	push   $0xf013a5bc
f0128e15:	68 ca 0c 00 00       	push   $0xcca
f0128e1a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128e1f:	e8 82 73 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128e24:	e8 6b ae fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128e29:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128e2c:	74 17                	je     f0128e45 <test_kfreelast+0x15d>
f0128e2e:	83 ec 04             	sub    $0x4,%esp
f0128e31:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0128e36:	68 cb 0c 00 00       	push   $0xccb
f0128e3b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128e40:	e8 61 73 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128e45:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128e48:	e8 83 32 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0128e4d:	29 c3                	sub    %eax,%ebx
f0128e4f:	89 d8                	mov    %ebx,%eax
f0128e51:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128e56:	74 17                	je     f0128e6f <test_kfreelast+0x187>
f0128e58:	83 ec 04             	sub    $0x4,%esp
f0128e5b:	68 58 a5 13 f0       	push   $0xf013a558
f0128e60:	68 cc 0c 00 00       	push   $0xccc
f0128e65:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128e6a:	e8 37 73 fd ff       	call   f01001a6 <_panic>
		lastIndices[0] = (2*Mega-kilo)/sizeof(char) - 1;
f0128e6f:	c7 85 0c fe ff ff ff 	movl   $0x1ffbff,-0x1f4(%ebp)
f0128e76:	fb 1f 00 

		//2 MB
		freeFrames = sys_calculate_free_frames() ;
f0128e79:	e8 52 32 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0128e7e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128e81:	e8 0e ae fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128e86:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[1] = kmalloc(2*Mega-kilo);
f0128e89:	83 ec 0c             	sub    $0xc,%esp
f0128e8c:	68 00 fc 1f 00       	push   $0x1ffc00
f0128e91:	e8 4e e5 fd ff       	call   f01073e4 <kmalloc>
f0128e96:	83 c4 10             	add    $0x10,%esp
f0128e99:	89 85 70 fd ff ff    	mov    %eax,-0x290(%ebp)
		if ((uint32) ptr_allocations[1] != (ACTUAL_START + 2*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128e9f:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f0128ea5:	89 c1                	mov    %eax,%ecx
f0128ea7:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f0128eae:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f0128eb1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128eb6:	89 45 b0             	mov    %eax,-0x50(%ebp)
f0128eb9:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128ebc:	ba 00 00 00 00       	mov    $0x0,%edx
f0128ec1:	f7 75 b4             	divl   -0x4c(%ebp)
f0128ec4:	8b 45 b0             	mov    -0x50(%ebp),%eax
f0128ec7:	29 d0                	sub    %edx,%eax
f0128ec9:	89 c3                	mov    %eax,%ebx
f0128ecb:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f0128ed2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128ed7:	0f b6 d0             	movzbl %al,%edx
f0128eda:	8b 45 ac             	mov    -0x54(%ebp),%eax
f0128edd:	01 d0                	add    %edx,%eax
f0128edf:	48                   	dec    %eax
f0128ee0:	89 45 a8             	mov    %eax,-0x58(%ebp)
f0128ee3:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128ee6:	ba 00 00 00 00       	mov    $0x0,%edx
f0128eeb:	f7 75 ac             	divl   -0x54(%ebp)
f0128eee:	8b 45 a8             	mov    -0x58(%ebp),%eax
f0128ef1:	29 d0                	sub    %edx,%eax
f0128ef3:	01 c3                	add    %eax,%ebx
f0128ef5:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f0128efc:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128f01:	0f b6 c0             	movzbl %al,%eax
f0128f04:	c1 e0 04             	shl    $0x4,%eax
f0128f07:	89 c2                	mov    %eax,%edx
f0128f09:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f0128f0c:	01 d0                	add    %edx,%eax
f0128f0e:	48                   	dec    %eax
f0128f0f:	89 45 a0             	mov    %eax,-0x60(%ebp)
f0128f12:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128f15:	ba 00 00 00 00       	mov    $0x0,%edx
f0128f1a:	f7 75 a4             	divl   -0x5c(%ebp)
f0128f1d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f0128f20:	29 d0                	sub    %edx,%eax
f0128f22:	01 d8                	add    %ebx,%eax
f0128f24:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f0128f29:	39 c1                	cmp    %eax,%ecx
f0128f2b:	74 17                	je     f0128f44 <test_kfreelast+0x25c>
f0128f2d:	83 ec 04             	sub    $0x4,%esp
f0128f30:	68 bc a5 13 f0       	push   $0xf013a5bc
f0128f35:	68 d3 0c 00 00       	push   $0xcd3
f0128f3a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128f3f:	e8 62 72 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0128f44:	e8 4b ad fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128f49:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0128f4c:	74 17                	je     f0128f65 <test_kfreelast+0x27d>
f0128f4e:	83 ec 04             	sub    $0x4,%esp
f0128f51:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0128f56:	68 d4 0c 00 00       	push   $0xcd4
f0128f5b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128f60:	e8 41 72 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512) panic("Wrong allocation: pages are not loaded successfully into memory");
f0128f65:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0128f68:	e8 63 31 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0128f6d:	29 c3                	sub    %eax,%ebx
f0128f6f:	89 d8                	mov    %ebx,%eax
f0128f71:	3d 00 02 00 00       	cmp    $0x200,%eax
f0128f76:	74 17                	je     f0128f8f <test_kfreelast+0x2a7>
f0128f78:	83 ec 04             	sub    $0x4,%esp
f0128f7b:	68 58 a5 13 f0       	push   $0xf013a558
f0128f80:	68 d5 0c 00 00       	push   $0xcd5
f0128f85:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0128f8a:	e8 17 72 fd ff       	call   f01001a6 <_panic>
		lastIndices[1] = (2*Mega-kilo)/sizeof(char) - 1;
f0128f8f:	c7 85 10 fe ff ff ff 	movl   $0x1ffbff,-0x1f0(%ebp)
f0128f96:	fb 1f 00 

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f0128f99:	e8 32 31 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0128f9e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0128fa1:	e8 ee ac fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0128fa6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[2] = kmalloc(2*kilo);
f0128fa9:	83 ec 0c             	sub    $0xc,%esp
f0128fac:	68 00 08 00 00       	push   $0x800
f0128fb1:	e8 2e e4 fd ff       	call   f01073e4 <kmalloc>
f0128fb6:	83 c4 10             	add    $0x10,%esp
f0128fb9:	89 85 74 fd ff ff    	mov    %eax,-0x28c(%ebp)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0128fbf:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f0128fc5:	89 c1                	mov    %eax,%ecx
f0128fc7:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f0128fce:	8b 45 9c             	mov    -0x64(%ebp),%eax
f0128fd1:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0128fd6:	89 45 98             	mov    %eax,-0x68(%ebp)
f0128fd9:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128fdc:	ba 00 00 00 00       	mov    $0x0,%edx
f0128fe1:	f7 75 9c             	divl   -0x64(%ebp)
f0128fe4:	8b 45 98             	mov    -0x68(%ebp),%eax
f0128fe7:	29 d0                	sub    %edx,%eax
f0128fe9:	89 c3                	mov    %eax,%ebx
f0128feb:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f0128ff2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0128ff7:	0f b6 d0             	movzbl %al,%edx
f0128ffa:	8b 45 94             	mov    -0x6c(%ebp),%eax
f0128ffd:	01 d0                	add    %edx,%eax
f0128fff:	48                   	dec    %eax
f0129000:	89 45 90             	mov    %eax,-0x70(%ebp)
f0129003:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129006:	ba 00 00 00 00       	mov    $0x0,%edx
f012900b:	f7 75 94             	divl   -0x6c(%ebp)
f012900e:	8b 45 90             	mov    -0x70(%ebp),%eax
f0129011:	29 d0                	sub    %edx,%eax
f0129013:	01 c3                	add    %eax,%ebx
f0129015:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012901c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129021:	0f b6 c0             	movzbl %al,%eax
f0129024:	c1 e0 04             	shl    $0x4,%eax
f0129027:	89 c2                	mov    %eax,%edx
f0129029:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012902c:	01 d0                	add    %edx,%eax
f012902e:	48                   	dec    %eax
f012902f:	89 45 88             	mov    %eax,-0x78(%ebp)
f0129032:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129035:	ba 00 00 00 00       	mov    $0x0,%edx
f012903a:	f7 75 8c             	divl   -0x74(%ebp)
f012903d:	8b 45 88             	mov    -0x78(%ebp),%eax
f0129040:	29 d0                	sub    %edx,%eax
f0129042:	01 d8                	add    %ebx,%eax
f0129044:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f0129049:	39 c1                	cmp    %eax,%ecx
f012904b:	74 17                	je     f0129064 <test_kfreelast+0x37c>
f012904d:	83 ec 04             	sub    $0x4,%esp
f0129050:	68 bc a5 13 f0       	push   $0xf013a5bc
f0129055:	68 dc 0c 00 00       	push   $0xcdc
f012905a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012905f:	e8 42 71 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129064:	e8 2b ac fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0129069:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012906c:	74 17                	je     f0129085 <test_kfreelast+0x39d>
f012906e:	83 ec 04             	sub    $0x4,%esp
f0129071:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0129076:	68 dd 0c 00 00       	push   $0xcdd
f012907b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129080:	e8 21 71 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129085:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129088:	e8 43 30 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012908d:	29 c3                	sub    %eax,%ebx
f012908f:	89 d8                	mov    %ebx,%eax
f0129091:	83 f8 01             	cmp    $0x1,%eax
f0129094:	74 17                	je     f01290ad <test_kfreelast+0x3c5>
f0129096:	83 ec 04             	sub    $0x4,%esp
f0129099:	68 58 a5 13 f0       	push   $0xf013a558
f012909e:	68 de 0c 00 00       	push   $0xcde
f01290a3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01290a8:	e8 f9 70 fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
f01290ad:	c7 85 14 fe ff ff ff 	movl   $0x7ff,-0x1ec(%ebp)
f01290b4:	07 00 00 
		ptr = (char*)ptr_allocations[2];
f01290b7:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01290bd:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01290c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01290c7:	eb 0e                	jmp    f01290d7 <test_kfreelast+0x3ef>
		{
			ptr[i] = 2 ;
f01290c9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01290cc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01290cf:	01 d0                	add    %edx,%eax
f01290d1:	c6 00 02             	movb   $0x2,(%eax)
		if ((uint32) ptr_allocations[2] != (ACTUAL_START + 4*Mega)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[2] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01290d4:	ff 45 f4             	incl   -0xc(%ebp)
f01290d7:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01290dd:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01290e0:	7f e7                	jg     f01290c9 <test_kfreelast+0x3e1>
		{
			ptr[i] = 2 ;
		}

		//2 KB
		freeFrames = sys_calculate_free_frames() ;
f01290e2:	e8 e9 2f fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01290e7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01290ea:	e8 a5 ab fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01290ef:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[3] = kmalloc(2*kilo);
f01290f2:	83 ec 0c             	sub    $0xc,%esp
f01290f5:	68 00 08 00 00       	push   $0x800
f01290fa:	e8 e5 e2 fd ff       	call   f01073e4 <kmalloc>
f01290ff:	83 c4 10             	add    $0x10,%esp
f0129102:	89 85 78 fd ff ff    	mov    %eax,-0x288(%ebp)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129108:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012910e:	89 c1                	mov    %eax,%ecx
f0129110:	c7 45 80 00 10 00 00 	movl   $0x1000,-0x80(%ebp)
f0129117:	8b 45 80             	mov    -0x80(%ebp),%eax
f012911a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012911f:	89 85 7c ff ff ff    	mov    %eax,-0x84(%ebp)
f0129125:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012912b:	ba 00 00 00 00       	mov    $0x0,%edx
f0129130:	f7 75 80             	divl   -0x80(%ebp)
f0129133:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f0129139:	29 d0                	sub    %edx,%eax
f012913b:	89 c3                	mov    %eax,%ebx
f012913d:	c7 85 78 ff ff ff 00 	movl   $0x1000,-0x88(%ebp)
f0129144:	10 00 00 
f0129147:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012914c:	0f b6 d0             	movzbl %al,%edx
f012914f:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f0129155:	01 d0                	add    %edx,%eax
f0129157:	48                   	dec    %eax
f0129158:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
f012915e:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129164:	ba 00 00 00 00       	mov    $0x0,%edx
f0129169:	f7 b5 78 ff ff ff    	divl   -0x88(%ebp)
f012916f:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f0129175:	29 d0                	sub    %edx,%eax
f0129177:	01 c3                	add    %eax,%ebx
f0129179:	c7 85 70 ff ff ff 00 	movl   $0x1000,-0x90(%ebp)
f0129180:	10 00 00 
f0129183:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129188:	0f b6 c0             	movzbl %al,%eax
f012918b:	c1 e0 04             	shl    $0x4,%eax
f012918e:	89 c2                	mov    %eax,%edx
f0129190:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f0129196:	01 d0                	add    %edx,%eax
f0129198:	48                   	dec    %eax
f0129199:	89 85 6c ff ff ff    	mov    %eax,-0x94(%ebp)
f012919f:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01291a5:	ba 00 00 00 00       	mov    $0x0,%edx
f01291aa:	f7 b5 70 ff ff ff    	divl   -0x90(%ebp)
f01291b0:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f01291b6:	29 d0                	sub    %edx,%eax
f01291b8:	01 d8                	add    %ebx,%eax
f01291ba:	2d 00 b0 bf 09       	sub    $0x9bfb000,%eax
f01291bf:	39 c1                	cmp    %eax,%ecx
f01291c1:	74 17                	je     f01291da <test_kfreelast+0x4f2>
f01291c3:	83 ec 04             	sub    $0x4,%esp
f01291c6:	68 bc a5 13 f0       	push   $0xf013a5bc
f01291cb:	68 ea 0c 00 00       	push   $0xcea
f01291d0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01291d5:	e8 cc 6f fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01291da:	e8 b5 aa fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01291df:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01291e2:	74 17                	je     f01291fb <test_kfreelast+0x513>
f01291e4:	83 ec 04             	sub    $0x4,%esp
f01291e7:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01291ec:	68 eb 0c 00 00       	push   $0xceb
f01291f1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01291f6:	e8 ab 6f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
f01291fb:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01291fe:	e8 cd 2e fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0129203:	29 c3                	sub    %eax,%ebx
f0129205:	89 d8                	mov    %ebx,%eax
f0129207:	83 f8 01             	cmp    $0x1,%eax
f012920a:	74 17                	je     f0129223 <test_kfreelast+0x53b>
f012920c:	83 ec 04             	sub    $0x4,%esp
f012920f:	68 58 a5 13 f0       	push   $0xf013a558
f0129214:	68 ec 0c 00 00       	push   $0xcec
f0129219:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012921e:	e8 83 6f fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
f0129223:	c7 85 18 fe ff ff ff 	movl   $0x7ff,-0x1e8(%ebp)
f012922a:	07 00 00 
		ptr = (char*)ptr_allocations[3];
f012922d:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129233:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129236:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012923d:	eb 0e                	jmp    f012924d <test_kfreelast+0x565>
		{
			ptr[i] = 3 ;
f012923f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129242:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129245:	01 d0                	add    %edx,%eax
f0129247:	c6 00 03             	movb   $0x3,(%eax)
		if ((uint32) ptr_allocations[3] != (ACTUAL_START + 4*Mega + 4*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 1) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[3] = (2*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f012924a:	ff 45 f4             	incl   -0xc(%ebp)
f012924d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129253:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129256:	7f e7                	jg     f012923f <test_kfreelast+0x557>
		{
			ptr[i] = 3 ;
		}

		//7 KB
		freeFrames = sys_calculate_free_frames() ;
f0129258:	e8 73 2e fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012925d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129260:	e8 2f aa fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0129265:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[4] = kmalloc(7*kilo);
f0129268:	83 ec 0c             	sub    $0xc,%esp
f012926b:	68 00 1c 00 00       	push   $0x1c00
f0129270:	e8 6f e1 fd ff       	call   f01073e4 <kmalloc>
f0129275:	83 c4 10             	add    $0x10,%esp
f0129278:	89 85 7c fd ff ff    	mov    %eax,-0x284(%ebp)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012927e:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129284:	89 c1                	mov    %eax,%ecx
f0129286:	c7 85 68 ff ff ff 00 	movl   $0x1000,-0x98(%ebp)
f012928d:	10 00 00 
f0129290:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f0129296:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012929b:	89 85 64 ff ff ff    	mov    %eax,-0x9c(%ebp)
f01292a1:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01292a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01292ac:	f7 b5 68 ff ff ff    	divl   -0x98(%ebp)
f01292b2:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f01292b8:	29 d0                	sub    %edx,%eax
f01292ba:	89 c3                	mov    %eax,%ebx
f01292bc:	c7 85 60 ff ff ff 00 	movl   $0x1000,-0xa0(%ebp)
f01292c3:	10 00 00 
f01292c6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01292cb:	0f b6 d0             	movzbl %al,%edx
f01292ce:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f01292d4:	01 d0                	add    %edx,%eax
f01292d6:	48                   	dec    %eax
f01292d7:	89 85 5c ff ff ff    	mov    %eax,-0xa4(%ebp)
f01292dd:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01292e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01292e8:	f7 b5 60 ff ff ff    	divl   -0xa0(%ebp)
f01292ee:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f01292f4:	29 d0                	sub    %edx,%eax
f01292f6:	01 c3                	add    %eax,%ebx
f01292f8:	c7 85 58 ff ff ff 00 	movl   $0x1000,-0xa8(%ebp)
f01292ff:	10 00 00 
f0129302:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129307:	0f b6 c0             	movzbl %al,%eax
f012930a:	c1 e0 04             	shl    $0x4,%eax
f012930d:	89 c2                	mov    %eax,%edx
f012930f:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f0129315:	01 d0                	add    %edx,%eax
f0129317:	48                   	dec    %eax
f0129318:	89 85 54 ff ff ff    	mov    %eax,-0xac(%ebp)
f012931e:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129324:	ba 00 00 00 00       	mov    $0x0,%edx
f0129329:	f7 b5 58 ff ff ff    	divl   -0xa8(%ebp)
f012932f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f0129335:	29 d0                	sub    %edx,%eax
f0129337:	01 d8                	add    %ebx,%eax
f0129339:	2d 00 a0 bf 09       	sub    $0x9bfa000,%eax
f012933e:	39 c1                	cmp    %eax,%ecx
f0129340:	74 17                	je     f0129359 <test_kfreelast+0x671>
f0129342:	83 ec 04             	sub    $0x4,%esp
f0129345:	68 bc a5 13 f0       	push   $0xf013a5bc
f012934a:	68 f8 0c 00 00       	push   $0xcf8
f012934f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129354:	e8 4d 6e fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129359:	e8 36 a9 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012935e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129361:	74 17                	je     f012937a <test_kfreelast+0x692>
f0129363:	83 ec 04             	sub    $0x4,%esp
f0129366:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012936b:	68 f9 0c 00 00       	push   $0xcf9
f0129370:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129375:	e8 2c 6e fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
f012937a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012937d:	e8 4e 2d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0129382:	29 c3                	sub    %eax,%ebx
f0129384:	89 d8                	mov    %ebx,%eax
f0129386:	83 f8 02             	cmp    $0x2,%eax
f0129389:	74 17                	je     f01293a2 <test_kfreelast+0x6ba>
f012938b:	83 ec 04             	sub    $0x4,%esp
f012938e:	68 58 a5 13 f0       	push   $0xf013a558
f0129393:	68 fa 0c 00 00       	push   $0xcfa
f0129398:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012939d:	e8 04 6e fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
f01293a2:	c7 85 1c fe ff ff ff 	movl   $0x1bff,-0x1e4(%ebp)
f01293a9:	1b 00 00 
		ptr = (char*)ptr_allocations[4];
f01293ac:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f01293b2:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f01293b5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01293bc:	eb 0e                	jmp    f01293cc <test_kfreelast+0x6e4>
		{
			ptr[i] = 4 ;
f01293be:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01293c1:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01293c4:	01 d0                	add    %edx,%eax
f01293c6:	c6 00 04             	movb   $0x4,(%eax)
		if ((uint32) ptr_allocations[4] != (ACTUAL_START + 4*Mega + 8*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 2) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[4] = (7*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f01293c9:	ff 45 f4             	incl   -0xc(%ebp)
f01293cc:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f01293d2:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01293d5:	7f e7                	jg     f01293be <test_kfreelast+0x6d6>
		{
			ptr[i] = 4 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f01293d7:	e8 f4 2c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01293dc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01293df:	e8 b0 a8 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01293e4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[5] = kmalloc(3*Mega-kilo);
f01293e7:	83 ec 0c             	sub    $0xc,%esp
f01293ea:	68 00 fc 2f 00       	push   $0x2ffc00
f01293ef:	e8 f0 df fd ff       	call   f01073e4 <kmalloc>
f01293f4:	83 c4 10             	add    $0x10,%esp
f01293f7:	89 85 80 fd ff ff    	mov    %eax,-0x280(%ebp)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01293fd:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129403:	89 c1                	mov    %eax,%ecx
f0129405:	c7 85 50 ff ff ff 00 	movl   $0x1000,-0xb0(%ebp)
f012940c:	10 00 00 
f012940f:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f0129415:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012941a:	89 85 4c ff ff ff    	mov    %eax,-0xb4(%ebp)
f0129420:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129426:	ba 00 00 00 00       	mov    $0x0,%edx
f012942b:	f7 b5 50 ff ff ff    	divl   -0xb0(%ebp)
f0129431:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f0129437:	29 d0                	sub    %edx,%eax
f0129439:	89 c3                	mov    %eax,%ebx
f012943b:	c7 85 48 ff ff ff 00 	movl   $0x1000,-0xb8(%ebp)
f0129442:	10 00 00 
f0129445:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012944a:	0f b6 d0             	movzbl %al,%edx
f012944d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f0129453:	01 d0                	add    %edx,%eax
f0129455:	48                   	dec    %eax
f0129456:	89 85 44 ff ff ff    	mov    %eax,-0xbc(%ebp)
f012945c:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129462:	ba 00 00 00 00       	mov    $0x0,%edx
f0129467:	f7 b5 48 ff ff ff    	divl   -0xb8(%ebp)
f012946d:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f0129473:	29 d0                	sub    %edx,%eax
f0129475:	01 c3                	add    %eax,%ebx
f0129477:	c7 85 40 ff ff ff 00 	movl   $0x1000,-0xc0(%ebp)
f012947e:	10 00 00 
f0129481:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129486:	0f b6 c0             	movzbl %al,%eax
f0129489:	c1 e0 04             	shl    $0x4,%eax
f012948c:	89 c2                	mov    %eax,%edx
f012948e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f0129494:	01 d0                	add    %edx,%eax
f0129496:	48                   	dec    %eax
f0129497:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%ebp)
f012949d:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01294a3:	ba 00 00 00 00       	mov    $0x0,%edx
f01294a8:	f7 b5 40 ff ff ff    	divl   -0xc0(%ebp)
f01294ae:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f01294b4:	29 d0                	sub    %edx,%eax
f01294b6:	01 d8                	add    %ebx,%eax
f01294b8:	2d 00 80 bf 09       	sub    $0x9bf8000,%eax
f01294bd:	39 c1                	cmp    %eax,%ecx
f01294bf:	74 17                	je     f01294d8 <test_kfreelast+0x7f0>
f01294c1:	83 ec 04             	sub    $0x4,%esp
f01294c4:	68 bc a5 13 f0       	push   $0xf013a5bc
f01294c9:	68 06 0d 00 00       	push   $0xd06
f01294ce:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01294d3:	e8 ce 6c fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01294d8:	e8 b7 a7 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01294dd:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01294e0:	74 17                	je     f01294f9 <test_kfreelast+0x811>
f01294e2:	83 ec 04             	sub    $0x4,%esp
f01294e5:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01294ea:	68 07 0d 00 00       	push   $0xd07
f01294ef:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01294f4:	e8 ad 6c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
f01294f9:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01294fc:	e8 cf 2b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0129501:	29 c3                	sub    %eax,%ebx
f0129503:	89 d8                	mov    %ebx,%eax
f0129505:	3d 00 03 00 00       	cmp    $0x300,%eax
f012950a:	74 17                	je     f0129523 <test_kfreelast+0x83b>
f012950c:	83 ec 04             	sub    $0x4,%esp
f012950f:	68 58 a5 13 f0       	push   $0xf013a558
f0129514:	68 08 0d 00 00       	push   $0xd08
f0129519:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012951e:	e8 83 6c fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
f0129523:	c7 85 20 fe ff ff ff 	movl   $0x2ffbff,-0x1e0(%ebp)
f012952a:	fb 2f 00 
		ptr = (char*)ptr_allocations[5];
f012952d:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129533:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129536:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012953d:	eb 0e                	jmp    f012954d <test_kfreelast+0x865>
		{
			ptr[i] = 5 ;
f012953f:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129542:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129545:	01 d0                	add    %edx,%eax
f0129547:	c6 00 05             	movb   $0x5,(%eax)
		if ((uint32) ptr_allocations[5] != (ACTUAL_START + 4*Mega + 16*kilo) ) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 768) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[5] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f012954a:	ff 45 f4             	incl   -0xc(%ebp)
f012954d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0129553:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129556:	7f e7                	jg     f012953f <test_kfreelast+0x857>
		{
			ptr[i] = 5 ;
		}

		//6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129558:	e8 73 2b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012955d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129560:	e8 2f a7 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0129565:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[6] = kmalloc(6*Mega-kilo);
f0129568:	83 ec 0c             	sub    $0xc,%esp
f012956b:	68 00 fc 5f 00       	push   $0x5ffc00
f0129570:	e8 6f de fd ff       	call   f01073e4 <kmalloc>
f0129575:	83 c4 10             	add    $0x10,%esp
f0129578:	89 85 84 fd ff ff    	mov    %eax,-0x27c(%ebp)
		if ((uint32) ptr_allocations[6] != (ACTUAL_START + 7*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012957e:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f0129584:	89 c1                	mov    %eax,%ecx
f0129586:	c7 85 38 ff ff ff 00 	movl   $0x1000,-0xc8(%ebp)
f012958d:	10 00 00 
f0129590:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f0129596:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012959b:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%ebp)
f01295a1:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01295a7:	ba 00 00 00 00       	mov    $0x0,%edx
f01295ac:	f7 b5 38 ff ff ff    	divl   -0xc8(%ebp)
f01295b2:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f01295b8:	29 d0                	sub    %edx,%eax
f01295ba:	89 c3                	mov    %eax,%ebx
f01295bc:	c7 85 30 ff ff ff 00 	movl   $0x1000,-0xd0(%ebp)
f01295c3:	10 00 00 
f01295c6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f01295cb:	0f b6 d0             	movzbl %al,%edx
f01295ce:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f01295d4:	01 d0                	add    %edx,%eax
f01295d6:	48                   	dec    %eax
f01295d7:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%ebp)
f01295dd:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01295e3:	ba 00 00 00 00       	mov    $0x0,%edx
f01295e8:	f7 b5 30 ff ff ff    	divl   -0xd0(%ebp)
f01295ee:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f01295f4:	29 d0                	sub    %edx,%eax
f01295f6:	01 c3                	add    %eax,%ebx
f01295f8:	c7 85 28 ff ff ff 00 	movl   $0x1000,-0xd8(%ebp)
f01295ff:	10 00 00 
f0129602:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129607:	0f b6 c0             	movzbl %al,%eax
f012960a:	c1 e0 04             	shl    $0x4,%eax
f012960d:	89 c2                	mov    %eax,%edx
f012960f:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f0129615:	01 d0                	add    %edx,%eax
f0129617:	48                   	dec    %eax
f0129618:	89 85 24 ff ff ff    	mov    %eax,-0xdc(%ebp)
f012961e:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129624:	ba 00 00 00 00       	mov    $0x0,%edx
f0129629:	f7 b5 28 ff ff ff    	divl   -0xd8(%ebp)
f012962f:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f0129635:	29 d0                	sub    %edx,%eax
f0129637:	01 d8                	add    %ebx,%eax
f0129639:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012963e:	39 c1                	cmp    %eax,%ecx
f0129640:	74 17                	je     f0129659 <test_kfreelast+0x971>
f0129642:	83 ec 04             	sub    $0x4,%esp
f0129645:	68 bc a5 13 f0       	push   $0xf013a5bc
f012964a:	68 14 0d 00 00       	push   $0xd14
f012964f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129654:	e8 4d 6b fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129659:	e8 36 a6 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012965e:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129661:	74 17                	je     f012967a <test_kfreelast+0x992>
f0129663:	83 ec 04             	sub    $0x4,%esp
f0129666:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012966b:	68 15 0d 00 00       	push   $0xd15
f0129670:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129675:	e8 2c 6b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 1536) panic("Wrong allocation: pages are not loaded successfully into memory");
f012967a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012967d:	e8 4e 2a fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0129682:	29 c3                	sub    %eax,%ebx
f0129684:	89 d8                	mov    %ebx,%eax
f0129686:	3d 00 06 00 00       	cmp    $0x600,%eax
f012968b:	74 17                	je     f01296a4 <test_kfreelast+0x9bc>
f012968d:	83 ec 04             	sub    $0x4,%esp
f0129690:	68 58 a5 13 f0       	push   $0xf013a558
f0129695:	68 16 0d 00 00       	push   $0xd16
f012969a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012969f:	e8 02 6b fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (6*Mega-kilo)/sizeof(char) - 1;
f01296a4:	c7 85 24 fe ff ff ff 	movl   $0x5ffbff,-0x1dc(%ebp)
f01296ab:	fb 5f 00 

		//14 KB
		freeFrames = sys_calculate_free_frames() ;
f01296ae:	e8 1d 2a fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01296b3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01296b6:	e8 d9 a5 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01296bb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[7] = kmalloc(14*kilo);
f01296be:	83 ec 0c             	sub    $0xc,%esp
f01296c1:	68 00 38 00 00       	push   $0x3800
f01296c6:	e8 19 dd fd ff       	call   f01073e4 <kmalloc>
f01296cb:	83 c4 10             	add    $0x10,%esp
f01296ce:	89 85 88 fd ff ff    	mov    %eax,-0x278(%ebp)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f01296d4:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f01296da:	89 c1                	mov    %eax,%ecx
f01296dc:	c7 85 20 ff ff ff 00 	movl   $0x1000,-0xe0(%ebp)
f01296e3:	10 00 00 
f01296e6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f01296ec:	05 ef ff 09 00       	add    $0x9ffef,%eax
f01296f1:	89 85 1c ff ff ff    	mov    %eax,-0xe4(%ebp)
f01296f7:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f01296fd:	ba 00 00 00 00       	mov    $0x0,%edx
f0129702:	f7 b5 20 ff ff ff    	divl   -0xe0(%ebp)
f0129708:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012970e:	29 d0                	sub    %edx,%eax
f0129710:	89 c3                	mov    %eax,%ebx
f0129712:	c7 85 18 ff ff ff 00 	movl   $0x1000,-0xe8(%ebp)
f0129719:	10 00 00 
f012971c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129721:	0f b6 d0             	movzbl %al,%edx
f0129724:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012972a:	01 d0                	add    %edx,%eax
f012972c:	48                   	dec    %eax
f012972d:	89 85 14 ff ff ff    	mov    %eax,-0xec(%ebp)
f0129733:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f0129739:	ba 00 00 00 00       	mov    $0x0,%edx
f012973e:	f7 b5 18 ff ff ff    	divl   -0xe8(%ebp)
f0129744:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012974a:	29 d0                	sub    %edx,%eax
f012974c:	01 c3                	add    %eax,%ebx
f012974e:	c7 85 10 ff ff ff 00 	movl   $0x1000,-0xf0(%ebp)
f0129755:	10 00 00 
f0129758:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012975d:	0f b6 c0             	movzbl %al,%eax
f0129760:	c1 e0 04             	shl    $0x4,%eax
f0129763:	89 c2                	mov    %eax,%edx
f0129765:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012976b:	01 d0                	add    %edx,%eax
f012976d:	48                   	dec    %eax
f012976e:	89 85 0c ff ff ff    	mov    %eax,-0xf4(%ebp)
f0129774:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012977a:	ba 00 00 00 00       	mov    $0x0,%edx
f012977f:	f7 b5 10 ff ff ff    	divl   -0xf0(%ebp)
f0129785:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012978b:	29 d0                	sub    %edx,%eax
f012978d:	01 d8                	add    %ebx,%eax
f012978f:	2d 00 80 2f 09       	sub    $0x92f8000,%eax
f0129794:	39 c1                	cmp    %eax,%ecx
f0129796:	74 17                	je     f01297af <test_kfreelast+0xac7>
f0129798:	83 ec 04             	sub    $0x4,%esp
f012979b:	68 bc a5 13 f0       	push   $0xf013a5bc
f01297a0:	68 1d 0d 00 00       	push   $0xd1d
f01297a5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01297aa:	e8 f7 69 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01297af:	e8 e0 a4 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01297b4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f01297b7:	74 17                	je     f01297d0 <test_kfreelast+0xae8>
f01297b9:	83 ec 04             	sub    $0x4,%esp
f01297bc:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01297c1:	68 1e 0d 00 00       	push   $0xd1e
f01297c6:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01297cb:	e8 d6 69 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
f01297d0:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f01297d3:	e8 f8 28 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01297d8:	29 c3                	sub    %eax,%ebx
f01297da:	89 d8                	mov    %ebx,%eax
f01297dc:	83 f8 04             	cmp    $0x4,%eax
f01297df:	74 17                	je     f01297f8 <test_kfreelast+0xb10>
f01297e1:	83 ec 04             	sub    $0x4,%esp
f01297e4:	68 58 a5 13 f0       	push   $0xf013a558
f01297e9:	68 1f 0d 00 00       	push   $0xd1f
f01297ee:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01297f3:	e8 ae 69 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
f01297f8:	c7 85 28 fe ff ff ff 	movl   $0x37ff,-0x1d8(%ebp)
f01297ff:	37 00 00 
		ptr = (char*)ptr_allocations[7];
f0129802:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129808:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f012980b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129812:	eb 0e                	jmp    f0129822 <test_kfreelast+0xb3a>
		{
			ptr[i] = 7 ;
f0129814:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129817:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012981a:	01 d0                	add    %edx,%eax
f012981c:	c6 00 07             	movb   $0x7,(%eax)
		if ((uint32) ptr_allocations[7] != (ACTUAL_START + 13*Mega + 16*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 4) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[7] = (14*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f012981f:	ff 45 f4             	incl   -0xc(%ebp)
f0129822:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0129828:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012982b:	7f e7                	jg     f0129814 <test_kfreelast+0xb2c>
	}

	//kfree some of the allocated spaces
	{
		//kfree 1st 2 MB
		int freeFrames = sys_calculate_free_frames() ;
f012982d:	e8 9e 28 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0129832:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		int freeDiskFrames = pf_calculate_free_frames() ;
f0129838:	e8 57 a4 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012983d:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[0]);
f0129843:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f0129849:	83 ec 0c             	sub    $0xc,%esp
f012984c:	50                   	push   %eax
f012984d:	e8 ac db fd ff       	call   f01073fe <kfree>
f0129852:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129855:	e8 3a a4 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012985a:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129860:	74 17                	je     f0129879 <test_kfreelast+0xb91>
f0129862:	83 ec 04             	sub    $0x4,%esp
f0129865:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012986a:	68 2e 0d 00 00       	push   $0xd2e
f012986f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129874:	e8 2d 69 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512 ) panic("Wrong kfree: pages in memory are not freed correctly");
f0129879:	e8 52 28 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012987e:	89 c2                	mov    %eax,%edx
f0129880:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129886:	29 c2                	sub    %eax,%edx
f0129888:	89 d0                	mov    %edx,%eax
f012988a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012988f:	74 17                	je     f01298a8 <test_kfreelast+0xbc0>
f0129891:	83 ec 04             	sub    $0x4,%esp
f0129894:	68 60 ac 13 f0       	push   $0xf013ac60
f0129899:	68 2f 0d 00 00       	push   $0xd2f
f012989e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01298a3:	e8 fe 68 fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames() ;
f01298a8:	e8 23 28 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01298ad:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f01298b3:	e8 dc a3 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01298b8:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[1]);
f01298be:	8b 85 70 fd ff ff    	mov    -0x290(%ebp),%eax
f01298c4:	83 ec 0c             	sub    $0xc,%esp
f01298c7:	50                   	push   %eax
f01298c8:	e8 31 db fd ff       	call   f01073fe <kfree>
f01298cd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f01298d0:	e8 bf a3 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f01298d5:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f01298db:	74 17                	je     f01298f4 <test_kfreelast+0xc0c>
f01298dd:	83 ec 04             	sub    $0x4,%esp
f01298e0:	68 f0 a4 13 f0       	push   $0xf013a4f0
f01298e5:	68 35 0d 00 00       	push   $0xd35
f01298ea:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01298ef:	e8 b2 68 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 512) panic("Wrong kfree: pages in memory are not freed correctly");
f01298f4:	e8 d7 27 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f01298f9:	89 c2                	mov    %eax,%edx
f01298fb:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f0129901:	29 c2                	sub    %eax,%edx
f0129903:	89 d0                	mov    %edx,%eax
f0129905:	3d 00 02 00 00       	cmp    $0x200,%eax
f012990a:	74 17                	je     f0129923 <test_kfreelast+0xc3b>
f012990c:	83 ec 04             	sub    $0x4,%esp
f012990f:	68 60 ac 13 f0       	push   $0xf013ac60
f0129914:	68 36 0d 00 00       	push   $0xd36
f0129919:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012991e:	e8 83 68 fd ff       	call   f01001a6 <_panic>

		//kfree 6 MB
		freeFrames = sys_calculate_free_frames() ;
f0129923:	e8 a8 27 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0129928:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012992e:	e8 61 a3 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0129933:	89 85 04 ff ff ff    	mov    %eax,-0xfc(%ebp)
		kfree(ptr_allocations[6]);
f0129939:	8b 85 84 fd ff ff    	mov    -0x27c(%ebp),%eax
f012993f:	83 ec 0c             	sub    $0xc,%esp
f0129942:	50                   	push   %eax
f0129943:	e8 b6 da fd ff       	call   f01073fe <kfree>
f0129948:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012994b:	e8 44 a3 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0129950:	3b 85 04 ff ff ff    	cmp    -0xfc(%ebp),%eax
f0129956:	74 17                	je     f012996f <test_kfreelast+0xc87>
f0129958:	83 ec 04             	sub    $0x4,%esp
f012995b:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0129960:	68 3c 0d 00 00       	push   $0xd3c
f0129965:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012996a:	e8 37 68 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 6*Mega/4096) panic("Wrong kfree: pages in memory are not freed correctly");
f012996f:	e8 5c 27 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0129974:	89 c2                	mov    %eax,%edx
f0129976:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012997c:	29 c2                	sub    %eax,%edx
f012997e:	89 d0                	mov    %edx,%eax
f0129980:	3d 00 06 00 00       	cmp    $0x600,%eax
f0129985:	74 17                	je     f012999e <test_kfreelast+0xcb6>
f0129987:	83 ec 04             	sub    $0x4,%esp
f012998a:	68 60 ac 13 f0       	push   $0xf013ac60
f012998f:	68 3d 0d 00 00       	push   $0xd3d
f0129994:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129999:	e8 08 68 fd ff       	call   f01001a6 <_panic>
	}

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
f012999e:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f01299a4:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[2]; ++i)
f01299a7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f01299ae:	eb 1e                	jmp    f01299ce <test_kfreelast+0xce6>
		{
			sums[2] += ptr[i] ;
f01299b0:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f01299b6:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f01299b9:	8b 45 84             	mov    -0x7c(%ebp),%eax
f01299bc:	01 c8                	add    %ecx,%eax
f01299be:	8a 00                	mov    (%eax),%al
f01299c0:	0f be c0             	movsbl %al,%eax
f01299c3:	01 d0                	add    %edx,%eax
f01299c5:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)

	//Check memory access after kfree
	{
		//2 KB
		ptr = (char*)ptr_allocations[2];
		for (i = 0; i < lastIndices[2]; ++i)
f01299cb:	ff 45 f4             	incl   -0xc(%ebp)
f01299ce:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01299d4:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f01299d7:	7f d7                	jg     f01299b0 <test_kfreelast+0xcc8>
		{
			sums[2] += ptr[i] ;
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");
f01299d9:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f01299df:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f01299e5:	01 c0                	add    %eax,%eax
f01299e7:	39 c2                	cmp    %eax,%edx
f01299e9:	74 17                	je     f0129a02 <test_kfreelast+0xd1a>
f01299eb:	83 ec 04             	sub    $0x4,%esp
f01299ee:	68 bc ac 13 f0       	push   $0xf013acbc
f01299f3:	68 48 0d 00 00       	push   $0xd48
f01299f8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f01299fd:	e8 a4 67 fd ff       	call   f01001a6 <_panic>

		//2 KB
		ptr = (char*)ptr_allocations[3];
f0129a02:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f0129a08:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[3]; ++i)
f0129a0b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129a12:	eb 1e                	jmp    f0129a32 <test_kfreelast+0xd4a>
		{
			sums[3] += ptr[i] ;
f0129a14:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0129a1a:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129a1d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129a20:	01 c8                	add    %ecx,%eax
f0129a22:	8a 00                	mov    (%eax),%al
f0129a24:	0f be c0             	movsbl %al,%eax
f0129a27:	01 d0                	add    %edx,%eax
f0129a29:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
		}
		if (sums[2] != 2*lastIndices[2])	panic("kfree: invalid read after freeing some allocations");

		//2 KB
		ptr = (char*)ptr_allocations[3];
		for (i = 0; i < lastIndices[3]; ++i)
f0129a2f:	ff 45 f4             	incl   -0xc(%ebp)
f0129a32:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129a38:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129a3b:	7f d7                	jg     f0129a14 <test_kfreelast+0xd2c>
		{
			sums[3] += ptr[i] ;
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");
f0129a3d:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f0129a43:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f0129a49:	89 c1                	mov    %eax,%ecx
f0129a4b:	01 c9                	add    %ecx,%ecx
f0129a4d:	01 c8                	add    %ecx,%eax
f0129a4f:	39 c2                	cmp    %eax,%edx
f0129a51:	74 17                	je     f0129a6a <test_kfreelast+0xd82>
f0129a53:	83 ec 04             	sub    $0x4,%esp
f0129a56:	68 bc ac 13 f0       	push   $0xf013acbc
f0129a5b:	68 50 0d 00 00       	push   $0xd50
f0129a60:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129a65:	e8 3c 67 fd ff       	call   f01001a6 <_panic>

		//7 KB
		ptr = (char*)ptr_allocations[4];
f0129a6a:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f0129a70:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[4]; ++i)
f0129a73:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129a7a:	eb 1e                	jmp    f0129a9a <test_kfreelast+0xdb2>
		{
			sums[4] += ptr[i] ;
f0129a7c:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f0129a82:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129a85:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129a88:	01 c8                	add    %ecx,%eax
f0129a8a:	8a 00                	mov    (%eax),%al
f0129a8c:	0f be c0             	movsbl %al,%eax
f0129a8f:	01 d0                	add    %edx,%eax
f0129a91:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)
		}
		if (sums[3] != 3*lastIndices[3])	panic("kfree: invalid read after freeing some allocations");

		//7 KB
		ptr = (char*)ptr_allocations[4];
		for (i = 0; i < lastIndices[4]; ++i)
f0129a97:	ff 45 f4             	incl   -0xc(%ebp)
f0129a9a:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f0129aa0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129aa3:	7f d7                	jg     f0129a7c <test_kfreelast+0xd94>
		{
			sums[4] += ptr[i] ;
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");
f0129aa5:	8b 85 cc fd ff ff    	mov    -0x234(%ebp),%eax
f0129aab:	8b 95 1c fe ff ff    	mov    -0x1e4(%ebp),%edx
f0129ab1:	c1 e2 02             	shl    $0x2,%edx
f0129ab4:	39 d0                	cmp    %edx,%eax
f0129ab6:	74 17                	je     f0129acf <test_kfreelast+0xde7>
f0129ab8:	83 ec 04             	sub    $0x4,%esp
f0129abb:	68 bc ac 13 f0       	push   $0xf013acbc
f0129ac0:	68 58 0d 00 00       	push   $0xd58
f0129ac5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129aca:	e8 d7 66 fd ff       	call   f01001a6 <_panic>

		//3 MB
		ptr = (char*)ptr_allocations[5];
f0129acf:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f0129ad5:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[5]; ++i)
f0129ad8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129adf:	eb 1e                	jmp    f0129aff <test_kfreelast+0xe17>
		{
			sums[5] += ptr[i] ;
f0129ae1:	8b 95 d0 fd ff ff    	mov    -0x230(%ebp),%edx
f0129ae7:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129aea:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129aed:	01 c8                	add    %ecx,%eax
f0129aef:	8a 00                	mov    (%eax),%al
f0129af1:	0f be c0             	movsbl %al,%eax
f0129af4:	01 d0                	add    %edx,%eax
f0129af6:	89 85 d0 fd ff ff    	mov    %eax,-0x230(%ebp)
		}
		if (sums[4] != 4*lastIndices[4])	panic("kfree: invalid read after freeing some allocations");

		//3 MB
		ptr = (char*)ptr_allocations[5];
		for (i = 0; i < lastIndices[5]; ++i)
f0129afc:	ff 45 f4             	incl   -0xc(%ebp)
f0129aff:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f0129b05:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129b08:	7f d7                	jg     f0129ae1 <test_kfreelast+0xdf9>
		{
			sums[5] += ptr[i] ;
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");
f0129b0a:	8b 8d d0 fd ff ff    	mov    -0x230(%ebp),%ecx
f0129b10:	8b 95 20 fe ff ff    	mov    -0x1e0(%ebp),%edx
f0129b16:	89 d0                	mov    %edx,%eax
f0129b18:	c1 e0 02             	shl    $0x2,%eax
f0129b1b:	01 d0                	add    %edx,%eax
f0129b1d:	39 c1                	cmp    %eax,%ecx
f0129b1f:	74 17                	je     f0129b38 <test_kfreelast+0xe50>
f0129b21:	83 ec 04             	sub    $0x4,%esp
f0129b24:	68 bc ac 13 f0       	push   $0xf013acbc
f0129b29:	68 60 0d 00 00       	push   $0xd60
f0129b2e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129b33:	e8 6e 66 fd ff       	call   f01001a6 <_panic>

		//14 KB
		ptr = (char*)ptr_allocations[7];
f0129b38:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f0129b3e:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[7]; ++i)
f0129b41:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129b48:	eb 1e                	jmp    f0129b68 <test_kfreelast+0xe80>
		{
			sums[7] += ptr[i] ;
f0129b4a:	8b 95 d8 fd ff ff    	mov    -0x228(%ebp),%edx
f0129b50:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f0129b53:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129b56:	01 c8                	add    %ecx,%eax
f0129b58:	8a 00                	mov    (%eax),%al
f0129b5a:	0f be c0             	movsbl %al,%eax
f0129b5d:	01 d0                	add    %edx,%eax
f0129b5f:	89 85 d8 fd ff ff    	mov    %eax,-0x228(%ebp)
		}
		if (sums[5] != 5*lastIndices[5])	panic("kfree: invalid read after freeing some allocations");

		//14 KB
		ptr = (char*)ptr_allocations[7];
		for (i = 0; i < lastIndices[7]; ++i)
f0129b65:	ff 45 f4             	incl   -0xc(%ebp)
f0129b68:	8b 85 28 fe ff ff    	mov    -0x1d8(%ebp),%eax
f0129b6e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129b71:	7f d7                	jg     f0129b4a <test_kfreelast+0xe62>
		{
			sums[7] += ptr[i] ;
		}
		if (sums[7] != 7*lastIndices[7])	panic("kfree: invalid read after freeing some allocations");
f0129b73:	8b 8d d8 fd ff ff    	mov    -0x228(%ebp),%ecx
f0129b79:	8b 95 28 fe ff ff    	mov    -0x1d8(%ebp),%edx
f0129b7f:	89 d0                	mov    %edx,%eax
f0129b81:	01 c0                	add    %eax,%eax
f0129b83:	01 d0                	add    %edx,%eax
f0129b85:	01 c0                	add    %eax,%eax
f0129b87:	01 d0                	add    %edx,%eax
f0129b89:	39 c1                	cmp    %eax,%ecx
f0129b8b:	74 17                	je     f0129ba4 <test_kfreelast+0xebc>
f0129b8d:	83 ec 04             	sub    $0x4,%esp
f0129b90:	68 bc ac 13 f0       	push   $0xf013acbc
f0129b95:	68 68 0d 00 00       	push   $0xd68
f0129b9a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129b9f:	e8 02 66 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree
	{
		//20 KB
		freeFrames = sys_calculate_free_frames() ;
f0129ba4:	e8 27 25 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0129ba9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129bac:	e8 e3 a0 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0129bb1:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[8] = kmalloc(20*kilo);
f0129bb4:	83 ec 0c             	sub    $0xc,%esp
f0129bb7:	68 00 50 00 00       	push   $0x5000
f0129bbc:	e8 23 d8 fd ff       	call   f01073e4 <kmalloc>
f0129bc1:	83 c4 10             	add    $0x10,%esp
f0129bc4:	89 85 8c fd ff ff    	mov    %eax,-0x274(%ebp)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129bca:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f0129bd0:	89 c1                	mov    %eax,%ecx
f0129bd2:	c7 85 00 ff ff ff 00 	movl   $0x1000,-0x100(%ebp)
f0129bd9:	10 00 00 
f0129bdc:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f0129be2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129be7:	89 85 fc fe ff ff    	mov    %eax,-0x104(%ebp)
f0129bed:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129bf3:	ba 00 00 00 00       	mov    $0x0,%edx
f0129bf8:	f7 b5 00 ff ff ff    	divl   -0x100(%ebp)
f0129bfe:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f0129c04:	29 d0                	sub    %edx,%eax
f0129c06:	89 c3                	mov    %eax,%ebx
f0129c08:	c7 85 f8 fe ff ff 00 	movl   $0x1000,-0x108(%ebp)
f0129c0f:	10 00 00 
f0129c12:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129c17:	0f b6 d0             	movzbl %al,%edx
f0129c1a:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f0129c20:	01 d0                	add    %edx,%eax
f0129c22:	48                   	dec    %eax
f0129c23:	89 85 f4 fe ff ff    	mov    %eax,-0x10c(%ebp)
f0129c29:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129c2f:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c34:	f7 b5 f8 fe ff ff    	divl   -0x108(%ebp)
f0129c3a:	8b 85 f4 fe ff ff    	mov    -0x10c(%ebp),%eax
f0129c40:	29 d0                	sub    %edx,%eax
f0129c42:	01 c3                	add    %eax,%ebx
f0129c44:	c7 85 f0 fe ff ff 00 	movl   $0x1000,-0x110(%ebp)
f0129c4b:	10 00 00 
f0129c4e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129c53:	0f b6 c0             	movzbl %al,%eax
f0129c56:	c1 e0 04             	shl    $0x4,%eax
f0129c59:	89 c2                	mov    %eax,%edx
f0129c5b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f0129c61:	01 d0                	add    %edx,%eax
f0129c63:	48                   	dec    %eax
f0129c64:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
f0129c6a:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129c70:	ba 00 00 00 00       	mov    $0x0,%edx
f0129c75:	f7 b5 f0 fe ff ff    	divl   -0x110(%ebp)
f0129c7b:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f0129c81:	29 d0                	sub    %edx,%eax
f0129c83:	01 d8                	add    %ebx,%eax
f0129c85:	2d 00 40 2f 09       	sub    $0x92f4000,%eax
f0129c8a:	39 c1                	cmp    %eax,%ecx
f0129c8c:	74 17                	je     f0129ca5 <test_kfreelast+0xfbd>
f0129c8e:	83 ec 04             	sub    $0x4,%esp
f0129c91:	68 bc a5 13 f0       	push   $0xf013a5bc
f0129c96:	68 71 0d 00 00       	push   $0xd71
f0129c9b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129ca0:	e8 01 65 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129ca5:	e8 ea 9f fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0129caa:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129cad:	74 17                	je     f0129cc6 <test_kfreelast+0xfde>
f0129caf:	83 ec 04             	sub    $0x4,%esp
f0129cb2:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0129cb7:	68 72 0d 00 00       	push   $0xd72
f0129cbc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129cc1:	e8 e0 64 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129cc6:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129cc9:	e8 02 24 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0129cce:	29 c3                	sub    %eax,%ebx
f0129cd0:	89 d8                	mov    %ebx,%eax
f0129cd2:	83 f8 05             	cmp    $0x5,%eax
f0129cd5:	74 17                	je     f0129cee <test_kfreelast+0x1006>
f0129cd7:	83 ec 04             	sub    $0x4,%esp
f0129cda:	68 58 a5 13 f0       	push   $0xf013a558
f0129cdf:	68 73 0d 00 00       	push   $0xd73
f0129ce4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129ce9:	e8 b8 64 fd ff       	call   f01001a6 <_panic>
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
f0129cee:	c7 85 2c fe ff ff ff 	movl   $0x4fff,-0x1d4(%ebp)
f0129cf5:	4f 00 00 
		ptr = (char*)ptr_allocations[8];
f0129cf8:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f0129cfe:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[8]; ++i)
f0129d01:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129d08:	eb 0e                	jmp    f0129d18 <test_kfreelast+0x1030>
		{
			ptr[i] = 8 ;
f0129d0a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129d0d:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129d10:	01 d0                	add    %edx,%eax
f0129d12:	c6 00 08             	movb   $0x8,(%eax)
		if ((uint32) ptr_allocations[8] != (ACTUAL_START + 13*Mega + 32*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 5) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[8] = (20*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[8];
		for (i = 0; i < lastIndices[8]; ++i)
f0129d15:	ff 45 f4             	incl   -0xc(%ebp)
f0129d18:	8b 85 2c fe ff ff    	mov    -0x1d4(%ebp),%eax
f0129d1e:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129d21:	7f e7                	jg     f0129d0a <test_kfreelast+0x1022>
		{
			ptr[i] = 8 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129d23:	e8 a8 23 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0129d28:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129d2b:	e8 64 9f fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0129d30:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[9] = kmalloc(1*Mega);
f0129d33:	83 ec 0c             	sub    $0xc,%esp
f0129d36:	68 00 00 10 00       	push   $0x100000
f0129d3b:	e8 a4 d6 fd ff       	call   f01073e4 <kmalloc>
f0129d40:	83 c4 10             	add    $0x10,%esp
f0129d43:	89 85 90 fd ff ff    	mov    %eax,-0x270(%ebp)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129d49:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f0129d4f:	89 c1                	mov    %eax,%ecx
f0129d51:	c7 85 e8 fe ff ff 00 	movl   $0x1000,-0x118(%ebp)
f0129d58:	10 00 00 
f0129d5b:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f0129d61:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129d66:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
f0129d6c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129d72:	ba 00 00 00 00       	mov    $0x0,%edx
f0129d77:	f7 b5 e8 fe ff ff    	divl   -0x118(%ebp)
f0129d7d:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f0129d83:	29 d0                	sub    %edx,%eax
f0129d85:	89 c3                	mov    %eax,%ebx
f0129d87:	c7 85 e0 fe ff ff 00 	movl   $0x1000,-0x120(%ebp)
f0129d8e:	10 00 00 
f0129d91:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129d96:	0f b6 d0             	movzbl %al,%edx
f0129d99:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f0129d9f:	01 d0                	add    %edx,%eax
f0129da1:	48                   	dec    %eax
f0129da2:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
f0129da8:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0129dae:	ba 00 00 00 00       	mov    $0x0,%edx
f0129db3:	f7 b5 e0 fe ff ff    	divl   -0x120(%ebp)
f0129db9:	8b 85 dc fe ff ff    	mov    -0x124(%ebp),%eax
f0129dbf:	29 d0                	sub    %edx,%eax
f0129dc1:	01 c3                	add    %eax,%ebx
f0129dc3:	c7 85 d8 fe ff ff 00 	movl   $0x1000,-0x128(%ebp)
f0129dca:	10 00 00 
f0129dcd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129dd2:	0f b6 c0             	movzbl %al,%eax
f0129dd5:	c1 e0 04             	shl    $0x4,%eax
f0129dd8:	89 c2                	mov    %eax,%edx
f0129dda:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f0129de0:	01 d0                	add    %edx,%eax
f0129de2:	48                   	dec    %eax
f0129de3:	89 85 d4 fe ff ff    	mov    %eax,-0x12c(%ebp)
f0129de9:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0129def:	ba 00 00 00 00       	mov    $0x0,%edx
f0129df4:	f7 b5 d8 fe ff ff    	divl   -0x128(%ebp)
f0129dfa:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f0129e00:	29 d0                	sub    %edx,%eax
f0129e02:	01 d8                	add    %ebx,%eax
f0129e04:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f0129e09:	39 c1                	cmp    %eax,%ecx
f0129e0b:	74 17                	je     f0129e24 <test_kfreelast+0x113c>
f0129e0d:	83 ec 04             	sub    $0x4,%esp
f0129e10:	68 bc a5 13 f0       	push   $0xf013a5bc
f0129e15:	68 7f 0d 00 00       	push   $0xd7f
f0129e1a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129e1f:	e8 82 63 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129e24:	e8 6b 9e fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0129e29:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129e2c:	74 17                	je     f0129e45 <test_kfreelast+0x115d>
f0129e2e:	83 ec 04             	sub    $0x4,%esp
f0129e31:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0129e36:	68 80 0d 00 00       	push   $0xd80
f0129e3b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129e40:	e8 61 63 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f0129e45:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f0129e48:	e8 83 22 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0129e4d:	29 c3                	sub    %eax,%ebx
f0129e4f:	89 d8                	mov    %ebx,%eax
f0129e51:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129e56:	74 17                	je     f0129e6f <test_kfreelast+0x1187>
f0129e58:	83 ec 04             	sub    $0x4,%esp
f0129e5b:	68 58 a5 13 f0       	push   $0xf013a558
f0129e60:	68 81 0d 00 00       	push   $0xd81
f0129e65:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129e6a:	e8 37 63 fd ff       	call   f01001a6 <_panic>
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
f0129e6f:	c7 85 30 fe ff ff ff 	movl   $0xfffff,-0x1d0(%ebp)
f0129e76:	ff 0f 00 
		ptr = (char*)ptr_allocations[9];
f0129e79:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f0129e7f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[9]; ++i)
f0129e82:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f0129e89:	eb 0e                	jmp    f0129e99 <test_kfreelast+0x11b1>
		{
			ptr[i] = 9 ;
f0129e8b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0129e8e:	8b 45 84             	mov    -0x7c(%ebp),%eax
f0129e91:	01 d0                	add    %edx,%eax
f0129e93:	c6 00 09             	movb   $0x9,(%eax)
		if ((uint32) ptr_allocations[9] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[9] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[9];
		for (i = 0; i < lastIndices[9]; ++i)
f0129e96:	ff 45 f4             	incl   -0xc(%ebp)
f0129e99:	8b 85 30 fe ff ff    	mov    -0x1d0(%ebp),%eax
f0129e9f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0129ea2:	7f e7                	jg     f0129e8b <test_kfreelast+0x11a3>
		{
			ptr[i] = 9 ;
		}
	}

	ce = 0;
f0129ea4:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	//kfree last allocated space
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f0129eab:	e8 20 22 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0129eb0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129eb3:	e8 dc 9d fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0129eb8:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f0129ebb:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f0129ec1:	83 ec 0c             	sub    $0xc,%esp
f0129ec4:	50                   	push   %eax
f0129ec5:	e8 34 d5 fd ff       	call   f01073fe <kfree>
f0129eca:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f0129ecd:	e8 c2 9d fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0129ed2:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f0129ed5:	74 17                	je     f0129eee <test_kfreelast+0x1206>
f0129ed7:	83 ec 04             	sub    $0x4,%esp
f0129eda:	68 f0 a4 13 f0       	push   $0xf013a4f0
f0129edf:	68 91 0d 00 00       	push   $0xd91
f0129ee4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129ee9:	e8 b8 62 fd ff       	call   f01001a6 <_panic>
		if ((sys_calculate_free_frames() - freeFrames) != 256) panic("Wrong kfree: pages in memory are not freed correctly");
f0129eee:	e8 dd 21 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0129ef3:	89 c2                	mov    %eax,%edx
f0129ef5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f0129ef8:	29 c2                	sub    %eax,%edx
f0129efa:	89 d0                	mov    %edx,%eax
f0129efc:	3d 00 01 00 00       	cmp    $0x100,%eax
f0129f01:	74 17                	je     f0129f1a <test_kfreelast+0x1232>
f0129f03:	83 ec 04             	sub    $0x4,%esp
f0129f06:	68 60 ac 13 f0       	push   $0xf013ac60
f0129f0b:	68 92 0d 00 00       	push   $0xd92
f0129f10:	68 d6 a4 13 f0       	push   $0xf013a4d6
f0129f15:	e8 8c 62 fd ff       	call   f01001a6 <_panic>
	}

	//Allocate after kfree last [25%]
	{
		//30 KB
		freeFrames = sys_calculate_free_frames() ;
f0129f1a:	e8 b1 21 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f0129f1f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f0129f22:	e8 6d 9d fd ff       	call   f0103c94 <pf_calculate_free_frames>
f0129f27:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[10] = kmalloc(30*kilo);
f0129f2a:	83 ec 0c             	sub    $0xc,%esp
f0129f2d:	68 00 78 00 00       	push   $0x7800
f0129f32:	e8 ad d4 fd ff       	call   f01073e4 <kmalloc>
f0129f37:	83 c4 10             	add    $0x10,%esp
f0129f3a:	89 85 94 fd ff ff    	mov    %eax,-0x26c(%ebp)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f0129f40:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f0129f46:	89 c1                	mov    %eax,%ecx
f0129f48:	c7 85 d0 fe ff ff 00 	movl   $0x1000,-0x130(%ebp)
f0129f4f:	10 00 00 
f0129f52:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f0129f58:	05 ef ff 09 00       	add    $0x9ffef,%eax
f0129f5d:	89 85 cc fe ff ff    	mov    %eax,-0x134(%ebp)
f0129f63:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0129f69:	ba 00 00 00 00       	mov    $0x0,%edx
f0129f6e:	f7 b5 d0 fe ff ff    	divl   -0x130(%ebp)
f0129f74:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f0129f7a:	29 d0                	sub    %edx,%eax
f0129f7c:	89 c3                	mov    %eax,%ebx
f0129f7e:	c7 85 c8 fe ff ff 00 	movl   $0x1000,-0x138(%ebp)
f0129f85:	10 00 00 
f0129f88:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129f8d:	0f b6 d0             	movzbl %al,%edx
f0129f90:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f0129f96:	01 d0                	add    %edx,%eax
f0129f98:	48                   	dec    %eax
f0129f99:	89 85 c4 fe ff ff    	mov    %eax,-0x13c(%ebp)
f0129f9f:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0129fa5:	ba 00 00 00 00       	mov    $0x0,%edx
f0129faa:	f7 b5 c8 fe ff ff    	divl   -0x138(%ebp)
f0129fb0:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f0129fb6:	29 d0                	sub    %edx,%eax
f0129fb8:	01 c3                	add    %eax,%ebx
f0129fba:	c7 85 c0 fe ff ff 00 	movl   $0x1000,-0x140(%ebp)
f0129fc1:	10 00 00 
f0129fc4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f0129fc9:	0f b6 c0             	movzbl %al,%eax
f0129fcc:	c1 e0 04             	shl    $0x4,%eax
f0129fcf:	89 c2                	mov    %eax,%edx
f0129fd1:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f0129fd7:	01 d0                	add    %edx,%eax
f0129fd9:	48                   	dec    %eax
f0129fda:	89 85 bc fe ff ff    	mov    %eax,-0x144(%ebp)
f0129fe0:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129fe6:	ba 00 00 00 00       	mov    $0x0,%edx
f0129feb:	f7 b5 c0 fe ff ff    	divl   -0x140(%ebp)
f0129ff1:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f0129ff7:	29 d0                	sub    %edx,%eax
f0129ff9:	01 d8                	add    %ebx,%eax
f0129ffb:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a000:	39 c1                	cmp    %eax,%ecx
f012a002:	74 17                	je     f012a01b <test_kfreelast+0x1333>
f012a004:	83 ec 04             	sub    $0x4,%esp
f012a007:	68 bc a5 13 f0       	push   $0xf013a5bc
f012a00c:	68 9b 0d 00 00       	push   $0xd9b
f012a011:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012a016:	e8 8b 61 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a01b:	e8 74 9c fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a020:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a023:	74 17                	je     f012a03c <test_kfreelast+0x1354>
f012a025:	83 ec 04             	sub    $0x4,%esp
f012a028:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012a02d:	68 9c 0d 00 00       	push   $0xd9c
f012a032:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012a037:	e8 6a 61 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a03c:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a03f:	e8 8c 20 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a044:	29 c3                	sub    %eax,%ebx
f012a046:	89 d8                	mov    %ebx,%eax
f012a048:	83 f8 08             	cmp    $0x8,%eax
f012a04b:	74 17                	je     f012a064 <test_kfreelast+0x137c>
f012a04d:	83 ec 04             	sub    $0x4,%esp
f012a050:	68 58 a5 13 f0       	push   $0xf013a558
f012a055:	68 9d 0d 00 00       	push   $0xd9d
f012a05a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012a05f:	e8 42 61 fd ff       	call   f01001a6 <_panic>
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
f012a064:	c7 85 34 fe ff ff ff 	movl   $0x77ff,-0x1cc(%ebp)
f012a06b:	77 00 00 
		ptr = (char*)ptr_allocations[10];
f012a06e:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a074:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[10]; ++i)
f012a077:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a07e:	eb 0e                	jmp    f012a08e <test_kfreelast+0x13a6>
		{
			ptr[i] = 10 ;
f012a080:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a083:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a086:	01 d0                	add    %edx,%eax
f012a088:	c6 00 0a             	movb   $0xa,(%eax)
		if ((uint32) ptr_allocations[10] != (ACTUAL_START + 13*Mega + 52*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 8) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[10] = (30*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[10];
		for (i = 0; i < lastIndices[10]; ++i)
f012a08b:	ff 45 f4             	incl   -0xc(%ebp)
f012a08e:	8b 85 34 fe ff ff    	mov    -0x1cc(%ebp),%eax
f012a094:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a097:	7f e7                	jg     f012a080 <test_kfreelast+0x1398>
		{
			ptr[i] = 10 ;
		}

		//1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a099:	e8 32 20 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a09e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a0a1:	e8 ee 9b fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a0a6:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[11] = kmalloc(1*Mega);
f012a0a9:	83 ec 0c             	sub    $0xc,%esp
f012a0ac:	68 00 00 10 00       	push   $0x100000
f012a0b1:	e8 2e d3 fd ff       	call   f01073e4 <kmalloc>
f012a0b6:	83 c4 10             	add    $0x10,%esp
f012a0b9:	89 85 98 fd ff ff    	mov    %eax,-0x268(%ebp)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
f012a0bf:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a0c5:	89 c1                	mov    %eax,%ecx
f012a0c7:	c7 85 b8 fe ff ff 00 	movl   $0x1000,-0x148(%ebp)
f012a0ce:	10 00 00 
f012a0d1:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012a0d7:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a0dc:	89 85 b4 fe ff ff    	mov    %eax,-0x14c(%ebp)
f012a0e2:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a0e8:	ba 00 00 00 00       	mov    $0x0,%edx
f012a0ed:	f7 b5 b8 fe ff ff    	divl   -0x148(%ebp)
f012a0f3:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012a0f9:	29 d0                	sub    %edx,%eax
f012a0fb:	89 c3                	mov    %eax,%ebx
f012a0fd:	c7 85 b0 fe ff ff 00 	movl   $0x1000,-0x150(%ebp)
f012a104:	10 00 00 
f012a107:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a10c:	0f b6 d0             	movzbl %al,%edx
f012a10f:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012a115:	01 d0                	add    %edx,%eax
f012a117:	48                   	dec    %eax
f012a118:	89 85 ac fe ff ff    	mov    %eax,-0x154(%ebp)
f012a11e:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a124:	ba 00 00 00 00       	mov    $0x0,%edx
f012a129:	f7 b5 b0 fe ff ff    	divl   -0x150(%ebp)
f012a12f:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012a135:	29 d0                	sub    %edx,%eax
f012a137:	01 c3                	add    %eax,%ebx
f012a139:	c7 85 a8 fe ff ff 00 	movl   $0x1000,-0x158(%ebp)
f012a140:	10 00 00 
f012a143:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a148:	0f b6 c0             	movzbl %al,%eax
f012a14b:	c1 e0 04             	shl    $0x4,%eax
f012a14e:	89 c2                	mov    %eax,%edx
f012a150:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012a156:	01 d0                	add    %edx,%eax
f012a158:	48                   	dec    %eax
f012a159:	89 85 a4 fe ff ff    	mov    %eax,-0x15c(%ebp)
f012a15f:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a165:	ba 00 00 00 00       	mov    $0x0,%edx
f012a16a:	f7 b5 a8 fe ff ff    	divl   -0x158(%ebp)
f012a170:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012a176:	29 d0                	sub    %edx,%eax
f012a178:	01 d8                	add    %ebx,%eax
f012a17a:	2d 00 70 2e 09       	sub    $0x92e7000,%eax
f012a17f:	39 c1                	cmp    %eax,%ecx
f012a181:	74 17                	je     f012a19a <test_kfreelast+0x14b2>
f012a183:	83 ec 04             	sub    $0x4,%esp
f012a186:	68 bc a5 13 f0       	push   $0xf013a5bc
f012a18b:	68 a9 0d 00 00       	push   $0xda9
f012a190:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012a195:	e8 0c 60 fd ff       	call   f01001a6 <_panic>
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
f012a19a:	e8 f5 9a fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a19f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a1a2:	74 17                	je     f012a1bb <test_kfreelast+0x14d3>
f012a1a4:	83 ec 04             	sub    $0x4,%esp
f012a1a7:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012a1ac:	68 aa 0d 00 00       	push   $0xdaa
f012a1b1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012a1b6:	e8 eb 5f fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
f012a1bb:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a1be:	e8 0d 1f fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a1c3:	29 c3                	sub    %eax,%ebx
f012a1c5:	89 d8                	mov    %ebx,%eax
f012a1c7:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a1cc:	74 17                	je     f012a1e5 <test_kfreelast+0x14fd>
f012a1ce:	83 ec 04             	sub    $0x4,%esp
f012a1d1:	68 58 a5 13 f0       	push   $0xf013a558
f012a1d6:	68 ab 0d 00 00       	push   $0xdab
f012a1db:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012a1e0:	e8 c1 5f fd ff       	call   f01001a6 <_panic>
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
f012a1e5:	c7 85 38 fe ff ff ff 	movl   $0xfffff,-0x1c8(%ebp)
f012a1ec:	ff 0f 00 
		ptr = (char*)ptr_allocations[11];
f012a1ef:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a1f5:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[11]; ++i)
f012a1f8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a1ff:	eb 0e                	jmp    f012a20f <test_kfreelast+0x1527>
		{
			ptr[i] = 11 ;
f012a201:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a204:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a207:	01 d0                	add    %edx,%eax
f012a209:	c6 00 0b             	movb   $0xb,(%eax)
		if ((uint32) ptr_allocations[11] != (ACTUAL_START + 13*Mega + 84*kilo)) panic("Wrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) panic("Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((freeFrames - sys_calculate_free_frames()) != 256) panic("Wrong allocation: pages are not loaded successfully into memory");
		lastIndices[11] = (1*Mega)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[11];
		for (i = 0; i < lastIndices[11]; ++i)
f012a20c:	ff 45 f4             	incl   -0xc(%ebp)
f012a20f:	8b 85 38 fe ff ff    	mov    -0x1c8(%ebp),%eax
f012a215:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a218:	7f e7                	jg     f012a201 <test_kfreelast+0x1519>
		{
			ptr[i] = 11 ;
		}
	}
	ce += 25;
f012a21a:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
	cprintf("\nkfreelast: current evaluation = %d%\n", ce);
f012a21e:	83 ec 08             	sub    $0x8,%esp
f012a221:	ff 75 f0             	pushl  -0x10(%ebp)
f012a224:	68 08 b5 13 f0       	push   $0xf013b508
f012a229:	e8 ff 69 fd ff       	call   f0100c2d <cprintf>
f012a22e:	83 c4 10             	add    $0x10,%esp

	int f = 0;
f012a231:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	//kfree last allocated two spaces
	{
		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012a238:	e8 93 1e fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a23d:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a240:	e8 4f 9a fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a245:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[11]);
f012a248:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012a24e:	83 ec 0c             	sub    $0xc,%esp
f012a251:	50                   	push   %eax
f012a252:	e8 a7 d1 fd ff       	call   f01073fe <kfree>
f012a257:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a25a:	e8 35 9a fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a25f:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a262:	74 1d                	je     f012a281 <test_kfreelast+0x1599>
f012a264:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a268:	75 17                	jne    f012a281 <test_kfreelast+0x1599>
f012a26a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a271:	83 ec 0c             	sub    $0xc,%esp
f012a274:	68 30 b5 13 f0       	push   $0xf013b530
f012a279:	e8 af 69 fd ff       	call   f0100c2d <cprintf>
f012a27e:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 256) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a281:	e8 4a 1e fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a286:	89 c2                	mov    %eax,%edx
f012a288:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a28b:	29 c2                	sub    %eax,%edx
f012a28d:	89 d0                	mov    %edx,%eax
f012a28f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012a294:	74 1d                	je     f012a2b3 <test_kfreelast+0x15cb>
f012a296:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a29a:	75 17                	jne    f012a2b3 <test_kfreelast+0x15cb>
f012a29c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a2a3:	83 ec 0c             	sub    $0xc,%esp
f012a2a6:	68 9c b5 13 f0       	push   $0xf013b59c
f012a2ab:	e8 7d 69 fd ff       	call   f0100c2d <cprintf>
f012a2b0:	83 c4 10             	add    $0x10,%esp

		//kfree 30 KB
		freeFrames = sys_calculate_free_frames() ;
f012a2b3:	e8 18 1e fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a2b8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a2bb:	e8 d4 99 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a2c0:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[10]);
f012a2c3:	8b 85 94 fd ff ff    	mov    -0x26c(%ebp),%eax
f012a2c9:	83 ec 0c             	sub    $0xc,%esp
f012a2cc:	50                   	push   %eax
f012a2cd:	e8 2c d1 fd ff       	call   f01073fe <kfree>
f012a2d2:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a2d5:	e8 ba 99 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a2da:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a2dd:	74 1d                	je     f012a2fc <test_kfreelast+0x1614>
f012a2df:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a2e3:	75 17                	jne    f012a2fc <test_kfreelast+0x1614>
f012a2e5:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a2ec:	83 ec 0c             	sub    $0xc,%esp
f012a2ef:	68 30 b5 13 f0       	push   $0xf013b530
f012a2f4:	e8 34 69 fd ff       	call   f0100c2d <cprintf>
f012a2f9:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 8) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a2fc:	e8 cf 1d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a301:	89 c2                	mov    %eax,%edx
f012a303:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a306:	29 c2                	sub    %eax,%edx
f012a308:	89 d0                	mov    %edx,%eax
f012a30a:	83 f8 08             	cmp    $0x8,%eax
f012a30d:	74 1d                	je     f012a32c <test_kfreelast+0x1644>
f012a30f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a313:	75 17                	jne    f012a32c <test_kfreelast+0x1644>
f012a315:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a31c:	83 ec 0c             	sub    $0xc,%esp
f012a31f:	68 9c b5 13 f0       	push   $0xf013b59c
f012a324:	e8 04 69 fd ff       	call   f0100c2d <cprintf>
f012a329:	83 c4 10             	add    $0x10,%esp
	}

	//Allocate after kfree last allocated two spaces (in order) [10%]
	{
		//10 KB
		freeFrames = sys_calculate_free_frames() ;
f012a32c:	e8 9f 1d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a331:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a334:	e8 5b 99 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a339:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[12] = kmalloc(10*kilo);
f012a33c:	83 ec 0c             	sub    $0xc,%esp
f012a33f:	68 00 28 00 00       	push   $0x2800
f012a344:	e8 9b d0 fd ff       	call   f01073e4 <kmalloc>
f012a349:	83 c4 10             	add    $0x10,%esp
f012a34c:	89 85 9c fd ff ff    	mov    %eax,-0x264(%ebp)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a352:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a358:	89 c1                	mov    %eax,%ecx
f012a35a:	c7 85 a0 fe ff ff 00 	movl   $0x1000,-0x160(%ebp)
f012a361:	10 00 00 
f012a364:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012a36a:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a36f:	89 85 9c fe ff ff    	mov    %eax,-0x164(%ebp)
f012a375:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012a37b:	ba 00 00 00 00       	mov    $0x0,%edx
f012a380:	f7 b5 a0 fe ff ff    	divl   -0x160(%ebp)
f012a386:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012a38c:	29 d0                	sub    %edx,%eax
f012a38e:	89 c3                	mov    %eax,%ebx
f012a390:	c7 85 98 fe ff ff 00 	movl   $0x1000,-0x168(%ebp)
f012a397:	10 00 00 
f012a39a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a39f:	0f b6 d0             	movzbl %al,%edx
f012a3a2:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012a3a8:	01 d0                	add    %edx,%eax
f012a3aa:	48                   	dec    %eax
f012a3ab:	89 85 94 fe ff ff    	mov    %eax,-0x16c(%ebp)
f012a3b1:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a3b7:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3bc:	f7 b5 98 fe ff ff    	divl   -0x168(%ebp)
f012a3c2:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012a3c8:	29 d0                	sub    %edx,%eax
f012a3ca:	01 c3                	add    %eax,%ebx
f012a3cc:	c7 85 90 fe ff ff 00 	movl   $0x1000,-0x170(%ebp)
f012a3d3:	10 00 00 
f012a3d6:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a3db:	0f b6 c0             	movzbl %al,%eax
f012a3de:	c1 e0 04             	shl    $0x4,%eax
f012a3e1:	89 c2                	mov    %eax,%edx
f012a3e3:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012a3e9:	01 d0                	add    %edx,%eax
f012a3eb:	48                   	dec    %eax
f012a3ec:	89 85 8c fe ff ff    	mov    %eax,-0x174(%ebp)
f012a3f2:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a3f8:	ba 00 00 00 00       	mov    $0x0,%edx
f012a3fd:	f7 b5 90 fe ff ff    	divl   -0x170(%ebp)
f012a403:	8b 85 8c fe ff ff    	mov    -0x174(%ebp),%eax
f012a409:	29 d0                	sub    %edx,%eax
f012a40b:	01 d8                	add    %ebx,%eax
f012a40d:	2d 00 f0 2e 09       	sub    $0x92ef000,%eax
f012a412:	39 c1                	cmp    %eax,%ecx
f012a414:	74 1d                	je     f012a433 <test_kfreelast+0x174b>
f012a416:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a41a:	75 17                	jne    f012a433 <test_kfreelast+0x174b>
f012a41c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a423:	83 ec 0c             	sub    $0xc,%esp
f012a426:	68 d4 b5 13 f0       	push   $0xf013b5d4
f012a42b:	e8 fd 67 fd ff       	call   f0100c2d <cprintf>
f012a430:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a433:	e8 5c 98 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a438:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a43b:	74 1d                	je     f012a45a <test_kfreelast+0x1772>
f012a43d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a441:	75 17                	jne    f012a45a <test_kfreelast+0x1772>
f012a443:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a44a:	83 ec 0c             	sub    $0xc,%esp
f012a44d:	68 30 b5 13 f0       	push   $0xf013b530
f012a452:	e8 d6 67 fd ff       	call   f0100c2d <cprintf>
f012a457:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a45a:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a45d:	e8 6e 1c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a462:	29 c3                	sub    %eax,%ebx
f012a464:	89 d8                	mov    %ebx,%eax
f012a466:	83 f8 03             	cmp    $0x3,%eax
f012a469:	74 1d                	je     f012a488 <test_kfreelast+0x17a0>
f012a46b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a46f:	75 17                	jne    f012a488 <test_kfreelast+0x17a0>
f012a471:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a478:	83 ec 0c             	sub    $0xc,%esp
f012a47b:	68 3c b6 13 f0       	push   $0xf013b63c
f012a480:	e8 a8 67 fd ff       	call   f0100c2d <cprintf>
f012a485:	83 c4 10             	add    $0x10,%esp
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
f012a488:	c7 85 3c fe ff ff ff 	movl   $0x27ff,-0x1c4(%ebp)
f012a48f:	27 00 00 
		ptr = (char*)ptr_allocations[12];
f012a492:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a498:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012a49b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a4a2:	eb 0e                	jmp    f012a4b2 <test_kfreelast+0x17ca>
		{
			ptr[i] = 12 ;
f012a4a4:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a4a7:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a4aa:	01 d0                	add    %edx,%eax
f012a4ac:	c6 00 0c             	movb   $0xc,(%eax)
		if ((uint32) ptr_allocations[12] != (ACTUAL_START + 13*Mega + 52*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 3) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[12] = (10*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012a4af:	ff 45 f4             	incl   -0xc(%ebp)
f012a4b2:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012a4b8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a4bb:	7f e7                	jg     f012a4a4 <test_kfreelast+0x17bc>
		{
			ptr[i] = 12 ;
		}
	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a4bd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a4c1:	75 17                	jne    f012a4da <test_kfreelast+0x17f2>
f012a4c3:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012a4c7:	83 ec 08             	sub    $0x8,%esp
f012a4ca:	ff 75 f0             	pushl  -0x10(%ebp)
f012a4cd:	68 08 b5 13 f0       	push   $0xf013b508
f012a4d2:	e8 56 67 fd ff       	call   f0100c2d <cprintf>
f012a4d7:	83 c4 10             	add    $0x10,%esp
f012a4da:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
f012a4e1:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a4e7:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[12]; ++i)
f012a4ea:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a4f1:	eb 1e                	jmp    f012a511 <test_kfreelast+0x1829>
		{
			sums[12] += ptr[i] ;
f012a4f3:	8b 95 ec fd ff ff    	mov    -0x214(%ebp),%edx
f012a4f9:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a4fc:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a4ff:	01 c8                	add    %ecx,%eax
f012a501:	8a 00                	mov    (%eax),%al
f012a503:	0f be c0             	movsbl %al,%eax
f012a506:	01 d0                	add    %edx,%eax
f012a508:	89 85 ec fd ff ff    	mov    %eax,-0x214(%ebp)

	//Check memory access after kfree last and kalloc [15%]
	{
		//10 KB
		ptr = (char*)ptr_allocations[12];
		for (i = 0; i < lastIndices[12]; ++i)
f012a50e:	ff 45 f4             	incl   -0xc(%ebp)
f012a511:	8b 85 3c fe ff ff    	mov    -0x1c4(%ebp),%eax
f012a517:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a51a:	7f d7                	jg     f012a4f3 <test_kfreelast+0x180b>
		{
			sums[12] += ptr[i] ;
		}
		if (sums[12] != 12*lastIndices[12])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012a51c:	8b 8d ec fd ff ff    	mov    -0x214(%ebp),%ecx
f012a522:	8b 95 3c fe ff ff    	mov    -0x1c4(%ebp),%edx
f012a528:	89 d0                	mov    %edx,%eax
f012a52a:	01 c0                	add    %eax,%eax
f012a52c:	01 d0                	add    %edx,%eax
f012a52e:	c1 e0 02             	shl    $0x2,%eax
f012a531:	39 c1                	cmp    %eax,%ecx
f012a533:	74 1d                	je     f012a552 <test_kfreelast+0x186a>
f012a535:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a539:	75 17                	jne    f012a552 <test_kfreelast+0x186a>
f012a53b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a542:	83 ec 0c             	sub    $0xc,%esp
f012a545:	68 80 b6 13 f0       	push   $0xf013b680
f012a54a:	e8 de 66 fd ff       	call   f0100c2d <cprintf>
f012a54f:	83 c4 10             	add    $0x10,%esp


		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012a552:	83 ec 0c             	sub    $0xc,%esp
f012a555:	6a 03                	push   $0x3
f012a557:	e8 1d 20 fe ff       	call   f010c579 <sys_bypassPageFault>
f012a55c:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[12] + 12*kilo;
f012a55f:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a565:	05 00 30 00 00       	add    $0x3000,%eax
f012a56a:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 30*kilo; ++i)
f012a56d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a574:	eb 3c                	jmp    f012a5b2 <test_kfreelast+0x18ca>
		{
			ptr[i] = 10;
f012a576:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a579:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a57c:	01 d0                	add    %edx,%eax
f012a57e:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012a581:	e8 e1 1f fe ff       	call   f010c567 <sys_rcr2>
f012a586:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012a589:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012a58c:	01 ca                	add    %ecx,%edx
f012a58e:	39 d0                	cmp    %edx,%eax
f012a590:	74 1d                	je     f012a5af <test_kfreelast+0x18c7>
f012a592:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a596:	75 17                	jne    f012a5af <test_kfreelast+0x18c7>
f012a598:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a59f:	83 ec 0c             	sub    $0xc,%esp
f012a5a2:	68 b4 b6 13 f0       	push   $0xf013b6b4
f012a5a7:	e8 81 66 fd ff       	call   f0100c2d <cprintf>
f012a5ac:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[12] + 12*kilo;

		for (i = 0; i < 30*kilo; ++i)
f012a5af:	ff 45 f4             	incl   -0xc(%ebp)
f012a5b2:	81 7d f4 ff 77 00 00 	cmpl   $0x77ff,-0xc(%ebp)
f012a5b9:	7e bb                	jle    f012a576 <test_kfreelast+0x188e>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012a5bb:	83 ec 0c             	sub    $0xc,%esp
f012a5be:	6a 00                	push   $0x0
f012a5c0:	e8 b4 1f fe ff       	call   f010c579 <sys_bypassPageFault>
f012a5c5:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012a5c8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a5cc:	75 17                	jne    f012a5e5 <test_kfreelast+0x18fd>
f012a5ce:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012a5d2:	83 ec 08             	sub    $0x8,%esp
f012a5d5:	ff 75 f0             	pushl  -0x10(%ebp)
f012a5d8:	68 08 b5 13 f0       	push   $0xf013b508
f012a5dd:	e8 4b 66 fd ff       	call   f0100c2d <cprintf>
f012a5e2:	83 c4 10             	add    $0x10,%esp
f012a5e5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree last allocated three spaces [but with different order]
	{
		//kfree 10 KB
		freeFrames = sys_calculate_free_frames() ;
f012a5ec:	e8 df 1a fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a5f1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a5f4:	e8 9b 96 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a5f9:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[12]);
f012a5fc:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012a602:	83 ec 0c             	sub    $0xc,%esp
f012a605:	50                   	push   %eax
f012a606:	e8 f3 cd fd ff       	call   f01073fe <kfree>
f012a60b:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a60e:	e8 81 96 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a613:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a616:	74 1d                	je     f012a635 <test_kfreelast+0x194d>
f012a618:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a61c:	75 17                	jne    f012a635 <test_kfreelast+0x194d>
f012a61e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a625:	83 ec 0c             	sub    $0xc,%esp
f012a628:	68 30 b5 13 f0       	push   $0xf013b530
f012a62d:	e8 fb 65 fd ff       	call   f0100c2d <cprintf>
f012a632:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a635:	e8 96 1a fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a63a:	89 c2                	mov    %eax,%edx
f012a63c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a63f:	29 c2                	sub    %eax,%edx
f012a641:	89 d0                	mov    %edx,%eax
f012a643:	83 f8 03             	cmp    $0x3,%eax
f012a646:	74 1d                	je     f012a665 <test_kfreelast+0x197d>
f012a648:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a64c:	75 17                	jne    f012a665 <test_kfreelast+0x197d>
f012a64e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a655:	83 ec 0c             	sub    $0xc,%esp
f012a658:	68 9c b5 13 f0       	push   $0xf013b59c
f012a65d:	e8 cb 65 fd ff       	call   f0100c2d <cprintf>
f012a662:	83 c4 10             	add    $0x10,%esp

		//kfree 14 KB
		freeFrames = sys_calculate_free_frames() ;
f012a665:	e8 66 1a fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a66a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a66d:	e8 22 96 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a672:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[7]);
f012a675:	8b 85 88 fd ff ff    	mov    -0x278(%ebp),%eax
f012a67b:	83 ec 0c             	sub    $0xc,%esp
f012a67e:	50                   	push   %eax
f012a67f:	e8 7a cd fd ff       	call   f01073fe <kfree>
f012a684:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a687:	e8 08 96 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a68c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a68f:	74 1d                	je     f012a6ae <test_kfreelast+0x19c6>
f012a691:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a695:	75 17                	jne    f012a6ae <test_kfreelast+0x19c6>
f012a697:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a69e:	83 ec 0c             	sub    $0xc,%esp
f012a6a1:	68 30 b5 13 f0       	push   $0xf013b530
f012a6a6:	e8 82 65 fd ff       	call   f0100c2d <cprintf>
f012a6ab:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 4) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a6ae:	e8 1d 1a fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a6b3:	89 c2                	mov    %eax,%edx
f012a6b5:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a6b8:	29 c2                	sub    %eax,%edx
f012a6ba:	89 d0                	mov    %edx,%eax
f012a6bc:	83 f8 04             	cmp    $0x4,%eax
f012a6bf:	74 1d                	je     f012a6de <test_kfreelast+0x19f6>
f012a6c1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a6c5:	75 17                	jne    f012a6de <test_kfreelast+0x19f6>
f012a6c7:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a6ce:	83 ec 0c             	sub    $0xc,%esp
f012a6d1:	68 9c b5 13 f0       	push   $0xf013b59c
f012a6d6:	e8 52 65 fd ff       	call   f0100c2d <cprintf>
f012a6db:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012a6de:	e8 ed 19 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a6e3:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a6e6:	e8 a9 95 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a6eb:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012a6ee:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012a6f4:	83 ec 0c             	sub    $0xc,%esp
f012a6f7:	50                   	push   %eax
f012a6f8:	e8 01 cd fd ff       	call   f01073fe <kfree>
f012a6fd:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a700:	e8 8f 95 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a705:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a708:	74 1d                	je     f012a727 <test_kfreelast+0x1a3f>
f012a70a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a70e:	75 17                	jne    f012a727 <test_kfreelast+0x1a3f>
f012a710:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a717:	83 ec 0c             	sub    $0xc,%esp
f012a71a:	68 30 b5 13 f0       	push   $0xf013b530
f012a71f:	e8 09 65 fd ff       	call   f0100c2d <cprintf>
f012a724:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 5) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012a727:	e8 a4 19 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a72c:	89 c2                	mov    %eax,%edx
f012a72e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012a731:	29 c2                	sub    %eax,%edx
f012a733:	89 d0                	mov    %edx,%eax
f012a735:	83 f8 05             	cmp    $0x5,%eax
f012a738:	74 1d                	je     f012a757 <test_kfreelast+0x1a6f>
f012a73a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a73e:	75 17                	jne    f012a757 <test_kfreelast+0x1a6f>
f012a740:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a747:	83 ec 0c             	sub    $0xc,%esp
f012a74a:	68 9c b5 13 f0       	push   $0xf013b59c
f012a74f:	e8 d9 64 fd ff       	call   f0100c2d <cprintf>
f012a754:	83 c4 10             	add    $0x10,%esp


	//Allocate after kfree last allocated 3 spaces with different order [25%]
	{
		//50 KB
		freeFrames = sys_calculate_free_frames() ;
f012a757:	e8 74 19 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a75c:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a75f:	e8 30 95 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a764:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[13] = kmalloc(50*kilo);
f012a767:	83 ec 0c             	sub    $0xc,%esp
f012a76a:	68 00 c8 00 00       	push   $0xc800
f012a76f:	e8 70 cc fd ff       	call   f01073e4 <kmalloc>
f012a774:	83 c4 10             	add    $0x10,%esp
f012a777:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a77d:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012a783:	89 c1                	mov    %eax,%ecx
f012a785:	c7 85 88 fe ff ff 00 	movl   $0x1000,-0x178(%ebp)
f012a78c:	10 00 00 
f012a78f:	8b 85 88 fe ff ff    	mov    -0x178(%ebp),%eax
f012a795:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a79a:	89 85 84 fe ff ff    	mov    %eax,-0x17c(%ebp)
f012a7a0:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012a7a6:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7ab:	f7 b5 88 fe ff ff    	divl   -0x178(%ebp)
f012a7b1:	8b 85 84 fe ff ff    	mov    -0x17c(%ebp),%eax
f012a7b7:	29 d0                	sub    %edx,%eax
f012a7b9:	89 c3                	mov    %eax,%ebx
f012a7bb:	c7 85 80 fe ff ff 00 	movl   $0x1000,-0x180(%ebp)
f012a7c2:	10 00 00 
f012a7c5:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a7ca:	0f b6 d0             	movzbl %al,%edx
f012a7cd:	8b 85 80 fe ff ff    	mov    -0x180(%ebp),%eax
f012a7d3:	01 d0                	add    %edx,%eax
f012a7d5:	48                   	dec    %eax
f012a7d6:	89 85 7c fe ff ff    	mov    %eax,-0x184(%ebp)
f012a7dc:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012a7e2:	ba 00 00 00 00       	mov    $0x0,%edx
f012a7e7:	f7 b5 80 fe ff ff    	divl   -0x180(%ebp)
f012a7ed:	8b 85 7c fe ff ff    	mov    -0x184(%ebp),%eax
f012a7f3:	29 d0                	sub    %edx,%eax
f012a7f5:	01 c3                	add    %eax,%ebx
f012a7f7:	c7 85 78 fe ff ff 00 	movl   $0x1000,-0x188(%ebp)
f012a7fe:	10 00 00 
f012a801:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a806:	0f b6 c0             	movzbl %al,%eax
f012a809:	c1 e0 04             	shl    $0x4,%eax
f012a80c:	89 c2                	mov    %eax,%edx
f012a80e:	8b 85 78 fe ff ff    	mov    -0x188(%ebp),%eax
f012a814:	01 d0                	add    %edx,%eax
f012a816:	48                   	dec    %eax
f012a817:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
f012a81d:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a823:	ba 00 00 00 00       	mov    $0x0,%edx
f012a828:	f7 b5 78 fe ff ff    	divl   -0x188(%ebp)
f012a82e:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012a834:	29 d0                	sub    %edx,%eax
f012a836:	01 d8                	add    %ebx,%eax
f012a838:	2d 00 80 8f 09       	sub    $0x98f8000,%eax
f012a83d:	39 c1                	cmp    %eax,%ecx
f012a83f:	74 1d                	je     f012a85e <test_kfreelast+0x1b76>
f012a841:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a845:	75 17                	jne    f012a85e <test_kfreelast+0x1b76>
f012a847:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a84e:	83 ec 0c             	sub    $0xc,%esp
f012a851:	68 d4 b5 13 f0       	push   $0xf013b5d4
f012a856:	e8 d2 63 fd ff       	call   f0100c2d <cprintf>
f012a85b:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a85e:	e8 31 94 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a863:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a866:	74 1d                	je     f012a885 <test_kfreelast+0x1b9d>
f012a868:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a86c:	75 17                	jne    f012a885 <test_kfreelast+0x1b9d>
f012a86e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a875:	83 ec 0c             	sub    $0xc,%esp
f012a878:	68 30 b5 13 f0       	push   $0xf013b530
f012a87d:	e8 ab 63 fd ff       	call   f0100c2d <cprintf>
f012a882:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012a885:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012a888:	e8 43 18 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a88d:	29 c3                	sub    %eax,%ebx
f012a88f:	89 d8                	mov    %ebx,%eax
f012a891:	83 f8 0d             	cmp    $0xd,%eax
f012a894:	74 1d                	je     f012a8b3 <test_kfreelast+0x1bcb>
f012a896:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a89a:	75 17                	jne    f012a8b3 <test_kfreelast+0x1bcb>
f012a89c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a8a3:	83 ec 0c             	sub    $0xc,%esp
f012a8a6:	68 3c b6 13 f0       	push   $0xf013b63c
f012a8ab:	e8 7d 63 fd ff       	call   f0100c2d <cprintf>
f012a8b0:	83 c4 10             	add    $0x10,%esp
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
f012a8b3:	c7 85 40 fe ff ff ff 	movl   $0xc7ff,-0x1c0(%ebp)
f012a8ba:	c7 00 00 
		ptr = (char*)ptr_allocations[13];
f012a8bd:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012a8c3:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[13]; ++i)
f012a8c6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012a8cd:	eb 0e                	jmp    f012a8dd <test_kfreelast+0x1bf5>
		{
			ptr[i] = 13 ;
f012a8cf:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012a8d2:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012a8d5:	01 d0                	add    %edx,%eax
f012a8d7:	c6 00 0d             	movb   $0xd,(%eax)
		if ((uint32) ptr_allocations[13] != (ACTUAL_START + 7*Mega + 16*kilo)) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 13) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[13] = (50*kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[13];
		for (i = 0; i < lastIndices[13]; ++i)
f012a8da:	ff 45 f4             	incl   -0xc(%ebp)
f012a8dd:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012a8e3:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012a8e6:	7f e7                	jg     f012a8cf <test_kfreelast+0x1be7>
		{
			ptr[i] = 13 ;
		}

		//3 MB
		freeFrames = sys_calculate_free_frames() ;
f012a8e8:	e8 e3 17 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012a8ed:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012a8f0:	e8 9f 93 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a8f5:	89 45 d0             	mov    %eax,-0x30(%ebp)
		ptr_allocations[14] = kmalloc(3*Mega-kilo);
f012a8f8:	83 ec 0c             	sub    $0xc,%esp
f012a8fb:	68 00 fc 2f 00       	push   $0x2ffc00
f012a900:	e8 df ca fd ff       	call   f01073e4 <kmalloc>
f012a905:	83 c4 10             	add    $0x10,%esp
f012a908:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
f012a90e:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012a914:	89 c1                	mov    %eax,%ecx
f012a916:	c7 85 70 fe ff ff 00 	movl   $0x1000,-0x190(%ebp)
f012a91d:	10 00 00 
f012a920:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012a926:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012a92b:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
f012a931:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a937:	ba 00 00 00 00       	mov    $0x0,%edx
f012a93c:	f7 b5 70 fe ff ff    	divl   -0x190(%ebp)
f012a942:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012a948:	29 d0                	sub    %edx,%eax
f012a94a:	89 c3                	mov    %eax,%ebx
f012a94c:	c7 85 68 fe ff ff 00 	movl   $0x1000,-0x198(%ebp)
f012a953:	10 00 00 
f012a956:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a95b:	0f b6 d0             	movzbl %al,%edx
f012a95e:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012a964:	01 d0                	add    %edx,%eax
f012a966:	48                   	dec    %eax
f012a967:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
f012a96d:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a973:	ba 00 00 00 00       	mov    $0x0,%edx
f012a978:	f7 b5 68 fe ff ff    	divl   -0x198(%ebp)
f012a97e:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012a984:	29 d0                	sub    %edx,%eax
f012a986:	01 c3                	add    %eax,%ebx
f012a988:	c7 85 60 fe ff ff 00 	movl   $0x1000,-0x1a0(%ebp)
f012a98f:	10 00 00 
f012a992:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012a997:	0f b6 c0             	movzbl %al,%eax
f012a99a:	c1 e0 04             	shl    $0x4,%eax
f012a99d:	89 c2                	mov    %eax,%edx
f012a99f:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012a9a5:	01 d0                	add    %edx,%eax
f012a9a7:	48                   	dec    %eax
f012a9a8:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
f012a9ae:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a9b4:	ba 00 00 00 00       	mov    $0x0,%edx
f012a9b9:	f7 b5 60 fe ff ff    	divl   -0x1a0(%ebp)
f012a9bf:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012a9c5:	29 d0                	sub    %edx,%eax
f012a9c7:	01 d8                	add    %ebx,%eax
f012a9c9:	2d 00 b0 8e 09       	sub    $0x98eb000,%eax
f012a9ce:	39 c1                	cmp    %eax,%ecx
f012a9d0:	74 1d                	je     f012a9ef <test_kfreelast+0x1d07>
f012a9d2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9d6:	75 17                	jne    f012a9ef <test_kfreelast+0x1d07>
f012a9d8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012a9df:	83 ec 0c             	sub    $0xc,%esp
f012a9e2:	68 d4 b5 13 f0       	push   $0xf013b5d4
f012a9e7:	e8 41 62 fd ff       	call   f0100c2d <cprintf>
f012a9ec:	83 c4 10             	add    $0x10,%esp
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012a9ef:	e8 a0 92 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012a9f4:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012a9f7:	74 1d                	je     f012aa16 <test_kfreelast+0x1d2e>
f012a9f9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012a9fd:	75 17                	jne    f012aa16 <test_kfreelast+0x1d2e>
f012a9ff:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa06:	83 ec 0c             	sub    $0xc,%esp
f012aa09:	68 30 b5 13 f0       	push   $0xf013b530
f012aa0e:	e8 1a 62 fd ff       	call   f0100c2d <cprintf>
f012aa13:	83 c4 10             	add    $0x10,%esp
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
f012aa16:	8b 5d d4             	mov    -0x2c(%ebp),%ebx
f012aa19:	e8 b2 16 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012aa1e:	29 c3                	sub    %eax,%ebx
f012aa20:	89 d8                	mov    %ebx,%eax
f012aa22:	3d 00 03 00 00       	cmp    $0x300,%eax
f012aa27:	74 1d                	je     f012aa46 <test_kfreelast+0x1d5e>
f012aa29:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa2d:	75 17                	jne    f012aa46 <test_kfreelast+0x1d5e>
f012aa2f:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aa36:	83 ec 0c             	sub    $0xc,%esp
f012aa39:	68 3c b6 13 f0       	push   $0xf013b63c
f012aa3e:	e8 ea 61 fd ff       	call   f0100c2d <cprintf>
f012aa43:	83 c4 10             	add    $0x10,%esp
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
f012aa46:	c7 85 44 fe ff ff ff 	movl   $0x2ffbff,-0x1bc(%ebp)
f012aa4d:	fb 2f 00 
		ptr = (char*)ptr_allocations[14];
f012aa50:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012aa56:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012aa59:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aa60:	eb 0e                	jmp    f012aa70 <test_kfreelast+0x1d88>
		{
			ptr[i] = 14 ;
f012aa62:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012aa65:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aa68:	01 d0                	add    %edx,%eax
f012aa6a:	c6 00 0e             	movb   $0xe,(%eax)
		if ((uint32) ptr_allocations[14] != (ACTUAL_START + 7*Mega + 68*kilo) ) if (!f) {f=1; cprintf("\nWrong start address for the allocated space... check return address of kmalloc & updating of heap ptr");}
		if ((pf_calculate_free_frames() - freeDiskFrames) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
		if ((freeFrames - sys_calculate_free_frames()) != 768) if (!f) {f=1; cprintf("\nWrong allocation: pages are not loaded successfully into memory");}
		lastIndices[14] = (3*Mega-kilo)/sizeof(char) - 1;
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012aa6d:	ff 45 f4             	incl   -0xc(%ebp)
f012aa70:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012aa76:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012aa79:	7f e7                	jg     f012aa62 <test_kfreelast+0x1d7a>
		{
			ptr[i] = 14 ;
		}
	}

	if (!f) {ce += 25;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012aa7b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aa7f:	75 17                	jne    f012aa98 <test_kfreelast+0x1db0>
f012aa81:	83 45 f0 19          	addl   $0x19,-0x10(%ebp)
f012aa85:	83 ec 08             	sub    $0x8,%esp
f012aa88:	ff 75 f0             	pushl  -0x10(%ebp)
f012aa8b:	68 08 b5 13 f0       	push   $0xf013b508
f012aa90:	e8 98 61 fd ff       	call   f0100c2d <cprintf>
f012aa95:	83 c4 10             	add    $0x10,%esp
f012aa98:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree one of the newly allocated space that override a previously allocated one
	{
		//kfree 50 KB
		freeFrames = sys_calculate_free_frames() ;
f012aa9f:	e8 2c 16 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012aaa4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aaa7:	e8 e8 91 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012aaac:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[13]);
f012aaaf:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012aab5:	83 ec 0c             	sub    $0xc,%esp
f012aab8:	50                   	push   %eax
f012aab9:	e8 40 c9 fd ff       	call   f01073fe <kfree>
f012aabe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012aac1:	e8 ce 91 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012aac6:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012aac9:	74 1d                	je     f012aae8 <test_kfreelast+0x1e00>
f012aacb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aacf:	75 17                	jne    f012aae8 <test_kfreelast+0x1e00>
f012aad1:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aad8:	83 ec 0c             	sub    $0xc,%esp
f012aadb:	68 30 b5 13 f0       	push   $0xf013b530
f012aae0:	e8 48 61 fd ff       	call   f0100c2d <cprintf>
f012aae5:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 13) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012aae8:	e8 e3 15 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012aaed:	89 c2                	mov    %eax,%edx
f012aaef:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aaf2:	29 c2                	sub    %eax,%edx
f012aaf4:	89 d0                	mov    %edx,%eax
f012aaf6:	83 f8 0d             	cmp    $0xd,%eax
f012aaf9:	74 1d                	je     f012ab18 <test_kfreelast+0x1e30>
f012aafb:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aaff:	75 17                	jne    f012ab18 <test_kfreelast+0x1e30>
f012ab01:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab08:	83 ec 0c             	sub    $0xc,%esp
f012ab0b:	68 9c b5 13 f0       	push   $0xf013b59c
f012ab10:	e8 18 61 fd ff       	call   f0100c2d <cprintf>
f012ab15:	83 c4 10             	add    $0x10,%esp
	{
		//50 KB

		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012ab18:	83 ec 0c             	sub    $0xc,%esp
f012ab1b:	6a 03                	push   $0x3
f012ab1d:	e8 57 1a fe ff       	call   f010c579 <sys_bypassPageFault>
f012ab22:	83 c4 10             	add    $0x10,%esp

		ptr = (char *) ptr_allocations[13];
f012ab25:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ab2b:	89 45 84             	mov    %eax,-0x7c(%ebp)

		for (i = 0; i < 50*kilo; ++i)
f012ab2e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ab35:	eb 3c                	jmp    f012ab73 <test_kfreelast+0x1e8b>
		{
			ptr[i] = 10;
f012ab37:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012ab3a:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012ab3d:	01 d0                	add    %edx,%eax
f012ab3f:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012ab42:	e8 20 1a fe ff       	call   f010c567 <sys_rcr2>
f012ab47:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012ab4a:	8b 55 84             	mov    -0x7c(%ebp),%edx
f012ab4d:	01 ca                	add    %ecx,%edx
f012ab4f:	39 d0                	cmp    %edx,%eax
f012ab51:	74 1d                	je     f012ab70 <test_kfreelast+0x1e88>
f012ab53:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ab57:	75 17                	jne    f012ab70 <test_kfreelast+0x1e88>
f012ab59:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ab60:	83 ec 0c             	sub    $0xc,%esp
f012ab63:	68 b4 b6 13 f0       	push   $0xf013b6b4
f012ab68:	e8 c0 60 fd ff       	call   f0100c2d <cprintf>
f012ab6d:	83 c4 10             	add    $0x10,%esp
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		ptr = (char *) ptr_allocations[13];

		for (i = 0; i < 50*kilo; ++i)
f012ab70:	ff 45 f4             	incl   -0xc(%ebp)
f012ab73:	81 7d f4 ff c7 00 00 	cmpl   $0xc7ff,-0xc(%ebp)
f012ab7a:	7e bb                	jle    f012ab37 <test_kfreelast+0x1e4f>
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[i])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012ab7c:	83 ec 0c             	sub    $0xc,%esp
f012ab7f:	6a 00                	push   $0x0
f012ab81:	e8 f3 19 fe ff       	call   f010c579 <sys_bypassPageFault>
f012ab86:	83 c4 10             	add    $0x10,%esp


		//3 MB
		ptr = (char*)ptr_allocations[14];
f012ab89:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012ab8f:	89 45 84             	mov    %eax,-0x7c(%ebp)
		for (i = 0; i < lastIndices[14]; ++i)
f012ab92:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012ab99:	eb 1e                	jmp    f012abb9 <test_kfreelast+0x1ed1>
		{
			sums[14] += ptr[i] ;
f012ab9b:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012aba1:	8b 4d f4             	mov    -0xc(%ebp),%ecx
f012aba4:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aba7:	01 c8                	add    %ecx,%eax
f012aba9:	8a 00                	mov    (%eax),%al
f012abab:	0f be c0             	movsbl %al,%eax
f012abae:	01 d0                	add    %edx,%eax
f012abb0:	89 85 f4 fd ff ff    	mov    %eax,-0x20c(%ebp)
		sys_bypassPageFault(0);


		//3 MB
		ptr = (char*)ptr_allocations[14];
		for (i = 0; i < lastIndices[14]; ++i)
f012abb6:	ff 45 f4             	incl   -0xc(%ebp)
f012abb9:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012abbf:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012abc2:	7f d7                	jg     f012ab9b <test_kfreelast+0x1eb3>
		{
			sums[14] += ptr[i] ;
		}
		if (sums[14] != 14*lastIndices[14])	if (!f) {f=1; cprintf("\nkfree: invalid read after freeing some allocations");}
f012abc4:	8b 8d f4 fd ff ff    	mov    -0x20c(%ebp),%ecx
f012abca:	8b 95 44 fe ff ff    	mov    -0x1bc(%ebp),%edx
f012abd0:	89 d0                	mov    %edx,%eax
f012abd2:	01 c0                	add    %eax,%eax
f012abd4:	01 d0                	add    %edx,%eax
f012abd6:	01 c0                	add    %eax,%eax
f012abd8:	01 d0                	add    %edx,%eax
f012abda:	01 c0                	add    %eax,%eax
f012abdc:	39 c1                	cmp    %eax,%ecx
f012abde:	74 1d                	je     f012abfd <test_kfreelast+0x1f15>
f012abe0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012abe4:	75 17                	jne    f012abfd <test_kfreelast+0x1f15>
f012abe6:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012abed:	83 ec 0c             	sub    $0xc,%esp
f012abf0:	68 80 b6 13 f0       	push   $0xf013b680
f012abf5:	e8 33 60 fd ff       	call   f0100c2d <cprintf>
f012abfa:	83 c4 10             	add    $0x10,%esp
	}

	if (!f) {ce += 15;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012abfd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac01:	75 17                	jne    f012ac1a <test_kfreelast+0x1f32>
f012ac03:	83 45 f0 0f          	addl   $0xf,-0x10(%ebp)
f012ac07:	83 ec 08             	sub    $0x8,%esp
f012ac0a:	ff 75 f0             	pushl  -0x10(%ebp)
f012ac0d:	68 08 b5 13 f0       	push   $0xf013b508
f012ac12:	e8 16 60 fd ff       	call   f0100c2d <cprintf>
f012ac17:	83 c4 10             	add    $0x10,%esp
f012ac1a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//kfree all remaining allocations
	{
		//kfree 7 KB
		freeFrames = sys_calculate_free_frames() ;
f012ac21:	e8 aa 14 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012ac26:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ac29:	e8 66 90 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012ac2e:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[4]);
f012ac31:	8b 85 7c fd ff ff    	mov    -0x284(%ebp),%eax
f012ac37:	83 ec 0c             	sub    $0xc,%esp
f012ac3a:	50                   	push   %eax
f012ac3b:	e8 be c7 fd ff       	call   f01073fe <kfree>
f012ac40:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ac43:	e8 4c 90 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012ac48:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ac4b:	74 1d                	je     f012ac6a <test_kfreelast+0x1f82>
f012ac4d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac51:	75 17                	jne    f012ac6a <test_kfreelast+0x1f82>
f012ac53:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac5a:	83 ec 0c             	sub    $0xc,%esp
f012ac5d:	68 30 b5 13 f0       	push   $0xf013b530
f012ac62:	e8 c6 5f fd ff       	call   f0100c2d <cprintf>
f012ac67:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 2) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ac6a:	e8 61 14 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012ac6f:	89 c2                	mov    %eax,%edx
f012ac71:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ac74:	29 c2                	sub    %eax,%edx
f012ac76:	89 d0                	mov    %edx,%eax
f012ac78:	83 f8 02             	cmp    $0x2,%eax
f012ac7b:	74 1d                	je     f012ac9a <test_kfreelast+0x1fb2>
f012ac7d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ac81:	75 17                	jne    f012ac9a <test_kfreelast+0x1fb2>
f012ac83:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ac8a:	83 ec 0c             	sub    $0xc,%esp
f012ac8d:	68 9c b5 13 f0       	push   $0xf013b59c
f012ac92:	e8 96 5f fd ff       	call   f0100c2d <cprintf>
f012ac97:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012ac9a:	e8 31 14 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012ac9f:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012aca2:	e8 ed 8f fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012aca7:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[14]);
f012acaa:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012acb0:	83 ec 0c             	sub    $0xc,%esp
f012acb3:	50                   	push   %eax
f012acb4:	e8 45 c7 fd ff       	call   f01073fe <kfree>
f012acb9:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012acbc:	e8 d3 8f fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012acc1:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012acc4:	74 1d                	je     f012ace3 <test_kfreelast+0x1ffb>
f012acc6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acca:	75 17                	jne    f012ace3 <test_kfreelast+0x1ffb>
f012accc:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012acd3:	83 ec 0c             	sub    $0xc,%esp
f012acd6:	68 30 b5 13 f0       	push   $0xf013b530
f012acdb:	e8 4d 5f fd ff       	call   f0100c2d <cprintf>
f012ace0:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ace3:	e8 e8 13 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012ace8:	89 c2                	mov    %eax,%edx
f012acea:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012aced:	29 c2                	sub    %eax,%edx
f012acef:	89 d0                	mov    %edx,%eax
f012acf1:	3d 00 03 00 00       	cmp    $0x300,%eax
f012acf6:	74 1d                	je     f012ad15 <test_kfreelast+0x202d>
f012acf8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012acfc:	75 17                	jne    f012ad15 <test_kfreelast+0x202d>
f012acfe:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad05:	83 ec 0c             	sub    $0xc,%esp
f012ad08:	68 9c b5 13 f0       	push   $0xf013b59c
f012ad0d:	e8 1b 5f fd ff       	call   f0100c2d <cprintf>
f012ad12:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 3 MB
		freeFrames = sys_calculate_free_frames() ;
f012ad15:	e8 b6 13 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012ad1a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad1d:	e8 72 8f fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012ad22:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[5]);
f012ad25:	8b 85 80 fd ff ff    	mov    -0x280(%ebp),%eax
f012ad2b:	83 ec 0c             	sub    $0xc,%esp
f012ad2e:	50                   	push   %eax
f012ad2f:	e8 ca c6 fd ff       	call   f01073fe <kfree>
f012ad34:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ad37:	e8 58 8f fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012ad3c:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ad3f:	74 1d                	je     f012ad5e <test_kfreelast+0x2076>
f012ad41:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad45:	75 17                	jne    f012ad5e <test_kfreelast+0x2076>
f012ad47:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad4e:	83 ec 0c             	sub    $0xc,%esp
f012ad51:	68 30 b5 13 f0       	push   $0xf013b530
f012ad56:	e8 d2 5e fd ff       	call   f0100c2d <cprintf>
f012ad5b:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 3*Mega/4096) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ad5e:	e8 6d 13 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012ad63:	89 c2                	mov    %eax,%edx
f012ad65:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ad68:	29 c2                	sub    %eax,%edx
f012ad6a:	89 d0                	mov    %edx,%eax
f012ad6c:	3d 00 03 00 00       	cmp    $0x300,%eax
f012ad71:	74 1d                	je     f012ad90 <test_kfreelast+0x20a8>
f012ad73:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ad77:	75 17                	jne    f012ad90 <test_kfreelast+0x20a8>
f012ad79:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ad80:	83 ec 0c             	sub    $0xc,%esp
f012ad83:	68 9c b5 13 f0       	push   $0xf013b59c
f012ad88:	e8 a0 5e fd ff       	call   f0100c2d <cprintf>
f012ad8d:	83 c4 10             	add    $0x10,%esp

		//kfree 1st 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012ad90:	e8 3b 13 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012ad95:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ad98:	e8 f7 8e fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012ad9d:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012ada0:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012ada6:	83 ec 0c             	sub    $0xc,%esp
f012ada9:	50                   	push   %eax
f012adaa:	e8 4f c6 fd ff       	call   f01073fe <kfree>
f012adaf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012adb2:	e8 dd 8e fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012adb7:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012adba:	74 1d                	je     f012add9 <test_kfreelast+0x20f1>
f012adbc:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012adc0:	75 17                	jne    f012add9 <test_kfreelast+0x20f1>
f012adc2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012adc9:	83 ec 0c             	sub    $0xc,%esp
f012adcc:	68 30 b5 13 f0       	push   $0xf013b530
f012add1:	e8 57 5e fd ff       	call   f0100c2d <cprintf>
f012add6:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012add9:	e8 f2 12 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012adde:	89 c2                	mov    %eax,%edx
f012ade0:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ade3:	29 c2                	sub    %eax,%edx
f012ade5:	89 d0                	mov    %edx,%eax
f012ade7:	83 f8 01             	cmp    $0x1,%eax
f012adea:	74 1d                	je     f012ae09 <test_kfreelast+0x2121>
f012adec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012adf0:	75 17                	jne    f012ae09 <test_kfreelast+0x2121>
f012adf2:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012adf9:	83 ec 0c             	sub    $0xc,%esp
f012adfc:	68 9c b5 13 f0       	push   $0xf013b59c
f012ae01:	e8 27 5e fd ff       	call   f0100c2d <cprintf>
f012ae06:	83 c4 10             	add    $0x10,%esp

		//kfree 2nd 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012ae09:	e8 c2 12 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012ae0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012ae11:	e8 7e 8e fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012ae16:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[3]);
f012ae19:	8b 85 78 fd ff ff    	mov    -0x288(%ebp),%eax
f012ae1f:	83 ec 0c             	sub    $0xc,%esp
f012ae22:	50                   	push   %eax
f012ae23:	e8 d6 c5 fd ff       	call   f01073fe <kfree>
f012ae28:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012ae2b:	e8 64 8e fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012ae30:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012ae33:	74 1d                	je     f012ae52 <test_kfreelast+0x216a>
f012ae35:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae39:	75 17                	jne    f012ae52 <test_kfreelast+0x216a>
f012ae3b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae42:	83 ec 0c             	sub    $0xc,%esp
f012ae45:	68 30 b5 13 f0       	push   $0xf013b530
f012ae4a:	e8 de 5d fd ff       	call   f0100c2d <cprintf>
f012ae4f:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 1) if (!f) {f=1; cprintf("\nWrong kfree: pages in memory are not freed correctly");}
f012ae52:	e8 79 12 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012ae57:	89 c2                	mov    %eax,%edx
f012ae59:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012ae5c:	29 c2                	sub    %eax,%edx
f012ae5e:	89 d0                	mov    %edx,%eax
f012ae60:	83 f8 01             	cmp    $0x1,%eax
f012ae63:	74 1d                	je     f012ae82 <test_kfreelast+0x219a>
f012ae65:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae69:	75 17                	jne    f012ae82 <test_kfreelast+0x219a>
f012ae6b:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae72:	83 ec 0c             	sub    $0xc,%esp
f012ae75:	68 9c b5 13 f0       	push   $0xf013b59c
f012ae7a:	e8 ae 5d fd ff       	call   f0100c2d <cprintf>
f012ae7f:	83 c4 10             	add    $0x10,%esp

		if(start_freeFrames != (sys_calculate_free_frames())) if (!f) {f=1; cprintf("\nWrong kfree: not all pages removed correctly at end");}
f012ae82:	e8 49 12 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012ae87:	89 c2                	mov    %eax,%edx
f012ae89:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ae8c:	39 c2                	cmp    %eax,%edx
f012ae8e:	74 1d                	je     f012aead <test_kfreelast+0x21c5>
f012ae90:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012ae94:	75 17                	jne    f012aead <test_kfreelast+0x21c5>
f012ae96:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012ae9d:	83 ec 0c             	sub    $0xc,%esp
f012aea0:	68 fc b6 13 f0       	push   $0xf013b6fc
f012aea5:	e8 83 5d fd ff       	call   f0100c2d <cprintf>
f012aeaa:	83 c4 10             	add    $0x10,%esp

	//Check memory access after kfree
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);
f012aead:	83 ec 0c             	sub    $0xc,%esp
f012aeb0:	6a 03                	push   $0x3
f012aeb2:	e8 c2 16 fe ff       	call   f010c579 <sys_bypassPageFault>
f012aeb7:	83 c4 10             	add    $0x10,%esp

		for (i = 0; i < 15; ++i)
f012aeba:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012aec1:	e9 8e 00 00 00       	jmp    f012af54 <test_kfreelast+0x226c>
		{
			ptr = (char *) ptr_allocations[i];
f012aec6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012aec9:	8b 84 85 6c fd ff ff 	mov    -0x294(%ebp,%eax,4),%eax
f012aed0:	89 45 84             	mov    %eax,-0x7c(%ebp)
			ptr[0] = 10;
f012aed3:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aed6:	c6 00 0a             	movb   $0xa,(%eax)
			//cprintf("\n\ncr2 = %x, faulted addr = %x", sys_rcr2(), (uint32)&(ptr[0]));
			if (sys_rcr2() != (uint32)&(ptr[0])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012aed9:	e8 89 16 fe ff       	call   f010c567 <sys_rcr2>
f012aede:	89 c2                	mov    %eax,%edx
f012aee0:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012aee3:	39 c2                	cmp    %eax,%edx
f012aee5:	74 1d                	je     f012af04 <test_kfreelast+0x221c>
f012aee7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012aeeb:	75 17                	jne    f012af04 <test_kfreelast+0x221c>
f012aeed:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012aef4:	83 ec 0c             	sub    $0xc,%esp
f012aef7:	68 b4 b6 13 f0       	push   $0xf013b6b4
f012aefc:	e8 2c 5d fd ff       	call   f0100c2d <cprintf>
f012af01:	83 c4 10             	add    $0x10,%esp
			ptr[lastIndices[i]] = 10;
f012af04:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012af07:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012af0e:	89 c2                	mov    %eax,%edx
f012af10:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012af13:	01 d0                	add    %edx,%eax
f012af15:	c6 00 0a             	movb   $0xa,(%eax)
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
f012af18:	e8 4a 16 fe ff       	call   f010c567 <sys_rcr2>
f012af1d:	89 c2                	mov    %eax,%edx
f012af1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012af22:	8b 84 85 0c fe ff ff 	mov    -0x1f4(%ebp,%eax,4),%eax
f012af29:	89 c1                	mov    %eax,%ecx
f012af2b:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012af2e:	01 c8                	add    %ecx,%eax
f012af30:	39 c2                	cmp    %eax,%edx
f012af32:	74 1d                	je     f012af51 <test_kfreelast+0x2269>
f012af34:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af38:	75 17                	jne    f012af51 <test_kfreelast+0x2269>
f012af3a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012af41:	83 ec 0c             	sub    $0xc,%esp
f012af44:	68 b4 b6 13 f0       	push   $0xf013b6b4
f012af49:	e8 df 5c fd ff       	call   f0100c2d <cprintf>
f012af4e:	83 c4 10             	add    $0x10,%esp
	{
		//Bypass the PAGE FAULT on <MOVB immediate, reg> instruction by setting its length
		//and continue executing the remaining code
		sys_bypassPageFault(3);

		for (i = 0; i < 15; ++i)
f012af51:	ff 45 f4             	incl   -0xc(%ebp)
f012af54:	83 7d f4 0e          	cmpl   $0xe,-0xc(%ebp)
f012af58:	0f 8e 68 ff ff ff    	jle    f012aec6 <test_kfreelast+0x21de>
			ptr[lastIndices[i]] = 10;
			if (sys_rcr2() != (uint32)&(ptr[lastIndices[i]])) if (!f) {f=1; cprintf("\nkfree: successful access to freed space!! it should not be succeeded");}
		}

		//set it to 0 again to cancel the bypassing option
		sys_bypassPageFault(0);
f012af5e:	83 ec 0c             	sub    $0xc,%esp
f012af61:	6a 00                	push   $0x0
f012af63:	e8 11 16 fe ff       	call   f010c579 <sys_bypassPageFault>
f012af68:	83 c4 10             	add    $0x10,%esp
	}

	//kfree non-exist item
	{
		//kfree 2 MB
		freeFrames = sys_calculate_free_frames() ;
f012af6b:	e8 60 11 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012af70:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012af73:	e8 1c 8d fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012af78:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[0]);
f012af7b:	8b 85 6c fd ff ff    	mov    -0x294(%ebp),%eax
f012af81:	83 ec 0c             	sub    $0xc,%esp
f012af84:	50                   	push   %eax
f012af85:	e8 74 c4 fd ff       	call   f01073fe <kfree>
f012af8a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012af8d:	e8 02 8d fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012af92:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012af95:	74 1d                	je     f012afb4 <test_kfreelast+0x22cc>
f012af97:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012af9b:	75 17                	jne    f012afb4 <test_kfreelast+0x22cc>
f012af9d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012afa4:	83 ec 0c             	sub    $0xc,%esp
f012afa7:	68 30 b5 13 f0       	push   $0xf013b530
f012afac:	e8 7c 5c fd ff       	call   f0100c2d <cprintf>
f012afb1:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012afb4:	e8 17 11 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012afb9:	89 c2                	mov    %eax,%edx
f012afbb:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012afbe:	39 c2                	cmp    %eax,%edx
f012afc0:	74 1d                	je     f012afdf <test_kfreelast+0x22f7>
f012afc2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012afc6:	75 17                	jne    f012afdf <test_kfreelast+0x22f7>
f012afc8:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012afcf:	83 ec 0c             	sub    $0xc,%esp
f012afd2:	68 34 b7 13 f0       	push   $0xf013b734
f012afd7:	e8 51 5c fd ff       	call   f0100c2d <cprintf>
f012afdc:	83 c4 10             	add    $0x10,%esp

		//kfree 2 KB
		freeFrames = sys_calculate_free_frames() ;
f012afdf:	e8 ec 10 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012afe4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012afe7:	e8 a8 8c fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012afec:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[2]);
f012afef:	8b 85 74 fd ff ff    	mov    -0x28c(%ebp),%eax
f012aff5:	83 ec 0c             	sub    $0xc,%esp
f012aff8:	50                   	push   %eax
f012aff9:	e8 00 c4 fd ff       	call   f01073fe <kfree>
f012affe:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b001:	e8 8e 8c fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012b006:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b009:	74 1d                	je     f012b028 <test_kfreelast+0x2340>
f012b00b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b00f:	75 17                	jne    f012b028 <test_kfreelast+0x2340>
f012b011:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b018:	83 ec 0c             	sub    $0xc,%esp
f012b01b:	68 30 b5 13 f0       	push   $0xf013b530
f012b020:	e8 08 5c fd ff       	call   f0100c2d <cprintf>
f012b025:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b028:	e8 a3 10 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b02d:	89 c2                	mov    %eax,%edx
f012b02f:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b032:	39 c2                	cmp    %eax,%edx
f012b034:	74 1d                	je     f012b053 <test_kfreelast+0x236b>
f012b036:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b03a:	75 17                	jne    f012b053 <test_kfreelast+0x236b>
f012b03c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b043:	83 ec 0c             	sub    $0xc,%esp
f012b046:	68 34 b7 13 f0       	push   $0xf013b734
f012b04b:	e8 dd 5b fd ff       	call   f0100c2d <cprintf>
f012b050:	83 c4 10             	add    $0x10,%esp

		//kfree 20 KB
		freeFrames = sys_calculate_free_frames() ;
f012b053:	e8 78 10 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b058:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b05b:	e8 34 8c fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012b060:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[8]);
f012b063:	8b 85 8c fd ff ff    	mov    -0x274(%ebp),%eax
f012b069:	83 ec 0c             	sub    $0xc,%esp
f012b06c:	50                   	push   %eax
f012b06d:	e8 8c c3 fd ff       	call   f01073fe <kfree>
f012b072:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b075:	e8 1a 8c fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012b07a:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b07d:	74 1d                	je     f012b09c <test_kfreelast+0x23b4>
f012b07f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b083:	75 17                	jne    f012b09c <test_kfreelast+0x23b4>
f012b085:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b08c:	83 ec 0c             	sub    $0xc,%esp
f012b08f:	68 30 b5 13 f0       	push   $0xf013b530
f012b094:	e8 94 5b fd ff       	call   f0100c2d <cprintf>
f012b099:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b09c:	e8 2f 10 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b0a1:	89 c2                	mov    %eax,%edx
f012b0a3:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b0a6:	39 c2                	cmp    %eax,%edx
f012b0a8:	74 1d                	je     f012b0c7 <test_kfreelast+0x23df>
f012b0aa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0ae:	75 17                	jne    f012b0c7 <test_kfreelast+0x23df>
f012b0b0:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b0b7:	83 ec 0c             	sub    $0xc,%esp
f012b0ba:	68 34 b7 13 f0       	push   $0xf013b734
f012b0bf:	e8 69 5b fd ff       	call   f0100c2d <cprintf>
f012b0c4:	83 c4 10             	add    $0x10,%esp

		//kfree 1 MB
		freeFrames = sys_calculate_free_frames() ;
f012b0c7:	e8 04 10 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b0cc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		freeDiskFrames = pf_calculate_free_frames() ;
f012b0cf:	e8 c0 8b fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012b0d4:	89 45 d0             	mov    %eax,-0x30(%ebp)
		kfree(ptr_allocations[9]);
f012b0d7:	8b 85 90 fd ff ff    	mov    -0x270(%ebp),%eax
f012b0dd:	83 ec 0c             	sub    $0xc,%esp
f012b0e0:	50                   	push   %eax
f012b0e1:	e8 18 c3 fd ff       	call   f01073fe <kfree>
f012b0e6:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0) if (!f) {f=1; cprintf("\nPage file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");}
f012b0e9:	e8 a6 8b fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012b0ee:	3b 45 d0             	cmp    -0x30(%ebp),%eax
f012b0f1:	74 1d                	je     f012b110 <test_kfreelast+0x2428>
f012b0f3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b0f7:	75 17                	jne    f012b110 <test_kfreelast+0x2428>
f012b0f9:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b100:	83 ec 0c             	sub    $0xc,%esp
f012b103:	68 30 b5 13 f0       	push   $0xf013b530
f012b108:	e8 20 5b fd ff       	call   f0100c2d <cprintf>
f012b10d:	83 c4 10             	add    $0x10,%esp
		if ((sys_calculate_free_frames() - freeFrames) != 0) if (!f) {f=1; cprintf("\nWrong kfree: attempt to kfree a non-existing ptr. It should do nothing");}
f012b110:	e8 bb 0f fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b115:	89 c2                	mov    %eax,%edx
f012b117:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012b11a:	39 c2                	cmp    %eax,%edx
f012b11c:	74 1d                	je     f012b13b <test_kfreelast+0x2453>
f012b11e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b122:	75 17                	jne    f012b13b <test_kfreelast+0x2453>
f012b124:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
f012b12b:	83 ec 0c             	sub    $0xc,%esp
f012b12e:	68 34 b7 13 f0       	push   $0xf013b734
f012b133:	e8 f5 5a fd ff       	call   f0100c2d <cprintf>
f012b138:	83 c4 10             	add    $0x10,%esp

	}

	if (!f) {ce += 10;cprintf("\nkfreelast: current evaluation = %d%\n", ce);} f=0;
f012b13b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f012b13f:	75 17                	jne    f012b158 <test_kfreelast+0x2470>
f012b141:	83 45 f0 0a          	addl   $0xa,-0x10(%ebp)
f012b145:	83 ec 08             	sub    $0x8,%esp
f012b148:	ff 75 f0             	pushl  -0x10(%ebp)
f012b14b:	68 08 b5 13 f0       	push   $0xf013b508
f012b150:	e8 d8 5a fd ff       	call   f0100c2d <cprintf>
f012b155:	83 c4 10             	add    $0x10,%esp
f012b158:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)

	//cprintf("\nCongratulations!! your modification is run successfully.\n");

	return 1;
f012b15f:	b8 01 00 00 00       	mov    $0x1,%eax
}
f012b164:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012b167:	5b                   	pop    %ebx
f012b168:	5f                   	pop    %edi
f012b169:	5d                   	pop    %ebp
f012b16a:	c3                   	ret    

f012b16b <test_krealloc>:

int test_krealloc() {
f012b16b:	55                   	push   %ebp
f012b16c:	89 e5                	mov    %esp,%ebp
f012b16e:	57                   	push   %edi
f012b16f:	53                   	push   %ebx
f012b170:	81 ec 50 02 00 00    	sub    $0x250,%esp
	cprintf("==============================================\n");
f012b176:	83 ec 0c             	sub    $0xc,%esp
f012b179:	68 18 a4 13 f0       	push   $0xf013a418
f012b17e:	e8 aa 5a fd ff       	call   f0100c2d <cprintf>
f012b183:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012b186:	83 ec 0c             	sub    $0xc,%esp
f012b189:	68 48 a4 13 f0       	push   $0xf013a448
f012b18e:	e8 9a 5a fd ff       	call   f0100c2d <cprintf>
f012b193:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012b196:	83 ec 0c             	sub    $0xc,%esp
f012b199:	68 18 a4 13 f0       	push   $0xf013a418
f012b19e:	e8 8a 5a fd ff       	call   f0100c2d <cprintf>
f012b1a3:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012b1a6:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012b1aa:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012b1ae:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012b1b4:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012b1ba:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012b1c1:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012b1c8:	8d 95 58 fe ff ff    	lea    -0x1a8(%ebp),%edx
f012b1ce:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b1d3:	b8 00 00 00 00       	mov    $0x0,%eax
f012b1d8:	89 d7                	mov    %edx,%edi
f012b1da:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012b1dc:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012b1e3:	8d 95 08 fe ff ff    	lea    -0x1f8(%ebp),%edx
f012b1e9:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b1ee:	b8 00 00 00 00       	mov    $0x0,%eax
f012b1f3:	89 d7                	mov    %edx,%edi
f012b1f5:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012b1f7:	8d 95 b8 fd ff ff    	lea    -0x248(%ebp),%edx
f012b1fd:	b9 14 00 00 00       	mov    $0x14,%ecx
f012b202:	b8 00 00 00 00       	mov    $0x0,%eax
f012b207:	89 d7                	mov    %edx,%edi
f012b209:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b20b:	e8 c0 0e fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b210:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012b213:	83 ec 08             	sub    $0x8,%esp
f012b216:	68 00 fc 0f 00       	push   $0xffc00
f012b21b:	6a 00                	push   $0x0
f012b21d:	e8 78 c2 fd ff       	call   f010749a <krealloc>
f012b222:	83 c4 10             	add    $0x10,%esp
f012b225:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012b22b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b231:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012b236:	77 17                	ja     f012b24f <test_krealloc+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b238:	83 ec 04             	sub    $0x4,%esp
f012b23b:	68 7c b7 13 f0       	push   $0xf013b77c
f012b240:	68 e2 0e 00 00       	push   $0xee2
f012b245:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b24a:	e8 57 4f fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012b24f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012b255:	89 c1                	mov    %eax,%ecx
f012b257:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012b25e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012b261:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b266:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012b269:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b26c:	ba 00 00 00 00       	mov    $0x0,%edx
f012b271:	f7 75 b4             	divl   -0x4c(%ebp)
f012b274:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012b277:	29 d0                	sub    %edx,%eax
f012b279:	89 c3                	mov    %eax,%ebx
f012b27b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012b282:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b287:	0f b6 d0             	movzbl %al,%edx
f012b28a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012b28d:	01 d0                	add    %edx,%eax
f012b28f:	48                   	dec    %eax
f012b290:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012b293:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b296:	ba 00 00 00 00       	mov    $0x0,%edx
f012b29b:	f7 75 ac             	divl   -0x54(%ebp)
f012b29e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012b2a1:	29 d0                	sub    %edx,%eax
f012b2a3:	01 c3                	add    %eax,%ebx
f012b2a5:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012b2ac:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b2b1:	0f b6 c0             	movzbl %al,%eax
f012b2b4:	c1 e0 04             	shl    $0x4,%eax
f012b2b7:	89 c2                	mov    %eax,%edx
f012b2b9:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012b2bc:	01 d0                	add    %edx,%eax
f012b2be:	48                   	dec    %eax
f012b2bf:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012b2c2:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b2c5:	ba 00 00 00 00       	mov    $0x0,%edx
f012b2ca:	f7 75 a4             	divl   -0x5c(%ebp)
f012b2cd:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012b2d0:	29 d0                	sub    %edx,%eax
f012b2d2:	01 d8                	add    %ebx,%eax
f012b2d4:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012b2d9:	39 c1                	cmp    %eax,%ecx
f012b2db:	74 17                	je     f012b2f4 <test_krealloc+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012b2dd:	83 ec 04             	sub    $0x4,%esp
f012b2e0:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012b2e5:	68 e4 0e 00 00       	push   $0xee4
f012b2ea:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b2ef:	e8 b2 4e fd ff       	call   f01001a6 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b2f4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b2f7:	e8 d4 0d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b2fc:	29 c3                	sub    %eax,%ebx
f012b2fe:	89 d8                	mov    %ebx,%eax
f012b300:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b305:	74 17                	je     f012b31e <test_krealloc+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012b307:	83 ec 04             	sub    $0x4,%esp
f012b30a:	68 ea b7 13 f0       	push   $0xf013b7ea
f012b30f:	68 e7 0e 00 00       	push   $0xee7
f012b314:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b319:	e8 88 4e fd ff       	call   f01001a6 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b31e:	c7 85 08 fe ff ff ff 	movl   $0xffbff,-0x1f8(%ebp)
f012b325:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b328:	e8 a3 0d fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b32d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012b330:	83 ec 08             	sub    $0x8,%esp
f012b333:	68 00 fc 0f 00       	push   $0xffc00
f012b338:	6a 00                	push   $0x0
f012b33a:	e8 5b c1 fd ff       	call   f010749a <krealloc>
f012b33f:	83 c4 10             	add    $0x10,%esp
f012b342:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012b348:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b34e:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012b353:	77 17                	ja     f012b36c <test_krealloc+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b355:	83 ec 04             	sub    $0x4,%esp
f012b358:	68 7c b7 13 f0       	push   $0xf013b77c
f012b35d:	68 ef 0e 00 00       	push   $0xeef
f012b362:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b367:	e8 3a 4e fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012b36c:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012b372:	89 c1                	mov    %eax,%ecx
f012b374:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012b37b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012b37e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b383:	89 45 98             	mov    %eax,-0x68(%ebp)
f012b386:	8b 45 98             	mov    -0x68(%ebp),%eax
f012b389:	ba 00 00 00 00       	mov    $0x0,%edx
f012b38e:	f7 75 9c             	divl   -0x64(%ebp)
f012b391:	8b 45 98             	mov    -0x68(%ebp),%eax
f012b394:	29 d0                	sub    %edx,%eax
f012b396:	89 c3                	mov    %eax,%ebx
f012b398:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012b39f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b3a4:	0f b6 d0             	movzbl %al,%edx
f012b3a7:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012b3aa:	01 d0                	add    %edx,%eax
f012b3ac:	48                   	dec    %eax
f012b3ad:	89 45 90             	mov    %eax,-0x70(%ebp)
f012b3b0:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b3b3:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3b8:	f7 75 94             	divl   -0x6c(%ebp)
f012b3bb:	8b 45 90             	mov    -0x70(%ebp),%eax
f012b3be:	29 d0                	sub    %edx,%eax
f012b3c0:	01 c3                	add    %eax,%ebx
f012b3c2:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012b3c9:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b3ce:	0f b6 c0             	movzbl %al,%eax
f012b3d1:	c1 e0 04             	shl    $0x4,%eax
f012b3d4:	89 c2                	mov    %eax,%edx
f012b3d6:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012b3d9:	01 d0                	add    %edx,%eax
f012b3db:	48                   	dec    %eax
f012b3dc:	89 45 88             	mov    %eax,-0x78(%ebp)
f012b3df:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b3e2:	ba 00 00 00 00       	mov    $0x0,%edx
f012b3e7:	f7 75 8c             	divl   -0x74(%ebp)
f012b3ea:	8b 45 88             	mov    -0x78(%ebp),%eax
f012b3ed:	29 d0                	sub    %edx,%eax
f012b3ef:	01 d8                	add    %ebx,%eax
f012b3f1:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012b3f6:	39 c1                	cmp    %eax,%ecx
f012b3f8:	74 17                	je     f012b411 <test_krealloc+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012b3fa:	83 ec 04             	sub    $0x4,%esp
f012b3fd:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012b402:	68 f1 0e 00 00       	push   $0xef1
f012b407:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b40c:	e8 95 4d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b411:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b414:	e8 b7 0c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b419:	29 c3                	sub    %eax,%ebx
f012b41b:	89 d8                	mov    %ebx,%eax
f012b41d:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b422:	74 17                	je     f012b43b <test_krealloc+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012b424:	83 ec 04             	sub    $0x4,%esp
f012b427:	68 ea b7 13 f0       	push   $0xf013b7ea
f012b42c:	68 f3 0e 00 00       	push   $0xef3
f012b431:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b436:	e8 6b 4d fd ff       	call   f01001a6 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012b43b:	c7 85 0c fe ff ff ff 	movl   $0xffbff,-0x1f4(%ebp)
f012b442:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b445:	e8 86 0c fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b44a:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012b44d:	83 ec 08             	sub    $0x8,%esp
f012b450:	68 00 fc 0f 00       	push   $0xffc00
f012b455:	6a 00                	push   $0x0
f012b457:	e8 3e c0 fd ff       	call   f010749a <krealloc>
f012b45c:	83 c4 10             	add    $0x10,%esp
f012b45f:	89 85 60 fe ff ff    	mov    %eax,-0x1a0(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012b465:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b46b:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012b470:	77 17                	ja     f012b489 <test_krealloc+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b472:	83 ec 04             	sub    $0x4,%esp
f012b475:	68 7c b7 13 f0       	push   $0xf013b77c
f012b47a:	68 fb 0e 00 00       	push   $0xefb
f012b47f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b484:	e8 1d 4d fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012b489:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012b48f:	89 c1                	mov    %eax,%ecx
f012b491:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012b498:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012b49b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b4a0:	89 45 80             	mov    %eax,-0x80(%ebp)
f012b4a3:	8b 45 80             	mov    -0x80(%ebp),%eax
f012b4a6:	ba 00 00 00 00       	mov    $0x0,%edx
f012b4ab:	f7 75 84             	divl   -0x7c(%ebp)
f012b4ae:	8b 45 80             	mov    -0x80(%ebp),%eax
f012b4b1:	29 d0                	sub    %edx,%eax
f012b4b3:	89 c3                	mov    %eax,%ebx
f012b4b5:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012b4bc:	10 00 00 
f012b4bf:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b4c4:	0f b6 d0             	movzbl %al,%edx
f012b4c7:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012b4cd:	01 d0                	add    %edx,%eax
f012b4cf:	48                   	dec    %eax
f012b4d0:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012b4d6:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012b4dc:	ba 00 00 00 00       	mov    $0x0,%edx
f012b4e1:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012b4e7:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012b4ed:	29 d0                	sub    %edx,%eax
f012b4ef:	01 c3                	add    %eax,%ebx
f012b4f1:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012b4f8:	10 00 00 
f012b4fb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b500:	0f b6 c0             	movzbl %al,%eax
f012b503:	c1 e0 04             	shl    $0x4,%eax
f012b506:	89 c2                	mov    %eax,%edx
f012b508:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012b50e:	01 d0                	add    %edx,%eax
f012b510:	48                   	dec    %eax
f012b511:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012b517:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012b51d:	ba 00 00 00 00       	mov    $0x0,%edx
f012b522:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012b528:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012b52e:	29 d0                	sub    %edx,%eax
f012b530:	01 d8                	add    %ebx,%eax
f012b532:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012b537:	39 c1                	cmp    %eax,%ecx
f012b539:	74 17                	je     f012b552 <test_krealloc+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012b53b:	83 ec 04             	sub    $0x4,%esp
f012b53e:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012b543:	68 fd 0e 00 00       	push   $0xefd
f012b548:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b54d:	e8 54 4c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b552:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b555:	e8 76 0b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b55a:	29 c3                	sub    %eax,%ebx
f012b55c:	89 d8                	mov    %ebx,%eax
f012b55e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b563:	74 17                	je     f012b57c <test_krealloc+0x411>
			panic("krealloc: Wrong allocation: ");
f012b565:	83 ec 04             	sub    $0x4,%esp
f012b568:	68 ea b7 13 f0       	push   $0xf013b7ea
f012b56d:	68 ff 0e 00 00       	push   $0xeff
f012b572:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b577:	e8 2a 4c fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012b57c:	c7 85 10 fe ff ff ff 	movl   $0x3feff,-0x1f0(%ebp)
f012b583:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012b586:	e8 45 0b fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b58b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012b58e:	83 ec 08             	sub    $0x8,%esp
f012b591:	68 00 fc 0f 00       	push   $0xffc00
f012b596:	6a 00                	push   $0x0
f012b598:	e8 fd be fd ff       	call   f010749a <krealloc>
f012b59d:	83 c4 10             	add    $0x10,%esp
f012b5a0:	89 85 64 fe ff ff    	mov    %eax,-0x19c(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012b5a6:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b5ac:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012b5b1:	77 17                	ja     f012b5ca <test_krealloc+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b5b3:	83 ec 04             	sub    $0x4,%esp
f012b5b6:	68 7c b7 13 f0       	push   $0xf013b77c
f012b5bb:	68 06 0f 00 00       	push   $0xf06
f012b5c0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b5c5:	e8 dc 4b fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012b5ca:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012b5d0:	89 c1                	mov    %eax,%ecx
f012b5d2:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012b5d9:	10 00 00 
f012b5dc:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012b5e2:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b5e7:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012b5ed:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012b5f3:	ba 00 00 00 00       	mov    $0x0,%edx
f012b5f8:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012b5fe:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012b604:	29 d0                	sub    %edx,%eax
f012b606:	89 c3                	mov    %eax,%ebx
f012b608:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012b60f:	10 00 00 
f012b612:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b617:	0f b6 d0             	movzbl %al,%edx
f012b61a:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012b620:	01 d0                	add    %edx,%eax
f012b622:	48                   	dec    %eax
f012b623:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012b629:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012b62f:	ba 00 00 00 00       	mov    $0x0,%edx
f012b634:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012b63a:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012b640:	29 d0                	sub    %edx,%eax
f012b642:	01 c3                	add    %eax,%ebx
f012b644:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012b64b:	10 00 00 
f012b64e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b653:	0f b6 c0             	movzbl %al,%eax
f012b656:	c1 e0 04             	shl    $0x4,%eax
f012b659:	89 c2                	mov    %eax,%edx
f012b65b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012b661:	01 d0                	add    %edx,%eax
f012b663:	48                   	dec    %eax
f012b664:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012b66a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012b670:	ba 00 00 00 00       	mov    $0x0,%edx
f012b675:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012b67b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012b681:	29 d0                	sub    %edx,%eax
f012b683:	01 d8                	add    %ebx,%eax
f012b685:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012b68a:	39 c1                	cmp    %eax,%ecx
f012b68c:	74 17                	je     f012b6a5 <test_krealloc+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012b68e:	83 ec 04             	sub    $0x4,%esp
f012b691:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012b696:	68 08 0f 00 00       	push   $0xf08
f012b69b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b6a0:	e8 01 4b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012b6a5:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b6a8:	e8 23 0a fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b6ad:	29 c3                	sub    %eax,%ebx
f012b6af:	89 d8                	mov    %ebx,%eax
f012b6b1:	3d 00 01 00 00       	cmp    $0x100,%eax
f012b6b6:	74 17                	je     f012b6cf <test_krealloc+0x564>
			panic("krealloc: Wrong allocation: ");
f012b6b8:	83 ec 04             	sub    $0x4,%esp
f012b6bb:	68 ea b7 13 f0       	push   $0xf013b7ea
f012b6c0:	68 0a 0f 00 00       	push   $0xf0a
f012b6c5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b6ca:	e8 d7 4a fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012b6cf:	c7 85 14 fe ff ff ff 	movl   $0x3feff,-0x1ec(%ebp)
f012b6d6:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012b6d9:	e8 f2 09 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b6de:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012b6e1:	83 ec 08             	sub    $0x8,%esp
f012b6e4:	68 00 fc 1f 00       	push   $0x1ffc00
f012b6e9:	6a 00                	push   $0x0
f012b6eb:	e8 aa bd fd ff       	call   f010749a <krealloc>
f012b6f0:	83 c4 10             	add    $0x10,%esp
f012b6f3:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012b6f9:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b6ff:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012b704:	77 17                	ja     f012b71d <test_krealloc+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b706:	83 ec 04             	sub    $0x4,%esp
f012b709:	68 7c b7 13 f0       	push   $0xf013b77c
f012b70e:	68 11 0f 00 00       	push   $0xf11
f012b713:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b718:	e8 89 4a fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012b71d:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012b723:	89 c1                	mov    %eax,%ecx
f012b725:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012b72c:	10 00 00 
f012b72f:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012b735:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b73a:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012b740:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012b746:	ba 00 00 00 00       	mov    $0x0,%edx
f012b74b:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012b751:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012b757:	29 d0                	sub    %edx,%eax
f012b759:	89 c3                	mov    %eax,%ebx
f012b75b:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012b762:	10 00 00 
f012b765:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b76a:	0f b6 d0             	movzbl %al,%edx
f012b76d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012b773:	01 d0                	add    %edx,%eax
f012b775:	48                   	dec    %eax
f012b776:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012b77c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012b782:	ba 00 00 00 00       	mov    $0x0,%edx
f012b787:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012b78d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012b793:	29 d0                	sub    %edx,%eax
f012b795:	01 c3                	add    %eax,%ebx
f012b797:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012b79e:	10 00 00 
f012b7a1:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b7a6:	0f b6 c0             	movzbl %al,%eax
f012b7a9:	c1 e0 04             	shl    $0x4,%eax
f012b7ac:	89 c2                	mov    %eax,%edx
f012b7ae:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012b7b4:	01 d0                	add    %edx,%eax
f012b7b6:	48                   	dec    %eax
f012b7b7:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012b7bd:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012b7c3:	ba 00 00 00 00       	mov    $0x0,%edx
f012b7c8:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012b7ce:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012b7d4:	29 d0                	sub    %edx,%eax
f012b7d6:	01 d8                	add    %ebx,%eax
f012b7d8:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012b7dd:	39 c1                	cmp    %eax,%ecx
f012b7df:	74 17                	je     f012b7f8 <test_krealloc+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012b7e1:	83 ec 04             	sub    $0x4,%esp
f012b7e4:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012b7e9:	68 13 0f 00 00       	push   $0xf13
f012b7ee:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b7f3:	e8 ae 49 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012b7f8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b7fb:	e8 d0 08 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b800:	29 c3                	sub    %eax,%ebx
f012b802:	89 d8                	mov    %ebx,%eax
f012b804:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b809:	74 17                	je     f012b822 <test_krealloc+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012b80b:	83 ec 04             	sub    $0x4,%esp
f012b80e:	68 ea b7 13 f0       	push   $0xf013b7ea
f012b813:	68 15 0f 00 00       	push   $0xf15
f012b818:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b81d:	e8 84 49 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012b822:	c7 85 18 fe ff ff ff 	movl   $0xffdff,-0x1e8(%ebp)
f012b829:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012b82c:	e8 9f 08 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b831:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012b834:	83 ec 08             	sub    $0x8,%esp
f012b837:	68 00 fc 1f 00       	push   $0x1ffc00
f012b83c:	6a 00                	push   $0x0
f012b83e:	e8 57 bc fd ff       	call   f010749a <krealloc>
f012b843:	83 c4 10             	add    $0x10,%esp
f012b846:	89 85 6c fe ff ff    	mov    %eax,-0x194(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012b84c:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b852:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012b857:	77 17                	ja     f012b870 <test_krealloc+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b859:	83 ec 04             	sub    $0x4,%esp
f012b85c:	68 7c b7 13 f0       	push   $0xf013b77c
f012b861:	68 1c 0f 00 00       	push   $0xf1c
f012b866:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b86b:	e8 36 49 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012b870:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012b876:	89 c1                	mov    %eax,%ecx
f012b878:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012b87f:	10 00 00 
f012b882:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012b888:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b88d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012b893:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012b899:	ba 00 00 00 00       	mov    $0x0,%edx
f012b89e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012b8a4:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012b8aa:	29 d0                	sub    %edx,%eax
f012b8ac:	89 c3                	mov    %eax,%ebx
f012b8ae:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012b8b5:	10 00 00 
f012b8b8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b8bd:	0f b6 d0             	movzbl %al,%edx
f012b8c0:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012b8c6:	01 d0                	add    %edx,%eax
f012b8c8:	48                   	dec    %eax
f012b8c9:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012b8cf:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012b8d5:	ba 00 00 00 00       	mov    $0x0,%edx
f012b8da:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012b8e0:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012b8e6:	29 d0                	sub    %edx,%eax
f012b8e8:	01 c3                	add    %eax,%ebx
f012b8ea:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012b8f1:	10 00 00 
f012b8f4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012b8f9:	0f b6 c0             	movzbl %al,%eax
f012b8fc:	c1 e0 04             	shl    $0x4,%eax
f012b8ff:	89 c2                	mov    %eax,%edx
f012b901:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012b907:	01 d0                	add    %edx,%eax
f012b909:	48                   	dec    %eax
f012b90a:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012b910:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b916:	ba 00 00 00 00       	mov    $0x0,%edx
f012b91b:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012b921:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012b927:	29 d0                	sub    %edx,%eax
f012b929:	01 d8                	add    %ebx,%eax
f012b92b:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012b930:	39 c1                	cmp    %eax,%ecx
f012b932:	74 17                	je     f012b94b <test_krealloc+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012b934:	83 ec 04             	sub    $0x4,%esp
f012b937:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012b93c:	68 1e 0f 00 00       	push   $0xf1e
f012b941:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b946:	e8 5b 48 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012b94b:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012b94e:	e8 7d 07 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b953:	29 c3                	sub    %eax,%ebx
f012b955:	89 d8                	mov    %ebx,%eax
f012b957:	3d 00 02 00 00       	cmp    $0x200,%eax
f012b95c:	74 17                	je     f012b975 <test_krealloc+0x80a>
			panic("krealloc: Wrong allocation: ");
f012b95e:	83 ec 04             	sub    $0x4,%esp
f012b961:	68 ea b7 13 f0       	push   $0xf013b7ea
f012b966:	68 20 0f 00 00       	push   $0xf20
f012b96b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b970:	e8 31 48 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012b975:	c7 85 1c fe ff ff ff 	movl   $0xffdff,-0x1e4(%ebp)
f012b97c:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012b97f:	e8 4c 07 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012b984:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012b987:	83 ec 08             	sub    $0x8,%esp
f012b98a:	68 00 fc 2f 00       	push   $0x2ffc00
f012b98f:	6a 00                	push   $0x0
f012b991:	e8 04 bb fd ff       	call   f010749a <krealloc>
f012b996:	83 c4 10             	add    $0x10,%esp
f012b999:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012b99f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b9a5:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012b9aa:	77 17                	ja     f012b9c3 <test_krealloc+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012b9ac:	83 ec 04             	sub    $0x4,%esp
f012b9af:	68 7c b7 13 f0       	push   $0xf013b77c
f012b9b4:	68 27 0f 00 00       	push   $0xf27
f012b9b9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012b9be:	e8 e3 47 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012b9c3:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012b9c9:	89 c1                	mov    %eax,%ecx
f012b9cb:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012b9d2:	10 00 00 
f012b9d5:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012b9db:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012b9e0:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012b9e6:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b9ec:	ba 00 00 00 00       	mov    $0x0,%edx
f012b9f1:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012b9f7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012b9fd:	29 d0                	sub    %edx,%eax
f012b9ff:	89 c3                	mov    %eax,%ebx
f012ba01:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012ba08:	10 00 00 
f012ba0b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ba10:	0f b6 d0             	movzbl %al,%edx
f012ba13:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012ba19:	01 d0                	add    %edx,%eax
f012ba1b:	48                   	dec    %eax
f012ba1c:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012ba22:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ba28:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba2d:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012ba33:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012ba39:	29 d0                	sub    %edx,%eax
f012ba3b:	01 c3                	add    %eax,%ebx
f012ba3d:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012ba44:	10 00 00 
f012ba47:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ba4c:	0f b6 c0             	movzbl %al,%eax
f012ba4f:	c1 e0 04             	shl    $0x4,%eax
f012ba52:	89 c2                	mov    %eax,%edx
f012ba54:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012ba5a:	01 d0                	add    %edx,%eax
f012ba5c:	48                   	dec    %eax
f012ba5d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012ba63:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ba69:	ba 00 00 00 00       	mov    $0x0,%edx
f012ba6e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012ba74:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012ba7a:	29 d0                	sub    %edx,%eax
f012ba7c:	01 d8                	add    %ebx,%eax
f012ba7e:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012ba83:	39 c1                	cmp    %eax,%ecx
f012ba85:	74 17                	je     f012ba9e <test_krealloc+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012ba87:	83 ec 04             	sub    $0x4,%esp
f012ba8a:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012ba8f:	68 29 0f 00 00       	push   $0xf29
f012ba94:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012ba99:	e8 08 47 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012ba9e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012baa1:	e8 2a 06 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012baa6:	29 c3                	sub    %eax,%ebx
f012baa8:	89 d8                	mov    %ebx,%eax
f012baaa:	3d 00 03 00 00       	cmp    $0x300,%eax
f012baaf:	74 17                	je     f012bac8 <test_krealloc+0x95d>
			panic("Wrong allocation: ");
f012bab1:	83 ec 04             	sub    $0x4,%esp
f012bab4:	68 20 a9 13 f0       	push   $0xf013a920
f012bab9:	68 2b 0f 00 00       	push   $0xf2b
f012babe:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012bac3:	e8 de 46 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012bac8:	c7 85 20 fe ff ff 7f 	movl   $0x5ff7f,-0x1e0(%ebp)
f012bacf:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012bad2:	e8 f9 05 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012bad7:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012bada:	83 ec 08             	sub    $0x8,%esp
f012badd:	68 00 fc 2f 00       	push   $0x2ffc00
f012bae2:	6a 00                	push   $0x0
f012bae4:	e8 b1 b9 fd ff       	call   f010749a <krealloc>
f012bae9:	83 c4 10             	add    $0x10,%esp
f012baec:	89 85 74 fe ff ff    	mov    %eax,-0x18c(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012baf2:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012baf8:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012bafd:	77 17                	ja     f012bb16 <test_krealloc+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012baff:	83 ec 04             	sub    $0x4,%esp
f012bb02:	68 7c b7 13 f0       	push   $0xf013b77c
f012bb07:	68 32 0f 00 00       	push   $0xf32
f012bb0c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012bb11:	e8 90 46 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012bb16:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bb1c:	89 c1                	mov    %eax,%ecx
f012bb1e:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012bb25:	10 00 00 
f012bb28:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012bb2e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012bb33:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012bb39:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012bb3f:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb44:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012bb4a:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012bb50:	29 d0                	sub    %edx,%eax
f012bb52:	89 c3                	mov    %eax,%ebx
f012bb54:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012bb5b:	10 00 00 
f012bb5e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012bb63:	0f b6 d0             	movzbl %al,%edx
f012bb66:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012bb6c:	01 d0                	add    %edx,%eax
f012bb6e:	48                   	dec    %eax
f012bb6f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012bb75:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012bb7b:	ba 00 00 00 00       	mov    $0x0,%edx
f012bb80:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012bb86:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012bb8c:	29 d0                	sub    %edx,%eax
f012bb8e:	01 c3                	add    %eax,%ebx
f012bb90:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012bb97:	10 00 00 
f012bb9a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012bb9f:	0f b6 c0             	movzbl %al,%eax
f012bba2:	c1 e0 04             	shl    $0x4,%eax
f012bba5:	89 c2                	mov    %eax,%edx
f012bba7:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012bbad:	01 d0                	add    %edx,%eax
f012bbaf:	48                   	dec    %eax
f012bbb0:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012bbb6:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012bbbc:	ba 00 00 00 00       	mov    $0x0,%edx
f012bbc1:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012bbc7:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012bbcd:	29 d0                	sub    %edx,%eax
f012bbcf:	01 d8                	add    %ebx,%eax
f012bbd1:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012bbd6:	39 c1                	cmp    %eax,%ecx
f012bbd8:	74 17                	je     f012bbf1 <test_krealloc+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012bbda:	83 ec 04             	sub    $0x4,%esp
f012bbdd:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012bbe2:	68 34 0f 00 00       	push   $0xf34
f012bbe7:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012bbec:	e8 b5 45 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012bbf1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012bbf4:	e8 d7 04 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012bbf9:	29 c3                	sub    %eax,%ebx
f012bbfb:	89 d8                	mov    %ebx,%eax
f012bbfd:	3d 00 03 00 00       	cmp    $0x300,%eax
f012bc02:	74 17                	je     f012bc1b <test_krealloc+0xab0>
			panic("krealloc: Wrong allocation: ");
f012bc04:	83 ec 04             	sub    $0x4,%esp
f012bc07:	68 ea b7 13 f0       	push   $0xf013b7ea
f012bc0c:	68 36 0f 00 00       	push   $0xf36
f012bc11:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012bc16:	e8 8b 45 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012bc1b:	c7 85 24 fe ff ff 7f 	movl   $0x5ff7f,-0x1dc(%ebp)
f012bc22:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012bc25:	e8 a6 04 fe ff       	call   f010c0d0 <sys_calculate_free_frames>
f012bc2a:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012bc2d:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012bc34:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012bc37:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012bc3d:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012bc43:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012bc49:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012bc4c:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012bc4e:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012bc54:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012bc5a:	01 c2                	add    %eax,%edx
f012bc5c:	8a 45 ce             	mov    -0x32(%ebp),%al
f012bc5f:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012bc61:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012bc67:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012bc6d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012bc74:	eb 11                	jmp    f012bc87 <test_krealloc+0xb1c>
			ptr[i] = 2;
f012bc76:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012bc79:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012bc7f:	01 d0                	add    %edx,%eax
f012bc81:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012bc84:	ff 45 f4             	incl   -0xc(%ebp)
f012bc87:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012bc8d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012bc90:	7d e4                	jge    f012bc76 <test_krealloc+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012bc92:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012bc98:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012bc9e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bca4:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012bcaa:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012bcb0:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012bcb7:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bcbd:	01 d0                	add    %edx,%eax
f012bcbf:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012bcc5:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bccb:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012bcd1:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012bcd8:	eb 1b                	jmp    f012bcf5 <test_krealloc+0xb8a>
			intArr[i] = 4;
f012bcda:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012bcdd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012bce4:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bcea:	01 d0                	add    %edx,%eax
f012bcec:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012bcf2:	ff 45 f0             	incl   -0x10(%ebp)
f012bcf5:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012bcfb:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012bcfe:	7d da                	jge    f012bcda <test_krealloc+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012bd00:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bd06:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012bd0c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012bd13:	eb 17                	jmp    f012bd2c <test_krealloc+0xbc1>
			shortArr[i] = 5;
f012bd15:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012bd18:	01 c0                	add    %eax,%eax
f012bd1a:	89 c2                	mov    %eax,%edx
f012bd1c:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bd22:	01 d0                	add    %edx,%eax
f012bd24:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012bd29:	ff 45 ec             	incl   -0x14(%ebp)
f012bd2c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012bd32:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012bd35:	7d de                	jge    f012bd15 <test_krealloc+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012bd37:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bd3d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012bd43:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bd49:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012bd4e:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012bd54:	01 c0                	add    %eax,%eax
f012bd56:	89 c2                	mov    %eax,%edx
f012bd58:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bd5e:	01 d0                	add    %edx,%eax
f012bd60:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012bd65:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012bd6b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012bd71:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012bd78:	eb 49                	jmp    f012bdc3 <test_krealloc+0xc58>
			structArr[i].a = 7;
f012bd7a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012bd7d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bd84:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd8a:	01 d0                	add    %edx,%eax
f012bd8c:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012bd8f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012bd92:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bd99:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bd9f:	01 d0                	add    %edx,%eax
f012bda1:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012bda7:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012bdaa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012bdb1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bdb7:	01 d0                	add    %edx,%eax
f012bdb9:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012bdc0:	ff 45 e8             	incl   -0x18(%ebp)
f012bdc3:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012bdc9:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012bdcc:	7d ac                	jge    f012bd7a <test_krealloc+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012bdce:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012bdd4:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012bdda:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bde0:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012bde3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bde9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012bdef:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012bdf5:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012bdfc:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012be02:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012be09:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012be0f:	01 d0                	add    %edx,%eax
f012be11:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012be14:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012be1a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012be21:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012be27:	01 d0                	add    %edx,%eax
f012be29:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012be2f:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012be35:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012be3c:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012be42:	01 d0                	add    %edx,%eax
f012be44:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012be4b:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012be51:	8a 00                	mov    (%eax),%al
f012be53:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012be56:	75 17                	jne    f012be6f <test_krealloc+0xd04>
f012be58:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012be5e:	89 c2                	mov    %eax,%edx
f012be60:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012be66:	01 d0                	add    %edx,%eax
f012be68:	8a 00                	mov    (%eax),%al
f012be6a:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012be6d:	74 17                	je     f012be86 <test_krealloc+0xd1b>
			panic(
f012be6f:	83 ec 04             	sub    $0x4,%esp
f012be72:	68 08 b8 13 f0       	push   $0xf013b808
f012be77:	68 79 0f 00 00       	push   $0xf79
f012be7c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012be81:	e8 20 43 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012be86:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012be8c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012be92:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012be98:	8a 00                	mov    (%eax),%al
f012be9a:	3c 02                	cmp    $0x2,%al
f012be9c:	75 16                	jne    f012beb4 <test_krealloc+0xd49>
f012be9e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012bea4:	89 c2                	mov    %eax,%edx
f012bea6:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012beac:	01 d0                	add    %edx,%eax
f012beae:	8a 00                	mov    (%eax),%al
f012beb0:	3c 02                	cmp    $0x2,%al
f012beb2:	74 20                	je     f012bed4 <test_krealloc+0xd69>
			panic(
f012beb4:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012beba:	8a 00                	mov    (%eax),%al
f012bebc:	0f be c0             	movsbl %al,%eax
f012bebf:	50                   	push   %eax
f012bec0:	68 48 b8 13 f0       	push   $0xf013b848
f012bec5:	68 7f 0f 00 00       	push   $0xf7f
f012beca:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012becf:	e8 d2 42 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012bed4:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012beda:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012bee0:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bee6:	8b 00                	mov    (%eax),%eax
f012bee8:	83 f8 03             	cmp    $0x3,%eax
f012beeb:	75 1c                	jne    f012bf09 <test_krealloc+0xd9e>
f012beed:	8b 85 10 fe ff ff    	mov    -0x1f0(%ebp),%eax
f012bef3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012befa:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bf00:	01 d0                	add    %edx,%eax
f012bf02:	8b 00                	mov    (%eax),%eax
f012bf04:	83 f8 03             	cmp    $0x3,%eax
f012bf07:	74 17                	je     f012bf20 <test_krealloc+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012bf09:	83 ec 04             	sub    $0x4,%esp
f012bf0c:	68 94 b8 13 f0       	push   $0xf013b894
f012bf11:	68 83 0f 00 00       	push   $0xf83
f012bf16:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012bf1b:	e8 86 42 fd ff       	call   f01001a6 <_panic>

		intArr = (int*) ptr_allocations[3];
f012bf20:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012bf26:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012bf2c:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bf32:	8b 00                	mov    (%eax),%eax
f012bf34:	83 f8 04             	cmp    $0x4,%eax
f012bf37:	75 1c                	jne    f012bf55 <test_krealloc+0xdea>
f012bf39:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012bf3f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012bf46:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012bf4c:	01 d0                	add    %edx,%eax
f012bf4e:	8b 00                	mov    (%eax),%eax
f012bf50:	83 f8 04             	cmp    $0x4,%eax
f012bf53:	74 17                	je     f012bf6c <test_krealloc+0xe01>
			panic(
f012bf55:	83 ec 04             	sub    $0x4,%esp
f012bf58:	68 08 b8 13 f0       	push   $0xf013b808
f012bf5d:	68 88 0f 00 00       	push   $0xf88
f012bf62:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012bf67:	e8 3a 42 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012bf6c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012bf72:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012bf78:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bf7e:	66 8b 00             	mov    (%eax),%ax
f012bf81:	66 83 f8 05          	cmp    $0x5,%ax
f012bf85:	75 1b                	jne    f012bfa2 <test_krealloc+0xe37>
f012bf87:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012bf8d:	01 c0                	add    %eax,%eax
f012bf8f:	89 c2                	mov    %eax,%edx
f012bf91:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bf97:	01 d0                	add    %edx,%eax
f012bf99:	66 8b 00             	mov    (%eax),%ax
f012bf9c:	66 83 f8 05          	cmp    $0x5,%ax
f012bfa0:	74 17                	je     f012bfb9 <test_krealloc+0xe4e>
			panic(
f012bfa2:	83 ec 04             	sub    $0x4,%esp
f012bfa5:	68 08 b8 13 f0       	push   $0xf013b808
f012bfaa:	68 8d 0f 00 00       	push   $0xf8d
f012bfaf:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012bfb4:	e8 ed 41 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012bfb9:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012bfbf:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012bfc5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bfcb:	66 8b 00             	mov    (%eax),%ax
f012bfce:	66 83 f8 06          	cmp    $0x6,%ax
f012bfd2:	75 1b                	jne    f012bfef <test_krealloc+0xe84>
f012bfd4:	8b 85 1c fe ff ff    	mov    -0x1e4(%ebp),%eax
f012bfda:	01 c0                	add    %eax,%eax
f012bfdc:	89 c2                	mov    %eax,%edx
f012bfde:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012bfe4:	01 d0                	add    %edx,%eax
f012bfe6:	66 8b 00             	mov    (%eax),%ax
f012bfe9:	66 83 f8 06          	cmp    $0x6,%ax
f012bfed:	74 17                	je     f012c006 <test_krealloc+0xe9b>
			panic(
f012bfef:	83 ec 04             	sub    $0x4,%esp
f012bff2:	68 08 b8 13 f0       	push   $0xf013b808
f012bff7:	68 92 0f 00 00       	push   $0xf92
f012bffc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c001:	e8 a0 41 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012c006:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c00c:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012c012:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c018:	8a 00                	mov    (%eax),%al
f012c01a:	3c 07                	cmp    $0x7,%al
f012c01c:	75 1b                	jne    f012c039 <test_krealloc+0xece>
f012c01e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c024:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c02b:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c031:	01 d0                	add    %edx,%eax
f012c033:	8a 00                	mov    (%eax),%al
f012c035:	3c 07                	cmp    $0x7,%al
f012c037:	74 17                	je     f012c050 <test_krealloc+0xee5>
			panic(
f012c039:	83 ec 04             	sub    $0x4,%esp
f012c03c:	68 08 b8 13 f0       	push   $0xf013b808
f012c041:	68 97 0f 00 00       	push   $0xf97
f012c046:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c04b:	e8 56 41 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012c050:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c056:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c05a:	66 83 f8 07          	cmp    $0x7,%ax
f012c05e:	75 1f                	jne    f012c07f <test_krealloc+0xf14>
f012c060:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c066:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c06d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c073:	01 d0                	add    %edx,%eax
f012c075:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c079:	66 83 f8 07          	cmp    $0x7,%ax
f012c07d:	74 17                	je     f012c096 <test_krealloc+0xf2b>
			panic(
f012c07f:	83 ec 04             	sub    $0x4,%esp
f012c082:	68 08 b8 13 f0       	push   $0xf013b808
f012c087:	68 9a 0f 00 00       	push   $0xf9a
f012c08c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c091:	e8 10 41 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012c096:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c09c:	8b 40 04             	mov    0x4(%eax),%eax
f012c09f:	83 f8 07             	cmp    $0x7,%eax
f012c0a2:	75 1d                	jne    f012c0c1 <test_krealloc+0xf56>
f012c0a4:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c0aa:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c0b1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c0b7:	01 d0                	add    %edx,%eax
f012c0b9:	8b 40 04             	mov    0x4(%eax),%eax
f012c0bc:	83 f8 07             	cmp    $0x7,%eax
f012c0bf:	74 17                	je     f012c0d8 <test_krealloc+0xf6d>
			panic(
f012c0c1:	83 ec 04             	sub    $0x4,%esp
f012c0c4:	68 08 b8 13 f0       	push   $0xf013b808
f012c0c9:	68 9d 0f 00 00       	push   $0xf9d
f012c0ce:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c0d3:	e8 ce 40 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012c0d8:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c0de:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012c0e4:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c0ea:	8a 00                	mov    (%eax),%al
f012c0ec:	3c 08                	cmp    $0x8,%al
f012c0ee:	75 1b                	jne    f012c10b <test_krealloc+0xfa0>
f012c0f0:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c0f6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c0fd:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c103:	01 d0                	add    %edx,%eax
f012c105:	8a 00                	mov    (%eax),%al
f012c107:	3c 08                	cmp    $0x8,%al
f012c109:	74 17                	je     f012c122 <test_krealloc+0xfb7>
			panic(
f012c10b:	83 ec 04             	sub    $0x4,%esp
f012c10e:	68 08 b8 13 f0       	push   $0xf013b808
f012c113:	68 a2 0f 00 00       	push   $0xfa2
f012c118:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c11d:	e8 84 40 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012c122:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c128:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c12c:	66 83 f8 08          	cmp    $0x8,%ax
f012c130:	75 1f                	jne    f012c151 <test_krealloc+0xfe6>
f012c132:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c138:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c13f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c145:	01 d0                	add    %edx,%eax
f012c147:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c14b:	66 83 f8 08          	cmp    $0x8,%ax
f012c14f:	74 17                	je     f012c168 <test_krealloc+0xffd>
			panic(
f012c151:	83 ec 04             	sub    $0x4,%esp
f012c154:	68 08 b8 13 f0       	push   $0xf013b808
f012c159:	68 a5 0f 00 00       	push   $0xfa5
f012c15e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c163:	e8 3e 40 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012c168:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c16e:	8b 40 04             	mov    0x4(%eax),%eax
f012c171:	83 f8 08             	cmp    $0x8,%eax
f012c174:	75 1d                	jne    f012c193 <test_krealloc+0x1028>
f012c176:	8b 85 24 fe ff ff    	mov    -0x1dc(%ebp),%eax
f012c17c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012c183:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c189:	01 d0                	add    %edx,%eax
f012c18b:	8b 40 04             	mov    0x4(%eax),%eax
f012c18e:	83 f8 08             	cmp    $0x8,%eax
f012c191:	74 17                	je     f012c1aa <test_krealloc+0x103f>
			panic(
f012c193:	83 ec 04             	sub    $0x4,%esp
f012c196:	68 08 b8 13 f0       	push   $0xf013b808
f012c19b:	68 a8 0f 00 00       	push   $0xfa8
f012c1a0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c1a5:	e8 fc 3f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012c1aa:	e8 21 ff fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c1af:	89 c2                	mov    %eax,%edx
f012c1b1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c1b4:	39 c2                	cmp    %eax,%edx
f012c1b6:	74 17                	je     f012c1cf <test_krealloc+0x1064>
			panic(
f012c1b8:	83 ec 04             	sub    $0x4,%esp
f012c1bb:	68 c8 b8 13 f0       	push   $0xf013b8c8
f012c1c0:	68 ac 0f 00 00       	push   $0xfac
f012c1c5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c1ca:	e8 d7 3f fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012c1cf:	83 ec 0c             	sub    $0xc,%esp
f012c1d2:	68 14 b9 13 f0       	push   $0xf013b914
f012c1d7:	e8 51 4a fd ff       	call   f0100c2d <cprintf>
f012c1dc:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012c1df:	e8 ec fe fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c1e4:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c1e7:	e8 a8 7a fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012c1ec:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012c1f2:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012c1f8:	83 ec 08             	sub    $0x8,%esp
f012c1fb:	6a 00                	push   $0x0
f012c1fd:	50                   	push   %eax
f012c1fe:	e8 97 b2 fd ff       	call   f010749a <krealloc>
f012c203:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c206:	e8 89 7a fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012c20b:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c211:	74 17                	je     f012c22a <test_krealloc+0x10bf>
			panic(
f012c213:	83 ec 04             	sub    $0x4,%esp
f012c216:	68 38 b9 13 f0       	push   $0xf013b938
f012c21b:	68 b9 0f 00 00       	push   $0xfb9
f012c220:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c225:	e8 7c 3f fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c22a:	e8 a1 fe fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c22f:	89 c2                	mov    %eax,%edx
f012c231:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c234:	29 c2                	sub    %eax,%edx
f012c236:	89 d0                	mov    %edx,%eax
f012c238:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c23d:	74 17                	je     f012c256 <test_krealloc+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012c23f:	83 ec 04             	sub    $0x4,%esp
f012c242:	68 ac b9 13 f0       	push   $0xf013b9ac
f012c247:	68 bb 0f 00 00       	push   $0xfbb
f012c24c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c251:	e8 50 3f fd ff       	call   f01001a6 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012c256:	e8 75 fe fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c25b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c25e:	e8 31 7a fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012c263:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012c269:	8b 85 60 fe ff ff    	mov    -0x1a0(%ebp),%eax
f012c26f:	83 ec 08             	sub    $0x8,%esp
f012c272:	6a 00                	push   $0x0
f012c274:	50                   	push   %eax
f012c275:	e8 20 b2 fd ff       	call   f010749a <krealloc>
f012c27a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c27d:	e8 12 7a fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012c282:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c288:	74 17                	je     f012c2a1 <test_krealloc+0x1136>
			panic(
f012c28a:	83 ec 04             	sub    $0x4,%esp
f012c28d:	68 38 b9 13 f0       	push   $0xf013b938
f012c292:	68 c4 0f 00 00       	push   $0xfc4
f012c297:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c29c:	e8 05 3f fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012c2a1:	e8 2a fe fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c2a6:	89 c2                	mov    %eax,%edx
f012c2a8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c2ab:	29 c2                	sub    %eax,%edx
f012c2ad:	89 d0                	mov    %edx,%eax
f012c2af:	3d 00 01 00 00       	cmp    $0x100,%eax
f012c2b4:	74 17                	je     f012c2cd <test_krealloc+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012c2b6:	83 ec 04             	sub    $0x4,%esp
f012c2b9:	68 ac b9 13 f0       	push   $0xf013b9ac
f012c2be:	68 c6 0f 00 00       	push   $0xfc6
f012c2c3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c2c8:	e8 d9 3e fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012c2cd:	e8 fe fd fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c2d2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c2d5:	e8 ba 79 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012c2da:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012c2e0:	8b 85 6c fe ff ff    	mov    -0x194(%ebp),%eax
f012c2e6:	83 ec 08             	sub    $0x8,%esp
f012c2e9:	6a 00                	push   $0x0
f012c2eb:	50                   	push   %eax
f012c2ec:	e8 a9 b1 fd ff       	call   f010749a <krealloc>
f012c2f1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c2f4:	e8 9b 79 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012c2f9:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c2ff:	74 17                	je     f012c318 <test_krealloc+0x11ad>
			panic(
f012c301:	83 ec 04             	sub    $0x4,%esp
f012c304:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012c309:	68 ce 0f 00 00       	push   $0xfce
f012c30e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c313:	e8 8e 3e fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012c318:	e8 b3 fd fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c31d:	89 c2                	mov    %eax,%edx
f012c31f:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c322:	29 c2                	sub    %eax,%edx
f012c324:	89 d0                	mov    %edx,%eax
f012c326:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c32b:	74 17                	je     f012c344 <test_krealloc+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012c32d:	83 ec 04             	sub    $0x4,%esp
f012c330:	68 ac b9 13 f0       	push   $0xf013b9ac
f012c335:	68 d0 0f 00 00       	push   $0xfd0
f012c33a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c33f:	e8 62 3e fd ff       	call   f01001a6 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012c344:	e8 87 fd fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c349:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012c34c:	e8 43 79 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012c351:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012c357:	8b 85 74 fe ff ff    	mov    -0x18c(%ebp),%eax
f012c35d:	83 ec 08             	sub    $0x8,%esp
f012c360:	6a 00                	push   $0x0
f012c362:	50                   	push   %eax
f012c363:	e8 32 b1 fd ff       	call   f010749a <krealloc>
f012c368:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012c36b:	e8 24 79 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012c370:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012c376:	74 17                	je     f012c38f <test_krealloc+0x1224>
			panic(
f012c378:	83 ec 04             	sub    $0x4,%esp
f012c37b:	68 38 b9 13 f0       	push   $0xf013b938
f012c380:	68 d8 0f 00 00       	push   $0xfd8
f012c385:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c38a:	e8 17 3e fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012c38f:	e8 3c fd fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c394:	89 c2                	mov    %eax,%edx
f012c396:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c399:	29 c2                	sub    %eax,%edx
f012c39b:	89 d0                	mov    %edx,%eax
f012c39d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012c3a2:	74 17                	je     f012c3bb <test_krealloc+0x1250>
			panic(
f012c3a4:	83 ec 04             	sub    $0x4,%esp
f012c3a7:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012c3ac:	68 db 0f 00 00       	push   $0xfdb
f012c3b1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c3b6:	e8 eb 3d fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c3bb:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012c3c2:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012c3c9:	eb 48                	jmp    f012c413 <test_krealloc+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012c3cb:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012c3ce:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012c3d3:	83 ec 04             	sub    $0x4,%esp
f012c3d6:	8d 8d b4 fd ff ff    	lea    -0x24c(%ebp),%ecx
f012c3dc:	51                   	push   %ecx
f012c3dd:	52                   	push   %edx
f012c3de:	50                   	push   %eax
f012c3df:	e8 8d a5 fd ff       	call   f0106971 <get_page_table>
f012c3e4:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012c3e7:	8b 85 b4 fd ff ff    	mov    -0x24c(%ebp),%eax
f012c3ed:	85 c0                	test   %eax,%eax
f012c3ef:	75 17                	jne    f012c408 <test_krealloc+0x129d>
					panic(
f012c3f1:	83 ec 04             	sub    $0x4,%esp
f012c3f4:	68 d8 ad 13 f0       	push   $0xf013add8
f012c3f9:	68 e7 0f 00 00       	push   $0xfe7
f012c3fe:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c403:	e8 9e 3d fd ff       	call   f01001a6 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012c408:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012c40f:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012c413:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c417:	78 b2                	js     f012c3cb <test_krealloc+0x1260>
f012c419:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012c41d:	7f 09                	jg     f012c428 <test_krealloc+0x12bd>
f012c41f:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012c426:	76 a3                	jbe    f012c3cb <test_krealloc+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012c428:	83 ec 0c             	sub    $0xc,%esp
f012c42b:	68 1f ba 13 f0       	push   $0xf013ba1f
f012c430:	e8 f8 47 fd ff       	call   f0100c2d <cprintf>
f012c435:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012c438:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c43e:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c444:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c44b:	eb 21                	jmp    f012c46e <test_krealloc+0x1303>
			sums[0] += ptr[i];
f012c44d:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012c453:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012c456:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012c45c:	01 c8                	add    %ecx,%eax
f012c45e:	8a 00                	mov    (%eax),%al
f012c460:	0f be c0             	movsbl %al,%eax
f012c463:	01 d0                	add    %edx,%eax
f012c465:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012c46b:	ff 45 dc             	incl   -0x24(%ebp)
f012c46e:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012c474:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c477:	7d d4                	jge    f012c44d <test_krealloc+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012c479:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012c47f:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012c485:	42                   	inc    %edx
f012c486:	01 d2                	add    %edx,%edx
f012c488:	39 d0                	cmp    %edx,%eax
f012c48a:	74 17                	je     f012c4a3 <test_krealloc+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012c48c:	83 ec 04             	sub    $0x4,%esp
f012c48f:	68 28 ba 13 f0       	push   $0xf013ba28
f012c494:	68 f9 0f 00 00       	push   $0xff9
f012c499:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c49e:	e8 03 3d fd ff       	call   f01001a6 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012c4a3:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c4a9:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012c4af:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c4b6:	eb 25                	jmp    f012c4dd <test_krealloc+0x1372>
			sums[1] += intArr[i];
f012c4b8:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012c4be:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c4c1:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012c4c8:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012c4ce:	01 c8                	add    %ecx,%eax
f012c4d0:	8b 00                	mov    (%eax),%eax
f012c4d2:	01 d0                	add    %edx,%eax
f012c4d4:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012c4da:	ff 45 dc             	incl   -0x24(%ebp)
f012c4dd:	8b 85 14 fe ff ff    	mov    -0x1ec(%ebp),%eax
f012c4e3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c4e6:	7d d0                	jge    f012c4b8 <test_krealloc+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012c4e8:	8b 85 bc fd ff ff    	mov    -0x244(%ebp),%eax
f012c4ee:	8b 95 14 fe ff ff    	mov    -0x1ec(%ebp),%edx
f012c4f4:	42                   	inc    %edx
f012c4f5:	c1 e2 02             	shl    $0x2,%edx
f012c4f8:	39 d0                	cmp    %edx,%eax
f012c4fa:	74 17                	je     f012c513 <test_krealloc+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012c4fc:	83 ec 04             	sub    $0x4,%esp
f012c4ff:	68 28 ba 13 f0       	push   $0xf013ba28
f012c504:	68 03 10 00 00       	push   $0x1003
f012c509:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c50e:	e8 93 3c fd ff       	call   f01001a6 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012c513:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c519:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012c51f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c526:	eb 24                	jmp    f012c54c <test_krealloc+0x13e1>
			sums[2] += shortArr[i];
f012c528:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012c52e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c531:	01 c0                	add    %eax,%eax
f012c533:	89 c1                	mov    %eax,%ecx
f012c535:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012c53b:	01 c8                	add    %ecx,%eax
f012c53d:	66 8b 00             	mov    (%eax),%ax
f012c540:	98                   	cwtl   
f012c541:	01 d0                	add    %edx,%eax
f012c543:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012c549:	ff 45 dc             	incl   -0x24(%ebp)
f012c54c:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c552:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c555:	7d d1                	jge    f012c528 <test_krealloc+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012c557:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012c55d:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012c563:	8d 48 01             	lea    0x1(%eax),%ecx
f012c566:	89 c8                	mov    %ecx,%eax
f012c568:	c1 e0 02             	shl    $0x2,%eax
f012c56b:	01 c8                	add    %ecx,%eax
f012c56d:	39 c2                	cmp    %eax,%edx
f012c56f:	74 17                	je     f012c588 <test_krealloc+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012c571:	83 ec 04             	sub    $0x4,%esp
f012c574:	68 28 ba 13 f0       	push   $0xf013ba28
f012c579:	68 0d 10 00 00       	push   $0x100d
f012c57e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c583:	e8 1e 3c fd ff       	call   f01001a6 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012c588:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012c58e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012c594:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012c59b:	eb 70                	jmp    f012c60d <test_krealloc+0x14a2>
			sums[3] += structArr[i].a;
f012c59d:	8b 95 c4 fd ff ff    	mov    -0x23c(%ebp),%edx
f012c5a3:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c5a6:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c5ad:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c5b3:	01 c8                	add    %ecx,%eax
f012c5b5:	8a 00                	mov    (%eax),%al
f012c5b7:	0f be c0             	movsbl %al,%eax
f012c5ba:	01 d0                	add    %edx,%eax
f012c5bc:	89 85 c4 fd ff ff    	mov    %eax,-0x23c(%ebp)
			sums[4] += structArr[i].b;
f012c5c2:	8b 95 c8 fd ff ff    	mov    -0x238(%ebp),%edx
f012c5c8:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c5cb:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c5d2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c5d8:	01 c8                	add    %ecx,%eax
f012c5da:	66 8b 40 02          	mov    0x2(%eax),%ax
f012c5de:	98                   	cwtl   
f012c5df:	01 d0                	add    %edx,%eax
f012c5e1:	89 85 c8 fd ff ff    	mov    %eax,-0x238(%ebp)
			sums[5] += structArr[i].c;
f012c5e7:	8b 95 cc fd ff ff    	mov    -0x234(%ebp),%edx
f012c5ed:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012c5f0:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012c5f7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012c5fd:	01 c8                	add    %ecx,%eax
f012c5ff:	8b 40 04             	mov    0x4(%eax),%eax
f012c602:	01 d0                	add    %edx,%eax
f012c604:	89 85 cc fd ff ff    	mov    %eax,-0x234(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012c60a:	ff 45 dc             	incl   -0x24(%ebp)
f012c60d:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c613:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012c616:	7d 85                	jge    f012c59d <test_krealloc+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012c618:	8b 8d c4 fd ff ff    	mov    -0x23c(%ebp),%ecx
f012c61e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c624:	8d 50 01             	lea    0x1(%eax),%edx
f012c627:	89 d0                	mov    %edx,%eax
f012c629:	01 c0                	add    %eax,%eax
f012c62b:	01 d0                	add    %edx,%eax
f012c62d:	01 c0                	add    %eax,%eax
f012c62f:	01 d0                	add    %edx,%eax
f012c631:	39 c1                	cmp    %eax,%ecx
f012c633:	75 3a                	jne    f012c66f <test_krealloc+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012c635:	8b 8d c8 fd ff ff    	mov    -0x238(%ebp),%ecx
f012c63b:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c641:	8d 50 01             	lea    0x1(%eax),%edx
f012c644:	89 d0                	mov    %edx,%eax
f012c646:	01 c0                	add    %eax,%eax
f012c648:	01 d0                	add    %edx,%eax
f012c64a:	01 c0                	add    %eax,%eax
f012c64c:	01 d0                	add    %edx,%eax
f012c64e:	39 c1                	cmp    %eax,%ecx
f012c650:	75 1d                	jne    f012c66f <test_krealloc+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012c652:	8b 8d cc fd ff ff    	mov    -0x234(%ebp),%ecx
f012c658:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012c65e:	8d 50 01             	lea    0x1(%eax),%edx
f012c661:	89 d0                	mov    %edx,%eax
f012c663:	01 c0                	add    %eax,%eax
f012c665:	01 d0                	add    %edx,%eax
f012c667:	01 c0                	add    %eax,%eax
f012c669:	01 d0                	add    %edx,%eax
f012c66b:	39 c1                	cmp    %eax,%ecx
f012c66d:	74 17                	je     f012c686 <test_krealloc+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012c66f:	83 ec 04             	sub    $0x4,%esp
f012c672:	68 28 ba 13 f0       	push   $0xf013ba28
f012c677:	68 1b 10 00 00       	push   $0x101b
f012c67c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c681:	e8 20 3b fd ff       	call   f01001a6 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012c686:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012c68d:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012c690:	e8 3b fa fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c695:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012c698:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c69e:	83 ec 08             	sub    $0x8,%esp
f012c6a1:	68 00 3c 00 00       	push   $0x3c00
f012c6a6:	50                   	push   %eax
f012c6a7:	e8 ee ad fd ff       	call   f010749a <krealloc>
f012c6ac:	83 c4 10             	add    $0x10,%esp
f012c6af:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c6b5:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c6bb:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c6c0:	77 17                	ja     f012c6d9 <test_krealloc+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c6c2:	83 ec 04             	sub    $0x4,%esp
f012c6c5:	68 7c b7 13 f0       	push   $0xf013b77c
f012c6ca:	68 27 10 00 00       	push   $0x1027
f012c6cf:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c6d4:	e8 cd 3a fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012c6d9:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c6df:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c6e5:	74 17                	je     f012c6fe <test_krealloc+0x1593>
			panic(
f012c6e7:	83 ec 04             	sub    $0x4,%esp
f012c6ea:	68 60 ba 13 f0       	push   $0xf013ba60
f012c6ef:	68 2a 10 00 00       	push   $0x102a
f012c6f4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c6f9:	e8 a8 3a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c6fe:	e8 cd f9 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c703:	89 c2                	mov    %eax,%edx
f012c705:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c708:	39 c2                	cmp    %eax,%edx
f012c70a:	74 17                	je     f012c723 <test_krealloc+0x15b8>
			panic(
f012c70c:	83 ec 04             	sub    $0x4,%esp
f012c70f:	68 cc ba 13 f0       	push   $0xf013bacc
f012c714:	68 2d 10 00 00       	push   $0x102d
f012c719:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c71e:	e8 83 3a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012c723:	e8 a8 f9 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c728:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012c72b:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c731:	83 ec 08             	sub    $0x8,%esp
f012c734:	68 00 fc 0f 00       	push   $0xffc00
f012c739:	50                   	push   %eax
f012c73a:	e8 5b ad fd ff       	call   f010749a <krealloc>
f012c73f:	83 c4 10             	add    $0x10,%esp
f012c742:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c748:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c74e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c753:	77 17                	ja     f012c76c <test_krealloc+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c755:	83 ec 04             	sub    $0x4,%esp
f012c758:	68 7c b7 13 f0       	push   $0xf013b77c
f012c75d:	68 33 10 00 00       	push   $0x1033
f012c762:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c767:	e8 3a 3a fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012c76c:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c772:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c778:	74 17                	je     f012c791 <test_krealloc+0x1626>
			panic(
f012c77a:	83 ec 04             	sub    $0x4,%esp
f012c77d:	68 60 ba 13 f0       	push   $0xf013ba60
f012c782:	68 36 10 00 00       	push   $0x1036
f012c787:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c78c:	e8 15 3a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c791:	e8 3a f9 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c796:	89 c2                	mov    %eax,%edx
f012c798:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c79b:	39 c2                	cmp    %eax,%edx
f012c79d:	74 17                	je     f012c7b6 <test_krealloc+0x164b>
			panic(
f012c79f:	83 ec 04             	sub    $0x4,%esp
f012c7a2:	68 cc ba 13 f0       	push   $0xf013bacc
f012c7a7:	68 39 10 00 00       	push   $0x1039
f012c7ac:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c7b1:	e8 f0 39 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012c7b6:	e8 15 f9 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c7bb:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012c7be:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c7c4:	83 ec 08             	sub    $0x8,%esp
f012c7c7:	68 00 fc 0f 00       	push   $0xffc00
f012c7cc:	50                   	push   %eax
f012c7cd:	e8 c8 ac fd ff       	call   f010749a <krealloc>
f012c7d2:	83 c4 10             	add    $0x10,%esp
f012c7d5:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c7db:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c7e1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c7e6:	77 17                	ja     f012c7ff <test_krealloc+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c7e8:	83 ec 04             	sub    $0x4,%esp
f012c7eb:	68 7c b7 13 f0       	push   $0xf013b77c
f012c7f0:	68 3f 10 00 00       	push   $0x103f
f012c7f5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c7fa:	e8 a7 39 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012c7ff:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c805:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c80b:	74 17                	je     f012c824 <test_krealloc+0x16b9>
			panic(
f012c80d:	83 ec 04             	sub    $0x4,%esp
f012c810:	68 60 ba 13 f0       	push   $0xf013ba60
f012c815:	68 42 10 00 00       	push   $0x1042
f012c81a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c81f:	e8 82 39 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c824:	e8 a7 f8 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c829:	89 c2                	mov    %eax,%edx
f012c82b:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c82e:	39 c2                	cmp    %eax,%edx
f012c830:	74 17                	je     f012c849 <test_krealloc+0x16de>
			panic(
f012c832:	83 ec 04             	sub    $0x4,%esp
f012c835:	68 cc ba 13 f0       	push   $0xf013bacc
f012c83a:	68 45 10 00 00       	push   $0x1045
f012c83f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c844:	e8 5d 39 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012c849:	e8 82 f8 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c84e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012c851:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c857:	83 ec 08             	sub    $0x8,%esp
f012c85a:	68 00 fc 0f 00       	push   $0xffc00
f012c85f:	50                   	push   %eax
f012c860:	e8 35 ac fd ff       	call   f010749a <krealloc>
f012c865:	83 c4 10             	add    $0x10,%esp
f012c868:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c86e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012c874:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c879:	77 17                	ja     f012c892 <test_krealloc+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c87b:	83 ec 04             	sub    $0x4,%esp
f012c87e:	68 7c b7 13 f0       	push   $0xf013b77c
f012c883:	68 4d 10 00 00       	push   $0x104d
f012c888:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c88d:	e8 14 39 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[3])
f012c892:	8b 85 64 fe ff ff    	mov    -0x19c(%ebp),%eax
f012c898:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012c89e:	74 17                	je     f012c8b7 <test_krealloc+0x174c>
			panic(
f012c8a0:	83 ec 04             	sub    $0x4,%esp
f012c8a3:	68 10 bb 13 f0       	push   $0xf013bb10
f012c8a8:	68 50 10 00 00       	push   $0x1050
f012c8ad:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c8b2:	e8 ef 38 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012c8b7:	e8 14 f8 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c8bc:	89 c2                	mov    %eax,%edx
f012c8be:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012c8c1:	39 c2                	cmp    %eax,%edx
f012c8c3:	74 17                	je     f012c8dc <test_krealloc+0x1771>
			panic(
f012c8c5:	83 ec 04             	sub    $0x4,%esp
f012c8c8:	68 cc ba 13 f0       	push   $0xf013bacc
f012c8cd:	68 53 10 00 00       	push   $0x1053
f012c8d2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c8d7:	e8 ca 38 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012c8dc:	83 ec 0c             	sub    $0xc,%esp
f012c8df:	68 ef ac 13 f0       	push   $0xf013acef
f012c8e4:	e8 44 43 fd ff       	call   f0100c2d <cprintf>
f012c8e9:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012c8ec:	e8 df f7 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c8f1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1],
f012c8f4:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c8fa:	83 ec 08             	sub    $0x8,%esp
f012c8fd:	68 00 18 10 00       	push   $0x101800
f012c902:	50                   	push   %eax
f012c903:	e8 92 ab fd ff       	call   f010749a <krealloc>
f012c908:	83 c4 10             	add    $0x10,%esp
f012c90b:	89 45 bc             	mov    %eax,-0x44(%ebp)
				(1 * Mega - kilo) + (7 * kilo));
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c90e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c911:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c916:	77 17                	ja     f012c92f <test_krealloc+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c918:	83 ec 04             	sub    $0x4,%esp
f012c91b:	68 7c b7 13 f0       	push   $0xf013b77c
f012c920:	68 5c 10 00 00       	push   $0x105c
f012c925:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c92a:	e8 77 38 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012c92f:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012c935:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012c938:	74 17                	je     f012c951 <test_krealloc+0x17e6>
			panic(
f012c93a:	83 ec 04             	sub    $0x4,%esp
f012c93d:	68 70 bb 13 f0       	push   $0xf013bb70
f012c942:	68 5f 10 00 00       	push   $0x105f
f012c947:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c94c:	e8 55 38 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012c951:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c954:	e8 77 f7 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c959:	29 c3                	sub    %eax,%ebx
f012c95b:	89 d8                	mov    %ebx,%eax
f012c95d:	83 f8 02             	cmp    $0x2,%eax
f012c960:	74 17                	je     f012c979 <test_krealloc+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012c962:	83 ec 04             	sub    $0x4,%esp
f012c965:	68 ec bb 13 f0       	push   $0xf013bbec
f012c96a:	68 61 10 00 00       	push   $0x1061
f012c96f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c974:	e8 2d 38 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012c979:	e8 52 f7 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c97e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012c981:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c987:	83 ec 08             	sub    $0x8,%esp
f012c98a:	68 00 fc 3f 00       	push   $0x3ffc00
f012c98f:	50                   	push   %eax
f012c990:	e8 05 ab fd ff       	call   f010749a <krealloc>
f012c995:	83 c4 10             	add    $0x10,%esp
f012c998:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012c99b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012c99e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012c9a3:	77 17                	ja     f012c9bc <test_krealloc+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012c9a5:	83 ec 04             	sub    $0x4,%esp
f012c9a8:	68 7c b7 13 f0       	push   $0xf013b77c
f012c9ad:	68 67 10 00 00       	push   $0x1067
f012c9b2:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c9b7:	e8 ea 37 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012c9bc:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012c9c2:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012c9c5:	74 17                	je     f012c9de <test_krealloc+0x1873>
			panic(
f012c9c7:	83 ec 04             	sub    $0x4,%esp
f012c9ca:	68 70 bb 13 f0       	push   $0xf013bb70
f012c9cf:	68 6a 10 00 00       	push   $0x106a
f012c9d4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012c9d9:	e8 c8 37 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012c9de:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012c9e1:	e8 ea f6 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012c9e6:	29 c3                	sub    %eax,%ebx
f012c9e8:	89 d8                	mov    %ebx,%eax
f012c9ea:	3d 00 02 00 00       	cmp    $0x200,%eax
f012c9ef:	74 17                	je     f012ca08 <test_krealloc+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012c9f1:	83 ec 04             	sub    $0x4,%esp
f012c9f4:	68 ec bb 13 f0       	push   $0xf013bbec
f012c9f9:	68 6d 10 00 00       	push   $0x106d
f012c9fe:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012ca03:	e8 9e 37 fd ff       	call   f01001a6 <_panic>


	}
	cprintf("\b\b\b60%");
f012ca08:	83 ec 0c             	sub    $0xc,%esp
f012ca0b:	68 34 ad 13 f0       	push   $0xf013ad34
f012ca10:	e8 18 42 fd ff       	call   f0100c2d <cprintf>
f012ca15:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012ca18:	e8 b3 f6 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012ca1d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012ca20:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012ca26:	83 ec 08             	sub    $0x8,%esp
f012ca29:	68 00 fc 9f 00       	push   $0x9ffc00
f012ca2e:	50                   	push   %eax
f012ca2f:	e8 66 aa fd ff       	call   f010749a <krealloc>
f012ca34:	83 c4 10             	add    $0x10,%esp
f012ca37:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ca3a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ca3d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ca42:	77 17                	ja     f012ca5b <test_krealloc+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ca44:	83 ec 04             	sub    $0x4,%esp
f012ca47:	68 7c b7 13 f0       	push   $0xf013b77c
f012ca4c:	68 78 10 00 00       	push   $0x1078
f012ca51:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012ca56:	e8 4b 37 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (14 * Mega))
f012ca5b:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012ca62:	10 00 00 
f012ca65:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ca6b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ca70:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012ca76:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ca7c:	ba 00 00 00 00       	mov    $0x0,%edx
f012ca81:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012ca87:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ca8d:	29 d0                	sub    %edx,%eax
f012ca8f:	89 c1                	mov    %eax,%ecx
f012ca91:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012ca98:	10 00 00 
f012ca9b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012caa0:	0f b6 d0             	movzbl %al,%edx
f012caa3:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012caa9:	01 d0                	add    %edx,%eax
f012caab:	48                   	dec    %eax
f012caac:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012cab2:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012cab8:	ba 00 00 00 00       	mov    $0x0,%edx
f012cabd:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012cac3:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012cac9:	29 d0                	sub    %edx,%eax
f012cacb:	01 c1                	add    %eax,%ecx
f012cacd:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012cad4:	10 00 00 
f012cad7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012cadc:	0f b6 c0             	movzbl %al,%eax
f012cadf:	c1 e0 04             	shl    $0x4,%eax
f012cae2:	89 c2                	mov    %eax,%edx
f012cae4:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012caea:	01 d0                	add    %edx,%eax
f012caec:	48                   	dec    %eax
f012caed:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012caf3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012caf9:	ba 00 00 00 00       	mov    $0x0,%edx
f012cafe:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012cb04:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012cb0a:	29 d0                	sub    %edx,%eax
f012cb0c:	01 c8                	add    %ecx,%eax
f012cb0e:	8d 90 00 40 e0 f6    	lea    -0x91fc000(%eax),%edx
f012cb14:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cb17:	39 c2                	cmp    %eax,%edx
f012cb19:	74 18                	je     f012cb33 <test_krealloc+0x19c8>
			panic(
f012cb1b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cb1e:	50                   	push   %eax
f012cb1f:	68 20 bc 13 f0       	push   $0xf013bc20
f012cb24:	68 7c 10 00 00       	push   $0x107c
f012cb29:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012cb2e:	e8 73 36 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012cb33:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cb39:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cb3c:	75 17                	jne    f012cb55 <test_krealloc+0x19ea>
			panic(
f012cb3e:	83 ec 04             	sub    $0x4,%esp
f012cb41:	68 64 bc 13 f0       	push   $0xf013bc64
f012cb46:	68 7f 10 00 00       	push   $0x107f
f012cb4b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012cb50:	e8 51 36 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012cb55:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cb58:	e8 73 f5 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012cb5d:	29 c3                	sub    %eax,%ebx
f012cb5f:	89 d8                	mov    %ebx,%eax
f012cb61:	3d 00 06 00 00       	cmp    $0x600,%eax
f012cb66:	74 17                	je     f012cb7f <test_krealloc+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012cb68:	83 ec 04             	sub    $0x4,%esp
f012cb6b:	68 ec bb 13 f0       	push   $0xf013bbec
f012cb70:	68 82 10 00 00       	push   $0x1082
f012cb75:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012cb7a:	e8 27 36 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[4] = newAddress;
f012cb7f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cb82:	89 85 68 fe ff ff    	mov    %eax,-0x198(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 6 MB
		freeFrames = sys_calculate_free_frames();
f012cb88:	e8 43 f5 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012cb8d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (6 * Mega - kilo));
f012cb90:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cb96:	83 ec 08             	sub    $0x8,%esp
f012cb99:	68 00 fc 5f 00       	push   $0x5ffc00
f012cb9e:	50                   	push   %eax
f012cb9f:	e8 f6 a8 fd ff       	call   f010749a <krealloc>
f012cba4:	83 c4 10             	add    $0x10,%esp
f012cba7:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cbaa:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cbad:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cbb2:	77 17                	ja     f012cbcb <test_krealloc+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cbb4:	83 ec 04             	sub    $0x4,%esp
f012cbb7:	68 7c b7 13 f0       	push   $0xf013b77c
f012cbbc:	68 8b 10 00 00       	push   $0x108b
f012cbc1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012cbc6:	e8 db 35 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[6])
f012cbcb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cbd1:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cbd4:	74 17                	je     f012cbed <test_krealloc+0x1a82>
			panic(
f012cbd6:	83 ec 04             	sub    $0x4,%esp
f012cbd9:	68 70 bb 13 f0       	push   $0xf013bb70
f012cbde:	68 8e 10 00 00       	push   $0x108e
f012cbe3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012cbe8:	e8 b9 35 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 768)
f012cbed:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cbf0:	e8 db f4 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012cbf5:	29 c3                	sub    %eax,%ebx
f012cbf7:	89 d8                	mov    %ebx,%eax
f012cbf9:	3d 00 03 00 00       	cmp    $0x300,%eax
f012cbfe:	74 17                	je     f012cc17 <test_krealloc+0x1aac>
			panic("krealloc: pages in memory are not loaded correctly");
f012cc00:	83 ec 04             	sub    $0x4,%esp
f012cc03:	68 ec bb 13 f0       	push   $0xf013bbec
f012cc08:	68 91 10 00 00       	push   $0x1091
f012cc0d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012cc12:	e8 8f 35 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 3 MB (already reallocated to 6 MB) to 20 MB. It should return new VA

		freeFrames = sys_calculate_free_frames();
f012cc17:	e8 b4 f4 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012cc1c:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012cc1f:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cc25:	83 ec 08             	sub    $0x8,%esp
f012cc28:	68 00 fc 3f 01       	push   $0x13ffc00
f012cc2d:	50                   	push   %eax
f012cc2e:	e8 67 a8 fd ff       	call   f010749a <krealloc>
f012cc33:	83 c4 10             	add    $0x10,%esp
f012cc36:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012cc39:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cc3c:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012cc41:	77 17                	ja     f012cc5a <test_krealloc+0x1aef>
			panic("krealloc: Wrong start address for the allocated space... ");
f012cc43:	83 ec 04             	sub    $0x4,%esp
f012cc46:	68 7c b7 13 f0       	push   $0xf013b77c
f012cc4b:	68 98 10 00 00       	push   $0x1098
f012cc50:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012cc55:	e8 4c 35 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012cc5a:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cc60:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012cc63:	75 17                	jne    f012cc7c <test_krealloc+0x1b11>
			panic(
f012cc65:	83 ec 04             	sub    $0x4,%esp
f012cc68:	68 64 bc 13 f0       	push   $0xf013bc64
f012cc6d:	68 9b 10 00 00       	push   $0x109b
f012cc72:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012cc77:	e8 2a 35 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		if ((uint32) newAddress != ACTUAL_START + (24 * Mega))
f012cc7c:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012cc83:	10 00 00 
f012cc86:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012cc8c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012cc91:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012cc97:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012cc9d:	ba 00 00 00 00       	mov    $0x0,%edx
f012cca2:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012cca8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ccae:	29 d0                	sub    %edx,%eax
f012ccb0:	89 c1                	mov    %eax,%ecx
f012ccb2:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012ccb9:	10 00 00 
f012ccbc:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ccc1:	0f b6 d0             	movzbl %al,%edx
f012ccc4:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ccca:	01 d0                	add    %edx,%eax
f012cccc:	48                   	dec    %eax
f012cccd:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012ccd3:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ccd9:	ba 00 00 00 00       	mov    $0x0,%edx
f012ccde:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012cce4:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ccea:	29 d0                	sub    %edx,%eax
f012ccec:	01 c1                	add    %eax,%ecx
f012ccee:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012ccf5:	10 00 00 
f012ccf8:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ccfd:	0f b6 c0             	movzbl %al,%eax
f012cd00:	c1 e0 04             	shl    $0x4,%eax
f012cd03:	89 c2                	mov    %eax,%edx
f012cd05:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012cd0b:	01 d0                	add    %edx,%eax
f012cd0d:	48                   	dec    %eax
f012cd0e:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012cd14:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cd1a:	ba 00 00 00 00       	mov    $0x0,%edx
f012cd1f:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012cd25:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012cd2b:	29 d0                	sub    %edx,%eax
f012cd2d:	01 c8                	add    %ecx,%eax
f012cd2f:	8d 90 00 40 80 f7    	lea    -0x87fc000(%eax),%edx
f012cd35:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cd38:	39 c2                	cmp    %eax,%edx
f012cd3a:	74 17                	je     f012cd53 <test_krealloc+0x1be8>
			panic("krealloc: Wrong start address for reallocated space");
f012cd3c:	83 ec 04             	sub    $0x4,%esp
f012cd3f:	68 e8 bc 13 f0       	push   $0xf013bce8
f012cd44:	68 9d 10 00 00       	push   $0x109d
f012cd49:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012cd4e:	e8 53 34 fd ff       	call   f01001a6 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 3584)
f012cd53:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012cd56:	e8 75 f3 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012cd5b:	29 c3                	sub    %eax,%ebx
f012cd5d:	89 d8                	mov    %ebx,%eax
f012cd5f:	3d 00 0e 00 00       	cmp    $0xe00,%eax
f012cd64:	74 17                	je     f012cd7d <test_krealloc+0x1c12>
			panic("krealloc: pages in memory are not loaded correctly");
f012cd66:	83 ec 04             	sub    $0x4,%esp
f012cd69:	68 ec bb 13 f0       	push   $0xf013bbec
f012cd6e:	68 a0 10 00 00       	push   $0x10a0
f012cd73:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012cd78:	e8 29 34 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[6] = newAddress;
f012cd7d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012cd80:	89 85 70 fe ff ff    	mov    %eax,-0x190(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012cd86:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012cd8c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012cd92:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012cd99:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cd9c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012cda3:	eb 21                	jmp    f012cdc6 <test_krealloc+0x1c5b>
			sums[0] += ptr[i];
f012cda5:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012cdab:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012cdae:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012cdb4:	01 c8                	add    %ecx,%eax
f012cdb6:	8a 00                	mov    (%eax),%al
f012cdb8:	0f be c0             	movsbl %al,%eax
f012cdbb:	01 d0                	add    %edx,%eax
f012cdbd:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012cdc3:	ff 45 d8             	incl   -0x28(%ebp)
f012cdc6:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012cdcc:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012cdcf:	7d d4                	jge    f012cda5 <test_krealloc+0x1c3a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012cdd1:	8b 85 b8 fd ff ff    	mov    -0x248(%ebp),%eax
f012cdd7:	8b 95 0c fe ff ff    	mov    -0x1f4(%ebp),%edx
f012cddd:	42                   	inc    %edx
f012cdde:	01 d2                	add    %edx,%edx
f012cde0:	39 d0                	cmp    %edx,%eax
f012cde2:	74 17                	je     f012cdfb <test_krealloc+0x1c90>
			panic("krealloc: invalid read after re-allocations");
f012cde4:	83 ec 04             	sub    $0x4,%esp
f012cde7:	68 1c bd 13 f0       	push   $0xf013bd1c
f012cdec:	68 ae 10 00 00       	push   $0x10ae
f012cdf1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012cdf6:	e8 ab 33 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012cdfb:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012ce01:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012ce07:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012ce0e:	00 00 00 
		sums[1] = 0;
f012ce11:	c7 85 bc fd ff ff 00 	movl   $0x0,-0x244(%ebp)
f012ce18:	00 00 00 
		sums[2] = 0;
f012ce1b:	c7 85 c0 fd ff ff 00 	movl   $0x0,-0x240(%ebp)
f012ce22:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012ce25:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ce2c:	eb 70                	jmp    f012ce9e <test_krealloc+0x1d33>
			sums[0] += structArr[i].a;
f012ce2e:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012ce34:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ce37:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ce3e:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce44:	01 c8                	add    %ecx,%eax
f012ce46:	8a 00                	mov    (%eax),%al
f012ce48:	0f be c0             	movsbl %al,%eax
f012ce4b:	01 d0                	add    %edx,%eax
f012ce4d:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)
			sums[1] += structArr[i].b;
f012ce53:	8b 95 bc fd ff ff    	mov    -0x244(%ebp),%edx
f012ce59:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ce5c:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ce63:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce69:	01 c8                	add    %ecx,%eax
f012ce6b:	66 8b 40 02          	mov    0x2(%eax),%ax
f012ce6f:	98                   	cwtl   
f012ce70:	01 d0                	add    %edx,%eax
f012ce72:	89 85 bc fd ff ff    	mov    %eax,-0x244(%ebp)
			sums[2] += structArr[i].c;
f012ce78:	8b 95 c0 fd ff ff    	mov    -0x240(%ebp),%edx
f012ce7e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ce81:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ce88:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ce8e:	01 c8                	add    %ecx,%eax
f012ce90:	8b 40 04             	mov    0x4(%eax),%eax
f012ce93:	01 d0                	add    %edx,%eax
f012ce95:	89 85 c0 fd ff ff    	mov    %eax,-0x240(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012ce9b:	ff 45 d8             	incl   -0x28(%ebp)
f012ce9e:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012cea4:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012cea7:	7d 85                	jge    f012ce2e <test_krealloc+0x1cc3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012cea9:	8b 8d b8 fd ff ff    	mov    -0x248(%ebp),%ecx
f012ceaf:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ceb5:	8d 50 01             	lea    0x1(%eax),%edx
f012ceb8:	89 d0                	mov    %edx,%eax
f012ceba:	01 c0                	add    %eax,%eax
f012cebc:	01 d0                	add    %edx,%eax
f012cebe:	01 c0                	add    %eax,%eax
f012cec0:	01 d0                	add    %edx,%eax
f012cec2:	39 c1                	cmp    %eax,%ecx
f012cec4:	75 3a                	jne    f012cf00 <test_krealloc+0x1d95>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012cec6:	8b 8d bc fd ff ff    	mov    -0x244(%ebp),%ecx
f012cecc:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ced2:	8d 50 01             	lea    0x1(%eax),%edx
f012ced5:	89 d0                	mov    %edx,%eax
f012ced7:	01 c0                	add    %eax,%eax
f012ced9:	01 d0                	add    %edx,%eax
f012cedb:	01 c0                	add    %eax,%eax
f012cedd:	01 d0                	add    %edx,%eax
f012cedf:	39 c1                	cmp    %eax,%ecx
f012cee1:	75 1d                	jne    f012cf00 <test_krealloc+0x1d95>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012cee3:	8b 8d c0 fd ff ff    	mov    -0x240(%ebp),%ecx
f012cee9:	8b 85 20 fe ff ff    	mov    -0x1e0(%ebp),%eax
f012ceef:	8d 50 01             	lea    0x1(%eax),%edx
f012cef2:	89 d0                	mov    %edx,%eax
f012cef4:	01 c0                	add    %eax,%eax
f012cef6:	01 d0                	add    %edx,%eax
f012cef8:	01 c0                	add    %eax,%eax
f012cefa:	01 d0                	add    %edx,%eax
f012cefc:	39 c1                	cmp    %eax,%ecx
f012cefe:	74 17                	je     f012cf17 <test_krealloc+0x1dac>
			panic("krealloc: invalid read after re-allocations");
f012cf00:	83 ec 04             	sub    $0x4,%esp
f012cf03:	68 1c bd 13 f0       	push   $0xf013bd1c
f012cf08:	68 c0 10 00 00       	push   $0x10c0
f012cf0d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012cf12:	e8 8f 32 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012cf17:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012cf1d:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012cf23:	c7 85 b8 fd ff ff 00 	movl   $0x0,-0x248(%ebp)
f012cf2a:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012cf2d:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012cf34:	eb 24                	jmp    f012cf5a <test_krealloc+0x1def>
			sums[0] += shortArr[i];
f012cf36:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012cf3c:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012cf3f:	01 c0                	add    %eax,%eax
f012cf41:	89 c1                	mov    %eax,%ecx
f012cf43:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012cf49:	01 c8                	add    %ecx,%eax
f012cf4b:	66 8b 00             	mov    (%eax),%ax
f012cf4e:	98                   	cwtl   
f012cf4f:	01 d0                	add    %edx,%eax
f012cf51:	89 85 b8 fd ff ff    	mov    %eax,-0x248(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012cf57:	ff 45 d8             	incl   -0x28(%ebp)
f012cf5a:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cf60:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012cf63:	7d d1                	jge    f012cf36 <test_krealloc+0x1dcb>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012cf65:	8b 95 b8 fd ff ff    	mov    -0x248(%ebp),%edx
f012cf6b:	8b 85 18 fe ff ff    	mov    -0x1e8(%ebp),%eax
f012cf71:	8d 48 01             	lea    0x1(%eax),%ecx
f012cf74:	89 c8                	mov    %ecx,%eax
f012cf76:	c1 e0 02             	shl    $0x2,%eax
f012cf79:	01 c8                	add    %ecx,%eax
f012cf7b:	39 c2                	cmp    %eax,%edx
f012cf7d:	74 17                	je     f012cf96 <test_krealloc+0x1e2b>
			panic("krealloc: invalid read after re-allocations");
f012cf7f:	83 ec 04             	sub    $0x4,%esp
f012cf82:	68 1c bd 13 f0       	push   $0xf013bd1c
f012cf87:	68 ca 10 00 00       	push   $0x10ca
f012cf8c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012cf91:	e8 10 32 fd ff       	call   f01001a6 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012cf96:	e8 35 f1 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012cf9b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012cf9e:	e8 f1 6c fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012cfa3:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012cfa9:	8b 85 70 fe ff ff    	mov    -0x190(%ebp),%eax
f012cfaf:	83 ec 08             	sub    $0x8,%esp
f012cfb2:	6a 00                	push   $0x0
f012cfb4:	50                   	push   %eax
f012cfb5:	e8 e0 a4 fd ff       	call   f010749a <krealloc>
f012cfba:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012cfbd:	e8 d2 6c fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012cfc2:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012cfc8:	74 17                	je     f012cfe1 <test_krealloc+0x1e76>
			panic(
f012cfca:	83 ec 04             	sub    $0x4,%esp
f012cfcd:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012cfd2:	68 d2 10 00 00       	push   $0x10d2
f012cfd7:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012cfdc:	e8 c5 31 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012cfe1:	e8 ea f0 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012cfe6:	89 c2                	mov    %eax,%edx
f012cfe8:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012cfeb:	29 c2                	sub    %eax,%edx
f012cfed:	89 d0                	mov    %edx,%eax
f012cfef:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012cff4:	74 17                	je     f012d00d <test_krealloc+0x1ea2>
			panic("krealloc: pages in memory are not freed correctly");
f012cff6:	83 ec 04             	sub    $0x4,%esp
f012cff9:	68 ac b9 13 f0       	push   $0xf013b9ac
f012cffe:	68 d4 10 00 00       	push   $0x10d4
f012d003:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d008:	e8 99 31 fd ff       	call   f01001a6 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012d00d:	e8 be f0 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d012:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012d015:	e8 7a 6c fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012d01a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012d020:	8b 85 68 fe ff ff    	mov    -0x198(%ebp),%eax
f012d026:	83 ec 0c             	sub    $0xc,%esp
f012d029:	50                   	push   %eax
f012d02a:	e8 cf a3 fd ff       	call   f01073fe <kfree>
f012d02f:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012d032:	e8 5d 6c fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012d037:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012d03d:	74 17                	je     f012d056 <test_krealloc+0x1eeb>
			panic(
f012d03f:	83 ec 04             	sub    $0x4,%esp
f012d042:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012d047:	68 dc 10 00 00       	push   $0x10dc
f012d04c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d051:	e8 50 31 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012d056:	e8 75 f0 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d05b:	89 c2                	mov    %eax,%edx
f012d05d:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012d060:	29 c2                	sub    %eax,%edx
f012d062:	89 d0                	mov    %edx,%eax
f012d064:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012d069:	74 17                	je     f012d082 <test_krealloc+0x1f17>
			panic("krealloc: pages in memory are not freed correctly");
f012d06b:	83 ec 04             	sub    $0x4,%esp
f012d06e:	68 ac b9 13 f0       	push   $0xf013b9ac
f012d073:	68 de 10 00 00       	push   $0x10de
f012d078:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d07d:	e8 24 31 fd ff       	call   f01001a6 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d082:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012d089:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012d090:	eb 48                	jmp    f012d0da <test_krealloc+0x1f6f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012d092:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012d095:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012d09a:	83 ec 04             	sub    $0x4,%esp
f012d09d:	8d 8d b0 fd ff ff    	lea    -0x250(%ebp),%ecx
f012d0a3:	51                   	push   %ecx
f012d0a4:	52                   	push   %edx
f012d0a5:	50                   	push   %eax
f012d0a6:	e8 c6 98 fd ff       	call   f0106971 <get_page_table>
f012d0ab:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012d0ae:	8b 85 b0 fd ff ff    	mov    -0x250(%ebp),%eax
f012d0b4:	85 c0                	test   %eax,%eax
f012d0b6:	75 17                	jne    f012d0cf <test_krealloc+0x1f64>
					panic(
f012d0b8:	83 ec 04             	sub    $0x4,%esp
f012d0bb:	68 d8 ad 13 f0       	push   $0xf013add8
f012d0c0:	68 eb 10 00 00       	push   $0x10eb
f012d0c5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d0ca:	e8 d7 30 fd ff       	call   f01001a6 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012d0cf:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012d0d6:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012d0da:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d0de:	78 b2                	js     f012d092 <test_krealloc+0x1f27>
f012d0e0:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012d0e4:	7f 09                	jg     f012d0ef <test_krealloc+0x1f84>
f012d0e6:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012d0ed:	76 a3                	jbe    f012d092 <test_krealloc+0x1f27>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012d0ef:	83 ec 0c             	sub    $0xc,%esp
f012d0f2:	68 ba a6 13 f0       	push   $0xf013a6ba
f012d0f7:	e8 31 3b fd ff       	call   f0100c2d <cprintf>
f012d0fc:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc completed successfully.\n");
f012d0ff:	83 ec 0c             	sub    $0xc,%esp
f012d102:	68 48 bd 13 f0       	push   $0xf013bd48
f012d107:	e8 21 3b fd ff       	call   f0100c2d <cprintf>
f012d10c:	83 c4 10             	add    $0x10,%esp
	return 0;
f012d10f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012d114:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012d117:	5b                   	pop    %ebx
f012d118:	5f                   	pop    %edi
f012d119:	5d                   	pop    %ebp
f012d11a:	c3                   	ret    

f012d11b <test_krealloc_BF>:


int test_krealloc_BF() {
f012d11b:	55                   	push   %ebp
f012d11c:	89 e5                	mov    %esp,%ebp
f012d11e:	57                   	push   %edi
f012d11f:	53                   	push   %ebx
f012d120:	81 ec 60 02 00 00    	sub    $0x260,%esp
	cprintf("==============================================\n");
f012d126:	83 ec 0c             	sub    $0xc,%esp
f012d129:	68 18 a4 13 f0       	push   $0xf013a418
f012d12e:	e8 fa 3a fd ff       	call   f0100c2d <cprintf>
f012d133:	83 c4 10             	add    $0x10,%esp
	cprintf(
f012d136:	83 ec 0c             	sub    $0xc,%esp
f012d139:	68 48 a4 13 f0       	push   $0xf013a448
f012d13e:	e8 ea 3a fd ff       	call   f0100c2d <cprintf>
f012d143:	83 c4 10             	add    $0x10,%esp
			"MAKE SURE to have a FRESH RUN for this test\n(i.e. don't run any program/test before it)\n");
	cprintf("==============================================\n");
f012d146:	83 ec 0c             	sub    $0xc,%esp
f012d149:	68 18 a4 13 f0       	push   $0xf013a418
f012d14e:	e8 da 3a fd ff       	call   f0100c2d <cprintf>
f012d153:	83 c4 10             	add    $0x10,%esp
	char minByte = 1 << 7;
f012d156:	c6 45 cf 80          	movb   $0x80,-0x31(%ebp)
	char maxByte = 0x7F;
f012d15a:	c6 45 ce 7f          	movb   $0x7f,-0x32(%ebp)
	short minShort = 1 << 15;
f012d15e:	66 c7 45 cc 00 80    	movw   $0x8000,-0x34(%ebp)
	short maxShort = 0x7FFF;
f012d164:	66 c7 45 ca ff 7f    	movw   $0x7fff,-0x36(%ebp)
	int minInt = 1 << 31;
f012d16a:	c7 45 c4 00 00 00 80 	movl   $0x80000000,-0x3c(%ebp)
	int maxInt = 0x7FFFFFFF;
f012d171:	c7 45 c0 ff ff ff 7f 	movl   $0x7fffffff,-0x40(%ebp)
	int *intArr;
	struct MyStruct *structArr;
	int lastIndexOfByte, lastIndexOfByte2, lastIndexOfShort, lastIndexOfShort2,
			lastIndexOfInt, lastIndexOfStruct;
	//[1] Test calling krealloc with VA = NULL. It should call malloc
	void* ptr_allocations[20] = { 0 };
f012d178:	8d 95 40 fe ff ff    	lea    -0x1c0(%ebp),%edx
f012d17e:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d183:	b8 00 00 00 00       	mov    $0x0,%eax
f012d188:	89 d7                	mov    %edx,%edi
f012d18a:	f3 ab                	rep stos %eax,%es:(%edi)
	char* ptr;
	void* newAddress = NULL;
f012d18c:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)
	int freeDiskFrames;


	int lastIndices[20] = { 0 };
f012d193:	8d 95 f0 fd ff ff    	lea    -0x210(%ebp),%edx
f012d199:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d19e:	b8 00 00 00 00       	mov    $0x0,%eax
f012d1a3:	89 d7                	mov    %edx,%edi
f012d1a5:	f3 ab                	rep stos %eax,%es:(%edi)
	int sums[20] = { 0 };
f012d1a7:	8d 95 a0 fd ff ff    	lea    -0x260(%ebp),%edx
f012d1ad:	b9 14 00 00 00       	mov    $0x14,%ecx
f012d1b2:	b8 00 00 00 00       	mov    $0x0,%eax
f012d1b7:	89 d7                	mov    %edx,%edi
f012d1b9:	f3 ab                	rep stos %eax,%es:(%edi)
	int freeFrames;
	//[1] Allocate all
	{
		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d1bb:	e8 10 ef fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d1c0:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[0] = krealloc(NULL, 1 * Mega - kilo);
f012d1c3:	83 ec 08             	sub    $0x8,%esp
f012d1c6:	68 00 fc 0f 00       	push   $0xffc00
f012d1cb:	6a 00                	push   $0x0
f012d1cd:	e8 c8 a2 fd ff       	call   f010749a <krealloc>
f012d1d2:	83 c4 10             	add    $0x10,%esp
f012d1d5:	89 85 40 fe ff ff    	mov    %eax,-0x1c0(%ebp)
		if ((uint32) ptr_allocations[0] < (KERNEL_HEAP_START))
f012d1db:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d1e1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012d1e6:	77 17                	ja     f012d1ff <test_krealloc_BF+0xe4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d1e8:	83 ec 04             	sub    $0x4,%esp
f012d1eb:	68 7c b7 13 f0       	push   $0xf013b77c
f012d1f0:	68 1a 11 00 00       	push   $0x111a
f012d1f5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d1fa:	e8 a7 2f fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[0] != ACTUAL_START)
f012d1ff:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012d205:	89 c1                	mov    %eax,%ecx
f012d207:	c7 45 b4 00 10 00 00 	movl   $0x1000,-0x4c(%ebp)
f012d20e:	8b 45 b4             	mov    -0x4c(%ebp),%eax
f012d211:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d216:	89 45 b0             	mov    %eax,-0x50(%ebp)
f012d219:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d21c:	ba 00 00 00 00       	mov    $0x0,%edx
f012d221:	f7 75 b4             	divl   -0x4c(%ebp)
f012d224:	8b 45 b0             	mov    -0x50(%ebp),%eax
f012d227:	29 d0                	sub    %edx,%eax
f012d229:	89 c3                	mov    %eax,%ebx
f012d22b:	c7 45 ac 00 10 00 00 	movl   $0x1000,-0x54(%ebp)
f012d232:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d237:	0f b6 d0             	movzbl %al,%edx
f012d23a:	8b 45 ac             	mov    -0x54(%ebp),%eax
f012d23d:	01 d0                	add    %edx,%eax
f012d23f:	48                   	dec    %eax
f012d240:	89 45 a8             	mov    %eax,-0x58(%ebp)
f012d243:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d246:	ba 00 00 00 00       	mov    $0x0,%edx
f012d24b:	f7 75 ac             	divl   -0x54(%ebp)
f012d24e:	8b 45 a8             	mov    -0x58(%ebp),%eax
f012d251:	29 d0                	sub    %edx,%eax
f012d253:	01 c3                	add    %eax,%ebx
f012d255:	c7 45 a4 00 10 00 00 	movl   $0x1000,-0x5c(%ebp)
f012d25c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d261:	0f b6 c0             	movzbl %al,%eax
f012d264:	c1 e0 04             	shl    $0x4,%eax
f012d267:	89 c2                	mov    %eax,%edx
f012d269:	8b 45 a4             	mov    -0x5c(%ebp),%eax
f012d26c:	01 d0                	add    %edx,%eax
f012d26e:	48                   	dec    %eax
f012d26f:	89 45 a0             	mov    %eax,-0x60(%ebp)
f012d272:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d275:	ba 00 00 00 00       	mov    $0x0,%edx
f012d27a:	f7 75 a4             	divl   -0x5c(%ebp)
f012d27d:	8b 45 a0             	mov    -0x60(%ebp),%eax
f012d280:	29 d0                	sub    %edx,%eax
f012d282:	01 d8                	add    %ebx,%eax
f012d284:	2d 00 c0 ff 09       	sub    $0x9ffc000,%eax
f012d289:	39 c1                	cmp    %eax,%ecx
f012d28b:	74 17                	je     f012d2a4 <test_krealloc_BF+0x189>
			panic("krealloc: Wrong start address for allocated space");
f012d28d:	83 ec 04             	sub    $0x4,%esp
f012d290:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012d295:	68 1c 11 00 00       	push   $0x111c
f012d29a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d29f:	e8 02 2f fd ff       	call   f01001a6 <_panic>

		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d2a4:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d2a7:	e8 24 ee fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d2ac:	29 c3                	sub    %eax,%ebx
f012d2ae:	89 d8                	mov    %ebx,%eax
f012d2b0:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d2b5:	74 17                	je     f012d2ce <test_krealloc_BF+0x1b3>
			panic("krealloc: Wrong allocation: ");
f012d2b7:	83 ec 04             	sub    $0x4,%esp
f012d2ba:	68 ea b7 13 f0       	push   $0xf013b7ea
f012d2bf:	68 1f 11 00 00       	push   $0x111f
f012d2c4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d2c9:	e8 d8 2e fd ff       	call   f01001a6 <_panic>

		lastIndices[0] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d2ce:	c7 85 f0 fd ff ff ff 	movl   $0xffbff,-0x210(%ebp)
f012d2d5:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d2d8:	e8 f3 ed fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d2dd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[1] = krealloc(NULL, 1 * Mega - kilo);
f012d2e0:	83 ec 08             	sub    $0x8,%esp
f012d2e3:	68 00 fc 0f 00       	push   $0xffc00
f012d2e8:	6a 00                	push   $0x0
f012d2ea:	e8 ab a1 fd ff       	call   f010749a <krealloc>
f012d2ef:	83 c4 10             	add    $0x10,%esp
f012d2f2:	89 85 44 fe ff ff    	mov    %eax,-0x1bc(%ebp)
		if ((uint32) ptr_allocations[1] < (KERNEL_HEAP_START + 1 * Mega))
f012d2f8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d2fe:	3d ff ff 0f f6       	cmp    $0xf60fffff,%eax
f012d303:	77 17                	ja     f012d31c <test_krealloc_BF+0x201>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d305:	83 ec 04             	sub    $0x4,%esp
f012d308:	68 7c b7 13 f0       	push   $0xf013b77c
f012d30d:	68 27 11 00 00       	push   $0x1127
f012d312:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d317:	e8 8a 2e fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[1] != ACTUAL_START + (1 * Mega))
f012d31c:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012d322:	89 c1                	mov    %eax,%ecx
f012d324:	c7 45 9c 00 10 00 00 	movl   $0x1000,-0x64(%ebp)
f012d32b:	8b 45 9c             	mov    -0x64(%ebp),%eax
f012d32e:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d333:	89 45 98             	mov    %eax,-0x68(%ebp)
f012d336:	8b 45 98             	mov    -0x68(%ebp),%eax
f012d339:	ba 00 00 00 00       	mov    $0x0,%edx
f012d33e:	f7 75 9c             	divl   -0x64(%ebp)
f012d341:	8b 45 98             	mov    -0x68(%ebp),%eax
f012d344:	29 d0                	sub    %edx,%eax
f012d346:	89 c3                	mov    %eax,%ebx
f012d348:	c7 45 94 00 10 00 00 	movl   $0x1000,-0x6c(%ebp)
f012d34f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d354:	0f b6 d0             	movzbl %al,%edx
f012d357:	8b 45 94             	mov    -0x6c(%ebp),%eax
f012d35a:	01 d0                	add    %edx,%eax
f012d35c:	48                   	dec    %eax
f012d35d:	89 45 90             	mov    %eax,-0x70(%ebp)
f012d360:	8b 45 90             	mov    -0x70(%ebp),%eax
f012d363:	ba 00 00 00 00       	mov    $0x0,%edx
f012d368:	f7 75 94             	divl   -0x6c(%ebp)
f012d36b:	8b 45 90             	mov    -0x70(%ebp),%eax
f012d36e:	29 d0                	sub    %edx,%eax
f012d370:	01 c3                	add    %eax,%ebx
f012d372:	c7 45 8c 00 10 00 00 	movl   $0x1000,-0x74(%ebp)
f012d379:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d37e:	0f b6 c0             	movzbl %al,%eax
f012d381:	c1 e0 04             	shl    $0x4,%eax
f012d384:	89 c2                	mov    %eax,%edx
f012d386:	8b 45 8c             	mov    -0x74(%ebp),%eax
f012d389:	01 d0                	add    %edx,%eax
f012d38b:	48                   	dec    %eax
f012d38c:	89 45 88             	mov    %eax,-0x78(%ebp)
f012d38f:	8b 45 88             	mov    -0x78(%ebp),%eax
f012d392:	ba 00 00 00 00       	mov    $0x0,%edx
f012d397:	f7 75 8c             	divl   -0x74(%ebp)
f012d39a:	8b 45 88             	mov    -0x78(%ebp),%eax
f012d39d:	29 d0                	sub    %edx,%eax
f012d39f:	01 d8                	add    %ebx,%eax
f012d3a1:	2d 00 c0 ef 09       	sub    $0x9efc000,%eax
f012d3a6:	39 c1                	cmp    %eax,%ecx
f012d3a8:	74 17                	je     f012d3c1 <test_krealloc_BF+0x2a6>
			panic("krealloc: Wrong start address for allocated space");
f012d3aa:	83 ec 04             	sub    $0x4,%esp
f012d3ad:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012d3b2:	68 29 11 00 00       	push   $0x1129
f012d3b7:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d3bc:	e8 e5 2d fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d3c1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d3c4:	e8 07 ed fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d3c9:	29 c3                	sub    %eax,%ebx
f012d3cb:	89 d8                	mov    %ebx,%eax
f012d3cd:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d3d2:	74 17                	je     f012d3eb <test_krealloc_BF+0x2d0>
			panic("krealloc: Wrong allocation: ");
f012d3d4:	83 ec 04             	sub    $0x4,%esp
f012d3d7:	68 ea b7 13 f0       	push   $0xf013b7ea
f012d3dc:	68 2b 11 00 00       	push   $0x112b
f012d3e1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d3e6:	e8 bb 2d fd ff       	call   f01001a6 <_panic>

		lastIndices[1] = (1 * Mega - kilo) / sizeof(char) - 1;
f012d3eb:	c7 85 f4 fd ff ff ff 	movl   $0xffbff,-0x20c(%ebp)
f012d3f2:	fb 0f 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d3f5:	e8 d6 ec fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d3fa:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[2] = krealloc(NULL, 1 * Mega - kilo);
f012d3fd:	83 ec 08             	sub    $0x8,%esp
f012d400:	68 00 fc 0f 00       	push   $0xffc00
f012d405:	6a 00                	push   $0x0
f012d407:	e8 8e a0 fd ff       	call   f010749a <krealloc>
f012d40c:	83 c4 10             	add    $0x10,%esp
f012d40f:	89 85 48 fe ff ff    	mov    %eax,-0x1b8(%ebp)
		if ((uint32) ptr_allocations[2] < (KERNEL_HEAP_START + 2 * Mega))
f012d415:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d41b:	3d ff ff 1f f6       	cmp    $0xf61fffff,%eax
f012d420:	77 17                	ja     f012d439 <test_krealloc_BF+0x31e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d422:	83 ec 04             	sub    $0x4,%esp
f012d425:	68 7c b7 13 f0       	push   $0xf013b77c
f012d42a:	68 33 11 00 00       	push   $0x1133
f012d42f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d434:	e8 6d 2d fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[2] != ACTUAL_START + (2 * Mega))
f012d439:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012d43f:	89 c1                	mov    %eax,%ecx
f012d441:	c7 45 84 00 10 00 00 	movl   $0x1000,-0x7c(%ebp)
f012d448:	8b 45 84             	mov    -0x7c(%ebp),%eax
f012d44b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d450:	89 45 80             	mov    %eax,-0x80(%ebp)
f012d453:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d456:	ba 00 00 00 00       	mov    $0x0,%edx
f012d45b:	f7 75 84             	divl   -0x7c(%ebp)
f012d45e:	8b 45 80             	mov    -0x80(%ebp),%eax
f012d461:	29 d0                	sub    %edx,%eax
f012d463:	89 c3                	mov    %eax,%ebx
f012d465:	c7 85 7c ff ff ff 00 	movl   $0x1000,-0x84(%ebp)
f012d46c:	10 00 00 
f012d46f:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d474:	0f b6 d0             	movzbl %al,%edx
f012d477:	8b 85 7c ff ff ff    	mov    -0x84(%ebp),%eax
f012d47d:	01 d0                	add    %edx,%eax
f012d47f:	48                   	dec    %eax
f012d480:	89 85 78 ff ff ff    	mov    %eax,-0x88(%ebp)
f012d486:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012d48c:	ba 00 00 00 00       	mov    $0x0,%edx
f012d491:	f7 b5 7c ff ff ff    	divl   -0x84(%ebp)
f012d497:	8b 85 78 ff ff ff    	mov    -0x88(%ebp),%eax
f012d49d:	29 d0                	sub    %edx,%eax
f012d49f:	01 c3                	add    %eax,%ebx
f012d4a1:	c7 85 74 ff ff ff 00 	movl   $0x1000,-0x8c(%ebp)
f012d4a8:	10 00 00 
f012d4ab:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d4b0:	0f b6 c0             	movzbl %al,%eax
f012d4b3:	c1 e0 04             	shl    $0x4,%eax
f012d4b6:	89 c2                	mov    %eax,%edx
f012d4b8:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
f012d4be:	01 d0                	add    %edx,%eax
f012d4c0:	48                   	dec    %eax
f012d4c1:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
f012d4c7:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012d4cd:	ba 00 00 00 00       	mov    $0x0,%edx
f012d4d2:	f7 b5 74 ff ff ff    	divl   -0x8c(%ebp)
f012d4d8:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
f012d4de:	29 d0                	sub    %edx,%eax
f012d4e0:	01 d8                	add    %ebx,%eax
f012d4e2:	2d 00 c0 df 09       	sub    $0x9dfc000,%eax
f012d4e7:	39 c1                	cmp    %eax,%ecx
f012d4e9:	74 17                	je     f012d502 <test_krealloc_BF+0x3e7>
			panic("krealloc: Wrong start address for allocated space");
f012d4eb:	83 ec 04             	sub    $0x4,%esp
f012d4ee:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012d4f3:	68 35 11 00 00       	push   $0x1135
f012d4f8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d4fd:	e8 a4 2c fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d502:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d505:	e8 c6 eb fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d50a:	29 c3                	sub    %eax,%ebx
f012d50c:	89 d8                	mov    %ebx,%eax
f012d50e:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d513:	74 17                	je     f012d52c <test_krealloc_BF+0x411>
			panic("krealloc: Wrong allocation: ");
f012d515:	83 ec 04             	sub    $0x4,%esp
f012d518:	68 ea b7 13 f0       	push   $0xf013b7ea
f012d51d:	68 37 11 00 00       	push   $0x1137
f012d522:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d527:	e8 7a 2c fd ff       	call   f01001a6 <_panic>
		lastIndices[2] = (1 * Mega - kilo) / sizeof(int) - 1;
f012d52c:	c7 85 f8 fd ff ff ff 	movl   $0x3feff,-0x208(%ebp)
f012d533:	fe 03 00 

		//Allocate 1 MB
		freeFrames = sys_calculate_free_frames();
f012d536:	e8 95 eb fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d53b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[3] = krealloc(NULL, 1 * Mega - kilo);
f012d53e:	83 ec 08             	sub    $0x8,%esp
f012d541:	68 00 fc 0f 00       	push   $0xffc00
f012d546:	6a 00                	push   $0x0
f012d548:	e8 4d 9f fd ff       	call   f010749a <krealloc>
f012d54d:	83 c4 10             	add    $0x10,%esp
f012d550:	89 85 4c fe ff ff    	mov    %eax,-0x1b4(%ebp)
		if ((uint32) ptr_allocations[3] < (KERNEL_HEAP_START + 3 * Mega))
f012d556:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d55c:	3d ff ff 2f f6       	cmp    $0xf62fffff,%eax
f012d561:	77 17                	ja     f012d57a <test_krealloc_BF+0x45f>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d563:	83 ec 04             	sub    $0x4,%esp
f012d566:	68 7c b7 13 f0       	push   $0xf013b77c
f012d56b:	68 3e 11 00 00       	push   $0x113e
f012d570:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d575:	e8 2c 2c fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[3] != ACTUAL_START + (3 * Mega))
f012d57a:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012d580:	89 c1                	mov    %eax,%ecx
f012d582:	c7 85 6c ff ff ff 00 	movl   $0x1000,-0x94(%ebp)
f012d589:	10 00 00 
f012d58c:	8b 85 6c ff ff ff    	mov    -0x94(%ebp),%eax
f012d592:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d597:	89 85 68 ff ff ff    	mov    %eax,-0x98(%ebp)
f012d59d:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012d5a3:	ba 00 00 00 00       	mov    $0x0,%edx
f012d5a8:	f7 b5 6c ff ff ff    	divl   -0x94(%ebp)
f012d5ae:	8b 85 68 ff ff ff    	mov    -0x98(%ebp),%eax
f012d5b4:	29 d0                	sub    %edx,%eax
f012d5b6:	89 c3                	mov    %eax,%ebx
f012d5b8:	c7 85 64 ff ff ff 00 	movl   $0x1000,-0x9c(%ebp)
f012d5bf:	10 00 00 
f012d5c2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d5c7:	0f b6 d0             	movzbl %al,%edx
f012d5ca:	8b 85 64 ff ff ff    	mov    -0x9c(%ebp),%eax
f012d5d0:	01 d0                	add    %edx,%eax
f012d5d2:	48                   	dec    %eax
f012d5d3:	89 85 60 ff ff ff    	mov    %eax,-0xa0(%ebp)
f012d5d9:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012d5df:	ba 00 00 00 00       	mov    $0x0,%edx
f012d5e4:	f7 b5 64 ff ff ff    	divl   -0x9c(%ebp)
f012d5ea:	8b 85 60 ff ff ff    	mov    -0xa0(%ebp),%eax
f012d5f0:	29 d0                	sub    %edx,%eax
f012d5f2:	01 c3                	add    %eax,%ebx
f012d5f4:	c7 85 5c ff ff ff 00 	movl   $0x1000,-0xa4(%ebp)
f012d5fb:	10 00 00 
f012d5fe:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d603:	0f b6 c0             	movzbl %al,%eax
f012d606:	c1 e0 04             	shl    $0x4,%eax
f012d609:	89 c2                	mov    %eax,%edx
f012d60b:	8b 85 5c ff ff ff    	mov    -0xa4(%ebp),%eax
f012d611:	01 d0                	add    %edx,%eax
f012d613:	48                   	dec    %eax
f012d614:	89 85 58 ff ff ff    	mov    %eax,-0xa8(%ebp)
f012d61a:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012d620:	ba 00 00 00 00       	mov    $0x0,%edx
f012d625:	f7 b5 5c ff ff ff    	divl   -0xa4(%ebp)
f012d62b:	8b 85 58 ff ff ff    	mov    -0xa8(%ebp),%eax
f012d631:	29 d0                	sub    %edx,%eax
f012d633:	01 d8                	add    %ebx,%eax
f012d635:	2d 00 c0 cf 09       	sub    $0x9cfc000,%eax
f012d63a:	39 c1                	cmp    %eax,%ecx
f012d63c:	74 17                	je     f012d655 <test_krealloc_BF+0x53a>
			panic("krealloc: Wrong start address for allocated space");
f012d63e:	83 ec 04             	sub    $0x4,%esp
f012d641:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012d646:	68 40 11 00 00       	push   $0x1140
f012d64b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d650:	e8 51 2b fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 256)
f012d655:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d658:	e8 73 ea fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d65d:	29 c3                	sub    %eax,%ebx
f012d65f:	89 d8                	mov    %ebx,%eax
f012d661:	3d 00 01 00 00       	cmp    $0x100,%eax
f012d666:	74 17                	je     f012d67f <test_krealloc_BF+0x564>
			panic("krealloc: Wrong allocation: ");
f012d668:	83 ec 04             	sub    $0x4,%esp
f012d66b:	68 ea b7 13 f0       	push   $0xf013b7ea
f012d670:	68 42 11 00 00       	push   $0x1142
f012d675:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d67a:	e8 27 2b fd ff       	call   f01001a6 <_panic>
		lastIndices[3] = (1 * Mega - kilo) / sizeof(int) - 1;
f012d67f:	c7 85 fc fd ff ff ff 	movl   $0x3feff,-0x204(%ebp)
f012d686:	fe 03 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012d689:	e8 42 ea fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d68e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[4] = krealloc(NULL, 2 * Mega - kilo);
f012d691:	83 ec 08             	sub    $0x8,%esp
f012d694:	68 00 fc 1f 00       	push   $0x1ffc00
f012d699:	6a 00                	push   $0x0
f012d69b:	e8 fa 9d fd ff       	call   f010749a <krealloc>
f012d6a0:	83 c4 10             	add    $0x10,%esp
f012d6a3:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		if ((uint32) ptr_allocations[4] < (KERNEL_HEAP_START + 4 * Mega))
f012d6a9:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012d6af:	3d ff ff 3f f6       	cmp    $0xf63fffff,%eax
f012d6b4:	77 17                	ja     f012d6cd <test_krealloc_BF+0x5b2>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d6b6:	83 ec 04             	sub    $0x4,%esp
f012d6b9:	68 7c b7 13 f0       	push   $0xf013b77c
f012d6be:	68 49 11 00 00       	push   $0x1149
f012d6c3:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d6c8:	e8 d9 2a fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[4] != ACTUAL_START + (4 * Mega))
f012d6cd:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012d6d3:	89 c1                	mov    %eax,%ecx
f012d6d5:	c7 85 54 ff ff ff 00 	movl   $0x1000,-0xac(%ebp)
f012d6dc:	10 00 00 
f012d6df:	8b 85 54 ff ff ff    	mov    -0xac(%ebp),%eax
f012d6e5:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d6ea:	89 85 50 ff ff ff    	mov    %eax,-0xb0(%ebp)
f012d6f0:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012d6f6:	ba 00 00 00 00       	mov    $0x0,%edx
f012d6fb:	f7 b5 54 ff ff ff    	divl   -0xac(%ebp)
f012d701:	8b 85 50 ff ff ff    	mov    -0xb0(%ebp),%eax
f012d707:	29 d0                	sub    %edx,%eax
f012d709:	89 c3                	mov    %eax,%ebx
f012d70b:	c7 85 4c ff ff ff 00 	movl   $0x1000,-0xb4(%ebp)
f012d712:	10 00 00 
f012d715:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d71a:	0f b6 d0             	movzbl %al,%edx
f012d71d:	8b 85 4c ff ff ff    	mov    -0xb4(%ebp),%eax
f012d723:	01 d0                	add    %edx,%eax
f012d725:	48                   	dec    %eax
f012d726:	89 85 48 ff ff ff    	mov    %eax,-0xb8(%ebp)
f012d72c:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012d732:	ba 00 00 00 00       	mov    $0x0,%edx
f012d737:	f7 b5 4c ff ff ff    	divl   -0xb4(%ebp)
f012d73d:	8b 85 48 ff ff ff    	mov    -0xb8(%ebp),%eax
f012d743:	29 d0                	sub    %edx,%eax
f012d745:	01 c3                	add    %eax,%ebx
f012d747:	c7 85 44 ff ff ff 00 	movl   $0x1000,-0xbc(%ebp)
f012d74e:	10 00 00 
f012d751:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d756:	0f b6 c0             	movzbl %al,%eax
f012d759:	c1 e0 04             	shl    $0x4,%eax
f012d75c:	89 c2                	mov    %eax,%edx
f012d75e:	8b 85 44 ff ff ff    	mov    -0xbc(%ebp),%eax
f012d764:	01 d0                	add    %edx,%eax
f012d766:	48                   	dec    %eax
f012d767:	89 85 40 ff ff ff    	mov    %eax,-0xc0(%ebp)
f012d76d:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012d773:	ba 00 00 00 00       	mov    $0x0,%edx
f012d778:	f7 b5 44 ff ff ff    	divl   -0xbc(%ebp)
f012d77e:	8b 85 40 ff ff ff    	mov    -0xc0(%ebp),%eax
f012d784:	29 d0                	sub    %edx,%eax
f012d786:	01 d8                	add    %ebx,%eax
f012d788:	2d 00 c0 bf 09       	sub    $0x9bfc000,%eax
f012d78d:	39 c1                	cmp    %eax,%ecx
f012d78f:	74 17                	je     f012d7a8 <test_krealloc_BF+0x68d>
			panic("krealloc: Wrong start address for allocated space");
f012d791:	83 ec 04             	sub    $0x4,%esp
f012d794:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012d799:	68 4b 11 00 00       	push   $0x114b
f012d79e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d7a3:	e8 fe 29 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012d7a8:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d7ab:	e8 20 e9 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d7b0:	29 c3                	sub    %eax,%ebx
f012d7b2:	89 d8                	mov    %ebx,%eax
f012d7b4:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d7b9:	74 17                	je     f012d7d2 <test_krealloc_BF+0x6b7>
			panic("krealloc: Wrong allocation: ");
f012d7bb:	83 ec 04             	sub    $0x4,%esp
f012d7be:	68 ea b7 13 f0       	push   $0xf013b7ea
f012d7c3:	68 4d 11 00 00       	push   $0x114d
f012d7c8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d7cd:	e8 d4 29 fd ff       	call   f01001a6 <_panic>
		lastIndices[4] = (2 * Mega - kilo) / sizeof(short) - 1;
f012d7d2:	c7 85 00 fe ff ff ff 	movl   $0xffdff,-0x200(%ebp)
f012d7d9:	fd 0f 00 

		//Allocate 2 MB
		freeFrames = sys_calculate_free_frames();
f012d7dc:	e8 ef e8 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d7e1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[5] = krealloc(NULL, 2 * Mega - kilo);
f012d7e4:	83 ec 08             	sub    $0x8,%esp
f012d7e7:	68 00 fc 1f 00       	push   $0x1ffc00
f012d7ec:	6a 00                	push   $0x0
f012d7ee:	e8 a7 9c fd ff       	call   f010749a <krealloc>
f012d7f3:	83 c4 10             	add    $0x10,%esp
f012d7f6:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%ebp)
		if ((uint32) ptr_allocations[5] < (KERNEL_HEAP_START + 6 * Mega))
f012d7fc:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012d802:	3d ff ff 5f f6       	cmp    $0xf65fffff,%eax
f012d807:	77 17                	ja     f012d820 <test_krealloc_BF+0x705>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d809:	83 ec 04             	sub    $0x4,%esp
f012d80c:	68 7c b7 13 f0       	push   $0xf013b77c
f012d811:	68 54 11 00 00       	push   $0x1154
f012d816:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d81b:	e8 86 29 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[5] != ACTUAL_START + (6 * Mega))
f012d820:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012d826:	89 c1                	mov    %eax,%ecx
f012d828:	c7 85 3c ff ff ff 00 	movl   $0x1000,-0xc4(%ebp)
f012d82f:	10 00 00 
f012d832:	8b 85 3c ff ff ff    	mov    -0xc4(%ebp),%eax
f012d838:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d83d:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%ebp)
f012d843:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012d849:	ba 00 00 00 00       	mov    $0x0,%edx
f012d84e:	f7 b5 3c ff ff ff    	divl   -0xc4(%ebp)
f012d854:	8b 85 38 ff ff ff    	mov    -0xc8(%ebp),%eax
f012d85a:	29 d0                	sub    %edx,%eax
f012d85c:	89 c3                	mov    %eax,%ebx
f012d85e:	c7 85 34 ff ff ff 00 	movl   $0x1000,-0xcc(%ebp)
f012d865:	10 00 00 
f012d868:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d86d:	0f b6 d0             	movzbl %al,%edx
f012d870:	8b 85 34 ff ff ff    	mov    -0xcc(%ebp),%eax
f012d876:	01 d0                	add    %edx,%eax
f012d878:	48                   	dec    %eax
f012d879:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%ebp)
f012d87f:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012d885:	ba 00 00 00 00       	mov    $0x0,%edx
f012d88a:	f7 b5 34 ff ff ff    	divl   -0xcc(%ebp)
f012d890:	8b 85 30 ff ff ff    	mov    -0xd0(%ebp),%eax
f012d896:	29 d0                	sub    %edx,%eax
f012d898:	01 c3                	add    %eax,%ebx
f012d89a:	c7 85 2c ff ff ff 00 	movl   $0x1000,-0xd4(%ebp)
f012d8a1:	10 00 00 
f012d8a4:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d8a9:	0f b6 c0             	movzbl %al,%eax
f012d8ac:	c1 e0 04             	shl    $0x4,%eax
f012d8af:	89 c2                	mov    %eax,%edx
f012d8b1:	8b 85 2c ff ff ff    	mov    -0xd4(%ebp),%eax
f012d8b7:	01 d0                	add    %edx,%eax
f012d8b9:	48                   	dec    %eax
f012d8ba:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%ebp)
f012d8c0:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012d8c6:	ba 00 00 00 00       	mov    $0x0,%edx
f012d8cb:	f7 b5 2c ff ff ff    	divl   -0xd4(%ebp)
f012d8d1:	8b 85 28 ff ff ff    	mov    -0xd8(%ebp),%eax
f012d8d7:	29 d0                	sub    %edx,%eax
f012d8d9:	01 d8                	add    %ebx,%eax
f012d8db:	2d 00 c0 9f 09       	sub    $0x99fc000,%eax
f012d8e0:	39 c1                	cmp    %eax,%ecx
f012d8e2:	74 17                	je     f012d8fb <test_krealloc_BF+0x7e0>
			panic("krealloc: Wrong start address for allocated space");
f012d8e4:	83 ec 04             	sub    $0x4,%esp
f012d8e7:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012d8ec:	68 56 11 00 00       	push   $0x1156
f012d8f1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d8f6:	e8 ab 28 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 512)
f012d8fb:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012d8fe:	e8 cd e7 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d903:	29 c3                	sub    %eax,%ebx
f012d905:	89 d8                	mov    %ebx,%eax
f012d907:	3d 00 02 00 00       	cmp    $0x200,%eax
f012d90c:	74 17                	je     f012d925 <test_krealloc_BF+0x80a>
			panic("krealloc: Wrong allocation: ");
f012d90e:	83 ec 04             	sub    $0x4,%esp
f012d911:	68 ea b7 13 f0       	push   $0xf013b7ea
f012d916:	68 58 11 00 00       	push   $0x1158
f012d91b:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d920:	e8 81 28 fd ff       	call   f01001a6 <_panic>
		lastIndices[5] = (2 * Mega - kilo) / sizeof(short) - 1;
f012d925:	c7 85 04 fe ff ff ff 	movl   $0xffdff,-0x1fc(%ebp)
f012d92c:	fd 0f 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012d92f:	e8 9c e7 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012d934:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[6] = krealloc(NULL, 3 * Mega - kilo);
f012d937:	83 ec 08             	sub    $0x8,%esp
f012d93a:	68 00 fc 2f 00       	push   $0x2ffc00
f012d93f:	6a 00                	push   $0x0
f012d941:	e8 54 9b fd ff       	call   f010749a <krealloc>
f012d946:	83 c4 10             	add    $0x10,%esp
f012d949:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		if ((uint32) ptr_allocations[6] < (KERNEL_HEAP_START + 8 * Mega))
f012d94f:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d955:	3d ff ff 7f f6       	cmp    $0xf67fffff,%eax
f012d95a:	77 17                	ja     f012d973 <test_krealloc_BF+0x858>
			panic("krealloc: Wrong start address for the allocated space... ");
f012d95c:	83 ec 04             	sub    $0x4,%esp
f012d95f:	68 7c b7 13 f0       	push   $0xf013b77c
f012d964:	68 5f 11 00 00       	push   $0x115f
f012d969:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012d96e:	e8 33 28 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[6] != ACTUAL_START + (8 * Mega))
f012d973:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012d979:	89 c1                	mov    %eax,%ecx
f012d97b:	c7 85 24 ff ff ff 00 	movl   $0x1000,-0xdc(%ebp)
f012d982:	10 00 00 
f012d985:	8b 85 24 ff ff ff    	mov    -0xdc(%ebp),%eax
f012d98b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012d990:	89 85 20 ff ff ff    	mov    %eax,-0xe0(%ebp)
f012d996:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d99c:	ba 00 00 00 00       	mov    $0x0,%edx
f012d9a1:	f7 b5 24 ff ff ff    	divl   -0xdc(%ebp)
f012d9a7:	8b 85 20 ff ff ff    	mov    -0xe0(%ebp),%eax
f012d9ad:	29 d0                	sub    %edx,%eax
f012d9af:	89 c3                	mov    %eax,%ebx
f012d9b1:	c7 85 1c ff ff ff 00 	movl   $0x1000,-0xe4(%ebp)
f012d9b8:	10 00 00 
f012d9bb:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d9c0:	0f b6 d0             	movzbl %al,%edx
f012d9c3:	8b 85 1c ff ff ff    	mov    -0xe4(%ebp),%eax
f012d9c9:	01 d0                	add    %edx,%eax
f012d9cb:	48                   	dec    %eax
f012d9cc:	89 85 18 ff ff ff    	mov    %eax,-0xe8(%ebp)
f012d9d2:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d9d8:	ba 00 00 00 00       	mov    $0x0,%edx
f012d9dd:	f7 b5 1c ff ff ff    	divl   -0xe4(%ebp)
f012d9e3:	8b 85 18 ff ff ff    	mov    -0xe8(%ebp),%eax
f012d9e9:	29 d0                	sub    %edx,%eax
f012d9eb:	01 c3                	add    %eax,%ebx
f012d9ed:	c7 85 14 ff ff ff 00 	movl   $0x1000,-0xec(%ebp)
f012d9f4:	10 00 00 
f012d9f7:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012d9fc:	0f b6 c0             	movzbl %al,%eax
f012d9ff:	c1 e0 04             	shl    $0x4,%eax
f012da02:	89 c2                	mov    %eax,%edx
f012da04:	8b 85 14 ff ff ff    	mov    -0xec(%ebp),%eax
f012da0a:	01 d0                	add    %edx,%eax
f012da0c:	48                   	dec    %eax
f012da0d:	89 85 10 ff ff ff    	mov    %eax,-0xf0(%ebp)
f012da13:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012da19:	ba 00 00 00 00       	mov    $0x0,%edx
f012da1e:	f7 b5 14 ff ff ff    	divl   -0xec(%ebp)
f012da24:	8b 85 10 ff ff ff    	mov    -0xf0(%ebp),%eax
f012da2a:	29 d0                	sub    %edx,%eax
f012da2c:	01 d8                	add    %ebx,%eax
f012da2e:	2d 00 c0 7f 09       	sub    $0x97fc000,%eax
f012da33:	39 c1                	cmp    %eax,%ecx
f012da35:	74 17                	je     f012da4e <test_krealloc_BF+0x933>
			panic("krealloc: Wrong start address for allocated space");
f012da37:	83 ec 04             	sub    $0x4,%esp
f012da3a:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012da3f:	68 61 11 00 00       	push   $0x1161
f012da44:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012da49:	e8 58 27 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012da4e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012da51:	e8 7a e6 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012da56:	29 c3                	sub    %eax,%ebx
f012da58:	89 d8                	mov    %ebx,%eax
f012da5a:	3d 00 03 00 00       	cmp    $0x300,%eax
f012da5f:	74 17                	je     f012da78 <test_krealloc_BF+0x95d>
			panic("Wrong allocation: ");
f012da61:	83 ec 04             	sub    $0x4,%esp
f012da64:	68 20 a9 13 f0       	push   $0xf013a920
f012da69:	68 63 11 00 00       	push   $0x1163
f012da6e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012da73:	e8 2e 27 fd ff       	call   f01001a6 <_panic>
		lastIndices[6] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012da78:	c7 85 08 fe ff ff 7f 	movl   $0x5ff7f,-0x1f8(%ebp)
f012da7f:	ff 05 00 

		//Allocate 3 MB
		freeFrames = sys_calculate_free_frames();
f012da82:	e8 49 e6 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012da87:	89 45 b8             	mov    %eax,-0x48(%ebp)
		ptr_allocations[7] = krealloc(NULL, 3 * Mega - kilo);
f012da8a:	83 ec 08             	sub    $0x8,%esp
f012da8d:	68 00 fc 2f 00       	push   $0x2ffc00
f012da92:	6a 00                	push   $0x0
f012da94:	e8 01 9a fd ff       	call   f010749a <krealloc>
f012da99:	83 c4 10             	add    $0x10,%esp
f012da9c:	89 85 5c fe ff ff    	mov    %eax,-0x1a4(%ebp)
		if ((uint32) ptr_allocations[7] < (KERNEL_HEAP_START + 11 * Mega))
f012daa2:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012daa8:	3d ff ff af f6       	cmp    $0xf6afffff,%eax
f012daad:	77 17                	ja     f012dac6 <test_krealloc_BF+0x9ab>
			panic("krealloc: Wrong start address for the allocated space... ");
f012daaf:	83 ec 04             	sub    $0x4,%esp
f012dab2:	68 7c b7 13 f0       	push   $0xf013b77c
f012dab7:	68 6a 11 00 00       	push   $0x116a
f012dabc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012dac1:	e8 e0 26 fd ff       	call   f01001a6 <_panic>
		if ((uint32) ptr_allocations[7] != ACTUAL_START + (11 * Mega))
f012dac6:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dacc:	89 c1                	mov    %eax,%ecx
f012dace:	c7 85 0c ff ff ff 00 	movl   $0x1000,-0xf4(%ebp)
f012dad5:	10 00 00 
f012dad8:	8b 85 0c ff ff ff    	mov    -0xf4(%ebp),%eax
f012dade:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012dae3:	89 85 08 ff ff ff    	mov    %eax,-0xf8(%ebp)
f012dae9:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012daef:	ba 00 00 00 00       	mov    $0x0,%edx
f012daf4:	f7 b5 0c ff ff ff    	divl   -0xf4(%ebp)
f012dafa:	8b 85 08 ff ff ff    	mov    -0xf8(%ebp),%eax
f012db00:	29 d0                	sub    %edx,%eax
f012db02:	89 c3                	mov    %eax,%ebx
f012db04:	c7 85 04 ff ff ff 00 	movl   $0x1000,-0xfc(%ebp)
f012db0b:	10 00 00 
f012db0e:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012db13:	0f b6 d0             	movzbl %al,%edx
f012db16:	8b 85 04 ff ff ff    	mov    -0xfc(%ebp),%eax
f012db1c:	01 d0                	add    %edx,%eax
f012db1e:	48                   	dec    %eax
f012db1f:	89 85 00 ff ff ff    	mov    %eax,-0x100(%ebp)
f012db25:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012db2b:	ba 00 00 00 00       	mov    $0x0,%edx
f012db30:	f7 b5 04 ff ff ff    	divl   -0xfc(%ebp)
f012db36:	8b 85 00 ff ff ff    	mov    -0x100(%ebp),%eax
f012db3c:	29 d0                	sub    %edx,%eax
f012db3e:	01 c3                	add    %eax,%ebx
f012db40:	c7 85 fc fe ff ff 00 	movl   $0x1000,-0x104(%ebp)
f012db47:	10 00 00 
f012db4a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012db4f:	0f b6 c0             	movzbl %al,%eax
f012db52:	c1 e0 04             	shl    $0x4,%eax
f012db55:	89 c2                	mov    %eax,%edx
f012db57:	8b 85 fc fe ff ff    	mov    -0x104(%ebp),%eax
f012db5d:	01 d0                	add    %edx,%eax
f012db5f:	48                   	dec    %eax
f012db60:	89 85 f8 fe ff ff    	mov    %eax,-0x108(%ebp)
f012db66:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012db6c:	ba 00 00 00 00       	mov    $0x0,%edx
f012db71:	f7 b5 fc fe ff ff    	divl   -0x104(%ebp)
f012db77:	8b 85 f8 fe ff ff    	mov    -0x108(%ebp),%eax
f012db7d:	29 d0                	sub    %edx,%eax
f012db7f:	01 d8                	add    %ebx,%eax
f012db81:	2d 00 c0 4f 09       	sub    $0x94fc000,%eax
f012db86:	39 c1                	cmp    %eax,%ecx
f012db88:	74 17                	je     f012dba1 <test_krealloc_BF+0xa86>
			panic("krealloc: Wrong start address for allocated space");
f012db8a:	83 ec 04             	sub    $0x4,%esp
f012db8d:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012db92:	68 6c 11 00 00       	push   $0x116c
f012db97:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012db9c:	e8 05 26 fd ff       	call   f01001a6 <_panic>
		if ((freeFrames - sys_calculate_free_frames()) != 768)
f012dba1:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012dba4:	e8 27 e5 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012dba9:	29 c3                	sub    %eax,%ebx
f012dbab:	89 d8                	mov    %ebx,%eax
f012dbad:	3d 00 03 00 00       	cmp    $0x300,%eax
f012dbb2:	74 17                	je     f012dbcb <test_krealloc_BF+0xab0>
			panic("krealloc: Wrong allocation: ");
f012dbb4:	83 ec 04             	sub    $0x4,%esp
f012dbb7:	68 ea b7 13 f0       	push   $0xf013b7ea
f012dbbc:	68 6e 11 00 00       	push   $0x116e
f012dbc1:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012dbc6:	e8 db 25 fd ff       	call   f01001a6 <_panic>
		lastIndices[7] = (3 * Mega - kilo) / sizeof(struct MyStruct) - 1;
f012dbcb:	c7 85 0c fe ff ff 7f 	movl   $0x5ff7f,-0x1f4(%ebp)
f012dbd2:	ff 05 00 
	char *byteArr1;
	//[3] Test read write access
	{
		//cprintf("\nTest read write access");
		//Test access for the first 1 MB
		freeFrames = sys_calculate_free_frames();
f012dbd5:	e8 f6 e4 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012dbda:	89 45 b8             	mov    %eax,-0x48(%ebp)

		//Write values
		//In 1st 1 MB
		lastIndexOfByte = (1 * Mega - kilo) / sizeof(char) - 1;
f012dbdd:	c7 85 f4 fe ff ff ff 	movl   $0xffbff,-0x10c(%ebp)
f012dbe4:	fb 0f 00 
		byteArr = (char *) ptr_allocations[0];
f012dbe7:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012dbed:	89 85 f0 fe ff ff    	mov    %eax,-0x110(%ebp)
		byteArr[0] = minByte;
f012dbf3:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012dbf9:	8a 55 cf             	mov    -0x31(%ebp),%dl
f012dbfc:	88 10                	mov    %dl,(%eax)
		byteArr[lastIndexOfByte] = maxByte;
f012dbfe:	8b 95 f4 fe ff ff    	mov    -0x10c(%ebp),%edx
f012dc04:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012dc0a:	01 c2                	add    %eax,%edx
f012dc0c:	8a 45 ce             	mov    -0x32(%ebp),%al
f012dc0f:	88 02                	mov    %al,(%edx)

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012dc11:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012dc17:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012dc1d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012dc24:	eb 11                	jmp    f012dc37 <test_krealloc_BF+0xb1c>
			ptr[i] = 2;
f012dc26:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012dc29:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012dc2f:	01 d0                	add    %edx,%eax
f012dc31:	c6 00 02             	movb   $0x2,(%eax)
		byteArr[0] = minByte;
		byteArr[lastIndexOfByte] = maxByte;

		//In 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		for (int i = 0; i <= lastIndices[1]; ++i) {
f012dc34:	ff 45 f4             	incl   -0xc(%ebp)
f012dc37:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012dc3d:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012dc40:	7d e4                	jge    f012dc26 <test_krealloc_BF+0xb0b>
			ptr[i] = 2;
		}

		//In 3rd 1 MB
		intArr = (int*) ptr_allocations[2];
f012dc42:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012dc48:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		intArr[0] = 3;
f012dc4e:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012dc54:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
		intArr[lastIndices[2]] = 3;
f012dc5a:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012dc60:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dc67:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012dc6d:	01 d0                	add    %edx,%eax
f012dc6f:	c7 00 03 00 00 00    	movl   $0x3,(%eax)

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
f012dc75:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012dc7b:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012dc81:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012dc88:	eb 1b                	jmp    f012dca5 <test_krealloc_BF+0xb8a>
			intArr[i] = 4;
f012dc8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012dc8d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012dc94:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012dc9a:	01 d0                	add    %edx,%eax
f012dc9c:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
		intArr[0] = 3;
		intArr[lastIndices[2]] = 3;

		//In 4th 1 MB
		intArr = (int*) ptr_allocations[3];
		for (int i = 0; i <= lastIndices[3]; ++i) {
f012dca2:	ff 45 f0             	incl   -0x10(%ebp)
f012dca5:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012dcab:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012dcae:	7d da                	jge    f012dc8a <test_krealloc_BF+0xb6f>
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012dcb0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012dcb6:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012dcbc:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
f012dcc3:	eb 17                	jmp    f012dcdc <test_krealloc_BF+0xbc1>
			shortArr[i] = 5;
f012dcc5:	8b 45 ec             	mov    -0x14(%ebp),%eax
f012dcc8:	01 c0                	add    %eax,%eax
f012dcca:	89 c2                	mov    %eax,%edx
f012dccc:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dcd2:	01 d0                	add    %edx,%eax
f012dcd4:	66 c7 00 05 00       	movw   $0x5,(%eax)
			intArr[i] = 4;
		}

		//In 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
		for (int i = 0; i <= lastIndices[4]; ++i) {
f012dcd9:	ff 45 ec             	incl   -0x14(%ebp)
f012dcdc:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012dce2:	3b 45 ec             	cmp    -0x14(%ebp),%eax
f012dce5:	7d de                	jge    f012dcc5 <test_krealloc_BF+0xbaa>
			shortArr[i] = 5;
		}

		//In the 2nd 2 MB
		shortArr = (short*) ptr_allocations[5];
f012dce7:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012dced:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		shortArr[0] = 6;
f012dcf3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dcf9:	66 c7 00 06 00       	movw   $0x6,(%eax)
		shortArr[lastIndices[5]] = 6;
f012dcfe:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012dd04:	01 c0                	add    %eax,%eax
f012dd06:	89 c2                	mov    %eax,%edx
f012dd08:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012dd0e:	01 d0                	add    %edx,%eax
f012dd10:	66 c7 00 06 00       	movw   $0x6,(%eax)

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
f012dd15:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012dd1b:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		for (int i = 0; i <= lastIndices[6]; i++) {
f012dd21:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012dd28:	eb 49                	jmp    f012dd73 <test_krealloc_BF+0xc58>
			structArr[i].a = 7;
f012dd2a:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012dd2d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dd34:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd3a:	01 d0                	add    %edx,%eax
f012dd3c:	c6 00 07             	movb   $0x7,(%eax)
			structArr[i].b = 7;
f012dd3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012dd42:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dd49:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd4f:	01 d0                	add    %edx,%eax
f012dd51:	66 c7 40 02 07 00    	movw   $0x7,0x2(%eax)
			structArr[i].c = 7;
f012dd57:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012dd5a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dd61:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd67:	01 d0                	add    %edx,%eax
f012dd69:	c7 40 04 07 00 00 00 	movl   $0x7,0x4(%eax)
		shortArr[0] = 6;
		shortArr[lastIndices[5]] = 6;

		//In the 1st 3 MB
		structArr = (struct MyStruct *) ptr_allocations[6];
		for (int i = 0; i <= lastIndices[6]; i++) {
f012dd70:	ff 45 e8             	incl   -0x18(%ebp)
f012dd73:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012dd79:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012dd7c:	7d ac                	jge    f012dd2a <test_krealloc_BF+0xc0f>
			structArr[i].b = 7;
			structArr[i].c = 7;
		}

		//In the last 3 MB
		structArr = (struct MyStruct*) ptr_allocations[7];
f012dd7e:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012dd84:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		structArr[0].a = 8;
f012dd8a:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd90:	c6 00 08             	movb   $0x8,(%eax)
		structArr[0].b = 8;
f012dd93:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dd99:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[0].c = 8;
f012dd9f:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dda5:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)
		structArr[lastIndices[7]].a = 8;
f012ddac:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ddb2:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ddb9:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ddbf:	01 d0                	add    %edx,%eax
f012ddc1:	c6 00 08             	movb   $0x8,(%eax)
		structArr[lastIndices[7]].b = 8;
f012ddc4:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012ddca:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ddd1:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ddd7:	01 d0                	add    %edx,%eax
f012ddd9:	66 c7 40 02 08 00    	movw   $0x8,0x2(%eax)
		structArr[lastIndices[7]].c = 8;
f012dddf:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012dde5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012ddec:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ddf2:	01 d0                	add    %edx,%eax
f012ddf4:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%eax)

		//Read values: check that the values are successfully written
		if (byteArr[0] != minByte || byteArr[lastIndices[0]] != maxByte)
f012ddfb:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012de01:	8a 00                	mov    (%eax),%al
f012de03:	3a 45 cf             	cmp    -0x31(%ebp),%al
f012de06:	75 17                	jne    f012de1f <test_krealloc_BF+0xd04>
f012de08:	8b 85 f0 fd ff ff    	mov    -0x210(%ebp),%eax
f012de0e:	89 c2                	mov    %eax,%edx
f012de10:	8b 85 f0 fe ff ff    	mov    -0x110(%ebp),%eax
f012de16:	01 d0                	add    %edx,%eax
f012de18:	8a 00                	mov    (%eax),%al
f012de1a:	3a 45 ce             	cmp    -0x32(%ebp),%al
f012de1d:	74 17                	je     f012de36 <test_krealloc_BF+0xd1b>
			panic(
f012de1f:	83 ec 04             	sub    $0x4,%esp
f012de22:	68 08 b8 13 f0       	push   $0xf013b808
f012de27:	68 b1 11 00 00       	push   $0x11b1
f012de2c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012de31:	e8 70 23 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		ptr = (char*) ptr_allocations[1];
f012de36:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012de3c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		if (ptr[0] != 2 || ptr[lastIndices[1]] != 2)
f012de42:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012de48:	8a 00                	mov    (%eax),%al
f012de4a:	3c 02                	cmp    $0x2,%al
f012de4c:	75 16                	jne    f012de64 <test_krealloc_BF+0xd49>
f012de4e:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012de54:	89 c2                	mov    %eax,%edx
f012de56:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012de5c:	01 d0                	add    %edx,%eax
f012de5e:	8a 00                	mov    (%eax),%al
f012de60:	3c 02                	cmp    $0x2,%al
f012de62:	74 20                	je     f012de84 <test_krealloc_BF+0xd69>
			panic(
f012de64:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012de6a:	8a 00                	mov    (%eax),%al
f012de6c:	0f be c0             	movsbl %al,%eax
f012de6f:	50                   	push   %eax
f012de70:	68 48 b8 13 f0       	push   $0xf013b848
f012de75:	68 b7 11 00 00       	push   $0x11b7
f012de7a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012de7f:	e8 22 23 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!, char = %c",
					ptr[0]);

		intArr = (int*) ptr_allocations[2];
f012de84:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012de8a:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 3 || intArr[lastIndices[2]] != 3)
f012de90:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012de96:	8b 00                	mov    (%eax),%eax
f012de98:	83 f8 03             	cmp    $0x3,%eax
f012de9b:	75 1c                	jne    f012deb9 <test_krealloc_BF+0xd9e>
f012de9d:	8b 85 f8 fd ff ff    	mov    -0x208(%ebp),%eax
f012dea3:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012deaa:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012deb0:	01 d0                	add    %edx,%eax
f012deb2:	8b 00                	mov    (%eax),%eax
f012deb4:	83 f8 03             	cmp    $0x3,%eax
f012deb7:	74 17                	je     f012ded0 <test_krealloc_BF+0xdb5>
			panic("Wrong allocation stored values are wrongly changed!");
f012deb9:	83 ec 04             	sub    $0x4,%esp
f012debc:	68 94 b8 13 f0       	push   $0xf013b894
f012dec1:	68 bb 11 00 00       	push   $0x11bb
f012dec6:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012decb:	e8 d6 22 fd ff       	call   f01001a6 <_panic>

		intArr = (int*) ptr_allocations[3];
f012ded0:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012ded6:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)
		if (intArr[0] != 4 || intArr[lastIndices[3]] != 4)
f012dedc:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012dee2:	8b 00                	mov    (%eax),%eax
f012dee4:	83 f8 04             	cmp    $0x4,%eax
f012dee7:	75 1c                	jne    f012df05 <test_krealloc_BF+0xdea>
f012dee9:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012deef:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012def6:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012defc:	01 d0                	add    %edx,%eax
f012defe:	8b 00                	mov    (%eax),%eax
f012df00:	83 f8 04             	cmp    $0x4,%eax
f012df03:	74 17                	je     f012df1c <test_krealloc_BF+0xe01>
			panic(
f012df05:	83 ec 04             	sub    $0x4,%esp
f012df08:	68 08 b8 13 f0       	push   $0xf013b808
f012df0d:	68 c0 11 00 00       	push   $0x11c0
f012df12:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012df17:	e8 8a 22 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[4];
f012df1c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012df22:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 5 || shortArr[lastIndices[4]] != 5)
f012df28:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012df2e:	66 8b 00             	mov    (%eax),%ax
f012df31:	66 83 f8 05          	cmp    $0x5,%ax
f012df35:	75 1b                	jne    f012df52 <test_krealloc_BF+0xe37>
f012df37:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012df3d:	01 c0                	add    %eax,%eax
f012df3f:	89 c2                	mov    %eax,%edx
f012df41:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012df47:	01 d0                	add    %edx,%eax
f012df49:	66 8b 00             	mov    (%eax),%ax
f012df4c:	66 83 f8 05          	cmp    $0x5,%ax
f012df50:	74 17                	je     f012df69 <test_krealloc_BF+0xe4e>
			panic(
f012df52:	83 ec 04             	sub    $0x4,%esp
f012df55:	68 08 b8 13 f0       	push   $0xf013b808
f012df5a:	68 c5 11 00 00       	push   $0x11c5
f012df5f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012df64:	e8 3d 22 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		shortArr = (short*) ptr_allocations[5];
f012df69:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012df6f:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)
		if (shortArr[0] != 6 || shortArr[lastIndices[5]] != 6)
f012df75:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012df7b:	66 8b 00             	mov    (%eax),%ax
f012df7e:	66 83 f8 06          	cmp    $0x6,%ax
f012df82:	75 1b                	jne    f012df9f <test_krealloc_BF+0xe84>
f012df84:	8b 85 04 fe ff ff    	mov    -0x1fc(%ebp),%eax
f012df8a:	01 c0                	add    %eax,%eax
f012df8c:	89 c2                	mov    %eax,%edx
f012df8e:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012df94:	01 d0                	add    %edx,%eax
f012df96:	66 8b 00             	mov    (%eax),%ax
f012df99:	66 83 f8 06          	cmp    $0x6,%ax
f012df9d:	74 17                	je     f012dfb6 <test_krealloc_BF+0xe9b>
			panic(
f012df9f:	83 ec 04             	sub    $0x4,%esp
f012dfa2:	68 08 b8 13 f0       	push   $0xf013b808
f012dfa7:	68 ca 11 00 00       	push   $0x11ca
f012dfac:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012dfb1:	e8 f0 21 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[6];
f012dfb6:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012dfbc:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 7 || structArr[lastIndices[6]].a != 7)
f012dfc2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dfc8:	8a 00                	mov    (%eax),%al
f012dfca:	3c 07                	cmp    $0x7,%al
f012dfcc:	75 1b                	jne    f012dfe9 <test_krealloc_BF+0xece>
f012dfce:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012dfd4:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012dfdb:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012dfe1:	01 d0                	add    %edx,%eax
f012dfe3:	8a 00                	mov    (%eax),%al
f012dfe5:	3c 07                	cmp    $0x7,%al
f012dfe7:	74 17                	je     f012e000 <test_krealloc_BF+0xee5>
			panic(
f012dfe9:	83 ec 04             	sub    $0x4,%esp
f012dfec:	68 08 b8 13 f0       	push   $0xf013b808
f012dff1:	68 cf 11 00 00       	push   $0x11cf
f012dff6:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012dffb:	e8 a6 21 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 7 || structArr[lastIndices[6]].b != 7)
f012e000:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e006:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e00a:	66 83 f8 07          	cmp    $0x7,%ax
f012e00e:	75 1f                	jne    f012e02f <test_krealloc_BF+0xf14>
f012e010:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e016:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e01d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e023:	01 d0                	add    %edx,%eax
f012e025:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e029:	66 83 f8 07          	cmp    $0x7,%ax
f012e02d:	74 17                	je     f012e046 <test_krealloc_BF+0xf2b>
			panic(
f012e02f:	83 ec 04             	sub    $0x4,%esp
f012e032:	68 08 b8 13 f0       	push   $0xf013b808
f012e037:	68 d2 11 00 00       	push   $0x11d2
f012e03c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e041:	e8 60 21 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 7 || structArr[lastIndices[6]].c != 7)
f012e046:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e04c:	8b 40 04             	mov    0x4(%eax),%eax
f012e04f:	83 f8 07             	cmp    $0x7,%eax
f012e052:	75 1d                	jne    f012e071 <test_krealloc_BF+0xf56>
f012e054:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e05a:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e061:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e067:	01 d0                	add    %edx,%eax
f012e069:	8b 40 04             	mov    0x4(%eax),%eax
f012e06c:	83 f8 07             	cmp    $0x7,%eax
f012e06f:	74 17                	je     f012e088 <test_krealloc_BF+0xf6d>
			panic(
f012e071:	83 ec 04             	sub    $0x4,%esp
f012e074:	68 08 b8 13 f0       	push   $0xf013b808
f012e079:	68 d5 11 00 00       	push   $0x11d5
f012e07e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e083:	e8 1e 21 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		structArr = (struct MyStruct*) ptr_allocations[7];
f012e088:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e08e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)
		if (structArr[0].a != 8 || structArr[lastIndices[7]].a != 8)
f012e094:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e09a:	8a 00                	mov    (%eax),%al
f012e09c:	3c 08                	cmp    $0x8,%al
f012e09e:	75 1b                	jne    f012e0bb <test_krealloc_BF+0xfa0>
f012e0a0:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e0a6:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e0ad:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e0b3:	01 d0                	add    %edx,%eax
f012e0b5:	8a 00                	mov    (%eax),%al
f012e0b7:	3c 08                	cmp    $0x8,%al
f012e0b9:	74 17                	je     f012e0d2 <test_krealloc_BF+0xfb7>
			panic(
f012e0bb:	83 ec 04             	sub    $0x4,%esp
f012e0be:	68 08 b8 13 f0       	push   $0xf013b808
f012e0c3:	68 da 11 00 00       	push   $0x11da
f012e0c8:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e0cd:	e8 d4 20 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].b != 8 || structArr[lastIndices[7]].b != 8)
f012e0d2:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e0d8:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e0dc:	66 83 f8 08          	cmp    $0x8,%ax
f012e0e0:	75 1f                	jne    f012e101 <test_krealloc_BF+0xfe6>
f012e0e2:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e0e8:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e0ef:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e0f5:	01 d0                	add    %edx,%eax
f012e0f7:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e0fb:	66 83 f8 08          	cmp    $0x8,%ax
f012e0ff:	74 17                	je     f012e118 <test_krealloc_BF+0xffd>
			panic(
f012e101:	83 ec 04             	sub    $0x4,%esp
f012e104:	68 08 b8 13 f0       	push   $0xf013b808
f012e109:	68 dd 11 00 00       	push   $0x11dd
f012e10e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e113:	e8 8e 20 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");
		if (structArr[0].c != 8 || structArr[lastIndices[7]].c != 8)
f012e118:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e11e:	8b 40 04             	mov    0x4(%eax),%eax
f012e121:	83 f8 08             	cmp    $0x8,%eax
f012e124:	75 1d                	jne    f012e143 <test_krealloc_BF+0x1028>
f012e126:	8b 85 0c fe ff ff    	mov    -0x1f4(%ebp),%eax
f012e12c:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
f012e133:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e139:	01 d0                	add    %edx,%eax
f012e13b:	8b 40 04             	mov    0x4(%eax),%eax
f012e13e:	83 f8 08             	cmp    $0x8,%eax
f012e141:	74 17                	je     f012e15a <test_krealloc_BF+0x103f>
			panic(
f012e143:	83 ec 04             	sub    $0x4,%esp
f012e146:	68 08 b8 13 f0       	push   $0xf013b808
f012e14b:	68 e0 11 00 00       	push   $0x11e0
f012e150:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e155:	e8 4c 20 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation stored values are wrongly changed!");

		if ((freeFrames - sys_calculate_free_frames()) != 0)
f012e15a:	e8 71 df fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e15f:	89 c2                	mov    %eax,%edx
f012e161:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e164:	39 c2                	cmp    %eax,%edx
f012e166:	74 17                	je     f012e17f <test_krealloc_BF+0x1064>
			panic(
f012e168:	83 ec 04             	sub    $0x4,%esp
f012e16b:	68 c8 b8 13 f0       	push   $0xf013b8c8
f012e170:	68 e4 11 00 00       	push   $0x11e4
f012e175:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e17a:	e8 27 20 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation pages are not loaded successfully into memory");

	}
	cprintf("\nkrealloc: current evaluation = 10%");
f012e17f:	83 ec 0c             	sub    $0xc,%esp
f012e182:	68 14 b9 13 f0       	push   $0xf013b914
f012e187:	e8 a1 2a fd ff       	call   f0100c2d <cprintf>
f012e18c:	83 c4 10             	add    $0x10,%esp

	//[3] Test krealloc by passing size = 0
	{
		//kfree 1st 1 MB
		freeFrames = sys_calculate_free_frames();
f012e18f:	e8 3c df fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e194:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e197:	e8 f8 5a fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012e19c:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[0], 0);
f012e1a2:	8b 85 40 fe ff ff    	mov    -0x1c0(%ebp),%eax
f012e1a8:	83 ec 08             	sub    $0x8,%esp
f012e1ab:	6a 00                	push   $0x0
f012e1ad:	50                   	push   %eax
f012e1ae:	e8 e7 92 fd ff       	call   f010749a <krealloc>
f012e1b3:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e1b6:	e8 d9 5a fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012e1bb:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e1c1:	74 17                	je     f012e1da <test_krealloc_BF+0x10bf>
			panic(
f012e1c3:	83 ec 04             	sub    $0x4,%esp
f012e1c6:	68 38 b9 13 f0       	push   $0xf013b938
f012e1cb:	68 f1 11 00 00       	push   $0x11f1
f012e1d0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e1d5:	e8 cc 1f fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e1da:	e8 f1 de fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e1df:	89 c2                	mov    %eax,%edx
f012e1e1:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e1e4:	29 c2                	sub    %eax,%edx
f012e1e6:	89 d0                	mov    %edx,%eax
f012e1e8:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e1ed:	74 17                	je     f012e206 <test_krealloc_BF+0x10eb>
			panic("krealloc: pages in memory are not freed correctly");
f012e1ef:	83 ec 04             	sub    $0x4,%esp
f012e1f2:	68 ac b9 13 f0       	push   $0xf013b9ac
f012e1f7:	68 f3 11 00 00       	push   $0x11f3
f012e1fc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e201:	e8 a0 1f fd ff       	call   f01001a6 <_panic>

		//kfree 3rd 1 MB
		freeFrames = sys_calculate_free_frames();
f012e206:	e8 c5 de fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e20b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e20e:	e8 81 5a fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012e213:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)

		krealloc(ptr_allocations[2], 0);
f012e219:	8b 85 48 fe ff ff    	mov    -0x1b8(%ebp),%eax
f012e21f:	83 ec 08             	sub    $0x8,%esp
f012e222:	6a 00                	push   $0x0
f012e224:	50                   	push   %eax
f012e225:	e8 70 92 fd ff       	call   f010749a <krealloc>
f012e22a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e22d:	e8 62 5a fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012e232:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e238:	74 17                	je     f012e251 <test_krealloc_BF+0x1136>
			panic(
f012e23a:	83 ec 04             	sub    $0x4,%esp
f012e23d:	68 38 b9 13 f0       	push   $0xf013b938
f012e242:	68 fc 11 00 00       	push   $0x11fc
f012e247:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e24c:	e8 55 1f fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 256)
f012e251:	e8 7a de fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e256:	89 c2                	mov    %eax,%edx
f012e258:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e25b:	29 c2                	sub    %eax,%edx
f012e25d:	89 d0                	mov    %edx,%eax
f012e25f:	3d 00 01 00 00       	cmp    $0x100,%eax
f012e264:	74 17                	je     f012e27d <test_krealloc_BF+0x1162>
			panic("krealloc: pages in memory are not freed correctly");
f012e266:	83 ec 04             	sub    $0x4,%esp
f012e269:	68 ac b9 13 f0       	push   $0xf013b9ac
f012e26e:	68 fe 11 00 00       	push   $0x11fe
f012e273:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e278:	e8 29 1f fd ff       	call   f01001a6 <_panic>

		//kfree 2nd 2 MB
		freeFrames = sys_calculate_free_frames();
f012e27d:	e8 4e de fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e282:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e285:	e8 0a 5a fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012e28a:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[5], 0);
f012e290:	8b 85 54 fe ff ff    	mov    -0x1ac(%ebp),%eax
f012e296:	83 ec 08             	sub    $0x8,%esp
f012e299:	6a 00                	push   $0x0
f012e29b:	50                   	push   %eax
f012e29c:	e8 f9 91 fd ff       	call   f010749a <krealloc>
f012e2a1:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e2a4:	e8 eb 59 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012e2a9:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e2af:	74 17                	je     f012e2c8 <test_krealloc_BF+0x11ad>
			panic(
f012e2b1:	83 ec 04             	sub    $0x4,%esp
f012e2b4:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012e2b9:	68 06 12 00 00       	push   $0x1206
f012e2be:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e2c3:	e8 de 1e fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 2 * Mega / PAGE_SIZE)
f012e2c8:	e8 03 de fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e2cd:	89 c2                	mov    %eax,%edx
f012e2cf:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e2d2:	29 c2                	sub    %eax,%edx
f012e2d4:	89 d0                	mov    %edx,%eax
f012e2d6:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e2db:	74 17                	je     f012e2f4 <test_krealloc_BF+0x11d9>
			panic("krealloc: pages in memory are not freed correctly");
f012e2dd:	83 ec 04             	sub    $0x4,%esp
f012e2e0:	68 ac b9 13 f0       	push   $0xf013b9ac
f012e2e5:	68 08 12 00 00       	push   $0x1208
f012e2ea:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e2ef:	e8 b2 1e fd ff       	call   f01001a6 <_panic>

		//kfree last 3 MB
		freeFrames = sys_calculate_free_frames();
f012e2f4:	e8 d7 dd fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e2f9:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012e2fc:	e8 93 59 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012e301:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[7], 0);
f012e307:	8b 85 5c fe ff ff    	mov    -0x1a4(%ebp),%eax
f012e30d:	83 ec 08             	sub    $0x8,%esp
f012e310:	6a 00                	push   $0x0
f012e312:	50                   	push   %eax
f012e313:	e8 82 91 fd ff       	call   f010749a <krealloc>
f012e318:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012e31b:	e8 74 59 fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012e320:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012e326:	74 17                	je     f012e33f <test_krealloc_BF+0x1224>
			panic(
f012e328:	83 ec 04             	sub    $0x4,%esp
f012e32b:	68 38 b9 13 f0       	push   $0xf013b938
f012e330:	68 10 12 00 00       	push   $0x1210
f012e335:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e33a:	e8 67 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 3 * Mega / PAGE_SIZE)
f012e33f:	e8 8c dd fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e344:	89 c2                	mov    %eax,%edx
f012e346:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e349:	29 c2                	sub    %eax,%edx
f012e34b:	89 d0                	mov    %edx,%eax
f012e34d:	3d 00 03 00 00       	cmp    $0x300,%eax
f012e352:	74 17                	je     f012e36b <test_krealloc_BF+0x1250>
			panic(
f012e354:	83 ec 04             	sub    $0x4,%esp
f012e357:	68 e0 b9 13 f0       	push   $0xf013b9e0
f012e35c:	68 13 12 00 00       	push   $0x1213
f012e361:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e366:	e8 3b 1e fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e36b:	c7 45 e0 00 00 00 f6 	movl   $0xf6000000,-0x20(%ebp)
f012e372:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
f012e379:	eb 48                	jmp    f012e3c3 <test_krealloc_BF+0x12a8>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012e37b:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012e37e:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012e383:	83 ec 04             	sub    $0x4,%esp
f012e386:	8d 8d 9c fd ff ff    	lea    -0x264(%ebp),%ecx
f012e38c:	51                   	push   %ecx
f012e38d:	52                   	push   %edx
f012e38e:	50                   	push   %eax
f012e38f:	e8 dd 85 fd ff       	call   f0106971 <get_page_table>
f012e394:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012e397:	8b 85 9c fd ff ff    	mov    -0x264(%ebp),%eax
f012e39d:	85 c0                	test   %eax,%eax
f012e39f:	75 17                	jne    f012e3b8 <test_krealloc_BF+0x129d>
					panic(
f012e3a1:	83 ec 04             	sub    $0x4,%esp
f012e3a4:	68 d8 ad 13 f0       	push   $0xf013add8
f012e3a9:	68 1f 12 00 00       	push   $0x121f
f012e3ae:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e3b3:	e8 ee 1d fd ff       	call   f01001a6 <_panic>
			panic(
					"krealloc: Wrong kfree: pages in memory are not freed correctly");
		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012e3b8:	81 45 e0 00 00 40 00 	addl   $0x400000,-0x20(%ebp)
f012e3bf:	83 55 e4 00          	adcl   $0x0,-0x1c(%ebp)
f012e3c3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e3c7:	78 b2                	js     f012e37b <test_krealloc_BF+0x1260>
f012e3c9:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012e3cd:	7f 09                	jg     f012e3d8 <test_krealloc_BF+0x12bd>
f012e3cf:	81 7d e0 ff ef ff ff 	cmpl   $0xffffefff,-0x20(%ebp)
f012e3d6:	76 a3                	jbe    f012e37b <test_krealloc_BF+0x1260>
							"Wrong kfree: one of the kernel tables is wrongly removed! Tables should not be removed here in kfree");
				}
			}
		}
	}
	cprintf("\b\b\b20%");
f012e3d8:	83 ec 0c             	sub    $0xc,%esp
f012e3db:	68 1f ba 13 f0       	push   $0xf013ba1f
f012e3e0:	e8 48 28 fd ff       	call   f0100c2d <cprintf>
f012e3e5:	83 c4 10             	add    $0x10,%esp
	//Check memory access after kfree by checking sum
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
f012e3e8:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e3ee:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e3f4:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e3fb:	eb 21                	jmp    f012e41e <test_krealloc_BF+0x1303>
			sums[0] += ptr[i];
f012e3fd:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012e403:	8b 4d dc             	mov    -0x24(%ebp),%ecx
f012e406:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012e40c:	01 c8                	add    %ecx,%eax
f012e40e:	8a 00                	mov    (%eax),%al
f012e410:	0f be c0             	movsbl %al,%eax
f012e413:	01 d0                	add    %edx,%eax
f012e415:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
	{
		//2nd 1 MB
		//cprintf("2nd 1 MB\n");
		ptr = (char*) ptr_allocations[1];
		int i;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012e41b:	ff 45 dc             	incl   -0x24(%ebp)
f012e41e:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012e424:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e427:	7d d4                	jge    f012e3fd <test_krealloc_BF+0x12e2>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012e429:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012e42f:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012e435:	42                   	inc    %edx
f012e436:	01 d2                	add    %edx,%edx
f012e438:	39 d0                	cmp    %edx,%eax
f012e43a:	74 17                	je     f012e453 <test_krealloc_BF+0x1338>
			panic("krealloc: invalid read after freeing some allocations");
f012e43c:	83 ec 04             	sub    $0x4,%esp
f012e43f:	68 28 ba 13 f0       	push   $0xf013ba28
f012e444:	68 31 12 00 00       	push   $0x1231
f012e449:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e44e:	e8 53 1d fd ff       	call   f01001a6 <_panic>

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];
f012e453:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e459:	89 85 e8 fe ff ff    	mov    %eax,-0x118(%ebp)

		for (i = 0; i <= lastIndices[3]; ++i) {
f012e45f:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e466:	eb 25                	jmp    f012e48d <test_krealloc_BF+0x1372>
			sums[1] += intArr[i];
f012e468:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012e46e:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e471:	8d 0c 85 00 00 00 00 	lea    0x0(,%eax,4),%ecx
f012e478:	8b 85 e8 fe ff ff    	mov    -0x118(%ebp),%eax
f012e47e:	01 c8                	add    %ecx,%eax
f012e480:	8b 00                	mov    (%eax),%eax
f012e482:	01 d0                	add    %edx,%eax
f012e484:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)

		//4th 1 MB
		//cprintf("4th 1 MB\n");
		intArr = (int*) ptr_allocations[3];

		for (i = 0; i <= lastIndices[3]; ++i) {
f012e48a:	ff 45 dc             	incl   -0x24(%ebp)
f012e48d:	8b 85 fc fd ff ff    	mov    -0x204(%ebp),%eax
f012e493:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e496:	7d d0                	jge    f012e468 <test_krealloc_BF+0x134d>
			sums[1] += intArr[i];
		}
		if (sums[1] != (lastIndices[3] + 1) * 4)
f012e498:	8b 85 a4 fd ff ff    	mov    -0x25c(%ebp),%eax
f012e49e:	8b 95 fc fd ff ff    	mov    -0x204(%ebp),%edx
f012e4a4:	42                   	inc    %edx
f012e4a5:	c1 e2 02             	shl    $0x2,%edx
f012e4a8:	39 d0                	cmp    %edx,%eax
f012e4aa:	74 17                	je     f012e4c3 <test_krealloc_BF+0x13a8>
			panic("krealloc: invalid read after freeing some allocations");
f012e4ac:	83 ec 04             	sub    $0x4,%esp
f012e4af:	68 28 ba 13 f0       	push   $0xf013ba28
f012e4b4:	68 3b 12 00 00       	push   $0x123b
f012e4b9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e4be:	e8 e3 1c fd ff       	call   f01001a6 <_panic>

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];
f012e4c3:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e4c9:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		for (i = 0; i <= lastIndices[4]; ++i) {
f012e4cf:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e4d6:	eb 24                	jmp    f012e4fc <test_krealloc_BF+0x13e1>
			sums[2] += shortArr[i];
f012e4d8:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012e4de:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e4e1:	01 c0                	add    %eax,%eax
f012e4e3:	89 c1                	mov    %eax,%ecx
f012e4e5:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012e4eb:	01 c8                	add    %ecx,%eax
f012e4ed:	66 8b 00             	mov    (%eax),%ax
f012e4f0:	98                   	cwtl   
f012e4f1:	01 d0                	add    %edx,%eax
f012e4f3:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)

		//1st 2 MB
		//cprintf("1st 2 MB\n");
		shortArr = (short*) ptr_allocations[4];

		for (i = 0; i <= lastIndices[4]; ++i) {
f012e4f9:	ff 45 dc             	incl   -0x24(%ebp)
f012e4fc:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e502:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e505:	7d d1                	jge    f012e4d8 <test_krealloc_BF+0x13bd>
			sums[2] += shortArr[i];
		}
		if (sums[2] != (lastIndices[4] + 1) * 5)
f012e507:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012e50d:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012e513:	8d 48 01             	lea    0x1(%eax),%ecx
f012e516:	89 c8                	mov    %ecx,%eax
f012e518:	c1 e0 02             	shl    $0x2,%eax
f012e51b:	01 c8                	add    %ecx,%eax
f012e51d:	39 c2                	cmp    %eax,%edx
f012e51f:	74 17                	je     f012e538 <test_krealloc_BF+0x141d>
			panic("krealloc: invalid read after freeing some allocations");
f012e521:	83 ec 04             	sub    $0x4,%esp
f012e524:	68 28 ba 13 f0       	push   $0xf013ba28
f012e529:	68 45 12 00 00       	push   $0x1245
f012e52e:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e533:	e8 6e 1c fd ff       	call   f01001a6 <_panic>

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];
f012e538:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012e53e:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		for (i = 0; i <= lastIndices[6]; ++i) {
f012e544:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
f012e54b:	eb 70                	jmp    f012e5bd <test_krealloc_BF+0x14a2>
			sums[3] += structArr[i].a;
f012e54d:	8b 95 ac fd ff ff    	mov    -0x254(%ebp),%edx
f012e553:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e556:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e55d:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e563:	01 c8                	add    %ecx,%eax
f012e565:	8a 00                	mov    (%eax),%al
f012e567:	0f be c0             	movsbl %al,%eax
f012e56a:	01 d0                	add    %edx,%eax
f012e56c:	89 85 ac fd ff ff    	mov    %eax,-0x254(%ebp)
			sums[4] += structArr[i].b;
f012e572:	8b 95 b0 fd ff ff    	mov    -0x250(%ebp),%edx
f012e578:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e57b:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e582:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e588:	01 c8                	add    %ecx,%eax
f012e58a:	66 8b 40 02          	mov    0x2(%eax),%ax
f012e58e:	98                   	cwtl   
f012e58f:	01 d0                	add    %edx,%eax
f012e591:	89 85 b0 fd ff ff    	mov    %eax,-0x250(%ebp)
			sums[5] += structArr[i].c;
f012e597:	8b 95 b4 fd ff ff    	mov    -0x24c(%ebp),%edx
f012e59d:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012e5a0:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012e5a7:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012e5ad:	01 c8                	add    %ecx,%eax
f012e5af:	8b 40 04             	mov    0x4(%eax),%eax
f012e5b2:	01 d0                	add    %edx,%eax
f012e5b4:	89 85 b4 fd ff ff    	mov    %eax,-0x24c(%ebp)

		//1st 3 MB
		//cprintf("1st 3 MB\n");
		structArr = (struct MyStruct*) ptr_allocations[6];

		for (i = 0; i <= lastIndices[6]; ++i) {
f012e5ba:	ff 45 dc             	incl   -0x24(%ebp)
f012e5bd:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e5c3:	3b 45 dc             	cmp    -0x24(%ebp),%eax
f012e5c6:	7d 85                	jge    f012e54d <test_krealloc_BF+0x1432>
			sums[3] += structArr[i].a;
			sums[4] += structArr[i].b;
			sums[5] += structArr[i].c;
		}
		if (sums[3] != (lastIndices[6] + 1) * 7
f012e5c8:	8b 8d ac fd ff ff    	mov    -0x254(%ebp),%ecx
f012e5ce:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e5d4:	8d 50 01             	lea    0x1(%eax),%edx
f012e5d7:	89 d0                	mov    %edx,%eax
f012e5d9:	01 c0                	add    %eax,%eax
f012e5db:	01 d0                	add    %edx,%eax
f012e5dd:	01 c0                	add    %eax,%eax
f012e5df:	01 d0                	add    %edx,%eax
f012e5e1:	39 c1                	cmp    %eax,%ecx
f012e5e3:	75 3a                	jne    f012e61f <test_krealloc_BF+0x1504>
				|| sums[4] != (lastIndices[6] + 1) * 7
f012e5e5:	8b 8d b0 fd ff ff    	mov    -0x250(%ebp),%ecx
f012e5eb:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e5f1:	8d 50 01             	lea    0x1(%eax),%edx
f012e5f4:	89 d0                	mov    %edx,%eax
f012e5f6:	01 c0                	add    %eax,%eax
f012e5f8:	01 d0                	add    %edx,%eax
f012e5fa:	01 c0                	add    %eax,%eax
f012e5fc:	01 d0                	add    %edx,%eax
f012e5fe:	39 c1                	cmp    %eax,%ecx
f012e600:	75 1d                	jne    f012e61f <test_krealloc_BF+0x1504>
				|| sums[5] != (lastIndices[6] + 1) * 7)
f012e602:	8b 8d b4 fd ff ff    	mov    -0x24c(%ebp),%ecx
f012e608:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012e60e:	8d 50 01             	lea    0x1(%eax),%edx
f012e611:	89 d0                	mov    %edx,%eax
f012e613:	01 c0                	add    %eax,%eax
f012e615:	01 d0                	add    %edx,%eax
f012e617:	01 c0                	add    %eax,%eax
f012e619:	01 d0                	add    %edx,%eax
f012e61b:	39 c1                	cmp    %eax,%ecx
f012e61d:	74 17                	je     f012e636 <test_krealloc_BF+0x151b>
			panic("krealloc: invalid read after freeing some allocations");
f012e61f:	83 ec 04             	sub    $0x4,%esp
f012e622:	68 28 ba 13 f0       	push   $0xf013ba28
f012e627:	68 53 12 00 00       	push   $0x1253
f012e62c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e631:	e8 70 1b fd ff       	call   f01001a6 <_panic>
	}

	//[4] Test krealloc reallocation with valid and invalid sizes
	{
		int freeDiskFrames;
		void* newAddress = NULL;
f012e636:	c7 85 d8 fe ff ff 00 	movl   $0x0,-0x128(%ebp)
f012e63d:	00 00 00 
		//Try to reallocate 2nd 1 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012e640:	e8 8b da fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e645:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 15 * kilo);
f012e648:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e64e:	83 ec 08             	sub    $0x8,%esp
f012e651:	68 00 3c 00 00       	push   $0x3c00
f012e656:	50                   	push   %eax
f012e657:	e8 3e 8e fd ff       	call   f010749a <krealloc>
f012e65c:	83 c4 10             	add    $0x10,%esp
f012e65f:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e665:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e66b:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e670:	77 17                	ja     f012e689 <test_krealloc_BF+0x156e>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e672:	83 ec 04             	sub    $0x4,%esp
f012e675:	68 7c b7 13 f0       	push   $0xf013b77c
f012e67a:	68 5f 12 00 00       	push   $0x125f
f012e67f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e684:	e8 1d 1b fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012e689:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e68f:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e695:	74 17                	je     f012e6ae <test_krealloc_BF+0x1593>
			panic(
f012e697:	83 ec 04             	sub    $0x4,%esp
f012e69a:	68 60 ba 13 f0       	push   $0xf013ba60
f012e69f:	68 62 12 00 00       	push   $0x1262
f012e6a4:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e6a9:	e8 f8 1a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e6ae:	e8 1d da fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e6b3:	89 c2                	mov    %eax,%edx
f012e6b5:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e6b8:	39 c2                	cmp    %eax,%edx
f012e6ba:	74 17                	je     f012e6d3 <test_krealloc_BF+0x15b8>
			panic(
f012e6bc:	83 ec 04             	sub    $0x4,%esp
f012e6bf:	68 cc ba 13 f0       	push   $0xf013bacc
f012e6c4:	68 65 12 00 00       	push   $0x1265
f012e6c9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e6ce:	e8 d3 1a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 1st 2 MB with a size smaller than its current size (it should return the same VA and do nothing)
		freeFrames = sys_calculate_free_frames();
f012e6d3:	e8 f8 d9 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e6d8:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], 1 * Mega - kilo);
f012e6db:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e6e1:	83 ec 08             	sub    $0x8,%esp
f012e6e4:	68 00 fc 0f 00       	push   $0xffc00
f012e6e9:	50                   	push   %eax
f012e6ea:	e8 ab 8d fd ff       	call   f010749a <krealloc>
f012e6ef:	83 c4 10             	add    $0x10,%esp
f012e6f2:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e6f8:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e6fe:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e703:	77 17                	ja     f012e71c <test_krealloc_BF+0x1601>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e705:	83 ec 04             	sub    $0x4,%esp
f012e708:	68 7c b7 13 f0       	push   $0xf013b77c
f012e70d:	68 6b 12 00 00       	push   $0x126b
f012e712:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e717:	e8 8a 1a fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012e71c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e722:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e728:	74 17                	je     f012e741 <test_krealloc_BF+0x1626>
			panic(
f012e72a:	83 ec 04             	sub    $0x4,%esp
f012e72d:	68 60 ba 13 f0       	push   $0xf013ba60
f012e732:	68 6e 12 00 00       	push   $0x126e
f012e737:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e73c:	e8 65 1a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e741:	e8 8a d9 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e746:	89 c2                	mov    %eax,%edx
f012e748:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e74b:	39 c2                	cmp    %eax,%edx
f012e74d:	74 17                	je     f012e766 <test_krealloc_BF+0x164b>
			panic(
f012e74f:	83 ec 04             	sub    $0x4,%esp
f012e752:	68 cc ba 13 f0       	push   $0xf013bacc
f012e757:	68 71 12 00 00       	push   $0x1271
f012e75c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e761:	e8 40 1a fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");

		//Try to reallocate 2nd 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012e766:	e8 65 d9 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e76b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], 1 * Mega - kilo);
f012e76e:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e774:	83 ec 08             	sub    $0x8,%esp
f012e777:	68 00 fc 0f 00       	push   $0xffc00
f012e77c:	50                   	push   %eax
f012e77d:	e8 18 8d fd ff       	call   f010749a <krealloc>
f012e782:	83 c4 10             	add    $0x10,%esp
f012e785:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e78b:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e791:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e796:	77 17                	ja     f012e7af <test_krealloc_BF+0x1694>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e798:	83 ec 04             	sub    $0x4,%esp
f012e79b:	68 7c b7 13 f0       	push   $0xf013b77c
f012e7a0:	68 77 12 00 00       	push   $0x1277
f012e7a5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e7aa:	e8 f7 19 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012e7af:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e7b5:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e7bb:	74 17                	je     f012e7d4 <test_krealloc_BF+0x16b9>
			panic(
f012e7bd:	83 ec 04             	sub    $0x4,%esp
f012e7c0:	68 60 ba 13 f0       	push   $0xf013ba60
f012e7c5:	68 7a 12 00 00       	push   $0x127a
f012e7ca:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e7cf:	e8 d2 19 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e7d4:	e8 f7 d8 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e7d9:	89 c2                	mov    %eax,%edx
f012e7db:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e7de:	39 c2                	cmp    %eax,%edx
f012e7e0:	74 17                	je     f012e7f9 <test_krealloc_BF+0x16de>
			panic(
f012e7e2:	83 ec 04             	sub    $0x4,%esp
f012e7e5:	68 cc ba 13 f0       	push   $0xf013bacc
f012e7ea:	68 7d 12 00 00       	push   $0x127d
f012e7ef:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e7f4:	e8 ad 19 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");



		//Try to reallocate 4th 1 MB with the same size it should return the same VA
		freeFrames = sys_calculate_free_frames();
f012e7f9:	e8 d2 d8 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e7fe:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[3], 1 * Mega - kilo);
f012e801:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e807:	83 ec 08             	sub    $0x8,%esp
f012e80a:	68 00 fc 0f 00       	push   $0xffc00
f012e80f:	50                   	push   %eax
f012e810:	e8 85 8c fd ff       	call   f010749a <krealloc>
f012e815:	83 c4 10             	add    $0x10,%esp
f012e818:	89 85 d8 fe ff ff    	mov    %eax,-0x128(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e81e:	8b 85 d8 fe ff ff    	mov    -0x128(%ebp),%eax
f012e824:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e829:	77 17                	ja     f012e842 <test_krealloc_BF+0x1727>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e82b:	83 ec 04             	sub    $0x4,%esp
f012e82e:	68 7c b7 13 f0       	push   $0xf013b77c
f012e833:	68 85 12 00 00       	push   $0x1285
f012e838:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e83d:	e8 64 19 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[3])
f012e842:	8b 85 4c fe ff ff    	mov    -0x1b4(%ebp),%eax
f012e848:	3b 85 d8 fe ff ff    	cmp    -0x128(%ebp),%eax
f012e84e:	74 17                	je     f012e867 <test_krealloc_BF+0x174c>
			panic(
f012e850:	83 ec 04             	sub    $0x4,%esp
f012e853:	68 10 bb 13 f0       	push   $0xf013bb10
f012e858:	68 88 12 00 00       	push   $0x1288
f012e85d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e862:	e8 3f 19 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated an address with the same size (it should return same VA)");
		if (freeFrames != sys_calculate_free_frames())
f012e867:	e8 64 d8 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e86c:	89 c2                	mov    %eax,%edx
f012e86e:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012e871:	39 c2                	cmp    %eax,%edx
f012e873:	74 17                	je     f012e88c <test_krealloc_BF+0x1771>
			panic(
f012e875:	83 ec 04             	sub    $0x4,%esp
f012e878:	68 cc ba 13 f0       	push   $0xf013bacc
f012e87d:	68 8b 12 00 00       	push   $0x128b
f012e882:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e887:	e8 1a 19 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong number of frames after krealloc with the same size");
	}
	cprintf("\b\b\b30%");
f012e88c:	83 ec 0c             	sub    $0xc,%esp
f012e88f:	68 ef ac 13 f0       	push   $0xf013acef
f012e894:	e8 94 23 fd ff       	call   f0100c2d <cprintf>
f012e899:	83 c4 10             	add    $0x10,%esp
    {
		//Reallocate 2nd 1 MB to 1 MB + 7 KB
		freeFrames = sys_calculate_free_frames();
f012e89c:	e8 2f d8 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e8a1:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[1], (1 * Mega - kilo) + (7 * kilo));
f012e8a4:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e8aa:	83 ec 08             	sub    $0x8,%esp
f012e8ad:	68 00 18 10 00       	push   $0x101800
f012e8b2:	50                   	push   %eax
f012e8b3:	e8 e2 8b fd ff       	call   f010749a <krealloc>
f012e8b8:	83 c4 10             	add    $0x10,%esp
f012e8bb:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e8be:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e8c1:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e8c6:	77 17                	ja     f012e8df <test_krealloc_BF+0x17c4>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e8c8:	83 ec 04             	sub    $0x4,%esp
f012e8cb:	68 7c b7 13 f0       	push   $0xf013b77c
f012e8d0:	68 93 12 00 00       	push   $0x1293
f012e8d5:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e8da:	e8 c7 18 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[1])
f012e8df:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012e8e5:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e8e8:	74 17                	je     f012e901 <test_krealloc_BF+0x17e6>
			panic(
f012e8ea:	83 ec 04             	sub    $0x4,%esp
f012e8ed:	68 70 bb 13 f0       	push   $0xf013bb70
f012e8f2:	68 96 12 00 00       	push   $0x1296
f012e8f7:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e8fc:	e8 a5 18 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		if (freeFrames - sys_calculate_free_frames() != 2)
f012e901:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e904:	e8 c7 d7 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e909:	29 c3                	sub    %eax,%ebx
f012e90b:	89 d8                	mov    %ebx,%eax
f012e90d:	83 f8 02             	cmp    $0x2,%eax
f012e910:	74 17                	je     f012e929 <test_krealloc_BF+0x180e>
			panic("krealloc: pages in memory are not loaded correctly");
f012e912:	83 ec 04             	sub    $0x4,%esp
f012e915:	68 ec bb 13 f0       	push   $0xf013bbec
f012e91a:	68 98 12 00 00       	push   $0x1298
f012e91f:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e924:	e8 7d 18 fd ff       	call   f01001a6 <_panic>

		//Reallocate 1st 2 MB to 2 MB + 2 MB
		freeFrames = sys_calculate_free_frames();
f012e929:	e8 a2 d7 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e92e:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (4 * Mega - kilo));
f012e931:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e937:	83 ec 08             	sub    $0x8,%esp
f012e93a:	68 00 fc 3f 00       	push   $0x3ffc00
f012e93f:	50                   	push   %eax
f012e940:	e8 55 8b fd ff       	call   f010749a <krealloc>
f012e945:	83 c4 10             	add    $0x10,%esp
f012e948:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e94b:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e94e:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e953:	77 17                	ja     f012e96c <test_krealloc_BF+0x1851>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e955:	83 ec 04             	sub    $0x4,%esp
f012e958:	68 7c b7 13 f0       	push   $0xf013b77c
f012e95d:	68 9e 12 00 00       	push   $0x129e
f012e962:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e967:	e8 3a 18 fd ff       	call   f01001a6 <_panic>
		if (newAddress != ptr_allocations[4])
f012e96c:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e972:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012e975:	74 17                	je     f012e98e <test_krealloc_BF+0x1873>
			panic(
f012e977:	83 ec 04             	sub    $0x4,%esp
f012e97a:	68 70 bb 13 f0       	push   $0xf013bb70
f012e97f:	68 a1 12 00 00       	push   $0x12a1
f012e984:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e989:	e8 18 18 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated a new address while there is a sufficient space after it (it should return same VA)");
		//2 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 512)
f012e98e:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012e991:	e8 3a d7 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e996:	29 c3                	sub    %eax,%ebx
f012e998:	89 d8                	mov    %ebx,%eax
f012e99a:	3d 00 02 00 00       	cmp    $0x200,%eax
f012e99f:	74 17                	je     f012e9b8 <test_krealloc_BF+0x189d>
			panic("krealloc: pages in memory are not loaded correctly");
f012e9a1:	83 ec 04             	sub    $0x4,%esp
f012e9a4:	68 ec bb 13 f0       	push   $0xf013bbec
f012e9a9:	68 a4 12 00 00       	push   $0x12a4
f012e9ae:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012e9b3:	e8 ee 17 fd ff       	call   f01001a6 <_panic>


	}
	cprintf("\b\b\b60%");
f012e9b8:	83 ec 0c             	sub    $0xc,%esp
f012e9bb:	68 34 ad 13 f0       	push   $0xf013ad34
f012e9c0:	e8 68 22 fd ff       	call   f0100c2d <cprintf>
f012e9c5:	83 c4 10             	add    $0x10,%esp
	//Test krealloc: Cut & paste
	{
		//Reallocate 1st 2 MB (already reallocated to 4 MB) to 10 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012e9c8:	e8 03 d7 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012e9cd:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[4], (10 * Mega - kilo));
f012e9d0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012e9d6:	83 ec 08             	sub    $0x8,%esp
f012e9d9:	68 00 fc 9f 00       	push   $0x9ffc00
f012e9de:	50                   	push   %eax
f012e9df:	e8 b6 8a fd ff       	call   f010749a <krealloc>
f012e9e4:	83 c4 10             	add    $0x10,%esp
f012e9e7:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012e9ea:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012e9ed:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012e9f2:	77 17                	ja     f012ea0b <test_krealloc_BF+0x18f0>
			panic("krealloc: Wrong start address for the allocated space... ");
f012e9f4:	83 ec 04             	sub    $0x4,%esp
f012e9f7:	68 7c b7 13 f0       	push   $0xf013b77c
f012e9fc:	68 af 12 00 00       	push   $0x12af
f012ea01:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012ea06:	e8 9b 17 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (11 * Mega))
f012ea0b:	c7 85 d4 fe ff ff 00 	movl   $0x1000,-0x12c(%ebp)
f012ea12:	10 00 00 
f012ea15:	8b 85 d4 fe ff ff    	mov    -0x12c(%ebp),%eax
f012ea1b:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ea20:	89 85 d0 fe ff ff    	mov    %eax,-0x130(%ebp)
f012ea26:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ea2c:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea31:	f7 b5 d4 fe ff ff    	divl   -0x12c(%ebp)
f012ea37:	8b 85 d0 fe ff ff    	mov    -0x130(%ebp),%eax
f012ea3d:	29 d0                	sub    %edx,%eax
f012ea3f:	89 c1                	mov    %eax,%ecx
f012ea41:	c7 85 cc fe ff ff 00 	movl   $0x1000,-0x134(%ebp)
f012ea48:	10 00 00 
f012ea4b:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ea50:	0f b6 d0             	movzbl %al,%edx
f012ea53:	8b 85 cc fe ff ff    	mov    -0x134(%ebp),%eax
f012ea59:	01 d0                	add    %edx,%eax
f012ea5b:	48                   	dec    %eax
f012ea5c:	89 85 c8 fe ff ff    	mov    %eax,-0x138(%ebp)
f012ea62:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012ea68:	ba 00 00 00 00       	mov    $0x0,%edx
f012ea6d:	f7 b5 cc fe ff ff    	divl   -0x134(%ebp)
f012ea73:	8b 85 c8 fe ff ff    	mov    -0x138(%ebp),%eax
f012ea79:	29 d0                	sub    %edx,%eax
f012ea7b:	01 c1                	add    %eax,%ecx
f012ea7d:	c7 85 c4 fe ff ff 00 	movl   $0x1000,-0x13c(%ebp)
f012ea84:	10 00 00 
f012ea87:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ea8c:	0f b6 c0             	movzbl %al,%eax
f012ea8f:	c1 e0 04             	shl    $0x4,%eax
f012ea92:	89 c2                	mov    %eax,%edx
f012ea94:	8b 85 c4 fe ff ff    	mov    -0x13c(%ebp),%eax
f012ea9a:	01 d0                	add    %edx,%eax
f012ea9c:	48                   	dec    %eax
f012ea9d:	89 85 c0 fe ff ff    	mov    %eax,-0x140(%ebp)
f012eaa3:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012eaa9:	ba 00 00 00 00       	mov    $0x0,%edx
f012eaae:	f7 b5 c4 fe ff ff    	divl   -0x13c(%ebp)
f012eab4:	8b 85 c0 fe ff ff    	mov    -0x140(%ebp),%eax
f012eaba:	29 d0                	sub    %edx,%eax
f012eabc:	01 c8                	add    %ecx,%eax
f012eabe:	8d 90 00 40 b0 f6    	lea    -0x94fc000(%eax),%edx
f012eac4:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eac7:	39 c2                	cmp    %eax,%edx
f012eac9:	74 18                	je     f012eae3 <test_krealloc_BF+0x19c8>
			panic(
f012eacb:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eace:	50                   	push   %eax
f012eacf:	68 20 bc 13 f0       	push   $0xf013bc20
f012ead4:	68 b3 12 00 00       	push   $0x12b3
f012ead9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012eade:	e8 c3 16 fd ff       	call   f01001a6 <_panic>
					"krealloc: Wrong start address for reallocated space, NSA = %x\nbbb",
					(uint32 )newAddress);
		if (newAddress == ptr_allocations[4])
f012eae3:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012eae9:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012eaec:	75 17                	jne    f012eb05 <test_krealloc_BF+0x19ea>
			panic(
f012eaee:	83 ec 04             	sub    $0x4,%esp
f012eaf1:	68 64 bc 13 f0       	push   $0xf013bc64
f012eaf6:	68 b6 12 00 00       	push   $0x12b6
f012eafb:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012eb00:	e8 a1 16 fd ff       	call   f01001a6 <_panic>
					"Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
		//6 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 1536)
f012eb05:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012eb08:	e8 c3 d5 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012eb0d:	29 c3                	sub    %eax,%ebx
f012eb0f:	89 d8                	mov    %ebx,%eax
f012eb11:	3d 00 06 00 00       	cmp    $0x600,%eax
f012eb16:	74 17                	je     f012eb2f <test_krealloc_BF+0x1a14>
			panic("krealloc: pages in memory are not loaded correctly");
f012eb18:	83 ec 04             	sub    $0x4,%esp
f012eb1b:	68 ec bb 13 f0       	push   $0xf013bbec
f012eb20:	68 b9 12 00 00       	push   $0x12b9
f012eb25:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012eb2a:	e8 77 16 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[4] = newAddress;
f012eb2f:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eb32:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%ebp)
		//lastIndices[4] = (10 * Mega - kilo) / sizeof(short) - 1;

		//Reallocate 1st 3 MB to 4 MB
		freeFrames = sys_calculate_free_frames();
f012eb38:	e8 93 d5 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012eb3d:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (4 * Mega - kilo));
f012eb40:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012eb46:	83 ec 08             	sub    $0x8,%esp
f012eb49:	68 00 fc 3f 00       	push   $0x3ffc00
f012eb4e:	50                   	push   %eax
f012eb4f:	e8 46 89 fd ff       	call   f010749a <krealloc>
f012eb54:	83 c4 10             	add    $0x10,%esp
f012eb57:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012eb5a:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eb5d:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012eb62:	77 17                	ja     f012eb7b <test_krealloc_BF+0x1a60>
			panic("krealloc: Wrong start address for the allocated space... ");
f012eb64:	83 ec 04             	sub    $0x4,%esp
f012eb67:	68 7c b7 13 f0       	push   $0xf013b77c
f012eb6c:	68 c2 12 00 00       	push   $0x12c2
f012eb71:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012eb76:	e8 2b 16 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012eb7b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012eb81:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012eb84:	75 17                	jne    f012eb9d <test_krealloc_BF+0x1a82>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012eb86:	83 ec 04             	sub    $0x4,%esp
f012eb89:	68 64 bc 13 f0       	push   $0xf013bc64
f012eb8e:	68 c4 12 00 00       	push   $0x12c4
f012eb93:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012eb98:	e8 09 16 fd ff       	call   f01001a6 <_panic>
		if ((uint32)newAddress != ACTUAL_START + 4 * Mega) panic("krealloc: Wrong start address for allocated space");
f012eb9d:	c7 85 bc fe ff ff 00 	movl   $0x1000,-0x144(%ebp)
f012eba4:	10 00 00 
f012eba7:	8b 85 bc fe ff ff    	mov    -0x144(%ebp),%eax
f012ebad:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ebb2:	89 85 b8 fe ff ff    	mov    %eax,-0x148(%ebp)
f012ebb8:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ebbe:	ba 00 00 00 00       	mov    $0x0,%edx
f012ebc3:	f7 b5 bc fe ff ff    	divl   -0x144(%ebp)
f012ebc9:	8b 85 b8 fe ff ff    	mov    -0x148(%ebp),%eax
f012ebcf:	29 d0                	sub    %edx,%eax
f012ebd1:	89 c1                	mov    %eax,%ecx
f012ebd3:	c7 85 b4 fe ff ff 00 	movl   $0x1000,-0x14c(%ebp)
f012ebda:	10 00 00 
f012ebdd:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ebe2:	0f b6 d0             	movzbl %al,%edx
f012ebe5:	8b 85 b4 fe ff ff    	mov    -0x14c(%ebp),%eax
f012ebeb:	01 d0                	add    %edx,%eax
f012ebed:	48                   	dec    %eax
f012ebee:	89 85 b0 fe ff ff    	mov    %eax,-0x150(%ebp)
f012ebf4:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ebfa:	ba 00 00 00 00       	mov    $0x0,%edx
f012ebff:	f7 b5 b4 fe ff ff    	divl   -0x14c(%ebp)
f012ec05:	8b 85 b0 fe ff ff    	mov    -0x150(%ebp),%eax
f012ec0b:	29 d0                	sub    %edx,%eax
f012ec0d:	01 c1                	add    %eax,%ecx
f012ec0f:	c7 85 ac fe ff ff 00 	movl   $0x1000,-0x154(%ebp)
f012ec16:	10 00 00 
f012ec19:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ec1e:	0f b6 c0             	movzbl %al,%eax
f012ec21:	c1 e0 04             	shl    $0x4,%eax
f012ec24:	89 c2                	mov    %eax,%edx
f012ec26:	8b 85 ac fe ff ff    	mov    -0x154(%ebp),%eax
f012ec2c:	01 d0                	add    %edx,%eax
f012ec2e:	48                   	dec    %eax
f012ec2f:	89 85 a8 fe ff ff    	mov    %eax,-0x158(%ebp)
f012ec35:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ec3b:	ba 00 00 00 00       	mov    $0x0,%edx
f012ec40:	f7 b5 ac fe ff ff    	divl   -0x154(%ebp)
f012ec46:	8b 85 a8 fe ff ff    	mov    -0x158(%ebp),%eax
f012ec4c:	29 d0                	sub    %edx,%eax
f012ec4e:	01 c8                	add    %ecx,%eax
f012ec50:	8d 90 00 40 40 f6    	lea    -0x9bfc000(%eax),%edx
f012ec56:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ec59:	39 c2                	cmp    %eax,%edx
f012ec5b:	74 17                	je     f012ec74 <test_krealloc_BF+0x1b59>
f012ec5d:	83 ec 04             	sub    $0x4,%esp
f012ec60:	68 b8 b7 13 f0       	push   $0xf013b7b8
f012ec65:	68 c5 12 00 00       	push   $0x12c5
f012ec6a:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012ec6f:	e8 32 15 fd ff       	call   f01001a6 <_panic>

		//1 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != 256)
f012ec74:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ec77:	e8 54 d4 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012ec7c:	29 c3                	sub    %eax,%ebx
f012ec7e:	89 d8                	mov    %ebx,%eax
f012ec80:	3d 00 01 00 00       	cmp    $0x100,%eax
f012ec85:	74 17                	je     f012ec9e <test_krealloc_BF+0x1b83>
			panic("krealloc: pages in memory are not loaded correctly");
f012ec87:	83 ec 04             	sub    $0x4,%esp
f012ec8a:	68 ec bb 13 f0       	push   $0xf013bbec
f012ec8f:	68 c9 12 00 00       	push   $0x12c9
f012ec94:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012ec99:	e8 08 15 fd ff       	call   f01001a6 <_panic>
		ptr_allocations[6] = newAddress;
f012ec9e:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eca1:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)
		//Reallocate 1st 3 MB (already reallocated to 4 MB) to 20 MB. It should return new VA
		freeFrames = sys_calculate_free_frames();
f012eca7:	e8 24 d4 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012ecac:	89 45 b8             	mov    %eax,-0x48(%ebp)
		newAddress = krealloc(ptr_allocations[6], (20 * Mega - kilo));
f012ecaf:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ecb5:	83 ec 08             	sub    $0x8,%esp
f012ecb8:	68 00 fc 3f 01       	push   $0x13ffc00
f012ecbd:	50                   	push   %eax
f012ecbe:	e8 d7 87 fd ff       	call   f010749a <krealloc>
f012ecc3:	83 c4 10             	add    $0x10,%esp
f012ecc6:	89 45 bc             	mov    %eax,-0x44(%ebp)
		if ((uint32) newAddress < (KERNEL_HEAP_START))
f012ecc9:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012eccc:	3d ff ff ff f5       	cmp    $0xf5ffffff,%eax
f012ecd1:	77 17                	ja     f012ecea <test_krealloc_BF+0x1bcf>
			panic("krealloc: Wrong start address for the allocated space... ");
f012ecd3:	83 ec 04             	sub    $0x4,%esp
f012ecd6:	68 7c b7 13 f0       	push   $0xf013b77c
f012ecdb:	68 cf 12 00 00       	push   $0x12cf
f012ece0:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012ece5:	e8 bc 14 fd ff       	call   f01001a6 <_panic>
		if (newAddress == ptr_allocations[6])
f012ecea:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ecf0:	3b 45 bc             	cmp    -0x44(%ebp),%eax
f012ecf3:	75 17                	jne    f012ed0c <test_krealloc_BF+0x1bf1>
			panic("Wrong allocation: krealloc reallocated at the same address while there is NO sufficient space after it (it should return new VA)");
f012ecf5:	83 ec 04             	sub    $0x4,%esp
f012ecf8:	68 64 bc 13 f0       	push   $0xf013bc64
f012ecfd:	68 d1 12 00 00       	push   $0x12d1
f012ed02:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012ed07:	e8 9a 14 fd ff       	call   f01001a6 <_panic>
		if ((uint32) newAddress != ACTUAL_START + (21 * Mega))
f012ed0c:	c7 85 a4 fe ff ff 00 	movl   $0x1000,-0x15c(%ebp)
f012ed13:	10 00 00 
f012ed16:	8b 85 a4 fe ff ff    	mov    -0x15c(%ebp),%eax
f012ed1c:	05 ef ff 09 00       	add    $0x9ffef,%eax
f012ed21:	89 85 a0 fe ff ff    	mov    %eax,-0x160(%ebp)
f012ed27:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012ed2d:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed32:	f7 b5 a4 fe ff ff    	divl   -0x15c(%ebp)
f012ed38:	8b 85 a0 fe ff ff    	mov    -0x160(%ebp),%eax
f012ed3e:	29 d0                	sub    %edx,%eax
f012ed40:	89 c1                	mov    %eax,%ecx
f012ed42:	c7 85 9c fe ff ff 00 	movl   $0x1000,-0x164(%ebp)
f012ed49:	10 00 00 
f012ed4c:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ed51:	0f b6 d0             	movzbl %al,%edx
f012ed54:	8b 85 9c fe ff ff    	mov    -0x164(%ebp),%eax
f012ed5a:	01 d0                	add    %edx,%eax
f012ed5c:	48                   	dec    %eax
f012ed5d:	89 85 98 fe ff ff    	mov    %eax,-0x168(%ebp)
f012ed63:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012ed69:	ba 00 00 00 00       	mov    $0x0,%edx
f012ed6e:	f7 b5 9c fe ff ff    	divl   -0x164(%ebp)
f012ed74:	8b 85 98 fe ff ff    	mov    -0x168(%ebp),%eax
f012ed7a:	29 d0                	sub    %edx,%eax
f012ed7c:	01 c1                	add    %eax,%ecx
f012ed7e:	c7 85 94 fe ff ff 00 	movl   $0x1000,-0x16c(%ebp)
f012ed85:	10 00 00 
f012ed88:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012ed8d:	0f b6 c0             	movzbl %al,%eax
f012ed90:	c1 e0 04             	shl    $0x4,%eax
f012ed93:	89 c2                	mov    %eax,%edx
f012ed95:	8b 85 94 fe ff ff    	mov    -0x16c(%ebp),%eax
f012ed9b:	01 d0                	add    %edx,%eax
f012ed9d:	48                   	dec    %eax
f012ed9e:	89 85 90 fe ff ff    	mov    %eax,-0x170(%ebp)
f012eda4:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012edaa:	ba 00 00 00 00       	mov    $0x0,%edx
f012edaf:	f7 b5 94 fe ff ff    	divl   -0x16c(%ebp)
f012edb5:	8b 85 90 fe ff ff    	mov    -0x170(%ebp),%eax
f012edbb:	29 d0                	sub    %edx,%eax
f012edbd:	01 c8                	add    %ecx,%eax
f012edbf:	8d 90 00 40 50 f7    	lea    -0x8afc000(%eax),%edx
f012edc5:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012edc8:	39 c2                	cmp    %eax,%edx
f012edca:	74 17                	je     f012ede3 <test_krealloc_BF+0x1cc8>
			panic("krealloc: Wrong start address for reallocated space\n");
f012edcc:	83 ec 04             	sub    $0x4,%esp
f012edcf:	68 84 bd 13 f0       	push   $0xf013bd84
f012edd4:	68 d3 12 00 00       	push   $0x12d3
f012edd9:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012edde:	e8 c3 13 fd ff       	call   f01001a6 <_panic>
		//3 MB only for the new size
		if (freeFrames - sys_calculate_free_frames() != (16 * Mega) / PAGE_SIZE)
f012ede3:	8b 5d b8             	mov    -0x48(%ebp),%ebx
f012ede6:	e8 e5 d2 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012edeb:	29 c3                	sub    %eax,%ebx
f012eded:	89 d8                	mov    %ebx,%eax
f012edef:	3d 00 10 00 00       	cmp    $0x1000,%eax
f012edf4:	74 17                	je     f012ee0d <test_krealloc_BF+0x1cf2>
			panic("krealloc: pages in memory are not loaded correctly");
f012edf6:	83 ec 04             	sub    $0x4,%esp
f012edf9:	68 ec bb 13 f0       	push   $0xf013bbec
f012edfe:	68 d6 12 00 00       	push   $0x12d6
f012ee03:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012ee08:	e8 99 13 fd ff       	call   f01001a6 <_panic>

		ptr_allocations[6] = newAddress;
f012ee0d:	8b 45 bc             	mov    -0x44(%ebp),%eax
f012ee10:	89 85 58 fe ff ff    	mov    %eax,-0x1a8(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
f012ee16:	8b 85 44 fe ff ff    	mov    -0x1bc(%ebp),%eax
f012ee1c:	89 85 ec fe ff ff    	mov    %eax,-0x114(%ebp)
		int i;
		sums[0] = 0;
f012ee22:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012ee29:	00 00 00 
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ee2c:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012ee33:	eb 21                	jmp    f012ee56 <test_krealloc_BF+0x1d3b>
			sums[0] += ptr[i];
f012ee35:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012ee3b:	8b 4d d8             	mov    -0x28(%ebp),%ecx
f012ee3e:	8b 85 ec fe ff ff    	mov    -0x114(%ebp),%eax
f012ee44:	01 c8                	add    %ecx,%eax
f012ee46:	8a 00                	mov    (%eax),%al
f012ee48:	0f be c0             	movsbl %al,%eax
f012ee4b:	01 d0                	add    %edx,%eax
f012ee4d:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 2nd 1 MB
		ptr = (char*) ptr_allocations[1];
		int i;
		sums[0] = 0;
		for (i = 0; i <= lastIndices[1]; ++i) {
f012ee53:	ff 45 d8             	incl   -0x28(%ebp)
f012ee56:	8b 85 f4 fd ff ff    	mov    -0x20c(%ebp),%eax
f012ee5c:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ee5f:	7d d4                	jge    f012ee35 <test_krealloc_BF+0x1d1a>
			sums[0] += ptr[i];

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[1] + 1) * 2)
f012ee61:	8b 85 a0 fd ff ff    	mov    -0x260(%ebp),%eax
f012ee67:	8b 95 f4 fd ff ff    	mov    -0x20c(%ebp),%edx
f012ee6d:	42                   	inc    %edx
f012ee6e:	01 d2                	add    %edx,%edx
f012ee70:	39 d0                	cmp    %edx,%eax
f012ee72:	74 17                	je     f012ee8b <test_krealloc_BF+0x1d70>
			panic("krealloc: invalid read after re-allocations");
f012ee74:	83 ec 04             	sub    $0x4,%esp
f012ee77:	68 1c bd 13 f0       	push   $0xf013bd1c
f012ee7c:	68 e4 12 00 00       	push   $0x12e4
f012ee81:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012ee86:	e8 1b 13 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 3 MB
		structArr = (struct MyStruct*) ptr_allocations[6];
f012ee8b:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012ee91:	89 85 e0 fe ff ff    	mov    %eax,-0x120(%ebp)

		sums[0] = 0;
f012ee97:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012ee9e:	00 00 00 
		sums[1] = 0;
f012eea1:	c7 85 a4 fd ff ff 00 	movl   $0x0,-0x25c(%ebp)
f012eea8:	00 00 00 
		sums[2] = 0;
f012eeab:	c7 85 a8 fd ff ff 00 	movl   $0x0,-0x258(%ebp)
f012eeb2:	00 00 00 
		for (i = 0; i <= lastIndices[6]; ++i) {
f012eeb5:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012eebc:	eb 70                	jmp    f012ef2e <test_krealloc_BF+0x1e13>
			sums[0] += structArr[i].a;
f012eebe:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012eec4:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012eec7:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eece:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eed4:	01 c8                	add    %ecx,%eax
f012eed6:	8a 00                	mov    (%eax),%al
f012eed8:	0f be c0             	movsbl %al,%eax
f012eedb:	01 d0                	add    %edx,%eax
f012eedd:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)
			sums[1] += structArr[i].b;
f012eee3:	8b 95 a4 fd ff ff    	mov    -0x25c(%ebp),%edx
f012eee9:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012eeec:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012eef3:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012eef9:	01 c8                	add    %ecx,%eax
f012eefb:	66 8b 40 02          	mov    0x2(%eax),%ax
f012eeff:	98                   	cwtl   
f012ef00:	01 d0                	add    %edx,%eax
f012ef02:	89 85 a4 fd ff ff    	mov    %eax,-0x25c(%ebp)
			sums[2] += structArr[i].c;
f012ef08:	8b 95 a8 fd ff ff    	mov    -0x258(%ebp),%edx
f012ef0e:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012ef11:	8d 0c c5 00 00 00 00 	lea    0x0(,%eax,8),%ecx
f012ef18:	8b 85 e0 fe ff ff    	mov    -0x120(%ebp),%eax
f012ef1e:	01 c8                	add    %ecx,%eax
f012ef20:	8b 40 04             	mov    0x4(%eax),%eax
f012ef23:	01 d0                	add    %edx,%eax
f012ef25:	89 85 a8 fd ff ff    	mov    %eax,-0x258(%ebp)
		structArr = (struct MyStruct*) ptr_allocations[6];

		sums[0] = 0;
		sums[1] = 0;
		sums[2] = 0;
		for (i = 0; i <= lastIndices[6]; ++i) {
f012ef2b:	ff 45 d8             	incl   -0x28(%ebp)
f012ef2e:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ef34:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012ef37:	7d 85                	jge    f012eebe <test_krealloc_BF+0x1da3>
			sums[1] += structArr[i].b;
			sums[2] += structArr[i].c;

		}
		//cprintf("sum for 2nd 1 MB = %d LIM1 = %d\n", sums[0], (lastIndices[1] - 1));
		if (sums[0] != (lastIndices[6] + 1) * 7
f012ef39:	8b 8d a0 fd ff ff    	mov    -0x260(%ebp),%ecx
f012ef3f:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ef45:	8d 50 01             	lea    0x1(%eax),%edx
f012ef48:	89 d0                	mov    %edx,%eax
f012ef4a:	01 c0                	add    %eax,%eax
f012ef4c:	01 d0                	add    %edx,%eax
f012ef4e:	01 c0                	add    %eax,%eax
f012ef50:	01 d0                	add    %edx,%eax
f012ef52:	39 c1                	cmp    %eax,%ecx
f012ef54:	75 3a                	jne    f012ef90 <test_krealloc_BF+0x1e75>
				|| sums[1] != (lastIndices[6] + 1) * 7
f012ef56:	8b 8d a4 fd ff ff    	mov    -0x25c(%ebp),%ecx
f012ef5c:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ef62:	8d 50 01             	lea    0x1(%eax),%edx
f012ef65:	89 d0                	mov    %edx,%eax
f012ef67:	01 c0                	add    %eax,%eax
f012ef69:	01 d0                	add    %edx,%eax
f012ef6b:	01 c0                	add    %eax,%eax
f012ef6d:	01 d0                	add    %edx,%eax
f012ef6f:	39 c1                	cmp    %eax,%ecx
f012ef71:	75 1d                	jne    f012ef90 <test_krealloc_BF+0x1e75>
				|| sums[2] != (lastIndices[6] + 1) * 7)
f012ef73:	8b 8d a8 fd ff ff    	mov    -0x258(%ebp),%ecx
f012ef79:	8b 85 08 fe ff ff    	mov    -0x1f8(%ebp),%eax
f012ef7f:	8d 50 01             	lea    0x1(%eax),%edx
f012ef82:	89 d0                	mov    %edx,%eax
f012ef84:	01 c0                	add    %eax,%eax
f012ef86:	01 d0                	add    %edx,%eax
f012ef88:	01 c0                	add    %eax,%eax
f012ef8a:	01 d0                	add    %edx,%eax
f012ef8c:	39 c1                	cmp    %eax,%ecx
f012ef8e:	74 17                	je     f012efa7 <test_krealloc_BF+0x1e8c>
			panic("krealloc: invalid read after re-allocations");
f012ef90:	83 ec 04             	sub    $0x4,%esp
f012ef93:	68 1c bd 13 f0       	push   $0xf013bd1c
f012ef98:	68 f6 12 00 00       	push   $0x12f6
f012ef9d:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012efa2:	e8 ff 11 fd ff       	call   f01001a6 <_panic>

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];
f012efa7:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012efad:	89 85 e4 fe ff ff    	mov    %eax,-0x11c(%ebp)

		sums[0] = 0;
f012efb3:	c7 85 a0 fd ff ff 00 	movl   $0x0,-0x260(%ebp)
f012efba:	00 00 00 
		for (i = 0; i <= lastIndices[4]; ++i) {
f012efbd:	c7 45 d8 00 00 00 00 	movl   $0x0,-0x28(%ebp)
f012efc4:	eb 24                	jmp    f012efea <test_krealloc_BF+0x1ecf>
			sums[0] += shortArr[i];
f012efc6:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012efcc:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012efcf:	01 c0                	add    %eax,%eax
f012efd1:	89 c1                	mov    %eax,%ecx
f012efd3:	8b 85 e4 fe ff ff    	mov    -0x11c(%ebp),%eax
f012efd9:	01 c8                	add    %ecx,%eax
f012efdb:	66 8b 00             	mov    (%eax),%ax
f012efde:	98                   	cwtl   
f012efdf:	01 d0                	add    %edx,%eax
f012efe1:	89 85 a0 fd ff ff    	mov    %eax,-0x260(%ebp)

		//Test read write access for the new allocated size of 1st 2 MB
		shortArr = (short*) ptr_allocations[4];

		sums[0] = 0;
		for (i = 0; i <= lastIndices[4]; ++i) {
f012efe7:	ff 45 d8             	incl   -0x28(%ebp)
f012efea:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012eff0:	3b 45 d8             	cmp    -0x28(%ebp),%eax
f012eff3:	7d d1                	jge    f012efc6 <test_krealloc_BF+0x1eab>
			sums[0] += shortArr[i];
		}
		if (sums[0] != (lastIndices[4] + 1) * 5)
f012eff5:	8b 95 a0 fd ff ff    	mov    -0x260(%ebp),%edx
f012effb:	8b 85 00 fe ff ff    	mov    -0x200(%ebp),%eax
f012f001:	8d 48 01             	lea    0x1(%eax),%ecx
f012f004:	89 c8                	mov    %ecx,%eax
f012f006:	c1 e0 02             	shl    $0x2,%eax
f012f009:	01 c8                	add    %ecx,%eax
f012f00b:	39 c2                	cmp    %eax,%edx
f012f00d:	74 17                	je     f012f026 <test_krealloc_BF+0x1f0b>
			panic("krealloc: invalid read after re-allocations");
f012f00f:	83 ec 04             	sub    $0x4,%esp
f012f012:	68 1c bd 13 f0       	push   $0xf013bd1c
f012f017:	68 00 13 00 00       	push   $0x1300
f012f01c:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012f021:	e8 80 11 fd ff       	call   f01001a6 <_panic>

		//Test krealloc with size = 0 after krealloc 1st 3 MB to 20 MB
		freeFrames = sys_calculate_free_frames();
f012f026:	e8 a5 d0 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012f02b:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f02e:	e8 61 4c fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012f033:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		krealloc(ptr_allocations[6], 0);
f012f039:	8b 85 58 fe ff ff    	mov    -0x1a8(%ebp),%eax
f012f03f:	83 ec 08             	sub    $0x8,%esp
f012f042:	6a 00                	push   $0x0
f012f044:	50                   	push   %eax
f012f045:	e8 50 84 fd ff       	call   f010749a <krealloc>
f012f04a:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f04d:	e8 42 4c fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012f052:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f058:	74 17                	je     f012f071 <test_krealloc_BF+0x1f56>
			panic(
f012f05a:	83 ec 04             	sub    $0x4,%esp
f012f05d:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012f062:	68 08 13 00 00       	push   $0x1308
f012f067:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012f06c:	e8 35 11 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 20 * Mega / PAGE_SIZE)
f012f071:	e8 5a d0 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012f076:	89 c2                	mov    %eax,%edx
f012f078:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f07b:	29 c2                	sub    %eax,%edx
f012f07d:	89 d0                	mov    %edx,%eax
f012f07f:	3d 00 14 00 00       	cmp    $0x1400,%eax
f012f084:	74 17                	je     f012f09d <test_krealloc_BF+0x1f82>
			panic("krealloc: pages in memory are not freed correctly");
f012f086:	83 ec 04             	sub    $0x4,%esp
f012f089:	68 ac b9 13 f0       	push   $0xf013b9ac
f012f08e:	68 0a 13 00 00       	push   $0x130a
f012f093:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012f098:	e8 09 11 fd ff       	call   f01001a6 <_panic>

		//Test kfree after krealloc 1st 2 MB to 10 MB
		freeFrames = sys_calculate_free_frames();
f012f09d:	e8 2e d0 fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012f0a2:	89 45 b8             	mov    %eax,-0x48(%ebp)
		freeDiskFrames = pf_calculate_free_frames();
f012f0a5:	e8 ea 4b fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012f0aa:	89 85 dc fe ff ff    	mov    %eax,-0x124(%ebp)
		kfree(ptr_allocations[4]);
f012f0b0:	8b 85 50 fe ff ff    	mov    -0x1b0(%ebp),%eax
f012f0b6:	83 ec 0c             	sub    $0xc,%esp
f012f0b9:	50                   	push   %eax
f012f0ba:	e8 3f 83 fd ff       	call   f01073fe <kfree>
f012f0bf:	83 c4 10             	add    $0x10,%esp
		if ((freeDiskFrames - pf_calculate_free_frames()) != 0)
f012f0c2:	e8 cd 4b fd ff       	call   f0103c94 <pf_calculate_free_frames>
f012f0c7:	3b 85 dc fe ff ff    	cmp    -0x124(%ebp),%eax
f012f0cd:	74 17                	je     f012f0e6 <test_krealloc_BF+0x1fcb>
			panic(
f012f0cf:	83 ec 04             	sub    $0x4,%esp
f012f0d2:	68 f0 a4 13 f0       	push   $0xf013a4f0
f012f0d7:	68 12 13 00 00       	push   $0x1312
f012f0dc:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012f0e1:	e8 c0 10 fd ff       	call   f01001a6 <_panic>
					"Page file is changed while it's not expected to. (pages are wrongly allocated/de-allocated in PageFile)");
		if ((sys_calculate_free_frames() - freeFrames) != 10 * Mega / PAGE_SIZE)
f012f0e6:	e8 e5 cf fd ff       	call   f010c0d0 <sys_calculate_free_frames>
f012f0eb:	89 c2                	mov    %eax,%edx
f012f0ed:	8b 45 b8             	mov    -0x48(%ebp),%eax
f012f0f0:	29 c2                	sub    %eax,%edx
f012f0f2:	89 d0                	mov    %edx,%eax
f012f0f4:	3d 00 0a 00 00       	cmp    $0xa00,%eax
f012f0f9:	74 17                	je     f012f112 <test_krealloc_BF+0x1ff7>
			panic("krealloc: pages in memory are not freed correctly");
f012f0fb:	83 ec 04             	sub    $0x4,%esp
f012f0fe:	68 ac b9 13 f0       	push   $0xf013b9ac
f012f103:	68 14 13 00 00       	push   $0x1314
f012f108:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012f10d:	e8 94 10 fd ff       	call   f01001a6 <_panic>

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f112:	c7 45 d0 00 00 00 f6 	movl   $0xf6000000,-0x30(%ebp)
f012f119:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)
f012f120:	eb 48                	jmp    f012f16a <test_krealloc_BF+0x204f>
			PTSIZE)
			{
				uint32 *ptr_table;
				get_page_table(ptr_page_directory,  (uint32) va,
f012f122:	8b 55 d0             	mov    -0x30(%ebp),%edx
f012f125:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012f12a:	83 ec 04             	sub    $0x4,%esp
f012f12d:	8d 8d 98 fd ff ff    	lea    -0x268(%ebp),%ecx
f012f133:	51                   	push   %ecx
f012f134:	52                   	push   %edx
f012f135:	50                   	push   %eax
f012f136:	e8 36 78 fd ff       	call   f0106971 <get_page_table>
f012f13b:	83 c4 10             	add    $0x10,%esp
						&ptr_table);
				if (ptr_table == NULL) {
f012f13e:	8b 85 98 fd ff ff    	mov    -0x268(%ebp),%eax
f012f144:	85 c0                	test   %eax,%eax
f012f146:	75 17                	jne    f012f15f <test_krealloc_BF+0x2044>
					panic(
f012f148:	83 ec 04             	sub    $0x4,%esp
f012f14b:	68 d8 ad 13 f0       	push   $0xf013add8
f012f150:	68 21 13 00 00       	push   $0x1321
f012f155:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012f15a:	e8 47 10 fd ff       	call   f01001a6 <_panic>
			panic("krealloc: pages in memory are not freed correctly");

		//check tables	[15%]
		{
			long long va;
			for (va = KERNEL_HEAP_START; va < (long long) KERNEL_HEAP_MAX; va +=
f012f15f:	81 45 d0 00 00 40 00 	addl   $0x400000,-0x30(%ebp)
f012f166:	83 55 d4 00          	adcl   $0x0,-0x2c(%ebp)
f012f16a:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f16e:	78 b2                	js     f012f122 <test_krealloc_BF+0x2007>
f012f170:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
f012f174:	7f 09                	jg     f012f17f <test_krealloc_BF+0x2064>
f012f176:	81 7d d0 ff ef ff ff 	cmpl   $0xffffefff,-0x30(%ebp)
f012f17d:	76 a3                	jbe    f012f122 <test_krealloc_BF+0x2007>
			}
		}

	}

	cprintf("\b\b\b100%\n");
f012f17f:	83 ec 0c             	sub    $0xc,%esp
f012f182:	68 ba a6 13 f0       	push   $0xf013a6ba
f012f187:	e8 a1 1a fd ff       	call   f0100c2d <cprintf>
f012f18c:	83 c4 10             	add    $0x10,%esp

	cprintf("\nCongratulations!! test krealloc BF completed successfully.\n");
f012f18f:	83 ec 0c             	sub    $0xc,%esp
f012f192:	68 bc bd 13 f0       	push   $0xf013bdbc
f012f197:	e8 91 1a fd ff       	call   f0100c2d <cprintf>
f012f19c:	83 c4 10             	add    $0x10,%esp
	return 0;
f012f19f:	b8 00 00 00 00       	mov    $0x0,%eax
}
f012f1a4:	8d 65 f8             	lea    -0x8(%ebp),%esp
f012f1a7:	5b                   	pop    %ebx
f012f1a8:	5f                   	pop    %edi
f012f1a9:	5d                   	pop    %ebp
f012f1aa:	c3                   	ret    

f012f1ab <test_initialize_dyn_block_system>:

//2022
int test_initialize_dyn_block_system(int freeFrames_before, int freeDiskFrames_before, int freeFrames_after, int freeDiskFrames_after)
{
f012f1ab:	55                   	push   %ebp
f012f1ac:	89 e5                	mov    %esp,%ebp
f012f1ae:	83 ec 08             	sub    $0x8,%esp
	if(USE_KHEAP != 1)
		panic("USE_KHEAP = 0 & it shall be 1. Go to 'inc/memlayout.h' and set USE_KHEAP by 1. Then, repeat the test again.");
f012f1b1:	83 ec 04             	sub    $0x4,%esp
f012f1b4:	68 fc bd 13 f0       	push   $0xf013bdfc
f012f1b9:	68 32 13 00 00       	push   $0x1332
f012f1be:	68 d6 a4 13 f0       	push   $0xf013a4d6
f012f1c3:	e8 de 0f fd ff       	call   f01001a6 <_panic>

f012f1c8 <nearest_pow2_ceil>:
#include <kern/cpu/sched.h>
#include <kern/disk/pagefile_manager.h>
#include <kern/mem/memory_manager.h>
#include "../cons/console.h"

inline unsigned int nearest_pow2_ceil(unsigned int x) {
f012f1c8:	55                   	push   %ebp
f012f1c9:	89 e5                	mov    %esp,%ebp
f012f1cb:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012f1ce:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f1d2:	77 07                	ja     f012f1db <nearest_pow2_ceil+0x13>
f012f1d4:	b8 01 00 00 00       	mov    $0x1,%eax
f012f1d9:	eb 20                	jmp    f012f1fb <nearest_pow2_ceil+0x33>
    int power = 2;
f012f1db:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012f1e2:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012f1e5:	eb 08                	jmp    f012f1ef <nearest_pow2_ceil+0x27>
    	power <<= 1;
f012f1e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f012f1ea:	01 c0                	add    %eax,%eax
f012f1ec:	89 45 fc             	mov    %eax,-0x4(%ebp)

inline unsigned int nearest_pow2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    int power = 2;
    x--;
    while (x >>= 1) {
f012f1ef:	d1 6d 08             	shrl   0x8(%ebp)
f012f1f2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f1f6:	75 ef                	jne    f012f1e7 <nearest_pow2_ceil+0x1f>
    	power <<= 1;
    }
    return power;
f012f1f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f1fb:	c9                   	leave  
f012f1fc:	c3                   	ret    

f012f1fd <log2_ceil>:
inline unsigned int log2_ceil(unsigned int x) {
f012f1fd:	55                   	push   %ebp
f012f1fe:	89 e5                	mov    %esp,%ebp
f012f200:	83 ec 10             	sub    $0x10,%esp
    if (x <= 1) return 1;
f012f203:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f207:	77 07                	ja     f012f210 <log2_ceil+0x13>
f012f209:	b8 01 00 00 00       	mov    $0x1,%eax
f012f20e:	eb 1b                	jmp    f012f22b <log2_ceil+0x2e>
    //int power = 2;
    int bits_cnt = 2 ;
f012f210:	c7 45 fc 02 00 00 00 	movl   $0x2,-0x4(%ebp)
    x--;
f012f217:	ff 4d 08             	decl   0x8(%ebp)
    while (x >>= 1) {
f012f21a:	eb 03                	jmp    f012f21f <log2_ceil+0x22>
    	//power <<= 1;
    	bits_cnt++ ;
f012f21c:	ff 45 fc             	incl   -0x4(%ebp)
inline unsigned int log2_ceil(unsigned int x) {
    if (x <= 1) return 1;
    //int power = 2;
    int bits_cnt = 2 ;
    x--;
    while (x >>= 1) {
f012f21f:	d1 6d 08             	shrl   0x8(%ebp)
f012f222:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f012f226:	75 f4                	jne    f012f21c <log2_ceil+0x1f>
    	//power <<= 1;
    	bits_cnt++ ;
    }
    return bits_cnt;
f012f228:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f012f22b:	c9                   	leave  
f012f22c:	c3                   	ret    

f012f22d <detect_loop_in_FrameInfo_list>:
void detect_loop_in_FrameInfo_list(struct FrameInfo_List* fi_list)
{
f012f22d:	55                   	push   %ebp
f012f22e:	89 e5                	mov    %esp,%ebp
f012f230:	83 ec 18             	sub    $0x18,%esp
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
f012f233:	8b 45 08             	mov    0x8(%ebp),%eax
f012f236:	8b 00                	mov    (%eax),%eax
f012f238:	89 45 f4             	mov    %eax,-0xc(%ebp)
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);
f012f23b:	8b 45 08             	mov    0x8(%ebp),%eax
f012f23e:	8b 00                	mov    (%eax),%eax
f012f240:	89 45 f0             	mov    %eax,-0x10(%ebp)


	while (slowPtr && fastPtr) {
f012f243:	eb 52                	jmp    f012f297 <detect_loop_in_FrameInfo_list+0x6a>
		fastPtr = LIST_NEXT(fastPtr); // advance the fast pointer
f012f245:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f248:	8b 00                	mov    (%eax),%eax
f012f24a:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) // and check if its equal to the slow pointer
f012f24d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f250:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f253:	75 12                	jne    f012f267 <detect_loop_in_FrameInfo_list+0x3a>
		{
			cprintf("loop detected in modiflist\n");
f012f255:	83 ec 0c             	sub    $0xc,%esp
f012f258:	68 68 be 13 f0       	push   $0xf013be68
f012f25d:	e8 cb 19 fd ff       	call   f0100c2d <cprintf>
f012f262:	83 c4 10             	add    $0x10,%esp
			break;
f012f265:	eb 3f                	jmp    f012f2a6 <detect_loop_in_FrameInfo_list+0x79>
		}

		if (fastPtr == NULL) {
f012f267:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f26b:	74 38                	je     f012f2a5 <detect_loop_in_FrameInfo_list+0x78>
			break; // since fastPtr is NULL we reached the tail
		}

		fastPtr = LIST_NEXT(fastPtr); //advance and check again
f012f26d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f270:	8b 00                	mov    (%eax),%eax
f012f272:	89 45 f0             	mov    %eax,-0x10(%ebp)
		if (fastPtr == slowPtr) {
f012f275:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f278:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f27b:	75 12                	jne    f012f28f <detect_loop_in_FrameInfo_list+0x62>
			cprintf("loop detected in list\n");
f012f27d:	83 ec 0c             	sub    $0xc,%esp
f012f280:	68 84 be 13 f0       	push   $0xf013be84
f012f285:	e8 a3 19 fd ff       	call   f0100c2d <cprintf>
f012f28a:	83 c4 10             	add    $0x10,%esp
			break;
f012f28d:	eb 17                	jmp    f012f2a6 <detect_loop_in_FrameInfo_list+0x79>
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
f012f28f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f292:	8b 00                	mov    (%eax),%eax
f012f294:	89 45 f4             	mov    %eax,-0xc(%ebp)
{
	struct  FrameInfo * slowPtr = LIST_FIRST(fi_list);
	struct  FrameInfo * fastPtr = LIST_FIRST(fi_list);


	while (slowPtr && fastPtr) {
f012f297:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f012f29b:	74 09                	je     f012f2a6 <detect_loop_in_FrameInfo_list+0x79>
f012f29d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f012f2a1:	75 a2                	jne    f012f245 <detect_loop_in_FrameInfo_list+0x18>
f012f2a3:	eb 01                	jmp    f012f2a6 <detect_loop_in_FrameInfo_list+0x79>
			cprintf("loop detected in modiflist\n");
			break;
		}

		if (fastPtr == NULL) {
			break; // since fastPtr is NULL we reached the tail
f012f2a5:	90                   	nop
			break;
		}

		slowPtr = LIST_NEXT(slowPtr); // advance the slow pointer only once
	}
	cprintf("finished  loop detection\n");
f012f2a6:	83 ec 0c             	sub    $0xc,%esp
f012f2a9:	68 9b be 13 f0       	push   $0xf013be9b
f012f2ae:	e8 7a 19 fd ff       	call   f0100c2d <cprintf>
f012f2b3:	83 c4 10             	add    $0x10,%esp
}
f012f2b6:	90                   	nop
f012f2b7:	c9                   	leave  
f012f2b8:	c3                   	ret    

f012f2b9 <scarce_memory>:

void scarce_memory()
{
f012f2b9:	55                   	push   %ebp
f012f2ba:	89 e5                	mov    %esp,%ebp
f012f2bc:	83 ec 28             	sub    $0x28,%esp
	uint32 total_size_tobe_allocated = ((100 - memory_scarce_threshold_percentage)*number_of_frames)/100;
f012f2bf:	a1 60 60 6e f0       	mov    0xf06e6060,%eax
f012f2c4:	ba 64 00 00 00       	mov    $0x64,%edx
f012f2c9:	29 c2                	sub    %eax,%edx
f012f2cb:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f012f2d0:	0f af c2             	imul   %edx,%eax
f012f2d3:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f2d8:	f7 e2                	mul    %edx
f012f2da:	89 d0                	mov    %edx,%eax
f012f2dc:	c1 e8 05             	shr    $0x5,%eax
f012f2df:	89 45 f4             	mov    %eax,-0xc(%ebp)
//	cprintf("total_size_tobe_allocated %d\n", number_of_frames);
	if (((100 - memory_scarce_threshold_percentage)*number_of_frames) % 100 > 0)
f012f2e2:	a1 60 60 6e f0       	mov    0xf06e6060,%eax
f012f2e7:	ba 64 00 00 00       	mov    $0x64,%edx
f012f2ec:	29 c2                	sub    %eax,%edx
f012f2ee:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f012f2f3:	89 d1                	mov    %edx,%ecx
f012f2f5:	0f af c8             	imul   %eax,%ecx
f012f2f8:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f2fd:	f7 e1                	mul    %ecx
f012f2ff:	c1 ea 05             	shr    $0x5,%edx
f012f302:	89 d0                	mov    %edx,%eax
f012f304:	c1 e0 02             	shl    $0x2,%eax
f012f307:	01 d0                	add    %edx,%eax
f012f309:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f310:	01 d0                	add    %edx,%eax
f012f312:	c1 e0 02             	shl    $0x2,%eax
f012f315:	29 c1                	sub    %eax,%ecx
f012f317:	89 ca                	mov    %ecx,%edx
f012f319:	85 d2                	test   %edx,%edx
f012f31b:	74 03                	je     f012f320 <scarce_memory+0x67>
		total_size_tobe_allocated++;
f012f31d:	ff 45 f4             	incl   -0xc(%ebp)

	uint32 size_of_already_allocated = number_of_frames - LIST_SIZE(&free_frame_list) ;
f012f320:	8b 15 70 84 6e f0    	mov    0xf06e8470,%edx
f012f326:	a1 84 84 6e f0       	mov    0xf06e8484,%eax
f012f32b:	29 c2                	sub    %eax,%edx
f012f32d:	89 d0                	mov    %edx,%eax
f012f32f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
f012f332:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f335:	2b 45 ec             	sub    -0x14(%ebp),%eax
f012f338:	89 45 e8             	mov    %eax,-0x18(%ebp)
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
f012f33b:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012f342:	eb 12                	jmp    f012f356 <scarce_memory+0x9d>
	{
		allocate_frame(&ptr_tmp_FI) ;
f012f344:	83 ec 0c             	sub    $0xc,%esp
f012f347:	8d 45 e4             	lea    -0x1c(%ebp),%eax
f012f34a:	50                   	push   %eax
f012f34b:	e8 62 74 fd ff       	call   f01067b2 <allocate_frame>
f012f350:	83 c4 10             	add    $0x10,%esp
	uint32 size_tobe_allocated = total_size_tobe_allocated - size_of_already_allocated;
//	cprintf("size_of_already_allocated %d\n", size_of_already_allocated);
//	cprintf("size to be allocated %d\n", size_tobe_allocated);
	int i = 0 ;
	struct FrameInfo* ptr_tmp_FI ;
	for (; i <= size_tobe_allocated ; i++)
f012f353:	ff 45 f0             	incl   -0x10(%ebp)
f012f356:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f359:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f35c:	76 e6                	jbe    f012f344 <scarce_memory+0x8b>
	{
		allocate_frame(&ptr_tmp_FI) ;
	}
}
f012f35e:	90                   	nop
f012f35f:	c9                   	leave  
f012f360:	c3                   	ret    

f012f361 <calc_no_pages_tobe_removed_from_ready_exit_queues>:

uint32 calc_no_pages_tobe_removed_from_ready_exit_queues(uint32 WS_or_MEMORY_flag)
{
f012f361:	55                   	push   %ebp
f012f362:	89 e5                	mov    %esp,%ebp
f012f364:	83 ec 38             	sub    $0x38,%esp
	uint32 no_of_pages_tobe_removed_from_ready = 0;
f012f367:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	uint32 no_of_pages_tobe_removed_from_exit = 0;
f012f36e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
f012f375:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
f012f37c:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
f012f380:	0f 85 d3 01 00 00    	jne    f012f559 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f8>
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012f386:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
f012f38d:	e9 e1 00 00 00       	jmp    f012f473 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x112>
		{
			struct Env * ptr_ready_env = NULL;
f012f392:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012f399:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f39c:	c1 e0 04             	shl    $0x4,%eax
f012f39f:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f012f3a4:	8b 00                	mov    (%eax),%eax
f012f3a6:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012f3a9:	e9 82 00 00 00       	jmp    f012f430 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xcf>
			{
				int num_of_pages_in_WS = env_page_ws_get_size(ptr_ready_env);
f012f3ae:	83 ec 0c             	sub    $0xc,%esp
f012f3b1:	ff 75 e4             	pushl  -0x1c(%ebp)
f012f3b4:	e8 6b 83 fd ff       	call   f0107724 <env_page_ws_get_size>
f012f3b9:	83 c4 10             	add    $0x10,%esp
f012f3bc:	89 45 d0             	mov    %eax,-0x30(%ebp)
				int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f3bf:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f3c4:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f3ca:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012f3cd:	0f af c2             	imul   %edx,%eax
f012f3d0:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f3d5:	f7 e2                	mul    %edx
f012f3d7:	89 d0                	mov    %edx,%eax
f012f3d9:	c1 e8 05             	shr    $0x5,%eax
f012f3dc:	89 45 e0             	mov    %eax,-0x20(%ebp)
				if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f3df:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f3e4:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f3ea:	8b 45 d0             	mov    -0x30(%ebp),%eax
f012f3ed:	89 d1                	mov    %edx,%ecx
f012f3ef:	0f af c8             	imul   %eax,%ecx
f012f3f2:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f3f7:	f7 e1                	mul    %ecx
f012f3f9:	c1 ea 05             	shr    $0x5,%edx
f012f3fc:	89 d0                	mov    %edx,%eax
f012f3fe:	c1 e0 02             	shl    $0x2,%eax
f012f401:	01 d0                	add    %edx,%eax
f012f403:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f40a:	01 d0                	add    %edx,%eax
f012f40c:	c1 e0 02             	shl    $0x2,%eax
f012f40f:	29 c1                	sub    %eax,%ecx
f012f411:	89 ca                	mov    %ecx,%edx
f012f413:	85 d2                	test   %edx,%edx
f012f415:	74 03                	je     f012f41a <calc_no_pages_tobe_removed_from_ready_exit_queues+0xb9>
					num_of_pages_to_be_removed++;
f012f417:	ff 45 e0             	incl   -0x20(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
f012f41a:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012f41d:	01 45 f4             	add    %eax,-0xc(%ebp)
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
		{
			struct Env * ptr_ready_env = NULL;
			LIST_FOREACH(ptr_ready_env, &(env_ready_queues[i]))
f012f420:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f423:	c1 e0 04             	shl    $0x4,%eax
f012f426:	05 14 01 68 f0       	add    $0xf0680114,%eax
f012f42b:	8b 00                	mov    (%eax),%eax
f012f42d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012f430:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f434:	74 08                	je     f012f43e <calc_no_pages_tobe_removed_from_ready_exit_queues+0xdd>
f012f436:	8b 45 e4             	mov    -0x1c(%ebp),%eax
f012f439:	8b 40 44             	mov    0x44(%eax),%eax
f012f43c:	eb 05                	jmp    f012f443 <calc_no_pages_tobe_removed_from_ready_exit_queues+0xe2>
f012f43e:	b8 00 00 00 00       	mov    $0x0,%eax
f012f443:	8b 55 e8             	mov    -0x18(%ebp),%edx
f012f446:	c1 e2 04             	shl    $0x4,%edx
f012f449:	81 c2 14 01 68 f0    	add    $0xf0680114,%edx
f012f44f:	89 02                	mov    %eax,(%edx)
f012f451:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012f454:	c1 e0 04             	shl    $0x4,%eax
f012f457:	05 14 01 68 f0       	add    $0xf0680114,%eax
f012f45c:	8b 00                	mov    (%eax),%eax
f012f45e:	85 c0                	test   %eax,%eax
f012f460:	0f 85 48 ff ff ff    	jne    f012f3ae <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
f012f466:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012f46a:	0f 85 3e ff ff ff    	jne    f012f3ae <calc_no_pages_tobe_removed_from_ready_exit_queues+0x4d>
	uint32 no_of_pages_tobe_removed_from_ready = 0;
	uint32 no_of_pages_tobe_removed_from_exit = 0;
	uint32 no_of_pages_tobe_removed_from_curenv = 0;
	if(WS_or_MEMORY_flag == 1)	// THEN MEMORY SHALL BE FREED
	{
		for(int i = 0; i < num_of_ready_queues; i++)
f012f470:	ff 45 e8             	incl   -0x18(%ebp)
f012f473:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012f478:	0f b6 c0             	movzbl %al,%eax
f012f47b:	3b 45 e8             	cmp    -0x18(%ebp),%eax
f012f47e:	0f 8f 0e ff ff ff    	jg     f012f392 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x31>
					num_of_pages_to_be_removed++;
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
f012f484:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012f48b:	a1 64 60 6e f0       	mov    0xf06e6064,%eax
f012f490:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f493:	eb 19                	jmp    f012f4ae <calc_no_pages_tobe_removed_from_ready_exit_queues+0x14d>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
f012f495:	83 ec 0c             	sub    $0xc,%esp
f012f498:	ff 75 dc             	pushl  -0x24(%ebp)
f012f49b:	e8 84 82 fd ff       	call   f0107724 <env_page_ws_get_size>
f012f4a0:	83 c4 10             	add    $0x10,%esp
f012f4a3:	01 45 f0             	add    %eax,-0x10(%ebp)
				no_of_pages_tobe_removed_from_ready += num_of_pages_to_be_removed;
			}
		}

		struct Env * ptr_exit_env = NULL;
		LIST_FOREACH(ptr_exit_env, &env_exit_queue)
f012f4a6:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f012f4ab:	89 45 dc             	mov    %eax,-0x24(%ebp)
f012f4ae:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f4b2:	74 08                	je     f012f4bc <calc_no_pages_tobe_removed_from_ready_exit_queues+0x15b>
f012f4b4:	8b 45 dc             	mov    -0x24(%ebp),%eax
f012f4b7:	8b 40 44             	mov    0x44(%eax),%eax
f012f4ba:	eb 05                	jmp    f012f4c1 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x160>
f012f4bc:	b8 00 00 00 00       	mov    $0x0,%eax
f012f4c1:	a3 6c 60 6e f0       	mov    %eax,0xf06e606c
f012f4c6:	a1 6c 60 6e f0       	mov    0xf06e606c,%eax
f012f4cb:	85 c0                	test   %eax,%eax
f012f4cd:	75 c6                	jne    f012f495 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
f012f4cf:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012f4d3:	75 c0                	jne    f012f495 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x134>
		{
			no_of_pages_tobe_removed_from_exit += env_page_ws_get_size(ptr_exit_env);
		}

		if(curenv != NULL)
f012f4d5:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f4da:	85 c0                	test   %eax,%eax
f012f4dc:	0f 84 ec 00 00 00    	je     f012f5ce <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		{
			int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012f4e2:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f4e7:	83 ec 0c             	sub    $0xc,%esp
f012f4ea:	50                   	push   %eax
f012f4eb:	e8 34 82 fd ff       	call   f0107724 <env_page_ws_get_size>
f012f4f0:	83 c4 10             	add    $0x10,%esp
f012f4f3:	89 45 cc             	mov    %eax,-0x34(%ebp)
			int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f4f6:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f4fb:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f501:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012f504:	0f af c2             	imul   %edx,%eax
f012f507:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f50c:	f7 e2                	mul    %edx
f012f50e:	89 d0                	mov    %edx,%eax
f012f510:	c1 e8 05             	shr    $0x5,%eax
f012f513:	89 45 d8             	mov    %eax,-0x28(%ebp)
			if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f516:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f51b:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f521:	8b 45 cc             	mov    -0x34(%ebp),%eax
f012f524:	89 d1                	mov    %edx,%ecx
f012f526:	0f af c8             	imul   %eax,%ecx
f012f529:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f52e:	f7 e1                	mul    %ecx
f012f530:	c1 ea 05             	shr    $0x5,%edx
f012f533:	89 d0                	mov    %edx,%eax
f012f535:	c1 e0 02             	shl    $0x2,%eax
f012f538:	01 d0                	add    %edx,%eax
f012f53a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f541:	01 d0                	add    %edx,%eax
f012f543:	c1 e0 02             	shl    $0x2,%eax
f012f546:	29 c1                	sub    %eax,%ecx
f012f548:	89 ca                	mov    %ecx,%edx
f012f54a:	85 d2                	test   %edx,%edx
f012f54c:	74 03                	je     f012f551 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x1f0>
				num_of_pages_to_be_removed++;
f012f54e:	ff 45 d8             	incl   -0x28(%ebp)
			no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012f551:	8b 45 d8             	mov    -0x28(%ebp),%eax
f012f554:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012f557:	eb 75                	jmp    f012f5ce <calc_no_pages_tobe_removed_from_ready_exit_queues+0x26d>
		}
	}
	else	// THEN RAPID PROCESS SHALL BE FREED ONLY
	{
		int num_of_pages_in_WS = env_page_ws_get_size(curenv);
f012f559:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f55e:	83 ec 0c             	sub    $0xc,%esp
f012f561:	50                   	push   %eax
f012f562:	e8 bd 81 fd ff       	call   f0107724 <env_page_ws_get_size>
f012f567:	83 c4 10             	add    $0x10,%esp
f012f56a:	89 45 c8             	mov    %eax,-0x38(%ebp)
		int num_of_pages_to_be_removed = curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS / 100;
f012f56d:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f572:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f578:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f57b:	0f af c2             	imul   %edx,%eax
f012f57e:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx
f012f583:	f7 e2                	mul    %edx
f012f585:	89 d0                	mov    %edx,%eax
f012f587:	c1 e8 05             	shr    $0x5,%eax
f012f58a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if ((curenv->percentage_of_WS_pages_to_be_removed * num_of_pages_in_WS) % 100 > 0)
f012f58d:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f592:	8b 90 5c da 01 00    	mov    0x1da5c(%eax),%edx
f012f598:	8b 45 c8             	mov    -0x38(%ebp),%eax
f012f59b:	89 d1                	mov    %edx,%ecx
f012f59d:	0f af c8             	imul   %eax,%ecx
f012f5a0:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f5a5:	f7 e1                	mul    %ecx
f012f5a7:	c1 ea 05             	shr    $0x5,%edx
f012f5aa:	89 d0                	mov    %edx,%eax
f012f5ac:	c1 e0 02             	shl    $0x2,%eax
f012f5af:	01 d0                	add    %edx,%eax
f012f5b1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012f5b8:	01 d0                	add    %edx,%eax
f012f5ba:	c1 e0 02             	shl    $0x2,%eax
f012f5bd:	29 c1                	sub    %eax,%ecx
f012f5bf:	89 ca                	mov    %ecx,%edx
f012f5c1:	85 d2                	test   %edx,%edx
f012f5c3:	74 03                	je     f012f5c8 <calc_no_pages_tobe_removed_from_ready_exit_queues+0x267>
			num_of_pages_to_be_removed++;
f012f5c5:	ff 45 d4             	incl   -0x2c(%ebp)
		no_of_pages_tobe_removed_from_curenv = num_of_pages_to_be_removed;
f012f5c8:	8b 45 d4             	mov    -0x2c(%ebp),%eax
f012f5cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
	}

	return no_of_pages_tobe_removed_from_curenv + no_of_pages_tobe_removed_from_ready + no_of_pages_tobe_removed_from_exit;
f012f5ce:	8b 55 ec             	mov    -0x14(%ebp),%edx
f012f5d1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f5d4:	01 c2                	add    %eax,%edx
f012f5d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f5d9:	01 d0                	add    %edx,%eax
}
f012f5db:	c9                   	leave  
f012f5dc:	c3                   	ret    

f012f5dd <schenv>:


void schenv()
{
f012f5dd:	55                   	push   %ebp
f012f5de:	89 e5                	mov    %esp,%ebp
f012f5e0:	83 ec 18             	sub    $0x18,%esp
	__nl = 0;
f012f5e3:	c6 05 04 85 6e f0 00 	movb   $0x0,0xf06e8504
	__ne = NULL;
f012f5ea:	c7 05 94 84 6e f0 00 	movl   $0x0,0xf06e8494
f012f5f1:	00 00 00 
	for (int i = 0; i < num_of_ready_queues; ++i)
f012f5f4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f5fb:	eb 3a                	jmp    f012f637 <schenv+0x5a>
	{
		if (queue_size(&(env_ready_queues[i])))
f012f5fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f600:	c1 e0 04             	shl    $0x4,%eax
f012f603:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f012f608:	83 ec 0c             	sub    $0xc,%esp
f012f60b:	50                   	push   %eax
f012f60c:	e8 96 4d fd ff       	call   f01043a7 <queue_size>
f012f611:	83 c4 10             	add    $0x10,%esp
f012f614:	85 c0                	test   %eax,%eax
f012f616:	74 1c                	je     f012f634 <schenv+0x57>
		{
			__ne = LIST_LAST(&(env_ready_queues[i]));
f012f618:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f61b:	c1 e0 04             	shl    $0x4,%eax
f012f61e:	05 10 01 68 f0       	add    $0xf0680110,%eax
f012f623:	8b 00                	mov    (%eax),%eax
f012f625:	a3 94 84 6e f0       	mov    %eax,0xf06e8494
			__nl = i;
f012f62a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f62d:	a2 04 85 6e f0       	mov    %al,0xf06e8504
			break;
f012f632:	eb 10                	jmp    f012f644 <schenv+0x67>

void schenv()
{
	__nl = 0;
	__ne = NULL;
	for (int i = 0; i < num_of_ready_queues; ++i)
f012f634:	ff 45 f4             	incl   -0xc(%ebp)
f012f637:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012f63c:	0f b6 c0             	movzbl %al,%eax
f012f63f:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f642:	7f b9                	jg     f012f5fd <schenv+0x20>
			__ne = LIST_LAST(&(env_ready_queues[i]));
			__nl = i;
			break;
		}
	}
	if (curenv != NULL)
f012f644:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f649:	85 c0                	test   %eax,%eax
f012f64b:	0f 84 86 00 00 00    	je     f012f6d7 <schenv+0xfa>
	{
		if (__ne != NULL)
f012f651:	a1 94 84 6e f0       	mov    0xf06e8494,%eax
f012f656:	85 c0                	test   %eax,%eax
f012f658:	74 4b                	je     f012f6a5 <schenv+0xc8>
		{
			if ((__pl + 1) < __nl)
f012f65a:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f65f:	0f b6 c0             	movzbl %al,%eax
f012f662:	8d 50 01             	lea    0x1(%eax),%edx
f012f665:	a0 04 85 6e f0       	mov    0xf06e8504,%al
f012f66a:	0f b6 c0             	movzbl %al,%eax
f012f66d:	39 c2                	cmp    %eax,%edx
f012f66f:	7d 66                	jge    f012f6d7 <schenv+0xfa>
			{
				__ne = curenv;
f012f671:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f676:	a3 94 84 6e f0       	mov    %eax,0xf06e8494
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012f67b:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f680:	0f b6 c0             	movzbl %al,%eax
f012f683:	8a 15 dc 84 6e f0    	mov    0xf06e84dc,%dl
f012f689:	0f b6 d2             	movzbl %dl,%edx
f012f68c:	4a                   	dec    %edx
f012f68d:	39 d0                	cmp    %edx,%eax
f012f68f:	7d 08                	jge    f012f699 <schenv+0xbc>
f012f691:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f696:	40                   	inc    %eax
f012f697:	eb 05                	jmp    f012f69e <schenv+0xc1>
f012f699:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f69e:	a2 04 85 6e f0       	mov    %al,0xf06e8504
		{
			__ne = curenv;
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
		}
	}
}
f012f6a3:	eb 32                	jmp    f012f6d7 <schenv+0xfa>
				__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
			}
		}
		else
		{
			__ne = curenv;
f012f6a5:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f6aa:	a3 94 84 6e f0       	mov    %eax,0xf06e8494
			__nl = __pl < num_of_ready_queues-1? __pl + 1 : __pl ;
f012f6af:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f6b4:	0f b6 c0             	movzbl %al,%eax
f012f6b7:	8a 15 dc 84 6e f0    	mov    0xf06e84dc,%dl
f012f6bd:	0f b6 d2             	movzbl %dl,%edx
f012f6c0:	4a                   	dec    %edx
f012f6c1:	39 d0                	cmp    %edx,%eax
f012f6c3:	7d 08                	jge    f012f6cd <schenv+0xf0>
f012f6c5:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f6ca:	40                   	inc    %eax
f012f6cb:	eb 05                	jmp    f012f6d2 <schenv+0xf5>
f012f6cd:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f6d2:	a2 04 85 6e f0       	mov    %al,0xf06e8504
		}
	}
}
f012f6d7:	90                   	nop
f012f6d8:	c9                   	leave  
f012f6d9:	c3                   	ret    

f012f6da <chksch>:

void chksch(uint8 onoff)
{
f012f6da:	55                   	push   %ebp
f012f6db:	89 e5                	mov    %esp,%ebp
f012f6dd:	83 ec 04             	sub    $0x4,%esp
f012f6e0:	8b 45 08             	mov    0x8(%ebp),%eax
f012f6e3:	88 45 fc             	mov    %al,-0x4(%ebp)
	__pe = NULL;
f012f6e6:	c7 05 f0 84 6e f0 00 	movl   $0x0,0xf06e84f0
f012f6ed:	00 00 00 
	__ne = NULL;
f012f6f0:	c7 05 94 84 6e f0 00 	movl   $0x0,0xf06e8494
f012f6f7:	00 00 00 
	__pl = 0 ;
f012f6fa:	c6 05 04 01 68 f0 00 	movb   $0x0,0xf0680104
	__nl = 0 ;
f012f701:	c6 05 04 85 6e f0 00 	movb   $0x0,0xf06e8504
	__chkstatus = onoff;
f012f708:	8a 45 fc             	mov    -0x4(%ebp),%al
f012f70b:	a2 90 84 6e f0       	mov    %al,0xf06e8490
}
f012f710:	90                   	nop
f012f711:	c9                   	leave  
f012f712:	c3                   	ret    

f012f713 <chk1>:
void chk1()
{
f012f713:	55                   	push   %ebp
f012f714:	89 e5                	mov    %esp,%ebp
f012f716:	83 ec 08             	sub    $0x8,%esp
	if (__chkstatus == 0)
f012f719:	a0 90 84 6e f0       	mov    0xf06e8490,%al
f012f71e:	84 c0                	test   %al,%al
f012f720:	74 2b                	je     f012f74d <chk1+0x3a>
		return ;
	__pe = curenv;
f012f722:	a1 34 87 65 f0       	mov    0xf0658734,%eax
f012f727:	a3 f0 84 6e f0       	mov    %eax,0xf06e84f0
	__pl = __nl ;
f012f72c:	a0 04 85 6e f0       	mov    0xf06e8504,%al
f012f731:	a2 04 01 68 f0       	mov    %al,0xf0680104
	if (__pe == NULL)
f012f736:	a1 f0 84 6e f0       	mov    0xf06e84f0,%eax
f012f73b:	85 c0                	test   %eax,%eax
f012f73d:	75 07                	jne    f012f746 <chk1+0x33>
	{
		__pl = 0;
f012f73f:	c6 05 04 01 68 f0 00 	movb   $0x0,0xf0680104
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
f012f746:	e8 92 fe ff ff       	call   f012f5dd <schenv>
f012f74b:	eb 01                	jmp    f012f74e <chk1+0x3b>
	__chkstatus = onoff;
}
void chk1()
{
	if (__chkstatus == 0)
		return ;
f012f74d:	90                   	nop
	{
		__pl = 0;
	}
	//cprintf("chk1: current = %s @ level %d\n", __pe == NULL? "NULL" : __pe->prog_name, __pl);
	schenv();
}
f012f74e:	c9                   	leave  
f012f74f:	c3                   	ret    

f012f750 <chk2>:
void chk2(struct Env* __se)
{
f012f750:	55                   	push   %ebp
f012f751:	89 e5                	mov    %esp,%ebp
f012f753:	53                   	push   %ebx
f012f754:	83 ec 14             	sub    $0x14,%esp
	if (__chkstatus == 0)
f012f757:	a0 90 84 6e f0       	mov    0xf06e8490,%al
f012f75c:	84 c0                	test   %al,%al
f012f75e:	0f 84 35 02 00 00    	je     f012f999 <chk2+0x249>
		return ;

	//cprintf("chk2: next = %s @ level %d\n", __ne == NULL? "NULL" : __ne->prog_name, __nl);

	assert_endall(__se == __ne);
f012f764:	a1 94 84 6e f0       	mov    0xf06e8494,%eax
f012f769:	39 45 08             	cmp    %eax,0x8(%ebp)
f012f76c:	74 19                	je     f012f787 <chk2+0x37>
f012f76e:	68 b5 be 13 f0       	push   $0xf013beb5
f012f773:	68 c2 be 13 f0       	push   $0xf013bec2
f012f778:	68 c0 00 00 00       	push   $0xc0
f012f77d:	68 d7 be 13 f0       	push   $0xf013bed7
f012f782:	e8 8e 0a fd ff       	call   f0100215 <_panic_all>
	//cprintf("%d - %d\n", kclock_read_cnt0_latch() , TIMER_DIV((1000/quantums[__nl])));

	if (__ne != NULL)
f012f787:	a1 94 84 6e f0       	mov    0xf06e8494,%eax
f012f78c:	85 c0                	test   %eax,%eax
f012f78e:	0f 84 1b 01 00 00    	je     f012f8af <chk2+0x15f>
	{
		uint16 upper = TIMER_DIV((1000/quantums[__nl])) ;
f012f794:	a0 04 85 6e f0       	mov    0xf06e8504,%al
f012f799:	0f b6 c0             	movzbl %al,%eax
f012f79c:	8a 80 88 84 6e f0    	mov    -0xf917b78(%eax),%al
f012f7a2:	0f b6 d8             	movzbl %al,%ebx
f012f7a5:	b8 f4 01 00 00       	mov    $0x1f4,%eax
f012f7aa:	99                   	cltd   
f012f7ab:	f7 fb                	idiv   %ebx
f012f7ad:	8d 88 de 34 12 00    	lea    0x1234de(%eax),%ecx
f012f7b3:	a0 04 85 6e f0       	mov    0xf06e8504,%al
f012f7b8:	0f b6 c0             	movzbl %al,%eax
f012f7bb:	8a 80 88 84 6e f0    	mov    -0xf917b78(%eax),%al
f012f7c1:	0f b6 d8             	movzbl %al,%ebx
f012f7c4:	b8 e8 03 00 00       	mov    $0x3e8,%eax
f012f7c9:	99                   	cltd   
f012f7ca:	f7 fb                	idiv   %ebx
f012f7cc:	89 c3                	mov    %eax,%ebx
f012f7ce:	89 c8                	mov    %ecx,%eax
f012f7d0:	99                   	cltd   
f012f7d1:	f7 fb                	idiv   %ebx
f012f7d3:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		upper = upper % 2 == 1? upper+1 : upper ;
f012f7d7:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012f7db:	83 e0 01             	and    $0x1,%eax
f012f7de:	66 85 c0             	test   %ax,%ax
f012f7e1:	74 07                	je     f012f7ea <chk2+0x9a>
f012f7e3:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012f7e7:	40                   	inc    %eax
f012f7e8:	eb 04                	jmp    f012f7ee <chk2+0x9e>
f012f7ea:	66 8b 45 ee          	mov    -0x12(%ebp),%ax
f012f7ee:	66 89 45 ee          	mov    %ax,-0x12(%ebp)
		uint16 lower = 90 * upper / 100 ;
f012f7f2:	0f b7 55 ee          	movzwl -0x12(%ebp),%edx
f012f7f6:	89 d0                	mov    %edx,%eax
f012f7f8:	c1 e0 02             	shl    $0x2,%eax
f012f7fb:	01 d0                	add    %edx,%eax
f012f7fd:	01 c0                	add    %eax,%eax
f012f7ff:	01 d0                	add    %edx,%eax
f012f801:	c1 e0 02             	shl    $0x2,%eax
f012f804:	01 d0                	add    %edx,%eax
f012f806:	01 c0                	add    %eax,%eax
f012f808:	89 c1                	mov    %eax,%ecx
f012f80a:	b8 1f 85 eb 51       	mov    $0x51eb851f,%eax
f012f80f:	f7 e9                	imul   %ecx
f012f811:	c1 fa 05             	sar    $0x5,%edx
f012f814:	89 c8                	mov    %ecx,%eax
f012f816:	c1 f8 1f             	sar    $0x1f,%eax
f012f819:	29 c2                	sub    %eax,%edx
f012f81b:	89 d0                	mov    %edx,%eax
f012f81d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
		uint16 current = kclock_read_cnt0();
f012f821:	e8 52 4a fd ff       	call   f0104278 <kclock_read_cnt0>
f012f826:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;
f012f82a:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012f82e:	66 3b 45 ec          	cmp    -0x14(%ebp),%ax
f012f832:	76 0a                	jbe    f012f83e <chk2+0xee>
f012f834:	66 8b 45 ea          	mov    -0x16(%ebp),%ax
f012f838:	66 3b 45 ee          	cmp    -0x12(%ebp),%ax
f012f83c:	76 19                	jbe    f012f857 <chk2+0x107>
f012f83e:	68 f0 be 13 f0       	push   $0xf013bef0
f012f843:	68 c2 be 13 f0       	push   $0xf013bec2
f012f848:	68 ca 00 00 00       	push   $0xca
f012f84d:	68 d7 be 13 f0       	push   $0xf013bed7
f012f852:	e8 be 09 fd ff       	call   f0100215 <_panic_all>

		for (int i = 0; i < num_of_ready_queues; ++i)
f012f857:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f85e:	eb 42                	jmp    f012f8a2 <chk2+0x152>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
f012f860:	a1 94 84 6e f0       	mov    0xf06e8494,%eax
f012f865:	8b 40 4c             	mov    0x4c(%eax),%eax
f012f868:	89 c2                	mov    %eax,%edx
f012f86a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f86d:	c1 e0 04             	shl    $0x4,%eax
f012f870:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f012f875:	83 ec 08             	sub    $0x8,%esp
f012f878:	52                   	push   %edx
f012f879:	50                   	push   %eax
f012f87a:	e8 fa 4c fd ff       	call   f0104579 <find_env_in_queue>
f012f87f:	83 c4 10             	add    $0x10,%esp
f012f882:	85 c0                	test   %eax,%eax
f012f884:	74 19                	je     f012f89f <chk2+0x14f>
f012f886:	68 14 bf 13 f0       	push   $0xf013bf14
f012f88b:	68 c2 be 13 f0       	push   $0xf013bec2
f012f890:	68 ce 00 00 00       	push   $0xce
f012f895:	68 d7 be 13 f0       	push   $0xf013bed7
f012f89a:	e8 76 09 fd ff       	call   f0100215 <_panic_all>
		uint16 lower = 90 * upper / 100 ;
		uint16 current = kclock_read_cnt0();
		//cprintf("current = %d, lower = %d, upper = %d\n", current, lower, upper);
		assert_endall(current > lower && current <= upper) ;

		for (int i = 0; i < num_of_ready_queues; ++i)
f012f89f:	ff 45 f4             	incl   -0xc(%ebp)
f012f8a2:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012f8a7:	0f b6 c0             	movzbl %al,%eax
f012f8aa:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f8ad:	7f b1                	jg     f012f860 <chk2+0x110>
		{
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __ne->env_id) == NULL);
		}
	}
	if (__pe != NULL && __pe != __ne)
f012f8af:	a1 f0 84 6e f0       	mov    0xf06e84f0,%eax
f012f8b4:	85 c0                	test   %eax,%eax
f012f8b6:	0f 84 de 00 00 00    	je     f012f99a <chk2+0x24a>
f012f8bc:	8b 15 f0 84 6e f0    	mov    0xf06e84f0,%edx
f012f8c2:	a1 94 84 6e f0       	mov    0xf06e8494,%eax
f012f8c7:	39 c2                	cmp    %eax,%edx
f012f8c9:	0f 84 cb 00 00 00    	je     f012f99a <chk2+0x24a>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
f012f8cf:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f8d4:	0f b6 c0             	movzbl %al,%eax
f012f8d7:	8a 15 dc 84 6e f0    	mov    0xf06e84dc,%dl
f012f8dd:	0f b6 d2             	movzbl %dl,%edx
f012f8e0:	4a                   	dec    %edx
f012f8e1:	39 d0                	cmp    %edx,%eax
f012f8e3:	74 08                	je     f012f8ed <chk2+0x19d>
f012f8e5:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f8ea:	40                   	inc    %eax
f012f8eb:	eb 05                	jmp    f012f8f2 <chk2+0x1a2>
f012f8ed:	a0 04 01 68 f0       	mov    0xf0680104,%al
f012f8f2:	88 45 e9             	mov    %al,-0x17(%ebp)
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
f012f8f5:	a1 f0 84 6e f0       	mov    0xf06e84f0,%eax
f012f8fa:	8b 40 4c             	mov    0x4c(%eax),%eax
f012f8fd:	89 c2                	mov    %eax,%edx
f012f8ff:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012f903:	c1 e0 04             	shl    $0x4,%eax
f012f906:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f012f90b:	83 ec 08             	sub    $0x8,%esp
f012f90e:	52                   	push   %edx
f012f90f:	50                   	push   %eax
f012f910:	e8 64 4c fd ff       	call   f0104579 <find_env_in_queue>
f012f915:	83 c4 10             	add    $0x10,%esp
f012f918:	85 c0                	test   %eax,%eax
f012f91a:	75 19                	jne    f012f935 <chk2+0x1e5>
f012f91c:	68 54 bf 13 f0       	push   $0xf013bf54
f012f921:	68 c2 be 13 f0       	push   $0xf013bec2
f012f926:	68 d4 00 00 00       	push   $0xd4
f012f92b:	68 d7 be 13 f0       	push   $0xf013bed7
f012f930:	e8 e0 08 fd ff       	call   f0100215 <_panic_all>
		for (int i = 0; i < num_of_ready_queues; ++i)
f012f935:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
f012f93c:	eb 4c                	jmp    f012f98a <chk2+0x23a>
		{
			if (i == __tl) continue;
f012f93e:	0f b6 45 e9          	movzbl -0x17(%ebp),%eax
f012f942:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f945:	74 3f                	je     f012f986 <chk2+0x236>
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
f012f947:	a1 f0 84 6e f0       	mov    0xf06e84f0,%eax
f012f94c:	8b 40 4c             	mov    0x4c(%eax),%eax
f012f94f:	89 c2                	mov    %eax,%edx
f012f951:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012f954:	c1 e0 04             	shl    $0x4,%eax
f012f957:	05 0c 01 68 f0       	add    $0xf068010c,%eax
f012f95c:	83 ec 08             	sub    $0x8,%esp
f012f95f:	52                   	push   %edx
f012f960:	50                   	push   %eax
f012f961:	e8 13 4c fd ff       	call   f0104579 <find_env_in_queue>
f012f966:	83 c4 10             	add    $0x10,%esp
f012f969:	85 c0                	test   %eax,%eax
f012f96b:	74 1a                	je     f012f987 <chk2+0x237>
f012f96d:	68 98 bf 13 f0       	push   $0xf013bf98
f012f972:	68 c2 be 13 f0       	push   $0xf013bec2
f012f977:	68 d8 00 00 00       	push   $0xd8
f012f97c:	68 d7 be 13 f0       	push   $0xf013bed7
f012f981:	e8 8f 08 fd ff       	call   f0100215 <_panic_all>
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
		{
			if (i == __tl) continue;
f012f986:	90                   	nop
	}
	if (__pe != NULL && __pe != __ne)
	{
		uint8 __tl = __pl == num_of_ready_queues-1 ? __pl : __pl + 1 ;
		assert_endall(find_env_in_queue(&(env_ready_queues[__tl]), __pe->env_id) != NULL);
		for (int i = 0; i < num_of_ready_queues; ++i)
f012f987:	ff 45 f0             	incl   -0x10(%ebp)
f012f98a:	a0 dc 84 6e f0       	mov    0xf06e84dc,%al
f012f98f:	0f b6 c0             	movzbl %al,%eax
f012f992:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012f995:	7f a7                	jg     f012f93e <chk2+0x1ee>
f012f997:	eb 01                	jmp    f012f99a <chk2+0x24a>
	schenv();
}
void chk2(struct Env* __se)
{
	if (__chkstatus == 0)
		return ;
f012f999:	90                   	nop
		{
			if (i == __tl) continue;
			assert_endall(find_env_in_queue(&(env_ready_queues[i]), __pe->env_id) == NULL) ;
		}
	}
}
f012f99a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012f99d:	c9                   	leave  
f012f99e:	c3                   	ret    

f012f99f <check_boot_pgdir>:
// but it is a pretty good check.
//
uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va);

void check_boot_pgdir()
{
f012f99f:	55                   	push   %ebp
f012f9a0:	89 e5                	mov    %esp,%ebp
f012f9a2:	83 ec 18             	sub    $0x18,%esp
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012f9a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f9ac:	eb 40                	jmp    f012f9ee <check_boot_pgdir+0x4f>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
f012f9ae:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012f9b1:	8d 90 00 00 00 f0    	lea    -0x10000000(%eax),%edx
f012f9b7:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012f9bc:	83 ec 08             	sub    $0x8,%esp
f012f9bf:	52                   	push   %edx
f012f9c0:	50                   	push   %eax
f012f9c1:	e8 92 01 00 00       	call   f012fb58 <check_va2pa>
f012f9c6:	83 c4 10             	add    $0x10,%esp
f012f9c9:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f012f9cc:	74 19                	je     f012f9e7 <check_boot_pgdir+0x48>
f012f9ce:	68 d8 bf 13 f0       	push   $0xf013bfd8
f012f9d3:	68 c2 be 13 f0       	push   $0xf013bec2
f012f9d8:	68 ff 00 00 00       	push   $0xff
f012f9dd:	68 d7 be 13 f0       	push   $0xf013bed7
f012f9e2:	e8 bf 07 fd ff       	call   f01001a6 <_panic>
		for (i = 0; KERNEL_BASE + i < (uint32)ptr_free_mem; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#else
	{
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
f012f9e7:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012f9ee:	81 7d f4 00 00 00 10 	cmpl   $0x10000000,-0xc(%ebp)
f012f9f5:	75 b7                	jne    f012f9ae <check_boot_pgdir+0xf>
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012f9f7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012f9fe:	eb 74                	jmp    f012fa74 <check_boot_pgdir+0xd5>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);
f012fa00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa03:	8d 90 00 80 bf ef    	lea    -0x10408000(%eax),%edx
f012fa09:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012fa0e:	83 ec 08             	sub    $0x8,%esp
f012fa11:	52                   	push   %edx
f012fa12:	50                   	push   %eax
f012fa13:	e8 40 01 00 00       	call   f012fb58 <check_va2pa>
f012fa18:	83 c4 10             	add    $0x10,%esp
f012fa1b:	c7 45 f0 00 80 18 f0 	movl   $0xf0188000,-0x10(%ebp)
f012fa22:	81 7d f0 ff ff ff ef 	cmpl   $0xefffffff,-0x10(%ebp)
f012fa29:	77 17                	ja     f012fa42 <check_boot_pgdir+0xa3>
f012fa2b:	ff 75 f0             	pushl  -0x10(%ebp)
f012fa2e:	68 10 c0 13 f0       	push   $0xf013c010
f012fa33:	68 04 01 00 00       	push   $0x104
f012fa38:	68 d7 be 13 f0       	push   $0xf013bed7
f012fa3d:	e8 64 07 fd ff       	call   f01001a6 <_panic>
f012fa42:	8b 55 f0             	mov    -0x10(%ebp),%edx
f012fa45:	8d 8a 00 00 00 10    	lea    0x10000000(%edx),%ecx
f012fa4b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fa4e:	01 ca                	add    %ecx,%edx
f012fa50:	39 d0                	cmp    %edx,%eax
f012fa52:	74 19                	je     f012fa6d <check_boot_pgdir+0xce>
f012fa54:	68 44 c0 13 f0       	push   $0xf013c044
f012fa59:	68 c2 be 13 f0       	push   $0xf013bec2
f012fa5e:	68 04 01 00 00       	push   $0x104
f012fa63:	68 d7 be 13 f0       	push   $0xf013bed7
f012fa68:	e8 39 07 fd ff       	call   f01001a6 <_panic>
		for (i = 0; KERNEL_BASE + i != 0; i += PAGE_SIZE)
			assert(check_va2pa(ptr_page_directory, KERNEL_BASE + i) == i);
	}
	#endif
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
f012fa6d:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
f012fa74:	81 7d f4 ff 7f 00 00 	cmpl   $0x7fff,-0xc(%ebp)
f012fa7b:	76 83                	jbe    f012fa00 <check_boot_pgdir+0x61>
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012fa7d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
f012fa84:	e9 af 00 00 00       	jmp    f012fb38 <check_boot_pgdir+0x199>
		switch (i) {
f012fa89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fa8c:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012fa91:	74 11                	je     f012faa4 <check_boot_pgdir+0x105>
f012fa93:	3d bb 03 00 00       	cmp    $0x3bb,%eax
f012fa98:	72 36                	jb     f012fad0 <check_boot_pgdir+0x131>
f012fa9a:	2d bd 03 00 00       	sub    $0x3bd,%eax
f012fa9f:	83 f8 02             	cmp    $0x2,%eax
f012faa2:	77 2c                	ja     f012fad0 <check_boot_pgdir+0x131>
		case PDX(UVPT):
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
f012faa4:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012faa9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012faac:	c1 e2 02             	shl    $0x2,%edx
f012faaf:	01 d0                	add    %edx,%eax
f012fab1:	8b 00                	mov    (%eax),%eax
f012fab3:	85 c0                	test   %eax,%eax
f012fab5:	75 7a                	jne    f012fb31 <check_boot_pgdir+0x192>
f012fab7:	68 c6 c0 13 f0       	push   $0xf013c0c6
f012fabc:	68 c2 be 13 f0       	push   $0xf013bec2
f012fac1:	68 0f 01 00 00       	push   $0x10f
f012fac6:	68 d7 be 13 f0       	push   $0xf013bed7
f012facb:	e8 d6 06 fd ff       	call   f01001a6 <_panic>
		break;
		default:
			if (i >= PDX(KERNEL_BASE))
f012fad0:	81 7d f4 bf 03 00 00 	cmpl   $0x3bf,-0xc(%ebp)
f012fad7:	76 2c                	jbe    f012fb05 <check_boot_pgdir+0x166>
				assert(ptr_page_directory[i]);
f012fad9:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012fade:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fae1:	c1 e2 02             	shl    $0x2,%edx
f012fae4:	01 d0                	add    %edx,%eax
f012fae6:	8b 00                	mov    (%eax),%eax
f012fae8:	85 c0                	test   %eax,%eax
f012faea:	75 48                	jne    f012fb34 <check_boot_pgdir+0x195>
f012faec:	68 c6 c0 13 f0       	push   $0xf013c0c6
f012faf1:	68 c2 be 13 f0       	push   $0xf013bec2
f012faf6:	68 13 01 00 00       	push   $0x113
f012fafb:	68 d7 be 13 f0       	push   $0xf013bed7
f012fb00:	e8 a1 06 fd ff       	call   f01001a6 <_panic>
			else
				assert(ptr_page_directory[i] == 0);
f012fb05:	a1 d8 84 6e f0       	mov    0xf06e84d8,%eax
f012fb0a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fb0d:	c1 e2 02             	shl    $0x2,%edx
f012fb10:	01 d0                	add    %edx,%eax
f012fb12:	8b 00                	mov    (%eax),%eax
f012fb14:	85 c0                	test   %eax,%eax
f012fb16:	74 1c                	je     f012fb34 <check_boot_pgdir+0x195>
f012fb18:	68 dc c0 13 f0       	push   $0xf013c0dc
f012fb1d:	68 c2 be 13 f0       	push   $0xf013bec2
f012fb22:	68 15 01 00 00       	push   $0x115
f012fb27:	68 d7 be 13 f0       	push   $0xf013bed7
f012fb2c:	e8 75 06 fd ff       	call   f01001a6 <_panic>
		case PDX(KERNEL_STACK_TOP-1):
		case PDX(UENVS):
		//2016: READ_ONLY_FRAMES_INFO not valid any more since it can't fit in 4 MB space
		//case PDX(READ_ONLY_FRAMES_INFO):
		assert(ptr_page_directory[i]);
		break;
f012fb31:	90                   	nop
f012fb32:	eb 01                	jmp    f012fb35 <check_boot_pgdir+0x196>
		default:
			if (i >= PDX(KERNEL_BASE))
				assert(ptr_page_directory[i]);
			else
				assert(ptr_page_directory[i] == 0);
			break;
f012fb34:	90                   	nop
	// check kernel stack
	for (i = 0; i < KERNEL_STACK_SIZE; i += PAGE_SIZE)
		assert(check_va2pa(ptr_page_directory, KERNEL_STACK_TOP - KERNEL_STACK_SIZE + i) == STATIC_KERNEL_PHYSICAL_ADDRESS(ptr_stack_bottom) + i);

	// check for zero/non-zero in PDEs
	for (i = 0; i < NPDENTRIES; i++) {
f012fb35:	ff 45 f4             	incl   -0xc(%ebp)
f012fb38:	81 7d f4 ff 03 00 00 	cmpl   $0x3ff,-0xc(%ebp)
f012fb3f:	0f 86 44 ff ff ff    	jbe    f012fa89 <check_boot_pgdir+0xea>
			else
				assert(ptr_page_directory[i] == 0);
			break;
		}
	}
	cprintf("check_boot_pgdir() succeeded!\n");
f012fb45:	83 ec 0c             	sub    $0xc,%esp
f012fb48:	68 f8 c0 13 f0       	push   $0xf013c0f8
f012fb4d:	e8 db 10 fd ff       	call   f0100c2d <cprintf>
f012fb52:	83 c4 10             	add    $0x10,%esp
}
f012fb55:	90                   	nop
f012fb56:	c9                   	leave  
f012fb57:	c3                   	ret    

f012fb58 <check_va2pa>:
// defined by the page directory 'ptr_page_directory'.  The hardware normally performs
// this functionality for us!  We define our own version to help check
// the check_boot_pgdir() function; it shouldn't be used elsewhere.

uint32 check_va2pa(uint32 *ptr_page_directory, uint32 va)
{
f012fb58:	55                   	push   %ebp
f012fb59:	89 e5                	mov    %esp,%ebp
f012fb5b:	83 ec 18             	sub    $0x18,%esp
	uint32 *p;

	uint32* dirEntry = &(ptr_page_directory[PDX(va)]);
f012fb5e:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fb61:	c1 e8 16             	shr    $0x16,%eax
f012fb64:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fb6b:	8b 45 08             	mov    0x8(%ebp),%eax
f012fb6e:	01 d0                	add    %edx,%eax
f012fb70:	89 45 f4             	mov    %eax,-0xc(%ebp)

	//LOG_VARS("dir table entry %x", *dirEntry);

	if (!(*dirEntry & PERM_PRESENT))
f012fb73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb76:	8b 00                	mov    (%eax),%eax
f012fb78:	83 e0 01             	and    $0x1,%eax
f012fb7b:	85 c0                	test   %eax,%eax
f012fb7d:	75 0a                	jne    f012fb89 <check_va2pa+0x31>
		return ~0;
f012fb7f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012fb84:	e9 87 00 00 00       	jmp    f012fc10 <check_va2pa+0xb8>
	p = (uint32*) STATIC_KERNEL_VIRTUAL_ADDRESS(EXTRACT_ADDRESS(*dirEntry));
f012fb89:	8b 45 f4             	mov    -0xc(%ebp),%eax
f012fb8c:	8b 00                	mov    (%eax),%eax
f012fb8e:	25 00 f0 ff ff       	and    $0xfffff000,%eax
f012fb93:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fb96:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fb99:	c1 e8 0c             	shr    $0xc,%eax
f012fb9c:	89 45 ec             	mov    %eax,-0x14(%ebp)
f012fb9f:	a1 70 84 6e f0       	mov    0xf06e8470,%eax
f012fba4:	39 45 ec             	cmp    %eax,-0x14(%ebp)
f012fba7:	72 17                	jb     f012fbc0 <check_va2pa+0x68>
f012fba9:	ff 75 f0             	pushl  -0x10(%ebp)
f012fbac:	68 18 c1 13 f0       	push   $0xf013c118
f012fbb1:	68 2b 01 00 00       	push   $0x12b
f012fbb6:	68 d7 be 13 f0       	push   $0xf013bed7
f012fbbb:	e8 e6 05 fd ff       	call   f01001a6 <_panic>
f012fbc0:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fbc3:	2d 00 00 00 10       	sub    $0x10000000,%eax
f012fbc8:	89 45 e8             	mov    %eax,-0x18(%ebp)

	//LOG_VARS("ptr to page table  = %x", p);

	if (!(p[PTX(va)] & PERM_PRESENT))
f012fbcb:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fbce:	c1 e8 0c             	shr    $0xc,%eax
f012fbd1:	25 ff 03 00 00       	and    $0x3ff,%eax
f012fbd6:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fbdd:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fbe0:	01 d0                	add    %edx,%eax
f012fbe2:	8b 00                	mov    (%eax),%eax
f012fbe4:	83 e0 01             	and    $0x1,%eax
f012fbe7:	85 c0                	test   %eax,%eax
f012fbe9:	75 07                	jne    f012fbf2 <check_va2pa+0x9a>
		return ~0;
f012fbeb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f012fbf0:	eb 1e                	jmp    f012fc10 <check_va2pa+0xb8>

	//LOG_VARS("page phys addres = %x",EXTRACT_ADDRESS(p[PTX(va)]));
	return EXTRACT_ADDRESS(p[PTX(va)]);
f012fbf2:	8b 45 0c             	mov    0xc(%ebp),%eax
f012fbf5:	c1 e8 0c             	shr    $0xc,%eax
f012fbf8:	25 ff 03 00 00       	and    $0x3ff,%eax
f012fbfd:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f012fc04:	8b 45 e8             	mov    -0x18(%ebp),%eax
f012fc07:	01 d0                	add    %edx,%eax
f012fc09:	8b 00                	mov    (%eax),%eax
f012fc0b:	25 00 f0 ff ff       	and    $0xfffff000,%eax
}
f012fc10:	c9                   	leave  
f012fc11:	c3                   	ret    

f012fc12 <printnum>:
 * using specified putch function and associated pointer putdat.
 */
static void
printnum(void (*putch)(int, void*), void *putdat,
	 unsigned long long num, unsigned base, int width, int padc)
{
f012fc12:	55                   	push   %ebp
f012fc13:	89 e5                	mov    %esp,%ebp
f012fc15:	53                   	push   %ebx
f012fc16:	83 ec 14             	sub    $0x14,%esp
f012fc19:	8b 45 10             	mov    0x10(%ebp),%eax
f012fc1c:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fc1f:	8b 45 14             	mov    0x14(%ebp),%eax
f012fc22:	89 45 f4             	mov    %eax,-0xc(%ebp)
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
f012fc25:	8b 45 18             	mov    0x18(%ebp),%eax
f012fc28:	ba 00 00 00 00       	mov    $0x0,%edx
f012fc2d:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012fc30:	77 55                	ja     f012fc87 <printnum+0x75>
f012fc32:	3b 55 f4             	cmp    -0xc(%ebp),%edx
f012fc35:	72 05                	jb     f012fc3c <printnum+0x2a>
f012fc37:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f012fc3a:	77 4b                	ja     f012fc87 <printnum+0x75>
		printnum(putch, putdat, num / base, base, width - 1, padc);
f012fc3c:	8b 45 1c             	mov    0x1c(%ebp),%eax
f012fc3f:	8d 58 ff             	lea    -0x1(%eax),%ebx
f012fc42:	8b 45 18             	mov    0x18(%ebp),%eax
f012fc45:	ba 00 00 00 00       	mov    $0x0,%edx
f012fc4a:	52                   	push   %edx
f012fc4b:	50                   	push   %eax
f012fc4c:	ff 75 f4             	pushl  -0xc(%ebp)
f012fc4f:	ff 75 f0             	pushl  -0x10(%ebp)
f012fc52:	e8 31 27 00 00       	call   f0132388 <__udivdi3>
f012fc57:	83 c4 10             	add    $0x10,%esp
f012fc5a:	83 ec 04             	sub    $0x4,%esp
f012fc5d:	ff 75 20             	pushl  0x20(%ebp)
f012fc60:	53                   	push   %ebx
f012fc61:	ff 75 18             	pushl  0x18(%ebp)
f012fc64:	52                   	push   %edx
f012fc65:	50                   	push   %eax
f012fc66:	ff 75 0c             	pushl  0xc(%ebp)
f012fc69:	ff 75 08             	pushl  0x8(%ebp)
f012fc6c:	e8 a1 ff ff ff       	call   f012fc12 <printnum>
f012fc71:	83 c4 20             	add    $0x20,%esp
f012fc74:	eb 1a                	jmp    f012fc90 <printnum+0x7e>
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
			putch(padc, putdat);
f012fc76:	83 ec 08             	sub    $0x8,%esp
f012fc79:	ff 75 0c             	pushl  0xc(%ebp)
f012fc7c:	ff 75 20             	pushl  0x20(%ebp)
f012fc7f:	8b 45 08             	mov    0x8(%ebp),%eax
f012fc82:	ff d0                	call   *%eax
f012fc84:	83 c4 10             	add    $0x10,%esp
	// first recursively print all preceding (more significant) digits
	if (num >= base) {
		printnum(putch, putdat, num / base, base, width - 1, padc);
	} else {
		// print any needed pad characters before first digit
		while (--width > 0)
f012fc87:	ff 4d 1c             	decl   0x1c(%ebp)
f012fc8a:	83 7d 1c 00          	cmpl   $0x0,0x1c(%ebp)
f012fc8e:	7f e6                	jg     f012fc76 <printnum+0x64>
			putch(padc, putdat);
	}

	// then print this (the least significant) digit
	putch("0123456789abcdef"[num % base], putdat);
f012fc90:	8b 4d 18             	mov    0x18(%ebp),%ecx
f012fc93:	bb 00 00 00 00       	mov    $0x0,%ebx
f012fc98:	8b 45 f0             	mov    -0x10(%ebp),%eax
f012fc9b:	8b 55 f4             	mov    -0xc(%ebp),%edx
f012fc9e:	53                   	push   %ebx
f012fc9f:	51                   	push   %ecx
f012fca0:	52                   	push   %edx
f012fca1:	50                   	push   %eax
f012fca2:	e8 f1 27 00 00       	call   f0132498 <__umoddi3>
f012fca7:	83 c4 10             	add    $0x10,%esp
f012fcaa:	05 74 c3 13 f0       	add    $0xf013c374,%eax
f012fcaf:	8a 00                	mov    (%eax),%al
f012fcb1:	0f be c0             	movsbl %al,%eax
f012fcb4:	83 ec 08             	sub    $0x8,%esp
f012fcb7:	ff 75 0c             	pushl  0xc(%ebp)
f012fcba:	50                   	push   %eax
f012fcbb:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcbe:	ff d0                	call   *%eax
f012fcc0:	83 c4 10             	add    $0x10,%esp
}
f012fcc3:	90                   	nop
f012fcc4:	8b 5d fc             	mov    -0x4(%ebp),%ebx
f012fcc7:	c9                   	leave  
f012fcc8:	c3                   	ret    

f012fcc9 <getuint>:

// Get an unsigned int of various possible sizes from a varargs list,
// depending on the lflag parameter.
static unsigned long long
getuint(va_list *ap, int lflag)
{
f012fcc9:	55                   	push   %ebp
f012fcca:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012fccc:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012fcd0:	7e 1c                	jle    f012fcee <getuint+0x25>
		return va_arg(*ap, unsigned long long);
f012fcd2:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcd5:	8b 00                	mov    (%eax),%eax
f012fcd7:	8d 50 08             	lea    0x8(%eax),%edx
f012fcda:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcdd:	89 10                	mov    %edx,(%eax)
f012fcdf:	8b 45 08             	mov    0x8(%ebp),%eax
f012fce2:	8b 00                	mov    (%eax),%eax
f012fce4:	83 e8 08             	sub    $0x8,%eax
f012fce7:	8b 50 04             	mov    0x4(%eax),%edx
f012fcea:	8b 00                	mov    (%eax),%eax
f012fcec:	eb 40                	jmp    f012fd2e <getuint+0x65>
	else if (lflag)
f012fcee:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012fcf2:	74 1e                	je     f012fd12 <getuint+0x49>
		return va_arg(*ap, unsigned long);
f012fcf4:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcf7:	8b 00                	mov    (%eax),%eax
f012fcf9:	8d 50 04             	lea    0x4(%eax),%edx
f012fcfc:	8b 45 08             	mov    0x8(%ebp),%eax
f012fcff:	89 10                	mov    %edx,(%eax)
f012fd01:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd04:	8b 00                	mov    (%eax),%eax
f012fd06:	83 e8 04             	sub    $0x4,%eax
f012fd09:	8b 00                	mov    (%eax),%eax
f012fd0b:	ba 00 00 00 00       	mov    $0x0,%edx
f012fd10:	eb 1c                	jmp    f012fd2e <getuint+0x65>
	else
		return va_arg(*ap, unsigned int);
f012fd12:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd15:	8b 00                	mov    (%eax),%eax
f012fd17:	8d 50 04             	lea    0x4(%eax),%edx
f012fd1a:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd1d:	89 10                	mov    %edx,(%eax)
f012fd1f:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd22:	8b 00                	mov    (%eax),%eax
f012fd24:	83 e8 04             	sub    $0x4,%eax
f012fd27:	8b 00                	mov    (%eax),%eax
f012fd29:	ba 00 00 00 00       	mov    $0x0,%edx
}
f012fd2e:	5d                   	pop    %ebp
f012fd2f:	c3                   	ret    

f012fd30 <getint>:

// Same as getuint but signed - can't use getuint
// because of sign extension
static long long
getint(va_list *ap, int lflag)
{
f012fd30:	55                   	push   %ebp
f012fd31:	89 e5                	mov    %esp,%ebp
	if (lflag >= 2)
f012fd33:	83 7d 0c 01          	cmpl   $0x1,0xc(%ebp)
f012fd37:	7e 1c                	jle    f012fd55 <getint+0x25>
		return va_arg(*ap, long long);
f012fd39:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd3c:	8b 00                	mov    (%eax),%eax
f012fd3e:	8d 50 08             	lea    0x8(%eax),%edx
f012fd41:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd44:	89 10                	mov    %edx,(%eax)
f012fd46:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd49:	8b 00                	mov    (%eax),%eax
f012fd4b:	83 e8 08             	sub    $0x8,%eax
f012fd4e:	8b 50 04             	mov    0x4(%eax),%edx
f012fd51:	8b 00                	mov    (%eax),%eax
f012fd53:	eb 38                	jmp    f012fd8d <getint+0x5d>
	else if (lflag)
f012fd55:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f012fd59:	74 1a                	je     f012fd75 <getint+0x45>
		return va_arg(*ap, long);
f012fd5b:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd5e:	8b 00                	mov    (%eax),%eax
f012fd60:	8d 50 04             	lea    0x4(%eax),%edx
f012fd63:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd66:	89 10                	mov    %edx,(%eax)
f012fd68:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd6b:	8b 00                	mov    (%eax),%eax
f012fd6d:	83 e8 04             	sub    $0x4,%eax
f012fd70:	8b 00                	mov    (%eax),%eax
f012fd72:	99                   	cltd   
f012fd73:	eb 18                	jmp    f012fd8d <getint+0x5d>
	else
		return va_arg(*ap, int);
f012fd75:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd78:	8b 00                	mov    (%eax),%eax
f012fd7a:	8d 50 04             	lea    0x4(%eax),%edx
f012fd7d:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd80:	89 10                	mov    %edx,(%eax)
f012fd82:	8b 45 08             	mov    0x8(%ebp),%eax
f012fd85:	8b 00                	mov    (%eax),%eax
f012fd87:	83 e8 04             	sub    $0x4,%eax
f012fd8a:	8b 00                	mov    (%eax),%eax
f012fd8c:	99                   	cltd   
}
f012fd8d:	5d                   	pop    %ebp
f012fd8e:	c3                   	ret    

f012fd8f <vprintfmt>:
// Main function to format and print a string.
void printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...);

void
vprintfmt(void (*putch)(int, void*), void *putdat, const char *fmt, va_list ap)
{
f012fd8f:	55                   	push   %ebp
f012fd90:	89 e5                	mov    %esp,%ebp
f012fd92:	56                   	push   %esi
f012fd93:	53                   	push   %ebx
f012fd94:	83 ec 20             	sub    $0x20,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012fd97:	eb 17                	jmp    f012fdb0 <vprintfmt+0x21>
			if (ch == '\0')
f012fd99:	85 db                	test   %ebx,%ebx
f012fd9b:	0f 84 af 03 00 00    	je     f0130150 <vprintfmt+0x3c1>
				return;
			putch(ch, putdat);
f012fda1:	83 ec 08             	sub    $0x8,%esp
f012fda4:	ff 75 0c             	pushl  0xc(%ebp)
f012fda7:	53                   	push   %ebx
f012fda8:	8b 45 08             	mov    0x8(%ebp),%eax
f012fdab:	ff d0                	call   *%eax
f012fdad:	83 c4 10             	add    $0x10,%esp
	unsigned long long num;
	int base, lflag, width, precision, altflag;
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
f012fdb0:	8b 45 10             	mov    0x10(%ebp),%eax
f012fdb3:	8d 50 01             	lea    0x1(%eax),%edx
f012fdb6:	89 55 10             	mov    %edx,0x10(%ebp)
f012fdb9:	8a 00                	mov    (%eax),%al
f012fdbb:	0f b6 d8             	movzbl %al,%ebx
f012fdbe:	83 fb 25             	cmp    $0x25,%ebx
f012fdc1:	75 d6                	jne    f012fd99 <vprintfmt+0xa>
				return;
			putch(ch, putdat);
		}

		// Process a %-escape sequence
		padc = ' ';
f012fdc3:	c6 45 db 20          	movb   $0x20,-0x25(%ebp)
		width = -1;
f012fdc7:	c7 45 e4 ff ff ff ff 	movl   $0xffffffff,-0x1c(%ebp)
		precision = -1;
f012fdce:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
		lflag = 0;
f012fdd5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
		altflag = 0;
f012fddc:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)
	reswitch:
		switch (ch = *(unsigned char *) fmt++) {
f012fde3:	8b 45 10             	mov    0x10(%ebp),%eax
f012fde6:	8d 50 01             	lea    0x1(%eax),%edx
f012fde9:	89 55 10             	mov    %edx,0x10(%ebp)
f012fdec:	8a 00                	mov    (%eax),%al
f012fdee:	0f b6 d8             	movzbl %al,%ebx
f012fdf1:	8d 43 dd             	lea    -0x23(%ebx),%eax
f012fdf4:	83 f8 55             	cmp    $0x55,%eax
f012fdf7:	0f 87 2b 03 00 00    	ja     f0130128 <vprintfmt+0x399>
f012fdfd:	8b 04 85 98 c3 13 f0 	mov    -0xfec3c68(,%eax,4),%eax
f012fe04:	ff e0                	jmp    *%eax

		// flag to pad on the right
		case '-':
			padc = '-';
f012fe06:	c6 45 db 2d          	movb   $0x2d,-0x25(%ebp)
			goto reswitch;
f012fe0a:	eb d7                	jmp    f012fde3 <vprintfmt+0x54>

		// flag to pad with 0's instead of spaces
		case '0':
			padc = '0';
f012fe0c:	c6 45 db 30          	movb   $0x30,-0x25(%ebp)
			goto reswitch;
f012fe10:	eb d1                	jmp    f012fde3 <vprintfmt+0x54>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012fe12:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
				precision = precision * 10 + ch - '0';
f012fe19:	8b 55 e0             	mov    -0x20(%ebp),%edx
f012fe1c:	89 d0                	mov    %edx,%eax
f012fe1e:	c1 e0 02             	shl    $0x2,%eax
f012fe21:	01 d0                	add    %edx,%eax
f012fe23:	01 c0                	add    %eax,%eax
f012fe25:	01 d8                	add    %ebx,%eax
f012fe27:	83 e8 30             	sub    $0x30,%eax
f012fe2a:	89 45 e0             	mov    %eax,-0x20(%ebp)
				ch = *fmt;
f012fe2d:	8b 45 10             	mov    0x10(%ebp),%eax
f012fe30:	8a 00                	mov    (%eax),%al
f012fe32:	0f be d8             	movsbl %al,%ebx
				if (ch < '0' || ch > '9')
f012fe35:	83 fb 2f             	cmp    $0x2f,%ebx
f012fe38:	7e 3e                	jle    f012fe78 <vprintfmt+0xe9>
f012fe3a:	83 fb 39             	cmp    $0x39,%ebx
f012fe3d:	7f 39                	jg     f012fe78 <vprintfmt+0xe9>
		case '5':
		case '6':
		case '7':
		case '8':
		case '9':
			for (precision = 0; ; ++fmt) {
f012fe3f:	ff 45 10             	incl   0x10(%ebp)
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
f012fe42:	eb d5                	jmp    f012fe19 <vprintfmt+0x8a>
			goto process_precision;

		case '*':
			precision = va_arg(ap, int);
f012fe44:	8b 45 14             	mov    0x14(%ebp),%eax
f012fe47:	83 c0 04             	add    $0x4,%eax
f012fe4a:	89 45 14             	mov    %eax,0x14(%ebp)
f012fe4d:	8b 45 14             	mov    0x14(%ebp),%eax
f012fe50:	83 e8 04             	sub    $0x4,%eax
f012fe53:	8b 00                	mov    (%eax),%eax
f012fe55:	89 45 e0             	mov    %eax,-0x20(%ebp)
			goto process_precision;
f012fe58:	eb 1f                	jmp    f012fe79 <vprintfmt+0xea>

		case '.':
			if (width < 0)
f012fe5a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fe5e:	79 83                	jns    f012fde3 <vprintfmt+0x54>
				width = 0;
f012fe60:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
			goto reswitch;
f012fe67:	e9 77 ff ff ff       	jmp    f012fde3 <vprintfmt+0x54>

		case '#':
			altflag = 1;
f012fe6c:	c7 45 dc 01 00 00 00 	movl   $0x1,-0x24(%ebp)
			goto reswitch;
f012fe73:	e9 6b ff ff ff       	jmp    f012fde3 <vprintfmt+0x54>
				precision = precision * 10 + ch - '0';
				ch = *fmt;
				if (ch < '0' || ch > '9')
					break;
			}
			goto process_precision;
f012fe78:	90                   	nop
		case '#':
			altflag = 1;
			goto reswitch;

		process_precision:
			if (width < 0)
f012fe79:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012fe7d:	0f 89 60 ff ff ff    	jns    f012fde3 <vprintfmt+0x54>
				width = precision, precision = -1;
f012fe83:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012fe86:	89 45 e4             	mov    %eax,-0x1c(%ebp)
f012fe89:	c7 45 e0 ff ff ff ff 	movl   $0xffffffff,-0x20(%ebp)
			goto reswitch;
f012fe90:	e9 4e ff ff ff       	jmp    f012fde3 <vprintfmt+0x54>

		// long flag (doubled for long long)
		case 'l':
			lflag++;
f012fe95:	ff 45 e8             	incl   -0x18(%ebp)
			goto reswitch;
f012fe98:	e9 46 ff ff ff       	jmp    f012fde3 <vprintfmt+0x54>

		// character
		case 'c':
			putch(va_arg(ap, int), putdat);
f012fe9d:	8b 45 14             	mov    0x14(%ebp),%eax
f012fea0:	83 c0 04             	add    $0x4,%eax
f012fea3:	89 45 14             	mov    %eax,0x14(%ebp)
f012fea6:	8b 45 14             	mov    0x14(%ebp),%eax
f012fea9:	83 e8 04             	sub    $0x4,%eax
f012feac:	8b 00                	mov    (%eax),%eax
f012feae:	83 ec 08             	sub    $0x8,%esp
f012feb1:	ff 75 0c             	pushl  0xc(%ebp)
f012feb4:	50                   	push   %eax
f012feb5:	8b 45 08             	mov    0x8(%ebp),%eax
f012feb8:	ff d0                	call   *%eax
f012feba:	83 c4 10             	add    $0x10,%esp
			break;
f012febd:	e9 89 02 00 00       	jmp    f013014b <vprintfmt+0x3bc>

		// error message
		case 'e':
			err = va_arg(ap, int);
f012fec2:	8b 45 14             	mov    0x14(%ebp),%eax
f012fec5:	83 c0 04             	add    $0x4,%eax
f012fec8:	89 45 14             	mov    %eax,0x14(%ebp)
f012fecb:	8b 45 14             	mov    0x14(%ebp),%eax
f012fece:	83 e8 04             	sub    $0x4,%eax
f012fed1:	8b 18                	mov    (%eax),%ebx
			if (err < 0)
f012fed3:	85 db                	test   %ebx,%ebx
f012fed5:	79 02                	jns    f012fed9 <vprintfmt+0x14a>
				err = -err;
f012fed7:	f7 db                	neg    %ebx
			if (err > MAXERROR || (p = error_string[err]) == NULL)
f012fed9:	83 fb 64             	cmp    $0x64,%ebx
f012fedc:	7f 0b                	jg     f012fee9 <vprintfmt+0x15a>
f012fede:	8b 34 9d e0 c1 13 f0 	mov    -0xfec3e20(,%ebx,4),%esi
f012fee5:	85 f6                	test   %esi,%esi
f012fee7:	75 19                	jne    f012ff02 <vprintfmt+0x173>
				printfmt(putch, putdat, "error %d", err);
f012fee9:	53                   	push   %ebx
f012feea:	68 85 c3 13 f0       	push   $0xf013c385
f012feef:	ff 75 0c             	pushl  0xc(%ebp)
f012fef2:	ff 75 08             	pushl  0x8(%ebp)
f012fef5:	e8 5e 02 00 00       	call   f0130158 <printfmt>
f012fefa:	83 c4 10             	add    $0x10,%esp
			else
				printfmt(putch, putdat, "%s", p);
			break;
f012fefd:	e9 49 02 00 00       	jmp    f013014b <vprintfmt+0x3bc>
			if (err < 0)
				err = -err;
			if (err > MAXERROR || (p = error_string[err]) == NULL)
				printfmt(putch, putdat, "error %d", err);
			else
				printfmt(putch, putdat, "%s", p);
f012ff02:	56                   	push   %esi
f012ff03:	68 8e c3 13 f0       	push   $0xf013c38e
f012ff08:	ff 75 0c             	pushl  0xc(%ebp)
f012ff0b:	ff 75 08             	pushl  0x8(%ebp)
f012ff0e:	e8 45 02 00 00       	call   f0130158 <printfmt>
f012ff13:	83 c4 10             	add    $0x10,%esp
			break;
f012ff16:	e9 30 02 00 00       	jmp    f013014b <vprintfmt+0x3bc>

		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
f012ff1b:	8b 45 14             	mov    0x14(%ebp),%eax
f012ff1e:	83 c0 04             	add    $0x4,%eax
f012ff21:	89 45 14             	mov    %eax,0x14(%ebp)
f012ff24:	8b 45 14             	mov    0x14(%ebp),%eax
f012ff27:	83 e8 04             	sub    $0x4,%eax
f012ff2a:	8b 30                	mov    (%eax),%esi
f012ff2c:	85 f6                	test   %esi,%esi
f012ff2e:	75 05                	jne    f012ff35 <vprintfmt+0x1a6>
				p = "(null)";
f012ff30:	be 91 c3 13 f0       	mov    $0xf013c391,%esi
			if (width > 0 && padc != '-')
f012ff35:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ff39:	7e 6d                	jle    f012ffa8 <vprintfmt+0x219>
f012ff3b:	80 7d db 2d          	cmpb   $0x2d,-0x25(%ebp)
f012ff3f:	74 67                	je     f012ffa8 <vprintfmt+0x219>
				for (width -= strnlen(p, precision); width > 0; width--)
f012ff41:	8b 45 e0             	mov    -0x20(%ebp),%eax
f012ff44:	83 ec 08             	sub    $0x8,%esp
f012ff47:	50                   	push   %eax
f012ff48:	56                   	push   %esi
f012ff49:	e8 12 05 00 00       	call   f0130460 <strnlen>
f012ff4e:	83 c4 10             	add    $0x10,%esp
f012ff51:	29 45 e4             	sub    %eax,-0x1c(%ebp)
f012ff54:	eb 16                	jmp    f012ff6c <vprintfmt+0x1dd>
					putch(padc, putdat);
f012ff56:	0f be 45 db          	movsbl -0x25(%ebp),%eax
f012ff5a:	83 ec 08             	sub    $0x8,%esp
f012ff5d:	ff 75 0c             	pushl  0xc(%ebp)
f012ff60:	50                   	push   %eax
f012ff61:	8b 45 08             	mov    0x8(%ebp),%eax
f012ff64:	ff d0                	call   *%eax
f012ff66:	83 c4 10             	add    $0x10,%esp
		// string
		case 's':
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
f012ff69:	ff 4d e4             	decl   -0x1c(%ebp)
f012ff6c:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ff70:	7f e4                	jg     f012ff56 <vprintfmt+0x1c7>
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012ff72:	eb 34                	jmp    f012ffa8 <vprintfmt+0x219>
				if (altflag && (ch < ' ' || ch > '~'))
f012ff74:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f012ff78:	74 1c                	je     f012ff96 <vprintfmt+0x207>
f012ff7a:	83 fb 1f             	cmp    $0x1f,%ebx
f012ff7d:	7e 05                	jle    f012ff84 <vprintfmt+0x1f5>
f012ff7f:	83 fb 7e             	cmp    $0x7e,%ebx
f012ff82:	7e 12                	jle    f012ff96 <vprintfmt+0x207>
					putch('?', putdat);
f012ff84:	83 ec 08             	sub    $0x8,%esp
f012ff87:	ff 75 0c             	pushl  0xc(%ebp)
f012ff8a:	6a 3f                	push   $0x3f
f012ff8c:	8b 45 08             	mov    0x8(%ebp),%eax
f012ff8f:	ff d0                	call   *%eax
f012ff91:	83 c4 10             	add    $0x10,%esp
f012ff94:	eb 0f                	jmp    f012ffa5 <vprintfmt+0x216>
				else
					putch(ch, putdat);
f012ff96:	83 ec 08             	sub    $0x8,%esp
f012ff99:	ff 75 0c             	pushl  0xc(%ebp)
f012ff9c:	53                   	push   %ebx
f012ff9d:	8b 45 08             	mov    0x8(%ebp),%eax
f012ffa0:	ff d0                	call   *%eax
f012ffa2:	83 c4 10             	add    $0x10,%esp
			if ((p = va_arg(ap, char *)) == NULL)
				p = "(null)";
			if (width > 0 && padc != '-')
				for (width -= strnlen(p, precision); width > 0; width--)
					putch(padc, putdat);
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
f012ffa5:	ff 4d e4             	decl   -0x1c(%ebp)
f012ffa8:	89 f0                	mov    %esi,%eax
f012ffaa:	8d 70 01             	lea    0x1(%eax),%esi
f012ffad:	8a 00                	mov    (%eax),%al
f012ffaf:	0f be d8             	movsbl %al,%ebx
f012ffb2:	85 db                	test   %ebx,%ebx
f012ffb4:	74 24                	je     f012ffda <vprintfmt+0x24b>
f012ffb6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012ffba:	78 b8                	js     f012ff74 <vprintfmt+0x1e5>
f012ffbc:	ff 4d e0             	decl   -0x20(%ebp)
f012ffbf:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
f012ffc3:	79 af                	jns    f012ff74 <vprintfmt+0x1e5>
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012ffc5:	eb 13                	jmp    f012ffda <vprintfmt+0x24b>
				putch(' ', putdat);
f012ffc7:	83 ec 08             	sub    $0x8,%esp
f012ffca:	ff 75 0c             	pushl  0xc(%ebp)
f012ffcd:	6a 20                	push   $0x20
f012ffcf:	8b 45 08             	mov    0x8(%ebp),%eax
f012ffd2:	ff d0                	call   *%eax
f012ffd4:	83 c4 10             	add    $0x10,%esp
			for (; (ch = *p++) != '\0' && (precision < 0 || --precision >= 0); width--)
				if (altflag && (ch < ' ' || ch > '~'))
					putch('?', putdat);
				else
					putch(ch, putdat);
			for (; width > 0; width--)
f012ffd7:	ff 4d e4             	decl   -0x1c(%ebp)
f012ffda:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
f012ffde:	7f e7                	jg     f012ffc7 <vprintfmt+0x238>
				putch(' ', putdat);
			break;
f012ffe0:	e9 66 01 00 00       	jmp    f013014b <vprintfmt+0x3bc>

		// (signed) decimal
		case 'd':
			num = getint(&ap, lflag);
f012ffe5:	83 ec 08             	sub    $0x8,%esp
f012ffe8:	ff 75 e8             	pushl  -0x18(%ebp)
f012ffeb:	8d 45 14             	lea    0x14(%ebp),%eax
f012ffee:	50                   	push   %eax
f012ffef:	e8 3c fd ff ff       	call   f012fd30 <getint>
f012fff4:	83 c4 10             	add    $0x10,%esp
f012fff7:	89 45 f0             	mov    %eax,-0x10(%ebp)
f012fffa:	89 55 f4             	mov    %edx,-0xc(%ebp)
			if ((long long) num < 0) {
f012fffd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130000:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130003:	85 d2                	test   %edx,%edx
f0130005:	79 23                	jns    f013002a <vprintfmt+0x29b>
				putch('-', putdat);
f0130007:	83 ec 08             	sub    $0x8,%esp
f013000a:	ff 75 0c             	pushl  0xc(%ebp)
f013000d:	6a 2d                	push   $0x2d
f013000f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130012:	ff d0                	call   *%eax
f0130014:	83 c4 10             	add    $0x10,%esp
				num = -(long long) num;
f0130017:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013001a:	8b 55 f4             	mov    -0xc(%ebp),%edx
f013001d:	f7 d8                	neg    %eax
f013001f:	83 d2 00             	adc    $0x0,%edx
f0130022:	f7 da                	neg    %edx
f0130024:	89 45 f0             	mov    %eax,-0x10(%ebp)
f0130027:	89 55 f4             	mov    %edx,-0xc(%ebp)
			}
			base = 10;
f013002a:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130031:	e9 bc 00 00 00       	jmp    f01300f2 <vprintfmt+0x363>

		// unsigned decimal
		case 'u':
			num = getuint(&ap, lflag);
f0130036:	83 ec 08             	sub    $0x8,%esp
f0130039:	ff 75 e8             	pushl  -0x18(%ebp)
f013003c:	8d 45 14             	lea    0x14(%ebp),%eax
f013003f:	50                   	push   %eax
f0130040:	e8 84 fc ff ff       	call   f012fcc9 <getuint>
f0130045:	83 c4 10             	add    $0x10,%esp
f0130048:	89 45 f0             	mov    %eax,-0x10(%ebp)
f013004b:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 10;
f013004e:	c7 45 ec 0a 00 00 00 	movl   $0xa,-0x14(%ebp)
			goto number;
f0130055:	e9 98 00 00 00       	jmp    f01300f2 <vprintfmt+0x363>

		// (unsigned) octal
		case 'o':
			// Replace this with your code.
			putch('X', putdat);
f013005a:	83 ec 08             	sub    $0x8,%esp
f013005d:	ff 75 0c             	pushl  0xc(%ebp)
f0130060:	6a 58                	push   $0x58
f0130062:	8b 45 08             	mov    0x8(%ebp),%eax
f0130065:	ff d0                	call   *%eax
f0130067:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f013006a:	83 ec 08             	sub    $0x8,%esp
f013006d:	ff 75 0c             	pushl  0xc(%ebp)
f0130070:	6a 58                	push   $0x58
f0130072:	8b 45 08             	mov    0x8(%ebp),%eax
f0130075:	ff d0                	call   *%eax
f0130077:	83 c4 10             	add    $0x10,%esp
			putch('X', putdat);
f013007a:	83 ec 08             	sub    $0x8,%esp
f013007d:	ff 75 0c             	pushl  0xc(%ebp)
f0130080:	6a 58                	push   $0x58
f0130082:	8b 45 08             	mov    0x8(%ebp),%eax
f0130085:	ff d0                	call   *%eax
f0130087:	83 c4 10             	add    $0x10,%esp
			break;
f013008a:	e9 bc 00 00 00       	jmp    f013014b <vprintfmt+0x3bc>

		// pointer
		case 'p':
			putch('0', putdat);
f013008f:	83 ec 08             	sub    $0x8,%esp
f0130092:	ff 75 0c             	pushl  0xc(%ebp)
f0130095:	6a 30                	push   $0x30
f0130097:	8b 45 08             	mov    0x8(%ebp),%eax
f013009a:	ff d0                	call   *%eax
f013009c:	83 c4 10             	add    $0x10,%esp
			putch('x', putdat);
f013009f:	83 ec 08             	sub    $0x8,%esp
f01300a2:	ff 75 0c             	pushl  0xc(%ebp)
f01300a5:	6a 78                	push   $0x78
f01300a7:	8b 45 08             	mov    0x8(%ebp),%eax
f01300aa:	ff d0                	call   *%eax
f01300ac:	83 c4 10             	add    $0x10,%esp
			num = (unsigned long long)
				(uint32) va_arg(ap, void *);
f01300af:	8b 45 14             	mov    0x14(%ebp),%eax
f01300b2:	83 c0 04             	add    $0x4,%eax
f01300b5:	89 45 14             	mov    %eax,0x14(%ebp)
f01300b8:	8b 45 14             	mov    0x14(%ebp),%eax
f01300bb:	83 e8 04             	sub    $0x4,%eax
f01300be:	8b 00                	mov    (%eax),%eax

		// pointer
		case 'p':
			putch('0', putdat);
			putch('x', putdat);
			num = (unsigned long long)
f01300c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01300c3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
				(uint32) va_arg(ap, void *);
			base = 16;
f01300ca:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
			goto number;
f01300d1:	eb 1f                	jmp    f01300f2 <vprintfmt+0x363>

		// (unsigned) hexadecimal
		case 'x':
			num = getuint(&ap, lflag);
f01300d3:	83 ec 08             	sub    $0x8,%esp
f01300d6:	ff 75 e8             	pushl  -0x18(%ebp)
f01300d9:	8d 45 14             	lea    0x14(%ebp),%eax
f01300dc:	50                   	push   %eax
f01300dd:	e8 e7 fb ff ff       	call   f012fcc9 <getuint>
f01300e2:	83 c4 10             	add    $0x10,%esp
f01300e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01300e8:	89 55 f4             	mov    %edx,-0xc(%ebp)
			base = 16;
f01300eb:	c7 45 ec 10 00 00 00 	movl   $0x10,-0x14(%ebp)
		number:
			printnum(putch, putdat, num, base, width, padc);
f01300f2:	0f be 55 db          	movsbl -0x25(%ebp),%edx
f01300f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01300f9:	83 ec 04             	sub    $0x4,%esp
f01300fc:	52                   	push   %edx
f01300fd:	ff 75 e4             	pushl  -0x1c(%ebp)
f0130100:	50                   	push   %eax
f0130101:	ff 75 f4             	pushl  -0xc(%ebp)
f0130104:	ff 75 f0             	pushl  -0x10(%ebp)
f0130107:	ff 75 0c             	pushl  0xc(%ebp)
f013010a:	ff 75 08             	pushl  0x8(%ebp)
f013010d:	e8 00 fb ff ff       	call   f012fc12 <printnum>
f0130112:	83 c4 20             	add    $0x20,%esp
			break;
f0130115:	eb 34                	jmp    f013014b <vprintfmt+0x3bc>

		// escaped '%' character
		case '%':
			putch(ch, putdat);
f0130117:	83 ec 08             	sub    $0x8,%esp
f013011a:	ff 75 0c             	pushl  0xc(%ebp)
f013011d:	53                   	push   %ebx
f013011e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130121:	ff d0                	call   *%eax
f0130123:	83 c4 10             	add    $0x10,%esp
			break;
f0130126:	eb 23                	jmp    f013014b <vprintfmt+0x3bc>

		// unrecognized escape sequence - just print it literally
		default:
			putch('%', putdat);
f0130128:	83 ec 08             	sub    $0x8,%esp
f013012b:	ff 75 0c             	pushl  0xc(%ebp)
f013012e:	6a 25                	push   $0x25
f0130130:	8b 45 08             	mov    0x8(%ebp),%eax
f0130133:	ff d0                	call   *%eax
f0130135:	83 c4 10             	add    $0x10,%esp
			for (fmt--; fmt[-1] != '%'; fmt--)
f0130138:	ff 4d 10             	decl   0x10(%ebp)
f013013b:	eb 03                	jmp    f0130140 <vprintfmt+0x3b1>
f013013d:	ff 4d 10             	decl   0x10(%ebp)
f0130140:	8b 45 10             	mov    0x10(%ebp),%eax
f0130143:	48                   	dec    %eax
f0130144:	8a 00                	mov    (%eax),%al
f0130146:	3c 25                	cmp    $0x25,%al
f0130148:	75 f3                	jne    f013013d <vprintfmt+0x3ae>
				/* do nothing */;
			break;
f013014a:	90                   	nop
		}
	}
f013014b:	e9 47 fc ff ff       	jmp    f012fd97 <vprintfmt+0x8>
	char padc;

	while (1) {
		while ((ch = *(unsigned char *) fmt++) != '%') {
			if (ch == '\0')
				return;
f0130150:	90                   	nop
			for (fmt--; fmt[-1] != '%'; fmt--)
				/* do nothing */;
			break;
		}
	}
}
f0130151:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130154:	5b                   	pop    %ebx
f0130155:	5e                   	pop    %esi
f0130156:	5d                   	pop    %ebp
f0130157:	c3                   	ret    

f0130158 <printfmt>:

void
printfmt(void (*putch)(int, void*), void *putdat, const char *fmt, ...)
{
f0130158:	55                   	push   %ebp
f0130159:	89 e5                	mov    %esp,%ebp
f013015b:	83 ec 18             	sub    $0x18,%esp
	va_list ap;

	va_start(ap, fmt);
f013015e:	8d 45 10             	lea    0x10(%ebp),%eax
f0130161:	83 c0 04             	add    $0x4,%eax
f0130164:	89 45 f4             	mov    %eax,-0xc(%ebp)
	vprintfmt(putch, putdat, fmt, ap);
f0130167:	8b 45 10             	mov    0x10(%ebp),%eax
f013016a:	ff 75 f4             	pushl  -0xc(%ebp)
f013016d:	50                   	push   %eax
f013016e:	ff 75 0c             	pushl  0xc(%ebp)
f0130171:	ff 75 08             	pushl  0x8(%ebp)
f0130174:	e8 16 fc ff ff       	call   f012fd8f <vprintfmt>
f0130179:	83 c4 10             	add    $0x10,%esp
	va_end(ap);
}
f013017c:	90                   	nop
f013017d:	c9                   	leave  
f013017e:	c3                   	ret    

f013017f <sprintputch>:
	int cnt;
};

static void
sprintputch(int ch, struct sprintbuf *b)
{
f013017f:	55                   	push   %ebp
f0130180:	89 e5                	mov    %esp,%ebp
	b->cnt++;
f0130182:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130185:	8b 40 08             	mov    0x8(%eax),%eax
f0130188:	8d 50 01             	lea    0x1(%eax),%edx
f013018b:	8b 45 0c             	mov    0xc(%ebp),%eax
f013018e:	89 50 08             	mov    %edx,0x8(%eax)
	if (b->buf < b->ebuf)
f0130191:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130194:	8b 10                	mov    (%eax),%edx
f0130196:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130199:	8b 40 04             	mov    0x4(%eax),%eax
f013019c:	39 c2                	cmp    %eax,%edx
f013019e:	73 12                	jae    f01301b2 <sprintputch+0x33>
		*b->buf++ = ch;
f01301a0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01301a3:	8b 00                	mov    (%eax),%eax
f01301a5:	8d 48 01             	lea    0x1(%eax),%ecx
f01301a8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01301ab:	89 0a                	mov    %ecx,(%edx)
f01301ad:	8b 55 08             	mov    0x8(%ebp),%edx
f01301b0:	88 10                	mov    %dl,(%eax)
}
f01301b2:	90                   	nop
f01301b3:	5d                   	pop    %ebp
f01301b4:	c3                   	ret    

f01301b5 <vsnprintf>:

int
vsnprintf(char *buf, int n, const char *fmt, va_list ap)
{
f01301b5:	55                   	push   %ebp
f01301b6:	89 e5                	mov    %esp,%ebp
f01301b8:	83 ec 18             	sub    $0x18,%esp
	struct sprintbuf b = {buf, buf+n-1, 0};
f01301bb:	8b 45 08             	mov    0x8(%ebp),%eax
f01301be:	89 45 ec             	mov    %eax,-0x14(%ebp)
f01301c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01301c4:	8d 50 ff             	lea    -0x1(%eax),%edx
f01301c7:	8b 45 08             	mov    0x8(%ebp),%eax
f01301ca:	01 d0                	add    %edx,%eax
f01301cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
f01301cf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	if (buf == NULL || n < 1)
f01301d6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01301da:	74 06                	je     f01301e2 <vsnprintf+0x2d>
f01301dc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01301e0:	7f 07                	jg     f01301e9 <vsnprintf+0x34>
		return -E_INVAL;
f01301e2:	b8 03 00 00 00       	mov    $0x3,%eax
f01301e7:	eb 20                	jmp    f0130209 <vsnprintf+0x54>

	// print the string to the buffer
	vprintfmt((void*)sprintputch, &b, fmt, ap);
f01301e9:	ff 75 14             	pushl  0x14(%ebp)
f01301ec:	ff 75 10             	pushl  0x10(%ebp)
f01301ef:	8d 45 ec             	lea    -0x14(%ebp),%eax
f01301f2:	50                   	push   %eax
f01301f3:	68 7f 01 13 f0       	push   $0xf013017f
f01301f8:	e8 92 fb ff ff       	call   f012fd8f <vprintfmt>
f01301fd:	83 c4 10             	add    $0x10,%esp

	// null terminate the buffer
	*b.buf = '\0';
f0130200:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0130203:	c6 00 00             	movb   $0x0,(%eax)

	return b.cnt;
f0130206:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
f0130209:	c9                   	leave  
f013020a:	c3                   	ret    

f013020b <snprintf>:

int
snprintf(char *buf, int n, const char *fmt, ...)
{
f013020b:	55                   	push   %ebp
f013020c:	89 e5                	mov    %esp,%ebp
f013020e:	83 ec 18             	sub    $0x18,%esp
	va_list ap;
	int rc;

	va_start(ap, fmt);
f0130211:	8d 45 10             	lea    0x10(%ebp),%eax
f0130214:	83 c0 04             	add    $0x4,%eax
f0130217:	89 45 f4             	mov    %eax,-0xc(%ebp)
	rc = vsnprintf(buf, n, fmt, ap);
f013021a:	8b 45 10             	mov    0x10(%ebp),%eax
f013021d:	ff 75 f4             	pushl  -0xc(%ebp)
f0130220:	50                   	push   %eax
f0130221:	ff 75 0c             	pushl  0xc(%ebp)
f0130224:	ff 75 08             	pushl  0x8(%ebp)
f0130227:	e8 89 ff ff ff       	call   f01301b5 <vsnprintf>
f013022c:	83 c4 10             	add    $0x10,%esp
f013022f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	va_end(ap);

	return rc;
f0130232:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
f0130235:	c9                   	leave  
f0130236:	c3                   	ret    

f0130237 <readline>:
#include <inc/lib.h>

//static char buf[BUFLEN];

void readline(const char *prompt, char* buf)
{
f0130237:	55                   	push   %ebp
f0130238:	89 e5                	mov    %esp,%ebp
f013023a:	83 ec 18             	sub    $0x18,%esp
		int i, c, echoing;

	if (prompt != NULL)
f013023d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130241:	74 13                	je     f0130256 <readline+0x1f>
		cprintf("%s", prompt);
f0130243:	83 ec 08             	sub    $0x8,%esp
f0130246:	ff 75 08             	pushl  0x8(%ebp)
f0130249:	68 f0 c4 13 f0       	push   $0xf013c4f0
f013024e:	e8 da 09 fd ff       	call   f0100c2d <cprintf>
f0130253:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130256:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f013025d:	83 ec 0c             	sub    $0xc,%esp
f0130260:	6a 00                	push   $0x0
f0130262:	e8 73 09 fd ff       	call   f0100bda <iscons>
f0130267:	83 c4 10             	add    $0x10,%esp
f013026a:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f013026d:	e8 4f 09 fd ff       	call   f0100bc1 <getchar>
f0130272:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130275:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0130279:	79 22                	jns    f013029d <readline+0x66>
			if (c != -E_EOF)
f013027b:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f013027f:	0f 84 ad 00 00 00    	je     f0130332 <readline+0xfb>
				cprintf("read error: %e\n", c);
f0130285:	83 ec 08             	sub    $0x8,%esp
f0130288:	ff 75 ec             	pushl  -0x14(%ebp)
f013028b:	68 f3 c4 13 f0       	push   $0xf013c4f3
f0130290:	e8 98 09 fd ff       	call   f0100c2d <cprintf>
f0130295:	83 c4 10             	add    $0x10,%esp
			return;
f0130298:	e9 95 00 00 00       	jmp    f0130332 <readline+0xfb>
		} else if (c >= ' ' && i < BUFLEN-1) {
f013029d:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01302a1:	7e 34                	jle    f01302d7 <readline+0xa0>
f01302a3:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01302aa:	7f 2b                	jg     f01302d7 <readline+0xa0>
			if (echoing)
f01302ac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01302b0:	74 0e                	je     f01302c0 <readline+0x89>
				cputchar(c);
f01302b2:	83 ec 0c             	sub    $0xc,%esp
f01302b5:	ff 75 ec             	pushl  -0x14(%ebp)
f01302b8:	e8 ed 08 fd ff       	call   f0100baa <cputchar>
f01302bd:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01302c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01302c3:	8d 50 01             	lea    0x1(%eax),%edx
f01302c6:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01302c9:	89 c2                	mov    %eax,%edx
f01302cb:	8b 45 0c             	mov    0xc(%ebp),%eax
f01302ce:	01 d0                	add    %edx,%eax
f01302d0:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01302d3:	88 10                	mov    %dl,(%eax)
f01302d5:	eb 56                	jmp    f013032d <readline+0xf6>
		} else if (c == '\b' && i > 0) {
f01302d7:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01302db:	75 1f                	jne    f01302fc <readline+0xc5>
f01302dd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01302e1:	7e 19                	jle    f01302fc <readline+0xc5>
			if (echoing)
f01302e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01302e7:	74 0e                	je     f01302f7 <readline+0xc0>
				cputchar(c);
f01302e9:	83 ec 0c             	sub    $0xc,%esp
f01302ec:	ff 75 ec             	pushl  -0x14(%ebp)
f01302ef:	e8 b6 08 fd ff       	call   f0100baa <cputchar>
f01302f4:	83 c4 10             	add    $0x10,%esp

			i--;
f01302f7:	ff 4d f4             	decl   -0xc(%ebp)
f01302fa:	eb 31                	jmp    f013032d <readline+0xf6>
		} else if (c == '\n' || c == '\r') {
f01302fc:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0130300:	74 0a                	je     f013030c <readline+0xd5>
f0130302:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f0130306:	0f 85 61 ff ff ff    	jne    f013026d <readline+0x36>
			if (echoing)
f013030c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130310:	74 0e                	je     f0130320 <readline+0xe9>
				cputchar(c);
f0130312:	83 ec 0c             	sub    $0xc,%esp
f0130315:	ff 75 ec             	pushl  -0x14(%ebp)
f0130318:	e8 8d 08 fd ff       	call   f0100baa <cputchar>
f013031d:	83 c4 10             	add    $0x10,%esp

			buf[i] = 0;
f0130320:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130323:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130326:	01 d0                	add    %edx,%eax
f0130328:	c6 00 00             	movb   $0x0,(%eax)
			return;
f013032b:	eb 06                	jmp    f0130333 <readline+0xfc>
		}
	}
f013032d:	e9 3b ff ff ff       	jmp    f013026d <readline+0x36>
	while (1) {
		c = getchar();
		if (c < 0) {
			if (c != -E_EOF)
				cprintf("read error: %e\n", c);
			return;
f0130332:	90                   	nop
			buf[i] = 0;
			return;
		}
	}

}
f0130333:	c9                   	leave  
f0130334:	c3                   	ret    

f0130335 <atomic_readline>:

void atomic_readline(const char *prompt, char* buf)
{
f0130335:	55                   	push   %ebp
f0130336:	89 e5                	mov    %esp,%ebp
f0130338:	83 ec 18             	sub    $0x18,%esp
	sys_disable_interrupt();
f013033b:	e8 11 bf fd ff       	call   f010c251 <sys_disable_interrupt>
	int i, c, echoing;

	if (prompt != NULL)
f0130340:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130344:	74 13                	je     f0130359 <atomic_readline+0x24>
		cprintf("%s", prompt);
f0130346:	83 ec 08             	sub    $0x8,%esp
f0130349:	ff 75 08             	pushl  0x8(%ebp)
f013034c:	68 f0 c4 13 f0       	push   $0xf013c4f0
f0130351:	e8 d7 08 fd ff       	call   f0100c2d <cprintf>
f0130356:	83 c4 10             	add    $0x10,%esp

	i = 0;
f0130359:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	echoing = iscons(0);
f0130360:	83 ec 0c             	sub    $0xc,%esp
f0130363:	6a 00                	push   $0x0
f0130365:	e8 70 08 fd ff       	call   f0100bda <iscons>
f013036a:	83 c4 10             	add    $0x10,%esp
f013036d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (1) {
		c = getchar();
f0130370:	e8 4c 08 fd ff       	call   f0100bc1 <getchar>
f0130375:	89 45 ec             	mov    %eax,-0x14(%ebp)
		if (c < 0) {
f0130378:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f013037c:	79 23                	jns    f01303a1 <atomic_readline+0x6c>
			if (c != -E_EOF)
f013037e:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
f0130382:	74 13                	je     f0130397 <atomic_readline+0x62>
				cprintf("read error: %e\n", c);
f0130384:	83 ec 08             	sub    $0x8,%esp
f0130387:	ff 75 ec             	pushl  -0x14(%ebp)
f013038a:	68 f3 c4 13 f0       	push   $0xf013c4f3
f013038f:	e8 99 08 fd ff       	call   f0100c2d <cprintf>
f0130394:	83 c4 10             	add    $0x10,%esp
			sys_enable_interrupt();
f0130397:	e8 cf be fd ff       	call   f010c26b <sys_enable_interrupt>
			return;
f013039c:	e9 9a 00 00 00       	jmp    f013043b <atomic_readline+0x106>
		} else if (c >= ' ' && i < BUFLEN-1) {
f01303a1:	83 7d ec 1f          	cmpl   $0x1f,-0x14(%ebp)
f01303a5:	7e 34                	jle    f01303db <atomic_readline+0xa6>
f01303a7:	81 7d f4 fe 03 00 00 	cmpl   $0x3fe,-0xc(%ebp)
f01303ae:	7f 2b                	jg     f01303db <atomic_readline+0xa6>
			if (echoing)
f01303b0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01303b4:	74 0e                	je     f01303c4 <atomic_readline+0x8f>
				cputchar(c);
f01303b6:	83 ec 0c             	sub    $0xc,%esp
f01303b9:	ff 75 ec             	pushl  -0x14(%ebp)
f01303bc:	e8 e9 07 fd ff       	call   f0100baa <cputchar>
f01303c1:	83 c4 10             	add    $0x10,%esp
			buf[i++] = c;
f01303c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01303c7:	8d 50 01             	lea    0x1(%eax),%edx
f01303ca:	89 55 f4             	mov    %edx,-0xc(%ebp)
f01303cd:	89 c2                	mov    %eax,%edx
f01303cf:	8b 45 0c             	mov    0xc(%ebp),%eax
f01303d2:	01 d0                	add    %edx,%eax
f01303d4:	8b 55 ec             	mov    -0x14(%ebp),%edx
f01303d7:	88 10                	mov    %dl,(%eax)
f01303d9:	eb 5b                	jmp    f0130436 <atomic_readline+0x101>
		} else if (c == '\b' && i > 0) {
f01303db:	83 7d ec 08          	cmpl   $0x8,-0x14(%ebp)
f01303df:	75 1f                	jne    f0130400 <atomic_readline+0xcb>
f01303e1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01303e5:	7e 19                	jle    f0130400 <atomic_readline+0xcb>
			if (echoing)
f01303e7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01303eb:	74 0e                	je     f01303fb <atomic_readline+0xc6>
				cputchar(c);
f01303ed:	83 ec 0c             	sub    $0xc,%esp
f01303f0:	ff 75 ec             	pushl  -0x14(%ebp)
f01303f3:	e8 b2 07 fd ff       	call   f0100baa <cputchar>
f01303f8:	83 c4 10             	add    $0x10,%esp
			i--;
f01303fb:	ff 4d f4             	decl   -0xc(%ebp)
f01303fe:	eb 36                	jmp    f0130436 <atomic_readline+0x101>
		} else if (c == '\n' || c == '\r') {
f0130400:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
f0130404:	74 0a                	je     f0130410 <atomic_readline+0xdb>
f0130406:	83 7d ec 0d          	cmpl   $0xd,-0x14(%ebp)
f013040a:	0f 85 60 ff ff ff    	jne    f0130370 <atomic_readline+0x3b>
			if (echoing)
f0130410:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130414:	74 0e                	je     f0130424 <atomic_readline+0xef>
				cputchar(c);
f0130416:	83 ec 0c             	sub    $0xc,%esp
f0130419:	ff 75 ec             	pushl  -0x14(%ebp)
f013041c:	e8 89 07 fd ff       	call   f0100baa <cputchar>
f0130421:	83 c4 10             	add    $0x10,%esp
			buf[i] = 0;
f0130424:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130427:	8b 45 0c             	mov    0xc(%ebp),%eax
f013042a:	01 d0                	add    %edx,%eax
f013042c:	c6 00 00             	movb   $0x0,(%eax)
			sys_enable_interrupt();
f013042f:	e8 37 be fd ff       	call   f010c26b <sys_enable_interrupt>
			return;
f0130434:	eb 05                	jmp    f013043b <atomic_readline+0x106>
		}
	}
f0130436:	e9 35 ff ff ff       	jmp    f0130370 <atomic_readline+0x3b>
}
f013043b:	c9                   	leave  
f013043c:	c3                   	ret    

f013043d <strlen>:

#include <inc/string.h>

int
strlen(const char *s)
{
f013043d:	55                   	push   %ebp
f013043e:	89 e5                	mov    %esp,%ebp
f0130440:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; *s != '\0'; s++)
f0130443:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f013044a:	eb 06                	jmp    f0130452 <strlen+0x15>
		n++;
f013044c:	ff 45 fc             	incl   -0x4(%ebp)
int
strlen(const char *s)
{
	int n;

	for (n = 0; *s != '\0'; s++)
f013044f:	ff 45 08             	incl   0x8(%ebp)
f0130452:	8b 45 08             	mov    0x8(%ebp),%eax
f0130455:	8a 00                	mov    (%eax),%al
f0130457:	84 c0                	test   %al,%al
f0130459:	75 f1                	jne    f013044c <strlen+0xf>
		n++;
	return n;
f013045b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013045e:	c9                   	leave  
f013045f:	c3                   	ret    

f0130460 <strnlen>:

int
strnlen(const char *s, uint32 size)
{
f0130460:	55                   	push   %ebp
f0130461:	89 e5                	mov    %esp,%ebp
f0130463:	83 ec 10             	sub    $0x10,%esp
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130466:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f013046d:	eb 09                	jmp    f0130478 <strnlen+0x18>
		n++;
f013046f:	ff 45 fc             	incl   -0x4(%ebp)
int
strnlen(const char *s, uint32 size)
{
	int n;

	for (n = 0; size > 0 && *s != '\0'; s++, size--)
f0130472:	ff 45 08             	incl   0x8(%ebp)
f0130475:	ff 4d 0c             	decl   0xc(%ebp)
f0130478:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f013047c:	74 09                	je     f0130487 <strnlen+0x27>
f013047e:	8b 45 08             	mov    0x8(%ebp),%eax
f0130481:	8a 00                	mov    (%eax),%al
f0130483:	84 c0                	test   %al,%al
f0130485:	75 e8                	jne    f013046f <strnlen+0xf>
		n++;
	return n;
f0130487:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f013048a:	c9                   	leave  
f013048b:	c3                   	ret    

f013048c <strcpy>:

char *
strcpy(char *dst, const char *src)
{
f013048c:	55                   	push   %ebp
f013048d:	89 e5                	mov    %esp,%ebp
f013048f:	83 ec 10             	sub    $0x10,%esp
	char *ret;

	ret = dst;
f0130492:	8b 45 08             	mov    0x8(%ebp),%eax
f0130495:	89 45 fc             	mov    %eax,-0x4(%ebp)
	while ((*dst++ = *src++) != '\0')
f0130498:	90                   	nop
f0130499:	8b 45 08             	mov    0x8(%ebp),%eax
f013049c:	8d 50 01             	lea    0x1(%eax),%edx
f013049f:	89 55 08             	mov    %edx,0x8(%ebp)
f01304a2:	8b 55 0c             	mov    0xc(%ebp),%edx
f01304a5:	8d 4a 01             	lea    0x1(%edx),%ecx
f01304a8:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f01304ab:	8a 12                	mov    (%edx),%dl
f01304ad:	88 10                	mov    %dl,(%eax)
f01304af:	8a 00                	mov    (%eax),%al
f01304b1:	84 c0                	test   %al,%al
f01304b3:	75 e4                	jne    f0130499 <strcpy+0xd>
		/* do nothing */;
	return ret;
f01304b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
f01304b8:	c9                   	leave  
f01304b9:	c3                   	ret    

f01304ba <strncpy>:

char *
strncpy(char *dst, const char *src, uint32 size) {
f01304ba:	55                   	push   %ebp
f01304bb:	89 e5                	mov    %esp,%ebp
f01304bd:	83 ec 10             	sub    $0x10,%esp
	uint32 i;
	char *ret;

	ret = dst;
f01304c0:	8b 45 08             	mov    0x8(%ebp),%eax
f01304c3:	89 45 f8             	mov    %eax,-0x8(%ebp)
	for (i = 0; i < size; i++) {
f01304c6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f01304cd:	eb 1f                	jmp    f01304ee <strncpy+0x34>
		*dst++ = *src;
f01304cf:	8b 45 08             	mov    0x8(%ebp),%eax
f01304d2:	8d 50 01             	lea    0x1(%eax),%edx
f01304d5:	89 55 08             	mov    %edx,0x8(%ebp)
f01304d8:	8b 55 0c             	mov    0xc(%ebp),%edx
f01304db:	8a 12                	mov    (%edx),%dl
f01304dd:	88 10                	mov    %dl,(%eax)
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
f01304df:	8b 45 0c             	mov    0xc(%ebp),%eax
f01304e2:	8a 00                	mov    (%eax),%al
f01304e4:	84 c0                	test   %al,%al
f01304e6:	74 03                	je     f01304eb <strncpy+0x31>
			src++;
f01304e8:	ff 45 0c             	incl   0xc(%ebp)
strncpy(char *dst, const char *src, uint32 size) {
	uint32 i;
	char *ret;

	ret = dst;
	for (i = 0; i < size; i++) {
f01304eb:	ff 45 fc             	incl   -0x4(%ebp)
f01304ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01304f1:	3b 45 10             	cmp    0x10(%ebp),%eax
f01304f4:	72 d9                	jb     f01304cf <strncpy+0x15>
		*dst++ = *src;
		// If strlen(src) < size, null-pad 'dst' out to 'size' chars
		if (*src != '\0')
			src++;
	}
	return ret;
f01304f6:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01304f9:	c9                   	leave  
f01304fa:	c3                   	ret    

f01304fb <strlcpy>:

uint32
strlcpy(char *dst, const char *src, uint32 size)
{
f01304fb:	55                   	push   %ebp
f01304fc:	89 e5                	mov    %esp,%ebp
f01304fe:	83 ec 10             	sub    $0x10,%esp
	char *dst_in;

	dst_in = dst;
f0130501:	8b 45 08             	mov    0x8(%ebp),%eax
f0130504:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (size > 0) {
f0130507:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013050b:	74 30                	je     f013053d <strlcpy+0x42>
		while (--size > 0 && *src != '\0')
f013050d:	eb 16                	jmp    f0130525 <strlcpy+0x2a>
			*dst++ = *src++;
f013050f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130512:	8d 50 01             	lea    0x1(%eax),%edx
f0130515:	89 55 08             	mov    %edx,0x8(%ebp)
f0130518:	8b 55 0c             	mov    0xc(%ebp),%edx
f013051b:	8d 4a 01             	lea    0x1(%edx),%ecx
f013051e:	89 4d 0c             	mov    %ecx,0xc(%ebp)
f0130521:	8a 12                	mov    (%edx),%dl
f0130523:	88 10                	mov    %dl,(%eax)
{
	char *dst_in;

	dst_in = dst;
	if (size > 0) {
		while (--size > 0 && *src != '\0')
f0130525:	ff 4d 10             	decl   0x10(%ebp)
f0130528:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f013052c:	74 09                	je     f0130537 <strlcpy+0x3c>
f013052e:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130531:	8a 00                	mov    (%eax),%al
f0130533:	84 c0                	test   %al,%al
f0130535:	75 d8                	jne    f013050f <strlcpy+0x14>
			*dst++ = *src++;
		*dst = '\0';
f0130537:	8b 45 08             	mov    0x8(%ebp),%eax
f013053a:	c6 00 00             	movb   $0x0,(%eax)
	}
	return dst - dst_in;
f013053d:	8b 55 08             	mov    0x8(%ebp),%edx
f0130540:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130543:	29 c2                	sub    %eax,%edx
f0130545:	89 d0                	mov    %edx,%eax
}
f0130547:	c9                   	leave  
f0130548:	c3                   	ret    

f0130549 <strcmp>:

int
strcmp(const char *p, const char *q)
{
f0130549:	55                   	push   %ebp
f013054a:	89 e5                	mov    %esp,%ebp
	while (*p && *p == *q)
f013054c:	eb 06                	jmp    f0130554 <strcmp+0xb>
		p++, q++;
f013054e:	ff 45 08             	incl   0x8(%ebp)
f0130551:	ff 45 0c             	incl   0xc(%ebp)
}

int
strcmp(const char *p, const char *q)
{
	while (*p && *p == *q)
f0130554:	8b 45 08             	mov    0x8(%ebp),%eax
f0130557:	8a 00                	mov    (%eax),%al
f0130559:	84 c0                	test   %al,%al
f013055b:	74 0e                	je     f013056b <strcmp+0x22>
f013055d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130560:	8a 10                	mov    (%eax),%dl
f0130562:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130565:	8a 00                	mov    (%eax),%al
f0130567:	38 c2                	cmp    %al,%dl
f0130569:	74 e3                	je     f013054e <strcmp+0x5>
		p++, q++;
	return (int) ((unsigned char) *p - (unsigned char) *q);
f013056b:	8b 45 08             	mov    0x8(%ebp),%eax
f013056e:	8a 00                	mov    (%eax),%al
f0130570:	0f b6 d0             	movzbl %al,%edx
f0130573:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130576:	8a 00                	mov    (%eax),%al
f0130578:	0f b6 c0             	movzbl %al,%eax
f013057b:	29 c2                	sub    %eax,%edx
f013057d:	89 d0                	mov    %edx,%eax
}
f013057f:	5d                   	pop    %ebp
f0130580:	c3                   	ret    

f0130581 <strncmp>:

int
strncmp(const char *p, const char *q, uint32 n)
{
f0130581:	55                   	push   %ebp
f0130582:	89 e5                	mov    %esp,%ebp
	while (n > 0 && *p && *p == *q)
f0130584:	eb 09                	jmp    f013058f <strncmp+0xe>
		n--, p++, q++;
f0130586:	ff 4d 10             	decl   0x10(%ebp)
f0130589:	ff 45 08             	incl   0x8(%ebp)
f013058c:	ff 45 0c             	incl   0xc(%ebp)
}

int
strncmp(const char *p, const char *q, uint32 n)
{
	while (n > 0 && *p && *p == *q)
f013058f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130593:	74 17                	je     f01305ac <strncmp+0x2b>
f0130595:	8b 45 08             	mov    0x8(%ebp),%eax
f0130598:	8a 00                	mov    (%eax),%al
f013059a:	84 c0                	test   %al,%al
f013059c:	74 0e                	je     f01305ac <strncmp+0x2b>
f013059e:	8b 45 08             	mov    0x8(%ebp),%eax
f01305a1:	8a 10                	mov    (%eax),%dl
f01305a3:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305a6:	8a 00                	mov    (%eax),%al
f01305a8:	38 c2                	cmp    %al,%dl
f01305aa:	74 da                	je     f0130586 <strncmp+0x5>
		n--, p++, q++;
	if (n == 0)
f01305ac:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01305b0:	75 07                	jne    f01305b9 <strncmp+0x38>
		return 0;
f01305b2:	b8 00 00 00 00       	mov    $0x0,%eax
f01305b7:	eb 14                	jmp    f01305cd <strncmp+0x4c>
	else
		return (int) ((unsigned char) *p - (unsigned char) *q);
f01305b9:	8b 45 08             	mov    0x8(%ebp),%eax
f01305bc:	8a 00                	mov    (%eax),%al
f01305be:	0f b6 d0             	movzbl %al,%edx
f01305c1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305c4:	8a 00                	mov    (%eax),%al
f01305c6:	0f b6 c0             	movzbl %al,%eax
f01305c9:	29 c2                	sub    %eax,%edx
f01305cb:	89 d0                	mov    %edx,%eax
}
f01305cd:	5d                   	pop    %ebp
f01305ce:	c3                   	ret    

f01305cf <strchr>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
f01305cf:	55                   	push   %ebp
f01305d0:	89 e5                	mov    %esp,%ebp
f01305d2:	83 ec 04             	sub    $0x4,%esp
f01305d5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01305d8:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f01305db:	eb 12                	jmp    f01305ef <strchr+0x20>
		if (*s == c)
f01305dd:	8b 45 08             	mov    0x8(%ebp),%eax
f01305e0:	8a 00                	mov    (%eax),%al
f01305e2:	3a 45 fc             	cmp    -0x4(%ebp),%al
f01305e5:	75 05                	jne    f01305ec <strchr+0x1d>
			return (char *) s;
f01305e7:	8b 45 08             	mov    0x8(%ebp),%eax
f01305ea:	eb 11                	jmp    f01305fd <strchr+0x2e>
// Return a pointer to the first occurrence of 'c' in 's',
// or a null pointer if the string has no 'c'.
char *
strchr(const char *s, char c)
{
	for (; *s; s++)
f01305ec:	ff 45 08             	incl   0x8(%ebp)
f01305ef:	8b 45 08             	mov    0x8(%ebp),%eax
f01305f2:	8a 00                	mov    (%eax),%al
f01305f4:	84 c0                	test   %al,%al
f01305f6:	75 e5                	jne    f01305dd <strchr+0xe>
		if (*s == c)
			return (char *) s;
	return 0;
f01305f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01305fd:	c9                   	leave  
f01305fe:	c3                   	ret    

f01305ff <strfind>:

// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
f01305ff:	55                   	push   %ebp
f0130600:	89 e5                	mov    %esp,%ebp
f0130602:	83 ec 04             	sub    $0x4,%esp
f0130605:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130608:	88 45 fc             	mov    %al,-0x4(%ebp)
	for (; *s; s++)
f013060b:	eb 0d                	jmp    f013061a <strfind+0x1b>
		if (*s == c)
f013060d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130610:	8a 00                	mov    (%eax),%al
f0130612:	3a 45 fc             	cmp    -0x4(%ebp),%al
f0130615:	74 0e                	je     f0130625 <strfind+0x26>
// Return a pointer to the first occurrence of 'c' in 's',
// or a pointer to the string-ending null character if the string has no 'c'.
char *
strfind(const char *s, char c)
{
	for (; *s; s++)
f0130617:	ff 45 08             	incl   0x8(%ebp)
f013061a:	8b 45 08             	mov    0x8(%ebp),%eax
f013061d:	8a 00                	mov    (%eax),%al
f013061f:	84 c0                	test   %al,%al
f0130621:	75 ea                	jne    f013060d <strfind+0xe>
f0130623:	eb 01                	jmp    f0130626 <strfind+0x27>
		if (*s == c)
			break;
f0130625:	90                   	nop
	return (char *) s;
f0130626:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130629:	c9                   	leave  
f013062a:	c3                   	ret    

f013062b <memset>:


void *
memset(void *v, int c, uint32 n)
{
f013062b:	55                   	push   %ebp
f013062c:	89 e5                	mov    %esp,%ebp
f013062e:	83 ec 10             	sub    $0x10,%esp
	char *p;
	int m;

	p = v;
f0130631:	8b 45 08             	mov    0x8(%ebp),%eax
f0130634:	89 45 fc             	mov    %eax,-0x4(%ebp)
	m = n;
f0130637:	8b 45 10             	mov    0x10(%ebp),%eax
f013063a:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (--m >= 0)
f013063d:	eb 0e                	jmp    f013064d <memset+0x22>
		*p++ = c;
f013063f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130642:	8d 50 01             	lea    0x1(%eax),%edx
f0130645:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0130648:	8b 55 0c             	mov    0xc(%ebp),%edx
f013064b:	88 10                	mov    %dl,(%eax)
	char *p;
	int m;

	p = v;
	m = n;
	while (--m >= 0)
f013064d:	ff 4d f8             	decl   -0x8(%ebp)
f0130650:	83 7d f8 00          	cmpl   $0x0,-0x8(%ebp)
f0130654:	79 e9                	jns    f013063f <memset+0x14>
		*p++ = c;

	return v;
f0130656:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130659:	c9                   	leave  
f013065a:	c3                   	ret    

f013065b <memcpy>:

void *
memcpy(void *dst, const void *src, uint32 n)
{
f013065b:	55                   	push   %ebp
f013065c:	89 e5                	mov    %esp,%ebp
f013065e:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f0130661:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130664:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f0130667:	8b 45 08             	mov    0x8(%ebp),%eax
f013066a:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (n-- > 0)
f013066d:	eb 16                	jmp    f0130685 <memcpy+0x2a>
		*d++ = *s++;
f013066f:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130672:	8d 50 01             	lea    0x1(%eax),%edx
f0130675:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130678:	8b 55 fc             	mov    -0x4(%ebp),%edx
f013067b:	8d 4a 01             	lea    0x1(%edx),%ecx
f013067e:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f0130681:	8a 12                	mov    (%edx),%dl
f0130683:	88 10                	mov    %dl,(%eax)
	const char *s;
	char *d;

	s = src;
	d = dst;
	while (n-- > 0)
f0130685:	8b 45 10             	mov    0x10(%ebp),%eax
f0130688:	8d 50 ff             	lea    -0x1(%eax),%edx
f013068b:	89 55 10             	mov    %edx,0x10(%ebp)
f013068e:	85 c0                	test   %eax,%eax
f0130690:	75 dd                	jne    f013066f <memcpy+0x14>
		*d++ = *s++;

	return dst;
f0130692:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130695:	c9                   	leave  
f0130696:	c3                   	ret    

f0130697 <memmove>:

void *
memmove(void *dst, const void *src, uint32 n)
{
f0130697:	55                   	push   %ebp
f0130698:	89 e5                	mov    %esp,%ebp
f013069a:	83 ec 10             	sub    $0x10,%esp
	const char *s;
	char *d;

	s = src;
f013069d:	8b 45 0c             	mov    0xc(%ebp),%eax
f01306a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
	d = dst;
f01306a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01306a6:	89 45 f8             	mov    %eax,-0x8(%ebp)
	if (s < d && s + n > d) {
f01306a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01306ac:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f01306af:	73 50                	jae    f0130701 <memmove+0x6a>
f01306b1:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01306b4:	8b 45 10             	mov    0x10(%ebp),%eax
f01306b7:	01 d0                	add    %edx,%eax
f01306b9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
f01306bc:	76 43                	jbe    f0130701 <memmove+0x6a>
		s += n;
f01306be:	8b 45 10             	mov    0x10(%ebp),%eax
f01306c1:	01 45 fc             	add    %eax,-0x4(%ebp)
		d += n;
f01306c4:	8b 45 10             	mov    0x10(%ebp),%eax
f01306c7:	01 45 f8             	add    %eax,-0x8(%ebp)
		while (n-- > 0)
f01306ca:	eb 10                	jmp    f01306dc <memmove+0x45>
			*--d = *--s;
f01306cc:	ff 4d f8             	decl   -0x8(%ebp)
f01306cf:	ff 4d fc             	decl   -0x4(%ebp)
f01306d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01306d5:	8a 10                	mov    (%eax),%dl
f01306d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01306da:	88 10                	mov    %dl,(%eax)
	s = src;
	d = dst;
	if (s < d && s + n > d) {
		s += n;
		d += n;
		while (n-- > 0)
f01306dc:	8b 45 10             	mov    0x10(%ebp),%eax
f01306df:	8d 50 ff             	lea    -0x1(%eax),%edx
f01306e2:	89 55 10             	mov    %edx,0x10(%ebp)
f01306e5:	85 c0                	test   %eax,%eax
f01306e7:	75 e3                	jne    f01306cc <memmove+0x35>
	const char *s;
	char *d;

	s = src;
	d = dst;
	if (s < d && s + n > d) {
f01306e9:	eb 23                	jmp    f013070e <memmove+0x77>
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
			*d++ = *s++;
f01306eb:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01306ee:	8d 50 01             	lea    0x1(%eax),%edx
f01306f1:	89 55 f8             	mov    %edx,-0x8(%ebp)
f01306f4:	8b 55 fc             	mov    -0x4(%ebp),%edx
f01306f7:	8d 4a 01             	lea    0x1(%edx),%ecx
f01306fa:	89 4d fc             	mov    %ecx,-0x4(%ebp)
f01306fd:	8a 12                	mov    (%edx),%dl
f01306ff:	88 10                	mov    %dl,(%eax)
		s += n;
		d += n;
		while (n-- > 0)
			*--d = *--s;
	} else
		while (n-- > 0)
f0130701:	8b 45 10             	mov    0x10(%ebp),%eax
f0130704:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130707:	89 55 10             	mov    %edx,0x10(%ebp)
f013070a:	85 c0                	test   %eax,%eax
f013070c:	75 dd                	jne    f01306eb <memmove+0x54>
			*d++ = *s++;

	return dst;
f013070e:	8b 45 08             	mov    0x8(%ebp),%eax
}
f0130711:	c9                   	leave  
f0130712:	c3                   	ret    

f0130713 <memcmp>:

int
memcmp(const void *v1, const void *v2, uint32 n)
{
f0130713:	55                   	push   %ebp
f0130714:	89 e5                	mov    %esp,%ebp
f0130716:	83 ec 10             	sub    $0x10,%esp
	const uint8 *s1 = (const uint8 *) v1;
f0130719:	8b 45 08             	mov    0x8(%ebp),%eax
f013071c:	89 45 fc             	mov    %eax,-0x4(%ebp)
	const uint8 *s2 = (const uint8 *) v2;
f013071f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130722:	89 45 f8             	mov    %eax,-0x8(%ebp)

	while (n-- > 0) {
f0130725:	eb 2a                	jmp    f0130751 <memcmp+0x3e>
		if (*s1 != *s2)
f0130727:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013072a:	8a 10                	mov    (%eax),%dl
f013072c:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013072f:	8a 00                	mov    (%eax),%al
f0130731:	38 c2                	cmp    %al,%dl
f0130733:	74 16                	je     f013074b <memcmp+0x38>
			return (int) *s1 - (int) *s2;
f0130735:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130738:	8a 00                	mov    (%eax),%al
f013073a:	0f b6 d0             	movzbl %al,%edx
f013073d:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130740:	8a 00                	mov    (%eax),%al
f0130742:	0f b6 c0             	movzbl %al,%eax
f0130745:	29 c2                	sub    %eax,%edx
f0130747:	89 d0                	mov    %edx,%eax
f0130749:	eb 18                	jmp    f0130763 <memcmp+0x50>
		s1++, s2++;
f013074b:	ff 45 fc             	incl   -0x4(%ebp)
f013074e:	ff 45 f8             	incl   -0x8(%ebp)
memcmp(const void *v1, const void *v2, uint32 n)
{
	const uint8 *s1 = (const uint8 *) v1;
	const uint8 *s2 = (const uint8 *) v2;

	while (n-- > 0) {
f0130751:	8b 45 10             	mov    0x10(%ebp),%eax
f0130754:	8d 50 ff             	lea    -0x1(%eax),%edx
f0130757:	89 55 10             	mov    %edx,0x10(%ebp)
f013075a:	85 c0                	test   %eax,%eax
f013075c:	75 c9                	jne    f0130727 <memcmp+0x14>
		if (*s1 != *s2)
			return (int) *s1 - (int) *s2;
		s1++, s2++;
	}

	return 0;
f013075e:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130763:	c9                   	leave  
f0130764:	c3                   	ret    

f0130765 <memfind>:

void *
memfind(const void *s, int c, uint32 n)
{
f0130765:	55                   	push   %ebp
f0130766:	89 e5                	mov    %esp,%ebp
f0130768:	83 ec 10             	sub    $0x10,%esp
	const void *ends = (const char *) s + n;
f013076b:	8b 55 08             	mov    0x8(%ebp),%edx
f013076e:	8b 45 10             	mov    0x10(%ebp),%eax
f0130771:	01 d0                	add    %edx,%eax
f0130773:	89 45 fc             	mov    %eax,-0x4(%ebp)
	for (; s < ends; s++)
f0130776:	eb 15                	jmp    f013078d <memfind+0x28>
		if (*(const unsigned char *) s == (unsigned char) c)
f0130778:	8b 45 08             	mov    0x8(%ebp),%eax
f013077b:	8a 00                	mov    (%eax),%al
f013077d:	0f b6 d0             	movzbl %al,%edx
f0130780:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130783:	0f b6 c0             	movzbl %al,%eax
f0130786:	39 c2                	cmp    %eax,%edx
f0130788:	74 0d                	je     f0130797 <memfind+0x32>

void *
memfind(const void *s, int c, uint32 n)
{
	const void *ends = (const char *) s + n;
	for (; s < ends; s++)
f013078a:	ff 45 08             	incl   0x8(%ebp)
f013078d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130790:	3b 45 fc             	cmp    -0x4(%ebp),%eax
f0130793:	72 e3                	jb     f0130778 <memfind+0x13>
f0130795:	eb 01                	jmp    f0130798 <memfind+0x33>
		if (*(const unsigned char *) s == (unsigned char) c)
			break;
f0130797:	90                   	nop
	return (void *) s;
f0130798:	8b 45 08             	mov    0x8(%ebp),%eax
}
f013079b:	c9                   	leave  
f013079c:	c3                   	ret    

f013079d <strtol>:

long
strtol(const char *s, char **endptr, int base)
{
f013079d:	55                   	push   %ebp
f013079e:	89 e5                	mov    %esp,%ebp
f01307a0:	83 ec 10             	sub    $0x10,%esp
	int neg = 0;
f01307a3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	long val = 0;
f01307aa:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f01307b1:	eb 03                	jmp    f01307b6 <strtol+0x19>
		s++;
f01307b3:	ff 45 08             	incl   0x8(%ebp)
{
	int neg = 0;
	long val = 0;

	// gobble initial whitespace
	while (*s == ' ' || *s == '\t')
f01307b6:	8b 45 08             	mov    0x8(%ebp),%eax
f01307b9:	8a 00                	mov    (%eax),%al
f01307bb:	3c 20                	cmp    $0x20,%al
f01307bd:	74 f4                	je     f01307b3 <strtol+0x16>
f01307bf:	8b 45 08             	mov    0x8(%ebp),%eax
f01307c2:	8a 00                	mov    (%eax),%al
f01307c4:	3c 09                	cmp    $0x9,%al
f01307c6:	74 eb                	je     f01307b3 <strtol+0x16>
		s++;

	// plus/minus sign
	if (*s == '+')
f01307c8:	8b 45 08             	mov    0x8(%ebp),%eax
f01307cb:	8a 00                	mov    (%eax),%al
f01307cd:	3c 2b                	cmp    $0x2b,%al
f01307cf:	75 05                	jne    f01307d6 <strtol+0x39>
		s++;
f01307d1:	ff 45 08             	incl   0x8(%ebp)
f01307d4:	eb 13                	jmp    f01307e9 <strtol+0x4c>
	else if (*s == '-')
f01307d6:	8b 45 08             	mov    0x8(%ebp),%eax
f01307d9:	8a 00                	mov    (%eax),%al
f01307db:	3c 2d                	cmp    $0x2d,%al
f01307dd:	75 0a                	jne    f01307e9 <strtol+0x4c>
		s++, neg = 1;
f01307df:	ff 45 08             	incl   0x8(%ebp)
f01307e2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)

	// hex or octal base prefix
	if ((base == 0 || base == 16) && (s[0] == '0' && s[1] == 'x'))
f01307e9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f01307ed:	74 06                	je     f01307f5 <strtol+0x58>
f01307ef:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
f01307f3:	75 20                	jne    f0130815 <strtol+0x78>
f01307f5:	8b 45 08             	mov    0x8(%ebp),%eax
f01307f8:	8a 00                	mov    (%eax),%al
f01307fa:	3c 30                	cmp    $0x30,%al
f01307fc:	75 17                	jne    f0130815 <strtol+0x78>
f01307fe:	8b 45 08             	mov    0x8(%ebp),%eax
f0130801:	40                   	inc    %eax
f0130802:	8a 00                	mov    (%eax),%al
f0130804:	3c 78                	cmp    $0x78,%al
f0130806:	75 0d                	jne    f0130815 <strtol+0x78>
		s += 2, base = 16;
f0130808:	83 45 08 02          	addl   $0x2,0x8(%ebp)
f013080c:	c7 45 10 10 00 00 00 	movl   $0x10,0x10(%ebp)
f0130813:	eb 28                	jmp    f013083d <strtol+0xa0>
	else if (base == 0 && s[0] == '0')
f0130815:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130819:	75 15                	jne    f0130830 <strtol+0x93>
f013081b:	8b 45 08             	mov    0x8(%ebp),%eax
f013081e:	8a 00                	mov    (%eax),%al
f0130820:	3c 30                	cmp    $0x30,%al
f0130822:	75 0c                	jne    f0130830 <strtol+0x93>
		s++, base = 8;
f0130824:	ff 45 08             	incl   0x8(%ebp)
f0130827:	c7 45 10 08 00 00 00 	movl   $0x8,0x10(%ebp)
f013082e:	eb 0d                	jmp    f013083d <strtol+0xa0>
	else if (base == 0)
f0130830:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130834:	75 07                	jne    f013083d <strtol+0xa0>
		base = 10;
f0130836:	c7 45 10 0a 00 00 00 	movl   $0xa,0x10(%ebp)

	// digits
	while (1) {
		int dig;

		if (*s >= '0' && *s <= '9')
f013083d:	8b 45 08             	mov    0x8(%ebp),%eax
f0130840:	8a 00                	mov    (%eax),%al
f0130842:	3c 2f                	cmp    $0x2f,%al
f0130844:	7e 19                	jle    f013085f <strtol+0xc2>
f0130846:	8b 45 08             	mov    0x8(%ebp),%eax
f0130849:	8a 00                	mov    (%eax),%al
f013084b:	3c 39                	cmp    $0x39,%al
f013084d:	7f 10                	jg     f013085f <strtol+0xc2>
			dig = *s - '0';
f013084f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130852:	8a 00                	mov    (%eax),%al
f0130854:	0f be c0             	movsbl %al,%eax
f0130857:	83 e8 30             	sub    $0x30,%eax
f013085a:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013085d:	eb 42                	jmp    f01308a1 <strtol+0x104>
		else if (*s >= 'a' && *s <= 'z')
f013085f:	8b 45 08             	mov    0x8(%ebp),%eax
f0130862:	8a 00                	mov    (%eax),%al
f0130864:	3c 60                	cmp    $0x60,%al
f0130866:	7e 19                	jle    f0130881 <strtol+0xe4>
f0130868:	8b 45 08             	mov    0x8(%ebp),%eax
f013086b:	8a 00                	mov    (%eax),%al
f013086d:	3c 7a                	cmp    $0x7a,%al
f013086f:	7f 10                	jg     f0130881 <strtol+0xe4>
			dig = *s - 'a' + 10;
f0130871:	8b 45 08             	mov    0x8(%ebp),%eax
f0130874:	8a 00                	mov    (%eax),%al
f0130876:	0f be c0             	movsbl %al,%eax
f0130879:	83 e8 57             	sub    $0x57,%eax
f013087c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013087f:	eb 20                	jmp    f01308a1 <strtol+0x104>
		else if (*s >= 'A' && *s <= 'Z')
f0130881:	8b 45 08             	mov    0x8(%ebp),%eax
f0130884:	8a 00                	mov    (%eax),%al
f0130886:	3c 40                	cmp    $0x40,%al
f0130888:	7e 39                	jle    f01308c3 <strtol+0x126>
f013088a:	8b 45 08             	mov    0x8(%ebp),%eax
f013088d:	8a 00                	mov    (%eax),%al
f013088f:	3c 5a                	cmp    $0x5a,%al
f0130891:	7f 30                	jg     f01308c3 <strtol+0x126>
			dig = *s - 'A' + 10;
f0130893:	8b 45 08             	mov    0x8(%ebp),%eax
f0130896:	8a 00                	mov    (%eax),%al
f0130898:	0f be c0             	movsbl %al,%eax
f013089b:	83 e8 37             	sub    $0x37,%eax
f013089e:	89 45 f4             	mov    %eax,-0xc(%ebp)
		else
			break;
		if (dig >= base)
f01308a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01308a4:	3b 45 10             	cmp    0x10(%ebp),%eax
f01308a7:	7d 19                	jge    f01308c2 <strtol+0x125>
			break;
		s++, val = (val * base) + dig;
f01308a9:	ff 45 08             	incl   0x8(%ebp)
f01308ac:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01308af:	0f af 45 10          	imul   0x10(%ebp),%eax
f01308b3:	89 c2                	mov    %eax,%edx
f01308b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01308b8:	01 d0                	add    %edx,%eax
f01308ba:	89 45 f8             	mov    %eax,-0x8(%ebp)
		// we don't properly detect overflow!
	}
f01308bd:	e9 7b ff ff ff       	jmp    f013083d <strtol+0xa0>
		else if (*s >= 'A' && *s <= 'Z')
			dig = *s - 'A' + 10;
		else
			break;
		if (dig >= base)
			break;
f01308c2:	90                   	nop
		s++, val = (val * base) + dig;
		// we don't properly detect overflow!
	}

	if (endptr)
f01308c3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
f01308c7:	74 08                	je     f01308d1 <strtol+0x134>
		*endptr = (char *) s;
f01308c9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01308cc:	8b 55 08             	mov    0x8(%ebp),%edx
f01308cf:	89 10                	mov    %edx,(%eax)
	return (neg ? -val : val);
f01308d1:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01308d5:	74 07                	je     f01308de <strtol+0x141>
f01308d7:	8b 45 f8             	mov    -0x8(%ebp),%eax
f01308da:	f7 d8                	neg    %eax
f01308dc:	eb 03                	jmp    f01308e1 <strtol+0x144>
f01308de:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
f01308e1:	c9                   	leave  
f01308e2:	c3                   	ret    

f01308e3 <ltostr>:

void
ltostr(long value, char *str)
{
f01308e3:	55                   	push   %ebp
f01308e4:	89 e5                	mov    %esp,%ebp
f01308e6:	83 ec 20             	sub    $0x20,%esp
	int neg = 0;
f01308e9:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	int s = 0 ;
f01308f0:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)

	// plus/minus sign
	if (value < 0)
f01308f7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01308fb:	79 13                	jns    f0130910 <ltostr+0x2d>
	{
		neg = 1;
f01308fd:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
		str[0] = '-';
f0130904:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130907:	c6 00 2d             	movb   $0x2d,(%eax)
		value = value * -1 ;
f013090a:	f7 5d 08             	negl   0x8(%ebp)
		s++ ;
f013090d:	ff 45 f8             	incl   -0x8(%ebp)
	}
	do
	{
		int mod = value % 10 ;
f0130910:	8b 45 08             	mov    0x8(%ebp),%eax
f0130913:	b9 0a 00 00 00       	mov    $0xa,%ecx
f0130918:	99                   	cltd   
f0130919:	f7 f9                	idiv   %ecx
f013091b:	89 55 ec             	mov    %edx,-0x14(%ebp)
		str[s++] = mod + '0' ;
f013091e:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130921:	8d 50 01             	lea    0x1(%eax),%edx
f0130924:	89 55 f8             	mov    %edx,-0x8(%ebp)
f0130927:	89 c2                	mov    %eax,%edx
f0130929:	8b 45 0c             	mov    0xc(%ebp),%eax
f013092c:	01 d0                	add    %edx,%eax
f013092e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130931:	83 c2 30             	add    $0x30,%edx
f0130934:	88 10                	mov    %dl,(%eax)
		value = value / 10 ;
f0130936:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0130939:	b8 67 66 66 66       	mov    $0x66666667,%eax
f013093e:	f7 e9                	imul   %ecx
f0130940:	c1 fa 02             	sar    $0x2,%edx
f0130943:	89 c8                	mov    %ecx,%eax
f0130945:	c1 f8 1f             	sar    $0x1f,%eax
f0130948:	29 c2                	sub    %eax,%edx
f013094a:	89 d0                	mov    %edx,%eax
f013094c:	89 45 08             	mov    %eax,0x8(%ebp)
	} while (value % 10 != 0);
f013094f:	8b 4d 08             	mov    0x8(%ebp),%ecx
f0130952:	b8 67 66 66 66       	mov    $0x66666667,%eax
f0130957:	f7 e9                	imul   %ecx
f0130959:	c1 fa 02             	sar    $0x2,%edx
f013095c:	89 c8                	mov    %ecx,%eax
f013095e:	c1 f8 1f             	sar    $0x1f,%eax
f0130961:	29 c2                	sub    %eax,%edx
f0130963:	89 d0                	mov    %edx,%eax
f0130965:	c1 e0 02             	shl    $0x2,%eax
f0130968:	01 d0                	add    %edx,%eax
f013096a:	01 c0                	add    %eax,%eax
f013096c:	29 c1                	sub    %eax,%ecx
f013096e:	89 ca                	mov    %ecx,%edx
f0130970:	85 d2                	test   %edx,%edx
f0130972:	75 9c                	jne    f0130910 <ltostr+0x2d>

	//reverse the string
	int start = 0 ;
f0130974:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	int end = s-1 ;
f013097b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f013097e:	48                   	dec    %eax
f013097f:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (neg)
f0130982:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f0130986:	74 3d                	je     f01309c5 <ltostr+0xe2>
		start = 1 ;
f0130988:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
	while(start<end)
f013098f:	eb 34                	jmp    f01309c5 <ltostr+0xe2>
	{
		char tmp = str[start] ;
f0130991:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130994:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130997:	01 d0                	add    %edx,%eax
f0130999:	8a 00                	mov    (%eax),%al
f013099b:	88 45 eb             	mov    %al,-0x15(%ebp)
		str[start] = str[end] ;
f013099e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01309a1:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309a4:	01 c2                	add    %eax,%edx
f01309a6:	8b 4d f0             	mov    -0x10(%ebp),%ecx
f01309a9:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309ac:	01 c8                	add    %ecx,%eax
f01309ae:	8a 00                	mov    (%eax),%al
f01309b0:	88 02                	mov    %al,(%edx)
		str[end] = tmp;
f01309b2:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01309b5:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309b8:	01 c2                	add    %eax,%edx
f01309ba:	8a 45 eb             	mov    -0x15(%ebp),%al
f01309bd:	88 02                	mov    %al,(%edx)
		start++ ;
f01309bf:	ff 45 f4             	incl   -0xc(%ebp)
		end-- ;
f01309c2:	ff 4d f0             	decl   -0x10(%ebp)
	//reverse the string
	int start = 0 ;
	int end = s-1 ;
	if (neg)
		start = 1 ;
	while(start<end)
f01309c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01309c8:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f01309cb:	7c c4                	jl     f0130991 <ltostr+0xae>
		str[end] = tmp;
		start++ ;
		end-- ;
	}

	str[s] = 0 ;
f01309cd:	8b 55 f8             	mov    -0x8(%ebp),%edx
f01309d0:	8b 45 0c             	mov    0xc(%ebp),%eax
f01309d3:	01 d0                	add    %edx,%eax
f01309d5:	c6 00 00             	movb   $0x0,(%eax)
	// we don't properly detect overflow!

}
f01309d8:	90                   	nop
f01309d9:	c9                   	leave  
f01309da:	c3                   	ret    

f01309db <strcconcat>:

void
strcconcat(const char *str1, const char *str2, char *final)
{
f01309db:	55                   	push   %ebp
f01309dc:	89 e5                	mov    %esp,%ebp
f01309de:	83 ec 10             	sub    $0x10,%esp
	int len1 = strlen(str1);
f01309e1:	ff 75 08             	pushl  0x8(%ebp)
f01309e4:	e8 54 fa ff ff       	call   f013043d <strlen>
f01309e9:	83 c4 04             	add    $0x4,%esp
f01309ec:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len2 = strlen(str2);
f01309ef:	ff 75 0c             	pushl  0xc(%ebp)
f01309f2:	e8 46 fa ff ff       	call   f013043d <strlen>
f01309f7:	83 c4 04             	add    $0x4,%esp
f01309fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int s = 0 ;
f01309fd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
	for (s=0 ; s < len1 ; s++)
f0130a04:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130a0b:	eb 17                	jmp    f0130a24 <strcconcat+0x49>
		final[s] = str1[s] ;
f0130a0d:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130a10:	8b 45 10             	mov    0x10(%ebp),%eax
f0130a13:	01 c2                	add    %eax,%edx
f0130a15:	8b 4d fc             	mov    -0x4(%ebp),%ecx
f0130a18:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a1b:	01 c8                	add    %ecx,%eax
f0130a1d:	8a 00                	mov    (%eax),%al
f0130a1f:	88 02                	mov    %al,(%edx)
strcconcat(const char *str1, const char *str2, char *final)
{
	int len1 = strlen(str1);
	int len2 = strlen(str2);
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
f0130a21:	ff 45 fc             	incl   -0x4(%ebp)
f0130a24:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130a27:	3b 45 f4             	cmp    -0xc(%ebp),%eax
f0130a2a:	7c e1                	jl     f0130a0d <strcconcat+0x32>
		final[s] = str1[s] ;

	int i = 0 ;
f0130a2c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	for (i=0 ; i < len2 ; i++)
f0130a33:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
f0130a3a:	eb 1f                	jmp    f0130a5b <strcconcat+0x80>
		final[s++] = str2[i] ;
f0130a3c:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130a3f:	8d 50 01             	lea    0x1(%eax),%edx
f0130a42:	89 55 fc             	mov    %edx,-0x4(%ebp)
f0130a45:	89 c2                	mov    %eax,%edx
f0130a47:	8b 45 10             	mov    0x10(%ebp),%eax
f0130a4a:	01 c2                	add    %eax,%edx
f0130a4c:	8b 4d f8             	mov    -0x8(%ebp),%ecx
f0130a4f:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130a52:	01 c8                	add    %ecx,%eax
f0130a54:	8a 00                	mov    (%eax),%al
f0130a56:	88 02                	mov    %al,(%edx)
	int s = 0 ;
	for (s=0 ; s < len1 ; s++)
		final[s] = str1[s] ;

	int i = 0 ;
	for (i=0 ; i < len2 ; i++)
f0130a58:	ff 45 f8             	incl   -0x8(%ebp)
f0130a5b:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130a5e:	3b 45 f0             	cmp    -0x10(%ebp),%eax
f0130a61:	7c d9                	jl     f0130a3c <strcconcat+0x61>
		final[s++] = str2[i] ;

	final[s] = 0;
f0130a63:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130a66:	8b 45 10             	mov    0x10(%ebp),%eax
f0130a69:	01 d0                	add    %edx,%eax
f0130a6b:	c6 00 00             	movb   $0x0,(%eax)
}
f0130a6e:	90                   	nop
f0130a6f:	c9                   	leave  
f0130a70:	c3                   	ret    

f0130a71 <strsplit>:
int strsplit(char *string, char *SPLIT_CHARS, char **argv, int * argc)
{
f0130a71:	55                   	push   %ebp
f0130a72:	89 e5                	mov    %esp,%ebp
	// Parse the command string into splitchars-separated arguments
	*argc = 0;
f0130a74:	8b 45 14             	mov    0x14(%ebp),%eax
f0130a77:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	(argv)[*argc] = 0;
f0130a7d:	8b 45 14             	mov    0x14(%ebp),%eax
f0130a80:	8b 00                	mov    (%eax),%eax
f0130a82:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130a89:	8b 45 10             	mov    0x10(%ebp),%eax
f0130a8c:	01 d0                	add    %edx,%eax
f0130a8e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0130a94:	eb 0c                	jmp    f0130aa2 <strsplit+0x31>
			*string++ = 0;
f0130a96:	8b 45 08             	mov    0x8(%ebp),%eax
f0130a99:	8d 50 01             	lea    0x1(%eax),%edx
f0130a9c:	89 55 08             	mov    %edx,0x8(%ebp)
f0130a9f:	c6 00 00             	movb   $0x0,(%eax)
	*argc = 0;
	(argv)[*argc] = 0;
	while (1)
	{
		// trim splitchars
		while (*string && strchr(SPLIT_CHARS, *string))
f0130aa2:	8b 45 08             	mov    0x8(%ebp),%eax
f0130aa5:	8a 00                	mov    (%eax),%al
f0130aa7:	84 c0                	test   %al,%al
f0130aa9:	74 18                	je     f0130ac3 <strsplit+0x52>
f0130aab:	8b 45 08             	mov    0x8(%ebp),%eax
f0130aae:	8a 00                	mov    (%eax),%al
f0130ab0:	0f be c0             	movsbl %al,%eax
f0130ab3:	50                   	push   %eax
f0130ab4:	ff 75 0c             	pushl  0xc(%ebp)
f0130ab7:	e8 13 fb ff ff       	call   f01305cf <strchr>
f0130abc:	83 c4 08             	add    $0x8,%esp
f0130abf:	85 c0                	test   %eax,%eax
f0130ac1:	75 d3                	jne    f0130a96 <strsplit+0x25>
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
f0130ac3:	8b 45 08             	mov    0x8(%ebp),%eax
f0130ac6:	8a 00                	mov    (%eax),%al
f0130ac8:	84 c0                	test   %al,%al
f0130aca:	74 5a                	je     f0130b26 <strsplit+0xb5>
			break;

		//check current number of arguments
		if (*argc == MAX_ARGUMENTS-1)
f0130acc:	8b 45 14             	mov    0x14(%ebp),%eax
f0130acf:	8b 00                	mov    (%eax),%eax
f0130ad1:	83 f8 0f             	cmp    $0xf,%eax
f0130ad4:	75 07                	jne    f0130add <strsplit+0x6c>
		{
			return 0;
f0130ad6:	b8 00 00 00 00       	mov    $0x0,%eax
f0130adb:	eb 66                	jmp    f0130b43 <strsplit+0xd2>
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
f0130add:	8b 45 14             	mov    0x14(%ebp),%eax
f0130ae0:	8b 00                	mov    (%eax),%eax
f0130ae2:	8d 48 01             	lea    0x1(%eax),%ecx
f0130ae5:	8b 55 14             	mov    0x14(%ebp),%edx
f0130ae8:	89 0a                	mov    %ecx,(%edx)
f0130aea:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130af1:	8b 45 10             	mov    0x10(%ebp),%eax
f0130af4:	01 c2                	add    %eax,%edx
f0130af6:	8b 45 08             	mov    0x8(%ebp),%eax
f0130af9:	89 02                	mov    %eax,(%edx)
		while (*string && !strchr(SPLIT_CHARS, *string))
f0130afb:	eb 03                	jmp    f0130b00 <strsplit+0x8f>
			string++;
f0130afd:	ff 45 08             	incl   0x8(%ebp)
			return 0;
		}

		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
f0130b00:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b03:	8a 00                	mov    (%eax),%al
f0130b05:	84 c0                	test   %al,%al
f0130b07:	74 8b                	je     f0130a94 <strsplit+0x23>
f0130b09:	8b 45 08             	mov    0x8(%ebp),%eax
f0130b0c:	8a 00                	mov    (%eax),%al
f0130b0e:	0f be c0             	movsbl %al,%eax
f0130b11:	50                   	push   %eax
f0130b12:	ff 75 0c             	pushl  0xc(%ebp)
f0130b15:	e8 b5 fa ff ff       	call   f01305cf <strchr>
f0130b1a:	83 c4 08             	add    $0x8,%esp
f0130b1d:	85 c0                	test   %eax,%eax
f0130b1f:	74 dc                	je     f0130afd <strsplit+0x8c>
			string++;
	}
f0130b21:	e9 6e ff ff ff       	jmp    f0130a94 <strsplit+0x23>
		while (*string && strchr(SPLIT_CHARS, *string))
			*string++ = 0;

		//if the command string is finished, then break the loop
		if (*string == 0)
			break;
f0130b26:	90                   	nop
		// save the previous argument and scan past next arg
		(argv)[(*argc)++] = string;
		while (*string && !strchr(SPLIT_CHARS, *string))
			string++;
	}
	(argv)[*argc] = 0;
f0130b27:	8b 45 14             	mov    0x14(%ebp),%eax
f0130b2a:	8b 00                	mov    (%eax),%eax
f0130b2c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
f0130b33:	8b 45 10             	mov    0x10(%ebp),%eax
f0130b36:	01 d0                	add    %edx,%eax
f0130b38:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
	return 1 ;
f0130b3e:	b8 01 00 00 00       	mov    $0x1,%eax
}
f0130b43:	c9                   	leave  
f0130b44:	c3                   	ret    

f0130b45 <ide_wait_ready>:
#define IDE_ERR		0x01

static int diskno = 0;

static int ide_wait_ready(bool check_error)
{
f0130b45:	55                   	push   %ebp
f0130b46:	89 e5                	mov    %esp,%ebp
f0130b48:	83 ec 10             	sub    $0x10,%esp
	int r;

	while (((r = inb(0x1F7)) & (IDE_BSY|IDE_DRDY)) != IDE_DRDY)
f0130b4b:	90                   	nop
f0130b4c:	c7 45 f8 f7 01 00 00 	movl   $0x1f7,-0x8(%ebp)

static __inline uint8
inb(int port)
{
	uint8 data;
	__asm __volatile("inb %w1,%0" : "=a" (data) : "d" (port));
f0130b53:	8b 45 f8             	mov    -0x8(%ebp),%eax
f0130b56:	89 c2                	mov    %eax,%edx
f0130b58:	ec                   	in     (%dx),%al
f0130b59:	88 45 f7             	mov    %al,-0x9(%ebp)
	return data;
f0130b5c:	8a 45 f7             	mov    -0x9(%ebp),%al
f0130b5f:	0f b6 c0             	movzbl %al,%eax
f0130b62:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0130b65:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130b68:	25 c0 00 00 00       	and    $0xc0,%eax
f0130b6d:	83 f8 40             	cmp    $0x40,%eax
f0130b70:	75 da                	jne    f0130b4c <ide_wait_ready+0x7>
		/* do nothing */;


	if (check_error && (r & (IDE_DF|IDE_ERR)) != 0)
f0130b72:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0130b76:	74 11                	je     f0130b89 <ide_wait_ready+0x44>
f0130b78:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130b7b:	83 e0 21             	and    $0x21,%eax
f0130b7e:	85 c0                	test   %eax,%eax
f0130b80:	74 07                	je     f0130b89 <ide_wait_ready+0x44>
	{
 		LOG_STATMENT(cprintf("ERROR @ ide_wait_ready() = %x(%d)\n",r,r););
		return -1;
f0130b82:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
f0130b87:	eb 05                	jmp    f0130b8e <ide_wait_ready+0x49>
	}
	return 0;
f0130b89:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130b8e:	c9                   	leave  
f0130b8f:	c3                   	ret    

f0130b90 <ide_read>:

int	ide_read(uint32 secno, void *dst, uint32 nsecs)
{
f0130b90:	55                   	push   %ebp
f0130b91:	89 e5                	mov    %esp,%ebp
f0130b93:	57                   	push   %edi
f0130b94:	53                   	push   %ebx
f0130b95:	83 ec 30             	sub    $0x30,%esp
	int r;

	assert(nsecs <= 256);
f0130b98:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0130b9f:	76 16                	jbe    f0130bb7 <ide_read+0x27>
f0130ba1:	68 03 c5 13 f0       	push   $0xf013c503
f0130ba6:	68 10 c5 13 f0       	push   $0xf013c510
f0130bab:	6a 25                	push   $0x25
f0130bad:	68 25 c5 13 f0       	push   $0xf013c525
f0130bb2:	e8 ef f5 fc ff       	call   f01001a6 <_panic>

	ide_wait_ready(0);
f0130bb7:	83 ec 0c             	sub    $0xc,%esp
f0130bba:	6a 00                	push   $0x0
f0130bbc:	e8 84 ff ff ff       	call   f0130b45 <ide_wait_ready>
f0130bc1:	83 c4 10             	add    $0x10,%esp

	outb(0x1F2, nsecs);
f0130bc4:	8b 45 10             	mov    0x10(%ebp),%eax
f0130bc7:	0f b6 c0             	movzbl %al,%eax
f0130bca:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0130bd1:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0130bd4:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0130bd7:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130bda:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0130bdb:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bde:	0f b6 c0             	movzbl %al,%eax
f0130be1:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0130be8:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0130beb:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0130bee:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130bf1:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0130bf2:	8b 45 08             	mov    0x8(%ebp),%eax
f0130bf5:	c1 e8 08             	shr    $0x8,%eax
f0130bf8:	0f b6 c0             	movzbl %al,%eax
f0130bfb:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0130c02:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0130c05:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0130c08:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130c0b:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0130c0c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c0f:	c1 e8 10             	shr    $0x10,%eax
f0130c12:	0f b6 c0             	movzbl %al,%eax
f0130c15:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0130c1c:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0130c1f:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0130c22:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0130c25:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0130c26:	a1 cc 8f 65 f0       	mov    0xf0658fcc,%eax
f0130c2b:	83 e0 01             	and    $0x1,%eax
f0130c2e:	c1 e0 04             	shl    $0x4,%eax
f0130c31:	88 c2                	mov    %al,%dl
f0130c33:	8b 45 08             	mov    0x8(%ebp),%eax
f0130c36:	c1 e8 18             	shr    $0x18,%eax
f0130c39:	83 e0 0f             	and    $0xf,%eax
f0130c3c:	09 d0                	or     %edx,%eax
f0130c3e:	83 c8 e0             	or     $0xffffffe0,%eax
f0130c41:	0f b6 c0             	movzbl %al,%eax
f0130c44:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0130c4b:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0130c4e:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0130c51:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0130c54:	ee                   	out    %al,(%dx)
f0130c55:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0130c5c:	c6 45 d7 20          	movb   $0x20,-0x29(%ebp)
f0130c60:	8a 45 d7             	mov    -0x29(%ebp),%al
f0130c63:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0130c66:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0130c67:	eb 55                	jmp    f0130cbe <ide_read+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0130c69:	83 ec 0c             	sub    $0xc,%esp
f0130c6c:	6a 01                	push   $0x1
f0130c6e:	e8 d2 fe ff ff       	call   f0130b45 <ide_wait_ready>
f0130c73:	83 c4 10             	add    $0x10,%esp
f0130c76:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130c79:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130c7d:	79 05                	jns    f0130c84 <ide_read+0xf4>
			return r;
f0130c7f:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130c82:	eb 45                	jmp    f0130cc9 <ide_read+0x139>
f0130c84:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0130c8b:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130c8e:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0130c91:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
insl(int port, void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\tinsl"			:
f0130c98:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130c9b:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0130c9e:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130ca1:	89 cb                	mov    %ecx,%ebx
f0130ca3:	89 df                	mov    %ebx,%edi
f0130ca5:	89 c1                	mov    %eax,%ecx
f0130ca7:	fc                   	cld    
f0130ca8:	f2 6d                	repnz insl (%dx),%es:(%edi)
f0130caa:	89 c8                	mov    %ecx,%eax
f0130cac:	89 fb                	mov    %edi,%ebx
f0130cae:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0130cb1:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F4, (secno >> 8) & 0xFF);
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x20);	// CMD 0x20 means read sector

	for (; nsecs > 0; nsecs--, dst += SECTSIZE) {
f0130cb4:	ff 4d 10             	decl   0x10(%ebp)
f0130cb7:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0130cbe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130cc2:	75 a5                	jne    f0130c69 <ide_read+0xd9>
		if ((r = ide_wait_ready(1)) < 0)
			return r;
		insl(0x1F0, dst, SECTSIZE/4);
	}

	return 0;
f0130cc4:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130cc9:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130ccc:	5b                   	pop    %ebx
f0130ccd:	5f                   	pop    %edi
f0130cce:	5d                   	pop    %ebp
f0130ccf:	c3                   	ret    

f0130cd0 <ide_write>:

int ide_write(uint32 secno, const void *src, uint32 nsecs)
{
f0130cd0:	55                   	push   %ebp
f0130cd1:	89 e5                	mov    %esp,%ebp
f0130cd3:	56                   	push   %esi
f0130cd4:	53                   	push   %ebx
f0130cd5:	83 ec 30             	sub    $0x30,%esp
	int r;

	//LOG_STATMENT(cprintf("1 ==> nsecs = %d\n",nsecs);)
	assert(nsecs <= 256);
f0130cd8:	81 7d 10 00 01 00 00 	cmpl   $0x100,0x10(%ebp)
f0130cdf:	76 16                	jbe    f0130cf7 <ide_write+0x27>
f0130ce1:	68 03 c5 13 f0       	push   $0xf013c503
f0130ce6:	68 10 c5 13 f0       	push   $0xf013c510
f0130ceb:	6a 3e                	push   $0x3e
f0130ced:	68 25 c5 13 f0       	push   $0xf013c525
f0130cf2:	e8 af f4 fc ff       	call   f01001a6 <_panic>

	//LOG_STATMENT(cprintf("2\n");)
	ide_wait_ready(0);
f0130cf7:	83 ec 0c             	sub    $0xc,%esp
f0130cfa:	6a 00                	push   $0x0
f0130cfc:	e8 44 fe ff ff       	call   f0130b45 <ide_wait_ready>
f0130d01:	83 c4 10             	add    $0x10,%esp

	//LOG_STATMENT(cprintf("3 ==> nsecs = %d\n",nsecs);)
	outb(0x1F2, nsecs);
f0130d04:	8b 45 10             	mov    0x10(%ebp),%eax
f0130d07:	0f b6 c0             	movzbl %al,%eax
f0130d0a:	c7 45 f0 f2 01 00 00 	movl   $0x1f2,-0x10(%ebp)
f0130d11:	88 45 d2             	mov    %al,-0x2e(%ebp)
}

static __inline void
outb(int port, uint8 data)
{
	__asm __volatile("outb %0,%w1" : : "a" (data), "d" (port));
f0130d14:	8a 45 d2             	mov    -0x2e(%ebp),%al
f0130d17:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0130d1a:	ee                   	out    %al,(%dx)
	outb(0x1F3, secno & 0xFF);
f0130d1b:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d1e:	0f b6 c0             	movzbl %al,%eax
f0130d21:	c7 45 ec f3 01 00 00 	movl   $0x1f3,-0x14(%ebp)
f0130d28:	88 45 d3             	mov    %al,-0x2d(%ebp)
f0130d2b:	8a 45 d3             	mov    -0x2d(%ebp),%al
f0130d2e:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0130d31:	ee                   	out    %al,(%dx)
	outb(0x1F4, (secno >> 8) & 0xFF);
f0130d32:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d35:	c1 e8 08             	shr    $0x8,%eax
f0130d38:	0f b6 c0             	movzbl %al,%eax
f0130d3b:	c7 45 e8 f4 01 00 00 	movl   $0x1f4,-0x18(%ebp)
f0130d42:	88 45 d4             	mov    %al,-0x2c(%ebp)
f0130d45:	8a 45 d4             	mov    -0x2c(%ebp),%al
f0130d48:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0130d4b:	ee                   	out    %al,(%dx)
	outb(0x1F5, (secno >> 16) & 0xFF);
f0130d4c:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d4f:	c1 e8 10             	shr    $0x10,%eax
f0130d52:	0f b6 c0             	movzbl %al,%eax
f0130d55:	c7 45 e4 f5 01 00 00 	movl   $0x1f5,-0x1c(%ebp)
f0130d5c:	88 45 d5             	mov    %al,-0x2b(%ebp)
f0130d5f:	8a 45 d5             	mov    -0x2b(%ebp),%al
f0130d62:	8b 55 e4             	mov    -0x1c(%ebp),%edx
f0130d65:	ee                   	out    %al,(%dx)
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
f0130d66:	a1 cc 8f 65 f0       	mov    0xf0658fcc,%eax
f0130d6b:	83 e0 01             	and    $0x1,%eax
f0130d6e:	c1 e0 04             	shl    $0x4,%eax
f0130d71:	88 c2                	mov    %al,%dl
f0130d73:	8b 45 08             	mov    0x8(%ebp),%eax
f0130d76:	c1 e8 18             	shr    $0x18,%eax
f0130d79:	83 e0 0f             	and    $0xf,%eax
f0130d7c:	09 d0                	or     %edx,%eax
f0130d7e:	83 c8 e0             	or     $0xffffffe0,%eax
f0130d81:	0f b6 c0             	movzbl %al,%eax
f0130d84:	c7 45 e0 f6 01 00 00 	movl   $0x1f6,-0x20(%ebp)
f0130d8b:	88 45 d6             	mov    %al,-0x2a(%ebp)
f0130d8e:	8a 45 d6             	mov    -0x2a(%ebp),%al
f0130d91:	8b 55 e0             	mov    -0x20(%ebp),%edx
f0130d94:	ee                   	out    %al,(%dx)
f0130d95:	c7 45 d8 f7 01 00 00 	movl   $0x1f7,-0x28(%ebp)
f0130d9c:	c6 45 d7 30          	movb   $0x30,-0x29(%ebp)
f0130da0:	8a 45 d7             	mov    -0x29(%ebp),%al
f0130da3:	8b 55 d8             	mov    -0x28(%ebp),%edx
f0130da6:	ee                   	out    %al,(%dx)
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0130da7:	eb 55                	jmp    f0130dfe <ide_write+0x12e>
		if ((r = ide_wait_ready(1)) < 0)
f0130da9:	83 ec 0c             	sub    $0xc,%esp
f0130dac:	6a 01                	push   $0x1
f0130dae:	e8 92 fd ff ff       	call   f0130b45 <ide_wait_ready>
f0130db3:	83 c4 10             	add    $0x10,%esp
f0130db6:	89 45 dc             	mov    %eax,-0x24(%ebp)
f0130db9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
f0130dbd:	79 05                	jns    f0130dc4 <ide_write+0xf4>
		{
			LOG_STATMENT(cprintf("FAILURE to write %d sectors to disk\n",nsecs););
			return r;
f0130dbf:	8b 45 dc             	mov    -0x24(%ebp),%eax
f0130dc2:	eb 45                	jmp    f0130e09 <ide_write+0x139>
f0130dc4:	c7 45 f4 f0 01 00 00 	movl   $0x1f0,-0xc(%ebp)
f0130dcb:	8b 45 0c             	mov    0xc(%ebp),%eax
f0130dce:	89 45 cc             	mov    %eax,-0x34(%ebp)
f0130dd1:	c7 45 c8 80 00 00 00 	movl   $0x80,-0x38(%ebp)
}

static __inline void
outsl(int port, const void *addr, int cnt)
{
	__asm __volatile("cld\n\trepne\n\toutsl"		:
f0130dd8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0130ddb:	8b 4d cc             	mov    -0x34(%ebp),%ecx
f0130dde:	8b 45 c8             	mov    -0x38(%ebp),%eax
f0130de1:	89 cb                	mov    %ecx,%ebx
f0130de3:	89 de                	mov    %ebx,%esi
f0130de5:	89 c1                	mov    %eax,%ecx
f0130de7:	fc                   	cld    
f0130de8:	f2 6f                	repnz outsl %ds:(%esi),(%dx)
f0130dea:	89 c8                	mov    %ecx,%eax
f0130dec:	89 f3                	mov    %esi,%ebx
f0130dee:	89 5d cc             	mov    %ebx,-0x34(%ebp)
f0130df1:	89 45 c8             	mov    %eax,-0x38(%ebp)
	outb(0x1F5, (secno >> 16) & 0xFF);
	outb(0x1F6, 0xE0 | ((diskno&1)<<4) | ((secno>>24)&0x0F));
	outb(0x1F7, 0x30);	// CMD 0x30 means write sector


	for (; nsecs > 0; nsecs--, src += SECTSIZE) {
f0130df4:	ff 4d 10             	decl   0x10(%ebp)
f0130df7:	81 45 0c 00 02 00 00 	addl   $0x200,0xc(%ebp)
f0130dfe:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
f0130e02:	75 a5                	jne    f0130da9 <ide_write+0xd9>
		}
	}
	//LOG_STATMENT(cprintf("5\n");)
	//cprintf("returning from ide_write \n");

	return 0;
f0130e04:	b8 00 00 00 00       	mov    $0x0,%eax
}
f0130e09:	8d 65 f8             	lea    -0x8(%ebp),%esp
f0130e0c:	5b                   	pop    %ebx
f0130e0d:	5e                   	pop    %esi
f0130e0e:	5d                   	pop    %ebp
f0130e0f:	c3                   	ret    

f0130e10 <print_mem_block_lists>:
//===========================
// PRINT MEM BLOCK LISTS:
//===========================

void print_mem_block_lists()
{
f0130e10:	55                   	push   %ebp
f0130e11:	89 e5                	mov    %esp,%ebp
f0130e13:	83 ec 18             	sub    $0x18,%esp
	cprintf("\n=========================================\n");
f0130e16:	83 ec 0c             	sub    $0xc,%esp
f0130e19:	68 30 c5 13 f0       	push   $0xf013c530
f0130e1e:	e8 0a fe fc ff       	call   f0100c2d <cprintf>
f0130e23:	83 c4 10             	add    $0x10,%esp
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
f0130e26:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nFreeMemBlocksList:\n");
f0130e2d:	83 ec 0c             	sub    $0xc,%esp
f0130e30:	68 5c c5 13 f0       	push   $0xf013c55c
f0130e35:	e8 f3 fd fc ff       	call   f0100c2d <cprintf>
f0130e3a:	83 c4 10             	add    $0x10,%esp
	uint8 sorted = 1 ;
f0130e3d:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0130e41:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0130e46:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130e49:	eb 56                	jmp    f0130ea1 <print_mem_block_lists+0x91>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0130e4b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130e4f:	74 1c                	je     f0130e6d <print_mem_block_lists+0x5d>
f0130e51:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e54:	8b 50 08             	mov    0x8(%eax),%edx
f0130e57:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e5a:	8b 48 08             	mov    0x8(%eax),%ecx
f0130e5d:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130e60:	8b 40 0c             	mov    0xc(%eax),%eax
f0130e63:	01 c8                	add    %ecx,%eax
f0130e65:	39 c2                	cmp    %eax,%edx
f0130e67:	73 04                	jae    f0130e6d <print_mem_block_lists+0x5d>
			sorted = 0 ;
f0130e69:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0130e6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e70:	8b 50 08             	mov    0x8(%eax),%edx
f0130e73:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e76:	8b 40 0c             	mov    0xc(%eax),%eax
f0130e79:	01 c2                	add    %eax,%edx
f0130e7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e7e:	8b 40 08             	mov    0x8(%eax),%eax
f0130e81:	83 ec 04             	sub    $0x4,%esp
f0130e84:	52                   	push   %edx
f0130e85:	50                   	push   %eax
f0130e86:	68 71 c5 13 f0       	push   $0xf013c571
f0130e8b:	e8 9d fd fc ff       	call   f0100c2d <cprintf>
f0130e90:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0130e93:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130e96:	89 45 f0             	mov    %eax,-0x10(%ebp)
	cprintf("\n=========================================\n");
	struct MemBlock* blk ;
	struct MemBlock* lastBlk = NULL ;
	cprintf("\nFreeMemBlocksList:\n");
	uint8 sorted = 1 ;
	LIST_FOREACH(blk, &FreeMemBlocksList)
f0130e99:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0130e9e:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130ea1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130ea5:	74 07                	je     f0130eae <print_mem_block_lists+0x9e>
f0130ea7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130eaa:	8b 00                	mov    (%eax),%eax
f0130eac:	eb 05                	jmp    f0130eb3 <print_mem_block_lists+0xa3>
f0130eae:	b8 00 00 00 00       	mov    $0x0,%eax
f0130eb3:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f0130eb8:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0130ebd:	85 c0                	test   %eax,%eax
f0130ebf:	75 8a                	jne    f0130e4b <print_mem_block_lists+0x3b>
f0130ec1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130ec5:	75 84                	jne    f0130e4b <print_mem_block_lists+0x3b>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;
f0130ec7:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0130ecb:	75 10                	jne    f0130edd <print_mem_block_lists+0xcd>
f0130ecd:	83 ec 0c             	sub    $0xc,%esp
f0130ed0:	68 80 c5 13 f0       	push   $0xf013c580
f0130ed5:	e8 53 fd fc ff       	call   f0100c2d <cprintf>
f0130eda:	83 c4 10             	add    $0x10,%esp

	lastBlk = NULL ;
f0130edd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	cprintf("\nAllocMemBlocksList:\n");
f0130ee4:	83 ec 0c             	sub    $0xc,%esp
f0130ee7:	68 a4 c5 13 f0       	push   $0xf013c5a4
f0130eec:	e8 3c fd fc ff       	call   f0100c2d <cprintf>
f0130ef1:	83 c4 10             	add    $0x10,%esp
	sorted = 1 ;
f0130ef4:	c6 45 ef 01          	movb   $0x1,-0x11(%ebp)
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0130ef8:	a1 f0 8f 65 f0       	mov    0xf0658ff0,%eax
f0130efd:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130f00:	eb 56                	jmp    f0130f58 <print_mem_block_lists+0x148>
	{
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
f0130f02:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0130f06:	74 1c                	je     f0130f24 <print_mem_block_lists+0x114>
f0130f08:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f0b:	8b 50 08             	mov    0x8(%eax),%edx
f0130f0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130f11:	8b 48 08             	mov    0x8(%eax),%ecx
f0130f14:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0130f17:	8b 40 0c             	mov    0xc(%eax),%eax
f0130f1a:	01 c8                	add    %ecx,%eax
f0130f1c:	39 c2                	cmp    %eax,%edx
f0130f1e:	73 04                	jae    f0130f24 <print_mem_block_lists+0x114>
			sorted = 0 ;
f0130f20:	c6 45 ef 00          	movb   $0x0,-0x11(%ebp)
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
f0130f24:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f27:	8b 50 08             	mov    0x8(%eax),%edx
f0130f2a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f2d:	8b 40 0c             	mov    0xc(%eax),%eax
f0130f30:	01 c2                	add    %eax,%edx
f0130f32:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f35:	8b 40 08             	mov    0x8(%eax),%eax
f0130f38:	83 ec 04             	sub    $0x4,%esp
f0130f3b:	52                   	push   %edx
f0130f3c:	50                   	push   %eax
f0130f3d:	68 71 c5 13 f0       	push   $0xf013c571
f0130f42:	e8 e6 fc fc ff       	call   f0100c2d <cprintf>
f0130f47:	83 c4 10             	add    $0x10,%esp
		lastBlk = blk;
f0130f4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f4d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (!sorted)	cprintf("\nFreeMemBlocksList is NOT SORTED!!\n") ;

	lastBlk = NULL ;
	cprintf("\nAllocMemBlocksList:\n");
	sorted = 1 ;
	LIST_FOREACH(blk, &AllocMemBlocksList)
f0130f50:	a1 f8 8f 65 f0       	mov    0xf0658ff8,%eax
f0130f55:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0130f58:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130f5c:	74 07                	je     f0130f65 <print_mem_block_lists+0x155>
f0130f5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0130f61:	8b 00                	mov    (%eax),%eax
f0130f63:	eb 05                	jmp    f0130f6a <print_mem_block_lists+0x15a>
f0130f65:	b8 00 00 00 00       	mov    $0x0,%eax
f0130f6a:	a3 f8 8f 65 f0       	mov    %eax,0xf0658ff8
f0130f6f:	a1 f8 8f 65 f0       	mov    0xf0658ff8,%eax
f0130f74:	85 c0                	test   %eax,%eax
f0130f76:	75 8a                	jne    f0130f02 <print_mem_block_lists+0xf2>
f0130f78:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0130f7c:	75 84                	jne    f0130f02 <print_mem_block_lists+0xf2>
		if (lastBlk && blk->sva < lastBlk->sva + lastBlk->size)
			sorted = 0 ;
		cprintf("[%x, %x)-->", blk->sva, blk->sva + blk->size) ;
		lastBlk = blk;
	}
	if (!sorted)	cprintf("\nAllocMemBlocksList is NOT SORTED!!\n") ;
f0130f7e:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
f0130f82:	75 10                	jne    f0130f94 <print_mem_block_lists+0x184>
f0130f84:	83 ec 0c             	sub    $0xc,%esp
f0130f87:	68 bc c5 13 f0       	push   $0xf013c5bc
f0130f8c:	e8 9c fc fc ff       	call   f0100c2d <cprintf>
f0130f91:	83 c4 10             	add    $0x10,%esp
	cprintf("\n=========================================\n");
f0130f94:	83 ec 0c             	sub    $0xc,%esp
f0130f97:	68 30 c5 13 f0       	push   $0xf013c530
f0130f9c:	e8 8c fc fc ff       	call   f0100c2d <cprintf>
f0130fa1:	83 c4 10             	add    $0x10,%esp

}
f0130fa4:	90                   	nop
f0130fa5:	c9                   	leave  
f0130fa6:	c3                   	ret    

f0130fa7 <initialize_MemBlocksList>:

//===============================
// [1] INITIALIZE AVAILABLE LIST:
//===============================
void initialize_MemBlocksList(uint32 numOfBlocks)
{
f0130fa7:	55                   	push   %ebp
f0130fa8:	89 e5                	mov    %esp,%ebp
f0130faa:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] initialize_MemBlocksList
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");

	if(numOfBlocks <= 10000)
f0130fad:	81 7d 08 10 27 00 00 	cmpl   $0x2710,0x8(%ebp)
f0130fb4:	0f 87 b2 00 00 00    	ja     f013106c <initialize_MemBlocksList+0xc5>
	{
		for(int i = 0; i < numOfBlocks; i++)
f0130fba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
f0130fc1:	e9 9a 00 00 00       	jmp    f0131060 <initialize_MemBlocksList+0xb9>
		{
			MemBlockNodes[i].size = 0;
f0130fc6:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130fc9:	c1 e0 04             	shl    $0x4,%eax
f0130fcc:	05 0c 90 65 f0       	add    $0xf065900c,%eax
f0130fd1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			MemBlockNodes[i].sva = 0;
f0130fd7:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130fda:	c1 e0 04             	shl    $0x4,%eax
f0130fdd:	05 08 90 65 f0       	add    $0xf0659008,%eax
f0130fe2:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
			LIST_INSERT_TAIL(&(AvailableMemBlocksList), &MemBlockNodes[i]);
f0130fe8:	a1 f8 84 6e f0       	mov    0xf06e84f8,%eax
f0130fed:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0130ff0:	c1 e2 04             	shl    $0x4,%edx
f0130ff3:	81 c2 04 90 65 f0    	add    $0xf0659004,%edx
f0130ff9:	89 02                	mov    %eax,(%edx)
f0130ffb:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0130ffe:	c1 e0 04             	shl    $0x4,%eax
f0131001:	05 04 90 65 f0       	add    $0xf0659004,%eax
f0131006:	8b 00                	mov    (%eax),%eax
f0131008:	85 c0                	test   %eax,%eax
f013100a:	74 15                	je     f0131021 <initialize_MemBlocksList+0x7a>
f013100c:	a1 f8 84 6e f0       	mov    0xf06e84f8,%eax
f0131011:	8b 55 fc             	mov    -0x4(%ebp),%edx
f0131014:	c1 e2 04             	shl    $0x4,%edx
f0131017:	81 c2 00 90 65 f0    	add    $0xf0659000,%edx
f013101d:	89 10                	mov    %edx,(%eax)
f013101f:	eb 10                	jmp    f0131031 <initialize_MemBlocksList+0x8a>
f0131021:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131024:	c1 e0 04             	shl    $0x4,%eax
f0131027:	05 00 90 65 f0       	add    $0xf0659000,%eax
f013102c:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0131031:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131034:	c1 e0 04             	shl    $0x4,%eax
f0131037:	05 00 90 65 f0       	add    $0xf0659000,%eax
f013103c:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0131041:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131044:	c1 e0 04             	shl    $0x4,%eax
f0131047:	05 00 90 65 f0       	add    $0xf0659000,%eax
f013104c:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131052:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0131057:	40                   	inc    %eax
f0131058:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
	// Write your code here, remove the panic and write your code
	//panic("initialize_MemBlocksList() is not implemented yet...!!");

	if(numOfBlocks <= 10000)
	{
		for(int i = 0; i < numOfBlocks; i++)
f013105d:	ff 45 fc             	incl   -0x4(%ebp)
f0131060:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131063:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131066:	0f 82 5a ff ff ff    	jb     f0130fc6 <initialize_MemBlocksList+0x1f>
			MemBlockNodes[i].size = 0;
			MemBlockNodes[i].sva = 0;
			LIST_INSERT_TAIL(&(AvailableMemBlocksList), &MemBlockNodes[i]);
		}
	}
}
f013106c:	90                   	nop
f013106d:	c9                   	leave  
f013106e:	c3                   	ret    

f013106f <find_block>:

//===============================
// [2] FIND BLOCK:
//===============================
struct MemBlock *find_block(struct MemBlock_List *blockList, uint32 va)
{
f013106f:	55                   	push   %ebp
f0131070:	89 e5                	mov    %esp,%ebp
f0131072:	83 ec 10             	sub    $0x10,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	struct MemBlock *element;

	LIST_FOREACH(element ,blockList)
f0131075:	8b 45 08             	mov    0x8(%ebp),%eax
f0131078:	8b 00                	mov    (%eax),%eax
f013107a:	89 45 fc             	mov    %eax,-0x4(%ebp)
f013107d:	eb 19                	jmp    f0131098 <find_block+0x29>
	{
		if(element->sva == va)
f013107f:	8b 45 fc             	mov    -0x4(%ebp),%eax
f0131082:	8b 40 08             	mov    0x8(%eax),%eax
f0131085:	3b 45 0c             	cmp    0xc(%ebp),%eax
f0131088:	75 05                	jne    f013108f <find_block+0x20>
			return element;
f013108a:	8b 45 fc             	mov    -0x4(%ebp),%eax
f013108d:	eb 36                	jmp    f01310c5 <find_block+0x56>
{
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] find_block
	// Write your code here, remove the panic and write your code
	struct MemBlock *element;

	LIST_FOREACH(element ,blockList)
f013108f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131092:	8b 40 08             	mov    0x8(%eax),%eax
f0131095:	89 45 fc             	mov    %eax,-0x4(%ebp)
f0131098:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f013109c:	74 07                	je     f01310a5 <find_block+0x36>
f013109e:	8b 45 fc             	mov    -0x4(%ebp),%eax
f01310a1:	8b 00                	mov    (%eax),%eax
f01310a3:	eb 05                	jmp    f01310aa <find_block+0x3b>
f01310a5:	b8 00 00 00 00       	mov    $0x0,%eax
f01310aa:	8b 55 08             	mov    0x8(%ebp),%edx
f01310ad:	89 42 08             	mov    %eax,0x8(%edx)
f01310b0:	8b 45 08             	mov    0x8(%ebp),%eax
f01310b3:	8b 40 08             	mov    0x8(%eax),%eax
f01310b6:	85 c0                	test   %eax,%eax
f01310b8:	75 c5                	jne    f013107f <find_block+0x10>
f01310ba:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
f01310be:	75 bf                	jne    f013107f <find_block+0x10>
		if(element->sva == va)
			return element;
	}


	return NULL;
f01310c0:	b8 00 00 00 00       	mov    $0x0,%eax
}
f01310c5:	c9                   	leave  
f01310c6:	c3                   	ret    

f01310c7 <insert_sorted_allocList>:

//=========================================
// [3] INSERT BLOCK IN ALLOC LIST [SORTED]:
//=========================================
void insert_sorted_allocList(struct MemBlock *blockToInsert)
{
f01310c7:	55                   	push   %ebp
f01310c8:	89 e5                	mov    %esp,%ebp
f01310ca:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1] [DYNAMIC ALLOCATOR] insert_sorted_allocList
	// Write your code here, remove the panic and write your code
	struct MemBlock *element;
	struct MemBlock *next;

	if(LIST_EMPTY(&AllocMemBlocksList) || AllocMemBlocksList.lh_first->sva > blockToInsert->sva) // insert head
f01310cd:	a1 f0 8f 65 f0       	mov    0xf0658ff0,%eax
f01310d2:	85 c0                	test   %eax,%eax
f01310d4:	74 12                	je     f01310e8 <insert_sorted_allocList+0x21>
f01310d6:	a1 f0 8f 65 f0       	mov    0xf0658ff0,%eax
f01310db:	8b 50 08             	mov    0x8(%eax),%edx
f01310de:	8b 45 08             	mov    0x8(%ebp),%eax
f01310e1:	8b 40 08             	mov    0x8(%eax),%eax
f01310e4:	39 c2                	cmp    %eax,%edx
f01310e6:	76 65                	jbe    f013114d <insert_sorted_allocList+0x86>
	{
		 LIST_INSERT_HEAD(&(AllocMemBlocksList),blockToInsert);
f01310e8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01310ec:	75 14                	jne    f0131102 <insert_sorted_allocList+0x3b>
f01310ee:	83 ec 04             	sub    $0x4,%esp
f01310f1:	68 e4 c5 13 f0       	push   $0xf013c5e4
f01310f6:	6a 6e                	push   $0x6e
f01310f8:	68 07 c6 13 f0       	push   $0xf013c607
f01310fd:	e8 a4 f0 fc ff       	call   f01001a6 <_panic>
f0131102:	8b 15 f0 8f 65 f0    	mov    0xf0658ff0,%edx
f0131108:	8b 45 08             	mov    0x8(%ebp),%eax
f013110b:	89 10                	mov    %edx,(%eax)
f013110d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131110:	8b 00                	mov    (%eax),%eax
f0131112:	85 c0                	test   %eax,%eax
f0131114:	74 0d                	je     f0131123 <insert_sorted_allocList+0x5c>
f0131116:	a1 f0 8f 65 f0       	mov    0xf0658ff0,%eax
f013111b:	8b 55 08             	mov    0x8(%ebp),%edx
f013111e:	89 50 04             	mov    %edx,0x4(%eax)
f0131121:	eb 08                	jmp    f013112b <insert_sorted_allocList+0x64>
f0131123:	8b 45 08             	mov    0x8(%ebp),%eax
f0131126:	a3 f4 8f 65 f0       	mov    %eax,0xf0658ff4
f013112b:	8b 45 08             	mov    0x8(%ebp),%eax
f013112e:	a3 f0 8f 65 f0       	mov    %eax,0xf0658ff0
f0131133:	8b 45 08             	mov    0x8(%ebp),%eax
f0131136:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013113d:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f0131142:	40                   	inc    %eax
f0131143:	a3 fc 8f 65 f0       	mov    %eax,0xf0658ffc
f0131148:	e9 12 01 00 00       	jmp    f013125f <insert_sorted_allocList+0x198>
	}
	else if(AllocMemBlocksList.lh_last->sva < blockToInsert->sva) //insert tail
f013114d:	a1 f4 8f 65 f0       	mov    0xf0658ff4,%eax
f0131152:	8b 50 08             	mov    0x8(%eax),%edx
f0131155:	8b 45 08             	mov    0x8(%ebp),%eax
f0131158:	8b 40 08             	mov    0x8(%eax),%eax
f013115b:	39 c2                	cmp    %eax,%edx
f013115d:	73 65                	jae    f01311c4 <insert_sorted_allocList+0xfd>
	{
		LIST_INSERT_TAIL(&(AllocMemBlocksList),blockToInsert);
f013115f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131163:	75 14                	jne    f0131179 <insert_sorted_allocList+0xb2>
f0131165:	83 ec 04             	sub    $0x4,%esp
f0131168:	68 20 c6 13 f0       	push   $0xf013c620
f013116d:	6a 72                	push   $0x72
f013116f:	68 07 c6 13 f0       	push   $0xf013c607
f0131174:	e8 2d f0 fc ff       	call   f01001a6 <_panic>
f0131179:	8b 15 f4 8f 65 f0    	mov    0xf0658ff4,%edx
f013117f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131182:	89 50 04             	mov    %edx,0x4(%eax)
f0131185:	8b 45 08             	mov    0x8(%ebp),%eax
f0131188:	8b 40 04             	mov    0x4(%eax),%eax
f013118b:	85 c0                	test   %eax,%eax
f013118d:	74 0c                	je     f013119b <insert_sorted_allocList+0xd4>
f013118f:	a1 f4 8f 65 f0       	mov    0xf0658ff4,%eax
f0131194:	8b 55 08             	mov    0x8(%ebp),%edx
f0131197:	89 10                	mov    %edx,(%eax)
f0131199:	eb 08                	jmp    f01311a3 <insert_sorted_allocList+0xdc>
f013119b:	8b 45 08             	mov    0x8(%ebp),%eax
f013119e:	a3 f0 8f 65 f0       	mov    %eax,0xf0658ff0
f01311a3:	8b 45 08             	mov    0x8(%ebp),%eax
f01311a6:	a3 f4 8f 65 f0       	mov    %eax,0xf0658ff4
f01311ab:	8b 45 08             	mov    0x8(%ebp),%eax
f01311ae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01311b4:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f01311b9:	40                   	inc    %eax
f01311ba:	a3 fc 8f 65 f0       	mov    %eax,0xf0658ffc
				break;
			}
		}
	}

}
f01311bf:	e9 9b 00 00 00       	jmp    f013125f <insert_sorted_allocList+0x198>
	else if(AllocMemBlocksList.lh_last->sva < blockToInsert->sva) //insert tail
	{
		LIST_INSERT_TAIL(&(AllocMemBlocksList),blockToInsert);
	}
	else{
		  LIST_FOREACH(element,&(AllocMemBlocksList)){
f01311c4:	a1 f0 8f 65 f0       	mov    0xf0658ff0,%eax
f01311c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01311cc:	eb 61                	jmp    f013122f <insert_sorted_allocList+0x168>
			  if(element->sva < blockToInsert->sva && blockToInsert->sva<LIST_NEXT(element)->sva){
f01311ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311d1:	8b 50 08             	mov    0x8(%eax),%edx
f01311d4:	8b 45 08             	mov    0x8(%ebp),%eax
f01311d7:	8b 40 08             	mov    0x8(%eax),%eax
f01311da:	39 c2                	cmp    %eax,%edx
f01311dc:	73 49                	jae    f0131227 <insert_sorted_allocList+0x160>
f01311de:	8b 45 08             	mov    0x8(%ebp),%eax
f01311e1:	8b 50 08             	mov    0x8(%eax),%edx
f01311e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311e7:	8b 00                	mov    (%eax),%eax
f01311e9:	8b 40 08             	mov    0x8(%eax),%eax
f01311ec:	39 c2                	cmp    %eax,%edx
f01311ee:	73 37                	jae    f0131227 <insert_sorted_allocList+0x160>
				next = LIST_NEXT(element);
f01311f0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311f3:	8b 00                	mov    (%eax),%eax
f01311f5:	89 45 f0             	mov    %eax,-0x10(%ebp)

				element->prev_next_info.le_next = blockToInsert;
f01311f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01311fb:	8b 55 08             	mov    0x8(%ebp),%edx
f01311fe:	89 10                	mov    %edx,(%eax)
				blockToInsert->prev_next_info.le_prev =element;
f0131200:	8b 45 08             	mov    0x8(%ebp),%eax
f0131203:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131206:	89 50 04             	mov    %edx,0x4(%eax)

				blockToInsert->prev_next_info.le_next=next;
f0131209:	8b 45 08             	mov    0x8(%ebp),%eax
f013120c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013120f:	89 10                	mov    %edx,(%eax)
				next->prev_next_info.le_prev=blockToInsert;
f0131211:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131214:	8b 55 08             	mov    0x8(%ebp),%edx
f0131217:	89 50 04             	mov    %edx,0x4(%eax)

				AllocMemBlocksList.size +=1;
f013121a:	a1 fc 8f 65 f0       	mov    0xf0658ffc,%eax
f013121f:	40                   	inc    %eax
f0131220:	a3 fc 8f 65 f0       	mov    %eax,0xf0658ffc
				break;
f0131225:	eb 38                	jmp    f013125f <insert_sorted_allocList+0x198>
	else if(AllocMemBlocksList.lh_last->sva < blockToInsert->sva) //insert tail
	{
		LIST_INSERT_TAIL(&(AllocMemBlocksList),blockToInsert);
	}
	else{
		  LIST_FOREACH(element,&(AllocMemBlocksList)){
f0131227:	a1 f8 8f 65 f0       	mov    0xf0658ff8,%eax
f013122c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013122f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131233:	74 07                	je     f013123c <insert_sorted_allocList+0x175>
f0131235:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131238:	8b 00                	mov    (%eax),%eax
f013123a:	eb 05                	jmp    f0131241 <insert_sorted_allocList+0x17a>
f013123c:	b8 00 00 00 00       	mov    $0x0,%eax
f0131241:	a3 f8 8f 65 f0       	mov    %eax,0xf0658ff8
f0131246:	a1 f8 8f 65 f0       	mov    0xf0658ff8,%eax
f013124b:	85 c0                	test   %eax,%eax
f013124d:	0f 85 7b ff ff ff    	jne    f01311ce <insert_sorted_allocList+0x107>
f0131253:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131257:	0f 85 71 ff ff ff    	jne    f01311ce <insert_sorted_allocList+0x107>
				break;
			}
		}
	}

}
f013125d:	eb 00                	jmp    f013125f <insert_sorted_allocList+0x198>
f013125f:	90                   	nop
f0131260:	c9                   	leave  
f0131261:	c3                   	ret    

f0131262 <alloc_block_FF>:

//=========================================
// [4] ALLOCATE BLOCK BY FIRST FIT:
//=========================================
struct MemBlock *alloc_block_FF(uint32 size)
{
f0131262:	55                   	push   %ebp
f0131263:	89 e5                	mov    %esp,%ebp
f0131265:	83 ec 18             	sub    $0x18,%esp
	//panic("alloc_block_FF() is not implemented yet...!!");

	 struct MemBlock *element;
	 struct MemBlock *tmp;

	 LIST_FOREACH(element, &(FreeMemBlocksList))
f0131268:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f013126d:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131270:	e9 82 01 00 00       	jmp    f01313f7 <alloc_block_FF+0x195>
	 {

		   if(element->size == size) // block is found with EXACT size
f0131275:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131278:	8b 40 0c             	mov    0xc(%eax),%eax
f013127b:	3b 45 08             	cmp    0x8(%ebp),%eax
f013127e:	0f 85 90 00 00 00    	jne    f0131314 <alloc_block_FF+0xb2>
		   {
				tmp = element;
f0131284:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131287:	89 45 ec             	mov    %eax,-0x14(%ebp)

				LIST_REMOVE(&(FreeMemBlocksList), element);
f013128a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013128e:	75 17                	jne    f01312a7 <alloc_block_FF+0x45>
f0131290:	83 ec 04             	sub    $0x4,%esp
f0131293:	68 43 c6 13 f0       	push   $0xf013c643
f0131298:	68 9a 00 00 00       	push   $0x9a
f013129d:	68 07 c6 13 f0       	push   $0xf013c607
f01312a2:	e8 ff ee fc ff       	call   f01001a6 <_panic>
f01312a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01312aa:	8b 00                	mov    (%eax),%eax
f01312ac:	85 c0                	test   %eax,%eax
f01312ae:	74 10                	je     f01312c0 <alloc_block_FF+0x5e>
f01312b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01312b3:	8b 00                	mov    (%eax),%eax
f01312b5:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01312b8:	8b 52 04             	mov    0x4(%edx),%edx
f01312bb:	89 50 04             	mov    %edx,0x4(%eax)
f01312be:	eb 0b                	jmp    f01312cb <alloc_block_FF+0x69>
f01312c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01312c3:	8b 40 04             	mov    0x4(%eax),%eax
f01312c6:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f01312cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01312ce:	8b 40 04             	mov    0x4(%eax),%eax
f01312d1:	85 c0                	test   %eax,%eax
f01312d3:	74 0f                	je     f01312e4 <alloc_block_FF+0x82>
f01312d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01312d8:	8b 40 04             	mov    0x4(%eax),%eax
f01312db:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01312de:	8b 12                	mov    (%edx),%edx
f01312e0:	89 10                	mov    %edx,(%eax)
f01312e2:	eb 0a                	jmp    f01312ee <alloc_block_FF+0x8c>
f01312e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01312e7:	8b 00                	mov    (%eax),%eax
f01312e9:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f01312ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01312f1:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01312f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01312fa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131301:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f0131306:	48                   	dec    %eax
f0131307:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc

				return tmp;
f013130c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013130f:	e9 16 01 00 00       	jmp    f013142a <alloc_block_FF+0x1c8>
		   }

		   else if(element->size > size) //  block is found with GREATER size
f0131314:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131317:	8b 40 0c             	mov    0xc(%eax),%eax
f013131a:	3b 45 08             	cmp    0x8(%ebp),%eax
f013131d:	0f 86 cc 00 00 00    	jbe    f01313ef <alloc_block_FF+0x18d>
		   {

				struct MemBlock* felement = LIST_FIRST(&(AvailableMemBlocksList));
f0131323:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0131328:	89 45 f0             	mov    %eax,-0x10(%ebp)
				tmp = felement;
f013132b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013132e:	89 45 ec             	mov    %eax,-0x14(%ebp)
				LIST_REMOVE(&(AvailableMemBlocksList), felement);
f0131331:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0131335:	75 17                	jne    f013134e <alloc_block_FF+0xec>
f0131337:	83 ec 04             	sub    $0x4,%esp
f013133a:	68 43 c6 13 f0       	push   $0xf013c643
f013133f:	68 a4 00 00 00       	push   $0xa4
f0131344:	68 07 c6 13 f0       	push   $0xf013c607
f0131349:	e8 58 ee fc ff       	call   f01001a6 <_panic>
f013134e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131351:	8b 00                	mov    (%eax),%eax
f0131353:	85 c0                	test   %eax,%eax
f0131355:	74 10                	je     f0131367 <alloc_block_FF+0x105>
f0131357:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013135a:	8b 00                	mov    (%eax),%eax
f013135c:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013135f:	8b 52 04             	mov    0x4(%edx),%edx
f0131362:	89 50 04             	mov    %edx,0x4(%eax)
f0131365:	eb 0b                	jmp    f0131372 <alloc_block_FF+0x110>
f0131367:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013136a:	8b 40 04             	mov    0x4(%eax),%eax
f013136d:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0131372:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131375:	8b 40 04             	mov    0x4(%eax),%eax
f0131378:	85 c0                	test   %eax,%eax
f013137a:	74 0f                	je     f013138b <alloc_block_FF+0x129>
f013137c:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013137f:	8b 40 04             	mov    0x4(%eax),%eax
f0131382:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131385:	8b 12                	mov    (%edx),%edx
f0131387:	89 10                	mov    %edx,(%eax)
f0131389:	eb 0a                	jmp    f0131395 <alloc_block_FF+0x133>
f013138b:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013138e:	8b 00                	mov    (%eax),%eax
f0131390:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0131395:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131398:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013139e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01313a1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01313a8:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f01313ad:	48                   	dec    %eax
f01313ae:	a3 00 85 6e f0       	mov    %eax,0xf06e8500

				tmp->size = size;
f01313b3:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01313b6:	8b 55 08             	mov    0x8(%ebp),%edx
f01313b9:	89 50 0c             	mov    %edx,0xc(%eax)
				tmp->sva = element->sva;
f01313bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313bf:	8b 50 08             	mov    0x8(%eax),%edx
f01313c2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01313c5:	89 50 08             	mov    %edx,0x8(%eax)

				element->size = element->size - size;
f01313c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313cb:	8b 40 0c             	mov    0xc(%eax),%eax
f01313ce:	2b 45 08             	sub    0x8(%ebp),%eax
f01313d1:	89 c2                	mov    %eax,%edx
f01313d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313d6:	89 50 0c             	mov    %edx,0xc(%eax)
				element->sva = tmp->sva + size;
f01313d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01313dc:	8b 50 08             	mov    0x8(%eax),%edx
f01313df:	8b 45 08             	mov    0x8(%ebp),%eax
f01313e2:	01 c2                	add    %eax,%edx
f01313e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01313e7:	89 50 08             	mov    %edx,0x8(%eax)


				return tmp;
f01313ea:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01313ed:	eb 3b                	jmp    f013142a <alloc_block_FF+0x1c8>
	//panic("alloc_block_FF() is not implemented yet...!!");

	 struct MemBlock *element;
	 struct MemBlock *tmp;

	 LIST_FOREACH(element, &(FreeMemBlocksList))
f01313ef:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f01313f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01313f7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01313fb:	74 07                	je     f0131404 <alloc_block_FF+0x1a2>
f01313fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131400:	8b 00                	mov    (%eax),%eax
f0131402:	eb 05                	jmp    f0131409 <alloc_block_FF+0x1a7>
f0131404:	b8 00 00 00 00       	mov    $0x0,%eax
f0131409:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f013140e:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131413:	85 c0                	test   %eax,%eax
f0131415:	0f 85 5a fe ff ff    	jne    f0131275 <alloc_block_FF+0x13>
f013141b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013141f:	0f 85 50 fe ff ff    	jne    f0131275 <alloc_block_FF+0x13>
				return tmp;

		   }
	  }

	 return NULL;  // no suitable block
f0131425:	b8 00 00 00 00       	mov    $0x0,%eax
}
f013142a:	c9                   	leave  
f013142b:	c3                   	ret    

f013142c <alloc_block_BF>:

//=========================================
// [5] ALLOCATE BLOCK BY BEST FIT:
//=========================================
struct MemBlock *alloc_block_BF(uint32 size)
{
f013142c:	55                   	push   %ebp
f013142d:	89 e5                	mov    %esp,%ebp
f013142f:	83 ec 18             	sub    $0x18,%esp
    // Write your code here, remove the panic and write your code
    // panic("alloc_block_BF() is not implemented yet...!!");
	struct MemBlock *element;
	struct MemBlock *tmp;

	struct MemBlock* Mini_block = LIST_FIRST(&(AvailableMemBlocksList));
f0131432:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0131437:	89 45 ec             	mov    %eax,-0x14(%ebp)
	int flag = 0;
f013143a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	LIST_FOREACH(element, &(FreeMemBlocksList)) // NULL
f0131441:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131446:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131449:	eb 1a                	jmp    f0131465 <alloc_block_BF+0x39>
	{
		if(element->size >= size)
f013144b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013144e:	8b 40 0c             	mov    0xc(%eax),%eax
f0131451:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131454:	72 07                	jb     f013145d <alloc_block_BF+0x31>
		{
			flag = 1;
f0131456:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
	struct MemBlock *element;
	struct MemBlock *tmp;

	struct MemBlock* Mini_block = LIST_FIRST(&(AvailableMemBlocksList));
	int flag = 0;
	LIST_FOREACH(element, &(FreeMemBlocksList)) // NULL
f013145d:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131462:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131465:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131469:	74 07                	je     f0131472 <alloc_block_BF+0x46>
f013146b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013146e:	8b 00                	mov    (%eax),%eax
f0131470:	eb 05                	jmp    f0131477 <alloc_block_BF+0x4b>
f0131472:	b8 00 00 00 00       	mov    $0x0,%eax
f0131477:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f013147c:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131481:	85 c0                	test   %eax,%eax
f0131483:	75 c6                	jne    f013144b <alloc_block_BF+0x1f>
f0131485:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131489:	75 c0                	jne    f013144b <alloc_block_BF+0x1f>
		{
			flag = 1;
		}

	}
	if(flag != 1)
f013148b:	83 7d f0 01          	cmpl   $0x1,-0x10(%ebp)
f013148f:	74 0a                	je     f013149b <alloc_block_BF+0x6f>
	{
		return NULL;
f0131491:	b8 00 00 00 00       	mov    $0x0,%eax
f0131496:	e9 da 01 00 00       	jmp    f0131675 <alloc_block_BF+0x249>
	}

	LIST_FOREACH(element, &(FreeMemBlocksList)) // block is found with EXACT size
f013149b:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f01314a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01314a3:	e9 a7 00 00 00       	jmp    f013154f <alloc_block_BF+0x123>
	{
		if(element->size == size)
f01314a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01314ab:	8b 40 0c             	mov    0xc(%eax),%eax
f01314ae:	3b 45 08             	cmp    0x8(%ebp),%eax
f01314b1:	0f 85 90 00 00 00    	jne    f0131547 <alloc_block_BF+0x11b>
		{
			tmp = element;
f01314b7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01314ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
			LIST_REMOVE(&(FreeMemBlocksList), element);
f01314bd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01314c1:	75 17                	jne    f01314da <alloc_block_BF+0xae>
f01314c3:	83 ec 04             	sub    $0x4,%esp
f01314c6:	68 43 c6 13 f0       	push   $0xf013c643
f01314cb:	68 d4 00 00 00       	push   $0xd4
f01314d0:	68 07 c6 13 f0       	push   $0xf013c607
f01314d5:	e8 cc ec fc ff       	call   f01001a6 <_panic>
f01314da:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01314dd:	8b 00                	mov    (%eax),%eax
f01314df:	85 c0                	test   %eax,%eax
f01314e1:	74 10                	je     f01314f3 <alloc_block_BF+0xc7>
f01314e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01314e6:	8b 00                	mov    (%eax),%eax
f01314e8:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01314eb:	8b 52 04             	mov    0x4(%edx),%edx
f01314ee:	89 50 04             	mov    %edx,0x4(%eax)
f01314f1:	eb 0b                	jmp    f01314fe <alloc_block_BF+0xd2>
f01314f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01314f6:	8b 40 04             	mov    0x4(%eax),%eax
f01314f9:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f01314fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131501:	8b 40 04             	mov    0x4(%eax),%eax
f0131504:	85 c0                	test   %eax,%eax
f0131506:	74 0f                	je     f0131517 <alloc_block_BF+0xeb>
f0131508:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013150b:	8b 40 04             	mov    0x4(%eax),%eax
f013150e:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131511:	8b 12                	mov    (%edx),%edx
f0131513:	89 10                	mov    %edx,(%eax)
f0131515:	eb 0a                	jmp    f0131521 <alloc_block_BF+0xf5>
f0131517:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013151a:	8b 00                	mov    (%eax),%eax
f013151c:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f0131521:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131524:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013152a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013152d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131534:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f0131539:	48                   	dec    %eax
f013153a:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc

			return tmp;
f013153f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131542:	e9 2e 01 00 00       	jmp    f0131675 <alloc_block_BF+0x249>
	if(flag != 1)
	{
		return NULL;
	}

	LIST_FOREACH(element, &(FreeMemBlocksList)) // block is found with EXACT size
f0131547:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f013154c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013154f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131553:	74 07                	je     f013155c <alloc_block_BF+0x130>
f0131555:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131558:	8b 00                	mov    (%eax),%eax
f013155a:	eb 05                	jmp    f0131561 <alloc_block_BF+0x135>
f013155c:	b8 00 00 00 00       	mov    $0x0,%eax
f0131561:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f0131566:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f013156b:	85 c0                	test   %eax,%eax
f013156d:	0f 85 35 ff ff ff    	jne    f01314a8 <alloc_block_BF+0x7c>
f0131573:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131577:	0f 85 2b ff ff ff    	jne    f01314a8 <alloc_block_BF+0x7c>

			return tmp;
		}

	}
	Mini_block->size = 0xFFFFFFFF;
f013157d:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131580:	c7 40 0c ff ff ff ff 	movl   $0xffffffff,0xc(%eax)
	LIST_FOREACH(element, &(FreeMemBlocksList)) // block is found with GREATER size
f0131587:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f013158c:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013158f:	eb 3b                	jmp    f01315cc <alloc_block_BF+0x1a0>
	{
		if(element->size > size)
f0131591:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131594:	8b 40 0c             	mov    0xc(%eax),%eax
f0131597:	3b 45 08             	cmp    0x8(%ebp),%eax
f013159a:	76 28                	jbe    f01315c4 <alloc_block_BF+0x198>
		{
			if(element->size < Mini_block->size)
f013159c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013159f:	8b 50 0c             	mov    0xc(%eax),%edx
f01315a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01315a5:	8b 40 0c             	mov    0xc(%eax),%eax
f01315a8:	39 c2                	cmp    %eax,%edx
f01315aa:	73 18                	jae    f01315c4 <alloc_block_BF+0x198>
			{
				// Mini_block = element;  // Not working !!!
				Mini_block->sva = element->sva;
f01315ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315af:	8b 50 08             	mov    0x8(%eax),%edx
f01315b2:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01315b5:	89 50 08             	mov    %edx,0x8(%eax)
				Mini_block->size = element->size;
f01315b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315bb:	8b 50 0c             	mov    0xc(%eax),%edx
f01315be:	8b 45 ec             	mov    -0x14(%ebp),%eax
f01315c1:	89 50 0c             	mov    %edx,0xc(%eax)
			return tmp;
		}

	}
	Mini_block->size = 0xFFFFFFFF;
	LIST_FOREACH(element, &(FreeMemBlocksList)) // block is found with GREATER size
f01315c4:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f01315c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01315cc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01315d0:	74 07                	je     f01315d9 <alloc_block_BF+0x1ad>
f01315d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315d5:	8b 00                	mov    (%eax),%eax
f01315d7:	eb 05                	jmp    f01315de <alloc_block_BF+0x1b2>
f01315d9:	b8 00 00 00 00       	mov    $0x0,%eax
f01315de:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f01315e3:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f01315e8:	85 c0                	test   %eax,%eax
f01315ea:	75 a5                	jne    f0131591 <alloc_block_BF+0x165>
f01315ec:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01315f0:	75 9f                	jne    f0131591 <alloc_block_BF+0x165>
			}
		}
	}


	LIST_FOREACH(element, &(FreeMemBlocksList)) // block is found with GREATER size
f01315f2:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f01315f7:	89 45 f4             	mov    %eax,-0xc(%ebp)
f01315fa:	eb 50                	jmp    f013164c <alloc_block_BF+0x220>
	{
		if(element->sva == Mini_block->sva)
f01315fc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01315ff:	8b 50 08             	mov    0x8(%eax),%edx
f0131602:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131605:	8b 40 08             	mov    0x8(%eax),%eax
f0131608:	39 c2                	cmp    %eax,%edx
f013160a:	75 38                	jne    f0131644 <alloc_block_BF+0x218>
		{
			Mini_block->size = size;
f013160c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f013160f:	8b 55 08             	mov    0x8(%ebp),%edx
f0131612:	89 50 0c             	mov    %edx,0xc(%eax)
			//Mini_block->sva = element->sva;
			element->sva += size;
f0131615:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131618:	8b 50 08             	mov    0x8(%eax),%edx
f013161b:	8b 45 08             	mov    0x8(%ebp),%eax
f013161e:	01 c2                	add    %eax,%edx
f0131620:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131623:	89 50 08             	mov    %edx,0x8(%eax)
			element->size -= size;
f0131626:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131629:	8b 40 0c             	mov    0xc(%eax),%eax
f013162c:	2b 45 08             	sub    0x8(%ebp),%eax
f013162f:	89 c2                	mov    %eax,%edx
f0131631:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131634:	89 50 0c             	mov    %edx,0xc(%eax)
			//LIST_REMOVE(&(AvailableMemBlocksList), Mini_block);
			AvailableMemBlocksList.size --;
f0131637:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f013163c:	48                   	dec    %eax
f013163d:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
			break;
f0131642:	eb 2e                	jmp    f0131672 <alloc_block_BF+0x246>
			}
		}
	}


	LIST_FOREACH(element, &(FreeMemBlocksList)) // block is found with GREATER size
f0131644:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131649:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013164c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131650:	74 07                	je     f0131659 <alloc_block_BF+0x22d>
f0131652:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131655:	8b 00                	mov    (%eax),%eax
f0131657:	eb 05                	jmp    f013165e <alloc_block_BF+0x232>
f0131659:	b8 00 00 00 00       	mov    $0x0,%eax
f013165e:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f0131663:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131668:	85 c0                	test   %eax,%eax
f013166a:	75 90                	jne    f01315fc <alloc_block_BF+0x1d0>
f013166c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131670:	75 8a                	jne    f01315fc <alloc_block_BF+0x1d0>
			//LIST_REMOVE(&(AvailableMemBlocksList), Mini_block);
			AvailableMemBlocksList.size --;
			break;
		}
	}
	return Mini_block;
f0131672:	8b 45 ec             	mov    -0x14(%ebp),%eax

}
f0131675:	c9                   	leave  
f0131676:	c3                   	ret    

f0131677 <alloc_block_NF>:

//=========================================
// [7] ALLOCATE BLOCK BY NEXT FIT:
//=========================================
struct MemBlock *alloc_block_NF(uint32 size)
{
f0131677:	55                   	push   %ebp
f0131678:	89 e5                	mov    %esp,%ebp
f013167a:	83 ec 18             	sub    $0x18,%esp
	//TODO: [PROJECT MS1 - BONUS] [DYNAMIC ALLOCATOR] alloc_block_NF
	// Write your code here, remove the panic and write your code
	struct MemBlock* element;


	if(Last == NULL)
f013167d:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f0131682:	85 c0                	test   %eax,%eax
f0131684:	0f 85 d8 01 00 00    	jne    f0131862 <alloc_block_NF+0x1eb>
	{
		  LIST_FOREACH(element, &(FreeMemBlocksList))
f013168a:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f013168f:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131692:	e9 93 01 00 00       	jmp    f013182a <alloc_block_NF+0x1b3>
			{

				if(element->size == size) // block is found with EXACT size empty alloc. list
f0131697:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013169a:	8b 40 0c             	mov    0xc(%eax),%eax
f013169d:	3b 45 08             	cmp    0x8(%ebp),%eax
f01316a0:	0f 85 94 00 00 00    	jne    f013173a <alloc_block_NF+0xc3>
				{

					Last = element;
f01316a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316a9:	a3 d0 8f 65 f0       	mov    %eax,0xf0658fd0

					LIST_REMOVE(&(FreeMemBlocksList), element);
f01316ae:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01316b2:	75 17                	jne    f01316cb <alloc_block_NF+0x54>
f01316b4:	83 ec 04             	sub    $0x4,%esp
f01316b7:	68 43 c6 13 f0       	push   $0xf013c643
f01316bc:	68 11 01 00 00       	push   $0x111
f01316c1:	68 07 c6 13 f0       	push   $0xf013c607
f01316c6:	e8 db ea fc ff       	call   f01001a6 <_panic>
f01316cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316ce:	8b 00                	mov    (%eax),%eax
f01316d0:	85 c0                	test   %eax,%eax
f01316d2:	74 10                	je     f01316e4 <alloc_block_NF+0x6d>
f01316d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316d7:	8b 00                	mov    (%eax),%eax
f01316d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01316dc:	8b 52 04             	mov    0x4(%edx),%edx
f01316df:	89 50 04             	mov    %edx,0x4(%eax)
f01316e2:	eb 0b                	jmp    f01316ef <alloc_block_NF+0x78>
f01316e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316e7:	8b 40 04             	mov    0x4(%eax),%eax
f01316ea:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f01316ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316f2:	8b 40 04             	mov    0x4(%eax),%eax
f01316f5:	85 c0                	test   %eax,%eax
f01316f7:	74 0f                	je     f0131708 <alloc_block_NF+0x91>
f01316f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01316fc:	8b 40 04             	mov    0x4(%eax),%eax
f01316ff:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131702:	8b 12                	mov    (%edx),%edx
f0131704:	89 10                	mov    %edx,(%eax)
f0131706:	eb 0a                	jmp    f0131712 <alloc_block_NF+0x9b>
f0131708:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013170b:	8b 00                	mov    (%eax),%eax
f013170d:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f0131712:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131715:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013171b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013171e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131725:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f013172a:	48                   	dec    %eax
f013172b:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc


					return Last;
f0131730:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f0131735:	e9 f2 04 00 00       	jmp    f0131c2c <alloc_block_NF+0x5b5>
				}

				else if(element->size > size) // block is found with GREATER size empty alloc. list
f013173a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013173d:	8b 40 0c             	mov    0xc(%eax),%eax
f0131740:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131743:	0f 86 d9 00 00 00    	jbe    f0131822 <alloc_block_NF+0x1ab>
				{

					struct MemBlock* felement = LIST_FIRST(&(AvailableMemBlocksList));
f0131749:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f013174e:	89 45 f0             	mov    %eax,-0x10(%ebp)
					Last = felement;
f0131751:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131754:	a3 d0 8f 65 f0       	mov    %eax,0xf0658fd0
					LIST_REMOVE(&(AvailableMemBlocksList), felement);
f0131759:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f013175d:	75 17                	jne    f0131776 <alloc_block_NF+0xff>
f013175f:	83 ec 04             	sub    $0x4,%esp
f0131762:	68 43 c6 13 f0       	push   $0xf013c643
f0131767:	68 1c 01 00 00       	push   $0x11c
f013176c:	68 07 c6 13 f0       	push   $0xf013c607
f0131771:	e8 30 ea fc ff       	call   f01001a6 <_panic>
f0131776:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131779:	8b 00                	mov    (%eax),%eax
f013177b:	85 c0                	test   %eax,%eax
f013177d:	74 10                	je     f013178f <alloc_block_NF+0x118>
f013177f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131782:	8b 00                	mov    (%eax),%eax
f0131784:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0131787:	8b 52 04             	mov    0x4(%edx),%edx
f013178a:	89 50 04             	mov    %edx,0x4(%eax)
f013178d:	eb 0b                	jmp    f013179a <alloc_block_NF+0x123>
f013178f:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0131792:	8b 40 04             	mov    0x4(%eax),%eax
f0131795:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f013179a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013179d:	8b 40 04             	mov    0x4(%eax),%eax
f01317a0:	85 c0                	test   %eax,%eax
f01317a2:	74 0f                	je     f01317b3 <alloc_block_NF+0x13c>
f01317a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01317a7:	8b 40 04             	mov    0x4(%eax),%eax
f01317aa:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01317ad:	8b 12                	mov    (%edx),%edx
f01317af:	89 10                	mov    %edx,(%eax)
f01317b1:	eb 0a                	jmp    f01317bd <alloc_block_NF+0x146>
f01317b3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01317b6:	8b 00                	mov    (%eax),%eax
f01317b8:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f01317bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01317c0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01317c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01317c9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01317d0:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f01317d5:	48                   	dec    %eax
f01317d6:	a3 00 85 6e f0       	mov    %eax,0xf06e8500

					Last->size = size;
f01317db:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f01317e0:	8b 55 08             	mov    0x8(%ebp),%edx
f01317e3:	89 50 0c             	mov    %edx,0xc(%eax)
					Last->sva = element->sva;
f01317e6:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f01317eb:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01317ee:	8b 52 08             	mov    0x8(%edx),%edx
f01317f1:	89 50 08             	mov    %edx,0x8(%eax)

					element->size = element->size - size;
f01317f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01317f7:	8b 40 0c             	mov    0xc(%eax),%eax
f01317fa:	2b 45 08             	sub    0x8(%ebp),%eax
f01317fd:	89 c2                	mov    %eax,%edx
f01317ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131802:	89 50 0c             	mov    %edx,0xc(%eax)
					element->sva = Last->sva + size;
f0131805:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f013180a:	8b 50 08             	mov    0x8(%eax),%edx
f013180d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131810:	01 c2                	add    %eax,%edx
f0131812:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131815:	89 50 08             	mov    %edx,0x8(%eax)

					return Last;
f0131818:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f013181d:	e9 0a 04 00 00       	jmp    f0131c2c <alloc_block_NF+0x5b5>
	struct MemBlock* element;


	if(Last == NULL)
	{
		  LIST_FOREACH(element, &(FreeMemBlocksList))
f0131822:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131827:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013182a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013182e:	74 07                	je     f0131837 <alloc_block_NF+0x1c0>
f0131830:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131833:	8b 00                	mov    (%eax),%eax
f0131835:	eb 05                	jmp    f013183c <alloc_block_NF+0x1c5>
f0131837:	b8 00 00 00 00       	mov    $0x0,%eax
f013183c:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f0131841:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131846:	85 c0                	test   %eax,%eax
f0131848:	0f 85 49 fe ff ff    	jne    f0131697 <alloc_block_NF+0x20>
f013184e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131852:	0f 85 3f fe ff ff    	jne    f0131697 <alloc_block_NF+0x20>
					return Last;

				}
			}

		return NULL;
f0131858:	b8 00 00 00 00       	mov    $0x0,%eax
f013185d:	e9 ca 03 00 00       	jmp    f0131c2c <alloc_block_NF+0x5b5>
	}

	LIST_FOREACH(element,&(FreeMemBlocksList))
f0131862:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131867:	89 45 f4             	mov    %eax,-0xc(%ebp)
f013186a:	e9 a9 01 00 00       	jmp    f0131a18 <alloc_block_NF+0x3a1>
	{
		if(element->sva > Last->sva)
f013186f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131872:	8b 50 08             	mov    0x8(%eax),%edx
f0131875:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f013187a:	8b 40 08             	mov    0x8(%eax),%eax
f013187d:	39 c2                	cmp    %eax,%edx
f013187f:	0f 86 8b 01 00 00    	jbe    f0131a10 <alloc_block_NF+0x399>
		{

			 if(element->size == size)
f0131885:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131888:	8b 40 0c             	mov    0xc(%eax),%eax
f013188b:	3b 45 08             	cmp    0x8(%ebp),%eax
f013188e:	0f 85 94 00 00 00    	jne    f0131928 <alloc_block_NF+0x2b1>
			{

				Last = element;
f0131894:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131897:	a3 d0 8f 65 f0       	mov    %eax,0xf0658fd0

				LIST_REMOVE(&(FreeMemBlocksList), element);
f013189c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f01318a0:	75 17                	jne    f01318b9 <alloc_block_NF+0x242>
f01318a2:	83 ec 04             	sub    $0x4,%esp
f01318a5:	68 43 c6 13 f0       	push   $0xf013c643
f01318aa:	68 36 01 00 00       	push   $0x136
f01318af:	68 07 c6 13 f0       	push   $0xf013c607
f01318b4:	e8 ed e8 fc ff       	call   f01001a6 <_panic>
f01318b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318bc:	8b 00                	mov    (%eax),%eax
f01318be:	85 c0                	test   %eax,%eax
f01318c0:	74 10                	je     f01318d2 <alloc_block_NF+0x25b>
f01318c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318c5:	8b 00                	mov    (%eax),%eax
f01318c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01318ca:	8b 52 04             	mov    0x4(%edx),%edx
f01318cd:	89 50 04             	mov    %edx,0x4(%eax)
f01318d0:	eb 0b                	jmp    f01318dd <alloc_block_NF+0x266>
f01318d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318d5:	8b 40 04             	mov    0x4(%eax),%eax
f01318d8:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f01318dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318e0:	8b 40 04             	mov    0x4(%eax),%eax
f01318e3:	85 c0                	test   %eax,%eax
f01318e5:	74 0f                	je     f01318f6 <alloc_block_NF+0x27f>
f01318e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318ea:	8b 40 04             	mov    0x4(%eax),%eax
f01318ed:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01318f0:	8b 12                	mov    (%edx),%edx
f01318f2:	89 10                	mov    %edx,(%eax)
f01318f4:	eb 0a                	jmp    f0131900 <alloc_block_NF+0x289>
f01318f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01318f9:	8b 00                	mov    (%eax),%eax
f01318fb:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f0131900:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131903:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131909:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013190c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131913:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f0131918:	48                   	dec    %eax
f0131919:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc


				return Last;
f013191e:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f0131923:	e9 04 03 00 00       	jmp    f0131c2c <alloc_block_NF+0x5b5>
			}

			else if(element->size > size)
f0131928:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013192b:	8b 40 0c             	mov    0xc(%eax),%eax
f013192e:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131931:	0f 86 d9 00 00 00    	jbe    f0131a10 <alloc_block_NF+0x399>
			{

				struct MemBlock* felement = LIST_FIRST(&(AvailableMemBlocksList));
f0131937:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f013193c:	89 45 e8             	mov    %eax,-0x18(%ebp)
				Last = felement;
f013193f:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131942:	a3 d0 8f 65 f0       	mov    %eax,0xf0658fd0
				LIST_REMOVE(&(AvailableMemBlocksList), felement);
f0131947:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
f013194b:	75 17                	jne    f0131964 <alloc_block_NF+0x2ed>
f013194d:	83 ec 04             	sub    $0x4,%esp
f0131950:	68 43 c6 13 f0       	push   $0xf013c643
f0131955:	68 41 01 00 00       	push   $0x141
f013195a:	68 07 c6 13 f0       	push   $0xf013c607
f013195f:	e8 42 e8 fc ff       	call   f01001a6 <_panic>
f0131964:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131967:	8b 00                	mov    (%eax),%eax
f0131969:	85 c0                	test   %eax,%eax
f013196b:	74 10                	je     f013197d <alloc_block_NF+0x306>
f013196d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131970:	8b 00                	mov    (%eax),%eax
f0131972:	8b 55 e8             	mov    -0x18(%ebp),%edx
f0131975:	8b 52 04             	mov    0x4(%edx),%edx
f0131978:	89 50 04             	mov    %edx,0x4(%eax)
f013197b:	eb 0b                	jmp    f0131988 <alloc_block_NF+0x311>
f013197d:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131980:	8b 40 04             	mov    0x4(%eax),%eax
f0131983:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0131988:	8b 45 e8             	mov    -0x18(%ebp),%eax
f013198b:	8b 40 04             	mov    0x4(%eax),%eax
f013198e:	85 c0                	test   %eax,%eax
f0131990:	74 0f                	je     f01319a1 <alloc_block_NF+0x32a>
f0131992:	8b 45 e8             	mov    -0x18(%ebp),%eax
f0131995:	8b 40 04             	mov    0x4(%eax),%eax
f0131998:	8b 55 e8             	mov    -0x18(%ebp),%edx
f013199b:	8b 12                	mov    (%edx),%edx
f013199d:	89 10                	mov    %edx,(%eax)
f013199f:	eb 0a                	jmp    f01319ab <alloc_block_NF+0x334>
f01319a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01319a4:	8b 00                	mov    (%eax),%eax
f01319a6:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f01319ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01319ae:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f01319b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
f01319b7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01319be:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f01319c3:	48                   	dec    %eax
f01319c4:	a3 00 85 6e f0       	mov    %eax,0xf06e8500

				Last->size = size;
f01319c9:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f01319ce:	8b 55 08             	mov    0x8(%ebp),%edx
f01319d1:	89 50 0c             	mov    %edx,0xc(%eax)
				Last->sva = element->sva;
f01319d4:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f01319d9:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01319dc:	8b 52 08             	mov    0x8(%edx),%edx
f01319df:	89 50 08             	mov    %edx,0x8(%eax)

				element->size = element->size - size;
f01319e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319e5:	8b 40 0c             	mov    0xc(%eax),%eax
f01319e8:	2b 45 08             	sub    0x8(%ebp),%eax
f01319eb:	89 c2                	mov    %eax,%edx
f01319ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01319f0:	89 50 0c             	mov    %edx,0xc(%eax)
				element->sva = Last->sva + size;
f01319f3:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f01319f8:	8b 50 08             	mov    0x8(%eax),%edx
f01319fb:	8b 45 08             	mov    0x8(%ebp),%eax
f01319fe:	01 c2                	add    %eax,%edx
f0131a00:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a03:	89 50 08             	mov    %edx,0x8(%eax)


				return Last;
f0131a06:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f0131a0b:	e9 1c 02 00 00       	jmp    f0131c2c <alloc_block_NF+0x5b5>
			}

		return NULL;
	}

	LIST_FOREACH(element,&(FreeMemBlocksList))
f0131a10:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131a15:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131a18:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131a1c:	74 07                	je     f0131a25 <alloc_block_NF+0x3ae>
f0131a1e:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a21:	8b 00                	mov    (%eax),%eax
f0131a23:	eb 05                	jmp    f0131a2a <alloc_block_NF+0x3b3>
f0131a25:	b8 00 00 00 00       	mov    $0x0,%eax
f0131a2a:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f0131a2f:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131a34:	85 c0                	test   %eax,%eax
f0131a36:	0f 85 33 fe ff ff    	jne    f013186f <alloc_block_NF+0x1f8>
f0131a3c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131a40:	0f 85 29 fe ff ff    	jne    f013186f <alloc_block_NF+0x1f8>

			}
		}
	}

	LIST_FOREACH(element,&(FreeMemBlocksList))
f0131a46:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131a4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131a4e:	e9 a6 01 00 00       	jmp    f0131bf9 <alloc_block_NF+0x582>
		{
			if(element->sva < Last->sva)
f0131a53:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a56:	8b 50 08             	mov    0x8(%eax),%edx
f0131a59:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f0131a5e:	8b 40 08             	mov    0x8(%eax),%eax
f0131a61:	39 c2                	cmp    %eax,%edx
f0131a63:	0f 83 88 01 00 00    	jae    f0131bf1 <alloc_block_NF+0x57a>
			{
				 if(element->size == size)
f0131a69:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a6c:	8b 40 0c             	mov    0xc(%eax),%eax
f0131a6f:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131a72:	0f 85 94 00 00 00    	jne    f0131b0c <alloc_block_NF+0x495>
				{
					Last = element;
f0131a78:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131a7b:	a3 d0 8f 65 f0       	mov    %eax,0xf0658fd0

					LIST_REMOVE(&(FreeMemBlocksList), element);
f0131a80:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131a84:	75 17                	jne    f0131a9d <alloc_block_NF+0x426>
f0131a86:	83 ec 04             	sub    $0x4,%esp
f0131a89:	68 43 c6 13 f0       	push   $0xf013c643
f0131a8e:	68 58 01 00 00       	push   $0x158
f0131a93:	68 07 c6 13 f0       	push   $0xf013c607
f0131a98:	e8 09 e7 fc ff       	call   f01001a6 <_panic>
f0131a9d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131aa0:	8b 00                	mov    (%eax),%eax
f0131aa2:	85 c0                	test   %eax,%eax
f0131aa4:	74 10                	je     f0131ab6 <alloc_block_NF+0x43f>
f0131aa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131aa9:	8b 00                	mov    (%eax),%eax
f0131aab:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131aae:	8b 52 04             	mov    0x4(%edx),%edx
f0131ab1:	89 50 04             	mov    %edx,0x4(%eax)
f0131ab4:	eb 0b                	jmp    f0131ac1 <alloc_block_NF+0x44a>
f0131ab6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ab9:	8b 40 04             	mov    0x4(%eax),%eax
f0131abc:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f0131ac1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ac4:	8b 40 04             	mov    0x4(%eax),%eax
f0131ac7:	85 c0                	test   %eax,%eax
f0131ac9:	74 0f                	je     f0131ada <alloc_block_NF+0x463>
f0131acb:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ace:	8b 40 04             	mov    0x4(%eax),%eax
f0131ad1:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131ad4:	8b 12                	mov    (%edx),%edx
f0131ad6:	89 10                	mov    %edx,(%eax)
f0131ad8:	eb 0a                	jmp    f0131ae4 <alloc_block_NF+0x46d>
f0131ada:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131add:	8b 00                	mov    (%eax),%eax
f0131adf:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f0131ae4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ae7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131aed:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131af0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131af7:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f0131afc:	48                   	dec    %eax
f0131afd:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc


					return Last;
f0131b02:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f0131b07:	e9 20 01 00 00       	jmp    f0131c2c <alloc_block_NF+0x5b5>
				}

				else if(element->size > size)
f0131b0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131b0f:	8b 40 0c             	mov    0xc(%eax),%eax
f0131b12:	3b 45 08             	cmp    0x8(%ebp),%eax
f0131b15:	0f 86 d6 00 00 00    	jbe    f0131bf1 <alloc_block_NF+0x57a>
				{

					struct MemBlock* felement = LIST_FIRST(&(AvailableMemBlocksList));
f0131b1b:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0131b20:	89 45 ec             	mov    %eax,-0x14(%ebp)
					Last = felement;
f0131b23:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b26:	a3 d0 8f 65 f0       	mov    %eax,0xf0658fd0
					LIST_REMOVE(&(AvailableMemBlocksList), felement);
f0131b2b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
f0131b2f:	75 17                	jne    f0131b48 <alloc_block_NF+0x4d1>
f0131b31:	83 ec 04             	sub    $0x4,%esp
f0131b34:	68 43 c6 13 f0       	push   $0xf013c643
f0131b39:	68 63 01 00 00       	push   $0x163
f0131b3e:	68 07 c6 13 f0       	push   $0xf013c607
f0131b43:	e8 5e e6 fc ff       	call   f01001a6 <_panic>
f0131b48:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b4b:	8b 00                	mov    (%eax),%eax
f0131b4d:	85 c0                	test   %eax,%eax
f0131b4f:	74 10                	je     f0131b61 <alloc_block_NF+0x4ea>
f0131b51:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b54:	8b 00                	mov    (%eax),%eax
f0131b56:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131b59:	8b 52 04             	mov    0x4(%edx),%edx
f0131b5c:	89 50 04             	mov    %edx,0x4(%eax)
f0131b5f:	eb 0b                	jmp    f0131b6c <alloc_block_NF+0x4f5>
f0131b61:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b64:	8b 40 04             	mov    0x4(%eax),%eax
f0131b67:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0131b6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b6f:	8b 40 04             	mov    0x4(%eax),%eax
f0131b72:	85 c0                	test   %eax,%eax
f0131b74:	74 0f                	je     f0131b85 <alloc_block_NF+0x50e>
f0131b76:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b79:	8b 40 04             	mov    0x4(%eax),%eax
f0131b7c:	8b 55 ec             	mov    -0x14(%ebp),%edx
f0131b7f:	8b 12                	mov    (%edx),%edx
f0131b81:	89 10                	mov    %edx,(%eax)
f0131b83:	eb 0a                	jmp    f0131b8f <alloc_block_NF+0x518>
f0131b85:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b88:	8b 00                	mov    (%eax),%eax
f0131b8a:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0131b8f:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b92:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131b98:	8b 45 ec             	mov    -0x14(%ebp),%eax
f0131b9b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131ba2:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0131ba7:	48                   	dec    %eax
f0131ba8:	a3 00 85 6e f0       	mov    %eax,0xf06e8500

					Last->size = size;
f0131bad:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f0131bb2:	8b 55 08             	mov    0x8(%ebp),%edx
f0131bb5:	89 50 0c             	mov    %edx,0xc(%eax)
					Last->sva = element->sva;
f0131bb8:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f0131bbd:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131bc0:	8b 52 08             	mov    0x8(%edx),%edx
f0131bc3:	89 50 08             	mov    %edx,0x8(%eax)

					element->size = element->size - size;
f0131bc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bc9:	8b 40 0c             	mov    0xc(%eax),%eax
f0131bcc:	2b 45 08             	sub    0x8(%ebp),%eax
f0131bcf:	89 c2                	mov    %eax,%edx
f0131bd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131bd4:	89 50 0c             	mov    %edx,0xc(%eax)
					element->sva = Last->sva + size;
f0131bd7:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f0131bdc:	8b 50 08             	mov    0x8(%eax),%edx
f0131bdf:	8b 45 08             	mov    0x8(%ebp),%eax
f0131be2:	01 c2                	add    %eax,%edx
f0131be4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131be7:	89 50 08             	mov    %edx,0x8(%eax)

					return Last;
f0131bea:	a1 d0 8f 65 f0       	mov    0xf0658fd0,%eax
f0131bef:	eb 3b                	jmp    f0131c2c <alloc_block_NF+0x5b5>

			}
		}
	}

	LIST_FOREACH(element,&(FreeMemBlocksList))
f0131bf1:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131bf6:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131bf9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131bfd:	74 07                	je     f0131c06 <alloc_block_NF+0x58f>
f0131bff:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131c02:	8b 00                	mov    (%eax),%eax
f0131c04:	eb 05                	jmp    f0131c0b <alloc_block_NF+0x594>
f0131c06:	b8 00 00 00 00       	mov    $0x0,%eax
f0131c0b:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f0131c10:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0131c15:	85 c0                	test   %eax,%eax
f0131c17:	0f 85 36 fe ff ff    	jne    f0131a53 <alloc_block_NF+0x3dc>
f0131c1d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131c21:	0f 85 2c fe ff ff    	jne    f0131a53 <alloc_block_NF+0x3dc>

				}
			}
		}

	return NULL;
f0131c27:	b8 00 00 00 00       	mov    $0x0,%eax

}
f0131c2c:	c9                   	leave  
f0131c2d:	c3                   	ret    

f0131c2e <insert_sorted_with_merge_freeList>:

//===================================================
// [8] INSERT BLOCK (SORTED WITH MERGE) IN FREE LIST:
//===================================================
void insert_sorted_with_merge_freeList(struct MemBlock *blockToInsert)
{
f0131c2e:	55                   	push   %ebp
f0131c2f:	89 e5                	mov    %esp,%ebp
f0131c31:	83 ec 18             	sub    $0x18,%esp
	//cprintf("\nAFTER INSERT with MERGE:\n=====================\n");
	//print_mem_block_lists();

	struct MemBlock *element;

	if(LIST_EMPTY(&(FreeMemBlocksList))) // insert head
f0131c34:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131c39:	85 c0                	test   %eax,%eax
f0131c3b:	75 68                	jne    f0131ca5 <insert_sorted_with_merge_freeList+0x77>
	{
		LIST_INSERT_HEAD(&(FreeMemBlocksList) , blockToInsert);
f0131c3d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131c41:	75 17                	jne    f0131c5a <insert_sorted_with_merge_freeList+0x2c>
f0131c43:	83 ec 04             	sub    $0x4,%esp
f0131c46:	68 e4 c5 13 f0       	push   $0xf013c5e4
f0131c4b:	68 87 01 00 00       	push   $0x187
f0131c50:	68 07 c6 13 f0       	push   $0xf013c607
f0131c55:	e8 4c e5 fc ff       	call   f01001a6 <_panic>
f0131c5a:	8b 15 c0 84 6e f0    	mov    0xf06e84c0,%edx
f0131c60:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c63:	89 10                	mov    %edx,(%eax)
f0131c65:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c68:	8b 00                	mov    (%eax),%eax
f0131c6a:	85 c0                	test   %eax,%eax
f0131c6c:	74 0d                	je     f0131c7b <insert_sorted_with_merge_freeList+0x4d>
f0131c6e:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131c73:	8b 55 08             	mov    0x8(%ebp),%edx
f0131c76:	89 50 04             	mov    %edx,0x4(%eax)
f0131c79:	eb 08                	jmp    f0131c83 <insert_sorted_with_merge_freeList+0x55>
f0131c7b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c7e:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f0131c83:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c86:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f0131c8b:	8b 45 08             	mov    0x8(%ebp),%eax
f0131c8e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131c95:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f0131c9a:	40                   	inc    %eax
f0131c9b:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
					 break;
				 }
			 }
		}
	}
}
f0131ca0:	e9 de 06 00 00       	jmp    f0132383 <insert_sorted_with_merge_freeList+0x755>
	{
		LIST_INSERT_HEAD(&(FreeMemBlocksList) , blockToInsert);
	}
	else
	{
		LIST_FOREACH(element, &(FreeMemBlocksList))
f0131ca5:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131caa:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0131cad:	e9 a1 06 00 00       	jmp    f0132353 <insert_sorted_with_merge_freeList+0x725>
		{

			 if((blockToInsert->sva + blockToInsert->size) == LIST_FIRST(&(FreeMemBlocksList))->sva) //insert & merge head
f0131cb2:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cb5:	8b 50 08             	mov    0x8(%eax),%edx
f0131cb8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cbb:	8b 40 0c             	mov    0xc(%eax),%eax
f0131cbe:	01 c2                	add    %eax,%edx
f0131cc0:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131cc5:	8b 40 08             	mov    0x8(%eax),%eax
f0131cc8:	39 c2                	cmp    %eax,%edx
f0131cca:	0f 85 a4 00 00 00    	jne    f0131d74 <insert_sorted_with_merge_freeList+0x146>
			 {
				 element->sva -= blockToInsert->size;
f0131cd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cd3:	8b 50 08             	mov    0x8(%eax),%edx
f0131cd6:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cd9:	8b 40 0c             	mov    0xc(%eax),%eax
f0131cdc:	29 c2                	sub    %eax,%edx
f0131cde:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ce1:	89 50 08             	mov    %edx,0x8(%eax)
				 element->size += blockToInsert->size;
f0131ce4:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ce7:	8b 50 0c             	mov    0xc(%eax),%edx
f0131cea:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ced:	8b 40 0c             	mov    0xc(%eax),%eax
f0131cf0:	01 c2                	add    %eax,%edx
f0131cf2:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131cf5:	89 50 0c             	mov    %edx,0xc(%eax)
				 blockToInsert->size = 0;
f0131cf8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131cfb:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
				 blockToInsert->sva = 0;
f0131d02:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d05:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
				 LIST_INSERT_HEAD(&(AvailableMemBlocksList), blockToInsert);
f0131d0c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131d10:	75 17                	jne    f0131d29 <insert_sorted_with_merge_freeList+0xfb>
f0131d12:	83 ec 04             	sub    $0x4,%esp
f0131d15:	68 e4 c5 13 f0       	push   $0xf013c5e4
f0131d1a:	68 94 01 00 00       	push   $0x194
f0131d1f:	68 07 c6 13 f0       	push   $0xf013c607
f0131d24:	e8 7d e4 fc ff       	call   f01001a6 <_panic>
f0131d29:	8b 15 f4 84 6e f0    	mov    0xf06e84f4,%edx
f0131d2f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d32:	89 10                	mov    %edx,(%eax)
f0131d34:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d37:	8b 00                	mov    (%eax),%eax
f0131d39:	85 c0                	test   %eax,%eax
f0131d3b:	74 0d                	je     f0131d4a <insert_sorted_with_merge_freeList+0x11c>
f0131d3d:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0131d42:	8b 55 08             	mov    0x8(%ebp),%edx
f0131d45:	89 50 04             	mov    %edx,0x4(%eax)
f0131d48:	eb 08                	jmp    f0131d52 <insert_sorted_with_merge_freeList+0x124>
f0131d4a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d4d:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0131d52:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d55:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0131d5a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d5d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131d64:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0131d69:	40                   	inc    %eax
f0131d6a:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
				 break;
f0131d6f:	e9 0f 06 00 00       	jmp    f0132383 <insert_sorted_with_merge_freeList+0x755>
			 }
			 else if((blockToInsert->sva + blockToInsert->size) < LIST_FIRST(&(FreeMemBlocksList))->sva) //insert head
f0131d74:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d77:	8b 50 08             	mov    0x8(%eax),%edx
f0131d7a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131d7d:	8b 40 0c             	mov    0xc(%eax),%eax
f0131d80:	01 c2                	add    %eax,%edx
f0131d82:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131d87:	8b 40 08             	mov    0x8(%eax),%eax
f0131d8a:	39 c2                	cmp    %eax,%edx
f0131d8c:	73 68                	jae    f0131df6 <insert_sorted_with_merge_freeList+0x1c8>
			 {
				 LIST_INSERT_HEAD(&(FreeMemBlocksList) , blockToInsert);
f0131d8e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131d92:	75 17                	jne    f0131dab <insert_sorted_with_merge_freeList+0x17d>
f0131d94:	83 ec 04             	sub    $0x4,%esp
f0131d97:	68 e4 c5 13 f0       	push   $0xf013c5e4
f0131d9c:	68 99 01 00 00       	push   $0x199
f0131da1:	68 07 c6 13 f0       	push   $0xf013c607
f0131da6:	e8 fb e3 fc ff       	call   f01001a6 <_panic>
f0131dab:	8b 15 c0 84 6e f0    	mov    0xf06e84c0,%edx
f0131db1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131db4:	89 10                	mov    %edx,(%eax)
f0131db6:	8b 45 08             	mov    0x8(%ebp),%eax
f0131db9:	8b 00                	mov    (%eax),%eax
f0131dbb:	85 c0                	test   %eax,%eax
f0131dbd:	74 0d                	je     f0131dcc <insert_sorted_with_merge_freeList+0x19e>
f0131dbf:	a1 c0 84 6e f0       	mov    0xf06e84c0,%eax
f0131dc4:	8b 55 08             	mov    0x8(%ebp),%edx
f0131dc7:	89 50 04             	mov    %edx,0x4(%eax)
f0131dca:	eb 08                	jmp    f0131dd4 <insert_sorted_with_merge_freeList+0x1a6>
f0131dcc:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dcf:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f0131dd4:	8b 45 08             	mov    0x8(%ebp),%eax
f0131dd7:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f0131ddc:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ddf:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131de6:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f0131deb:	40                   	inc    %eax
f0131dec:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
				 break;
f0131df1:	e9 8d 05 00 00       	jmp    f0132383 <insert_sorted_with_merge_freeList+0x755>
			 }
			 else if((element->sva + element->size) == blockToInsert->sva && LIST_NEXT(element) == NULL) //insert & merge tail
f0131df6:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131df9:	8b 50 08             	mov    0x8(%eax),%edx
f0131dfc:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131dff:	8b 40 0c             	mov    0xc(%eax),%eax
f0131e02:	01 c2                	add    %eax,%edx
f0131e04:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e07:	8b 40 08             	mov    0x8(%eax),%eax
f0131e0a:	39 c2                	cmp    %eax,%edx
f0131e0c:	0f 85 9d 00 00 00    	jne    f0131eaf <insert_sorted_with_merge_freeList+0x281>
f0131e12:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e15:	8b 00                	mov    (%eax),%eax
f0131e17:	85 c0                	test   %eax,%eax
f0131e19:	0f 85 90 00 00 00    	jne    f0131eaf <insert_sorted_with_merge_freeList+0x281>
			 {
				 element->size += blockToInsert->size;
f0131e1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e22:	8b 50 0c             	mov    0xc(%eax),%edx
f0131e25:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e28:	8b 40 0c             	mov    0xc(%eax),%eax
f0131e2b:	01 c2                	add    %eax,%edx
f0131e2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131e30:	89 50 0c             	mov    %edx,0xc(%eax)
				 blockToInsert->size = 0;
f0131e33:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e36:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
				 blockToInsert->sva = 0;
f0131e3d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e40:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
				 // memset(blockToInsert, 0 , sizeof(struct MemBlock));
				 LIST_INSERT_HEAD(&(AvailableMemBlocksList), blockToInsert);
f0131e47:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131e4b:	75 17                	jne    f0131e64 <insert_sorted_with_merge_freeList+0x236>
f0131e4d:	83 ec 04             	sub    $0x4,%esp
f0131e50:	68 e4 c5 13 f0       	push   $0xf013c5e4
f0131e55:	68 a2 01 00 00       	push   $0x1a2
f0131e5a:	68 07 c6 13 f0       	push   $0xf013c607
f0131e5f:	e8 42 e3 fc ff       	call   f01001a6 <_panic>
f0131e64:	8b 15 f4 84 6e f0    	mov    0xf06e84f4,%edx
f0131e6a:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e6d:	89 10                	mov    %edx,(%eax)
f0131e6f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e72:	8b 00                	mov    (%eax),%eax
f0131e74:	85 c0                	test   %eax,%eax
f0131e76:	74 0d                	je     f0131e85 <insert_sorted_with_merge_freeList+0x257>
f0131e78:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0131e7d:	8b 55 08             	mov    0x8(%ebp),%edx
f0131e80:	89 50 04             	mov    %edx,0x4(%eax)
f0131e83:	eb 08                	jmp    f0131e8d <insert_sorted_with_merge_freeList+0x25f>
f0131e85:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e88:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0131e8d:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e90:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0131e95:	8b 45 08             	mov    0x8(%ebp),%eax
f0131e98:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0131e9f:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0131ea4:	40                   	inc    %eax
f0131ea5:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
				 break;
f0131eaa:	e9 d4 04 00 00       	jmp    f0132383 <insert_sorted_with_merge_freeList+0x755>
			 }
			 else if(LIST_NEXT(element) == NULL) //insert tail
f0131eaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131eb2:	8b 00                	mov    (%eax),%eax
f0131eb4:	85 c0                	test   %eax,%eax
f0131eb6:	75 68                	jne    f0131f20 <insert_sorted_with_merge_freeList+0x2f2>
			 {
				 LIST_INSERT_TAIL(&(FreeMemBlocksList), blockToInsert);
f0131eb8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131ebc:	75 17                	jne    f0131ed5 <insert_sorted_with_merge_freeList+0x2a7>
f0131ebe:	83 ec 04             	sub    $0x4,%esp
f0131ec1:	68 20 c6 13 f0       	push   $0xf013c620
f0131ec6:	68 a7 01 00 00       	push   $0x1a7
f0131ecb:	68 07 c6 13 f0       	push   $0xf013c607
f0131ed0:	e8 d1 e2 fc ff       	call   f01001a6 <_panic>
f0131ed5:	8b 15 c4 84 6e f0    	mov    0xf06e84c4,%edx
f0131edb:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ede:	89 50 04             	mov    %edx,0x4(%eax)
f0131ee1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131ee4:	8b 40 04             	mov    0x4(%eax),%eax
f0131ee7:	85 c0                	test   %eax,%eax
f0131ee9:	74 0c                	je     f0131ef7 <insert_sorted_with_merge_freeList+0x2c9>
f0131eeb:	a1 c4 84 6e f0       	mov    0xf06e84c4,%eax
f0131ef0:	8b 55 08             	mov    0x8(%ebp),%edx
f0131ef3:	89 10                	mov    %edx,(%eax)
f0131ef5:	eb 08                	jmp    f0131eff <insert_sorted_with_merge_freeList+0x2d1>
f0131ef7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131efa:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f0131eff:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f02:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f0131f07:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f0a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f0131f10:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f0131f15:	40                   	inc    %eax
f0131f16:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
				 break;
f0131f1b:	e9 63 04 00 00       	jmp    f0132383 <insert_sorted_with_merge_freeList+0x755>
			 }
			 else // insert 2 blocks
			 {
				 if((element->sva + element->size) < blockToInsert->sva && (blockToInsert->sva + blockToInsert->size) < LIST_NEXT(element)->sva) // No merge
f0131f20:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f23:	8b 50 08             	mov    0x8(%eax),%edx
f0131f26:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f29:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f2c:	01 c2                	add    %eax,%edx
f0131f2e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f31:	8b 40 08             	mov    0x8(%eax),%eax
f0131f34:	39 c2                	cmp    %eax,%edx
f0131f36:	0f 83 8d 00 00 00    	jae    f0131fc9 <insert_sorted_with_merge_freeList+0x39b>
f0131f3c:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f3f:	8b 50 08             	mov    0x8(%eax),%edx
f0131f42:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f45:	8b 40 0c             	mov    0xc(%eax),%eax
f0131f48:	01 c2                	add    %eax,%edx
f0131f4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f4d:	8b 00                	mov    (%eax),%eax
f0131f4f:	8b 40 08             	mov    0x8(%eax),%eax
f0131f52:	39 c2                	cmp    %eax,%edx
f0131f54:	73 73                	jae    f0131fc9 <insert_sorted_with_merge_freeList+0x39b>
				 {
					 LIST_INSERT_AFTER(&(FreeMemBlocksList), element, blockToInsert);
f0131f56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0131f5a:	74 06                	je     f0131f62 <insert_sorted_with_merge_freeList+0x334>
f0131f5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0131f60:	75 17                	jne    f0131f79 <insert_sorted_with_merge_freeList+0x34b>
f0131f62:	83 ec 04             	sub    $0x4,%esp
f0131f65:	68 64 c6 13 f0       	push   $0xf013c664
f0131f6a:	68 ae 01 00 00       	push   $0x1ae
f0131f6f:	68 07 c6 13 f0       	push   $0xf013c607
f0131f74:	e8 2d e2 fc ff       	call   f01001a6 <_panic>
f0131f79:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f7c:	8b 10                	mov    (%eax),%edx
f0131f7e:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f81:	89 10                	mov    %edx,(%eax)
f0131f83:	8b 45 08             	mov    0x8(%ebp),%eax
f0131f86:	8b 00                	mov    (%eax),%eax
f0131f88:	85 c0                	test   %eax,%eax
f0131f8a:	74 0b                	je     f0131f97 <insert_sorted_with_merge_freeList+0x369>
f0131f8c:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f8f:	8b 00                	mov    (%eax),%eax
f0131f91:	8b 55 08             	mov    0x8(%ebp),%edx
f0131f94:	89 50 04             	mov    %edx,0x4(%eax)
f0131f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131f9a:	8b 55 08             	mov    0x8(%ebp),%edx
f0131f9d:	89 10                	mov    %edx,(%eax)
f0131f9f:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fa2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f0131fa5:	89 50 04             	mov    %edx,0x4(%eax)
f0131fa8:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fab:	8b 00                	mov    (%eax),%eax
f0131fad:	85 c0                	test   %eax,%eax
f0131faf:	75 08                	jne    f0131fb9 <insert_sorted_with_merge_freeList+0x38b>
f0131fb1:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fb4:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f0131fb9:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f0131fbe:	40                   	inc    %eax
f0131fbf:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
					 break;
f0131fc4:	e9 ba 03 00 00       	jmp    f0132383 <insert_sorted_with_merge_freeList+0x755>
				 }
				 else if((element->sva + element->size) == blockToInsert->sva && (blockToInsert->sva + blockToInsert->size) < LIST_NEXT(element)->sva) // merge priv
f0131fc9:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fcc:	8b 50 08             	mov    0x8(%eax),%edx
f0131fcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131fd2:	8b 40 0c             	mov    0xc(%eax),%eax
f0131fd5:	01 c2                	add    %eax,%edx
f0131fd7:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fda:	8b 40 08             	mov    0x8(%eax),%eax
f0131fdd:	39 c2                	cmp    %eax,%edx
f0131fdf:	0f 85 ae 00 00 00    	jne    f0132093 <insert_sorted_with_merge_freeList+0x465>
f0131fe5:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fe8:	8b 50 08             	mov    0x8(%eax),%edx
f0131feb:	8b 45 08             	mov    0x8(%ebp),%eax
f0131fee:	8b 40 0c             	mov    0xc(%eax),%eax
f0131ff1:	01 c2                	add    %eax,%edx
f0131ff3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0131ff6:	8b 00                	mov    (%eax),%eax
f0131ff8:	8b 40 08             	mov    0x8(%eax),%eax
f0131ffb:	39 c2                	cmp    %eax,%edx
f0131ffd:	0f 83 90 00 00 00    	jae    f0132093 <insert_sorted_with_merge_freeList+0x465>
				 {
					 element->size = element->size + blockToInsert->size;
f0132003:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132006:	8b 50 0c             	mov    0xc(%eax),%edx
f0132009:	8b 45 08             	mov    0x8(%ebp),%eax
f013200c:	8b 40 0c             	mov    0xc(%eax),%eax
f013200f:	01 c2                	add    %eax,%edx
f0132011:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132014:	89 50 0c             	mov    %edx,0xc(%eax)
					 blockToInsert->size = 0;
f0132017:	8b 45 08             	mov    0x8(%ebp),%eax
f013201a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					 blockToInsert->sva = 0;
f0132021:	8b 45 08             	mov    0x8(%ebp),%eax
f0132024:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					// memset(blockToInsert, 0 , sizeof(struct MemBlock));
					 LIST_INSERT_HEAD(&(AvailableMemBlocksList), blockToInsert);
f013202b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f013202f:	75 17                	jne    f0132048 <insert_sorted_with_merge_freeList+0x41a>
f0132031:	83 ec 04             	sub    $0x4,%esp
f0132034:	68 e4 c5 13 f0       	push   $0xf013c5e4
f0132039:	68 b7 01 00 00       	push   $0x1b7
f013203e:	68 07 c6 13 f0       	push   $0xf013c607
f0132043:	e8 5e e1 fc ff       	call   f01001a6 <_panic>
f0132048:	8b 15 f4 84 6e f0    	mov    0xf06e84f4,%edx
f013204e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132051:	89 10                	mov    %edx,(%eax)
f0132053:	8b 45 08             	mov    0x8(%ebp),%eax
f0132056:	8b 00                	mov    (%eax),%eax
f0132058:	85 c0                	test   %eax,%eax
f013205a:	74 0d                	je     f0132069 <insert_sorted_with_merge_freeList+0x43b>
f013205c:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0132061:	8b 55 08             	mov    0x8(%ebp),%edx
f0132064:	89 50 04             	mov    %edx,0x4(%eax)
f0132067:	eb 08                	jmp    f0132071 <insert_sorted_with_merge_freeList+0x443>
f0132069:	8b 45 08             	mov    0x8(%ebp),%eax
f013206c:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0132071:	8b 45 08             	mov    0x8(%ebp),%eax
f0132074:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0132079:	8b 45 08             	mov    0x8(%ebp),%eax
f013207c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132083:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0132088:	40                   	inc    %eax
f0132089:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
					 break;
f013208e:	e9 f0 02 00 00       	jmp    f0132383 <insert_sorted_with_merge_freeList+0x755>
				 }
				 else if((element->sva + element->size) < blockToInsert->sva && (blockToInsert->sva + blockToInsert->size) == LIST_NEXT(element)->sva) // merge next
f0132093:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132096:	8b 50 08             	mov    0x8(%eax),%edx
f0132099:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013209c:	8b 40 0c             	mov    0xc(%eax),%eax
f013209f:	01 c2                	add    %eax,%edx
f01320a1:	8b 45 08             	mov    0x8(%ebp),%eax
f01320a4:	8b 40 08             	mov    0x8(%eax),%eax
f01320a7:	39 c2                	cmp    %eax,%edx
f01320a9:	0f 83 cc 00 00 00    	jae    f013217b <insert_sorted_with_merge_freeList+0x54d>
f01320af:	8b 45 08             	mov    0x8(%ebp),%eax
f01320b2:	8b 50 08             	mov    0x8(%eax),%edx
f01320b5:	8b 45 08             	mov    0x8(%ebp),%eax
f01320b8:	8b 40 0c             	mov    0xc(%eax),%eax
f01320bb:	01 c2                	add    %eax,%edx
f01320bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320c0:	8b 00                	mov    (%eax),%eax
f01320c2:	8b 40 08             	mov    0x8(%eax),%eax
f01320c5:	39 c2                	cmp    %eax,%edx
f01320c7:	0f 85 ae 00 00 00    	jne    f013217b <insert_sorted_with_merge_freeList+0x54d>
				 {
					 element->prev_next_info.le_next->sva -= blockToInsert->size;
f01320cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320d0:	8b 00                	mov    (%eax),%eax
f01320d2:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01320d5:	8b 12                	mov    (%edx),%edx
f01320d7:	8b 4a 08             	mov    0x8(%edx),%ecx
f01320da:	8b 55 08             	mov    0x8(%ebp),%edx
f01320dd:	8b 52 0c             	mov    0xc(%edx),%edx
f01320e0:	29 d1                	sub    %edx,%ecx
f01320e2:	89 ca                	mov    %ecx,%edx
f01320e4:	89 50 08             	mov    %edx,0x8(%eax)
					 element->prev_next_info.le_next->size += blockToInsert->size;
f01320e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01320ea:	8b 00                	mov    (%eax),%eax
f01320ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
f01320ef:	8b 12                	mov    (%edx),%edx
f01320f1:	8b 4a 0c             	mov    0xc(%edx),%ecx
f01320f4:	8b 55 08             	mov    0x8(%ebp),%edx
f01320f7:	8b 52 0c             	mov    0xc(%edx),%edx
f01320fa:	01 ca                	add    %ecx,%edx
f01320fc:	89 50 0c             	mov    %edx,0xc(%eax)
					 blockToInsert->size = 0;
f01320ff:	8b 45 08             	mov    0x8(%ebp),%eax
f0132102:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					 blockToInsert->sva = 0;
f0132109:	8b 45 08             	mov    0x8(%ebp),%eax
f013210c:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					 LIST_INSERT_HEAD(&(AvailableMemBlocksList), blockToInsert);
f0132113:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f0132117:	75 17                	jne    f0132130 <insert_sorted_with_merge_freeList+0x502>
f0132119:	83 ec 04             	sub    $0x4,%esp
f013211c:	68 e4 c5 13 f0       	push   $0xf013c5e4
f0132121:	68 c0 01 00 00       	push   $0x1c0
f0132126:	68 07 c6 13 f0       	push   $0xf013c607
f013212b:	e8 76 e0 fc ff       	call   f01001a6 <_panic>
f0132130:	8b 15 f4 84 6e f0    	mov    0xf06e84f4,%edx
f0132136:	8b 45 08             	mov    0x8(%ebp),%eax
f0132139:	89 10                	mov    %edx,(%eax)
f013213b:	8b 45 08             	mov    0x8(%ebp),%eax
f013213e:	8b 00                	mov    (%eax),%eax
f0132140:	85 c0                	test   %eax,%eax
f0132142:	74 0d                	je     f0132151 <insert_sorted_with_merge_freeList+0x523>
f0132144:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f0132149:	8b 55 08             	mov    0x8(%ebp),%edx
f013214c:	89 50 04             	mov    %edx,0x4(%eax)
f013214f:	eb 08                	jmp    f0132159 <insert_sorted_with_merge_freeList+0x52b>
f0132151:	8b 45 08             	mov    0x8(%ebp),%eax
f0132154:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f0132159:	8b 45 08             	mov    0x8(%ebp),%eax
f013215c:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0132161:	8b 45 08             	mov    0x8(%ebp),%eax
f0132164:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013216b:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0132170:	40                   	inc    %eax
f0132171:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
					 break;
f0132176:	e9 08 02 00 00       	jmp    f0132383 <insert_sorted_with_merge_freeList+0x755>
				 }
				 else if((element->sva + element->size) == blockToInsert->sva && (blockToInsert->sva + blockToInsert->size) == LIST_NEXT(element)->sva) // merge priv & next
f013217b:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013217e:	8b 50 08             	mov    0x8(%eax),%edx
f0132181:	8b 45 f4             	mov    -0xc(%ebp),%eax
f0132184:	8b 40 0c             	mov    0xc(%eax),%eax
f0132187:	01 c2                	add    %eax,%edx
f0132189:	8b 45 08             	mov    0x8(%ebp),%eax
f013218c:	8b 40 08             	mov    0x8(%eax),%eax
f013218f:	39 c2                	cmp    %eax,%edx
f0132191:	0f 85 b4 01 00 00    	jne    f013234b <insert_sorted_with_merge_freeList+0x71d>
f0132197:	8b 45 08             	mov    0x8(%ebp),%eax
f013219a:	8b 50 08             	mov    0x8(%eax),%edx
f013219d:	8b 45 08             	mov    0x8(%ebp),%eax
f01321a0:	8b 40 0c             	mov    0xc(%eax),%eax
f01321a3:	01 c2                	add    %eax,%edx
f01321a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321a8:	8b 00                	mov    (%eax),%eax
f01321aa:	8b 40 08             	mov    0x8(%eax),%eax
f01321ad:	39 c2                	cmp    %eax,%edx
f01321af:	0f 85 96 01 00 00    	jne    f013234b <insert_sorted_with_merge_freeList+0x71d>
				 {
					 struct MemBlock* Next = element->prev_next_info.le_next;
f01321b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321b8:	8b 00                	mov    (%eax),%eax
f01321ba:	89 45 f0             	mov    %eax,-0x10(%ebp)
					 element->size += (blockToInsert->size + Next->size);
f01321bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321c0:	8b 50 0c             	mov    0xc(%eax),%edx
f01321c3:	8b 45 08             	mov    0x8(%ebp),%eax
f01321c6:	8b 48 0c             	mov    0xc(%eax),%ecx
f01321c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321cc:	8b 40 0c             	mov    0xc(%eax),%eax
f01321cf:	01 c8                	add    %ecx,%eax
f01321d1:	01 c2                	add    %eax,%edx
f01321d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
f01321d6:	89 50 0c             	mov    %edx,0xc(%eax)
					 Next->sva = 0;
f01321d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321dc:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					 Next->size = 0;
f01321e3:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01321e6:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					 LIST_REMOVE(&(FreeMemBlocksList), Next);
f01321ed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f01321f1:	75 17                	jne    f013220a <insert_sorted_with_merge_freeList+0x5dc>
f01321f3:	83 ec 04             	sub    $0x4,%esp
f01321f6:	68 43 c6 13 f0       	push   $0xf013c643
f01321fb:	68 c9 01 00 00       	push   $0x1c9
f0132200:	68 07 c6 13 f0       	push   $0xf013c607
f0132205:	e8 9c df fc ff       	call   f01001a6 <_panic>
f013220a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013220d:	8b 00                	mov    (%eax),%eax
f013220f:	85 c0                	test   %eax,%eax
f0132211:	74 10                	je     f0132223 <insert_sorted_with_merge_freeList+0x5f5>
f0132213:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132216:	8b 00                	mov    (%eax),%eax
f0132218:	8b 55 f0             	mov    -0x10(%ebp),%edx
f013221b:	8b 52 04             	mov    0x4(%edx),%edx
f013221e:	89 50 04             	mov    %edx,0x4(%eax)
f0132221:	eb 0b                	jmp    f013222e <insert_sorted_with_merge_freeList+0x600>
f0132223:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132226:	8b 40 04             	mov    0x4(%eax),%eax
f0132229:	a3 c4 84 6e f0       	mov    %eax,0xf06e84c4
f013222e:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132231:	8b 40 04             	mov    0x4(%eax),%eax
f0132234:	85 c0                	test   %eax,%eax
f0132236:	74 0f                	je     f0132247 <insert_sorted_with_merge_freeList+0x619>
f0132238:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013223b:	8b 40 04             	mov    0x4(%eax),%eax
f013223e:	8b 55 f0             	mov    -0x10(%ebp),%edx
f0132241:	8b 12                	mov    (%edx),%edx
f0132243:	89 10                	mov    %edx,(%eax)
f0132245:	eb 0a                	jmp    f0132251 <insert_sorted_with_merge_freeList+0x623>
f0132247:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013224a:	8b 00                	mov    (%eax),%eax
f013224c:	a3 c0 84 6e f0       	mov    %eax,0xf06e84c0
f0132251:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132254:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
f013225a:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013225d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f0132264:	a1 cc 84 6e f0       	mov    0xf06e84cc,%eax
f0132269:	48                   	dec    %eax
f013226a:	a3 cc 84 6e f0       	mov    %eax,0xf06e84cc
					 LIST_INSERT_HEAD(&(AvailableMemBlocksList), Next);
f013226f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
f0132273:	75 17                	jne    f013228c <insert_sorted_with_merge_freeList+0x65e>
f0132275:	83 ec 04             	sub    $0x4,%esp
f0132278:	68 e4 c5 13 f0       	push   $0xf013c5e4
f013227d:	68 ca 01 00 00       	push   $0x1ca
f0132282:	68 07 c6 13 f0       	push   $0xf013c607
f0132287:	e8 1a df fc ff       	call   f01001a6 <_panic>
f013228c:	8b 15 f4 84 6e f0    	mov    0xf06e84f4,%edx
f0132292:	8b 45 f0             	mov    -0x10(%ebp),%eax
f0132295:	89 10                	mov    %edx,(%eax)
f0132297:	8b 45 f0             	mov    -0x10(%ebp),%eax
f013229a:	8b 00                	mov    (%eax),%eax
f013229c:	85 c0                	test   %eax,%eax
f013229e:	74 0d                	je     f01322ad <insert_sorted_with_merge_freeList+0x67f>
f01322a0:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f01322a5:	8b 55 f0             	mov    -0x10(%ebp),%edx
f01322a8:	89 50 04             	mov    %edx,0x4(%eax)
f01322ab:	eb 08                	jmp    f01322b5 <insert_sorted_with_merge_freeList+0x687>
f01322ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322b0:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f01322b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322b8:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f01322bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
f01322c0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f01322c7:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f01322cc:	40                   	inc    %eax
f01322cd:	a3 00 85 6e f0       	mov    %eax,0xf06e8500
					 blockToInsert->size = 0;
f01322d2:	8b 45 08             	mov    0x8(%ebp),%eax
f01322d5:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
					 blockToInsert->sva = 0;
f01322dc:	8b 45 08             	mov    0x8(%ebp),%eax
f01322df:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
					 LIST_INSERT_HEAD(&(AvailableMemBlocksList), blockToInsert);
f01322e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
f01322ea:	75 17                	jne    f0132303 <insert_sorted_with_merge_freeList+0x6d5>
f01322ec:	83 ec 04             	sub    $0x4,%esp
f01322ef:	68 e4 c5 13 f0       	push   $0xf013c5e4
f01322f4:	68 cd 01 00 00       	push   $0x1cd
f01322f9:	68 07 c6 13 f0       	push   $0xf013c607
f01322fe:	e8 a3 de fc ff       	call   f01001a6 <_panic>
f0132303:	8b 15 f4 84 6e f0    	mov    0xf06e84f4,%edx
f0132309:	8b 45 08             	mov    0x8(%ebp),%eax
f013230c:	89 10                	mov    %edx,(%eax)
f013230e:	8b 45 08             	mov    0x8(%ebp),%eax
f0132311:	8b 00                	mov    (%eax),%eax
f0132313:	85 c0                	test   %eax,%eax
f0132315:	74 0d                	je     f0132324 <insert_sorted_with_merge_freeList+0x6f6>
f0132317:	a1 f4 84 6e f0       	mov    0xf06e84f4,%eax
f013231c:	8b 55 08             	mov    0x8(%ebp),%edx
f013231f:	89 50 04             	mov    %edx,0x4(%eax)
f0132322:	eb 08                	jmp    f013232c <insert_sorted_with_merge_freeList+0x6fe>
f0132324:	8b 45 08             	mov    0x8(%ebp),%eax
f0132327:	a3 f8 84 6e f0       	mov    %eax,0xf06e84f8
f013232c:	8b 45 08             	mov    0x8(%ebp),%eax
f013232f:	a3 f4 84 6e f0       	mov    %eax,0xf06e84f4
f0132334:	8b 45 08             	mov    0x8(%ebp),%eax
f0132337:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
f013233e:	a1 00 85 6e f0       	mov    0xf06e8500,%eax
f0132343:	40                   	inc    %eax
f0132344:	a3 00 85 6e f0       	mov    %eax,0xf06e8500

					 break;
f0132349:	eb 38                	jmp    f0132383 <insert_sorted_with_merge_freeList+0x755>
	{
		LIST_INSERT_HEAD(&(FreeMemBlocksList) , blockToInsert);
	}
	else
	{
		LIST_FOREACH(element, &(FreeMemBlocksList))
f013234b:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f0132350:	89 45 f4             	mov    %eax,-0xc(%ebp)
f0132353:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f0132357:	74 07                	je     f0132360 <insert_sorted_with_merge_freeList+0x732>
f0132359:	8b 45 f4             	mov    -0xc(%ebp),%eax
f013235c:	8b 00                	mov    (%eax),%eax
f013235e:	eb 05                	jmp    f0132365 <insert_sorted_with_merge_freeList+0x737>
f0132360:	b8 00 00 00 00       	mov    $0x0,%eax
f0132365:	a3 c8 84 6e f0       	mov    %eax,0xf06e84c8
f013236a:	a1 c8 84 6e f0       	mov    0xf06e84c8,%eax
f013236f:	85 c0                	test   %eax,%eax
f0132371:	0f 85 3b f9 ff ff    	jne    f0131cb2 <insert_sorted_with_merge_freeList+0x84>
f0132377:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
f013237b:	0f 85 31 f9 ff ff    	jne    f0131cb2 <insert_sorted_with_merge_freeList+0x84>
					 break;
				 }
			 }
		}
	}
}
f0132381:	eb 00                	jmp    f0132383 <insert_sorted_with_merge_freeList+0x755>
f0132383:	90                   	nop
f0132384:	c9                   	leave  
f0132385:	c3                   	ret    
f0132386:	66 90                	xchg   %ax,%ax

f0132388 <__udivdi3>:
f0132388:	55                   	push   %ebp
f0132389:	57                   	push   %edi
f013238a:	56                   	push   %esi
f013238b:	53                   	push   %ebx
f013238c:	83 ec 1c             	sub    $0x1c,%esp
f013238f:	8b 5c 24 30          	mov    0x30(%esp),%ebx
f0132393:	8b 4c 24 34          	mov    0x34(%esp),%ecx
f0132397:	8b 7c 24 38          	mov    0x38(%esp),%edi
f013239b:	89 5c 24 08          	mov    %ebx,0x8(%esp)
f013239f:	89 ca                	mov    %ecx,%edx
f01323a1:	89 f8                	mov    %edi,%eax
f01323a3:	8b 74 24 3c          	mov    0x3c(%esp),%esi
f01323a7:	85 f6                	test   %esi,%esi
f01323a9:	75 2d                	jne    f01323d8 <__udivdi3+0x50>
f01323ab:	39 cf                	cmp    %ecx,%edi
f01323ad:	77 65                	ja     f0132414 <__udivdi3+0x8c>
f01323af:	89 fd                	mov    %edi,%ebp
f01323b1:	85 ff                	test   %edi,%edi
f01323b3:	75 0b                	jne    f01323c0 <__udivdi3+0x38>
f01323b5:	b8 01 00 00 00       	mov    $0x1,%eax
f01323ba:	31 d2                	xor    %edx,%edx
f01323bc:	f7 f7                	div    %edi
f01323be:	89 c5                	mov    %eax,%ebp
f01323c0:	31 d2                	xor    %edx,%edx
f01323c2:	89 c8                	mov    %ecx,%eax
f01323c4:	f7 f5                	div    %ebp
f01323c6:	89 c1                	mov    %eax,%ecx
f01323c8:	89 d8                	mov    %ebx,%eax
f01323ca:	f7 f5                	div    %ebp
f01323cc:	89 cf                	mov    %ecx,%edi
f01323ce:	89 fa                	mov    %edi,%edx
f01323d0:	83 c4 1c             	add    $0x1c,%esp
f01323d3:	5b                   	pop    %ebx
f01323d4:	5e                   	pop    %esi
f01323d5:	5f                   	pop    %edi
f01323d6:	5d                   	pop    %ebp
f01323d7:	c3                   	ret    
f01323d8:	39 ce                	cmp    %ecx,%esi
f01323da:	77 28                	ja     f0132404 <__udivdi3+0x7c>
f01323dc:	0f bd fe             	bsr    %esi,%edi
f01323df:	83 f7 1f             	xor    $0x1f,%edi
f01323e2:	75 40                	jne    f0132424 <__udivdi3+0x9c>
f01323e4:	39 ce                	cmp    %ecx,%esi
f01323e6:	72 0a                	jb     f01323f2 <__udivdi3+0x6a>
f01323e8:	3b 44 24 08          	cmp    0x8(%esp),%eax
f01323ec:	0f 87 9e 00 00 00    	ja     f0132490 <__udivdi3+0x108>
f01323f2:	b8 01 00 00 00       	mov    $0x1,%eax
f01323f7:	89 fa                	mov    %edi,%edx
f01323f9:	83 c4 1c             	add    $0x1c,%esp
f01323fc:	5b                   	pop    %ebx
f01323fd:	5e                   	pop    %esi
f01323fe:	5f                   	pop    %edi
f01323ff:	5d                   	pop    %ebp
f0132400:	c3                   	ret    
f0132401:	8d 76 00             	lea    0x0(%esi),%esi
f0132404:	31 ff                	xor    %edi,%edi
f0132406:	31 c0                	xor    %eax,%eax
f0132408:	89 fa                	mov    %edi,%edx
f013240a:	83 c4 1c             	add    $0x1c,%esp
f013240d:	5b                   	pop    %ebx
f013240e:	5e                   	pop    %esi
f013240f:	5f                   	pop    %edi
f0132410:	5d                   	pop    %ebp
f0132411:	c3                   	ret    
f0132412:	66 90                	xchg   %ax,%ax
f0132414:	89 d8                	mov    %ebx,%eax
f0132416:	f7 f7                	div    %edi
f0132418:	31 ff                	xor    %edi,%edi
f013241a:	89 fa                	mov    %edi,%edx
f013241c:	83 c4 1c             	add    $0x1c,%esp
f013241f:	5b                   	pop    %ebx
f0132420:	5e                   	pop    %esi
f0132421:	5f                   	pop    %edi
f0132422:	5d                   	pop    %ebp
f0132423:	c3                   	ret    
f0132424:	bd 20 00 00 00       	mov    $0x20,%ebp
f0132429:	89 eb                	mov    %ebp,%ebx
f013242b:	29 fb                	sub    %edi,%ebx
f013242d:	89 f9                	mov    %edi,%ecx
f013242f:	d3 e6                	shl    %cl,%esi
f0132431:	89 c5                	mov    %eax,%ebp
f0132433:	88 d9                	mov    %bl,%cl
f0132435:	d3 ed                	shr    %cl,%ebp
f0132437:	89 e9                	mov    %ebp,%ecx
f0132439:	09 f1                	or     %esi,%ecx
f013243b:	89 4c 24 0c          	mov    %ecx,0xc(%esp)
f013243f:	89 f9                	mov    %edi,%ecx
f0132441:	d3 e0                	shl    %cl,%eax
f0132443:	89 c5                	mov    %eax,%ebp
f0132445:	89 d6                	mov    %edx,%esi
f0132447:	88 d9                	mov    %bl,%cl
f0132449:	d3 ee                	shr    %cl,%esi
f013244b:	89 f9                	mov    %edi,%ecx
f013244d:	d3 e2                	shl    %cl,%edx
f013244f:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132453:	88 d9                	mov    %bl,%cl
f0132455:	d3 e8                	shr    %cl,%eax
f0132457:	09 c2                	or     %eax,%edx
f0132459:	89 d0                	mov    %edx,%eax
f013245b:	89 f2                	mov    %esi,%edx
f013245d:	f7 74 24 0c          	divl   0xc(%esp)
f0132461:	89 d6                	mov    %edx,%esi
f0132463:	89 c3                	mov    %eax,%ebx
f0132465:	f7 e5                	mul    %ebp
f0132467:	39 d6                	cmp    %edx,%esi
f0132469:	72 19                	jb     f0132484 <__udivdi3+0xfc>
f013246b:	74 0b                	je     f0132478 <__udivdi3+0xf0>
f013246d:	89 d8                	mov    %ebx,%eax
f013246f:	31 ff                	xor    %edi,%edi
f0132471:	e9 58 ff ff ff       	jmp    f01323ce <__udivdi3+0x46>
f0132476:	66 90                	xchg   %ax,%ax
f0132478:	8b 54 24 08          	mov    0x8(%esp),%edx
f013247c:	89 f9                	mov    %edi,%ecx
f013247e:	d3 e2                	shl    %cl,%edx
f0132480:	39 c2                	cmp    %eax,%edx
f0132482:	73 e9                	jae    f013246d <__udivdi3+0xe5>
f0132484:	8d 43 ff             	lea    -0x1(%ebx),%eax
f0132487:	31 ff                	xor    %edi,%edi
f0132489:	e9 40 ff ff ff       	jmp    f01323ce <__udivdi3+0x46>
f013248e:	66 90                	xchg   %ax,%ax
f0132490:	31 c0                	xor    %eax,%eax
f0132492:	e9 37 ff ff ff       	jmp    f01323ce <__udivdi3+0x46>
f0132497:	90                   	nop

f0132498 <__umoddi3>:
f0132498:	55                   	push   %ebp
f0132499:	57                   	push   %edi
f013249a:	56                   	push   %esi
f013249b:	53                   	push   %ebx
f013249c:	83 ec 1c             	sub    $0x1c,%esp
f013249f:	8b 4c 24 30          	mov    0x30(%esp),%ecx
f01324a3:	8b 74 24 34          	mov    0x34(%esp),%esi
f01324a7:	8b 7c 24 38          	mov    0x38(%esp),%edi
f01324ab:	8b 44 24 3c          	mov    0x3c(%esp),%eax
f01324af:	89 44 24 0c          	mov    %eax,0xc(%esp)
f01324b3:	89 4c 24 08          	mov    %ecx,0x8(%esp)
f01324b7:	89 f3                	mov    %esi,%ebx
f01324b9:	89 fa                	mov    %edi,%edx
f01324bb:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01324bf:	89 34 24             	mov    %esi,(%esp)
f01324c2:	85 c0                	test   %eax,%eax
f01324c4:	75 1a                	jne    f01324e0 <__umoddi3+0x48>
f01324c6:	39 f7                	cmp    %esi,%edi
f01324c8:	0f 86 a2 00 00 00    	jbe    f0132570 <__umoddi3+0xd8>
f01324ce:	89 c8                	mov    %ecx,%eax
f01324d0:	89 f2                	mov    %esi,%edx
f01324d2:	f7 f7                	div    %edi
f01324d4:	89 d0                	mov    %edx,%eax
f01324d6:	31 d2                	xor    %edx,%edx
f01324d8:	83 c4 1c             	add    $0x1c,%esp
f01324db:	5b                   	pop    %ebx
f01324dc:	5e                   	pop    %esi
f01324dd:	5f                   	pop    %edi
f01324de:	5d                   	pop    %ebp
f01324df:	c3                   	ret    
f01324e0:	39 f0                	cmp    %esi,%eax
f01324e2:	0f 87 ac 00 00 00    	ja     f0132594 <__umoddi3+0xfc>
f01324e8:	0f bd e8             	bsr    %eax,%ebp
f01324eb:	83 f5 1f             	xor    $0x1f,%ebp
f01324ee:	0f 84 ac 00 00 00    	je     f01325a0 <__umoddi3+0x108>
f01324f4:	bf 20 00 00 00       	mov    $0x20,%edi
f01324f9:	29 ef                	sub    %ebp,%edi
f01324fb:	89 fe                	mov    %edi,%esi
f01324fd:	89 7c 24 0c          	mov    %edi,0xc(%esp)
f0132501:	89 e9                	mov    %ebp,%ecx
f0132503:	d3 e0                	shl    %cl,%eax
f0132505:	89 d7                	mov    %edx,%edi
f0132507:	89 f1                	mov    %esi,%ecx
f0132509:	d3 ef                	shr    %cl,%edi
f013250b:	09 c7                	or     %eax,%edi
f013250d:	89 e9                	mov    %ebp,%ecx
f013250f:	d3 e2                	shl    %cl,%edx
f0132511:	89 14 24             	mov    %edx,(%esp)
f0132514:	89 d8                	mov    %ebx,%eax
f0132516:	d3 e0                	shl    %cl,%eax
f0132518:	89 c2                	mov    %eax,%edx
f013251a:	8b 44 24 08          	mov    0x8(%esp),%eax
f013251e:	d3 e0                	shl    %cl,%eax
f0132520:	89 44 24 04          	mov    %eax,0x4(%esp)
f0132524:	8b 44 24 08          	mov    0x8(%esp),%eax
f0132528:	89 f1                	mov    %esi,%ecx
f013252a:	d3 e8                	shr    %cl,%eax
f013252c:	09 d0                	or     %edx,%eax
f013252e:	d3 eb                	shr    %cl,%ebx
f0132530:	89 da                	mov    %ebx,%edx
f0132532:	f7 f7                	div    %edi
f0132534:	89 d3                	mov    %edx,%ebx
f0132536:	f7 24 24             	mull   (%esp)
f0132539:	89 c6                	mov    %eax,%esi
f013253b:	89 d1                	mov    %edx,%ecx
f013253d:	39 d3                	cmp    %edx,%ebx
f013253f:	0f 82 87 00 00 00    	jb     f01325cc <__umoddi3+0x134>
f0132545:	0f 84 91 00 00 00    	je     f01325dc <__umoddi3+0x144>
f013254b:	8b 54 24 04          	mov    0x4(%esp),%edx
f013254f:	29 f2                	sub    %esi,%edx
f0132551:	19 cb                	sbb    %ecx,%ebx
f0132553:	89 d8                	mov    %ebx,%eax
f0132555:	8a 4c 24 0c          	mov    0xc(%esp),%cl
f0132559:	d3 e0                	shl    %cl,%eax
f013255b:	89 e9                	mov    %ebp,%ecx
f013255d:	d3 ea                	shr    %cl,%edx
f013255f:	09 d0                	or     %edx,%eax
f0132561:	89 e9                	mov    %ebp,%ecx
f0132563:	d3 eb                	shr    %cl,%ebx
f0132565:	89 da                	mov    %ebx,%edx
f0132567:	83 c4 1c             	add    $0x1c,%esp
f013256a:	5b                   	pop    %ebx
f013256b:	5e                   	pop    %esi
f013256c:	5f                   	pop    %edi
f013256d:	5d                   	pop    %ebp
f013256e:	c3                   	ret    
f013256f:	90                   	nop
f0132570:	89 fd                	mov    %edi,%ebp
f0132572:	85 ff                	test   %edi,%edi
f0132574:	75 0b                	jne    f0132581 <__umoddi3+0xe9>
f0132576:	b8 01 00 00 00       	mov    $0x1,%eax
f013257b:	31 d2                	xor    %edx,%edx
f013257d:	f7 f7                	div    %edi
f013257f:	89 c5                	mov    %eax,%ebp
f0132581:	89 f0                	mov    %esi,%eax
f0132583:	31 d2                	xor    %edx,%edx
f0132585:	f7 f5                	div    %ebp
f0132587:	89 c8                	mov    %ecx,%eax
f0132589:	f7 f5                	div    %ebp
f013258b:	89 d0                	mov    %edx,%eax
f013258d:	e9 44 ff ff ff       	jmp    f01324d6 <__umoddi3+0x3e>
f0132592:	66 90                	xchg   %ax,%ax
f0132594:	89 c8                	mov    %ecx,%eax
f0132596:	89 f2                	mov    %esi,%edx
f0132598:	83 c4 1c             	add    $0x1c,%esp
f013259b:	5b                   	pop    %ebx
f013259c:	5e                   	pop    %esi
f013259d:	5f                   	pop    %edi
f013259e:	5d                   	pop    %ebp
f013259f:	c3                   	ret    
f01325a0:	3b 04 24             	cmp    (%esp),%eax
f01325a3:	72 06                	jb     f01325ab <__umoddi3+0x113>
f01325a5:	3b 7c 24 04          	cmp    0x4(%esp),%edi
f01325a9:	77 0f                	ja     f01325ba <__umoddi3+0x122>
f01325ab:	89 f2                	mov    %esi,%edx
f01325ad:	29 f9                	sub    %edi,%ecx
f01325af:	1b 54 24 0c          	sbb    0xc(%esp),%edx
f01325b3:	89 14 24             	mov    %edx,(%esp)
f01325b6:	89 4c 24 04          	mov    %ecx,0x4(%esp)
f01325ba:	8b 44 24 04          	mov    0x4(%esp),%eax
f01325be:	8b 14 24             	mov    (%esp),%edx
f01325c1:	83 c4 1c             	add    $0x1c,%esp
f01325c4:	5b                   	pop    %ebx
f01325c5:	5e                   	pop    %esi
f01325c6:	5f                   	pop    %edi
f01325c7:	5d                   	pop    %ebp
f01325c8:	c3                   	ret    
f01325c9:	8d 76 00             	lea    0x0(%esi),%esi
f01325cc:	2b 04 24             	sub    (%esp),%eax
f01325cf:	19 fa                	sbb    %edi,%edx
f01325d1:	89 d1                	mov    %edx,%ecx
f01325d3:	89 c6                	mov    %eax,%esi
f01325d5:	e9 71 ff ff ff       	jmp    f013254b <__umoddi3+0xb3>
f01325da:	66 90                	xchg   %ax,%ax
f01325dc:	39 44 24 04          	cmp    %eax,0x4(%esp)
f01325e0:	72 ea                	jb     f01325cc <__umoddi3+0x134>
f01325e2:	89 d9                	mov    %ebx,%ecx
f01325e4:	e9 62 ff ff ff       	jmp    f013254b <__umoddi3+0xb3>
